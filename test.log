Testing test/test_src/ack.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn ack #f0 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b6 (int32) {
    return $b6.0
  }
  .bb #b4 () {
    let %5: int32 = sub($f0, 1)
    let %6: int32 = sub($f1, 1)
    let %7: int32 = call f0($f0, %6)
    let %8: int32 = call f0(%5, %7)
    jump b5(%8)
  }
  .bb #b1 () {
    let %1: int32 = add($f1, 1)
    jump b6(%1)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b2 () {
    let %2: bool = le($f1, 0)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = sub($f0, 1)
    let %4: int32 = call f0(%3, 1)
    jump b5(%4)
  }
  .bb #b0 () {
    let %0: bool = le($f0, 0)
    br %0 b1() b2()
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(3, 8)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of ack"];
  r0 [label="v3 ← a1", color=green];
  r20 [label="v10 ← a1", color=green];
  r3 [label="v12 ← a0", color=green];
  r9 [label="a0", color=blue];
  r6 [label="v27 ← a1", color=green];
  r13 [label="v7 ← a1", color=green];
  r4 [label="zero", color=blue];
  r1 [label="v15 ← a0", color=green];
  r11 [label="v6 ← a1", color=green];
  r7 [label="v5 ← a1", color=green];
  r10 [label="v25 ← a1", color=green];
  r22 [label="v11 ← a0", color=green];
  r14 [label="a1", color=blue];
  r8 [label="v14 ← a1", color=green];
  r5 [label="v2 ← a0", color=green];
  r15 [label="v8 ← a1", color=green];
  r2 [label="v13 ← a0", color=green];
  r16 [label="v9 ← a1", color=green];
  r18 [label="v4 ← a2", color=green];
  r19 [label="v19 ← a1", color=green];
  r17 [label="v29 ← a0", color=green];
  r21 [label="v17 ← a1", color=green];
  r12 [label="v23 ← a1", color=green];
  r5 -- r12;
  r9 -- r11;
  r0 -- r15;
  r5 -- r6;
  r0 -- r13;
  r5 -- r21;
  r4 -- r5;
  r14 -- r18;
  r11 -- r13;
  r14 -- r17;
  r0 -- r2;
  r5 -- r9;
  r5 -- r20;
  r0 -- r9;
  r9 -- r15;
  r5 -- r10;
  r11 -- r14;
  r5 -- r22;
  r8 -- r9;
  r0 -- r5;
  r5 -- r13;
  r0 -- r14;
  r0 -- r1;
  r11 -- r12;
  r5 -- r19;
  r0 -- r10;
  r4 -- r7;
  r5 -- r7;
  r0 -- r12;
  r5 -- r14;
  r11 -- r15;
  r0 -- r11;
  r9 -- r17;
  r4 -- r18;
  r4 -- r17;
  r0 -- r4;
  r4 -- r6;
  r5 -- r16;
  r5 -- r11;
  r0 -- r16;
  r9 -- r13;
  r0 -- r7;
  r4 -- r14;
  r4 -- r9;
  r9 -- r18;
  r0 -- r6;
  r9 -- r14;
  r5 -- r15;
  r9 -- r21;
  comment = "22:v11-> 5:v2-> 4:zero-> 20:v10-> 19:v19-> 18:v4-> 9:a0-> 14:a1-> 17:v29-> 16:v9-> 13:v7-> 11:v6-> 3:v12-> 2:v13-> 0:v3-> 21:v17-> 6:v27-> 8:v14-> 7:v5-> 10:v25-> 1:v15-> 12:v23-> 15:v8"
  comment = "v3<-a1;v10<-a1;v12<-a0;v27<-a1;v7<-a1;v15<-a0;v6<-a1;v5<-a1;v25<-a1;v11<-a0;v14<-a1;v2<-a0;v8<-a1;v13<-a0;v9<-a1;v4<-a2;v19<-a1;v29<-a0;v17<-a1;v23<-a1;"
}

graph G {
  graph [label="float interference graph of ack"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v2 ← a0", color=green];
  r6 [label="v3 ← a0", color=green];
  r4 [label="a1", color=blue];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v6 ← a1", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r2 -- r4;
  r0 -- r1;
  r2 -- r3;
  r0 -- r5;
  r0 -- r6;
  r0 -- r2;
  comment = "6:v3-> 5:v2-> 4:a1-> 2:a0-> 0:zero-> 3:v6-> 1:v5"
  comment = "v2<-a0;v3<-a0;v5<-a0;v6<-a1;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl ack
  .type ack, @function
ack:
; block info: defs: [v3, v4, v29, v2], uses: [a0, zero, v29, v4, a1, v2], upward_exposed: [a1, a0, zero], params_defs: []
; live_in: [a1, a0, zero], live_out: [v2, zero, v3]
; block parameters: []
.ack_b0:
  mv v2, a0  ; live: [a1, a0, zero]
  mv v3, a1  ; live: [a1, a0, zero, v2]
  slt v29, v2, zero  ; live: [a1, a0, zero, v2]
  xori v4, v29, 1  ; live: [a1, a0, zero, v29]
; control
  bne v4, zero, .ack_b1  ; live: [v4, a1, a0, zero]
  j .ack_b2  ; live: [a1, a0, zero]

; block info: defs: [v14, v15, v13], uses: [v15, v13, v3], upward_exposed: [v3], params_defs: []
; live_in: [v3], live_out: [v14]
; block parameters: []
.ack_b1:
  li v15, 1  ; live: [v3]
  add v13, v3, v15  ; live: [v15, v3]
; control
  mv v14, v13  ; live: [v13, v3]
  j .ack_b6  ; live: [v3]

; block info: defs: [v14], uses: [v12], upward_exposed: [v12], params_defs: [v12]
; live_in: [v12], live_out: [v14]
; block parameters: [v12]
.ack_b5:
; control
  mv v14, v12  ; live: [v12]
  j .ack_b6  ; live: [v12]

; block info: defs: [v5, v27], uses: [v5, zero, v27, v3], upward_exposed: [zero, v3], params_defs: []
; live_in: [v2, zero, v3], live_out: [v3, v2]
; block parameters: []
.ack_b2:
  slt v27, v3, zero  ; live: [v3, zero, v2]
  xori v5, v27, 1  ; live: [v3, zero, v27, v2]
; control
  bne v5, zero, .ack_b3  ; live: [v3, v5, zero, v2]
  j .ack_b4  ; live: [v3, zero, v2]

; block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
; live_in: [v14], live_out: []
; block parameters: [v14]
.ack_b6:
; control
  mv a0, v14  ; live: [v14]
  ret  ; live: [v14, a0]

; block info: defs: [v25, t1, v7, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2], uses: [v2, v25, a0, v23, v7, v8, a1, v6, v9, v3], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, v3], live_out: [v12]
; block parameters: []
.ack_b4:
  li v25, 1  ; live: [v3, v2]
  sub v6, v2, v25  ; live: [v3, v25, v2]
  li v23, 1  ; live: [v3, v6, v2]
  sub v7, v3, v23  ; live: [v3, v6, v23, v2]
  mv a0, v2  ; live: [v3, v7, v6, v2]
  mv a1, v7  ; live: [v3, v7, v6, a0, v2]
  call ack  ; live: [v3, v6, a1, a0, v2]
  mv v8, a0  ; live: [v3, v6, a0, v2]
  mv a0, v6  ; live: [v3, v8, v6, v2]
  mv a1, v8  ; live: [v3, v8, a0, v2]
  call ack  ; live: [v3, a1, a0, v2]
  mv v9, a0  ; live: [v3, a0, v2]
; control
  mv v12, v9  ; live: [v3, v9, v2]
  j .ack_b5  ; live: [v3, v2]

; block info: defs: [t1, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, a0, v19, v17, a1, v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v12]
; block parameters: []
.ack_b3:
  li v19, 1  ; live: [v2]
  sub v10, v2, v19  ; live: [v19, v2]
  mv a0, v10  ; live: [v10, v2]
  li v17, 1  ; live: [a0, v2]
  mv a1, v17  ; live: [v17, a0, v2]
  call ack  ; live: [a1, a0, v2]
  mv v11, a0  ; live: [a0, v2]
; control
  mv v12, v11  ; live: [v11, v2]
  j .ack_b5  ; live: [v2]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v6, a1, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 3  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  li v6, 8  ; live: [zero, a0]
  mv a1, v6  ; live: [v6, zero, a0]
  call ack  ; live: [a1, zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/adder.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = call f0(3)
    let %1: int32 = apply %0(7)
    let %2: unit = ext_call minimbt_print_int(%1)
    return %2
  }
}
.fn make_adder #f0 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f1, [1] = $f0
    return f0.m0
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn adder #f1 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(^1, $f0)
    return %0
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of adder"];
  r0 [label="s10", color=blue];
  r5 [label="v4 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="a0", color=blue];
  r3 [label="v2 ← a1", color=green];
  r2 [label="v0 ← a0", color=green];
  r0 -- r2;
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r2 -- r3;
  r3 -- r4;
  r0 -- r5;
  r1 -- r2;
  comment = "5:v4-> 0:s10-> 1:a0-> 4:v3-> 3:v2-> 2:v0"
  comment = "v4<-a0;v3<-a0;v2<-a1;v0<-a0;"
}

graph G {
  graph [label="float interference graph of adder"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of make_adder"];
  r0 [label="a0", color=blue];
  r4 [label="v7 ← a0", color=green];
  r1 [label="v2 ← a1", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="v5 ← a0", color=green];
  r3 -- r4;
  r1 -- r3;
  r1 -- r4;
  r1 -- r2;
  comment = "4:v7-> 3:v3-> 2:v5-> 1:v2-> 0:a0"
  comment = "v7<-a0;v2<-a1;v3<-a0;v5<-a0;"
}

graph G {
  graph [label="float interference graph of make_adder"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r6 [label="v4 ← a0", color=green];
  r5 [label="v3 ← a0", color=green];
  r4 [label="v7 ← a0", color=green];
  r1 [label="v9 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r5;
  r0 -- r6;
  r0 -- r2;
  comment = "6:v4-> 0:zero-> 2:a0-> 5:v3-> 4:v7-> 3:v2-> 1:v9"
  comment = "v4<-a0;v3<-a0;v7<-a0;v9<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl adder
  .type adder, @function
adder:
; block info: defs: [v3, v0, v4, a0, v2], uses: [v3, a0, v0, v4, s10, v2], upward_exposed: [s10, a0], params_defs: []
; live_in: [s10, a0], live_out: []
; block parameters: []
.adder_b0:
  mv v0, s10  ; live: [s10, a0]
  mv v2, a0  ; live: [v0, s10, a0]
  lw v3, 8(v0)  ; live: [v0, s10, v2]
  add v4, v3, v2  ; live: [v2, s10, v3]
; control
  mv a0, v4  ; live: [v4, s10]
  ret  ; live: [s10, a0]

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl make_adder
  .type make_adder, @function
make_adder:
; block info: defs: [v3, v7, v5, a0, v2], uses: [v2, v5, a0, v7, s11, v3], upward_exposed: [s11, a0], params_defs: []
; live_in: [s11, a0], live_out: []
; block parameters: []
.make_adder_b0:
  mv v2, a0  ; live: [s11, a0]
  addi v5, s11, -16  ; live: [s11, v2]
  andi v3, v5, -8  ; live: [v5, s11, v2]
  la v7, adder  ; live: [v2, s11, v3]
  sd v7, 0(v3)  ; live: [v2, v7, s11, v3]
  sd v2, 8(v3)  ; live: [v2, s11, v3]
; control
  mv a0, v3  ; live: [s11, v3]
  ret  ; live: [s11, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, a0, zero, v7, v4, v9, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v9, 3  ; live: [zero]
  mv a0, v9  ; live: [zero, v9]
  call make_adder  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv s10, v2  ; live: [zero, v2]
  ld v6, 0(v2)  ; live: [zero, v2]
  li v7, 7  ; live: [zero]
  mv a0, v7  ; live: [zero, v7]
  jalr v6  ; live: [zero, a0]
  mv v3, a0  ; live: [zero, a0]
  mv a0, v3  ; live: [zero, v3]
  call minimbt_print_int  ; live: [zero, a0]
  mv v4, zero  ; live: [zero]
; control
  mv a0, v4  ; live: [v4, zero]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/adder2.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = call f0(2)
    let %1: closure(int32) -> int32 = call f0(3)
    let %2: int32 = apply %0(10)
    let %3: int32 = apply %1(20)
    let %4: int32 = add(%2, %3)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.fn make_adder #f0 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f1, [1] = $f0
    return f0.m0
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn adder #f1 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(^1, $f0)
    return %0
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of adder"];
  r0 [label="s10", color=blue];
  r5 [label="v4 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="a0", color=blue];
  r3 [label="v2 ← a1", color=green];
  r2 [label="v0 ← a0", color=green];
  r0 -- r2;
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r2 -- r3;
  r3 -- r4;
  r0 -- r5;
  r1 -- r2;
  comment = "5:v4-> 0:s10-> 1:a0-> 4:v3-> 3:v2-> 2:v0"
  comment = "v4<-a0;v3<-a0;v2<-a1;v0<-a0;"
}

graph G {
  graph [label="float interference graph of adder"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of make_adder"];
  r0 [label="a0", color=blue];
  r4 [label="v7 ← a0", color=green];
  r1 [label="v2 ← a1", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="v5 ← a0", color=green];
  r3 -- r4;
  r1 -- r3;
  r1 -- r4;
  r1 -- r2;
  comment = "4:v7-> 3:v3-> 2:v5-> 1:v2-> 0:a0"
  comment = "v7<-a0;v2<-a1;v3<-a0;v5<-a0;"
}

graph G {
  graph [label="float interference graph of make_adder"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v3 ← a0", color=green];
  r3 [label="v2 ← a1", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v5 ← a0", color=green];
  r6 [label="v14 ← a0", color=green];
  r4 [label="v16 ← a0", color=green];
  r1 [label="v18 ← a0", color=green];
  r11 [label="v7 ← a0", color=green];
  r7 [label="v4 ← a1", color=green];
  r10 [label="v6 ← a0", color=green];
  r8 [label="v11 ← a0", color=green];
  r2 -- r5;
  r0 -- r1;
  r0 -- r10;
  r5 -- r6;
  r5 -- r7;
  r3 -- r4;
  r0 -- r11;
  r2 -- r7;
  r0 -- r2;
  r0 -- r3;
  r0 -- r4;
  r7 -- r9;
  r0 -- r8;
  r0 -- r9;
  r7 -- r8;
  r0 -- r7;
  r2 -- r3;
  r3 -- r5;
  r0 -- r5;
  r0 -- r6;
  comment = "11:v7-> 10:v6-> 0:zero-> 2:a0-> 9:v5-> 8:v11-> 7:v4-> 6:v14-> 5:v3-> 4:v16-> 3:v2-> 1:v18"
  comment = "v3<-a0;v2<-a1;v5<-a0;v14<-a0;v16<-a0;v18<-a0;v7<-a0;v4<-a1;v6<-a0;v11<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl adder
  .type adder, @function
adder:
; block info: defs: [v3, v0, v4, a0, v2], uses: [v3, a0, v0, v4, s10, v2], upward_exposed: [s10, a0], params_defs: []
; live_in: [s10, a0], live_out: []
; block parameters: []
.adder_b0:
  mv v0, s10  ; live: [s10, a0]
  mv v2, a0  ; live: [v0, s10, a0]
  lw v3, 8(v0)  ; live: [v0, s10, v2]
  add v4, v3, v2  ; live: [v2, s10, v3]
; control
  mv a0, v4  ; live: [v4, s10]
  ret  ; live: [s10, a0]

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl make_adder
  .type make_adder, @function
make_adder:
; block info: defs: [v3, v7, v5, a0, v2], uses: [v2, v5, a0, v7, s11, v3], upward_exposed: [s11, a0], params_defs: []
; live_in: [s11, a0], live_out: []
; block parameters: []
.make_adder_b0:
  mv v2, a0  ; live: [s11, a0]
  addi v5, s11, -16  ; live: [s11, v2]
  andi v3, v5, -8  ; live: [v5, s11, v2]
  la v7, adder  ; live: [v2, s11, v3]
  sd v7, 0(v3)  ; live: [v2, v7, s11, v3]
  sd v2, 8(v3)  ; live: [v2, s11, v3]
; control
  mv a0, v3  ; live: [s11, v3]
  ret  ; live: [s11, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v16, v14, v13, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v11, v16, v14, v5, v18, a0, zero, v7, v4, v6, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v18, 2  ; live: [zero]
  mv a0, v18  ; live: [v18, zero]
  call make_adder  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  li v16, 3  ; live: [zero, v2]
  mv a0, v16  ; live: [v16, zero, v2]
  call make_adder  ; live: [zero, a0, v2]
  mv v3, a0  ; live: [zero, a0, v2]
  mv s10, v2  ; live: [v2, zero, v3]
  ld v13, 0(v2)  ; live: [v2, zero, v3]
  li v14, 10  ; live: [zero, v3]
  mv a0, v14  ; live: [v14, zero, v3]
  jalr v13  ; live: [zero, a0, v3]
  mv v4, a0  ; live: [zero, a0, v3]
  mv s10, v3  ; live: [v4, zero, v3]
  ld v10, 0(v3)  ; live: [v4, zero, v3]
  li v11, 20  ; live: [v4, zero]
  mv a0, v11  ; live: [v11, v4, zero]
  jalr v10  ; live: [v4, zero, a0]
  mv v5, a0  ; live: [v4, zero, a0]
  add v6, v4, v5  ; live: [v4, v5, zero]
  mv a0, v6  ; live: [v6, zero]
  call minimbt_print_int  ; live: [zero, a0]
  mv v7, zero  ; live: [zero]
; control
  mv a0, v7  ; live: [zero, v7]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/bf.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn lp #f2 : closure() -> unit
.freevars (array[int32], array[int32], int32, closure(int32) -> int32, array[int32])
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 offset(^1, 0)
    let %1: int32 = load int32 offset(^2, %0)
    let %2: bool = eq(%1, 0)
    br %2 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %3: int32 = add(^3, 1)
    let %4: int32 = apply ^4(%3)
    let _ = store int32 offset(^5, 0) <- %4
    let %6: unit = apply self()
    jump b3(%6)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn thunk_start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn aux #f1 : closure(int32) -> int32
.freevars (int32, array[int32], array[int32], array[int32])
.entry b0 {
  .bb #b23 (int32) {
    jump b24($b23.0)
  }
  .bb #b8 () {
    let %22: bool = eq(%1, 4)
    br %22 b9() b10()
  }
  .bb #b9 () {
    let %23: int32 = load int32 offset(^3, 0)
    let %24: int32 = load int32 offset(^3, 0)
    let %25: int32 = load int32 offset(^4, %24)
    let %26: int32 = sub(%25, 1)
    let _ = store int32 offset(^4, %23) <- %26
    let %28: int32 = add($f0, 1)
    let %29: int32 = apply self(%28)
    jump b20(%29)
  }
  .bb #b16 () {
    jump b17($f0)
  }
  .bb #b13 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = $f0
    let _ = alloc <m1: closure() -> unit heap(6)> <- [0] = f2, [1] = ^3, [2] = ^4, [3] = $f0, [4] = self, [5] = f1.m0
    let %39: unit = apply f1.m1()
    let %40: int32 = load int32 offset(f1.m0, 0)
    let %41: int32 = add(%40, 1)
    let %42: int32 = apply self(%41)
    jump b18(%42)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b15 () {
    jump b17($f0)
  }
  .bb #b1 () {
    jump b24($f0)
  }
  .bb #b11 () {
    let %31: int32 = load int32 offset(^3, 0)
    let %32: int32 = load int32 offset(^4, %31)
    let %33: unit = ext_call minimbt_print_char(%32)
    let %34: int32 = add($f0, 1)
    let %35: int32 = apply self(%34)
    jump b19(%35)
  }
  .bb #b2 () {
    let %1: int32 = load int32 offset(^2, $f0)
    let %2: bool = eq(%1, 1)
    br %2 b3() b4()
  }
  .bb #b18 (int32) {
    jump b19($b18.0)
  }
  .bb #b24 (int32) {
    return $b24.0
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (int32) {
    jump b23($b22.0)
  }
  .bb #b20 (int32) {
    jump b21($b20.0)
  }
  .bb #b6 () {
    let %14: bool = eq(%1, 3)
    br %14 b7() b8()
  }
  .bb #b12 () {
    let %36: bool = eq(%1, 7)
    br %36 b13() b14()
  }
  .bb #b4 () {
    let %8: bool = eq(%1, 2)
    br %8 b5() b6()
  }
  .bb #b17 (int32) {
    jump b18($b17.0)
  }
  .bb #b0 () {
    let %0: bool = le(^1, $f0)
    br %0 b1() b2()
  }
  .bb #b10 () {
    let %30: bool = eq(%1, 5)
    br %30 b11() b12()
  }
  .bb #b5 () {
    let %9: int32 = load int32 offset(^3, 0)
    let %10: int32 = sub(%9, 1)
    let _ = store int32 offset(^3, 0) <- %10
    let %12: int32 = add($f0, 1)
    let %13: int32 = apply self(%12)
    jump b22(%13)
  }
  .bb #b3 () {
    let %3: int32 = load int32 offset(^3, 0)
    let %4: int32 = add(%3, 1)
    let _ = store int32 offset(^3, 0) <- %4
    let %6: int32 = add($f0, 1)
    let %7: int32 = apply self(%6)
    jump b23(%7)
  }
  .bb #b14 () {
    let %43: bool = eq(%1, 8)
    br %43 b15() b16()
  }
  .bb #b7 () {
    let %15: int32 = load int32 offset(^3, 0)
    let %16: int32 = load int32 offset(^3, 0)
    let %17: int32 = load int32 offset(^4, %16)
    let %18: int32 = add(%17, 1)
    let _ = store int32 offset(^4, %15) <- %18
    let %20: int32 = add($f0, 1)
    let %21: int32 = apply self(%20)
    jump b21(%21)
  }
}
.fn bf #f0 : fn(int32, array[int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(1)> <- [..] = 0
    let _ = alloc <m1: array[int32] heap(1024)> <- [..] = 0
    let _ = alloc <m2: closure(int32) -> int32 heap(5)> <- [0] = f1, [1] = $f0, [2] = $f1, [3] = f0.m0, [4] = f0.m1
    let %3: int32 = apply f0.m2(0)
    return ()
  }
}
.fn main #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(23)> <- [..] = 0
    let _ = store int32 offset(f3.m0, 0) <- 3
    let _ = store int32 offset(f3.m0, 1) <- 3
    let _ = store int32 offset(f3.m0, 2) <- 3
    let _ = store int32 offset(f3.m0, 3) <- 3
    let _ = store int32 offset(f3.m0, 4) <- 3
    let _ = store int32 offset(f3.m0, 5) <- 3
    let _ = store int32 offset(f3.m0, 6) <- 3
    let _ = store int32 offset(f3.m0, 7) <- 3
    let _ = store int32 offset(f3.m0, 8) <- 7
    let _ = store int32 offset(f3.m0, 9) <- 1
    let _ = store int32 offset(f3.m0, 10) <- 3
    let _ = store int32 offset(f3.m0, 11) <- 3
    let _ = store int32 offset(f3.m0, 12) <- 3
    let _ = store int32 offset(f3.m0, 13) <- 3
    let _ = store int32 offset(f3.m0, 14) <- 3
    let _ = store int32 offset(f3.m0, 15) <- 3
    let _ = store int32 offset(f3.m0, 16) <- 3
    let _ = store int32 offset(f3.m0, 17) <- 3
    let _ = store int32 offset(f3.m0, 18) <- 2
    let _ = store int32 offset(f3.m0, 19) <- 4
    let _ = store int32 offset(f3.m0, 20) <- 8
    let _ = store int32 offset(f3.m0, 21) <- 1
    let _ = store int32 offset(f3.m0, 22) <- 5
    let %24: unit = call f0(23, f3.m0)
    return %24
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of lp"];
  r0 [label="zero", color=blue];
  r20 [label="v17 ← a0", color=green];
  r23 [label="v14 ← a1", color=green];
  r3 [label="v2 ← a2", color=green];
  r9 [label="v26 ← a0", color=green];
  r6 [label="v29 ← a0", color=green];
  r13 [label="v5 ← a1", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="s10", color=blue];
  r11 [label="v23 ← a0", color=green];
  r7 [label="v7 ← a1", color=green];
  r10 [label="v8 ← a0", color=green];
  r22 [label="v13 ← a0", color=green];
  r14 [label="v4 ← a1", color=green];
  r8 [label="v25 ← a0", color=green];
  r5 [label="v28 ← a1", color=green];
  r15 [label="v6 ← a0", color=green];
  r2 [label="v0 ← a2", color=green];
  r16 [label="v21 ← a3", color=green];
  r18 [label="a0", color=blue];
  r19 [label="v11 ← a3", color=green];
  r21 [label="v18 ← a0", color=green];
  r17 [label="v10 ← a3", color=green];
  r12 [label="v9 ← a0", color=green];
  r18 -- r23;
  r2 -- r20;
  r0 -- r15;
  r0 -- r13;
  r14 -- r20;
  r13 -- r15;
  r1 -- r12;
  r4 -- r5;
  r14 -- r18;
  r14 -- r17;
  r2 -- r15;
  r14 -- r16;
  r1 -- r8;
  r2 -- r4;
  r2 -- r18;
  r1 -- r4;
  r15 -- r22;
  r0 -- r17;
  r1 -- r7;
  r1 -- r10;
  r0 -- r14;
  r13 -- r16;
  r0 -- r21;
  r2 -- r16;
  r0 -- r22;
  r19 -- r21;
  r0 -- r16;
  r0 -- r19;
  r3 -- r5;
  r13 -- r20;
  r13 -- r19;
  r0 -- r6;
  r1 -- r9;
  r14 -- r19;
  r15 -- r18;
  r3 -- r4;
  r15 -- r17;
  r2 -- r14;
  r0 -- r2;
  r15 -- r21;
  r0 -- r3;
  r0 -- r8;
  r0 -- r9;
  r14 -- r21;
  r13 -- r14;
  r0 -- r5;
  r13 -- r17;
  r2 -- r21;
  r1 -- r2;
  r0 -- r1;
  r2 -- r13;
  r2 -- r17;
  r0 -- r10;
  r4 -- r7;
  r13 -- r18;
  r1 -- r11;
  r4 -- r8;
  r0 -- r12;
  r0 -- r11;
  r13 -- r22;
  r1 -- r6;
  r2 -- r22;
  r1 -- r5;
  r0 -- r4;
  r13 -- r21;
  r4 -- r6;
  r1 -- r3;
  r2 -- r19;
  r0 -- r7;
  r15 -- r16;
  r15 -- r20;
  r2 -- r3;
  r15 -- r19;
  r0 -- r20;
  r14 -- r15;
  r14 -- r22;
  r19 -- r20;
  r0 -- r18;
  comment = "23:v14-> 18:a0-> 22:v13-> 21:v18-> 0:zero-> 15:v6-> 14:v4-> 2:v0-> 13:v5-> 19:v11-> 17:v10-> 16:v21-> 12:v9-> 11:v23-> 20:v17-> 10:v8-> 9:v26-> 8:v25-> 4:v3-> 1:s10-> 7:v7-> 6:v29-> 5:v28-> 3:v2"
  comment = "v17<-a0;v14<-a1;v2<-a2;v26<-a0;v29<-a0;v5<-a1;v3<-a0;v23<-a0;v7<-a1;v8<-a0;v13<-a0;v4<-a1;v25<-a0;v28<-a1;v6<-a0;v0<-a2;v21<-a3;v11<-a3;v18<-a0;v10<-a3;v9<-a0;"
}

graph G {
  graph [label="float interference graph of lp"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of aux"];
  r0 [label="v31 ← a0", color=green];
  r46 [label="v157 ← a2", color=green];
  r33 [label="v24 ← a0", color=green];
  r76 [label="v57 ← a0", color=green];
  r59 [label="v60 ← a0", color=green];
  r9 [label="v94 ← a3", color=green];
  r26 [label="v8 ← a2", color=green];
  r86 [label="v34 ← a0", color=green];
  r44 [label="v52 ← a0", color=green];
  r53 [label="v4 ← a0", color=green];
  r56 [label="v160 ← a0", color=green];
  r10 [label="v95 ← a2", color=green];
  r111 [label="s10", color=blue];
  r5 [label="v6 ← a0", color=green];
  r54 [label="v163 ← a0", color=green];
  r24 [label="v7 ← a2", color=green];
  r43 [label="v51 ← a0", color=green];
  r88 [label="v35 ← a3", color=green];
  r80 [label="v32 ← a2", color=green];
  r31 [label="v130 ← a2", color=green];
  r99 [label="v26 ← a2", color=green];
  r39 [label="v49 ← a0", color=green];
  r17 [label="v87 ← a2", color=green];
  r52 [label="v18 ← a0", color=green];
  r65 [label="v146 ← a2", color=green];
  r79 [label="v115 ← a3", color=green];
  r20 [label="v45 ← a3", color=green];
  r113 [label="v166 ← a1", color=green];
  r61 [label="v155 ← a3", color=green];
  r23 [label="v140 ← a0", color=green];
  r108 [label="v142 ← a0", color=green];
  r3 [label="zero", color=blue];
  r82 [label="v112 ← a3", color=green];
  r67 [label="v59 ← a0", color=green];
  r75 [label="v63 ← a0", color=green];
  r27 [label="v139 ← a0", color=green];
  r77 [label="v58 ← a0", color=green];
  r62 [label="v13 ← a2", color=green];
  r40 [label="v76 ← a0", color=green];
  r11 [label="v41 ← a2", color=green];
  r58 [label="v11 ← a0", color=green];
  r110 [label="v17 ← a0", color=green];
  r105 [label="v30 ← a0", color=green];
  r34 [label="v53 ← a0", color=green];
  r83 [label="v33 ← a0", color=green];
  r103 [label="v119 ← a0", color=green];
  r14 [label="v42 ← a2", color=green];
  r96 [label="v15 ← a0", color=green];
  r51 [label="v14 ← a2", color=green];
  r78 [label="v114 ← a2", color=green];
  r55 [label="v164 ← a3", color=green];
  r16 [label="v43 ← a0", color=green];
  r21 [label="a0", color=blue];
  r60 [label="v154 ← a0", color=green];
  r73 [label="v65 ← a3", color=green];
  r93 [label="v38 ← a2", color=green];
  r38 [label="v78 ← a0", color=green];
  r72 [label="v55 ← a0", color=green];
  r104 [label="v29 ← a0", color=green];
  r87 [label="v106 ← a3", color=green];
  r100 [label="v122 ← a0", color=green];
  r85 [label="v109 ← a3", color=green];
  r47 [label="v158 ← a2", color=green];
  r6 [label="v97 ← a2", color=green];
  r13 [label="v92 ← a2", color=green];
  r42 [label="v74 ← a0", color=green];
  r4 [label="v0 ← a1", color=green];
  r95 [label="v149 ← a0", color=green];
  r29 [label="v133 ← a2", color=green];
  r35 [label="v80 ← a0", color=green];
  r7 [label="v98 ← a3", color=green];
  r114 [label="v9 ← a1", color=green];
  r64 [label="v145 ← a0", color=green];
  r8 [label="v40 ← a3", color=green];
  r36 [label="v81 ← a0", color=green];
  r112 [label="v3 ← a2", color=green];
  r66 [label="v16 ← a2", color=green];
  r32 [label="v23 ← a2", color=green];
  r15 [label="v89 ← a0", color=green];
  r49 [label="v151 ← a2", color=green];
  r57 [label="v161 ← a2", color=green];
  r74 [label="v66 ← a0", color=green];
  r68 [label="v69 ← a0", color=green];
  r98 [label="v126 ← a2", color=green];
  r91 [label="v102 ← a0", color=green];
  r70 [label="v54 ← a1", color=green];
  r48 [label="v12 ← a0", color=green];
  r12 [label="v91 ← a2", color=green];
  r37 [label="v48 ← a2", color=green];
  r102 [label="v27 ← a2", color=green];
  r106 [label="v47 ← a0", color=green];
  r109 [label="v143 ← a0", color=green];
  r1 [label="v2 ← a1", color=green];
  r41 [label="v77 ← a0", color=green];
  r28 [label="v132 ← a3", color=green];
  r71 [label="v67 ← a0", color=green];
  r22 [label="v46 ← a0", color=green];
  r69 [label="v70 ← a0", color=green];
  r84 [label="v108 ← a0", color=green];
  r89 [label="v104 ← a2", color=green];
  r50 [label="v152 ← a2", color=green];
  r30 [label="v22 ← a2", color=green];
  r45 [label="v10 ← a0", color=green];
  r92 [label="v37 ← a3", color=green];
  r107 [label="v25 ← a0", color=green];
  r25 [label="v137 ← a0", color=green];
  r63 [label="v39 ← a0", color=green];
  r2 [label="v5 ← a2", color=green];
  r18 [label="v88 ← a2", color=green];
  r19 [label="v85 ← a2", color=green];
  r90 [label="v105 ← a2", color=green];
  r97 [label="v125 ← a2", color=green];
  r81 [label="v111 ← a0", color=green];
  r94 [label="v148 ← a2", color=green];
  r101 [label="v123 ← a2", color=green];
  r5 -- r105;
  r2 -- r38;
  r2 -- r31;
  r2 -- r78;
  r1 -- r26;
  r3 -- r15;
  r45 -- r94;
  r3 -- r16;
  r39 -- r41;
  r4 -- r51;
  r3 -- r53;
  r2 -- r49;
  r4 -- r101;
  r88 -- r89;
  r3 -- r62;
  r4 -- r64;
  r4 -- r44;
  r45 -- r61;
  r4 -- r90;
  r3 -- r9;
  r2 -- r91;
  r3 -- r11;
  r4 -- r48;
  r5 -- r65;
  r3 -- r86;
  r2 -- r51;
  r1 -- r102;
  r2 -- r7;
  r3 -- r26;
  r3 -- r70;
  r3 -- r31;
  r2 -- r41;
  r2 -- r42;
  r1 -- r68;
  r4 -- r57;
  r1 -- r50;
  r3 -- r48;
  r3 -- r85;
  r3 -- r8;
  r1 -- r9;
  r1 -- r112;
  r26 -- r27;
  r5 -- r6;
  r8 -- r16;
  r80 -- r87;
  r1 -- r48;
  r1 -- r64;
  r2 -- r48;
  r3 -- r74;
  r3 -- r39;
  r4 -- r83;
  r5 -- r32;
  r5 -- r60;
  r1 -- r2;
  r4 -- r29;
  r2 -- r5;
  r3 -- r33;
  r3 -- r71;
  r2 -- r13;
  r1 -- r51;
  r1 -- r11;
  r3 -- r17;
  r39 -- r40;
  r5 -- r51;
  r1 -- r41;
  r1 -- r38;
  r2 -- r98;
  r2 -- r96;
  r3 -- r35;
  r88 -- r90;
  r2 -- r22;
  r1 -- r5;
  r1 -- r35;
  r24 -- r25;
  r2 -- r69;
  r2 -- r86;
  r3 -- r94;
  r4 -- r13;
  r72 -- r74;
  r3 -- r25;
  r3 -- r110;
  r4 -- r76;
  r2 -- r73;
  r45 -- r95;
  r4 -- r62;
  r1 -- r109;
  r2 -- r4;
  r1 -- r75;
  r3 -- r103;
  r1 -- r55;
  r4 -- r88;
  r72 -- r73;
  r2 -- r84;
  r3 -- r105;
  r4 -- r81;
  r1 -- r105;
  r3 -- r104;
  r21 -- r113;
  r2 -- r50;
  r5 -- r19;
  r80 -- r81;
  r3 -- r83;
  r4 -- r18;
  r2 -- r11;
  r3 -- r113;
  r5 -- r11;
  r16 -- r18;
  r24 -- r26;
  r3 -- r22;
  r4 -- r55;
  r3 -- r65;
  r5 -- r93;
  r45 -- r65;
  r5 -- r97;
  r4 -- r99;
  r2 -- r14;
  r4 -- r100;
  r3 -- r99;
  r1 -- r79;
  r2 -- r89;
  r1 -- r97;
  r45 -- r108;
  r3 -- r29;
  r1 -- r72;
  r1 -- r89;
  r3 -- r66;
  r1 -- r99;
  r5 -- r81;
  r1 -- r95;
  r4 -- r36;
  r4 -- r7;
  r2 -- r60;
  r2 -- r75;
  r5 -- r25;
  r2 -- r93;
  r4 -- r74;
  r4 -- r10;
  r3 -- r23;
  r2 -- r27;
  r45 -- r64;
  r1 -- r42;
  r1 -- r24;
  r2 -- r58;
  r5 -- r12;
  r86 -- r87;
  r2 -- r62;
  r2 -- r45;
  r4 -- r41;
  r4 -- r102;
  r1 -- r37;
  r2 -- r15;
  r5 -- r8;
  r37 -- r38;
  r1 -- r98;
  r3 -- r112;
  r4 -- r58;
  r5 -- r95;
  r3 -- r56;
  r1 -- r19;
  r1 -- r10;
  r4 -- r54;
  r1 -- r88;
  r1 -- r85;
  r53 -- r57;
  r3 -- r32;
  r1 -- r17;
  r4 -- r78;
  r2 -- r16;
  r4 -- r91;
  r3 -- r89;
  r5 -- r92;
  r4 -- r22;
  r1 -- r62;
  r3 -- r18;
  r4 -- r35;
  r4 -- r69;
  r1 -- r70;
  r1 -- r31;
  r2 -- r101;
  r1 -- r103;
  r2 -- r54;
  r2 -- r92;
  r2 -- r68;
  r4 -- r33;
  r1 -- r87;
  r5 -- r104;
  r3 -- r97;
  r3 -- r30;
  r5 -- r86;
  r4 -- r86;
  r5 -- r83;
  r2 -- r46;
  r3 -- r13;
  r4 -- r28;
  r3 -- r40;
  r3 -- r10;
  r5 -- r91;
  r4 -- r104;
  r4 -- r12;
  r4 -- r92;
  r3 -- r27;
  r3 -- r69;
  r5 -- r80;
  r2 -- r97;
  r4 -- r84;
  r3 -- r95;
  r5 -- r7;
  r2 -- r103;
  r1 -- r108;
  r8 -- r11;
  r5 -- r90;
  r3 -- r7;
  r1 -- r6;
  r1 -- r110;
  r45 -- r47;
  r4 -- r49;
  r2 -- r23;
  r80 -- r88;
  r5 -- r89;
  r2 -- r72;
  r53 -- r55;
  r4 -- r16;
  r4 -- r5;
  r4 -- r95;
  r1 -- r23;
  r5 -- r48;
  r5 -- r23;
  r1 -- r53;
  r5 -- r79;
  r4 -- r79;
  r3 -- r87;
  r1 -- r15;
  r4 -- r20;
  r1 -- r60;
  r3 -- r47;
  r5 -- r87;
  r80 -- r83;
  r4 -- r30;
  r2 -- r55;
  r1 -- r65;
  r4 -- r112;
  r4 -- r89;
  r1 -- r66;
  r1 -- r39;
  r2 -- r28;
  r2 -- r29;
  r2 -- r57;
  r4 -- r11;
  r3 -- r84;
  r5 -- r26;
  r5 -- r24;
  r4 -- r85;
  r4 -- r72;
  r2 -- r104;
  r1 -- r74;
  r3 -- r55;
  r1 -- r83;
  r1 -- r84;
  r4 -- r47;
  r2 -- r100;
  r4 -- r39;
  r111 -- r112;
  r1 -- r73;
  r3 -- r36;
  r2 -- r71;
  r3 -- r54;
  r3 -- r93;
  r1 -- r3;
  r3 -- r109;
  r5 -- r30;
  r1 -- r82;
  r1 -- r92;
  r1 -- r93;
  r4 -- r19;
  r2 -- r64;
  r3 -- r44;
  r4 -- r111;
  r4 -- r53;
  r2 -- r32;
  r4 -- r75;
  r5 -- r82;
  r3 -- r91;
  r1 -- r90;
  r5 -- r21;
  r4 -- r68;
  r5 -- r33;
  r3 -- r98;
  r1 -- r30;
  r1 -- r86;
  r4 -- r97;
  r1 -- r57;
  r5 -- r10;
  r3 -- r6;
  r5 -- r17;
  r2 -- r81;
  r3 -- r42;
  r5 -- r85;
  r5 -- r22;
  r2 -- r43;
  r21 -- r114;
  r5 -- r18;
  r1 -- r45;
  r4 -- r103;
  r5 -- r47;
  r2 -- r99;
  r5 -- r29;
  r3 -- r37;
  r2 -- r37;
  r1 -- r33;
  r1 -- r16;
  r3 -- r68;
  r45 -- r110;
  r3 -- r5;
  r4 -- r31;
  r8 -- r12;
  r45 -- r62;
  r5 -- r31;
  r3 -- r92;
  r2 -- r25;
  r5 -- r62;
  r3 -- r78;
  r2 -- r6;
  r2 -- r83;
  r1 -- r77;
  r111 -- r114;
  r4 -- r65;
  r5 -- r78;
  r1 -- r40;
  r2 -- r12;
  r45 -- r48;
  r4 -- r56;
  r5 -- r101;
  r4 -- r25;
  r3 -- r49;
  r2 -- r36;
  r5 -- r66;
  r1 -- r80;
  r4 -- r14;
  r3 -- r46;
  r14 -- r15;
  r1 -- r111;
  r3 -- r19;
  r45 -- r56;
  r3 -- r45;
  r53 -- r54;
  r2 -- r26;
  r1 -- r43;
  r1 -- r8;
  r4 -- r23;
  r3 -- r101;
  r3 -- r38;
  r1 -- r47;
  r2 -- r90;
  r8 -- r9;
  r80 -- r82;
  r1 -- r22;
  r2 -- r65;
  r2 -- r88;
  r2 -- r80;
  r1 -- r13;
  r1 -- r104;
  r111 -- r113;
  r24 -- r28;
  r45 -- r50;
  r3 -- r50;
  r3 -- r114;
  r2 -- r44;
  r3 -- r57;
  r4 -- r71;
  r2 -- r40;
  r4 -- r80;
  r4 -- r15;
  r45 -- r96;
  r21 -- r112;
  r5 -- r28;
  r2 -- r102;
  r1 -- r81;
  r3 -- r21;
  r5 -- r9;
  r8 -- r15;
  r4 -- r32;
  r1 -- r94;
  r1 -- r29;
  r21 -- r59;
  r5 -- r45;
  r3 -- r20;
  r2 -- r77;
  r1 -- r25;
  r5 -- r94;
  r5 -- r61;
  r21 -- r111;
  r1 -- r61;
  r8 -- r10;
  r2 -- r17;
  r3 -- r73;
  r4 -- r82;
  r2 -- r30;
  r5 -- r98;
  r2 -- r9;
  r2 -- r35;
  r4 -- r6;
  r4 -- r93;
  r1 -- r54;
  r1 -- r100;
  r2 -- r39;
  r2 -- r20;
  r1 -- r76;
  r4 -- r87;
  r4 -- r38;
  r2 -- r94;
  r4 -- r66;
  r53 -- r58;
  r1 -- r12;
  r1 -- r71;
  r45 -- r109;
  r3 -- r43;
  r1 -- r4;
  r5 -- r88;
  r2 -- r95;
  r3 -- r100;
  r4 -- r105;
  r1 -- r7;
  r2 -- r85;
  r1 -- r18;
  r3 -- r60;
  r1 -- r56;
  r3 -- r79;
  r3 -- r108;
  r30 -- r31;
  r5 -- r96;
  r2 -- r10;
  r1 -- r69;
  r5 -- r49;
  r5 -- r99;
  r1 -- r91;
  r1 -- r20;
  r4 -- r27;
  r3 -- r24;
  r4 -- r40;
  r4 -- r42;
  r3 -- r51;
  r16 -- r17;
  r2 -- r74;
  r1 -- r46;
  r4 -- r21;
  r2 -- r76;
  r3 -- r76;
  r2 -- r33;
  r3 -- r96;
  r3 -- r4;
  r4 -- r43;
  r4 -- r98;
  r1 -- r21;
  r45 -- r66;
  r2 -- r47;
  r3 -- r80;
  r2 -- r8;
  r24 -- r27;
  r3 -- r82;
  r1 -- r27;
  r70 -- r71;
  r2 -- r79;
  r3 -- r102;
  r4 -- r50;
  r4 -- r8;
  r5 -- r14;
  r5 -- r50;
  r1 -- r49;
  r1 -- r44;
  r3 -- r61;
  r2 -- r24;
  r8 -- r14;
  r4 -- r94;
  r4 -- r9;
  r3 -- r58;
  r3 -- r88;
  r2 -- r70;
  r2 -- r53;
  r2 -- r87;
  r2 -- r61;
  r1 -- r58;
  r4 -- r24;
  r5 -- r100;
  r5 -- r20;
  r4 -- r37;
  r2 -- r18;
  r45 -- r49;
  r5 -- r103;
  r2 -- r105;
  r80 -- r84;
  r3 -- r12;
  r5 -- r13;
  r1 -- r32;
  r1 -- r78;
  r5 -- r84;
  r2 -- r82;
  r45 -- r46;
  r3 -- r28;
  r3 -- r90;
  r5 -- r16;
  r4 -- r60;
  r1 -- r101;
  r3 -- r77;
  r1 -- r28;
  r4 -- r70;
  r5 -- r64;
  r3 -- r111;
  r53 -- r56;
  r45 -- r53;
  r80 -- r85;
  r1 -- r96;
  r4 -- r46;
  r4 -- r73;
  r4 -- r45;
  r5 -- r46;
  r8 -- r13;
  r2 -- r56;
  r3 -- r64;
  r2 -- r66;
  r3 -- r72;
  r45 -- r51;
  r3 -- r81;
  r2 -- r21;
  r3 -- r41;
  r5 -- r102;
  r3 -- r14;
  r3 -- r75;
  r4 -- r96;
  r80 -- r86;
  r5 -- r27;
  r4 -- r77;
  r4 -- r17;
  r1 -- r14;
  r1 -- r36;
  r45 -- r60;
  r4 -- r26;
  r2 -- r19;
  r2 -- r3;
  r4 -- r61;
  r5 -- r15;
  comment = "114:v9-> 3:zero-> 111:s10-> 21:a0-> 4:v0-> 110:v17-> 45:v10-> 1:v2-> 108:v142-> 107:v25-> 106:v47-> 105:v30-> 104:v29-> 103:v119-> 5:v6-> 0:v31-> 101:v123-> 100:v122-> 99:v26-> 98:v126-> 97:v125-> 96:v15-> 95:v149-> 94:v148-> 93:v38-> 2:v5-> 56:v160-> 91:v102-> 90:v105-> 89:v104-> 88:v35-> 87:v106-> 86:v34-> 80:v32-> 85:v109-> 84:v108-> 83:v33-> 82:v112-> 81:v111-> 79:v115-> 78:v114-> 77:v58-> 76:v57-> 75:v63-> 74:v66-> 72:v55-> 73:v65-> 71:v67-> 70:v54-> 69:v70-> 38:v78-> 68:v69-> 67:v59-> 66:v16-> 36:v81-> 65:v146-> 64:v145-> 63:v39-> 62:v13-> 61:v155-> 6:v97-> 59:v60-> 60:v154-> 58:v11-> 53:v4-> 51:v14-> 109:v143-> 113:v166-> 57:v161-> 54:v163-> 55:v164-> 102:v27-> 92:v37-> 46:v157-> 26:v8-> 44:v52-> 43:v51-> 42:v74-> 25:v137-> 40:v76-> 39:v49-> 41:v77-> 112:v3-> 37:v48-> 22:v46-> 35:v80-> 34:v53-> 33:v24-> 19:v85-> 20:v45-> 52:v18-> 47:v158-> 32:v23-> 27:v139-> 16:v43-> 29:v133-> 49:v151-> 48:v12-> 31:v130-> 30:v22-> 23:v140-> 15:v89-> 10:v95-> 18:v88-> 12:v91-> 17:v87-> 9:v94-> 8:v40-> 7:v98-> 14:v42-> 24:v7-> 28:v132-> 50:v152-> 11:v41-> 13:v92"
  comment = "v31<-a0;v157<-a2;v24<-a0;v57<-a0;v60<-a0;v94<-a3;v8<-a2;v34<-a0;v52<-a0;v4<-a0;v160<-a0;v95<-a2;v6<-a0;v163<-a0;v7<-a2;v51<-a0;v35<-a3;v32<-a2;v130<-a2;v26<-a2;v49<-a0;v87<-a2;v18<-a0;v146<-a2;v115<-a3;v45<-a3;v166<-a1;v155<-a3;v140<-a0;v142<-a0;v112<-a3;v59<-a0;v63<-a0;v139<-a0;v58<-a0;v13<-a2;v76<-a0;v41<-a2;v11<-a0;v17<-a0;v30<-a0;v53<-a0;v33<-a0;v119<-a0;v42<-a2;v15<-a0;v14<-a2;v114<-a2;v164<-a3;v43<-a0;v154<-a0;v65<-a3;v38<-a2;v78<-a0;v55<-a0;v29<-a0;v106<-a3;v122<-a0;v109<-a3;v158<-a2;v97<-a2;v92<-a2;v74<-a0;v0<-a1;v149<-a0;v133<-a2;v80<-a0;v98<-a3;v9<-a1;v145<-a0;v40<-a3;v81<-a0;v3<-a2;v16<-a2;v23<-a2;v89<-a0;v151<-a2;v161<-a2;v66<-a0;v69<-a0;v126<-a2;v102<-a0;v54<-a1;v12<-a0;v91<-a2;v48<-a2;v27<-a2;v47<-a0;v143<-a0;v2<-a1;v77<-a0;v132<-a3;v67<-a0;v46<-a0;v70<-a0;v108<-a0;v104<-a2;v152<-a2;v22<-a2;v10<-a0;v37<-a3;v25<-a0;v137<-a0;v39<-a0;v5<-a2;v88<-a2;v85<-a2;v105<-a2;v125<-a2;v111<-a0;v148<-a2;v123<-a2;"
}

graph G {
  graph [label="float interference graph of aux"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of bf"];
  r8 [label="v17 ← a1", color=green];
  r0 [label="zero", color=blue];
  r5 [label="v20 ← a1", color=green];
  r3 [label="v2 ← a2", color=green];
  r2 [label="a1", color=blue];
  r9 [label="v5 ← a0", color=green];
  r6 [label="v4 ← a1", color=green];
  r13 [label="v6 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="a0", color=blue];
  r11 [label="a2", color=blue];
  r7 [label="v16 ← a2", color=green];
  r10 [label="v19 ← a2", color=green];
  r12 [label="v13 ← a1", color=green];
  r14 [label="v15 ← a0", color=green];
  r6 -- r7;
  r6 -- r9;
  r4 -- r13;
  r0 -- r13;
  r6 -- r11;
  r4 -- r5;
  r2 -- r4;
  r1 -- r4;
  r3 -- r6;
  r6 -- r14;
  r3 -- r12;
  r0 -- r14;
  r3 -- r9;
  r3 -- r11;
  r2 -- r11;
  r6 -- r12;
  r3 -- r5;
  r6 -- r8;
  r0 -- r6;
  r9 -- r14;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r4 -- r11;
  r3 -- r4;
  r0 -- r2;
  r0 -- r3;
  r0 -- r9;
  r0 -- r8;
  r3 -- r13;
  r6 -- r10;
  r9 -- r12;
  r13 -- r14;
  r0 -- r5;
  r3 -- r10;
  r1 -- r2;
  r4 -- r12;
  r0 -- r1;
  r3 -- r14;
  r4 -- r7;
  r0 -- r10;
  r1 -- r11;
  r4 -- r8;
  r9 -- r10;
  r0 -- r12;
  r0 -- r11;
  r3 -- r7;
  r1 -- r6;
  r0 -- r4;
  r2 -- r9;
  r4 -- r10;
  r4 -- r6;
  r1 -- r3;
  r0 -- r7;
  r9 -- r13;
  r4 -- r14;
  r2 -- r3;
  r4 -- r9;
  comment = "14:v15-> 4:v3-> 13:v6-> 0:zero-> 12:v13-> 6:v4-> 9:v5-> 11:a2-> 2:a1-> 1:a0-> 10:v19-> 8:v17-> 7:v16-> 5:v20-> 3:v2"
  comment = "v17<-a1;v20<-a1;v2<-a2;v5<-a0;v4<-a1;v6<-a0;v3<-a0;v16<-a2;v19<-a2;v13<-a1;v15<-a0;"
}

graph G {
  graph [label="float interference graph of bf"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r46 [label="v74 ← a1", color=green];
  r33 [label="v93 ← a2", color=green];
  r76 [label="v48 ← a1", color=green];
  r59 [label="v63 ← a1", color=green];
  r9 [label="v117 ← a1", color=green];
  r26 [label="v94 ← a2", color=green];
  r86 [label="v34 ← a1", color=green];
  r44 [label="v80 ← a2", color=green];
  r53 [label="v73 ← a2", color=green];
  r56 [label="v68 ← a1", color=green];
  r10 [label="v110 ← a0", color=green];
  r5 [label="v120 ← a1", color=green];
  r54 [label="v66 ← a1", color=green];
  r24 [label="v100 ← a1", color=green];
  r43 [label="v79 ← a0", color=green];
  r88 [label="v36 ← a2", color=green];
  r80 [label="v44 ← a2", color=green];
  r31 [label="v91 ← a1", color=green];
  r39 [label="v83 ← a1", color=green];
  r17 [label="v109 ← a1", color=green];
  r65 [label="v61 ← a1", color=green];
  r52 [label="v72 ← a1", color=green];
  r79 [label="v43 ← a2", color=green];
  r20 [label="v104 ← a2", color=green];
  r61 [label="v65 ← a1", color=green];
  r23 [label="v99 ← a1", color=green];
  r3 [label="v118 ← a2", color=green];
  r82 [label="v38 ← a2", color=green];
  r67 [label="v55 ← a0", color=green];
  r77 [label="v49 ← a1", color=green];
  r27 [label="v95 ← a1", color=green];
  r75 [label="v47 ← a1", color=green];
  r62 [label="v58 ← a2", color=green];
  r40 [label="v84 ← a2", color=green];
  r11 [label="v111 ← a1", color=green];
  r58 [label="v62 ← a2", color=green];
  r34 [label="v86 ← a1", color=green];
  r83 [label="v39 ← a1", color=green];
  r14 [label="v106 ← a2", color=green];
  r51 [label="v71 ← a1", color=green];
  r96 [label="a1", color=blue];
  r78 [label="v42 ← a1", color=green];
  r55 [label="v67 ← a1", color=green];
  r16 [label="v108 ← a1", color=green];
  r21 [label="v105 ← a2", color=green];
  r60 [label="v64 ← a1", color=green];
  r93 [label="v33 ← a1", color=green];
  r73 [label="v53 ← a1", color=green];
  r38 [label="v82 ← a1", color=green];
  r72 [label="v52 ← a2", color=green];
  r87 [label="v35 ← a2", color=green];
  r85 [label="v41 ← a1", color=green];
  r47 [label="v75 ← a1", color=green];
  r6 [label="v114 ← a1", color=green];
  r13 [label="v113 ← a1", color=green];
  r42 [label="v78 ← a1", color=green];
  r4 [label="v119 ← a1", color=green];
  r95 [label="a0", color=blue];
  r29 [label="v97 ← a1", color=green];
  r35 [label="v87 ← a2", color=green];
  r7 [label="v115 ← a2", color=green];
  r64 [label="v60 ← a1", color=green];
  r8 [label="v116 ← a2", color=green];
  r36 [label="v88 ← a1", color=green];
  r66 [label="v54 ← a1", color=green];
  r32 [label="v92 ← a1", color=green];
  r15 [label="v107 ← a1", color=green];
  r49 [label="v77 ← a1", color=green];
  r57 [label="v69 ← a1", color=green];
  r74 [label="v46 ← a2", color=green];
  r68 [label="v56 ← a2", color=green];
  r91 [label="v31 ← a1", color=green];
  r70 [label="v50 ← a1", color=green];
  r48 [label="v76 ← a1", color=green];
  r12 [label="v112 ← a1", color=green];
  r37 [label="v89 ← a1", color=green];
  r1 [label="v121 ← a0", color=green];
  r41 [label="v85 ← a1", color=green];
  r28 [label="v96 ← a1", color=green];
  r71 [label="v51 ← a2", color=green];
  r22 [label="v98 ← a1", color=green];
  r69 [label="v57 ← a1", color=green];
  r84 [label="v40 ← a1", color=green];
  r89 [label="v37 ← a1", color=green];
  r50 [label="v70 ← a1", color=green];
  r30 [label="v90 ← a1", color=green];
  r45 [label="v81 ← a1", color=green];
  r92 [label="v32 ← a1", color=green];
  r25 [label="v101 ← a1", color=green];
  r63 [label="v59 ← a1", color=green];
  r2 [label="v2 ← a0", color=green];
  r18 [label="v102 ← a1", color=green];
  r19 [label="v103 ← a1", color=green];
  r97 [label="v27 ← a0", color=green];
  r90 [label="v30 ← a0", color=green];
  r81 [label="v45 ← a1", color=green];
  r94 [label="v28 ← a0", color=green];
  r58 -- r61;
  r2 -- r32;
  r2 -- r31;
  r2 -- r38;
  r0 -- r36;
  r2 -- r78;
  r0 -- r96;
  r0 -- r59;
  r0 -- r66;
  r0 -- r32;
  r0 -- r48;
  r0 -- r83;
  r0 -- r69;
  r2 -- r49;
  r2 -- r81;
  r2 -- r43;
  r0 -- r28;
  r0 -- r52;
  r2 -- r91;
  r18 -- r21;
  r0 -- r23;
  r2 -- r51;
  r2 -- r37;
  r2 -- r7;
  r0 -- r72;
  r0 -- r70;
  r0 -- r86;
  r0 -- r16;
  r2 -- r41;
  r2 -- r42;
  r3 -- r5;
  r2 -- r34;
  r0 -- r6;
  r0 -- r92;
  r26 -- r28;
  r0 -- r58;
  r26 -- r27;
  r2 -- r25;
  r22 -- r25;
  r2 -- r6;
  r0 -- r26;
  r0 -- r81;
  r2 -- r83;
  r62 -- r64;
  r2 -- r48;
  r0 -- r57;
  r10 -- r12;
  r0 -- r9;
  r2 -- r67;
  r2 -- r12;
  r0 -- r38;
  r2 -- r5;
  r2 -- r13;
  r0 -- r1;
  r74 -- r77;
  r0 -- r10;
  r0 -- r47;
  r86 -- r89;
  r2 -- r36;
  r18 -- r20;
  r62 -- r65;
  r2 -- r22;
  r0 -- r4;
  r0 -- r44;
  r86 -- r88;
  r14 -- r15;
  r2 -- r69;
  r2 -- r86;
  r0 -- r18;
  r90 -- r91;
  r0 -- r15;
  r0 -- r89;
  r0 -- r71;
  r2 -- r26;
  r2 -- r73;
  r34 -- r35;
  r2 -- r4;
  r74 -- r75;
  r2 -- r90;
  r30 -- r32;
  r0 -- r34;
  r42 -- r44;
  r2 -- r84;
  r0 -- r91;
  r0 -- r14;
  r2 -- r52;
  r2 -- r50;
  r2 -- r65;
  r2 -- r88;
  r2 -- r80;
  r0 -- r93;
  r2 -- r11;
  r0 -- r19;
  r90 -- r92;
  r0 -- r85;
  r0 -- r31;
  r58 -- r60;
  r82 -- r83;
  r0 -- r53;
  r2 -- r44;
  r0 -- r50;
  r2 -- r40;
  r82 -- r84;
  r0 -- r42;
  r0 -- r97;
  r38 -- r41;
  r2 -- r14;
  r0 -- r65;
  r0 -- r3;
  r50 -- r53;
  r2 -- r89;
  r0 -- r73;
  r38 -- r40;
  r0 -- r45;
  r0 -- r39;
  r0 -- r29;
  r0 -- r37;
  r10 -- r11;
  r2 -- r77;
  r0 -- r5;
  r0 -- r75;
  r2 -- r17;
  r2 -- r60;
  r70 -- r72;
  r2 -- r30;
  r2 -- r75;
  r0 -- r94;
  r0 -- r90;
  r2 -- r93;
  r2 -- r9;
  r2 -- r35;
  r0 -- r30;
  r54 -- r56;
  r0 -- r20;
  r70 -- r73;
  r2 -- r27;
  r2 -- r58;
  r86 -- r87;
  r2 -- r20;
  r46 -- r49;
  r2 -- r39;
  r2 -- r62;
  r2 -- r94;
  r0 -- r13;
  r2 -- r45;
  r0 -- r67;
  r0 -- r84;
  r0 -- r49;
  r2 -- r15;
  r14 -- r16;
  r66 -- r68;
  r0 -- r62;
  r2 -- r95;
  r82 -- r85;
  r0 -- r74;
  r0 -- r17;
  r2 -- r85;
  r10 -- r13;
  r0 -- r25;
  r30 -- r31;
  r2 -- r10;
  r0 -- r22;
  r2 -- r16;
  r42 -- r43;
  r0 -- r87;
  r2 -- r74;
  r46 -- r48;
  r2 -- r76;
  r42 -- r45;
  r2 -- r59;
  r2 -- r54;
  r2 -- r92;
  r2 -- r68;
  r2 -- r33;
  r0 -- r82;
  r50 -- r51;
  r0 -- r40;
  r3 -- r4;
  r54 -- r55;
  r0 -- r79;
  r0 -- r51;
  r0 -- r2;
  r2 -- r46;
  r58 -- r59;
  r2 -- r47;
  r90 -- r93;
  r2 -- r8;
  r50 -- r52;
  r0 -- r88;
  r70 -- r71;
  r2 -- r79;
  r0 -- r61;
  r78 -- r79;
  r0 -- r56;
  r95 -- r96;
  r0 -- r76;
  r0 -- r11;
  r2 -- r24;
  r2 -- r23;
  r30 -- r33;
  r2 -- r53;
  r2 -- r70;
  r2 -- r61;
  r2 -- r87;
  r0 -- r80;
  r6 -- r7;
  r2 -- r72;
  r6 -- r9;
  r0 -- r63;
  r74 -- r76;
  r14 -- r17;
  r78 -- r80;
  r2 -- r18;
  r0 -- r24;
  r0 -- r68;
  r66 -- r67;
  r0 -- r41;
  r62 -- r63;
  r46 -- r47;
  r0 -- r43;
  r0 -- r21;
  r0 -- r64;
  r2 -- r82;
  r2 -- r55;
  r0 -- r35;
  r22 -- r24;
  r0 -- r95;
  r2 -- r63;
  r6 -- r8;
  r2 -- r28;
  r2 -- r29;
  r66 -- r69;
  r2 -- r57;
  r18 -- r19;
  r0 -- r33;
  r0 -- r46;
  r0 -- r54;
  r0 -- r77;
  r34 -- r37;
  r2 -- r56;
  r0 -- r8;
  r0 -- r60;
  r2 -- r66;
  r34 -- r36;
  r22 -- r23;
  r2 -- r21;
  r0 -- r12;
  r26 -- r29;
  r2 -- r71;
  r38 -- r39;
  r2 -- r19;
  r0 -- r55;
  r0 -- r7;
  r0 -- r27;
  r2 -- r3;
  r54 -- r57;
  r0 -- r78;
  r2 -- r64;
  r78 -- r81;
  comment = "97:v27-> 96:a1-> 95:a0-> 0:zero-> 94:v28-> 2:v2-> 4:v119-> 92:v32-> 90:v30-> 91:v31-> 89:v37-> 86:v34-> 88:v36-> 87:v35-> 85:v41-> 84:v40-> 82:v38-> 83:v39-> 81:v45-> 78:v42-> 80:v44-> 79:v43-> 77:v49-> 76:v48-> 75:v47-> 74:v46-> 73:v53-> 70:v50-> 72:v52-> 71:v51-> 69:v57-> 66:v54-> 68:v56-> 67:v55-> 65:v61-> 64:v60-> 63:v59-> 62:v58-> 61:v65-> 60:v64-> 59:v63-> 58:v62-> 32:v92-> 30:v90-> 28:v96-> 56:v68-> 55:v67-> 54:v66-> 57:v69-> 93:v33-> 52:v72-> 50:v70-> 6:v114-> 9:v117-> 48:v76-> 46:v74-> 49:v77-> 47:v75-> 45:v81-> 42:v78-> 44:v80-> 43:v79-> 41:v85-> 38:v82-> 40:v84-> 23:v99-> 39:v83-> 22:v98-> 25:v101-> 5:v120-> 36:v88-> 34:v86-> 37:v89-> 29:v97-> 35:v87-> 7:v115-> 15:v107-> 1:v121-> 19:v103-> 18:v102-> 26:v94-> 31:v91-> 53:v73-> 27:v95-> 51:v71-> 24:v100-> 17:v109-> 8:v116-> 10:v110-> 20:v104-> 14:v106-> 12:v112-> 33:v93-> 21:v105-> 16:v108-> 3:v118-> 13:v113-> 11:v111"
  comment = "v74<-a1;v93<-a2;v48<-a1;v63<-a1;v117<-a1;v94<-a2;v34<-a1;v80<-a2;v73<-a2;v68<-a1;v110<-a0;v120<-a1;v66<-a1;v100<-a1;v79<-a0;v36<-a2;v44<-a2;v91<-a1;v83<-a1;v109<-a1;v61<-a1;v72<-a1;v43<-a2;v104<-a2;v65<-a1;v99<-a1;v118<-a2;v38<-a2;v55<-a0;v49<-a1;v95<-a1;v47<-a1;v58<-a2;v84<-a2;v111<-a1;v62<-a2;v86<-a1;v39<-a1;v106<-a2;v71<-a1;v42<-a1;v67<-a1;v108<-a1;v105<-a2;v64<-a1;v33<-a1;v53<-a1;v82<-a1;v52<-a2;v35<-a2;v41<-a1;v75<-a1;v114<-a1;v113<-a1;v78<-a1;v119<-a1;v97<-a1;v87<-a2;v115<-a2;v60<-a1;v116<-a2;v88<-a1;v54<-a1;v92<-a1;v107<-a1;v77<-a1;v69<-a1;v46<-a2;v56<-a2;v31<-a1;v50<-a1;v76<-a1;v112<-a1;v89<-a1;v121<-a0;v85<-a1;v96<-a1;v51<-a2;v98<-a1;v57<-a1;v40<-a1;v37<-a1;v70<-a1;v90<-a1;v81<-a1;v32<-a1;v101<-a1;v59<-a1;v2<-a0;v102<-a1;v103<-a1;v27<-a0;v30<-a0;v45<-a1;v28<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl lp
  .type lp, @function
lp:
; block info: defs: [v3, v25, v5, v26, v7, v0, v28, v9, v29, v23, v8, v4, v6, v2], uses: [v2, v25, v26, v7, v0, v28, s10, v9, zero, v29, v23, v8, v3], upward_exposed: [s10, zero], params_defs: []
; live_in: [s10, zero], live_out: [v0, v4, v5, v6, zero]
; block parameters: []
.lp_b0:
  mv v0, s10  ; live: [s10, zero]
  lw v2, 8(v0)  ; live: [v0, s10, zero]
  lw v3, 16(v0)  ; live: [v0, s10, zero, v2]
  lw v4, 24(v0)  ; live: [v2, v0, s10, zero, v3]
  lw v5, 32(v0)  ; live: [v2, v0, s10, zero, v3]
  lw v6, 40(v0)  ; live: [v2, v0, s10, zero, v3]
  slli v28, zero, 2  ; live: [v2, s10, zero, v3]
  add v29, v2, v28  ; live: [v2, v28, s10, zero, v3]
  lw v7, 0(v29)  ; live: [v3, s10, zero, v29]
  slli v25, v7, 2  ; live: [v7, s10, zero, v3]
  add v26, v3, v25  ; live: [v25, s10, zero, v3]
  lw v8, 0(v26)  ; live: [s10, zero, v26]
  xor v23, v8, zero  ; live: [s10, zero, v8]
  sltiu v9, v23, 1  ; live: [s10, zero, v23]
; control
  bne v9, zero, .lp_b1  ; live: [s10, zero, v9]
  j .lp_b2  ; live: [s10, zero]

; block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v14]
; block parameters: []
.lp_b1:
; control
  mv v14, zero  ; live: [zero]
  j .lp_b3  ; live: [zero]

; block info: defs: [t1, v14, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, v11, ft4, v21, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v5, v21, v10, v18, zero, a0, v13, v0, v4, v17, v6], upward_exposed: [v0, v4, v5, v6, zero], params_defs: []
; live_in: [v0, v4, v5, v6, zero], live_out: [v14]
; block parameters: []
.lp_b2:
  li v21, 1  ; live: [v5, zero, v0, v4, v6]
  add v10, v4, v21  ; live: [v5, v21, zero, v0, v4, v6]
  mv s10, v5  ; live: [v5, v10, zero, v0, v4, v6]
  ld v19, 0(v5)  ; live: [v5, v10, zero, v0, v4, v6]
  mv a0, v10  ; live: [v5, v10, zero, v0, v4, v6]
  jalr v19  ; live: [v5, zero, a0, v0, v4, v6]
  mv v11, a0  ; live: [v5, zero, a0, v0, v4, v6]
  slli v17, zero, 2  ; live: [v11, v5, zero, v0, v4, v6]
  add v18, v6, v17  ; live: [v11, v5, zero, v0, v4, v6, v17]
  sw v11, 0(v18)  ; live: [v11, v5, v18, zero, v0, v4, v6]
  mv s10, v0  ; live: [v0, v4, v5, v6, zero]
  ld v15, 0(v0)  ; live: [v0, v4, v5, v6, zero]
  jalr v15  ; live: [v0, v4, v5, v6, zero]
  mv v13, zero  ; live: [v0, v4, v5, v6, zero]
; control
  mv v14, v13  ; live: [v0, v4, v5, v6, zero, v13]
  j .lp_b3  ; live: [v0, v4, v5, v6, zero]

; block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
; live_in: [v14], live_out: []
; block parameters: [v14]
.lp_b3:
; control
  mv a0, v14  ; live: [v14]
  ret  ; live: [v14, a0]

  .p2align 3
  .globl aux
  .type aux, @function
aux:
; block info: defs: [v2, v5, v0, v166, v4, v6, v9, v3], uses: [v3, a0, zero, v0, v166, s10, v9, v2], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s10, a0, zero], live_out: [v0, v4, v5, zero, v2]
; block parameters: []
.aux_b0:
  mv v0, s10  ; live: [a0, zero, s10]
  mv v2, a0  ; live: [a0, zero, v0, s10]
  lw v3, 8(v0)  ; live: [a0, zero, v0, s10, v2]
  lw v4, 16(v0)  ; live: [v2, a0, zero, v0, s10, v3]
  lw v5, 24(v0)  ; live: [v2, a0, zero, v0, s10, v3]
  lw v6, 32(v0)  ; live: [v3, v2, v0, s10, a0, zero]
  slt v166, v3, v2  ; live: [v3, v2, s10, a0, zero]
  xori v9, v166, 1  ; live: [v166, s10, a0, zero]
; control
  bne v9, zero, .aux_b1  ; live: [v9, s10, a0, zero]
  j .aux_b2  ; live: [s10, a0, zero]

; block info: defs: [v39], uses: [v31], upward_exposed: [v31], params_defs: [v31]
; live_in: [v31], live_out: [v39]
; block parameters: [v31]
.aux_b19:
; control
  mv v39, v31  ; live: [v31]
  j .aux_b20  ; live: [v31]

; block info: defs: [v60], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v60]
; block parameters: []
.aux_b1:
; control
  mv v60, v2  ; live: [v2]
  j .aux_b24  ; live: [v2]

; block info: defs: [t1, v91, v42, v95, v41, ft0, ft1, a1, t5, fa1, v98, fa2, v97, ft6, a4, fa6, a6, ft10, ft5, v47, v89, ft7, ft4, v87, v46, ft9, a5, fa4, a0, v92, v88, ft2, a2, v43, a3, s10, ft8, t3, a7, fa7, v94, t0, fa5, fa3, ft3, v45, fa0, v85, t4, t2, v83, v40], uses: [v2, v5, v91, v87, v46, a0, v42, v95, v92, v88, v0, v41, v43, v98, v94, zero, v97, v85, v45, v6, v89, v40], upward_exposed: [v0, v5, v6, zero, v2], params_defs: []
; live_in: [v0, v5, v6, zero, v2], live_out: [v47]
; block parameters: []
.aux_b7:
  slli v97, zero, 2  ; live: [v5, zero, v0, v6, v2]
  add v98, v5, v97  ; live: [v5, zero, v97, v0, v6, v2]
  lw v40, 0(v98)  ; live: [v98, v5, zero, v0, v6, v2]
  slli v94, zero, 2  ; live: [v40, v5, zero, v0, v6, v2]
  add v95, v5, v94  ; live: [v40, v94, v5, zero, v0, v6, v2]
  lw v41, 0(v95)  ; live: [v40, v5, zero, v0, v95, v6, v2]
  slli v91, v41, 2  ; live: [v40, v5, zero, v0, v41, v6, v2]
  add v92, v6, v91  ; live: [v40, v5, v91, zero, v0, v6, v2]
  lw v42, 0(v92)  ; live: [v40, v5, zero, v0, v92, v6, v2]
  li v89, 1  ; live: [v40, v5, zero, v42, v0, v6, v2]
  add v43, v42, v89  ; live: [v40, v5, zero, v42, v0, v6, v89, v2]
  slli v87, v40, 2  ; live: [v40, v5, zero, v0, v6, v43, v2]
  add v88, v6, v87  ; live: [v5, v87, zero, v0, v6, v43, v2]
  sw v43, 0(v88)  ; live: [v5, zero, v0, v88, v6, v43, v2]
  li v85, 1  ; live: [v5, zero, v0, v6, v2]
  add v45, v2, v85  ; live: [v5, zero, v85, v0, v6, v2]
  mv s10, v0  ; live: [v5, zero, v45, v0, v6, v2]
  ld v83, 0(v0)  ; live: [v5, zero, v45, v0, v6, v2]
  mv a0, v45  ; live: [v45, v0, v5, v6, zero, v2]
  jalr v83  ; live: [v0, v5, v6, zero, a0, v2]
  mv v46, a0  ; live: [v0, v5, v6, zero, a0, v2]
; control
  mv v47, v46  ; live: [v0, v5, v6, v46, zero, v2]
  j .aux_b21  ; live: [v0, v5, v6, zero, v2]

; block info: defs: [v25, t1, v22, v7, ft0, ft1, a1, t5, fa1, fa2, v130, ft6, fa6, a4, v8, a6, ft5, ft10, v128, v137, ft7, ft4, ft9, v21, a5, fa4, a0, v133, ft2, a2, a3, v24, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2, v140, v139, v135, v132], uses: [v2, v5, a0, v133, v22, v7, v0, s11, v24, v130, zero, v23, v8, v140, v6, v139, v137, v132], upward_exposed: [v5, zero, v0, v6, s11, v2], params_defs: []
; live_in: [v5, zero, v0, v6, s11, v2], live_out: [v25]
; block parameters: []
.aux_b13:
  addi v140, s11, -4  ; live: [v5, zero, v0, v6, s11, v2]
  andi v7, v140, -8  ; live: [v5, zero, v0, v6, v140, s11, v2]
  sw v2, 0(v7)  ; live: [v5, zero, v7, v0, v6, s11, v2]
  addi v137, s11, -48  ; live: [v5, zero, v7, v0, v6, s11, v2]
  andi v8, v137, -8  ; live: [v5, zero, v7, v0, v6, s11, v137, v2]
  la v139, lp  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  sd v139, 0(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v139, v2]
  sd v5, 8(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  sd v6, 16(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  sd v2, 24(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  sd v0, 32(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  sd v7, 40(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  mv s10, v8  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  ld v135, 0(v8)  ; live: [v5, zero, v7, v8, v0, v6, s11, v2]
  jalr v135  ; live: [v5, zero, v7, v0, v6, s11, v2]
  mv v21, zero  ; live: [v5, zero, v7, v0, v6, s11, v2]
  slli v132, zero, 2  ; live: [v5, zero, v7, v0, v6, s11, v2]
  add v133, v7, v132  ; live: [v132, v5, zero, v7, v0, v6, s11, v2]
  lw v22, 0(v133)  ; live: [v5, zero, v133, v0, v6, s11, v2]
  li v130, 1  ; live: [v5, zero, v22, v0, v6, s11, v2]
  add v23, v22, v130  ; live: [v5, v130, zero, v22, v0, v6, s11, v2]
  mv s10, v0  ; live: [v5, zero, v23, v0, v6, s11, v2]
  ld v128, 0(v0)  ; live: [v5, zero, v23, v0, v6, s11, v2]
  mv a0, v23  ; live: [v5, zero, v23, v0, v6, s11, v2]
  jalr v128  ; live: [v5, zero, a0, v0, v6, s11, v2]
  mv v24, a0  ; live: [v5, zero, a0, v0, v6, s11, v2]
; control
  mv v25, v24  ; live: [v5, zero, v0, v6, s11, v24, v2]
  j .aux_b18  ; live: [v0, v5, v6, s11, zero, v2]

; block info: defs: [v59], uses: [v53], upward_exposed: [v53], params_defs: [v53]
; live_in: [v53], live_out: [v59]
; block parameters: [v53]
.aux_b22:
; control
  mv v59, v53  ; live: [v53]
  j .aux_b23  ; live: [v53]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, v51, fa2, ft6, a4, fa6, a6, v81, ft5, ft10, v74, ft7, ft4, v49, ft9, v53, a5, fa4, a0, v78, ft2, a2, v52, a3, s10, ft8, t3, a7, fa7, v72, t0, fa5, v48, fa3, v77, ft3, fa0, v80, t4, t2, v76], uses: [v76, v5, v49, a0, v78, v0, v52, v51, v48, zero, v77, v80, v81, v74, v2], upward_exposed: [v0, v5, zero, v2], params_defs: []
; live_in: [v0, v5, zero, v2], live_out: [v53]
; block parameters: []
.aux_b5:
  slli v80, zero, 2  ; live: [v0, v5, zero, v2]
  add v81, v5, v80  ; live: [v0, v80, v5, zero, v2]
  lw v48, 0(v81)  ; live: [v0, v81, v5, zero, v2]
  li v78, 1  ; live: [v0, v5, v48, zero, v2]
  sub v49, v48, v78  ; live: [v0, v5, v48, zero, v78, v2]
  slli v76, zero, 2  ; live: [v0, v5, v49, zero, v2]
  add v77, v5, v76  ; live: [v76, v0, v5, v49, zero, v2]
  sw v49, 0(v77)  ; live: [v0, v5, v49, zero, v77, v2]
  li v74, 1  ; live: [v0, v5, zero, v2]
  add v51, v2, v74  ; live: [v0, v5, v74, zero, v2]
  mv s10, v0  ; live: [v51, v0, v5, zero, v2]
  ld v72, 0(v0)  ; live: [v51, v0, v5, zero, v2]
  mv a0, v51  ; live: [v51, v0, v5, zero, v2]
  jalr v72  ; live: [v0, v5, zero, a0, v2]
  mv v52, a0  ; live: [v0, v5, zero, a0, v2]
; control
  mv v53, v52  ; live: [v0, v5, v52, zero, v2]
  j .aux_b22  ; live: [v0, v5, zero, v2]

; block info: defs: [v12, v158, v157], uses: [v10, v12, v158, zero, v157], upward_exposed: [v10, zero], params_defs: []
; live_in: [v5, v10, zero, v0, v6, v2], live_out: [v5, v10, zero, v0, v6, v2]
; block parameters: []
.aux_b4:
  li v157, 2  ; live: [v5, v10, zero, v0, v6, v2]
  xor v158, v10, v157  ; live: [v5, v10, zero, v157, v0, v6, v2]
  sltiu v12, v158, 1  ; live: [v5, v10, zero, v158, v0, v6, v2]
; control
  bne v12, zero, .aux_b5  ; live: [v5, v10, zero, v0, v6, v12, v2]
  j .aux_b6  ; live: [v0, v5, v6, v10, zero, v2]

; block info: defs: [v151, v14, v152], uses: [v151, v14, v10, zero, v152], upward_exposed: [v10, zero], params_defs: []
; live_in: [v5, v10, zero, v0, v6, v2], live_out: [v5, v10, zero, v0, v6, s11, v2]
; block parameters: []
.aux_b8:
  li v151, 4  ; live: [v5, v10, zero, v0, v6, v2]
  xor v152, v10, v151  ; live: [v5, v10, zero, v0, v151, v6, v2]
  sltiu v14, v152, 1  ; live: [v5, v10, zero, v152, v0, v6, v2]
; control
  bne v14, zero, .aux_b9  ; live: [v5, v14, v10, zero, v0, v6, v2]
  j .aux_b10  ; live: [v0, v5, v6, v10, zero, v2]

; block info: defs: [v25], uses: [v18], upward_exposed: [v18], params_defs: [v18]
; live_in: [v18], live_out: [v25]
; block parameters: [v18]
.aux_b17:
; control
  mv v25, v18  ; live: [v18]
  j .aux_b18  ; live: [v18]

; block info: defs: [v164, v11, v10, v161, v160, v163], uses: [v164, v11, v10, v161, zero, v4, v160, v163, v2], upward_exposed: [v4, zero, v2], params_defs: []
; live_in: [v0, v4, v5, zero, v2], live_out: [v5, v10, zero, v0, v6, v2]
; block parameters: []
.aux_b2:
  slli v163, v2, 2  ; live: [v5, zero, v0, v4, v2]
  add v164, v4, v163  ; live: [v5, zero, v0, v4, v163, v2]
  lw v10, 0(v164)  ; live: [v164, v5, zero, v0, v4, v2]
  li v160, 1  ; live: [v5, v10, zero, v0, v4, v2]
  xor v161, v10, v160  ; live: [v5, v10, zero, v0, v4, v160, v2]
  sltiu v11, v161, 1  ; live: [v5, v161, zero, v0, v4, v2]
; control
  bne v11, zero, .aux_b3  ; live: [v11, v5, zero, v0, v4, v2]
  j .aux_b4  ; live: [v0, v4, v5, zero, v2]

; block info: defs: [a0], uses: [a0, v60], upward_exposed: [v60], params_defs: [v60]
; live_in: [v60], live_out: []
; block parameters: [v60]
.aux_b24:
; control
  mv a0, v60  ; live: [v60]
  ret  ; live: [a0, v60]

; block info: defs: [v155, v154, v13], uses: [v155, v10, v154, v13, zero], upward_exposed: [v10, zero], params_defs: []
; live_in: [v5, v10, zero, v0, v6, v2], live_out: [v5, v10, zero, v0, v6, v2]
; block parameters: []
.aux_b6:
  li v154, 3  ; live: [v5, v10, zero, v0, v6, v2]
  xor v155, v10, v154  ; live: [v5, v10, zero, v0, v6, v154, v2]
  sltiu v13, v155, 1  ; live: [v155, v5, v10, zero, v0, v6, v2]
; control
  bne v13, zero, .aux_b7  ; live: [v5, v10, zero, v13, v0, v6, v2]
  j .aux_b8  ; live: [v0, v5, v6, v10, zero, v2]

; block info: defs: [v47], uses: [v39], upward_exposed: [v39], params_defs: [v39]
; live_in: [v39], live_out: [v47]
; block parameters: [v39]
.aux_b20:
; control
  mv v47, v39  ; live: [v39]
  j .aux_b21  ; live: [v39]

; block info: defs: [v16, v146, v145], uses: [v16, v10, v146, v145, zero], upward_exposed: [v10, zero], params_defs: []
; live_in: [v5, v10, zero, v0, v6, s11, v2], live_out: [v5, v10, zero, v0, v6, s11, v2]
; block parameters: []
.aux_b12:
  li v145, 7  ; live: [v5, v10, zero, v0, v6, s11, v2]
  xor v146, v10, v145  ; live: [v5, v10, zero, v0, v6, s11, v145, v2]
  sltiu v16, v146, 1  ; live: [v5, v10, v146, zero, v0, v6, s11, v2]
; control
  bne v16, zero, .aux_b13  ; live: [v5, v16, v10, zero, v0, v6, s11, v2]
  j .aux_b14  ; live: [v5, v10, zero, v0, v6, s11, v2]

; block info: defs: [v60], uses: [v59], upward_exposed: [v59], params_defs: [v59]
; live_in: [v59], live_out: [v60]
; block parameters: [v59]
.aux_b23:
; control
  mv v60, v59  ; live: [v59]
  j .aux_b24  ; live: [v59]

; block info: defs: [t1, v69, v58, v67, ft0, ft1, a1, t5, fa1, v63, fa2, ft6, a4, fa6, a6, ft5, ft10, v59, v57, v54, ft7, v66, ft4, ft9, a5, a0, fa4, ft2, v65, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v70, t2, v61, v55], uses: [v66, v5, v69, v58, a0, v67, v0, v65, v63, zero, v70, v57, v54, v55, v2], upward_exposed: [v0, v5, zero, v2], params_defs: []
; live_in: [v0, v5, zero, v2], live_out: [v59]
; block parameters: []
.aux_b3:
  slli v69, zero, 2  ; live: [v0, v5, zero, v2]
  add v70, v5, v69  ; live: [v0, v5, v69, zero, v2]
  lw v54, 0(v70)  ; live: [v0, v5, v70, zero, v2]
  li v67, 1  ; live: [v0, v5, zero, v54, v2]
  add v55, v54, v67  ; live: [v2, v0, v5, zero, v54, v67]
  slli v65, zero, 2  ; live: [v0, v5, zero, v55, v2]
  add v66, v5, v65  ; live: [v0, v65, v5, zero, v55, v2]
  sw v55, 0(v66)  ; live: [v0, v66, v5, zero, v55, v2]
  li v63, 1  ; live: [v0, v5, zero, v2]
  add v57, v2, v63  ; live: [v0, v63, v5, zero, v2]
  mv s10, v0  ; live: [v0, v5, v57, zero, v2]
  ld v61, 0(v0)  ; live: [v0, v5, v57, zero, v2]
  mv a0, v57  ; live: [v0, v5, v57, zero, v2]
  jalr v61  ; live: [v0, v5, zero, a0, v2]
  mv v58, a0  ; live: [v0, v5, zero, a0, v2]
; control
  mv v59, v58  ; live: [v0, v5, v58, zero, v2]
  j .aux_b23  ; live: [v0, v5, zero, v2]

; block info: defs: [t1, v32, ft0, ft1, v108, a1, t5, v33, fa1, v109, v106, v115, fa2, ft6, a4, fa6, v105, a6, ft5, ft10, v102, v34, ft7, ft4, ft9, a5, a0, fa4, ft2, v114, v37, a2, v111, a3, s10, v39, ft8, a7, fa7, t3, t0, v112, fa5, fa3, ft3, v35, fa0, v104, v38, t4, t2, v100], uses: [v5, a0, v0, v114, v32, v37, v111, v108, v33, v115, v109, v106, v112, zero, v35, v104, v105, v38, v6, v102, v34, v2], upward_exposed: [v0, v5, v6, zero, v2], params_defs: []
; live_in: [v0, v5, v6, zero, v2], live_out: [v39]
; block parameters: []
.aux_b9:
  slli v114, zero, 2  ; live: [v5, zero, v0, v6, v2]
  add v115, v5, v114  ; live: [v5, zero, v0, v114, v6, v2]
  lw v32, 0(v115)  ; live: [v115, v5, zero, v0, v6, v2]
  slli v111, zero, 2  ; live: [v5, zero, v0, v32, v6, v2]
  add v112, v5, v111  ; live: [v5, zero, v0, v32, v6, v111, v2]
  lw v33, 0(v112)  ; live: [v112, v5, zero, v0, v32, v6, v2]
  slli v108, v33, 2  ; live: [v5, zero, v0, v32, v6, v33, v2]
  add v109, v6, v108  ; live: [v5, zero, v0, v32, v6, v108, v2]
  lw v34, 0(v109)  ; live: [v109, v5, zero, v0, v32, v6, v2]
  li v106, 1  ; live: [v5, zero, v0, v32, v6, v34, v2]
  sub v35, v34, v106  ; live: [v106, v5, zero, v0, v32, v6, v34, v2]
  slli v104, v32, 2  ; live: [v5, zero, v35, v0, v32, v6, v2]
  add v105, v6, v104  ; live: [v5, zero, v35, v0, v104, v6, v2]
  sw v35, 0(v105)  ; live: [v5, zero, v35, v0, v105, v6, v2]
  li v102, 1  ; live: [v5, zero, v0, v6, v2]
  add v37, v2, v102  ; live: [v5, zero, v0, v6, v102, v2]
  mv s10, v0  ; live: [v5, zero, v0, v37, v6, v2]
  ld v100, 0(v0)  ; live: [v5, zero, v0, v37, v6, v2]
  mv a0, v37  ; live: [v0, v37, v5, v6, zero, v2]
  jalr v100  ; live: [v0, v5, v6, zero, a0, v2]
  mv v38, a0  ; live: [v0, v5, v6, zero, a0, v2]
; control
  mv v39, v38  ; live: [v0, v38, v5, v6, zero, v2]
  j .aux_b20  ; live: [v0, v5, v6, zero, v2]

; block info: defs: [v18], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v18]
; block parameters: []
.aux_b16:
; control
  mv v18, v2  ; live: [v2]
  j .aux_b17  ; live: [v2]

; block info: defs: [v15, v149, v148], uses: [v10, v15, v149, zero, v148], upward_exposed: [v10, zero], params_defs: []
; live_in: [v5, v10, zero, v0, v6, s11, v2], live_out: [v5, v10, zero, v0, v6, s11, v2]
; block parameters: []
.aux_b10:
  li v148, 5  ; live: [v5, v10, zero, v0, v6, s11, v2]
  xor v149, v10, v148  ; live: [v5, v10, zero, v148, v0, v6, s11, v2]
  sltiu v15, v149, 1  ; live: [v5, v10, zero, v0, v6, s11, v149, v2]
; control
  bne v15, zero, .aux_b11  ; live: [v5, v10, zero, v0, v6, s11, v15, v2]
  j .aux_b12  ; live: [v5, v10, zero, v0, v6, s11, v2]

; block info: defs: [t1, v26, ft0, ft1, a1, t5, v28, fa1, fa2, v126, ft6, v29, v27, fa6, a4, a6, ft5, ft10, v117, v122, ft7, ft4, ft9, a5, v125, a0, fa4, v123, v119, v30, ft2, a2, a3, v31, s10, ft8, a7, fa7, t3, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v26, v125, a0, v123, v119, v30, v0, zero, v126, v29, v27, v6, v122, v2], upward_exposed: [v0, v5, v6, zero, v2], params_defs: []
; live_in: [v0, v5, v6, zero, v2], live_out: [v31]
; block parameters: []
.aux_b11:
  slli v125, zero, 2  ; live: [v5, zero, v0, v6, v2]
  add v126, v5, v125  ; live: [v5, zero, v125, v0, v6, v2]
  lw v26, 0(v126)  ; live: [v5, zero, v126, v0, v6, v2]
  slli v122, v26, 2  ; live: [v5, zero, v26, v0, v6, v2]
  add v123, v6, v122  ; live: [v5, zero, v0, v6, v122, v2]
  lw v27, 0(v123)  ; live: [v5, zero, v123, v0, v6, v2]
  mv a0, v27  ; live: [v5, zero, v27, v0, v6, v2]
  call minimbt_print_char  ; live: [v5, zero, a0, v0, v6, v2]
  mv v28, zero  ; live: [v5, zero, v0, v6, v2]
  li v119, 1  ; live: [v5, zero, v0, v6, v2]
  add v29, v2, v119  ; live: [v5, zero, v119, v0, v6, v2]
  mv s10, v0  ; live: [v5, zero, v29, v0, v6, v2]
  ld v117, 0(v0)  ; live: [v5, zero, v29, v0, v6, v2]
  mv a0, v29  ; live: [v0, v5, v6, zero, v29, v2]
  jalr v117  ; live: [v0, v5, v6, zero, a0, v2]
  mv v30, a0  ; live: [v0, v5, v6, zero, a0, v2]
; control
  mv v31, v30  ; live: [v0, v5, v6, zero, v30, v2]
  j .aux_b19  ; live: [v0, v5, v6, zero, v2]

; block info: defs: [v53], uses: [v47], upward_exposed: [v47], params_defs: [v47]
; live_in: [v47], live_out: [v53]
; block parameters: [v47]
.aux_b21:
; control
  mv v53, v47  ; live: [v47]
  j .aux_b22  ; live: [v47]

; block info: defs: [v31], uses: [v25], upward_exposed: [v25], params_defs: [v25]
; live_in: [v25], live_out: [v31]
; block parameters: [v25]
.aux_b18:
; control
  mv v31, v25  ; live: [v25]
  j .aux_b19  ; live: [v25]

; block info: defs: [v17, v142, v143], uses: [v17, v10, v142, v143, zero], upward_exposed: [v10, zero], params_defs: []
; live_in: [v10, zero, v2], live_out: [v2]
; block parameters: []
.aux_b14:
  li v142, 8  ; live: [v10, zero, v2]
  xor v143, v10, v142  ; live: [v10, v142, zero, v2]
  sltiu v17, v143, 1  ; live: [v10, v143, zero, v2]
; control
  bne v17, zero, .aux_b15  ; live: [v17, v10, zero, v2]
  j .aux_b16  ; live: [v10, zero, v2]

; block info: defs: [v18], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v18]
; block parameters: []
.aux_b15:
; control
  mv v18, v2  ; live: [v2]
  j .aux_b17  ; live: [v2]

  .p2align 3
  .globl bf
  .type bf, @function
bf:
; block info: defs: [v2, t1, v16, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, v20, a4, fa6, v19, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v16, v5, a0, v13, a2, a1, v17, s11, zero, v20, v19, v4, v6, v15, v2], upward_exposed: [a1, s11, a0, zero], params_defs: []
; live_in: [a1, s11, a0, zero], live_out: []
; block parameters: []
.bf_b0:
  mv v2, a0  ; live: [zero, a0, a1, s11]
  mv v3, a1  ; live: [zero, a1, s11, v2]
  addi v20, s11, -4  ; live: [v2, zero, s11, v3]
  andi v4, v20, -8  ; live: [v2, zero, v20, s11, v3]
  sw zero, 0(v4)  ; live: [v2, zero, v4, s11, v3]
  li v16, 4096  ; live: [v2, zero, v4, s11, v3]
  sub v17, s11, v16  ; live: [v2, v16, zero, v4, s11, v3]
  andi v5, v17, -8  ; live: [v2, zero, v4, v17, s11, v3]
  li v19, 1024  ; live: [v2, v5, zero, v4, s11, v3]
  mv a1, v19  ; live: [v2, v5, zero, v19, v4, s11, v3]
  mv a0, v5  ; live: [v2, v5, zero, v4, a1, s11, v3]
  mv a2, zero  ; live: [v2, v5, zero, a0, v4, a1, s11, v3]
  call _memseti32  ; live: [v2, v5, zero, a0, v4, a2, a1, s11, v3]
  addi v13, s11, -40  ; live: [v2, v5, zero, v4, s11, v3]
  andi v6, v13, -8  ; live: [v2, v5, zero, v13, v4, s11, v3]
  la v15, aux  ; live: [v2, v5, zero, v4, v6, s11, v3]
  sd v15, 0(v6)  ; live: [v2, v5, zero, v4, v6, s11, v15, v3]
  sd v2, 8(v6)  ; live: [v2, v5, zero, v4, v6, s11, v3]
  sd v3, 16(v6)  ; live: [v5, zero, v4, v6, s11, v3]
  sd v4, 24(v6)  ; live: [v4, v6, v5, s11, zero]
  sd v5, 32(v6)  ; live: [v6, v5, s11, zero]
  mv s10, v6  ; live: [v6, s11, zero]
  ld v11, 0(v6)  ; live: [v6, s11, zero]
  mv a0, zero  ; live: [s11, zero]
  jalr v11  ; live: [s11, zero, a0]
  mv v10, a0  ; live: [a1, s11, zero, a0]
; control
  mv a0, zero  ; live: [a1, s11, zero]
  ret  ; live: [a1, s11, a0, zero]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v58, v91, v79, v67, a1, v44, t5, fa1, v82, v99, fa2, v50, a6, v59, ft10, v117, v102, v62, ft4, ft9, v119, v110, v92, v37, v43, a7, v48, v96, v40, v42, v41, v32, ft0, ft1, v108, v86, v98, v106, v97, v105, v90, v47, v89, v34, v66, v53, v121, v30, v114, v65, a2, ft8, t3, v112, v56, fa5, v77, v85, v84, v80, t4, v76, v2, v95, v28, v64, v33, v60, v51, v73, v63, ft6, a4, fa6, v27, ft5, v54, v116, v87, v49, fa4, ft2, v52, a3, v31, v113, v101, fa7, v75, fa3, v68, ft3, v45, v104, t2, v61, v55, t1, v69, v120, v107, v93, v109, v115, v103, v81, v74, v57, ft7, v71, v46, a5, a0, v78, v36, v88, v111, v39, v118, v94, v72, t0, v35, fa0, v38, v70, v83, v100], uses: [v2, v91, v58, v79, v67, v95, a1, s11, v44, v28, v33, v64, v60, v73, v51, v63, v82, v99, v50, v27, v59, v117, v102, v54, v116, v62, v87, v49, v119, v110, v92, v37, v43, v52, v31, v113, v101, v75, v48, v96, v68, v45, v104, v61, v55, v40, v69, v42, v120, v107, v41, v32, v108, v86, v98, v93, v106, v109, v115, v97, zero, v103, v105, v90, v81, v47, v74, v57, v89, v34, v66, v71, v46, v53, v121, a0, v30, v78, v36, v88, v114, v65, v111, v39, v118, v112, v94, v72, v56, v77, v85, v35, v84, v38, v80, v70, v83, v100, v76], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v121, s11, -92  ; live: [s11, zero]
  andi v2, v121, -8  ; live: [s11, v121, zero]
  sw zero, 0(v2)  ; live: [s11, zero, v2]
  sw zero, 4(v2)  ; live: [s11, zero, v2]
  sw zero, 8(v2)  ; live: [s11, zero, v2]
  sw zero, 12(v2)  ; live: [s11, zero, v2]
  sw zero, 16(v2)  ; live: [s11, zero, v2]
  sw zero, 20(v2)  ; live: [s11, zero, v2]
  sw zero, 24(v2)  ; live: [s11, zero, v2]
  sw zero, 28(v2)  ; live: [s11, zero, v2]
  sw zero, 32(v2)  ; live: [s11, zero, v2]
  sw zero, 36(v2)  ; live: [s11, zero, v2]
  sw zero, 40(v2)  ; live: [s11, zero, v2]
  sw zero, 44(v2)  ; live: [s11, zero, v2]
  sw zero, 48(v2)  ; live: [s11, zero, v2]
  sw zero, 52(v2)  ; live: [s11, zero, v2]
  sw zero, 56(v2)  ; live: [s11, zero, v2]
  sw zero, 60(v2)  ; live: [s11, zero, v2]
  sw zero, 64(v2)  ; live: [s11, zero, v2]
  sw zero, 68(v2)  ; live: [s11, zero, v2]
  sw zero, 72(v2)  ; live: [s11, zero, v2]
  sw zero, 76(v2)  ; live: [s11, zero, v2]
  sw zero, 80(v2)  ; live: [s11, zero, v2]
  sw zero, 84(v2)  ; live: [s11, zero, v2]
  sw zero, 88(v2)  ; live: [s11, zero, v2]
  li v118, 3  ; live: [s11, zero, v2]
  slli v119, zero, 2  ; live: [v118, s11, zero, v2]
  add v120, v2, v119  ; live: [v118, s11, zero, v119, v2]
  sw v118, 0(v120)  ; live: [v118, s11, zero, v120, v2]
  li v114, 3  ; live: [s11, zero, v2]
  li v115, 1  ; live: [v114, s11, zero, v2]
  slli v116, v115, 2  ; live: [v115, v114, s11, zero, v2]
  add v117, v2, v116  ; live: [v116, v114, s11, zero, v2]
  sw v114, 0(v117)  ; live: [v114, s11, v117, zero, v2]
  li v110, 3  ; live: [s11, zero, v2]
  li v111, 2  ; live: [s11, zero, v110, v2]
  slli v112, v111, 2  ; live: [v111, s11, zero, v110, v2]
  add v113, v2, v112  ; live: [v112, s11, zero, v110, v2]
  sw v110, 0(v113)  ; live: [v2, s11, zero, v113, v110]
  li v106, 3  ; live: [s11, zero, v2]
  li v107, 3  ; live: [v106, s11, zero, v2]
  slli v108, v107, 2  ; live: [v106, v107, s11, zero, v2]
  add v109, v2, v108  ; live: [v106, v108, s11, zero, v2]
  sw v106, 0(v109)  ; live: [v106, v109, s11, zero, v2]
  li v102, 3  ; live: [s11, zero, v2]
  li v103, 4  ; live: [s11, v102, zero, v2]
  slli v104, v103, 2  ; live: [v103, s11, v102, zero, v2]
  add v105, v2, v104  ; live: [v104, s11, v102, zero, v2]
  sw v102, 0(v105)  ; live: [v105, s11, v102, zero, v2]
  li v98, 3  ; live: [s11, zero, v2]
  li v99, 5  ; live: [v98, s11, zero, v2]
  slli v100, v99, 2  ; live: [v98, s11, v99, zero, v2]
  add v101, v2, v100  ; live: [v98, s11, zero, v100, v2]
  sw v98, 0(v101)  ; live: [v98, v101, s11, zero, v2]
  li v94, 3  ; live: [s11, zero, v2]
  li v95, 6  ; live: [v94, s11, zero, v2]
  slli v96, v95, 2  ; live: [v95, v94, s11, zero, v2]
  add v97, v2, v96  ; live: [v94, s11, v96, zero, v2]
  sw v94, 0(v97)  ; live: [v94, s11, zero, v97, v2]
  li v90, 3  ; live: [s11, zero, v2]
  li v91, 7  ; live: [v90, s11, zero, v2]
  slli v92, v91, 2  ; live: [v90, v91, s11, zero, v2]
  add v93, v2, v92  ; live: [v92, v90, s11, zero, v2]
  sw v90, 0(v93)  ; live: [v93, v90, s11, zero, v2]
  li v86, 7  ; live: [s11, zero, v2]
  li v87, 8  ; live: [s11, v86, zero, v2]
  slli v88, v87, 2  ; live: [v87, s11, v86, zero, v2]
  add v89, v2, v88  ; live: [v88, s11, v86, zero, v2]
  sw v86, 0(v89)  ; live: [s11, v86, zero, v89, v2]
  li v82, 1  ; live: [s11, zero, v2]
  li v83, 9  ; live: [v82, s11, zero, v2]
  slli v84, v83, 2  ; live: [v82, s11, v83, zero, v2]
  add v85, v2, v84  ; live: [v84, v82, s11, zero, v2]
  sw v82, 0(v85)  ; live: [v85, v82, s11, zero, v2]
  li v78, 3  ; live: [s11, zero, v2]
  li v79, 10  ; live: [s11, zero, v78, v2]
  slli v80, v79, 2  ; live: [v2, s11, zero, v79, v78]
  add v81, v2, v80  ; live: [v80, s11, zero, v78, v2]
  sw v78, 0(v81)  ; live: [v81, s11, zero, v78, v2]
  li v74, 3  ; live: [s11, zero, v2]
  li v75, 11  ; live: [v74, s11, zero, v2]
  slli v76, v75, 2  ; live: [v74, s11, v75, zero, v2]
  add v77, v2, v76  ; live: [v76, v74, s11, zero, v2]
  sw v74, 0(v77)  ; live: [v74, s11, zero, v77, v2]
  li v70, 3  ; live: [s11, zero, v2]
  li v71, 12  ; live: [v70, s11, zero, v2]
  slli v72, v71, 2  ; live: [v70, v71, s11, zero, v2]
  add v73, v2, v72  ; live: [v72, v70, s11, zero, v2]
  sw v70, 0(v73)  ; live: [v73, v70, s11, zero, v2]
  li v66, 3  ; live: [s11, zero, v2]
  li v67, 13  ; live: [v66, s11, zero, v2]
  slli v68, v67, 2  ; live: [v66, s11, zero, v67, v2]
  add v69, v2, v68  ; live: [v66, s11, zero, v68, v2]
  sw v66, 0(v69)  ; live: [v66, v69, s11, zero, v2]
  li v62, 3  ; live: [s11, zero, v2]
  li v63, 14  ; live: [v62, s11, zero, v2]
  slli v64, v63, 2  ; live: [v62, v63, s11, zero, v2]
  add v65, v2, v64  ; live: [v62, s11, zero, v64, v2]
  sw v62, 0(v65)  ; live: [v62, v65, s11, zero, v2]
  li v58, 3  ; live: [s11, zero, v2]
  li v59, 15  ; live: [v58, s11, zero, v2]
  slli v60, v59, 2  ; live: [v59, v58, s11, zero, v2]
  add v61, v2, v60  ; live: [v58, s11, zero, v60, v2]
  sw v58, 0(v61)  ; live: [v58, s11, v61, zero, v2]
  li v54, 3  ; live: [s11, zero, v2]
  li v55, 16  ; live: [s11, zero, v54, v2]
  slli v56, v55, 2  ; live: [v2, s11, zero, v54, v55]
  add v57, v2, v56  ; live: [s11, v56, zero, v54, v2]
  sw v54, 0(v57)  ; live: [s11, v57, zero, v54, v2]
  li v50, 3  ; live: [s11, zero, v2]
  li v51, 17  ; live: [s11, zero, v50, v2]
  slli v52, v51, 2  ; live: [v51, s11, zero, v50, v2]
  add v53, v2, v52  ; live: [s11, v52, zero, v50, v2]
  sw v50, 0(v53)  ; live: [s11, v53, zero, v50, v2]
  li v46, 2  ; live: [s11, zero, v2]
  li v47, 18  ; live: [v46, s11, zero, v2]
  slli v48, v47, 2  ; live: [v47, v46, s11, zero, v2]
  add v49, v2, v48  ; live: [v46, s11, v48, zero, v2]
  sw v46, 0(v49)  ; live: [v46, s11, v49, zero, v2]
  li v42, 4  ; live: [s11, zero, v2]
  li v43, 19  ; live: [s11, zero, v42, v2]
  slli v44, v43, 2  ; live: [v43, s11, zero, v42, v2]
  add v45, v2, v44  ; live: [s11, v44, zero, v42, v2]
  sw v42, 0(v45)  ; live: [v45, s11, zero, v42, v2]
  li v38, 8  ; live: [s11, zero, v2]
  li v39, 20  ; live: [v38, s11, zero, v2]
  slli v40, v39, 2  ; live: [v38, s11, zero, v39, v2]
  add v41, v2, v40  ; live: [v40, v38, s11, zero, v2]
  sw v38, 0(v41)  ; live: [v38, v41, s11, zero, v2]
  li v34, 1  ; live: [s11, zero, v2]
  li v35, 21  ; live: [s11, zero, v34, v2]
  slli v36, v35, 2  ; live: [v35, s11, zero, v34, v2]
  add v37, v2, v36  ; live: [v36, s11, zero, v34, v2]
  sw v34, 0(v37)  ; live: [v37, s11, zero, v34, v2]
  li v30, 5  ; live: [s11, zero, v2]
  li v31, 22  ; live: [s11, zero, v30, v2]
  slli v32, v31, 2  ; live: [s11, v31, zero, v30, v2]
  add v33, v2, v32  ; live: [v32, s11, zero, v30, v2]
  sw v30, 0(v33)  ; live: [v2, s11, zero, v33, v30]
  li v28, 23  ; live: [s11, zero, v2]
  mv a0, v28  ; live: [s11, v28, zero, v2]
  mv a1, v2  ; live: [s11, zero, a0, v2]
  call bf  ; live: [a1, s11, zero, a0]
  mv v27, zero  ; live: [s11, zero]
; control
  mv a0, v27  ; live: [s11, zero, v27]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/cls-bug.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = call f1(456)
    let %1: int32 = apply %0(789)
    let %2: unit = ext_call minimbt_print_int(%1)
    return %2
  }
}
.fn f #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 123)
    return %0
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn g #f1 : fn(int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f0
    return f1.m0
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r2 [label="v4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r1 -- r2;
  comment = "3:v3-> 2:v4-> 1:v2-> 0:a0"
  comment = "v4<-a0;v2<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r2 [label="v3 ← a0", color=green];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v7 ← a0", color=green];
  r2 -- r3;
  comment = "3:v7-> 2:v3-> 1:v5-> 0:a0"
  comment = "v3<-a0;v5<-a0;v7<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r6 [label="v4 ← a0", color=green];
  r5 [label="v3 ← a0", color=green];
  r4 [label="v7 ← a0", color=green];
  r1 [label="v9 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r5;
  r0 -- r6;
  r0 -- r2;
  comment = "6:v4-> 0:zero-> 2:a0-> 5:v3-> 4:v7-> 3:v2-> 1:v9"
  comment = "v4<-a0;v3<-a0;v7<-a0;v9<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
  li v4, 123  ; live: [v2]
  add v3, v2, v4  ; live: [v4, v2]
; control
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, v7, v5, a0, v2], uses: [v3, v5, s11, a0, v7], upward_exposed: [s11, a0], params_defs: []
; live_in: [s11, a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [s11, a0]
  addi v5, s11, -8  ; live: [s11]
  andi v3, v5, -8  ; live: [v5, s11]
  la v7, f  ; live: [s11, v3]
  sd v7, 0(v3)  ; live: [v7, s11, v3]
; control
  mv a0, v3  ; live: [s11, v3]
  ret  ; live: [s11, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, a0, zero, v7, v4, v9, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v9, 456  ; live: [zero]
  mv a0, v9  ; live: [zero, v9]
  call g  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv s10, v2  ; live: [zero, v2]
  ld v6, 0(v2)  ; live: [zero, v2]
  li v7, 789  ; live: [zero]
  mv a0, v7  ; live: [zero, v7]
  jalr v6  ; live: [zero, a0]
  mv v3, a0  ; live: [zero, a0]
  mv a0, v3  ; live: [zero, v3]
  call minimbt_print_int  ; live: [zero, a0]
  mv v4, zero  ; live: [zero]
; control
  mv a0, v4  ; live: [v4, zero]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/cls-bug2.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_int($f0)
    let _ = alloc <m0: closure(int32) -> unit heap(1)> <- [0] = f0
    let _ = alloc <m1: array[closure(int32) -> unit] heap(1)> <- [..] = f0.m0
    let %4: closure(int32) -> unit = load closure(int32) -> unit offset(f0.m1, 0)
    let %5: int32 = sub($f0, 1)
    let %6: unit = apply %4(%5)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0(9)
    return %0
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="v12 ← a1", color=green];
  r3 [label="v2 ← a0", color=green];
  r9 [label="v17 ← a1", color=green];
  r6 [label="v24 ← a1", color=green];
  r13 [label="v10 ← a1", color=green];
  r4 [label="v22 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v9 ← a1", color=green];
  r7 [label="v20 ← a1", color=green];
  r10 [label="v18 ← a1", color=green];
  r14 [label="v11 ← a0", color=green];
  r8 [label="v4 ← a2", color=green];
  r5 [label="v3 ← a1", color=green];
  r15 [label="v26 ← a0", color=green];
  r2 [label="zero", color=blue];
  r16 [label="v5 ← a1", color=green];
  r12 [label="v15 ← a1", color=green];
  r2 -- r6;
  r5 -- r6;
  r3 -- r4;
  r11 -- r13;
  r2 -- r14;
  r2 -- r15;
  r2 -- r4;
  r5 -- r8;
  r3 -- r13;
  r3 -- r6;
  r2 -- r12;
  r2 -- r8;
  r8 -- r9;
  r3 -- r10;
  r3 -- r12;
  r1 -- r2;
  r2 -- r5;
  r2 -- r10;
  r3 -- r9;
  r0 -- r1;
  r11 -- r12;
  r2 -- r13;
  r3 -- r14;
  r1 -- r15;
  r3 -- r11;
  r5 -- r7;
  r2 -- r16;
  r2 -- r7;
  r2 -- r11;
  r3 -- r7;
  r1 -- r16;
  r2 -- r9;
  r1 -- r3;
  r2 -- r3;
  r3 -- r5;
  r3 -- r8;
  comment = "16:v5-> 2:zero-> 1:a0-> 15:v26-> 14:v11-> 3:v2-> 13:v10-> 12:v15-> 11:v9-> 10:v18-> 9:v17-> 8:v4-> 7:v20-> 6:v24-> 5:v3-> 4:v22-> 0:v12"
  comment = "v12<-a1;v2<-a0;v17<-a1;v24<-a1;v10<-a1;v22<-a1;v9<-a1;v20<-a1;v18<-a1;v11<-a0;v4<-a2;v3<-a1;v26<-a0;v5<-a1;v15<-a1;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r0 -- r3;
  r0 -- r1;
  r0 -- r2;
  comment = "3:v2-> 2:a0-> 1:v3-> 0:zero"
  comment = "v3<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v5, v26, v2], uses: [v2, v5, a0, zero, v26], upward_exposed: [a0, zero], params_defs: []
; live_in: [s11, a0, zero], live_out: [s11, zero, v2]
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [s11, a0, zero]
  slt v26, zero, v2  ; live: [s11, a0, zero, v2]
  xori v5, v26, 1  ; live: [s11, a0, zero, v26]
; control
  bne v5, zero, .f_b1  ; live: [v5, s11, a0, zero]
  j .f_b2  ; live: [s11, a0, zero]

; block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
; live_in: [v12], live_out: []
; block parameters: [v12]
.f_b3:
; control
  mv a0, v12  ; live: [v12]
  ret  ; live: [v12, a0]

; block info: defs: [t1, v13, v22, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, v4, v6, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, v24, v9, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v2, v11, v10, a0, v22, v17, s11, v24, v9, v18, zero, v20, v4, v15, v3], upward_exposed: [s11, zero, v2], params_defs: []
; live_in: [s11, zero, v2], live_out: [v12]
; block parameters: []
.f_b1:
  mv a0, v2  ; live: [s11, zero, v2]
  call minimbt_print_int  ; live: [s11, zero, a0, v2]
  mv v6, zero  ; live: [s11, zero, v2]
  addi v22, s11, -8  ; live: [s11, zero, v2]
  andi v3, v22, -8  ; live: [s11, zero, v22, v2]
  la v24, f  ; live: [v3, s11, zero, v2]
  sd v24, 0(v3)  ; live: [v3, s11, v24, zero, v2]
  addi v20, s11, -8  ; live: [v3, s11, zero, v2]
  andi v4, v20, -8  ; live: [v3, s11, zero, v20, v2]
  sd v3, 0(v4)  ; live: [v3, v4, s11, zero, v2]
  slli v17, zero, 3  ; live: [v4, s11, zero, v2]
  add v18, v4, v17  ; live: [v4, v17, s11, zero, v2]
  ld v9, 0(v18)  ; live: [s11, v18, zero, v2]
  li v15, 1  ; live: [s11, zero, v9, v2]
  sub v10, v2, v15  ; live: [s11, v15, zero, v9, v2]
  mv s10, v9  ; live: [s11, v10, zero, v9, v2]
  ld v13, 0(v9)  ; live: [s11, v10, zero, v9, v2]
  mv a0, v10  ; live: [s11, v10, zero, v2]
  jalr v13  ; live: [s11, zero, a0, v2]
  mv v11, zero  ; live: [s11, zero, v2]
; control
  mv v12, v11  ; live: [v11, s11, zero, v2]
  j .f_b3  ; live: [s11, zero, v2]

; block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v12]
; block parameters: []
.f_b2:
; control
  mv v12, zero  ; live: [zero]
  j .f_b3  ; live: [zero]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v2, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v3, 9  ; live: [zero]
  mv a0, v3  ; live: [zero, v3]
  call f  ; live: [zero, a0]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/cls-rec.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f1 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = call f1(%1)
    let %3: int32 = load_symbol ::0
    let %4: int32 = add(%3, %2)
    jump b3(%4)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn thunk_x.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 10
  }
}
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f1(12)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 x.1
.thunk ::1 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  r1 [label="t6", color=blue];
  r0 -- r1;
  comment = "1:t6-> 0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="v8 ← a0", color=green];
  r5 [label="v4 ← a1", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="zero", color=blue];
  r9 [label="v7 ← a0", color=green];
  r6 [label="v5 ← a1", color=green];
  r4 [label="v13 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v3 ← a0", color=green];
  r7 [label="v10 ← a1", color=green];
  r10 [label="v15 ← a1", color=green];
  r8 [label="v6 ← a1", color=green];
  r6 -- r7;
  r2 -- r10;
  r0 -- r1;
  r3 -- r9;
  r1 -- r11;
  r3 -- r4;
  r2 -- r11;
  r3 -- r7;
  r1 -- r3;
  r3 -- r6;
  r2 -- r3;
  r3 -- r5;
  r6 -- r8;
  r3 -- r8;
  r1 -- r10;
  r1 -- r2;
  comment = "11:v3-> 10:v15-> 2:zero-> 1:a0-> 9:v7-> 3:v2-> 8:v6-> 6:v5-> 7:v10-> 5:v4-> 4:v13-> 0:v8"
  comment = "v8<-a0;v4<-a1;v2<-a0;v7<-a0;v5<-a1;v13<-a1;v3<-a0;v10<-a1;v15<-a1;v6<-a1;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_x.1"];
  r0 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  comment = "1:a0-> 0:v2"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_x.1"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r4 [label="v3 ← a0", color=green];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r2;
  comment = "4:v3-> 3:v2-> 2:a0-> 1:v5-> 0:zero"
  comment = "v3<-a0;v5<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, t6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, t6], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_x.1  ; live: []
  la t6, x.1  ; live: [a0]
  sw a0, 0(t6)  ; live: [a0, t6]
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, v15, v2], uses: [v3, v15, a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
; live_in: [a0, zero], live_out: [zero, v2]
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0, zero]
  xor v15, v2, zero  ; live: [a0, zero, v2]
  sltiu v3, v15, 1  ; live: [v15, a0, zero]
; control
  bne v3, zero, .f_b1  ; live: [a0, zero, v3]
  j .f_b2  ; live: [a0, zero]

; block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
; live_in: [v8], live_out: []
; block parameters: [v8]
.f_b3:
; control
  mv a0, v8  ; live: [v8]
  ret  ; live: [a0, v8]

; block info: defs: [v8], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v8]
; block parameters: []
.f_b1:
; control
  mv v8, zero  ; live: [zero]
  j .f_b3  ; live: [zero]

; block info: defs: [t1, v13, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v10, v13, a0, v7, v4, v6, v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v8]
; block parameters: []
.f_b2:
  li v13, 1  ; live: [v2]
  sub v4, v2, v13  ; live: [v13, v2]
  mv a0, v4  ; live: [v4, v2]
  call f  ; live: [a0, v2]
  mv v5, a0  ; live: [a0, v2]
  la v10, x.1  ; live: [v5, v2]
  lw v6, 0(v10)  ; live: [v5, v10, v2]
  add v7, v6, v5  ; live: [v6, v5, v2]
; control
  mv v8, v7  ; live: [v7, v2]
  j .f_b3  ; live: [v2]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl thunk_x.1
  .type thunk_x.1, @function
thunk_x.1:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.thunk_x.1_b0:
; control
  li v2, 10  ; live: []
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 12  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl x.1
  .type x.1, @object
x.1:
  .zero 4
  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/cls-reg-bug.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn g #f1 : closure(int32) -> int32
.freevars (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(^1, ^2)
    let %1: int32 = add(%0, ^3)
    let %2: int32 = add(%1, ^4)
    let %3: int32 = add(%2, ^5)
    let %4: int32 = add(%3, ^6)
    let %5: int32 = add(%4, ^7)
    let %6: int32 = add(%5, ^8)
    let %7: int32 = add(%6, ^9)
    let %8: int32 = add(%7, ^10)
    let %9: bool = le($f0, 0)
    br %9 b1() b2()
  }
  .bb #b1 () {
    let %10: int32 = neg($f0)
    let %11: int32 = apply self(%10)
    jump b3(%11)
  }
  .bb #b2 () {
    jump b3(%8)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32) heap(10)> <- [0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9, [9] = 10
    let %1: int32 = call f0(f2.m0)
    let %2: unit = ext_call minimbt_print_int(%1)
    return ()
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn h #f0 : fn((int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0)
    let %1: int32 = load int32 field($f0, 1)
    let %2: int32 = load int32 field($f0, 2)
    let %3: int32 = load int32 field($f0, 3)
    let %4: int32 = load int32 field($f0, 4)
    let %5: int32 = load int32 field($f0, 5)
    let %6: int32 = load int32 field($f0, 6)
    let %7: int32 = load int32 field($f0, 7)
    let %8: int32 = load int32 field($f0, 8)
    let %9: int32 = load int32 field($f0, 9)
    let _ = alloc <m0: closure(int32) -> int32 heap(11)> <- [0] = f1, [1] = %0, [2] = %1, [3] = %2, [4] = %3, [5] = %4, [6] = %5, [7] = %6, [8] = %7, [9] = %8, [10] = %9
    let %11: int32 = apply f0.m0(1)
    return %11
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="v21 ← a0", color=green];
  r20 [label="v14 ← a4", color=green];
  r23 [label="v17 ← a0", color=green];
  r3 [label="v0 ← a1", color=green];
  r9 [label="v3 ← a0", color=green];
  r26 [label="v20 ← a2", color=green];
  r27 [label="v29 ← a1", color=green];
  r6 [label="v24 ← a0", color=green];
  r13 [label="v7 ← a3", color=green];
  r4 [label="v2 ← a1", color=green];
  r1 [label="v25 ← a1", color=green];
  r28 [label="v22 ← a1", color=green];
  r11 [label="v5 ← a4", color=green];
  r7 [label="s10", color=blue];
  r10 [label="v4 ← a0", color=green];
  r22 [label="v16 ← a2", color=green];
  r14 [label="v8 ← a2", color=green];
  r8 [label="zero", color=blue];
  r5 [label="v23 ← a0", color=green];
  r24 [label="v18 ← a3", color=green];
  r15 [label="v9 ← a0", color=green];
  r25 [label="v19 ← a0", color=green];
  r2 [label="a0", color=blue];
  r16 [label="v10 ← a2", color=green];
  r18 [label="v12 ← a1", color=green];
  r19 [label="v13 ← a3", color=green];
  r21 [label="v15 ← a2", color=green];
  r17 [label="v11 ← a2", color=green];
  r12 [label="v6 ← a2", color=green];
  r12 -- r18;
  r4 -- r19;
  r18 -- r23;
  r10 -- r14;
  r2 -- r20;
  r16 -- r20;
  r14 -- r20;
  r17 -- r21;
  r7 -- r21;
  r3 -- r15;
  r2 -- r15;
  r14 -- r16;
  r3 -- r16;
  r3 -- r6;
  r11 -- r14;
  r7 -- r25;
  r18 -- r25;
  r10 -- r13;
  r2 -- r10;
  r3 -- r9;
  r3 -- r11;
  r18 -- r21;
  r2 -- r16;
  r9 -- r17;
  r2 -- r7;
  r11 -- r18;
  r4 -- r22;
  r7 -- r27;
  r3 -- r5;
  r12 -- r19;
  r17 -- r19;
  r11 -- r19;
  r16 -- r17;
  r9 -- r18;
  r8 -- r12;
  r9 -- r14;
  r3 -- r8;
  r4 -- r21;
  r8 -- r24;
  r14 -- r19;
  r15 -- r18;
  r2 -- r25;
  r18 -- r26;
  r8 -- r17;
  r3 -- r4;
  r8 -- r16;
  r11 -- r13;
  r10 -- r18;
  r10 -- r12;
  r3 -- r13;
  r7 -- r10;
  r9 -- r12;
  r17 -- r22;
  r2 -- r12;
  r2 -- r8;
  r8 -- r23;
  r3 -- r10;
  r1 -- r2;
  r4 -- r12;
  r2 -- r13;
  r13 -- r18;
  r3 -- r17;
  r4 -- r25;
  r8 -- r22;
  r8 -- r21;
  r4 -- r8;
  r9 -- r10;
  r11 -- r15;
  r15 -- r23;
  r18 -- r20;
  r8 -- r11;
  r16 -- r21;
  r3 -- r7;
  r2 -- r22;
  r2 -- r24;
  r13 -- r21;
  r8 -- r14;
  r7 -- r8;
  r16 -- r24;
  r4 -- r14;
  r16 -- r23;
  r2 -- r23;
  r4 -- r9;
  r14 -- r15;
  r14 -- r22;
  r16 -- r22;
  r17 -- r20;
  r10 -- r17;
  r18 -- r24;
  r4 -- r13;
  r17 -- r18;
  r4 -- r16;
  r13 -- r15;
  r4 -- r24;
  r4 -- r5;
  r2 -- r26;
  r14 -- r18;
  r14 -- r17;
  r11 -- r17;
  r4 -- r23;
  r2 -- r4;
  r2 -- r18;
  r9 -- r15;
  r7 -- r24;
  r8 -- r27;
  r15 -- r22;
  r12 -- r15;
  r8 -- r19;
  r8 -- r9;
  r11 -- r16;
  r3 -- r12;
  r7 -- r26;
  r7 -- r13;
  r16 -- r19;
  r7 -- r20;
  r13 -- r16;
  r11 -- r12;
  r4 -- r20;
  r17 -- r24;
  r4 -- r18;
  r2 -- r11;
  r18 -- r22;
  r17 -- r25;
  r7 -- r9;
  r8 -- r20;
  r8 -- r25;
  r16 -- r18;
  r13 -- r20;
  r13 -- r19;
  r10 -- r16;
  r7 -- r28;
  r7 -- r17;
  r8 -- r28;
  r12 -- r20;
  r7 -- r22;
  r2 -- r28;
  r9 -- r11;
  r4 -- r15;
  r4 -- r11;
  r17 -- r23;
  r7 -- r19;
  r18 -- r19;
  r12 -- r13;
  r15 -- r17;
  r8 -- r13;
  r2 -- r14;
  r15 -- r21;
  r8 -- r15;
  r7 -- r15;
  r14 -- r21;
  r13 -- r14;
  r10 -- r15;
  r8 -- r18;
  r10 -- r11;
  r7 -- r11;
  r13 -- r17;
  r2 -- r21;
  r3 -- r14;
  r8 -- r10;
  r2 -- r17;
  r4 -- r7;
  r9 -- r16;
  r8 -- r26;
  r12 -- r14;
  r12 -- r16;
  r4 -- r17;
  r7 -- r16;
  r12 -- r17;
  r7 -- r18;
  r7 -- r23;
  r2 -- r9;
  r4 -- r10;
  r4 -- r6;
  r2 -- r19;
  r4 -- r26;
  r9 -- r13;
  r7 -- r12;
  r15 -- r16;
  r15 -- r20;
  r15 -- r19;
  r2 -- r3;
  r7 -- r14;
  r2 -- r27;
  comment = "28:v22-> 8:zero-> 7:s10-> 2:a0-> 25:v19-> 4:v2-> 18:v12-> 23:v17-> 15:v9-> 22:v16-> 16:v10-> 14:v8-> 24:v18-> 12:v6-> 21:v15-> 6:v24-> 19:v13-> 13:v7-> 17:v11-> 0:v21-> 1:v25-> 27:v29-> 5:v23-> 11:v5-> 10:v4-> 9:v3-> 3:v0-> 20:v14-> 26:v20"
  comment = "v21<-a0;v14<-a4;v17<-a0;v0<-a1;v3<-a0;v20<-a2;v29<-a1;v24<-a0;v7<-a3;v2<-a1;v25<-a1;v22<-a1;v5<-a4;v4<-a0;v16<-a2;v8<-a2;v23<-a0;v18<-a3;v9<-a0;v19<-a0;v10<-a2;v12<-a1;v13<-a3;v15<-a2;v11<-a2;v6<-a2;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of h"];
  r0 [label="a0", color=blue];
  r3 [label="v5 ← a4", color=green];
  r9 [label="v11 ← a3", color=green];
  r6 [label="v8 ← a3", color=green];
  r13 [label="v3 ← a0", color=green];
  r4 [label="v6 ← a3", color=green];
  r1 [label="v2 ← a0", color=green];
  r11 [label="v13 ← a1", color=green];
  r7 [label="v9 ← a1", color=green];
  r10 [label="v12 ← a2", color=green];
  r14 [label="v21 ← a0", color=green];
  r8 [label="v10 ← a3", color=green];
  r5 [label="v7 ← a3", color=green];
  r15 [label="v17 ← a0", color=green];
  r2 [label="v4 ← a4", color=green];
  r16 [label="v15 ← a0", color=green];
  r12 [label="v19 ← a0", color=green];
  r6 -- r7;
  r6 -- r9;
  r4 -- r13;
  r6 -- r11;
  r4 -- r5;
  r1 -- r8;
  r5 -- r8;
  r2 -- r4;
  r5 -- r10;
  r1 -- r4;
  r3 -- r6;
  r11 -- r14;
  r6 -- r14;
  r1 -- r7;
  r8 -- r9;
  r3 -- r12;
  r5 -- r13;
  r1 -- r10;
  r7 -- r13;
  r10 -- r13;
  r2 -- r10;
  r3 -- r9;
  r11 -- r12;
  r3 -- r11;
  r2 -- r7;
  r2 -- r11;
  r7 -- r9;
  r5 -- r11;
  r6 -- r12;
  r3 -- r5;
  r8 -- r12;
  r6 -- r8;
  r9 -- r14;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r4 -- r11;
  r3 -- r4;
  r8 -- r13;
  r11 -- r13;
  r2 -- r14;
  r5 -- r9;
  r10 -- r12;
  r3 -- r13;
  r7 -- r10;
  r6 -- r10;
  r9 -- r12;
  r13 -- r14;
  r2 -- r12;
  r2 -- r8;
  r10 -- r11;
  r7 -- r11;
  r3 -- r10;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r2 -- r13;
  r3 -- r14;
  r8 -- r10;
  r4 -- r7;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r5 -- r14;
  r8 -- r11;
  r1 -- r6;
  r3 -- r7;
  r1 -- r5;
  r2 -- r9;
  r4 -- r6;
  r4 -- r10;
  r8 -- r14;
  r7 -- r8;
  r1 -- r3;
  r9 -- r13;
  r7 -- r12;
  r4 -- r14;
  r2 -- r3;
  r7 -- r14;
  r4 -- r9;
  r5 -- r12;
  r10 -- r14;
  comment = "16:v15-> 15:v17-> 14:v21-> 13:v3-> 11:v13-> 10:v12-> 7:v9-> 6:v8-> 5:v7-> 4:v6-> 2:v4-> 12:v19-> 9:v11-> 8:v10-> 3:v5-> 1:v2-> 0:a0"
  comment = "v5<-a4;v11<-a3;v8<-a3;v3<-a0;v6<-a3;v2<-a0;v13<-a1;v9<-a1;v12<-a2;v21<-a0;v10<-a3;v7<-a3;v17<-a0;v4<-a4;v15<-a0;v19<-a0;"
}

graph G {
  graph [label="float interference graph of h"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r8 [label="v15 ← a1", color=green];
  r0 [label="zero", color=blue];
  r5 [label="v12 ← a1", color=green];
  r3 [label="v10 ← a1", color=green];
  r2 [label="v2 ← a0", color=green];
  r9 [label="v16 ← a1", color=green];
  r6 [label="v13 ← a1", color=green];
  r13 [label="a0", color=blue];
  r4 [label="v11 ← a1", color=green];
  r1 [label="v8 ← a0", color=green];
  r11 [label="v18 ← a1", color=green];
  r7 [label="v14 ← a1", color=green];
  r10 [label="v17 ← a1", color=green];
  r12 [label="v19 ← a0", color=green];
  r14 [label="v4 ← a0", color=green];
  r0 -- r14;
  r2 -- r5;
  r2 -- r10;
  r0 -- r1;
  r0 -- r10;
  r2 -- r6;
  r0 -- r13;
  r0 -- r12;
  r0 -- r11;
  r2 -- r7;
  r2 -- r11;
  r0 -- r2;
  r0 -- r3;
  r0 -- r4;
  r2 -- r4;
  r2 -- r9;
  r0 -- r9;
  r0 -- r8;
  r0 -- r7;
  r2 -- r3;
  r2 -- r12;
  r2 -- r8;
  r0 -- r5;
  r0 -- r6;
  comment = "14:v4-> 0:zero-> 13:a0-> 12:v19-> 2:v2-> 11:v18-> 10:v17-> 9:v16-> 8:v15-> 7:v14-> 6:v13-> 5:v12-> 4:v11-> 3:v10-> 1:v8"
  comment = "v15<-a1;v12<-a1;v10<-a1;v2<-a0;v16<-a1;v13<-a1;v11<-a1;v8<-a0;v18<-a1;v14<-a1;v17<-a1;v19<-a0;v4<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, v11, v5, v14, v16, v10, v21, v13, v22, v7, v0, v17, v12, v9, v18, v29, v20, v8, v19, v4, v6, v15, v2], uses: [v2, v11, v5, v14, v16, v10, v13, a0, v22, v7, v0, v17, v12, s10, v9, v18, zero, v29, v20, v8, v19, v4, v6, v15, v3], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s10, a0, zero], live_out: [v0, v21, v2]
; block parameters: []
.g_b0:
  mv v0, s10  ; live: [a0, s10, zero]
  mv v2, a0  ; live: [a0, v0, s10, zero]
  lw v3, 8(v0)  ; live: [a0, v0, s10, zero, v2]
  lw v4, 16(v0)  ; live: [v2, a0, v0, s10, zero, v3]
  lw v5, 24(v0)  ; live: [v2, a0, v0, s10, zero, v4, v3]
  lw v6, 32(v0)  ; live: [v2, v5, a0, v0, s10, zero, v4, v3]
  lw v7, 40(v0)  ; live: [v2, v5, a0, v0, s10, zero, v4, v6, v3]
  lw v8, 48(v0)  ; live: [v2, v5, a0, v7, v0, s10, zero, v4, v6, v3]
  lw v9, 56(v0)  ; live: [v2, v5, a0, v7, v0, s10, zero, v8, v4, v6, v3]
  lw v10, 64(v0)  ; live: [v2, v5, a0, v7, v0, s10, v9, zero, v8, v4, v6, v3]
  lw v11, 72(v0)  ; live: [v2, v5, v10, a0, v7, v0, s10, v9, zero, v8, v4, v6, v3]
  lw v12, 80(v0)  ; live: [v2, v11, v5, v10, a0, v7, v0, s10, v9, zero, v8, v4, v6, v3]
  add v13, v3, v4  ; live: [v2, v11, v5, v10, a0, v7, v12, s10, v9, zero, v8, v4, v6, v3]
  add v14, v13, v5  ; live: [v11, v5, v10, a0, zero, v13, v7, v8, v6, v12, s10, v9, v2]
  add v15, v14, v6  ; live: [v11, v14, v10, a0, zero, v8, v7, v6, v12, s10, v9, v2]
  add v16, v15, v7  ; live: [v11, v10, a0, zero, v8, v7, v12, v15, s10, v9, v2]
  add v17, v16, v8  ; live: [v11, v16, v10, a0, zero, v8, v12, s10, v9, v2]
  add v18, v17, v9  ; live: [v11, v10, a0, zero, v17, v12, s10, v9, v2]
  add v19, v18, v10  ; live: [v11, v18, v10, a0, zero, v12, s10, v2]
  add v20, v19, v11  ; live: [v11, a0, zero, v19, v12, s10, v2]
  add v21, v20, v12  ; live: [v20, v2, v12, s10, a0, zero]
  slt v29, v2, zero  ; live: [v2, s10, a0, zero]
  xori v22, v29, 1  ; live: [v29, s10, a0, zero]
; control
  bne v22, zero, .g_b1  ; live: [v22, s10, a0, zero]
  j .g_b2  ; live: [s10, a0, zero]

; block info: defs: [a0], uses: [v25, a0], upward_exposed: [v25], params_defs: [v25]
; live_in: [v25], live_out: []
; block parameters: [v25]
.g_b3:
; control
  mv a0, v25  ; live: [v25]
  ret  ; live: [v25, a0]

; block info: defs: [v25, t1, v26, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, s10, ft8, a7, t3, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2], uses: [v0, v24, a0, v23, v2], upward_exposed: [v0, v2], params_defs: []
; live_in: [v0, v2], live_out: [v25]
; block parameters: []
.g_b1:
  neg v23, v2  ; live: [v0, v2]
  mv s10, v0  ; live: [v0, v23, v2]
  ld v26, 0(v0)  ; live: [v0, v23, v2]
  mv a0, v23  ; live: [v0, v23, v2]
  jalr v26  ; live: [v0, a0, v2]
  mv v24, a0  ; live: [v0, a0, v2]
; control
  mv v25, v24  ; live: [v0, v24, v2]
  j .g_b3  ; live: [v0, v2]

; block info: defs: [v25], uses: [v21], upward_exposed: [v21], params_defs: []
; live_in: [v21], live_out: [v25]
; block parameters: []
.g_b2:
; control
  mv v25, v21  ; live: [v21]
  j .g_b3  ; live: [v21]

  .p2align 3
  .globl h
  .type h, @function
h:
; block info: defs: [v3, t1, v16, v13, v7, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft5, ft10, v4, v6, ft7, v11, ft4, v5, v10, v21, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v3, v11, v5, v21, v10, a0, v13, v7, v17, s11, v12, v9, v8, v19, v4, v6, v15, v2], upward_exposed: [s11, a0], params_defs: []
; live_in: [s11, a0], live_out: []
; block parameters: []
.h_b0:
  mv v2, a0  ; live: [a0, s11]
  lw v4, 0(v2)  ; live: [s11, v2]
  lw v5, 4(v2)  ; live: [s11, v4, v2]
  lw v6, 8(v2)  ; live: [v5, s11, v4, v2]
  lw v7, 12(v2)  ; live: [v5, s11, v4, v6, v2]
  lw v8, 16(v2)  ; live: [v5, v7, s11, v4, v6, v2]
  lw v9, 20(v2)  ; live: [v5, v7, s11, v8, v4, v6, v2]
  lw v10, 24(v2)  ; live: [v5, v7, s11, v9, v8, v4, v6, v2]
  lw v11, 28(v2)  ; live: [v5, v10, v7, s11, v9, v8, v4, v6, v2]
  lw v12, 32(v2)  ; live: [v11, v5, v10, v7, s11, v9, v8, v4, v6, v2]
  lw v13, 36(v2)  ; live: [v11, v5, v10, v7, s11, v12, v9, v8, v4, v6, v2]
  addi v19, s11, -88  ; live: [v11, v5, v10, v13, v7, s11, v12, v9, v8, v4, v6]
  andi v3, v19, -8  ; live: [v11, v5, v10, v13, v7, s11, v12, v9, v8, v19, v4, v6]
  la v21, g  ; live: [v11, v5, v10, v13, v7, s11, v12, v9, v8, v4, v6, v3]
  sd v21, 0(v3)  ; live: [v11, v5, v10, v21, v13, v7, s11, v12, v9, v8, v4, v6, v3]
  sd v4, 8(v3)  ; live: [v11, v5, v10, v13, v8, v7, v4, v6, s11, v12, v9, v3]
  sd v5, 16(v3)  ; live: [v11, v5, v10, v13, v8, v7, v6, s11, v12, v9, v3]
  sd v6, 24(v3)  ; live: [v11, v10, v13, v8, v7, v6, s11, v12, v9, v3]
  sd v7, 32(v3)  ; live: [v11, v10, v13, v8, v7, s11, v12, v9, v3]
  sd v8, 40(v3)  ; live: [v11, v10, v13, v8, s11, v12, v9, v3]
  sd v9, 48(v3)  ; live: [v11, v10, v13, s11, v12, v9, v3]
  sd v10, 56(v3)  ; live: [v11, v10, v13, s11, v12, v3]
  sd v11, 64(v3)  ; live: [v11, s11, v12, v13, v3]
  sd v12, 72(v3)  ; live: [s11, v12, v13, v3]
  sd v13, 80(v3)  ; live: [s11, v13, v3]
  mv s10, v3  ; live: [s11, v3]
  ld v16, 0(v3)  ; live: [s11, v3]
  li v17, 1  ; live: [s11]
  mv a0, v17  ; live: [v17, s11]
  jalr v16  ; live: [s11, a0]
  mv v15, a0  ; live: [s11, a0]
; control
  mv a0, v15  ; live: [s11, v15]
  ret  ; live: [s11, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft10, ft5, v4, ft7, v11, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v11, v14, v16, v10, v13, a0, v17, s11, v12, v18, zero, v8, v19, v4, v15, v2], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v8, s11, -80  ; live: [s11, zero]
  andi v2, v8, -8  ; live: [s11, zero, v8]
  li v10, 1  ; live: [s11, zero, v2]
  sd v10, 0(v2)  ; live: [s11, v10, zero, v2]
  li v11, 2  ; live: [s11, zero, v2]
  sd v11, 8(v2)  ; live: [v11, s11, zero, v2]
  li v12, 3  ; live: [s11, zero, v2]
  sd v12, 16(v2)  ; live: [s11, v12, zero, v2]
  li v13, 4  ; live: [s11, zero, v2]
  sd v13, 24(v2)  ; live: [s11, zero, v13, v2]
  li v14, 5  ; live: [s11, zero, v2]
  sd v14, 32(v2)  ; live: [v14, s11, zero, v2]
  li v15, 6  ; live: [s11, zero, v2]
  sd v15, 40(v2)  ; live: [s11, v15, zero, v2]
  li v16, 7  ; live: [s11, zero, v2]
  sd v16, 48(v2)  ; live: [v16, s11, zero, v2]
  li v17, 8  ; live: [s11, zero, v2]
  sd v17, 56(v2)  ; live: [v17, s11, zero, v2]
  li v18, 9  ; live: [s11, zero, v2]
  sd v18, 64(v2)  ; live: [s11, v18, zero, v2]
  li v19, 10  ; live: [s11, zero, v2]
  sd v19, 72(v2)  ; live: [v19, s11, zero, v2]
  mv a0, v2  ; live: [s11, zero, v2]
  call h  ; live: [s11, zero, a0]
  mv v4, a0  ; live: [s11, zero, a0]
  mv a0, v4  ; live: [v4, s11, zero]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v5, zero  ; live: [s11, zero]
; control
  mv a0, zero  ; live: [s11, zero]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/debug.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f1 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f2, [1] = $f0
    let %1: bool = eq(1, 1)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1(1)
    jump b3(%2)
  }
  .bb #b2 () {
    let %3: int32 = apply f1.m0(2)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn thunk_start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn g #f2 : closure(int32) -> int32
.freevars (int32)
.entry b0 {
  .bb #b0 () {
    return ^1
  }
}
.fn dummy #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.fn main #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    return ()
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r8 [label="v2 ← a0", color=green];
  r0 [label="v8 ← a0", color=green];
  r5 [label="v12 ← a0", color=green];
  r3 [label="v7 ← a0", color=green];
  r2 [label="v9 ← a0", color=green];
  r9 [label="v18 ← a1", color=green];
  r6 [label="v6 ← a0", color=green];
  r13 [label="v16 ← a1", color=green];
  r4 [label="v3 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v14 ← a2", color=green];
  r7 [label="zero", color=blue];
  r10 [label="v20 ← a0", color=green];
  r12 [label="v15 ← a1", color=green];
  r14 [label="v5 ← a1", color=green];
  r1 -- r9;
  r0 -- r1;
  r11 -- r12;
  r8 -- r10;
  r4 -- r7;
  r1 -- r13;
  r1 -- r11;
  r4 -- r8;
  r1 -- r12;
  r4 -- r5;
  r1 -- r8;
  r7 -- r9;
  r4 -- r6;
  r4 -- r10;
  r1 -- r14;
  r7 -- r8;
  r7 -- r12;
  r1 -- r4;
  r7 -- r10;
  r7 -- r14;
  r1 -- r7;
  r8 -- r9;
  r7 -- r11;
  r1 -- r10;
  r7 -- r13;
  comment = "14:v5-> 7:zero-> 1:a0-> 13:v16-> 12:v15-> 11:v14-> 10:v20-> 4:v3-> 8:v2-> 9:v18-> 6:v6-> 5:v12-> 3:v7-> 2:v9-> 0:v8"
  comment = "v2<-a0;v8<-a0;v12<-a0;v7<-a0;v9<-a0;v18<-a1;v6<-a0;v16<-a1;v3<-a1;v14<-a2;v20<-a0;v15<-a1;v5<-a1;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="s10", color=blue];
  r2 [label="v0 ← a0", color=green];
  r1 [label="a0", color=blue];
  r3 [label="v3 ← a0", color=green];
  r1 -- r2;
  r0 -- r3;
  r0 -- r1;
  r0 -- r2;
  comment = "3:v3-> 2:v0-> 0:s10-> 1:a0"
  comment = "v0<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of dummy"];
  r0 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  comment = "1:v2-> 0:a0"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of dummy"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r1 [label="a0", color=blue];
  r0 -- r1;
  comment = "1:a0-> 0:zero"
  comment = ""
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v2, v14, v16, v5, v18, v20, v15, v3], uses: [v3, v14, v16, v5, v18, a0, zero, v20, s11, v15, v2], upward_exposed: [s11, a0, zero], params_defs: []
; live_in: [s11, a0, zero], live_out: [v3]
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0, zero, s11]
  addi v18, s11, -16  ; live: [a0, zero, s11, v2]
  andi v3, v18, -8  ; live: [v18, a0, zero, s11, v2]
  la v20, g  ; live: [v2, a0, zero, s11, v3]
  sd v20, 0(v3)  ; live: [v2, a0, zero, v20, s11, v3]
  sd v2, 8(v3)  ; live: [v3, s11, a0, zero, v2]
  li v14, 1  ; live: [s11, a0, zero]
  li v15, 1  ; live: [v14, s11, a0, zero]
  xor v16, v14, v15  ; live: [v14, s11, v15, a0, zero]
  sltiu v5, v16, 1  ; live: [v16, s11, a0, zero]
; control
  bne v5, zero, .f_b1  ; live: [v5, s11, a0, zero]
  j .f_b2  ; live: [s11, a0, zero]

; block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
; live_in: [v8], live_out: []
; block parameters: [v8]
.f_b3:
; control
  mv a0, v8  ; live: [v8]
  ret  ; live: [a0, v8]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v9, a0, v7], upward_exposed: [], params_defs: []
; live_in: [], live_out: [v8]
; block parameters: []
.f_b1:
  li v9, 1  ; live: []
  mv a0, v9  ; live: [v9]
  call f  ; live: [a0]
  mv v7, a0  ; live: [a0]
; control
  mv v8, v7  ; live: [v7]
  j .f_b3  ; live: []

; block info: defs: [t1, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v6, v12, a0, v3], upward_exposed: [v3], params_defs: []
; live_in: [v3], live_out: [v8]
; block parameters: []
.f_b2:
  mv s10, v3  ; live: [v3]
  ld v11, 0(v3)  ; live: [v3]
  li v12, 2  ; live: [v3]
  mv a0, v12  ; live: [v12, v3]
  jalr v11  ; live: [a0, v3]
  mv v6, a0  ; live: [a0, v3]
; control
  mv v8, v6  ; live: [v6, v3]
  j .f_b3  ; live: [v3]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, v0, a0, v2], uses: [v0, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
; live_in: [s10, a0], live_out: []
; block parameters: []
.g_b0:
  mv v0, s10  ; live: [s10, a0]
  mv v2, a0  ; live: [v0, s10, a0]
  lw v3, 8(v0)  ; live: [v0, s10]
; control
  mv a0, v3  ; live: [s10, v3]
  ret  ; live: [s10, a0]

  .p2align 3
  .globl dummy
  .type dummy, @function
dummy:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.dummy_b0:
  mv v2, a0  ; live: [a0]
; control
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
; control
  mv a0, zero  ; live: [zero]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/even-odd.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn even #f2 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b6 (int32) {
    return $b6.0
  }
  .bb #b4 () {
    let %4: int32 = sub($f0, 1)
    let %5: int32 = apply f2.m0(%4)
    jump b5(%5)
  }
  .bb #b1 () {
    let %2: bool = eq($f0, 0)
    br %2 b3() b4()
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b2 () {
    let %6: int32 = add($f0, 1)
    let %7: int32 = apply f2.m0(%6)
    jump b6(%7)
  }
  .bb #b3 () {
    let %3: int32 = load_symbol ::0
    jump b5(%3)
  }
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f3
    let %1: bool = le(0, $f0)
    br %1 b1() b2()
  }
}
.fn main #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f2(789)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.fn odd #f3 : closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b6 (int32) {
    return $b6.0
  }
  .bb #b4 () {
    let %3: int32 = sub($f0, 1)
    let %4: int32 = call f2(%3)
    jump b5(%4)
  }
  .bb #b1 () {
    let %1: bool = eq($f0, 0)
    br %1 b3() b4()
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b2 () {
    let %5: int32 = add($f0, 1)
    let %6: int32 = call f2(%5)
    jump b6(%6)
  }
  .bb #b3 () {
    let %2: int32 = load_symbol ::1
    jump b5(%2)
  }
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
}
.fn thunk_start #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn thunk_t.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn thunk_f.2 #f1 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.thunk ::0 t.1
.thunk ::1 f.2
.thunk ::2 start

graph G {
  graph [label="integer interference graph of even"];
  r0 [label="v14 ← a0", color=green];
  r3 [label="zero", color=blue];
  r9 [label="v5 ← a1", color=green];
  r6 [label="v3 ← a1", color=green];
  r13 [label="v13 ← a1", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="v11 ← a0", color=green];
  r11 [label="v20 ← a0", color=green];
  r7 [label="v30 ← a0", color=green];
  r10 [label="v12 ← a0", color=green];
  r14 [label="v18 ← a1", color=green];
  r8 [label="v26 ← a0", color=green];
  r5 [label="v28 ← a1", color=green];
  r15 [label="v9 ← a1", color=green];
  r2 [label="a0", color=blue];
  r16 [label="v10 ← a1", color=green];
  r18 [label="v6 ← a1", color=green];
  r19 [label="v7 ← a0", color=green];
  r17 [label="v24 ← a1", color=green];
  r12 [label="v8 ← a0", color=green];
  r6 -- r7;
  r6 -- r19;
  r2 -- r6;
  r4 -- r15;
  r4 -- r16;
  r4 -- r11;
  r6 -- r11;
  r3 -- r4;
  r4 -- r5;
  r6 -- r15;
  r2 -- r4;
  r3 -- r6;
  r6 -- r14;
  r6 -- r18;
  r2 -- r8;
  r3 -- r12;
  r4 -- r12;
  r2 -- r5;
  r6 -- r17;
  r2 -- r13;
  r3 -- r9;
  r4 -- r7;
  r3 -- r11;
  r6 -- r16;
  r4 -- r18;
  r2 -- r7;
  r4 -- r17;
  r3 -- r7;
  r2 -- r9;
  r4 -- r6;
  r6 -- r12;
  r4 -- r14;
  r2 -- r3;
  r3 -- r5;
  r4 -- r19;
  r3 -- r8;
  comment = "19:v7-> 4:v2-> 2:a0-> 17:v24-> 16:v10-> 15:v9-> 14:v18-> 13:v13-> 11:v20-> 6:v3-> 1:v11-> 0:v14-> 18:v6-> 7:v30-> 5:v28-> 3:zero-> 8:v26-> 10:v12-> 9:v5-> 12:v8"
  comment = "v14<-a0;v5<-a1;v3<-a1;v13<-a1;v2<-a0;v11<-a0;v20<-a0;v30<-a0;v12<-a0;v18<-a1;v26<-a0;v28<-a1;v9<-a1;v10<-a1;v6<-a1;v7<-a0;v24<-a1;v8<-a0;"
}

graph G {
  graph [label="float interference graph of even"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r4 [label="v3 ← a0", color=green];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r2;
  comment = "4:v3-> 3:v2-> 2:a0-> 1:v5-> 0:zero"
  comment = "v3<-a0;v5<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of odd"];
  r0 [label="v12 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r9 [label="v15 ← a1", color=green];
  r6 [label="a0", color=blue];
  r13 [label="v10 ← a0", color=green];
  r4 [label="v17 ← a1", color=green];
  r1 [label="v9 ← a0", color=green];
  r11 [label="v8 ← a1", color=green];
  r7 [label="v22 ← a0", color=green];
  r10 [label="v7 ← a1", color=green];
  r14 [label="v20 ← a1", color=green];
  r8 [label="v3 ← a0", color=green];
  r5 [label="v6 ← a1", color=green];
  r15 [label="v4 ← a1", color=green];
  r2 [label="zero", color=blue];
  r16 [label="v5 ← a0", color=green];
  r12 [label="v11 ← a1", color=green];
  r6 -- r7;
  r2 -- r5;
  r3 -- r9;
  r3 -- r14;
  r2 -- r6;
  r3 -- r11;
  r3 -- r4;
  r3 -- r15;
  r2 -- r7;
  r2 -- r4;
  r3 -- r16;
  r6 -- r12;
  r3 -- r6;
  r2 -- r3;
  r3 -- r5;
  r2 -- r8;
  r6 -- r8;
  r3 -- r10;
  comment = "16:v5-> 3:v2-> 15:v4-> 14:v20-> 13:v10-> 12:v11-> 6:a0-> 11:v8-> 10:v7-> 9:v15-> 8:v3-> 7:v22-> 5:v6-> 2:zero-> 4:v17-> 1:v9-> 0:v12"
  comment = "v12<-a0;v2<-a0;v15<-a1;v10<-a0;v17<-a1;v9<-a0;v8<-a1;v22<-a0;v7<-a1;v20<-a1;v3<-a0;v6<-a1;v4<-a1;v5<-a0;v11<-a1;"
}

graph G {
  graph [label="float interference graph of odd"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  r1 [label="t6", color=blue];
  r0 -- r1;
  comment = "1:t6-> 0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_t.1"];
  r0 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  comment = "1:a0-> 0:v2"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_t.1"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_f.2"];
  r0 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  comment = "1:a0-> 0:v2"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_f.2"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl even
  .type even, @function
even:
; block info: defs: [v3, v5, v28, v26, v30, v2], uses: [v2, v5, a0, zero, v26, v30, s11, v28, v3], upward_exposed: [s11, a0, zero], params_defs: []
; live_in: [s11, a0, zero], live_out: [v3, zero, v2]
; block parameters: []
.even_b0:
  mv v2, a0  ; live: [s11, a0, zero]
  addi v28, s11, -8  ; live: [s11, a0, zero, v2]
  andi v3, v28, -8  ; live: [s11, v28, a0, zero, v2]
  la v30, odd  ; live: [v3, s11, a0, zero, v2]
  sd v30, 0(v3)  ; live: [v2, v3, s11, a0, zero, v30]
  slt v26, zero, v2  ; live: [s11, a0, zero, v2]
  xori v5, v26, 1  ; live: [s11, a0, zero, v26]
; control
  bne v5, zero, .even_b1  ; live: [v5, s11, a0, zero]
  j .even_b2  ; live: [s11, a0, zero]

; block info: defs: [v11, v14, v12], uses: [v11, v14], upward_exposed: [], params_defs: []
; live_in: [], live_out: [v12]
; block parameters: []
.even_b3:
  la v14, t.1  ; live: []
  lw v11, 0(v14)  ; live: [v14]
; control
  mv v12, v11  ; live: [v11]
  j .even_b5  ; live: []

; block info: defs: [v13], uses: [v12], upward_exposed: [v12], params_defs: [v12]
; live_in: [v12], live_out: [v13]
; block parameters: [v12]
.even_b5:
; control
  mv v13, v12  ; live: [v12]
  j .even_b6  ; live: [v12]

; block info: defs: [v20, v8], uses: [v8, zero, v20, v2], upward_exposed: [zero, v2], params_defs: []
; live_in: [v3, zero, v2], live_out: [v3, v2]
; block parameters: []
.even_b1:
  xor v20, v2, zero  ; live: [v2, zero, v3]
  sltiu v8, v20, 1  ; live: [v2, zero, v20, v3]
; control
  bne v8, zero, .even_b3  ; live: [v2, v8, zero, v3]
  j .even_b4  ; live: [v2, zero, v3]

; block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
; live_in: [v13], live_out: []
; block parameters: [v13]
.even_b6:
; control
  mv a0, v13  ; live: [v13]
  ret  ; live: [v13, a0]

; block info: defs: [t1, v16, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v3, v18, v10, v9, a0, v2], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, v3], live_out: [v12]
; block parameters: []
.even_b4:
  li v18, 1  ; live: [v3, v2]
  sub v9, v2, v18  ; live: [v3, v18, v2]
  mv s10, v3  ; live: [v3, v9, v2]
  ld v16, 0(v3)  ; live: [v3, v9, v2]
  mv a0, v9  ; live: [v3, v9, v2]
  jalr v16  ; live: [v3, a0, v2]
  mv v10, a0  ; live: [v3, a0, v2]
; control
  mv v12, v10  ; live: [v3, v10, v2]
  j .even_b5  ; live: [v3, v2]

; block info: defs: [t1, v13, v22, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, v7, v6, v24, a0, v2], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, v3], live_out: [v13]
; block parameters: []
.even_b2:
  li v24, 1  ; live: [v3, v2]
  add v6, v2, v24  ; live: [v3, v24, v2]
  mv s10, v3  ; live: [v3, v6, v2]
  ld v22, 0(v3)  ; live: [v3, v6, v2]
  mv a0, v6  ; live: [v3, v6, v2]
  jalr v22  ; live: [v3, a0, v2]
  mv v7, a0  ; live: [v3, a0, v2]
; control
  mv v13, v7  ; live: [v3, v7, v2]
  j .even_b6  ; live: [v3, v2]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 789  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  call even  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl odd
  .type odd, @function
odd:
; block info: defs: [v3, v22, v2], uses: [v2, v3, a0, zero, v22], upward_exposed: [a0, zero], params_defs: []
; live_in: [a0, zero], live_out: [zero, v2]
; block parameters: []
.odd_b0:
  mv v2, a0  ; live: [a0, zero]
  slt v22, zero, v2  ; live: [a0, zero, v2]
  xori v3, v22, 1  ; live: [a0, zero, v22]
; control
  bne v3, zero, .odd_b1  ; live: [a0, zero, v3]
  j .odd_b2  ; live: [a0, zero]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, v20, a4, fa6, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a0, v20, v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v11]
; block parameters: []
.odd_b2:
  li v20, 1  ; live: [v2]
  add v4, v2, v20  ; live: [v20, v2]
  mv a0, v4  ; live: [v4, v2]
  call even  ; live: [a0, v2]
  mv v5, a0  ; live: [a0, v2]
; control
  mv v11, v5  ; live: [v5, v2]
  j .odd_b6  ; live: [v2]

; block info: defs: [v17, v6], uses: [v17, v6, zero, v2], upward_exposed: [zero, v2], params_defs: []
; live_in: [zero, v2], live_out: [v2]
; block parameters: []
.odd_b1:
  xor v17, v2, zero  ; live: [zero, v2]
  sltiu v6, v17, 1  ; live: [v17, zero, v2]
; control
  bne v6, zero, .odd_b3  ; live: [v6, zero, v2]
  j .odd_b4  ; live: [zero, v2]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v7, v8, v15, a0, v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v10]
; block parameters: []
.odd_b4:
  li v15, 1  ; live: [v2]
  sub v7, v2, v15  ; live: [v15, v2]
  mv a0, v7  ; live: [v7, v2]
  call even  ; live: [a0, v2]
  mv v8, a0  ; live: [a0, v2]
; control
  mv v10, v8  ; live: [v8, v2]
  j .odd_b5  ; live: [v2]

; block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
; live_in: [v11], live_out: []
; block parameters: [v11]
.odd_b6:
; control
  mv a0, v11  ; live: [v11]
  ret  ; live: [v11, a0]

; block info: defs: [v11], uses: [v10], upward_exposed: [v10], params_defs: [v10]
; live_in: [v10], live_out: [v11]
; block parameters: [v10]
.odd_b5:
; control
  mv v11, v10  ; live: [v10]
  j .odd_b6  ; live: [v10]

; block info: defs: [v12, v10, v9], uses: [v12, v9], upward_exposed: [], params_defs: []
; live_in: [], live_out: [v10]
; block parameters: []
.odd_b3:
  la v12, f.2  ; live: []
  lw v9, 0(v12)  ; live: [v12]
; control
  mv v10, v9  ; live: [v9]
  j .odd_b5  ; live: []

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, t6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, t6], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_t.1  ; live: []
  la t6, t.1  ; live: [a0]
  sw a0, 0(t6)  ; live: [a0, t6]
  call thunk_f.2  ; live: []
  la t6, f.2  ; live: [a0]
  sw a0, 0(t6)  ; live: [a0, t6]
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl thunk_t.1
  .type thunk_t.1, @function
thunk_t.1:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.thunk_t.1_b0:
; control
  li v2, 123  ; live: []
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_f.2
  .type thunk_f.2, @function
thunk_f.2:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.thunk_f.2_b0:
; control
  li v2, 456  ; live: []
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl t.1
  .type t.1, @object
t.1:
  .zero 4
  .p2align 3
  .globl f.2
  .type f.2, @object
f.2:
  .zero 4
  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/fib.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn fib #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 1)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3($f0)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = call f0(%1)
    let %3: int32 = sub($f0, 2)
    let %4: int32 = call f0(%3)
    let %5: int32 = add(%2, %4)
    jump b3(%5)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(30)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of fib"];
  r0 [label="v9 ← a1", color=green];
  r5 [label="v5 ← a1", color=green];
  r3 [label="v15 ← a1", color=green];
  r2 [label="v2 ← a0", color=green];
  r9 [label="v8 ← a1", color=green];
  r6 [label="v12 ← a1", color=green];
  r13 [label="v3 ← a0", color=green];
  r4 [label="v4 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v17 ← a1", color=green];
  r7 [label="v6 ← a1", color=green];
  r10 [label="zero", color=blue];
  r12 [label="v18 ← a1", color=green];
  r8 [label="v7 ← a1", color=green];
  r10 -- r13;
  r2 -- r5;
  r2 -- r10;
  r0 -- r1;
  r2 -- r6;
  r1 -- r13;
  r1 -- r11;
  r5 -- r6;
  r5 -- r7;
  r1 -- r12;
  r2 -- r7;
  r2 -- r11;
  r1 -- r5;
  r2 -- r4;
  r5 -- r8;
  r2 -- r9;
  r10 -- r12;
  r2 -- r3;
  r2 -- r8;
  r10 -- r11;
  r1 -- r10;
  r1 -- r2;
  comment = "13:v3-> 12:v18-> 10:zero-> 1:a0-> 11:v17-> 2:v2-> 9:v8-> 8:v7-> 5:v5-> 7:v6-> 6:v12-> 4:v4-> 3:v15-> 0:v9"
  comment = "v9<-a1;v5<-a1;v15<-a1;v2<-a0;v8<-a1;v12<-a1;v3<-a0;v4<-a1;v17<-a1;v6<-a1;v18<-a1;v7<-a1;"
}

graph G {
  graph [label="float interference graph of fib"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r4 [label="v3 ← a0", color=green];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r2;
  comment = "4:v3-> 3:v2-> 2:a0-> 1:v5-> 0:zero"
  comment = "v3<-a0;v5<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl fib
  .type fib, @function
fib:
; block info: defs: [v3, v17, v18, v2], uses: [v3, v17, v18, a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
; live_in: [a0, zero], live_out: [v2]
; block parameters: []
.fib_b0:
  mv v2, a0  ; live: [a0, zero]
  li v17, 1  ; live: [a0, zero, v2]
  slt v18, v2, v17  ; live: [v17, a0, zero, v2]
  xori v3, v18, 1  ; live: [v18, a0, zero]
; control
  bne v3, zero, .fib_b1  ; live: [a0, zero, v3]
  j .fib_b2  ; live: [a0, zero]

; block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
; live_in: [v9], live_out: []
; block parameters: [v9]
.fib_b3:
; control
  mv a0, v9  ; live: [v9]
  ret  ; live: [v9, a0]

; block info: defs: [t1, v7, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, a0, v7, v8, v4, v6, v15, v12, v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v9]
; block parameters: []
.fib_b2:
  li v15, 1  ; live: [v2]
  sub v4, v2, v15  ; live: [v15, v2]
  mv a0, v4  ; live: [v4, v2]
  call fib  ; live: [a0, v2]
  mv v5, a0  ; live: [a0, v2]
  li v12, 2  ; live: [v5, v2]
  sub v6, v2, v12  ; live: [v5, v12, v2]
  mv a0, v6  ; live: [v5, v6, v2]
  call fib  ; live: [v5, a0, v2]
  mv v7, a0  ; live: [v5, a0, v2]
  add v8, v5, v7  ; live: [v7, v5, v2]
; control
  mv v9, v8  ; live: [v8, v2]
  j .fib_b3  ; live: [v2]

; block info: defs: [v9], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v9]
; block parameters: []
.fib_b1:
; control
  mv v9, v2  ; live: [v2]
  j .fib_b3  ; live: [v2]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 30  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  call fib  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/float.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn thunk_start #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = neg(12.3)
    let %1: double = abs(%0)
    let %2: double = sqrt(%1)
    let %3: double = ext_call minimbt_cos(%2)
    let %4: double = ext_call minimbt_sin(%3)
    let %5: double = add(%4, 4.5)
    let %6: double = mul(6.7, 8.9)
    let %7: double = div(%6, 1.23456789)
    let %8: double = sub(%5, %7)
    let %9: double = conv.i2d(1000000)
    let %10: double = mul(%8, %9)
    let %11: int32 = conv.d2i.rtz(%10)
    let %12: unit = ext_call minimbt_print_int(%11)
    return %12
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r20 [label="fv10 ← a0", color=green];
  r23 [label="fv12 ← a0", color=green];
  r3 [label="fv2 ← a0", color=green];
  r9 [label="v29 ← a0", color=green];
  r26 [label="v14 ← a0", color=green];
  r6 [label="fa0", color=blue];
  r13 [label="fv25 ← a0", color=green];
  r4 [label="fv3 ← a0", color=green];
  r1 [label="v36 ← a0", color=green];
  r11 [label="fv7 ← a0", color=green];
  r7 [label="fv5 ← a0", color=green];
  r10 [label="fv30 ← a0", color=green];
  r22 [label="fv11 ← a0", color=green];
  r14 [label="v26 ← a0", color=green];
  r8 [label="fv6 ← a0", color=green];
  r5 [label="fv4 ← a0", color=green];
  r24 [label="v13 ← a0", color=green];
  r15 [label="fv27 ← a0", color=green];
  r25 [label="a0", color=blue];
  r2 [label="fv37 ← a0", color=green];
  r16 [label="fv8 ← a0", color=green];
  r18 [label="fv22 ← a0", color=green];
  r19 [label="fv9 ← a0", color=green];
  r21 [label="v18 ← a0", color=green];
  r17 [label="v21 ← a0", color=green];
  r12 [label="v24 ← a0", color=green];
  r0 -- r14;
  r0 -- r25;
  r0 -- r9;
  r0 -- r21;
  r0 -- r24;
  r0 -- r1;
  r0 -- r17;
  r0 -- r26;
  r0 -- r12;
  comment = "26:v14-> 0:zero-> 25:a0-> 19:fv9-> 24:v13-> 23:fv12-> 22:fv11-> 13:fv25-> 21:v18-> 20:fv10-> 11:fv7-> 18:fv22-> 17:v21-> 1:v36-> 14:v26-> 2:fv37-> 3:fv2-> 8:fv6-> 10:fv30-> 6:fa0-> 9:v29-> 7:fv5-> 16:fv8-> 12:v24-> 5:fv4-> 15:fv27-> 4:fv3"
  comment = "fv10<-a0;fv12<-a0;fv2<-a0;v29<-a0;v14<-a0;fv25<-a0;fv3<-a0;v36<-a0;fv7<-a0;fv5<-a0;fv30<-a0;fv11<-a0;v26<-a0;fv6<-a0;fv4<-a0;v13<-a0;fv27<-a0;fv37<-a0;fv8<-a0;fv22<-a0;fv9<-a0;v18<-a0;v21<-a0;v24<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  r0 [label="fv6 ← fa1", color=green];
  r5 [label="fv8 ← fa2", color=green];
  r3 [label="fv7 ← fa1", color=green];
  r2 [label="fv25 ← fa2", color=green];
  r9 [label="fv11 ← fa0", color=green];
  r6 [label="fv22 ← fa0", color=green];
  r4 [label="fv27 ← fa0", color=green];
  r1 [label="fv30 ← fa0", color=green];
  r7 [label="fv9 ← fa0", color=green];
  r8 [label="fv10 ← fa1", color=green];
  r2 -- r4;
  r0 -- r1;
  r3 -- r6;
  r2 -- r3;
  r3 -- r5;
  r5 -- r6;
  r3 -- r4;
  r8 -- r9;
  r3 -- r7;
  comment = "9:fv11-> 8:fv10-> 7:fv9-> 3:fv7-> 6:fv22-> 5:fv8-> 4:fv27-> 2:fv25-> 1:fv30-> 0:fv6"
  comment = "fv6<-fa1;fv8<-fa2;fv7<-fa1;fv25<-fa2;fv11<-fa0;fv22<-fa0;fv27<-fa0;fv30<-fa0;fv9<-fa0;fv10<-fa1;"
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [fv30, fv12, a1, t5, fa1, fv2, fa2, ft6, fv25, a4, fa6, a6, ft5, ft10, fv27, fv3, fv37, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, fv11, ft3, t2, fv7, t1, fv10, v14, v26, v13, ft0, ft1, fv5, fv22, v29, ft7, v21, a5, a0, fv8, v36, a2, fv4, v24, fv6, ft8, t3, fv9, t0, fa5, v18, fa0, t4], uses: [fv10, v14, v26, v13, fv30, fv12, fv5, fv22, fv2, v29, fv25, zero, fv27, fv3, fv37, v21, a0, fv8, v36, fv4, v24, fv6, fv9, v18, fv11, fa0, fv7], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v36, 4623113902481840538  ; live: [zero]
  fmv.d.x fv37, v36  ; live: [zero, v36]
  fneg.d fv2, fv37  ; live: [fv37, zero]
  fabs.d fv3, fv2  ; live: [fv2, zero]
  fsqrt.d fv4, fv3  ; live: [zero, fv3]
  fmv.d fa0, fv4  ; live: [fv4, zero]
  call minimbt_cos  ; live: [zero, fa0]
  fmv.d fv5, fa0  ; live: [zero, fa0]
  fmv.d fa0, fv5  ; live: [fv5, zero]
  call minimbt_sin  ; live: [zero, fa0]
  fmv.d fv6, fa0  ; live: [zero, fa0]
  li v29, 4616752568008179712  ; live: [fv6, zero]
  fmv.d.x fv30, v29  ; live: [fv6, zero, v29]
  fadd.d fv7, fv6, fv30  ; live: [fv6, zero, fv30]
  li v24, 4619229547803233485  ; live: [zero, fv7]
  fmv.d.x fv25, v24  ; live: [v24, zero, fv7]
  li v26, 4621199872640208077  ; live: [zero, fv25, fv7]
  fmv.d.x fv27, v26  ; live: [fv7, zero, fv25, v26]
  fmul.d fv8, fv25, fv27  ; live: [fv27, zero, fv25, fv7]
  li v21, 4608238818662014491  ; live: [zero, fv7, fv8]
  fmv.d.x fv22, v21  ; live: [v21, zero, fv7, fv8]
  fdiv.d fv9, fv8, fv22  ; live: [fv22, zero, fv7, fv8]
  fsub.d fv10, fv7, fv9  ; live: [fv9, zero, fv7]
  li v18, 1000000  ; live: [fv10, zero]
  fcvt.d.w fv11, v18  ; live: [fv10, v18, zero]
  fmul.d fv12, fv10, fv11  ; live: [fv10, zero, fv11]
  fcvt.w.d v13, fv12, rtz  ; live: [fv12, zero]
  mv a0, v13  ; live: [zero, v13]
  call minimbt_print_int  ; live: [zero, a0]
  mv v14, zero  ; live: [zero]
; control
  mv a0, v14  ; live: [v14, zero]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/funcomp.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn thunk_start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn compose #f0 : fn(closure(int32) -> int32, closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(3)> <- [0] = f1, [1] = $f0, [2] = $f1
    return f0.m0
  }
}
.fn dec #f4 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f0, 1)
    return %0
  }
}
.fn dbl #f2 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f0)
    return %0
  }
}
.fn composed #f1 : closure(int32) -> int32
.freevars (closure(int32) -> int32, closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = apply ^1($f0)
    let %1: int32 = apply ^2(%0)
    return %1
  }
}
.fn inc #f3 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    return %0
  }
}
.fn main #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f2
    let _ = alloc <m1: closure(int32) -> int32 heap(1)> <- [0] = f4
    let %2: closure(int32) -> int32 = call f0(f5.m0, f5.m1)
    let _ = alloc <m2: closure(int32) -> int32 heap(1)> <- [0] = f3
    let %4: closure(int32) -> int32 = call f0(f5.m2, %2)
    let %5: int32 = apply %4(123)
    let %6: unit = ext_call minimbt_print_int(%5)
    return %6
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of dec"];
  r0 [label="a0", color=blue];
  r2 [label="v4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r1 -- r2;
  comment = "3:v3-> 2:v4-> 1:v2-> 0:a0"
  comment = "v4<-a0;v2<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of dec"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of compose"];
  r0 [label="a0", color=blue];
  r5 [label="v4 ← a0", color=green];
  r6 [label="v8 ← a0", color=green];
  r4 [label="v6 ← a0", color=green];
  r1 [label="a1", color=blue];
  r3 [label="v3 ← a0", color=green];
  r2 [label="v2 ← a2", color=green];
  r2 -- r5;
  r0 -- r1;
  r2 -- r6;
  r5 -- r6;
  r3 -- r4;
  r1 -- r6;
  r1 -- r5;
  r2 -- r4;
  r1 -- r3;
  r1 -- r4;
  r3 -- r6;
  r2 -- r3;
  r3 -- r5;
  r1 -- r2;
  comment = "6:v8-> 5:v4-> 1:a1-> 2:v2-> 0:a0-> 3:v3-> 4:v6"
  comment = "v4<-a0;v8<-a0;v6<-a0;v3<-a0;v2<-a2;"
}

graph G {
  graph [label="float interference graph of compose"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of dbl"];
  r0 [label="a0", color=blue];
  r2 [label="v3 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  comment = "2:v3-> 1:v2-> 0:a0"
  comment = "v3<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of dbl"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of composed"];
  r0 [label="a0", color=blue];
  r5 [label="v4 ← a1", color=green];
  r6 [label="v5 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="s10", color=blue];
  r3 [label="v2 ← a0", color=green];
  r7 [label="v6 ← a0", color=green];
  r2 [label="v0 ← a1", color=green];
  r1 -- r5;
  r2 -- r4;
  r0 -- r1;
  r2 -- r3;
  r3 -- r5;
  r5 -- r6;
  r3 -- r4;
  r1 -- r7;
  r4 -- r5;
  r0 -- r5;
  r1 -- r6;
  r0 -- r2;
  comment = "7:v6-> 1:s10-> 0:a0-> 6:v5-> 5:v4-> 4:v3-> 3:v2-> 2:v0"
  comment = "v4<-a1;v5<-a0;v3<-a0;v2<-a0;v6<-a0;v0<-a1;"
}

graph G {
  graph [label="float interference graph of composed"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of inc"];
  r0 [label="a0", color=blue];
  r2 [label="v4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r1 -- r2;
  comment = "3:v3-> 2:v4-> 1:v2-> 0:a0"
  comment = "v4<-a0;v2<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of inc"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r3 [label="v26 ← a0", color=green];
  r9 [label="v7 ← a0", color=green];
  r6 [label="v23 ← a0", color=green];
  r13 [label="v9 ← a0", color=green];
  r4 [label="v21 ← a0", color=green];
  r1 [label="v24 ← a0", color=green];
  r11 [label="v4 ← a0", color=green];
  r7 [label="a0", color=blue];
  r10 [label="v17 ← a1", color=green];
  r14 [label="v14 ← a0", color=green];
  r8 [label="a1", color=blue];
  r5 [label="v3 ← a0", color=green];
  r15 [label="v10 ← a0", color=green];
  r2 [label="v2 ← a1", color=green];
  r16 [label="v11 ← a0", color=green];
  r12 [label="v19 ← a0", color=green];
  r2 -- r6;
  r9 -- r11;
  r0 -- r15;
  r0 -- r13;
  r5 -- r6;
  r0 -- r2;
  r0 -- r3;
  r2 -- r4;
  r0 -- r9;
  r0 -- r8;
  r9 -- r12;
  r0 -- r5;
  r0 -- r14;
  r2 -- r5;
  r0 -- r1;
  r11 -- r12;
  r0 -- r10;
  r5 -- r7;
  r9 -- r10;
  r0 -- r12;
  r0 -- r11;
  r0 -- r4;
  r7 -- r9;
  r7 -- r8;
  r0 -- r7;
  r0 -- r16;
  r2 -- r3;
  r0 -- r6;
  comment = "16:v11-> 0:zero-> 7:a0-> 15:v10-> 14:v14-> 13:v9-> 12:v19-> 11:v4-> 9:v7-> 10:v17-> 8:a1-> 6:v23-> 5:v3-> 4:v21-> 2:v2-> 3:v26-> 1:v24"
  comment = "v26<-a0;v7<-a0;v23<-a0;v9<-a0;v21<-a0;v24<-a0;v4<-a0;v17<-a1;v14<-a0;v3<-a0;v10<-a0;v2<-a1;v11<-a0;v19<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl dec
  .type dec, @function
dec:
; block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.dec_b0:
  mv v2, a0  ; live: [a0]
  li v4, 1  ; live: [v2]
  sub v3, v2, v4  ; live: [v4, v2]
; control
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl compose
  .type compose, @function
compose:
; block info: defs: [v3, v8, v4, v6, a0, v2], uses: [v3, a0, v8, v4, a1, v6, s11, v2], upward_exposed: [a1, s11, a0], params_defs: []
; live_in: [a1, s11, a0], live_out: []
; block parameters: []
.compose_b0:
  mv v2, a0  ; live: [a0, a1, s11]
  mv v3, a1  ; live: [a1, s11, v2]
  addi v6, s11, -24  ; live: [v3, a1, s11, v2]
  andi v4, v6, -8  ; live: [v3, a1, v6, s11, v2]
  la v8, composed  ; live: [v3, v4, a1, s11, v2]
  sd v8, 0(v4)  ; live: [v3, v8, v4, a1, s11, v2]
  sd v2, 8(v4)  ; live: [v2, v4, a1, s11, v3]
  sd v3, 16(v4)  ; live: [v4, a1, s11, v3]
; control
  mv a0, v4  ; live: [v4, a1, s11]
  ret  ; live: [a1, s11, a0]

  .p2align 3
  .globl dbl
  .type dbl, @function
dbl:
; block info: defs: [v3, a0, v2], uses: [v3, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.dbl_b0:
  mv v2, a0  ; live: [a0]
  add v3, v2, v2  ; live: [v2]
; control
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl composed
  .type composed, @function
composed:
; block info: defs: [v2, t1, v7, v0, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, v0, v4, v6, s10, v2], upward_exposed: [s10, a0], params_defs: []
; live_in: [s10, a0], live_out: []
; block parameters: []
.composed_b0:
  mv v0, s10  ; live: [a0, s10]
  mv v2, a0  ; live: [v0, a0]
  lw v3, 8(v0)  ; live: [v0, v2]
  lw v4, 16(v0)  ; live: [v3, v0, v2]
  mv s10, v3  ; live: [v3, v4, v2]
  ld v9, 0(v3)  ; live: [v3, v4, v2]
  mv a0, v2  ; live: [v4, v2]
  jalr v9  ; live: [v4, a0]
  mv v5, a0  ; live: [v4, a0]
  mv s10, v4  ; live: [v4, v5]
  ld v7, 0(v4)  ; live: [v4, v5, s10]
  mv a0, v5  ; live: [v5, s10]
  jalr v7  ; live: [s10, a0]
  mv v6, a0  ; live: [s10, a0]
; control
  mv a0, v6  ; live: [v6, s10]
  ret  ; live: [s10, a0]

  .p2align 3
  .globl inc
  .type inc, @function
inc:
; block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.inc_b0:
  mv v2, a0  ; live: [a0]
  li v4, 1  ; live: [v2]
  add v3, v2, v4  ; live: [v4, v2]
; control
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v2, t1, v14, v26, v13, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, v4, ft5, ft7, v11, ft4, v21, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, v24, s10, v9, ft8, a7, fa7, t3, t0, fa5, fa3, ft3, v23, fa0, t4, t2, v3], uses: [v2, v11, v14, v21, v10, v26, a0, v7, v17, a1, s11, v24, v9, zero, v23, v19, v4, v3], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v24, s11, -8  ; live: [s11, zero]
  andi v2, v24, -8  ; live: [s11, v24, zero]
  la v26, dbl  ; live: [s11, zero, v2]
  sd v26, 0(v2)  ; live: [s11, zero, v26, v2]
  addi v21, s11, -8  ; live: [s11, zero, v2]
  andi v3, v21, -8  ; live: [s11, v21, zero, v2]
  la v23, dec  ; live: [v2, s11, zero, v3]
  sd v23, 0(v3)  ; live: [v2, s11, zero, v23, v3]
  mv a0, v2  ; live: [v2, s11, zero, v3]
  mv a1, v3  ; live: [s11, zero, a0, v3]
  call compose  ; live: [a1, s11, zero, a0]
  mv v7, a0  ; live: [s11, zero, a0]
  addi v17, s11, -8  ; live: [s11, zero, v7]
  andi v4, v17, -8  ; live: [v17, s11, zero, v7]
  la v19, inc  ; live: [v4, s11, zero, v7]
  sd v19, 0(v4)  ; live: [v19, v4, s11, zero, v7]
  mv a0, v4  ; live: [v4, s11, zero, v7]
  mv a1, v7  ; live: [s11, zero, a0, v7]
  call compose  ; live: [a1, s11, zero, a0]
  mv v9, a0  ; live: [s11, zero, a0]
  mv s10, v9  ; live: [s11, zero, v9]
  ld v13, 0(v9)  ; live: [s11, zero, v9]
  li v14, 123  ; live: [s11, zero]
  mv a0, v14  ; live: [v14, s11, zero]
  jalr v13  ; live: [s11, zero, a0]
  mv v10, a0  ; live: [s11, zero, a0]
  mv a0, v10  ; live: [s11, v10, zero]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v11, zero  ; live: [s11, zero]
; control
  mv a0, v11  ; live: [v11, s11, zero]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/gcd.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn gcd #f0 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b6 (int32) {
    return $b6.0
  }
  .bb #b4 () {
    let %4: int32 = sub($f0, $f1)
    let %5: int32 = call f0($f1, %4)
    jump b5(%5)
  }
  .bb #b1 () {
    jump b6($f1)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b2 () {
    let %1: bool = le($f0, $f1)
    br %1 b3() b4()
  }
  .bb #b3 () {
    let %2: int32 = sub($f1, $f0)
    let %3: int32 = call f0($f0, %2)
    jump b5(%3)
  }
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(21600, 337500)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of gcd"];
  r8 [label="v9 ← a0", color=green];
  r0 [label="v11 ← a1", color=green];
  r5 [label="a1", color=blue];
  r3 [label="v2 ← a0", color=green];
  r2 [label="v3 ← a1", color=green];
  r9 [label="zero", color=blue];
  r6 [label="v7 ← a1", color=green];
  r13 [label="v18 ← a1", color=green];
  r4 [label="v6 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v5 ← a0", color=green];
  r7 [label="v8 ← a2", color=green];
  r10 [label="v16 ← a1", color=green];
  r12 [label="v10 ← a0", color=green];
  r14 [label="v4 ← a2", color=green];
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r3 -- r4;
  r5 -- r9;
  r2 -- r4;
  r1 -- r4;
  r3 -- r6;
  r1 -- r7;
  r2 -- r8;
  r3 -- r10;
  r5 -- r13;
  r1 -- r2;
  r2 -- r5;
  r2 -- r10;
  r3 -- r9;
  r0 -- r1;
  r3 -- r11;
  r1 -- r13;
  r9 -- r10;
  r5 -- r14;
  r2 -- r7;
  r2 -- r11;
  r3 -- r7;
  r1 -- r5;
  r2 -- r9;
  r1 -- r14;
  r1 -- r3;
  r9 -- r13;
  r2 -- r3;
  r3 -- r5;
  r9 -- r14;
  r3 -- r8;
  comment = "14:v4-> 9:zero-> 5:a1-> 1:a0-> 13:v18-> 12:v10-> 11:v5-> 3:v2-> 10:v16-> 8:v9-> 2:v3-> 7:v8-> 6:v7-> 4:v6-> 0:v11"
  comment = "v9<-a0;v11<-a1;v2<-a0;v3<-a1;v7<-a1;v18<-a1;v6<-a1;v5<-a0;v8<-a2;v16<-a1;v10<-a0;v4<-a2;"
}

graph G {
  graph [label="float interference graph of gcd"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v2 ← a0", color=green];
  r6 [label="v3 ← a0", color=green];
  r4 [label="a1", color=blue];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v6 ← a1", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r2 -- r4;
  r0 -- r1;
  r2 -- r3;
  r0 -- r5;
  r0 -- r6;
  r0 -- r2;
  comment = "6:v3-> 5:v2-> 4:a1-> 2:a0-> 0:zero-> 3:v6-> 1:v5"
  comment = "v2<-a0;v3<-a0;v5<-a0;v6<-a1;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl gcd
  .type gcd, @function
gcd:
; block info: defs: [v3, v4, v18, v2], uses: [v18, a0, zero, v4, a1, v2], upward_exposed: [a1, a0, zero], params_defs: []
; live_in: [a1, a0, zero], live_out: [v2, zero, v3]
; block parameters: []
.gcd_b0:
  mv v2, a0  ; live: [a1, a0, zero]
  mv v3, a1  ; live: [a1, a0, zero, v2]
  xor v18, v2, zero  ; live: [a1, a0, zero, v2]
  sltiu v4, v18, 1  ; live: [a1, v18, a0, zero]
; control
  bne v4, zero, .gcd_b1  ; live: [v4, a1, a0, zero]
  j .gcd_b2  ; live: [a1, a0, zero]

; block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
; live_in: [v11], live_out: []
; block parameters: [v11]
.gcd_b6:
; control
  mv a0, v11  ; live: [v11]
  ret  ; live: [v11, a0]

; block info: defs: [v11], uses: [v3], upward_exposed: [v3], params_defs: []
; live_in: [v3], live_out: [v11]
; block parameters: []
.gcd_b1:
; control
  mv v11, v3  ; live: [v3]
  j .gcd_b6  ; live: [v3]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, v7, v6, a1, a0, v2], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, v3], live_out: [v10]
; block parameters: []
.gcd_b4:
  sub v6, v2, v3  ; live: [v3, v2]
  mv a0, v3  ; live: [v3, v6, v2]
  mv a1, v6  ; live: [v3, v6, a0, v2]
  call gcd  ; live: [v3, a1, a0, v2]
  mv v7, a0  ; live: [v3, a0, v2]
; control
  mv v10, v7  ; live: [v3, v7, v2]
  j .gcd_b5  ; live: [v3, v2]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v8, a1, a0, v9, v3], upward_exposed: [v2, v3], params_defs: []
; live_in: [v3, v2], live_out: [v10]
; block parameters: []
.gcd_b3:
  sub v8, v3, v2  ; live: [v2, v3]
  mv a0, v2  ; live: [v2, v8, v3]
  mv a1, v8  ; live: [v2, v8, a0, v3]
  call gcd  ; live: [v2, a1, a0, v3]
  mv v9, a0  ; live: [v2, a0, v3]
; control
  mv v10, v9  ; live: [v2, v9, v3]
  j .gcd_b5  ; live: [v2, v3]

; block info: defs: [v16, v5], uses: [v3, v16, v5, zero, v2], upward_exposed: [v3, zero, v2], params_defs: []
; live_in: [v2, zero, v3], live_out: [v2, v3]
; block parameters: []
.gcd_b2:
  slt v16, v2, v3  ; live: [v3, zero, v2]
  xori v5, v16, 1  ; live: [v3, v16, zero, v2]
; control
  bne v5, zero, .gcd_b3  ; live: [v3, v5, zero, v2]
  j .gcd_b4  ; live: [v3, zero, v2]

; block info: defs: [v11], uses: [v10], upward_exposed: [v10], params_defs: [v10]
; live_in: [v10], live_out: [v11]
; block parameters: [v10]
.gcd_b5:
; control
  mv v11, v10  ; live: [v10]
  j .gcd_b6  ; live: [v10]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v6, a1, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 21600  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  li v6, 337500  ; live: [zero, a0]
  mv a1, v6  ; live: [v6, zero, a0]
  call gcd  ; live: [a1, zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/id.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    return %0
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(1000)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r2 [label="v4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r1 -- r2;
  comment = "3:v3-> 2:v4-> 1:v2-> 0:a0"
  comment = "v4<-a0;v2<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r4 [label="v3 ← a0", color=green];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r2;
  comment = "4:v3-> 3:v2-> 2:a0-> 1:v5-> 0:zero"
  comment = "v3<-a0;v5<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
  li v4, 1  ; live: [v2]
  add v3, v2, v4  ; live: [v4, v2]
; control
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 1000  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/inprod-loop.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn inprod #f0 : fn(array[double], array[double], double, int32) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f3)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = load double offset($f0, $f3)
    let %2: double = load double offset($f1, $f3)
    let %3: double = mul(%1, %2)
    let %4: double = add($f2, %3)
    let %5: int32 = sub($f3, 1)
    let %6: double = call f0($f0, $f1, %4, %5)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3($f2)
  }
  .bb #b3 (double) {
    return $b3.0
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(3)> <- [..] = 1.23
    let _ = alloc <m1: array[double] heap(3)> <- [..] = 4.56
    let %2: double = call f0(f1.m0, f1.m1, 0, 2)
    let %3: double = mul(1000000, %2)
    let %4: int32 = ext_call minimbt_truncate(%3)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of inprod"];
  r0 [label="fv13 ← a0", color=green];
  r20 [label="zero", color=blue];
  r3 [label="v5 ← a3", color=green];
  r9 [label="v19 ← a1", color=green];
  r6 [label="v22 ← a1", color=green];
  r13 [label="fv10 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="fa0", color=blue];
  r11 [label="fv8 ← a0", color=green];
  r7 [label="v23 ← a1", color=green];
  r10 [label="v20 ← a1", color=green];
  r22 [label="v6 ← a0", color=green];
  r14 [label="v15 ← a1", color=green];
  r8 [label="fv7 ← a0", color=green];
  r5 [label="fv4 ← a0", color=green];
  r15 [label="v11 ← a2", color=green];
  r2 [label="v2 ← a0", color=green];
  r16 [label="a0", color=blue];
  r18 [label="a2", color=blue];
  r19 [label="fv12 ← a0", color=green];
  r21 [label="v25 ← a3", color=green];
  r17 [label="a1", color=blue];
  r12 [label="fv9 ← a0", color=green];
  r2 -- r6;
  r17 -- r18;
  r20 -- r22;
  r4 -- r15;
  r4 -- r16;
  r17 -- r21;
  r16 -- r20;
  r3 -- r4;
  r15 -- r17;
  r3 -- r15;
  r2 -- r15;
  r2 -- r14;
  r3 -- r16;
  r2 -- r4;
  r2 -- r18;
  r3 -- r6;
  r17 -- r22;
  r3 -- r20;
  r3 -- r10;
  r2 -- r10;
  r3 -- r9;
  r3 -- r14;
  r2 -- r17;
  r4 -- r7;
  r3 -- r17;
  r18 -- r21;
  r2 -- r16;
  r18 -- r20;
  r4 -- r18;
  r2 -- r7;
  r4 -- r17;
  r16 -- r21;
  r18 -- r22;
  r3 -- r7;
  r2 -- r9;
  r3 -- r18;
  r4 -- r10;
  r4 -- r6;
  r15 -- r16;
  r4 -- r14;
  r2 -- r3;
  r20 -- r21;
  r16 -- r18;
  r4 -- r9;
  r16 -- r22;
  r16 -- r17;
  r17 -- r20;
  comment = "22:v6-> 21:v25-> 20:zero-> 18:a2-> 17:a1-> 16:a0-> 19:fv12-> 15:v11-> 4:v3-> 3:v5-> 2:v2-> 14:v15-> 13:fv10-> 12:fv9-> 11:fv8-> 10:v20-> 9:v19-> 8:fv7-> 7:v23-> 6:v22-> 5:fv4-> 1:fa0-> 0:fv13"
  comment = "fv13<-a0;v5<-a3;v19<-a1;v22<-a1;fv10<-a0;v3<-a0;fv8<-a0;v23<-a1;v20<-a1;v6<-a0;v15<-a1;fv7<-a0;fv4<-a0;v11<-a2;v2<-a0;fv12<-a0;v25<-a3;fv9<-a0;"
}

graph G {
  graph [label="float interference graph of inprod"];
  r0 [label="fa0", color=blue];
  r5 [label="fv9 ← fa0", color=green];
  r6 [label="fv10 ← fa0", color=green];
  r4 [label="fv8 ← fa0", color=green];
  r1 [label="fv13 ← fa1", color=green];
  r3 [label="fv7 ← fa2", color=green];
  r7 [label="fv12 ← fa0", color=green];
  r2 [label="fv4 ← fa1", color=green];
  r2 -- r4;
  r2 -- r5;
  r0 -- r1;
  r2 -- r3;
  r2 -- r6;
  r3 -- r4;
  r2 -- r7;
  r0 -- r2;
  comment = "7:fv12-> 2:fv4-> 6:fv10-> 5:fv9-> 4:fv8-> 3:fv7-> 0:fa0-> 1:fv13"
  comment = "fv9<-fa0;fv10<-fa0;fv8<-fa0;fv13<-fa1;fv7<-fa2;fv12<-fa0;fv4<-fa1;"
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r20 [label="v9 ← a0", color=green];
  r3 [label="v24 ← a0", color=green];
  r9 [label="a0", color=blue];
  r6 [label="v3 ← a0", color=green];
  r13 [label="v16 ← a1", color=green];
  r4 [label="fv25 ← a0", color=green];
  r1 [label="v22 ← a0", color=green];
  r11 [label="fv15 ← a0", color=green];
  r7 [label="v20 ← a0", color=green];
  r10 [label="a1", color=blue];
  r14 [label="a2", color=blue];
  r8 [label="fv21 ← a0", color=green];
  r5 [label="v18 ← a0", color=green];
  r15 [label="fv6 ← a0", color=green];
  r2 [label="v2 ← a1", color=green];
  r16 [label="v12 ← a0", color=green];
  r18 [label="fv7 ← a0", color=green];
  r19 [label="v8 ← a0", color=green];
  r17 [label="fv13 ← a0", color=green];
  r12 [label="fa0", color=blue];
  r6 -- r7;
  r10 -- r13;
  r0 -- r14;
  r2 -- r5;
  r6 -- r9;
  r0 -- r1;
  r0 -- r10;
  r2 -- r6;
  r0 -- r13;
  r9 -- r10;
  r2 -- r7;
  r0 -- r2;
  r0 -- r3;
  r0 -- r9;
  r0 -- r7;
  r9 -- r13;
  r0 -- r16;
  r0 -- r19;
  r2 -- r3;
  r0 -- r20;
  r0 -- r5;
  r0 -- r6;
  r9 -- r14;
  r10 -- r14;
  comment = "20:v9-> 19:v8-> 18:fv7-> 17:fv13-> 16:v12-> 0:zero-> 9:a0-> 15:fv6-> 14:a2-> 10:a1-> 13:v16-> 12:fa0-> 11:fv15-> 8:fv21-> 7:v20-> 6:v3-> 5:v18-> 2:v2-> 4:fv25-> 3:v24-> 1:v22"
  comment = "v9<-a0;v24<-a0;v3<-a0;v16<-a1;fv25<-a0;v22<-a0;fv15<-a0;v20<-a0;fv21<-a0;v18<-a0;fv6<-a0;v2<-a1;v12<-a0;fv7<-a0;v8<-a0;fv13<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  r0 [label="fv6 ← fa1", color=green];
  r1 [label="fv13 ← fa0", color=green];
  r0 -- r1;
  comment = "1:fv13-> 0:fv6"
  comment = "fv6<-fa1;fv13<-fa0;"
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl inprod
  .type inprod, @function
inprod:
; block info: defs: [v3, v25, fv4, v5, v6, v2], uses: [v25, v5, a0, zero, fa0, a2, a1, v6], upward_exposed: [a2, a1, a0, zero, fa0], params_defs: []
; live_in: [a2, a1, a0, zero, fa0], live_out: [v3, v5, fv4, v2]
; block parameters: []
.inprod_b0:
  mv v2, a0  ; live: [a0, zero, fa0, a2, a1]
  mv v3, a1  ; live: [a0, zero, fa0, a2, a1]
  fmv.d fv4, fa0  ; live: [a0, zero, fa0, a2, a1]
  mv v5, a2  ; live: [a0, zero, fa0, a2, a1]
  slt v25, zero, v5  ; live: [v5, a0, zero, fa0, a2, a1]
  xori v6, v25, 1  ; live: [v25, a0, zero, fa0, a2, a1]
; control
  bne v6, zero, .inprod_b1  ; live: [a0, zero, fa0, a2, a1, v6]
  j .inprod_b2  ; live: [a2, a1, a0, zero, fa0]

; block info: defs: [fv13], uses: [fv4], upward_exposed: [fv4], params_defs: []
; live_in: [fv4], live_out: [fv13]
; block parameters: []
.inprod_b2:
; control
  fmv.d fv13, fv4  ; live: [fv4]
  j .inprod_b3  ; live: [fv4]

; block info: defs: [fv10, t1, v22, ft0, ft1, fv12, a1, t5, fa1, fa2, ft6, v20, a4, fa6, a6, v19, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, fv8, ft2, a2, a3, ft8, fv9, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, fv13, t4, t2, v15, fv7], uses: [v2, v11, fv10, v5, a0, v22, fv8, a2, fv12, a1, fv4, fv9, v23, v20, fa0, v19, v15, fv7, v3], upward_exposed: [v3, v5, fv4, v2], params_defs: []
; live_in: [v2, v5, fv4, v3], live_out: [fv13]
; block parameters: []
.inprod_b1:
  slli v22, v5, 3  ; live: [v2, v5, fv4, v3]
  add v23, v2, v22  ; live: [v2, v5, v22, fv4, v3]
  fld fv7, 0(v23)  ; live: [v2, v5, v23, fv4, v3]
  slli v19, v5, 3  ; live: [v2, v5, fv4, fv7, v3]
  add v20, v3, v19  ; live: [v2, v5, v19, fv4, fv7, v3]
  fld fv8, 0(v20)  ; live: [v2, v5, v20, fv4, fv7, v3]
  fmul.d fv9, fv7, fv8  ; live: [v2, v5, fv8, fv4, fv7, v3]
  fadd.d fv10, fv4, fv9  ; live: [v2, fv9, v5, fv4, v3]
  li v15, 1  ; live: [v2, fv10, v5, fv4, v3]
  sub v11, v5, v15  ; live: [v2, fv10, v5, fv4, v15, v3]
  mv a0, v2  ; live: [v2, v11, fv10, v5, fv4, v3]
  mv a1, v3  ; live: [v2, v11, fv10, v5, a0, fv4, v3]
  fmv.d fa0, fv10  ; live: [v2, v11, fv10, v5, a0, fv4, a1, v3]
  mv a2, v11  ; live: [v2, v11, v5, a0, fa0, fv4, a1, v3]
  call inprod  ; live: [v2, v5, a0, fa0, a2, fv4, a1, v3]
  fmv.d fv12, fa0  ; live: [v3, fa0, v5, fv4, v2]
; control
  fmv.d fv13, fv12  ; live: [v3, fv12, v5, fv4, v2]
  j .inprod_b3  ; live: [v3, v5, fv4, v2]

; block info: defs: [fa0], uses: [fa0, fv13], upward_exposed: [fv13], params_defs: [fv13]
; live_in: [fv13], live_out: []
; block parameters: [fv13]
.inprod_b3:
; control
  fmv.d fa0, fv13  ; live: [fv13]
  ret  ; live: [fa0, fv13]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v2, t1, v16, v22, ft0, ft1, a1, v12, t5, fv15, fa1, fa2, fv25, ft6, a4, v20, fa6, v8, a6, ft5, ft10, fv21, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, fv6, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, fv13, t4, t2, fv7, v3], uses: [v2, v3, v16, a0, v22, a2, a1, s11, v24, v12, fv15, fv6, v9, v18, fv25, zero, v20, fa0, fv13, v8, fv21, fv7], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v22, s11, -24  ; live: [s11, zero]
  andi v2, v22, -8  ; live: [s11, zero, v22]
  li v24, 4608218246714312622  ; live: [s11, zero, v2]
  fmv.d.x fv25, v24  ; live: [s11, v24, zero, v2]
  fsd fv25, 0(v2)  ; live: [s11, zero, fv25, v2]
  fsd fv25, 8(v2)  ; live: [s11, zero, fv25, v2]
  fsd fv25, 16(v2)  ; live: [s11, zero, fv25, v2]
  addi v18, s11, -24  ; live: [s11, zero, v2]
  andi v3, v18, -8  ; live: [s11, v18, zero, v2]
  li v20, 4616820122002590269  ; live: [v2, s11, zero, v3]
  fmv.d.x fv21, v20  ; live: [v2, s11, zero, v20, v3]
  fsd fv21, 0(v3)  ; live: [v2, s11, zero, fv21, v3]
  fsd fv21, 8(v3)  ; live: [v2, s11, zero, fv21, v3]
  fsd fv21, 16(v3)  ; live: [v2, s11, zero, fv21, v3]
  mv a0, v2  ; live: [v2, s11, zero, v3]
  mv a1, v3  ; live: [s11, zero, a0, v3]
  fmv.d.x fv15, zero  ; live: [a1, s11, zero, a0]
  fmv.d fa0, fv15  ; live: [a1, s11, fv15, zero, a0]
  li v16, 2  ; live: [a1, s11, zero, a0, fa0]
  mv a2, v16  ; live: [a1, v16, s11, zero, a0, fa0]
  call inprod  ; live: [a2, a1, s11, zero, a0, fa0]
  fmv.d fv6, fa0  ; live: [s11, zero, fa0]
  li v12, 4696837146684686336  ; live: [s11, fv6, zero]
  fmv.d.x fv13, v12  ; live: [s11, v12, fv6, zero]
  fmul.d fv7, fv13, fv6  ; live: [s11, fv6, zero, fv13]
  fmv.d fa0, fv7  ; live: [s11, zero, fv7]
  call minimbt_truncate  ; live: [s11, zero, fa0]
  mv v8, a0  ; live: [s11, zero, a0]
  mv a0, v8  ; live: [s11, zero, v8]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v9, zero  ; live: [s11, zero]
; control
  mv a0, v9  ; live: [s11, zero, v9]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/inprod-rec.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn inprod #f0 : fn(array[double], array[double], int32) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = load double offset($f0, $f2)
    let %2: double = load double offset($f1, $f2)
    let %3: double = mul(%1, %2)
    let %4: int32 = sub($f2, 1)
    let %5: double = call f0($f0, $f1, %4)
    let %6: double = add(%3, %5)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(0)
  }
  .bb #b3 (double) {
    return $b3.0
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(3)> <- [..] = 1.23
    let _ = alloc <m1: array[double] heap(3)> <- [..] = 4.56
    let %2: double = call f0(f1.m0, f1.m1, 2)
    let %3: double = mul(1000000, %2)
    let %4: int32 = ext_call minimbt_truncate(%3)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of inprod"];
  r0 [label="fv12 ← a0", color=green];
  r20 [label="v25 ← a3", color=green];
  r3 [label="v4 ← a2", color=green];
  r9 [label="v19 ← a1", color=green];
  r6 [label="v22 ← a1", color=green];
  r13 [label="v9 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="fa0", color=blue];
  r11 [label="fv8 ← a0", color=green];
  r7 [label="fv6 ← a0", color=green];
  r10 [label="fv7 ← a0", color=green];
  r22 [label="fv24 ← a0", color=green];
  r14 [label="a0", color=blue];
  r8 [label="v18 ← a1", color=green];
  r5 [label="v21 ← a1", color=green];
  r15 [label="a1", color=blue];
  r2 [label="v2 ← a0", color=green];
  r16 [label="a2", color=blue];
  r18 [label="fv11 ← a0", color=green];
  r19 [label="zero", color=blue];
  r17 [label="fv10 ← a0", color=green];
  r21 [label="v5 ← a1", color=green];
  r12 [label="v15 ← a1", color=green];
  r14 -- r19;
  r4 -- r13;
  r2 -- r6;
  r3 -- r19;
  r4 -- r15;
  r4 -- r16;
  r16 -- r20;
  r14 -- r20;
  r3 -- r4;
  r13 -- r15;
  r4 -- r5;
  r3 -- r15;
  r2 -- r15;
  r14 -- r16;
  r2 -- r14;
  r15 -- r21;
  r2 -- r4;
  r3 -- r16;
  r3 -- r13;
  r3 -- r6;
  r14 -- r21;
  r13 -- r14;
  r2 -- r12;
  r2 -- r8;
  r3 -- r12;
  r4 -- r12;
  r16 -- r19;
  r2 -- r5;
  r3 -- r9;
  r2 -- r13;
  r3 -- r14;
  r4 -- r8;
  r2 -- r16;
  r16 -- r21;
  r19 -- r21;
  r2 -- r9;
  r4 -- r6;
  r4 -- r14;
  r15 -- r16;
  r15 -- r20;
  r15 -- r19;
  r2 -- r3;
  r3 -- r5;
  r14 -- r15;
  r4 -- r9;
  r3 -- r8;
  r19 -- r20;
  comment = "22:fv24-> 21:v5-> 19:zero-> 14:a0-> 20:v25-> 16:a2-> 15:a1-> 18:fv11-> 17:fv10-> 13:v9-> 4:v3-> 3:v4-> 2:v2-> 12:v15-> 11:fv8-> 10:fv7-> 9:v19-> 8:v18-> 7:fv6-> 6:v22-> 5:v21-> 1:fa0-> 0:fv12"
  comment = "fv12<-a0;v25<-a3;v4<-a2;v19<-a1;v22<-a1;v9<-a0;v3<-a0;fv8<-a0;fv6<-a0;fv7<-a0;fv24<-a0;v18<-a1;v21<-a1;v2<-a0;fv11<-a0;fv10<-a0;v5<-a1;v15<-a1;"
}

graph G {
  graph [label="float interference graph of inprod"];
  r0 [label="fv12 ← fa1", color=green];
  r5 [label="fv10 ← fa0", color=green];
  r4 [label="fv8 ← fa1", color=green];
  r1 [label="fa0", color=blue];
  r3 [label="fv7 ← fa0", color=green];
  r2 [label="fv6 ← fa1", color=green];
  r0 -- r1;
  r1 -- r4;
  r4 -- r5;
  r2 -- r3;
  comment = "5:fv10-> 4:fv8-> 1:fa0-> 0:fv12-> 3:fv7-> 2:fv6"
  comment = "fv12<-fa1;fv10<-fa0;fv8<-fa1;fv7<-fa0;fv6<-fa1;"
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r3 [label="v23 ← a0", color=green];
  r9 [label="a0", color=blue];
  r6 [label="v3 ← a0", color=green];
  r13 [label="fa0", color=blue];
  r4 [label="fv24 ← a0", color=green];
  r1 [label="v21 ← a0", color=green];
  r11 [label="v15 ← a1", color=green];
  r7 [label="v19 ← a0", color=green];
  r10 [label="a1", color=blue];
  r14 [label="fv6 ← a0", color=green];
  r8 [label="fv20 ← a0", color=green];
  r5 [label="v17 ← a0", color=green];
  r15 [label="v12 ← a0", color=green];
  r2 [label="v2 ← a1", color=green];
  r16 [label="fv13 ← a0", color=green];
  r18 [label="v8 ← a0", color=green];
  r19 [label="v9 ← a0", color=green];
  r17 [label="fv7 ← a0", color=green];
  r12 [label="a2", color=blue];
  r6 -- r7;
  r2 -- r5;
  r6 -- r9;
  r0 -- r1;
  r0 -- r10;
  r2 -- r6;
  r9 -- r11;
  r0 -- r15;
  r9 -- r10;
  r0 -- r12;
  r0 -- r11;
  r2 -- r7;
  r0 -- r2;
  r0 -- r3;
  r10 -- r12;
  r0 -- r9;
  r0 -- r7;
  r0 -- r19;
  r2 -- r3;
  r9 -- r12;
  r10 -- r11;
  r0 -- r5;
  r0 -- r6;
  r0 -- r18;
  comment = "19:v9-> 18:v8-> 17:fv7-> 16:fv13-> 15:v12-> 0:zero-> 9:a0-> 14:fv6-> 13:fa0-> 12:a2-> 10:a1-> 11:v15-> 8:fv20-> 7:v19-> 6:v3-> 5:v17-> 2:v2-> 4:fv24-> 3:v23-> 1:v21"
  comment = "v23<-a0;v3<-a0;fv24<-a0;v21<-a0;v15<-a1;v19<-a0;fv6<-a0;fv20<-a0;v17<-a0;v12<-a0;v2<-a1;fv13<-a0;v8<-a0;v9<-a0;fv7<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  r0 [label="fv6 ← fa1", color=green];
  r1 [label="fv13 ← fa0", color=green];
  r0 -- r1;
  comment = "1:fv13-> 0:fv6"
  comment = "fv6<-fa1;fv13<-fa0;"
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl inprod
  .type inprod, @function
inprod:
; block info: defs: [v3, v25, v4, v5, v2], uses: [v25, v5, a0, zero, a2, v4, a1], upward_exposed: [a2, a1, a0, zero], params_defs: []
; live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
; block parameters: []
.inprod_b0:
  mv v2, a0  ; live: [a2, a1, a0, zero]
  mv v3, a1  ; live: [a2, a1, a0, zero]
  mv v4, a2  ; live: [a2, a1, a0, zero]
  slt v25, zero, v4  ; live: [a2, v4, a1, a0, zero]
  xori v5, v25, 1  ; live: [v25, a2, a1, a0, zero]
; control
  bne v5, zero, .inprod_b1  ; live: [a2, a1, v5, a0, zero]
  j .inprod_b2  ; live: [a2, a1, a0, zero]

; block info: defs: [fv24, fv12], uses: [fv24, zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [fv12]
; block parameters: []
.inprod_b2:
; control
  fmv.d.x fv24, zero  ; live: [zero]
  fmv.d fv12, fv24  ; live: [fv24, zero]
  j .inprod_b3  ; live: [zero]

; block info: defs: [t1, fv10, v22, ft0, ft1, fv12, a1, t5, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, ft4, v21, ft9, a5, a0, fa4, fv8, ft2, a2, a3, fv6, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, fv11, ft3, fa0, t4, t2, v15, fv7], uses: [v3, fv10, v21, a0, v22, fv8, a2, a1, fv6, v9, v18, fv11, fa0, v19, v4, v15, fv7, v2], upward_exposed: [v3, v4, v2], params_defs: []
; live_in: [v2, v4, v3], live_out: [fv12]
; block parameters: []
.inprod_b1:
  slli v21, v4, 3  ; live: [v2, v4, v3]
  add v22, v2, v21  ; live: [v2, v21, v4, v3]
  fld fv6, 0(v22)  ; live: [v2, v22, v4, v3]
  slli v18, v4, 3  ; live: [v2, v4, fv6, v3]
  add v19, v3, v18  ; live: [v2, v18, v4, fv6, v3]
  fld fv7, 0(v19)  ; live: [v2, v19, v4, fv6, v3]
  fmul.d fv8, fv6, fv7  ; live: [v2, v4, fv6, fv7, v3]
  li v15, 1  ; live: [v2, fv8, v4, v3]
  sub v9, v4, v15  ; live: [v2, fv8, v4, v15, v3]
  mv a0, v2  ; live: [v2, fv8, v4, v9, v3]
  mv a1, v3  ; live: [v2, a0, fv8, v4, v9, v3]
  mv a2, v9  ; live: [v2, a0, fv8, v4, a1, v9, v3]
  call inprod  ; live: [v2, a0, fv8, v4, a2, a1, v3]
  fmv.d fv10, fa0  ; live: [v3, fv8, fa0, v4, v2]
  fadd.d fv11, fv8, fv10  ; live: [v3, fv8, v4, fv10, v2]
; control
  fmv.d fv12, fv11  ; live: [v3, v4, fv11, v2]
  j .inprod_b3  ; live: [v3, v4, v2]

; block info: defs: [fa0], uses: [fv12, fa0], upward_exposed: [fv12], params_defs: [fv12]
; live_in: [fv12], live_out: []
; block parameters: [fv12]
.inprod_b3:
; control
  fmv.d fa0, fv12  ; live: [fv12]
  ret  ; live: [fv12, fa0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v2, fv24, t1, fv20, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft10, ft5, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, v17, a3, fv6, v9, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, fv13, t4, t2, v15, fv7, v3], uses: [v2, fv24, v21, a0, fv20, a2, v17, a1, s11, v12, fv6, v9, zero, v23, fa0, fv13, v8, v19, v15, fv7, v3], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v21, s11, -24  ; live: [s11, zero]
  andi v2, v21, -8  ; live: [s11, v21, zero]
  li v23, 4608218246714312622  ; live: [s11, zero, v2]
  fmv.d.x fv24, v23  ; live: [s11, zero, v23, v2]
  fsd fv24, 0(v2)  ; live: [fv24, s11, zero, v2]
  fsd fv24, 8(v2)  ; live: [fv24, s11, zero, v2]
  fsd fv24, 16(v2)  ; live: [fv24, s11, zero, v2]
  addi v17, s11, -24  ; live: [s11, zero, v2]
  andi v3, v17, -8  ; live: [v17, s11, zero, v2]
  li v19, 4616820122002590269  ; live: [v2, s11, zero, v3]
  fmv.d.x fv20, v19  ; live: [v2, v19, s11, zero, v3]
  fsd fv20, 0(v3)  ; live: [v2, fv20, s11, zero, v3]
  fsd fv20, 8(v3)  ; live: [v2, fv20, s11, zero, v3]
  fsd fv20, 16(v3)  ; live: [v2, fv20, s11, zero, v3]
  mv a0, v2  ; live: [v2, s11, zero, v3]
  mv a1, v3  ; live: [s11, zero, a0, v3]
  li v15, 2  ; live: [a1, s11, zero, a0]
  mv a2, v15  ; live: [a1, s11, v15, zero, a0]
  call inprod  ; live: [a2, a1, s11, zero, a0]
  fmv.d fv6, fa0  ; live: [s11, zero, fa0]
  li v12, 4696837146684686336  ; live: [s11, fv6, zero]
  fmv.d.x fv13, v12  ; live: [s11, v12, fv6, zero]
  fmul.d fv7, fv13, fv6  ; live: [s11, fv6, zero, fv13]
  fmv.d fa0, fv7  ; live: [s11, zero, fv7]
  call minimbt_truncate  ; live: [s11, zero, fa0]
  mv v8, a0  ; live: [s11, zero, a0]
  mv a0, v8  ; live: [s11, zero, v8]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v9, zero  ; live: [s11, zero]
; control
  mv a0, v9  ; live: [s11, zero, v9]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/inprod.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn gety #f1 : fn((double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = load double field($f0, 0)
    let %1: double = load double field($f0, 1)
    let %2: double = load double field($f0, 2)
    return %1
  }
}
.fn thunk_start #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn getx #f0 : fn((double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = load double field($f0, 0)
    let %1: double = load double field($f0, 1)
    let %2: double = load double field($f0, 2)
    return %0
  }
}
.fn inprod #f3 : fn((double, double, double), (double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = call f0($f0)
    let %1: double = call f0($f1)
    let %2: double = mul(%0, %1)
    let %3: double = call f1($f0)
    let %4: double = call f1($f1)
    let %5: double = mul(%3, %4)
    let %6: double = add(%2, %5)
    let %7: double = call f2($f0)
    let %8: double = call f2($f1)
    let %9: double = mul(%7, %8)
    let %10: double = add(%6, %9)
    return %10
  }
}
.fn getz #f2 : fn((double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = load double field($f0, 0)
    let %1: double = load double field($f0, 1)
    let %2: double = load double field($f0, 2)
    return %2
  }
}
.fn main #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (double, double, double) heap(3)> <- [0] = 1, [1] = 2, [2] = 3
    let _ = alloc <m1: (double, double, double) heap(3)> <- [0] = 4, [1] = 5, [2] = 6
    let %2: double = call f3(f4.m0, f4.m1)
    let %3: double = mul(1000000, %2)
    let %4: int32 = ext_call minimbt_truncate(%3)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of gety"];
  r0 [label="a0", color=blue];
  r2 [label="fv4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="fa0", color=blue];
  r0 -- r1;
  comment = "3:fa0-> 2:fv4-> 1:v2-> 0:a0"
  comment = "fv4<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of gety"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of getx"];
  r0 [label="a0", color=blue];
  r2 [label="fv3 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="fa0", color=blue];
  r0 -- r1;
  comment = "3:fa0-> 2:fv3-> 1:v2-> 0:a0"
  comment = "fv3<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of getx"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of inprod"];
  r8 [label="fv7 ← a0", color=green];
  r0 [label="a1", color=blue];
  r5 [label="fv4 ← a0", color=green];
  r15 [label="fv14 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="v2 ← a1", color=green];
  r9 [label="fv8 ← a0", color=green];
  r6 [label="fv5 ← a0", color=green];
  r13 [label="fv12 ← a0", color=green];
  r4 [label="fa0", color=blue];
  r1 [label="a0", color=blue];
  r11 [label="fv10 ← a0", color=green];
  r7 [label="fv6 ← a0", color=green];
  r10 [label="fv9 ← a0", color=green];
  r14 [label="fv13 ← a0", color=green];
  r12 [label="fv11 ← a0", color=green];
  r1 -- r2;
  r0 -- r1;
  r1 -- r3;
  r2 -- r3;
  r0 -- r2;
  comment = "15:fv14-> 14:fv13-> 13:fv12-> 12:fv11-> 11:fv10-> 10:fv9-> 9:fv8-> 8:fv7-> 7:fv6-> 6:fv5-> 5:fv4-> 4:fa0-> 3:v3-> 2:v2-> 1:a0-> 0:a1"
  comment = "fv7<-a0;fv4<-a0;fv14<-a0;v3<-a0;v2<-a1;fv8<-a0;fv5<-a0;fv12<-a0;fv10<-a0;fv6<-a0;fv9<-a0;fv13<-a0;fv11<-a0;"
}

graph G {
  graph [label="float interference graph of inprod"];
  r0 [label="fa0", color=blue];
  r5 [label="fv8 ← fa0", color=green];
  r3 [label="fv6 ← fa2", color=green];
  r2 [label="fv5 ← fa0", color=green];
  r9 [label="fv12 ← fa0", color=green];
  r6 [label="fv9 ← fa0", color=green];
  r4 [label="fv7 ← fa1", color=green];
  r1 [label="fv4 ← fa1", color=green];
  r7 [label="fv10 ← fa1", color=green];
  r10 [label="fv13 ← fa0", color=green];
  r8 [label="fv11 ← fa2", color=green];
  r0 -- r1;
  r3 -- r4;
  r4 -- r5;
  r0 -- r3;
  r0 -- r4;
  r7 -- r9;
  r0 -- r8;
  r7 -- r8;
  r0 -- r7;
  r3 -- r6;
  r7 -- r10;
  r3 -- r5;
  r8 -- r9;
  r1 -- r2;
  comment = "10:fv13-> 7:fv10-> 9:fv12-> 8:fv11-> 0:fa0-> 4:fv7-> 3:fv6-> 5:fv8-> 1:fv4-> 6:fv9-> 2:fv5"
  comment = "fv8<-fa0;fv6<-fa2;fv5<-fa0;fv12<-fa0;fv9<-fa0;fv7<-fa1;fv4<-fa1;fv10<-fa1;fv13<-fa0;fv11<-fa2;"
}

graph G {
  graph [label="integer interference graph of getz"];
  r0 [label="a0", color=blue];
  r2 [label="fv5 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="fa0", color=blue];
  r0 -- r1;
  comment = "3:fa0-> 2:fv5-> 1:v2-> 0:a0"
  comment = "fv5<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of getz"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r20 [label="fv6 ← a0", color=green];
  r23 [label="fv7 ← a0", color=green];
  r3 [label="v26 ← a1", color=green];
  r9 [label="v16 ← a1", color=green];
  r6 [label="fv29 ← a0", color=green];
  r13 [label="v20 ← a1", color=green];
  r4 [label="fv27 ← a0", color=green];
  r1 [label="v24 ← a0", color=green];
  r11 [label="v18 ← a1", color=green];
  r7 [label="v30 ← a1", color=green];
  r10 [label="v3 ← a0", color=green];
  r22 [label="fv13 ← a0", color=green];
  r14 [label="fv21 ← a0", color=green];
  r8 [label="fv31 ← a0", color=green];
  r5 [label="v28 ← a0", color=green];
  r15 [label="v22 ← a1", color=green];
  r24 [label="v8 ← a0", color=green];
  r25 [label="v9 ← a0", color=green];
  r2 [label="v2 ← a0", color=green];
  r16 [label="fv23 ← a0", color=green];
  r18 [label="a1", color=blue];
  r19 [label="fa0", color=blue];
  r21 [label="v12 ← a0", color=green];
  r17 [label="a0", color=blue];
  r12 [label="fv19 ← a0", color=green];
  r17 -- r18;
  r0 -- r15;
  r0 -- r13;
  r2 -- r15;
  r0 -- r2;
  r0 -- r3;
  r0 -- r9;
  r0 -- r24;
  r10 -- r15;
  r0 -- r17;
  r10 -- r11;
  r0 -- r5;
  r10 -- r13;
  r0 -- r25;
  r2 -- r10;
  r2 -- r5;
  r2 -- r13;
  r0 -- r21;
  r0 -- r1;
  r0 -- r10;
  r0 -- r11;
  r2 -- r7;
  r2 -- r11;
  r2 -- r9;
  r0 -- r7;
  r2 -- r3;
  r10 -- r17;
  r0 -- r18;
  comment = "25:v9-> 24:v8-> 23:fv7-> 22:fv13-> 21:v12-> 0:zero-> 17:a0-> 5:v28-> 2:v2-> 10:v3-> 11:v18-> 18:a1-> 16:fv23-> 15:v22-> 14:fv21-> 13:v20-> 4:fv27-> 19:fa0-> 9:v16-> 8:fv31-> 7:v30-> 6:fv29-> 12:fv19-> 1:v24-> 20:fv6-> 3:v26"
  comment = "fv6<-a0;fv7<-a0;v26<-a1;v16<-a1;fv29<-a0;v20<-a1;fv27<-a0;v24<-a0;v18<-a1;v30<-a1;v3<-a0;fv13<-a0;fv21<-a0;fv31<-a0;v28<-a0;v22<-a1;v8<-a0;v9<-a0;v2<-a0;fv23<-a0;v12<-a0;fv19<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  r0 [label="fv6 ← fa1", color=green];
  r1 [label="fv13 ← fa0", color=green];
  r0 -- r1;
  comment = "1:fv13-> 0:fv6"
  comment = "fv6<-fa1;fv13<-fa0;"
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl gety
  .type gety, @function
gety:
; block info: defs: [fa0, fv4, v2], uses: [fa0, fv4, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.gety_b0:
  mv v2, a0  ; live: [a0]
  fld fv4, 8(v2)  ; live: [a0, v2]
; control
  fmv.d fa0, fv4  ; live: [fv4, a0]
  ret  ; live: [a0, fa0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl getx
  .type getx, @function
getx:
; block info: defs: [fa0, fv3, v2], uses: [fa0, a0, fv3, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.getx_b0:
  mv v2, a0  ; live: [a0]
  fld fv3, 0(v2)  ; live: [a0, v2]
; control
  fmv.d fa0, fv3  ; live: [a0, fv3]
  ret  ; live: [a0, fa0]

  .p2align 3
  .globl inprod
  .type inprod, @function
inprod:
; block info: defs: [v2, t1, fv10, ft0, ft1, fv12, a1, fv14, t5, fa1, fv5, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, fv8, ft2, a2, fv4, a3, fv6, ft8, t3, a7, fa7, fv9, t0, fa5, fa3, fv11, ft3, fa0, fv13, t4, t2, fv7, v3], uses: [v3, fv10, a0, fv8, fv12, a1, fv4, fv14, fv6, fv5, fv9, fv11, fa0, fv13, fv7, v2], upward_exposed: [a1, a0], params_defs: []
; live_in: [a1, a0], live_out: []
; block parameters: []
.inprod_b0:
  mv v2, a0  ; live: [a1, a0]
  mv v3, a1  ; live: [a1, v2]
  mv a0, v2  ; live: [v2, v3]
  call getx  ; live: [v2, a0, v3]
  fmv.d fv4, fa0  ; live: [v2, fa0, v3]
  mv a0, v3  ; live: [v2, fv4, v3]
  call getx  ; live: [v2, fv4, a0, v3]
  fmv.d fv5, fa0  ; live: [v2, fa0, fv4, v3]
  fmul.d fv6, fv4, fv5  ; live: [v2, fv5, fv4, v3]
  mv a0, v2  ; live: [v2, fv6, v3]
  call gety  ; live: [v2, fv6, a0, v3]
  fmv.d fv7, fa0  ; live: [v2, fa0, fv6, v3]
  mv a0, v3  ; live: [v2, fv6, fv7, v3]
  call gety  ; live: [v2, fv6, a0, fv7, v3]
  fmv.d fv8, fa0  ; live: [v2, fa0, fv6, fv7, v3]
  fmul.d fv9, fv7, fv8  ; live: [v2, fv8, fv6, fv7, v3]
  fadd.d fv10, fv6, fv9  ; live: [v2, fv9, fv6, v3]
  mv a0, v2  ; live: [v2, fv10, v3]
  call getz  ; live: [fv10, a0, v3]
  fmv.d fv11, fa0  ; live: [fa0, fv10, v3]
  mv a0, v3  ; live: [fv10, fv11, v3]
  call getz  ; live: [fv10, fv11, a0]
  fmv.d fv12, fa0  ; live: [fv10, a1, a0, fv11, fa0]
  fmul.d fv13, fv11, fv12  ; live: [fv10, fv12, a1, a0, fv11]
  fadd.d fv14, fv10, fv13  ; live: [fv10, a1, a0, fv13]
; control
  fmv.d fa0, fv14  ; live: [a1, fv14, a0]
  ret  ; live: [a1, a0, fa0]

  .p2align 3
  .globl getz
  .type getz, @function
getz:
; block info: defs: [fa0, fv5, v2], uses: [fa0, fv5, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.getz_b0:
  mv v2, a0  ; live: [a0]
  fld fv5, 16(v2)  ; live: [a0, v2]
; control
  fmv.d fa0, fv5  ; live: [fv5, a0]
  ret  ; live: [a0, fa0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v22, a1, t5, v28, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, fv27, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, ft3, fv29, t2, fv7, v3, fv23, t1, v16, v26, fv19, ft0, ft1, v12, v8, fv21, ft7, a5, a0, v30, a2, v24, fv6, v9, ft8, t3, t0, fa5, v18, fv31, fa0, fv13, t4, v2], uses: [v3, fv23, v16, v26, v22, fv19, a1, s11, v12, v28, zero, v20, v8, fv27, fv21, a0, v30, v24, fv6, v9, v18, fv31, fa0, fv13, fv29, fv7, v2], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v24, s11, -24  ; live: [s11, zero]
  andi v2, v24, -8  ; live: [s11, v24, zero]
  li v26, 4607182418800017408  ; live: [s11, zero, v2]
  fmv.d.x fv27, v26  ; live: [s11, zero, v26, v2]
  fsd fv27, 0(v2)  ; live: [fv27, s11, zero, v2]
  li v28, 4611686018427387904  ; live: [s11, zero, v2]
  fmv.d.x fv29, v28  ; live: [s11, v28, zero, v2]
  fsd fv29, 8(v2)  ; live: [fv29, s11, zero, v2]
  li v30, 4613937818241073152  ; live: [s11, zero, v2]
  fmv.d.x fv31, v30  ; live: [s11, zero, v30, v2]
  fsd fv31, 16(v2)  ; live: [s11, fv31, zero, v2]
  addi v16, s11, -24  ; live: [s11, zero, v2]
  andi v3, v16, -8  ; live: [v16, s11, zero, v2]
  li v18, 4616189618054758400  ; live: [v2, s11, zero, v3]
  fmv.d.x fv19, v18  ; live: [v2, s11, v18, zero, v3]
  fsd fv19, 0(v3)  ; live: [v2, fv19, s11, zero, v3]
  li v20, 4617315517961601024  ; live: [v2, s11, zero, v3]
  fmv.d.x fv21, v20  ; live: [v2, s11, zero, v20, v3]
  fsd fv21, 8(v3)  ; live: [v2, s11, zero, fv21, v3]
  li v22, 4618441417868443648  ; live: [v2, s11, zero, v3]
  fmv.d.x fv23, v22  ; live: [v2, s11, zero, v22, v3]
  fsd fv23, 16(v3)  ; live: [v2, fv23, s11, zero, v3]
  mv a0, v2  ; live: [v2, s11, zero, v3]
  mv a1, v3  ; live: [s11, zero, a0, v3]
  call inprod  ; live: [a1, s11, zero, a0]
  fmv.d fv6, fa0  ; live: [s11, zero, fa0]
  li v12, 4696837146684686336  ; live: [s11, fv6, zero]
  fmv.d.x fv13, v12  ; live: [s11, v12, fv6, zero]
  fmul.d fv7, fv13, fv6  ; live: [s11, fv6, zero, fv13]
  fmv.d fa0, fv7  ; live: [s11, zero, fv7]
  call minimbt_truncate  ; live: [s11, zero, fa0]
  mv v8, a0  ; live: [s11, zero, a0]
  mv a0, v8  ; live: [s11, zero, v8]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v9, zero  ; live: [s11, zero]
; control
  mv a0, v9  ; live: [s11, zero, v9]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/join-reg.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn thunk_start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn h #f2 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 789
  }
}
.fn g #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn main #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: int32 = call f1(())
    let %2: int32 = call f2(())
    let %3: bool = eq(%2, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: int32 = sub(%0, %1)
    jump b3(%4)
  }
  .bb #b2 () {
    let %5: int32 = sub(%1, %0)
    let %6: int32 = add(%5, %0)
    let %7: int32 = add(%6, %1)
    jump b3(%7)
  }
  .bb #b3 (int32) {
    let %8: unit = ext_call minimbt_print_int($b3.0)
    return %8
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of h"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of h"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="v10 ← a1", color=green];
  r5 [label="v2 ← a1", color=green];
  r3 [label="v11 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v5 ← a0", color=green];
  r6 [label="v9 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="zero", color=blue];
  r11 [label="v7 ← a1", color=green];
  r7 [label="v4 ← a0", color=green];
  r10 [label="v6 ← a1", color=green];
  r12 [label="v8 ← a0", color=green];
  r8 [label="v17 ← a0", color=green];
  r1 -- r2;
  r4 -- r12;
  r1 -- r9;
  r0 -- r1;
  r5 -- r6;
  r1 -- r11;
  r4 -- r11;
  r1 -- r12;
  r4 -- r5;
  r1 -- r6;
  r0 -- r2;
  r1 -- r5;
  r1 -- r8;
  r0 -- r3;
  r4 -- r6;
  r5 -- r10;
  r4 -- r10;
  r5 -- r11;
  r1 -- r3;
  r1 -- r4;
  r1 -- r7;
  r1 -- r10;
  r5 -- r12;
  comment = "12:v8-> 4:v3-> 1:zero-> 11:v7-> 10:v6-> 9:v5-> 8:v17-> 7:v4-> 6:v9-> 5:v2-> 3:v11-> 0:v10-> 2:a0"
  comment = "v10<-a1;v2<-a1;v11<-a0;v5<-a0;v9<-a0;v3<-a0;v7<-a1;v4<-a0;v6<-a1;v8<-a0;v17<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 123  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl h
  .type h, @function
h:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.h_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 789  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 456  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v4, v17, v5, zero, a0], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v3, zero, v2]
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, zero  ; live: [zero]
  call g  ; live: [zero, a0]
  mv v3, a0  ; live: [zero, a0]
  mv a0, zero  ; live: [zero]
  call h  ; live: [zero, a0]
  mv v4, a0  ; live: [zero, a0]
  xor v17, v4, zero  ; live: [v4, zero]
  sltiu v5, v17, 1  ; live: [v17, zero]
; control
  bne v5, zero, .main_b1  ; live: [v5, zero]
  j .main_b2  ; live: [zero]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, a0, zero], upward_exposed: [v10, zero], params_defs: [v10]
; live_in: [v10, zero], live_out: []
; block parameters: [v10]
.main_b3:
  mv a0, v10  ; live: [v10, zero]
  call minimbt_print_int  ; live: [v10, zero, a0]
  mv v11, zero  ; live: [v10, zero]
; control
  mv a0, v11  ; live: [v11, v10, zero]
  ret  ; live: [v10, zero, a0]

; block info: defs: [v10, v9], uses: [v3, v9, v2], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, zero, v3], live_out: [v10, zero]
; block parameters: []
.main_b1:
  sub v9, v2, v3  ; live: [v3, zero, v2]
; control
  mv v10, v9  ; live: [v3, zero, v9, v2]
  j .main_b3  ; live: [v3, zero, v2]

; block info: defs: [v8, v6, v10, v7], uses: [v2, v7, v8, v6, v3], upward_exposed: [v2, v3], params_defs: []
; live_in: [v3, zero, v2], live_out: [v10, zero]
; block parameters: []
.main_b2:
  sub v6, v3, v2  ; live: [v2, zero, v3]
  add v7, v6, v2  ; live: [v2, v6, zero, v3]
  add v8, v7, v3  ; live: [v2, v7, zero, v3]
; control
  mv v10, v8  ; live: [v2, v8, zero, v3]
  j .main_b3  ; live: [v2, zero, v3]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/join-reg2.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn thunk_start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn h #f2 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 789
  }
}
.fn g #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn main #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: bool = le(%0, 0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1(())
    let %3: int32 = add(%2, %0)
    jump b3(%3)
  }
  .bb #b2 () {
    let %4: int32 = call f2(())
    let %5: int32 = sub(%4, %0)
    let %6: int32 = add(%5, %0)
    jump b3(%6)
  }
  .bb #b3 (int32) {
    let %7: unit = ext_call minimbt_print_int($b3.0)
    return %7
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of h"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of h"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="v9 ← a1", color=green];
  r5 [label="v7 ← a1", color=green];
  r3 [label="v10 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v4 ← a1", color=green];
  r6 [label="v8 ← a1", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="zero", color=blue];
  r11 [label="v6 ← a0", color=green];
  r7 [label="v17 ← a0", color=green];
  r10 [label="v5 ← a1", color=green];
  r8 [label="v3 ← a0", color=green];
  r1 -- r9;
  r0 -- r1;
  r1 -- r11;
  r4 -- r11;
  r4 -- r5;
  r1 -- r6;
  r0 -- r2;
  r1 -- r5;
  r1 -- r8;
  r0 -- r3;
  r2 -- r4;
  r4 -- r6;
  r4 -- r10;
  r1 -- r3;
  r1 -- r4;
  r4 -- r9;
  r1 -- r7;
  r1 -- r10;
  r1 -- r2;
  comment = "11:v6-> 4:v2-> 1:zero-> 10:v5-> 9:v4-> 8:v3-> 7:v17-> 6:v8-> 5:v7-> 3:v10-> 0:v9-> 2:a0"
  comment = "v9<-a1;v7<-a1;v10<-a0;v4<-a1;v8<-a1;v2<-a0;v6<-a0;v17<-a0;v5<-a1;v3<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 123  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl h
  .type h, @function
h:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.h_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 789  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 456  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v17, zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [zero, v2]
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  slt v17, v2, zero  ; live: [zero, v2]
  xori v3, v17, 1  ; live: [v17, zero]
; control
  bne v3, zero, .main_b1  ; live: [zero, v3]
  j .main_b2  ; live: [zero]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v10, v9, a0, zero], upward_exposed: [v9, zero], params_defs: [v9]
; live_in: [v9, zero], live_out: []
; block parameters: [v9]
.main_b3:
  mv a0, v9  ; live: [v9, zero]
  call minimbt_print_int  ; live: [v9, zero, a0]
  mv v10, zero  ; live: [v9, zero]
; control
  mv a0, v10  ; live: [v10, v9, zero]
  ret  ; live: [v9, zero, a0]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v8, zero, a0, v7], upward_exposed: [zero, v2], params_defs: []
; live_in: [zero, v2], live_out: [v9, zero]
; block parameters: []
.main_b1:
  mv a0, zero  ; live: [zero, v2]
  call g  ; live: [zero, a0, v2]
  mv v7, a0  ; live: [zero, a0, v2]
  add v8, v7, v2  ; live: [v7, zero, v2]
; control
  mv v9, v8  ; live: [v8, zero, v2]
  j .main_b3  ; live: [zero, v2]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, v6, zero, a0, v2], upward_exposed: [zero, v2], params_defs: []
; live_in: [zero, v2], live_out: [v9, zero]
; block parameters: []
.main_b2:
  mv a0, zero  ; live: [zero, v2]
  call h  ; live: [zero, a0, v2]
  mv v4, a0  ; live: [zero, a0, v2]
  sub v5, v4, v2  ; live: [v4, zero, v2]
  add v6, v5, v2  ; live: [v5, zero, v2]
; control
  mv v9, v6  ; live: [v6, zero, v2]
  j .main_b3  ; live: [zero, v2]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/join-stack.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn thunk_start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn h #f2 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 789
  }
}
.fn g #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn main #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: int32 = call f1(())
    let %2: int32 = call f2(())
    let %3: bool = eq(%2, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: int32 = add(%0, 1)
    jump b3(%4)
  }
  .bb #b2 () {
    let %5: int32 = add(%1, 2)
    let %6: int32 = add(%5, %0)
    let %7: int32 = add(%6, %1)
    jump b3(%7)
  }
  .bb #b3 (int32) {
    let %8: unit = ext_call minimbt_print_int($b3.0)
    return %8
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of h"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of h"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r8 [label="v19 ← a0", color=green];
  r0 [label="v10 ← a1", color=green];
  r5 [label="v13 ← a0", color=green];
  r3 [label="v11 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v5 ← a0", color=green];
  r6 [label="v9 ← a0", color=green];
  r13 [label="v7 ← a1", color=green];
  r4 [label="v2 ← a1", color=green];
  r1 [label="zero", color=blue];
  r11 [label="v17 ← a1", color=green];
  r7 [label="v4 ← a0", color=green];
  r10 [label="v3 ← a0", color=green];
  r12 [label="v6 ← a1", color=green];
  r14 [label="v8 ← a0", color=green];
  r1 -- r9;
  r4 -- r13;
  r4 -- r11;
  r1 -- r12;
  r4 -- r5;
  r0 -- r2;
  r1 -- r8;
  r0 -- r3;
  r10 -- r12;
  r1 -- r4;
  r10 -- r11;
  r1 -- r7;
  r1 -- r10;
  r4 -- r12;
  r1 -- r2;
  r10 -- r13;
  r0 -- r1;
  r1 -- r13;
  r1 -- r11;
  r1 -- r6;
  r1 -- r5;
  r4 -- r10;
  r4 -- r6;
  r1 -- r14;
  r1 -- r3;
  r4 -- r14;
  r10 -- r14;
  comment = "14:v8-> 10:v3-> 1:zero-> 13:v7-> 12:v6-> 11:v17-> 9:v5-> 8:v19-> 7:v4-> 6:v9-> 4:v2-> 5:v13-> 3:v11-> 0:v10-> 2:a0"
  comment = "v19<-a0;v10<-a1;v13<-a0;v11<-a0;v5<-a0;v9<-a0;v7<-a1;v2<-a1;v17<-a1;v4<-a0;v3<-a0;v6<-a1;v8<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 123  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl h
  .type h, @function
h:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.h_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 789  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 456  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, v4, ft5, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v19, v4, v5, zero, a0], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v3, zero, v2]
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, zero  ; live: [zero]
  call g  ; live: [zero, a0]
  mv v3, a0  ; live: [zero, a0]
  mv a0, zero  ; live: [zero]
  call h  ; live: [zero, a0]
  mv v4, a0  ; live: [zero, a0]
  xor v19, v4, zero  ; live: [v4, zero]
  sltiu v5, v19, 1  ; live: [v19, zero]
; control
  bne v5, zero, .main_b1  ; live: [v5, zero]
  j .main_b2  ; live: [zero]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, a0, zero], upward_exposed: [v10, zero], params_defs: [v10]
; live_in: [v10, zero], live_out: []
; block parameters: [v10]
.main_b3:
  mv a0, v10  ; live: [v10, zero]
  call minimbt_print_int  ; live: [v10, zero, a0]
  mv v11, zero  ; live: [v10, zero]
; control
  mv a0, v11  ; live: [v11, v10, zero]
  ret  ; live: [v10, zero, a0]

; block info: defs: [v10, v13, v9], uses: [v13, v9, v2], upward_exposed: [v2], params_defs: []
; live_in: [zero, v2], live_out: [v10, zero]
; block parameters: []
.main_b1:
  li v13, 1  ; live: [zero, v2]
  add v9, v2, v13  ; live: [zero, v13, v2]
; control
  mv v10, v9  ; live: [zero, v9, v2]
  j .main_b3  ; live: [zero, v2]

; block info: defs: [v8, v17, v6, v10, v7], uses: [v2, v7, v8, v6, v17, v3], upward_exposed: [v2, v3], params_defs: []
; live_in: [v3, zero, v2], live_out: [v10, zero]
; block parameters: []
.main_b2:
  li v17, 2  ; live: [v2, zero, v3]
  add v6, v3, v17  ; live: [v2, v17, zero, v3]
  add v7, v6, v2  ; live: [v2, v6, zero, v3]
  add v8, v7, v3  ; live: [v2, v7, zero, v3]
; control
  mv v10, v8  ; live: [v2, v8, zero, v3]
  j .main_b3  ; live: [v2, zero, v3]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/join-stack2.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: bool = le(%0, 0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1(())
    let %3: int32 = add(%2, %0)
    jump b3(%3)
  }
  .bb #b2 () {
    let %4: int32 = add(%0, %0)
    jump b3(%4)
  }
  .bb #b3 (int32) {
    let %5: unit = ext_call minimbt_print_int($b3.0)
    return %5
  }
}
.fn f #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn g #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v5 ← a1", color=green];
  r3 [label="v8 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v4 ← a0", color=green];
  r6 [label="v6 ← a1", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="v7 ← a0", color=green];
  r7 [label="v13 ← a0", color=green];
  r8 [label="v3 ← a0", color=green];
  r0 -- r1;
  r4 -- r5;
  r0 -- r2;
  r0 -- r4;
  r0 -- r3;
  r2 -- r4;
  r4 -- r6;
  r0 -- r8;
  r0 -- r9;
  r1 -- r3;
  r0 -- r7;
  r4 -- r9;
  r0 -- r5;
  r0 -- r6;
  r1 -- r2;
  comment = "9:v4-> 4:v2-> 0:zero-> 8:v3-> 7:v13-> 6:v6-> 5:v5-> 3:v8-> 1:v7-> 2:a0"
  comment = "v5<-a1;v8<-a0;v4<-a0;v6<-a1;v2<-a0;v7<-a0;v13<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 123  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 456  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v3, zero, a0, v13], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [zero, v2]
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  slt v13, v2, zero  ; live: [zero, v2]
  xori v3, v13, 1  ; live: [zero, v13]
; control
  bne v3, zero, .main_b1  ; live: [zero, v3]
  j .main_b2  ; live: [zero]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v8, a0, zero, v7], upward_exposed: [zero, v7], params_defs: [v7]
; live_in: [zero, v7], live_out: []
; block parameters: [v7]
.main_b3:
  mv a0, v7  ; live: [zero, v7]
  call minimbt_print_int  ; live: [zero, a0, v7]
  mv v8, zero  ; live: [zero, v7]
; control
  mv a0, v8  ; live: [v8, zero, v7]
  ret  ; live: [zero, a0, v7]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v6, zero, a0, v2], upward_exposed: [zero, v2], params_defs: []
; live_in: [zero, v2], live_out: [zero, v7]
; block parameters: []
.main_b1:
  mv a0, zero  ; live: [zero, v2]
  call g  ; live: [zero, a0, v2]
  mv v5, a0  ; live: [zero, a0, v2]
  add v6, v5, v2  ; live: [v5, zero, v2]
; control
  mv v7, v6  ; live: [v6, zero, v2]
  j .main_b3  ; live: [zero, v2]

; block info: defs: [v4, v7], uses: [v4, v2], upward_exposed: [v2], params_defs: []
; live_in: [zero, v2], live_out: [zero, v7]
; block parameters: []
.main_b2:
  add v4, v2, v2  ; live: [zero, v2]
; control
  mv v7, v4  ; live: [v4, zero, v2]
  j .main_b3  ; live: [zero, v2]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/join-stack3.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn thunk_start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn h #f2 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 789
  }
}
.fn g #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn main #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: bool = le(%0, 0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1(())
    jump b3(%2)
  }
  .bb #b2 () {
    let %3: int32 = call f2(())
    jump b3(%3)
  }
  .bb #b3 (int32) {
    let %4: int32 = add($b3.0, %0)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of h"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of h"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r1 [label="v3 ← a0", color=green];
  comment = "1:v3-> 0:a0"
  comment = "v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="v6 ← a1", color=green];
  r5 [label="v8 ← a1", color=green];
  r3 [label="v7 ← a2", color=green];
  r2 [label="v2 ← a0", color=green];
  r9 [label="v4 ← a0", color=green];
  r6 [label="v5 ← a1", color=green];
  r4 [label="a0", color=blue];
  r1 [label="zero", color=blue];
  r7 [label="v13 ← a0", color=green];
  r8 [label="v3 ← a0", color=green];
  r1 -- r9;
  r2 -- r5;
  r0 -- r1;
  r2 -- r6;
  r1 -- r6;
  r0 -- r2;
  r1 -- r5;
  r1 -- r8;
  r2 -- r4;
  r0 -- r3;
  r0 -- r4;
  r2 -- r9;
  r1 -- r3;
  r1 -- r4;
  r2 -- r3;
  r1 -- r7;
  r0 -- r5;
  r1 -- r2;
  comment = "9:v4-> 2:v2-> 1:zero-> 8:v3-> 7:v13-> 6:v5-> 5:v8-> 0:v6-> 4:a0-> 3:v7"
  comment = "v6<-a1;v8<-a1;v7<-a2;v2<-a0;v4<-a0;v5<-a1;v13<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 123  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl h
  .type h, @function
h:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.h_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 789  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, a0, v2], uses: [a0, v3], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [a0]
; control
  li v3, 456  ; live: []
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v3, zero, a0, v13], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [zero, v2]
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  slt v13, v2, zero  ; live: [zero, v2]
  xori v3, v13, 1  ; live: [zero, v13]
; control
  bne v3, zero, .main_b1  ; live: [zero, v3]
  j .main_b2  ; live: [zero]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero, v7, v8, v6, v2], upward_exposed: [v6, zero, v2], params_defs: [v6]
; live_in: [v6, zero, v2], live_out: []
; block parameters: [v6]
.main_b3:
  add v7, v6, v2  ; live: [v6, zero, v2]
  mv a0, v7  ; live: [v7, v6, zero, v2]
  call minimbt_print_int  ; live: [v6, zero, a0, v2]
  mv v8, zero  ; live: [v6, zero, v2]
; control
  mv a0, v8  ; live: [v8, v6, zero, v2]
  ret  ; live: [v6, zero, a0, v2]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, zero, a0], upward_exposed: [zero], params_defs: []
; live_in: [zero, v2], live_out: [v6, zero, v2]
; block parameters: []
.main_b1:
  mv a0, zero  ; live: [zero, v2]
  call g  ; live: [zero, a0, v2]
  mv v5, a0  ; live: [zero, a0, v2]
; control
  mv v6, v5  ; live: [v5, zero, v2]
  j .main_b3  ; live: [zero, v2]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, zero, a0], upward_exposed: [zero], params_defs: []
; live_in: [zero, v2], live_out: [v6, zero, v2]
; block parameters: []
.main_b2:
  mv a0, zero  ; live: [zero, v2]
  call h  ; live: [zero, a0, v2]
  mv v4, a0  ; live: [zero, a0, v2]
; control
  mv v6, v4  ; live: [v4, zero, v2]
  j .main_b3  ; live: [zero, v2]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/landins_knot.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn init #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f9(10)
    let %1: unit = ext_call minimbt_print_int(%0)
    let %2: int32 = call f9(31)
    let %3: unit = ext_call minimbt_print_int(%2)
    return %3
  }
}
.fn thunk__21 #f7 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn thunk_factorial.18 #f5 : fn() -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(closure(int32) -> int32) -> closure(int32) -> int32 heap(1)> <- [0] = f3
    let %1: closure(int32) -> int32 = call f1(f5.m0)
    return %1
  }
}
.fn dummy #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.fn landins_kont #f1 : fn(closure(closure(int32) -> int32) -> closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f0
    let _ = alloc <m1: array[closure(int32) -> int32] heap(1)> <- [..] = f1.m0
    let _ = alloc <m2: closure(int32) -> int32 heap(2)> <- [0] = f2, [1] = f1.m1
    let %3: closure(int32) -> int32 = apply $f0(f1.m2)
    let _ = store closure(int32) -> int32 offset(f1.m1, 0) <- %3
    return %3
  }
}
.fn thunk_a.22 #f8 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let %2: int32 = apply %0(%1)
    return %2
  }
}
.fn thunk_start #f11 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f10()
    return %0
  }
}
.fn aux #f2 : closure(int32) -> int32
.freevars (array[closure(int32) -> int32])
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load closure(int32) -> int32 offset(^1, 0)
    let %1: int32 = apply %0($f0)
    return %1
  }
}
.fn g #f9 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::2
    let %1: int32 = add($f0, %0)
    return %1
  }
}
.fn h #f4 : closure(int32) -> int32
.freevars (closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = apply ^1(%1)
    let %3: int32 = mul($f0, %2)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.thunk ::0 factorial.18
.thunk ::1 _21
.thunk ::2 a.22
.thunk ::3 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  r1 [label="t6", color=blue];
  r0 -- r1;
  comment = "1:t6-> 0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of init"];
  r0 [label="zero", color=blue];
  r5 [label="v4 ← a0", color=green];
  r6 [label="v5 ← a0", color=green];
  r4 [label="v7 ← a0", color=green];
  r1 [label="v10 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r5;
  r0 -- r6;
  r0 -- r2;
  comment = "6:v5-> 0:zero-> 2:a0-> 5:v4-> 4:v7-> 3:v2-> 1:v10"
  comment = "v4<-a0;v5<-a0;v7<-a0;v10<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of init"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk__21"];
  r0 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  comment = "1:a0-> 0:v2"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk__21"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_factorial.18"];
  r0 [label="v6 ← a0", color=green];
  r4 [label="v4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="a0", color=blue];
  r2 [label="v8 ← a0", color=green];
  r1 -- r2;
  comment = "4:v4-> 3:a0-> 2:v8-> 1:v2-> 0:v6"
  comment = "v6<-a0;v4<-a0;v2<-a0;v8<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_factorial.18"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of dummy"];
  r0 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  comment = "1:v2-> 0:a0"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of dummy"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of landins_kont"];
  r0 [label="zero", color=blue];
  r5 [label="v22 ← a1", color=green];
  r3 [label="v20 ← a1", color=green];
  r2 [label="v2 ← a0", color=green];
  r9 [label="v5 ← a0", color=green];
  r6 [label="v18 ← a1", color=green];
  r13 [label="v12 ← a0", color=green];
  r4 [label="v3 ← a2", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v9 ← a0", color=green];
  r7 [label="v4 ← a1", color=green];
  r10 [label="v17 ← a0", color=green];
  r12 [label="v11 ← a1", color=green];
  r8 [label="v15 ← a1", color=green];
  r2 -- r6;
  r0 -- r13;
  r4 -- r5;
  r11 -- r13;
  r0 -- r2;
  r0 -- r3;
  r2 -- r4;
  r0 -- r9;
  r0 -- r8;
  r7 -- r10;
  r2 -- r8;
  r1 -- r7;
  r7 -- r11;
  r0 -- r5;
  r2 -- r5;
  r2 -- r10;
  r0 -- r1;
  r11 -- r12;
  r0 -- r10;
  r4 -- r7;
  r9 -- r10;
  r0 -- r12;
  r0 -- r11;
  r2 -- r7;
  r0 -- r4;
  r7 -- r9;
  r2 -- r9;
  r4 -- r6;
  r7 -- r8;
  r0 -- r7;
  r7 -- r12;
  r2 -- r3;
  r0 -- r6;
  comment = "13:v12-> 11:v9-> 0:zero-> 12:v11-> 7:v4-> 10:v17-> 2:v2-> 9:v5-> 8:v15-> 6:v18-> 5:v22-> 4:v3-> 3:v20-> 1:a0"
  comment = "v22<-a1;v20<-a1;v2<-a0;v5<-a0;v18<-a1;v12<-a0;v3<-a2;v9<-a0;v4<-a1;v17<-a0;v11<-a1;v15<-a1;"
}

graph G {
  graph [label="float interference graph of landins_kont"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_a.22"];
  r0 [label="v9 ← a0", color=green];
  r5 [label="v4 ← a0", color=green];
  r4 [label="a0", color=blue];
  r1 [label="v2 ← a1", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="v7 ← a0", color=green];
  r1 -- r3;
  r1 -- r2;
  comment = "5:v4-> 4:a0-> 3:v3-> 2:v7-> 1:v2-> 0:v9"
  comment = "v9<-a0;v4<-a0;v2<-a1;v3<-a0;v7<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_a.22"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of aux"];
  r0 [label="zero", color=blue];
  r5 [label="v3 ← a2", color=green];
  r3 [label="v0 ← a1", color=green];
  r2 [label="s10", color=blue];
  r9 [label="v5 ← a0", color=green];
  r6 [label="v8 ← a1", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  r7 [label="v9 ← a1", color=green];
  r8 [label="v4 ← a0", color=green];
  r0 -- r1;
  r4 -- r7;
  r5 -- r6;
  r4 -- r8;
  r3 -- r4;
  r4 -- r5;
  r0 -- r2;
  r0 -- r3;
  r0 -- r4;
  r2 -- r4;
  r2 -- r9;
  r4 -- r6;
  r0 -- r8;
  r0 -- r9;
  r1 -- r3;
  r0 -- r7;
  r2 -- r8;
  r0 -- r5;
  r0 -- r6;
  r1 -- r2;
  comment = "9:v5-> 2:s10-> 0:zero-> 1:a0-> 8:v4-> 4:v2-> 7:v9-> 6:v8-> 5:v3-> 3:v0"
  comment = "v3<-a2;v0<-a1;v5<-a0;v8<-a1;v2<-a0;v9<-a1;v4<-a0;"
}

graph G {
  graph [label="float interference graph of aux"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r4 [label="v7 ← a0", color=green];
  r1 [label="v2 ← a1", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="v5 ← a0", color=green];
  r3 -- r4;
  r1 -- r3;
  r1 -- r4;
  r1 -- r2;
  comment = "4:v7-> 3:v3-> 2:v5-> 1:v2-> 0:a0"
  comment = "v7<-a0;v2<-a1;v3<-a0;v5<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of h"];
  r0 [label="v9 ← a0", color=green];
  r5 [label="v13 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="s10", color=blue];
  r6 [label="v5 ← a0", color=green];
  r13 [label="v4 ← a1", color=green];
  r4 [label="v2 ← a1", color=green];
  r1 [label="v8 ← a0", color=green];
  r11 [label="v0 ← a1", color=green];
  r7 [label="v6 ← a0", color=green];
  r10 [label="zero", color=blue];
  r12 [label="v15 ← a1", color=green];
  r8 [label="v7 ← a0", color=green];
  r9 -- r11;
  r4 -- r11;
  r3 -- r4;
  r4 -- r5;
  r2 -- r4;
  r10 -- r12;
  r3 -- r6;
  r9 -- r12;
  r2 -- r12;
  r10 -- r11;
  r1 -- r2;
  r10 -- r13;
  r2 -- r10;
  r2 -- r13;
  r4 -- r7;
  r4 -- r8;
  r9 -- r10;
  r2 -- r11;
  r3 -- r7;
  r2 -- r9;
  r4 -- r10;
  r4 -- r6;
  r9 -- r13;
  r2 -- r3;
  r3 -- r5;
  r4 -- r9;
  r3 -- r8;
  comment = "13:v4-> 10:zero-> 9:s10-> 2:a0-> 12:v15-> 11:v0-> 8:v7-> 4:v2-> 7:v6-> 6:v5-> 5:v13-> 3:v3-> 1:v8-> 0:v9"
  comment = "v9<-a0;v13<-a0;v3<-a0;v5<-a0;v4<-a1;v2<-a1;v8<-a0;v0<-a1;v6<-a0;v15<-a1;v7<-a0;"
}

graph G {
  graph [label="float interference graph of h"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, t6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, t6], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_factorial.18  ; live: []
  la t6, factorial.18  ; live: [a0]
  sd a0, 0(t6)  ; live: [a0, t6]
  call thunk__21  ; live: []
  la t6, _21  ; live: [a0]
  sw a0, 0(t6)  ; live: [a0, t6]
  call thunk_a.22  ; live: []
  la t6, a.22  ; live: [a0]
  sw a0, 0(t6)  ; live: [a0, t6]
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl init
  .type init, @function
init:
; block info: defs: [v3, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v5, v10, a0, zero, v7, v4, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.init_b0:
  li v10, 10  ; live: [zero]
  mv a0, v10  ; live: [v10, zero]
  call g  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
  li v7, 31  ; live: [zero]
  mv a0, v7  ; live: [zero, v7]
  call g  ; live: [zero, a0]
  mv v4, a0  ; live: [zero, a0]
  mv a0, v4  ; live: [v4, zero]
  call minimbt_print_int  ; live: [zero, a0]
  mv v5, zero  ; live: [zero]
; control
  mv a0, v5  ; live: [v5, zero]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl thunk__21
  .type thunk__21, @function
thunk__21:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.thunk__21_b0:
; control
  li v2, 5  ; live: []
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_factorial.18
  .type thunk_factorial.18, @function
thunk_factorial.18:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v8, v4, v6, s11, v2], upward_exposed: [s11], params_defs: []
; live_in: [s11], live_out: []
; block parameters: []
.thunk_factorial.18_b0:
  addi v6, s11, -8  ; live: [s11]
  andi v2, v6, -8  ; live: [v6, s11]
  la v8, g  ; live: [s11, v2]
  sd v8, 0(v2)  ; live: [v8, s11, v2]
  mv a0, v2  ; live: [s11, v2]
  call landins_kont  ; live: [s11, a0]
  mv v4, a0  ; live: [s11, a0]
; control
  mv a0, v4  ; live: [v4, s11]
  ret  ; live: [s11, a0]

  .p2align 3
  .globl dummy
  .type dummy, @function
dummy:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.dummy_b0:
  mv v2, a0  ; live: [a0]
; control
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl landins_kont
  .type landins_kont, @function
landins_kont:
; block info: defs: [v2, t1, v13, v22, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, v20, a4, fa6, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v11, v5, a0, v22, v17, s11, v12, v9, v18, zero, v20, v4, v15, v2], upward_exposed: [s11, a0, zero], params_defs: []
; live_in: [s11, a0, zero], live_out: []
; block parameters: []
.landins_kont_b0:
  mv v2, a0  ; live: [zero, a0, s11]
  addi v20, s11, -8  ; live: [zero, s11, v2]
  andi v3, v20, -8  ; live: [zero, v20, s11, v2]
  la v22, dummy  ; live: [v3, zero, s11, v2]
  sd v22, 0(v3)  ; live: [v3, zero, v22, s11, v2]
  addi v18, s11, -8  ; live: [v3, zero, s11, v2]
  andi v4, v18, -8  ; live: [v3, v18, zero, s11, v2]
  sd v3, 0(v4)  ; live: [v3, zero, v4, s11, v2]
  addi v15, s11, -16  ; live: [zero, v4, s11, v2]
  andi v5, v15, -8  ; live: [zero, v4, s11, v15, v2]
  la v17, aux  ; live: [v5, zero, v4, s11, v2]
  sd v17, 0(v5)  ; live: [v5, zero, v4, v17, s11, v2]
  sd v4, 8(v5)  ; live: [v4, v5, s11, zero, v2]
  mv s10, v2  ; live: [v4, v5, s11, zero, v2]
  ld v13, 0(v2)  ; live: [v4, v5, s11, zero, v2]
  mv a0, v5  ; live: [v4, v5, s11, zero]
  jalr v13  ; live: [v4, s11, zero, a0]
  mv v9, a0  ; live: [v4, s11, zero, a0]
  slli v11, zero, 3  ; live: [v4, s11, zero, v9]
  add v12, v4, v11  ; live: [v11, v4, s11, zero, v9]
  sd v9, 0(v12)  ; live: [s11, v12, zero, v9]
; control
  mv a0, v9  ; live: [s11, zero, v9]
  ret  ; live: [s11, a0, zero]

  .p2align 3
  .globl thunk_a.22
  .type thunk_a.22, @function
thunk_a.22:
; block info: defs: [v2, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, a0, v7, v4, v9, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.thunk_a.22_b0:
  la v9, factorial.18  ; live: []
  ld v2, 0(v9)  ; live: [v9]
  la v7, _21  ; live: [v2]
  lw v3, 0(v7)  ; live: [v7, v2]
  mv s10, v2  ; live: [v2, v3]
  ld v5, 0(v2)  ; live: [v2, v3]
  mv a0, v3  ; live: [v3]
  jalr v5  ; live: [a0]
  mv v4, a0  ; live: [a0]
; control
  mv a0, v4  ; live: [v4]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call init  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl aux
  .type aux, @function
aux:
; block info: defs: [v2, t1, v0, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a0, zero, v8, v0, v4, s10, v9, v3], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s10, a0, zero], live_out: []
; block parameters: []
.aux_b0:
  mv v0, s10  ; live: [zero, a0, s10]
  mv v2, a0  ; live: [v0, zero, a0]
  lw v3, 8(v0)  ; live: [v0, zero, v2]
  slli v8, zero, 3  ; live: [v3, zero, v2]
  add v9, v3, v8  ; live: [v3, v8, zero, v2]
  ld v4, 0(v9)  ; live: [zero, v9, v2]
  mv s10, v4  ; live: [v4, zero, v2]
  ld v6, 0(v4)  ; live: [v4, s10, zero, v2]
  mv a0, v2  ; live: [s10, zero, v2]
  jalr v6  ; live: [s10, zero, a0]
  mv v5, a0  ; live: [s10, zero, a0]
; control
  mv a0, v5  ; live: [v5, s10, zero]
  ret  ; live: [s10, a0, zero]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, v7, v5, a0, v2], uses: [v2, v5, a0, v7, s11, v3], upward_exposed: [s11, a0], params_defs: []
; live_in: [s11, a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [s11, a0]
  addi v5, s11, -16  ; live: [s11, v2]
  andi v3, v5, -8  ; live: [v5, s11, v2]
  la v7, h  ; live: [v2, s11, v3]
  sd v7, 0(v3)  ; live: [v2, v7, s11, v3]
  sd v2, 8(v3)  ; live: [v2, s11, v3]
; control
  mv a0, v3  ; live: [s11, v3]
  ret  ; live: [s11, a0]

  .p2align 3
  .globl h
  .type h, @function
h:
; block info: defs: [v3, v0, v4, v15, v2], uses: [a0, zero, v0, v4, v15, s10, v2], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s10, a0, zero], live_out: [v3, v2]
; block parameters: []
.h_b0:
  mv v0, s10  ; live: [s10, a0, zero]
  mv v2, a0  ; live: [v0, s10, a0, zero]
  lw v3, 8(v0)  ; live: [v2, v0, s10, a0, zero]
  xor v15, v2, zero  ; live: [v2, s10, a0, zero]
  sltiu v4, v15, 1  ; live: [v15, s10, a0, zero]
; control
  bne v4, zero, .h_b1  ; live: [v4, s10, a0, zero]
  j .h_b2  ; live: [s10, a0, zero]

; block info: defs: [v9, v8], uses: [v9], upward_exposed: [], params_defs: []
; live_in: [], live_out: [v8]
; block parameters: []
.h_b1:
; control
  li v9, 1  ; live: []
  mv v8, v9  ; live: [v9]
  j .h_b3  ; live: []

; block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
; live_in: [v8], live_out: []
; block parameters: [v8]
.h_b3:
; control
  mv a0, v8  ; live: [v8]
  ret  ; live: [a0, v8]

; block info: defs: [t1, v13, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v5, v13, a0, v7, v6, v3], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, v3], live_out: [v8]
; block parameters: []
.h_b2:
  li v13, 1  ; live: [v3, v2]
  sub v5, v2, v13  ; live: [v3, v13, v2]
  mv s10, v3  ; live: [v3, v5, v2]
  ld v11, 0(v3)  ; live: [v3, v5, v2]
  mv a0, v5  ; live: [v3, v5, v2]
  jalr v11  ; live: [v3, a0, v2]
  mv v6, a0  ; live: [v3, a0, v2]
  mulw v7, v2, v6  ; live: [v3, v6, v2]
; control
  mv v8, v7  ; live: [v3, v7, v2]
  j .h_b3  ; live: [v3, v2]

  .p2align 3
  .globl _21
  .type _21, @object
_21:
  .zero 4
  .p2align 3
  .globl a.22
  .type a.22, @object
a.22:
  .zero 4
  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4
  .p2align 3
  .globl factorial.18
  .type factorial.18, @object
factorial.18:
  .zero 8



Testing test/test_src/matmul-flat.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn loop2 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f1, 1)
    let %2: unit = call f0($f0, $f2, %1, $f3, $f4, $f5)
    let %3: int32 = sub($f2, 1)
    let %4: unit = call f1($f0, $f1, %3, $f3, $f4, $f5)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn init_arr #f5 : closure(int32, int32, array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap($f1)> <- [..] = 0
    let _ = store array[double] offset($f2, $f0) <- f5.m0
    let %3: int32 = sub($f0, 1)
    let %4: unit = apply self(%3, $f1, $f2)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn thunk_start #f7 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn mul #f3 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f0, 1)
    let %1: unit = call f2(%0, $f1, $f2, $f3, $f4, $f5)
    return ()
  }
}
.fn loop3 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: array[double] = load array[double] offset($f5, $f0)
    let %2: array[double] = load array[double] offset($f5, $f0)
    let %3: double = load double offset(%2, $f1)
    let %4: array[double] = load array[double] offset($f3, $f0)
    let %5: double = load double offset(%4, $f2)
    let %6: array[double] = load array[double] offset($f4, $f2)
    let %7: double = load double offset(%6, $f1)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, $f1) <- %9
    let %11: int32 = sub($f2, 1)
    let %12: unit = call f0($f0, $f1, %11, $f3, $f4, $f5)
    jump b3(%12)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop1 #f2 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f2, 1)
    let %2: unit = call f1($f0, $f1, %1, $f3, $f4, $f5)
    let %3: int32 = sub($f0, 1)
    let %4: unit = call f2(%3, $f1, $f2, $f3, $f4, $f5)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn make_arr #f6 : closure(int32, int32, array[double]) -> array[array[double]]
.freevars (closure(int32, int32, array[array[double]]) -> unit)
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: unit = apply ^1(%1, $f1, f6.m0)
    return f6.m0
  }
}
.fn main #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let _ = alloc <m1: closure(int32, int32, array[array[double]]) -> unit heap(1)> <- [0] = f5
    let _ = alloc <m2: closure(int32, int32, array[double]) -> array[array[double]] heap(2)> <- [0] = f6, [1] = f4.m1
    let %3: array[array[double]] = apply f4.m2(2, 3, f4.m0)
    let %4: array[array[double]] = apply f4.m2(3, 2, f4.m0)
    let %5: array[array[double]] = apply f4.m2(2, 2, f4.m0)
    let %6: array[double] = load array[double] offset(%3, 0)
    let _ = store double offset(%6, 0) <- 1
    let %8: array[double] = load array[double] offset(%3, 0)
    let _ = store double offset(%8, 1) <- 2
    let %10: array[double] = load array[double] offset(%3, 0)
    let _ = store double offset(%10, 2) <- 3
    let %12: array[double] = load array[double] offset(%3, 1)
    let _ = store double offset(%12, 0) <- 4
    let %14: array[double] = load array[double] offset(%3, 1)
    let _ = store double offset(%14, 1) <- 5
    let %16: array[double] = load array[double] offset(%3, 1)
    let _ = store double offset(%16, 2) <- 6
    let %18: array[double] = load array[double] offset(%4, 0)
    let _ = store double offset(%18, 0) <- 7
    let %20: array[double] = load array[double] offset(%4, 0)
    let _ = store double offset(%20, 1) <- 8
    let %22: array[double] = load array[double] offset(%4, 1)
    let _ = store double offset(%22, 0) <- 9
    let %24: array[double] = load array[double] offset(%4, 1)
    let _ = store double offset(%24, 1) <- 10
    let %26: array[double] = load array[double] offset(%4, 2)
    let _ = store double offset(%26, 0) <- 11
    let %28: array[double] = load array[double] offset(%4, 2)
    let _ = store double offset(%28, 1) <- 12
    let %30: unit = call f3(2, 3, 2, %3, %4, %5)
    let %31: array[double] = load array[double] offset(%5, 0)
    let %32: double = load double offset(%31, 0)
    let %33: int32 = ext_call minimbt_truncate(%32)
    let %34: unit = ext_call minimbt_print_int(%33)
    let %35: unit = ext_call minimbt_print_endline()
    let %36: array[double] = load array[double] offset(%5, 0)
    let %37: double = load double offset(%36, 1)
    let %38: int32 = ext_call minimbt_truncate(%37)
    let %39: unit = ext_call minimbt_print_int(%38)
    let %40: unit = ext_call minimbt_print_endline()
    let %41: array[double] = load array[double] offset(%5, 1)
    let %42: double = load double offset(%41, 0)
    let %43: int32 = ext_call minimbt_truncate(%42)
    let %44: unit = ext_call minimbt_print_int(%43)
    let %45: unit = ext_call minimbt_print_endline()
    let %46: array[double] = load array[double] offset(%5, 1)
    let %47: double = load double offset(%46, 1)
    let %48: int32 = ext_call minimbt_truncate(%47)
    let %49: unit = ext_call minimbt_print_int(%48)
    return ()
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of loop2"];
  r0 [label="a5", color=blue];
  r20 [label="v12 ← a0", color=green];
  r3 [label="a4", color=blue];
  r9 [label="v8 ← a0", color=green];
  r6 [label="a3", color=blue];
  r13 [label="v7 ← a2", color=green];
  r4 [label="a2", color=blue];
  r1 [label="a0", color=blue];
  r11 [label="v3 ← a4", color=green];
  r7 [label="v4 ← a2", color=green];
  r10 [label="v13 ← a1", color=green];
  r14 [label="v6 ← a1", color=green];
  r8 [label="v20 ← a0", color=green];
  r5 [label="a1", color=blue];
  r15 [label="v2 ← a0", color=green];
  r2 [label="zero", color=blue];
  r16 [label="v18 ← a3", color=green];
  r18 [label="v15 ← a1", color=green];
  r19 [label="v11 ← a2", color=green];
  r17 [label="v9 ← a1", color=green];
  r12 [label="v5 ← a3", color=green];
  r2 -- r20;
  r0 -- r13;
  r14 -- r20;
  r1 -- r12;
  r3 -- r15;
  r14 -- r16;
  r2 -- r15;
  r5 -- r8;
  r11 -- r14;
  r1 -- r4;
  r3 -- r6;
  r5 -- r17;
  r1 -- r7;
  r1 -- r19;
  r1 -- r10;
  r3 -- r9;
  r3 -- r11;
  r1 -- r17;
  r2 -- r16;
  r2 -- r7;
  r11 -- r18;
  r3 -- r5;
  r12 -- r19;
  r11 -- r19;
  r0 -- r6;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r14 -- r19;
  r15 -- r18;
  r2 -- r6;
  r5 -- r6;
  r3 -- r4;
  r11 -- r13;
  r0 -- r2;
  r0 -- r9;
  r3 -- r13;
  r2 -- r12;
  r2 -- r8;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r2 -- r13;
  r13 -- r18;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r11 -- r15;
  r5 -- r14;
  r0 -- r11;
  r3 -- r7;
  r1 -- r6;
  r1 -- r5;
  r0 -- r4;
  r4 -- r14;
  r14 -- r15;
  r4 -- r9;
  r6 -- r7;
  r6 -- r9;
  r4 -- r13;
  r0 -- r15;
  r6 -- r11;
  r13 -- r15;
  r4 -- r5;
  r14 -- r18;
  r11 -- r20;
  r6 -- r15;
  r14 -- r17;
  r11 -- r17;
  r1 -- r8;
  r2 -- r4;
  r2 -- r18;
  r6 -- r14;
  r12 -- r15;
  r11 -- r16;
  r3 -- r12;
  r5 -- r13;
  r7 -- r13;
  r0 -- r14;
  r7 -- r20;
  r13 -- r16;
  r5 -- r19;
  r11 -- r12;
  r1 -- r15;
  r1 -- r13;
  r2 -- r11;
  r5 -- r11;
  r6 -- r12;
  r13 -- r20;
  r13 -- r19;
  r6 -- r8;
  r7 -- r17;
  r12 -- r20;
  r4 -- r15;
  r4 -- r11;
  r7 -- r19;
  r12 -- r13;
  r15 -- r17;
  r2 -- r14;
  r5 -- r9;
  r0 -- r3;
  r0 -- r8;
  r7 -- r15;
  r13 -- r14;
  r7 -- r11;
  r0 -- r5;
  r13 -- r17;
  r3 -- r14;
  r2 -- r17;
  r4 -- r7;
  r0 -- r12;
  r12 -- r14;
  r12 -- r16;
  r7 -- r16;
  r12 -- r17;
  r7 -- r18;
  r2 -- r9;
  r1 -- r14;
  r4 -- r6;
  r1 -- r3;
  r2 -- r19;
  r7 -- r12;
  r0 -- r7;
  r15 -- r16;
  r15 -- r20;
  r15 -- r19;
  r2 -- r3;
  r7 -- r14;
  r12 -- r18;
  r5 -- r15;
  r5 -- r12;
  comment = "20:v12-> 15:v2-> 19:v11-> 14:v6-> 13:v7-> 7:v4-> 12:v5-> 2:zero-> 5:a1-> 1:a0-> 6:a3-> 3:a4-> 4:a2-> 0:a5-> 18:v15-> 11:v3-> 10:v13-> 9:v8-> 8:v20-> 17:v9-> 16:v18"
  comment = "v12<-a0;v8<-a0;v7<-a2;v3<-a4;v4<-a2;v13<-a1;v6<-a1;v20<-a0;v2<-a0;v18<-a3;v15<-a1;v11<-a2;v9<-a1;v5<-a3;"
}

graph G {
  graph [label="float interference graph of loop2"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of make_arr"];
  r8 [label="v4 ← a2", color=green];
  r0 [label="zero", color=blue];
  r5 [label="v0 ← a1", color=green];
  r3 [label="a1", color=blue];
  r2 [label="a2", color=blue];
  r9 [label="v5 ← a1", color=green];
  r6 [label="v2 ← a2", color=green];
  r13 [label="v12 ← a1", color=green];
  r4 [label="s10", color=blue];
  r1 [label="a0", color=blue];
  r11 [label="v15 ← a1", color=green];
  r7 [label="v3 ← a0", color=green];
  r10 [label="v14 ← a1", color=green];
  r12 [label="v6 ← a0", color=green];
  r14 [label="v8 ← a0", color=green];
  r6 -- r7;
  r6 -- r9;
  r0 -- r13;
  r6 -- r11;
  r1 -- r12;
  r1 -- r8;
  r5 -- r8;
  r2 -- r4;
  r1 -- r4;
  r3 -- r6;
  r1 -- r7;
  r8 -- r9;
  r3 -- r12;
  r7 -- r13;
  r0 -- r14;
  r3 -- r9;
  r2 -- r7;
  r7 -- r9;
  r6 -- r12;
  r3 -- r5;
  r8 -- r12;
  r6 -- r8;
  r0 -- r6;
  r9 -- r14;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r3 -- r4;
  r12 -- r13;
  r0 -- r2;
  r0 -- r3;
  r0 -- r9;
  r0 -- r8;
  r7 -- r10;
  r6 -- r10;
  r9 -- r12;
  r2 -- r12;
  r7 -- r11;
  r0 -- r5;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r8 -- r10;
  r0 -- r10;
  r4 -- r7;
  r5 -- r7;
  r9 -- r10;
  r0 -- r12;
  r0 -- r11;
  r8 -- r11;
  r12 -- r14;
  r3 -- r7;
  r1 -- r6;
  r1 -- r5;
  r0 -- r4;
  r2 -- r9;
  r1 -- r3;
  r7 -- r8;
  r0 -- r7;
  r7 -- r12;
  r9 -- r13;
  r4 -- r14;
  r2 -- r3;
  r7 -- r14;
  r4 -- r9;
  comment = "14:v8-> 12:v6-> 4:s10-> 7:v3-> 13:v12-> 11:v15-> 10:v14-> 8:v4-> 0:zero-> 3:a1-> 2:a2-> 9:v5-> 6:v2-> 5:v0-> 1:a0"
  comment = "v4<-a2;v0<-a1;v5<-a1;v2<-a2;v12<-a1;v15<-a1;v3<-a0;v14<-a1;v6<-a0;v8<-a0;"
}

graph G {
  graph [label="float interference graph of make_arr"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r9 [label="v205 ← a1", color=green];
  r26 [label="v191 ← a0", color=green];
  r118 [label="v102 ← a1", color=green];
  r44 [label="v169 ← a1", color=green];
  r56 [label="v156 ← a2", color=green];
  r10 [label="a0", color=blue];
  r111 [label="v104 ← a1", color=green];
  r54 [label="v163 ← a0", color=green];
  r24 [label="v189 ← a0", color=green];
  r126 [label="v92 ← a1", color=green];
  r119 [label="v94 ← a1", color=green];
  r88 [label="v27 ← a1", color=green];
  r80 [label="v132 ← a0", color=green];
  r142 [label="v72 ← a1", color=green];
  r39 [label="v173 ← a0", color=green];
  r154 [label="v58 ← a1", color=green];
  r65 [label="v147 ← a1", color=green];
  r152 [label="v51 ← a0", color=green];
  r79 [label="v25 ← a1", color=green];
  r128 [label="v88 ← a1", color=green];
  r113 [label="v33 ← a1", color=green];
  r67 [label="v149 ← a0", color=green];
  r77 [label="v137 ← a0", color=green];
  r151 [label="v63 ← a0", color=green];
  r11 [label="v206 ← a1", color=green];
  r157 [label="v53 ← a0", color=green];
  r58 [label="v158 ← a2", color=green];
  r105 [label="v31 ← a1", color=green];
  r148 [label="v48 ← a0", color=green];
  r14 [label="v8 ← a3", color=green];
  r78 [label="v138 ← a0", color=green];
  r140 [label="v43 ← a1", color=green];
  r16 [label="v202 ← a1", color=green];
  r21 [label="v193 ← a0", color=green];
  r60 [label="v160 ← a1", color=green];
  r73 [label="v140 ← a1", color=green];
  r93 [label="v120 ← a1", color=green];
  r38 [label="v15 ← a1", color=green];
  r145 [label="v68 ← a0", color=green];
  r122 [label="a3", color=blue];
  r87 [label="v130 ← a1", color=green];
  r95 [label="v122 ← a0", color=green];
  r7 [label="v4 ← a1", color=green];
  r144 [label="v46 ← a1", color=green];
  r64 [label="v21 ← a2", color=green];
  r66 [label="fv148 ← a0", color=green];
  r130 [label="fv37 ← a0", color=green];
  r115 [label="fv99 ← a0", color=green];
  r147 [label="fv47 ← a0", color=green];
  r138 [label="v80 ← a1", color=green];
  r70 [label="v144 ← a0", color=green];
  r48 [label="v165 ← a1", color=green];
  r37 [label="v179 ← a1", color=green];
  r102 [label="v111 ← a1", color=green];
  r123 [label="a4", color=blue];
  r125 [label="v91 ← a1", color=green];
  r156 [label="fv52 ← a0", color=green];
  r71 [label="v145 ← a0", color=green];
  r22 [label="v194 ← a1", color=green];
  r84 [label="v136 ← a1", color=green];
  r92 [label="v127 ← a1", color=green];
  r45 [label="v170 ← a1", color=green];
  r107 [label="fv108 ← a0", color=green];
  r63 [label="v154 ← a1", color=green];
  r2 [label="v2 ← a0", color=green];
  r18 [label="v197 ← a1", color=green];
  r137 [label="v79 ← a0", color=green];
  r19 [label="v198 ← a1", color=green];
  r139 [label="fv42 ← a0", color=green];
  r121 [label="v96 ← a2", color=green];
  r97 [label="v115 ← a2", color=green];
  r90 [label="fv125 ← a0", color=green];
  r81 [label="fv133 ← a0", color=green];
  r101 [label="v119 ← a1", color=green];
  r94 [label="v121 ← a1", color=green];
  r46 [label="v171 ← a1", color=green];
  r120 [label="v95 ← a1", color=green];
  r33 [label="v183 ← a1", color=green];
  r76 [label="v143 ← a1", color=green];
  r59 [label="v159 ← a1", color=green];
  r86 [label="v129 ← a0", color=green];
  r53 [label="v162 ← a1", color=green];
  r5 [label="v213 ← a0", color=green];
  r43 [label="v177 ← a1", color=green];
  r31 [label="v181 ← a1", color=green];
  r99 [label="v117 ← a1", color=green];
  r17 [label="v9 ← a0", color=green];
  r133 [label="v82 ← a1", color=green];
  r52 [label="v161 ← a1", color=green];
  r129 [label="v89 ← a0", color=green];
  r20 [label="v10 ← a0", color=green];
  r61 [label="v152 ← a1", color=green];
  r23 [label="v11 ← a1", color=green];
  r108 [label="v109 ← a1", color=green];
  r3 [label="v211 ← a1", color=green];
  r132 [label="v38 ← a1", color=green];
  r82 [label="v134 ← a1", color=green];
  r75 [label="v142 ← a1", color=green];
  r27 [label="v192 ← a1", color=green];
  r62 [label="v153 ← a1", color=green];
  r40 [label="fv174 ← a0", color=green];
  r110 [label="v103 ← a1", color=green];
  r34 [label="v184 ← a1", color=green];
  r83 [label="v135 ← a0", color=green];
  r103 [label="v112 ← a1", color=green];
  r134 [label="v83 ← a0", color=green];
  r146 [label="v69 ← a1", color=green];
  r51 [label="v168 ← a1", color=green];
  r96 [label="v29 ← a1", color=green];
  r135 [label="v41 ← a1", color=green];
  r55 [label="v19 ← a1", color=green];
  r136 [label="v78 ← a0", color=green];
  r153 [label="v57 ← a0", color=green];
  r72 [label="v23 ← a1", color=green];
  r104 [label="v113 ← a0", color=green];
  r116 [label="v100 ← a0", color=green];
  r100 [label="v118 ← a1", color=green];
  r85 [label="v128 ← a1", color=green];
  r155 [label="v59 ← a0", color=green];
  r47 [label="v17 ← a1", color=green];
  r6 [label="v208 ← a1", color=green];
  r13 [label="a2", color=blue];
  r42 [label="v176 ← a1", color=green];
  r4 [label="v3 ← a2", color=green];
  r117 [label="v101 ← a0", color=green];
  r29 [label="v187 ← a0", color=green];
  r35 [label="v185 ← a0", color=green];
  r131 [label="fa0", color=blue];
  r114 [label="v98 ← a0", color=green];
  r8 [label="v210 ← a1", color=green];
  r36 [label="v178 ← a1", color=green];
  r112 [label="v105 ← a1", color=green];
  r32 [label="fv182 ← a0", color=green];
  r15 [label="v201 ← a1", color=green];
  r49 [label="fv166 ← a0", color=green];
  r141 [label="v71 ← a1", color=green];
  r57 [label="fv157 ← a0", color=green];
  r74 [label="fv141 ← a0", color=green];
  r150 [label="v62 ← a0", color=green];
  r68 [label="v150 ← a1", color=green];
  r98 [label="fv116 ← a0", color=green];
  r124 [label="a5", color=blue];
  r91 [label="v126 ← a1", color=green];
  r12 [label="a1", color=blue];
  r106 [label="v107 ← a2", color=green];
  r109 [label="v110 ← a1", color=green];
  r127 [label="v36 ← a0", color=green];
  r1 [label="v214 ← a0", color=green];
  r28 [label="v186 ← a0", color=green];
  r41 [label="v175 ← a2", color=green];
  r69 [label="v151 ← a1", color=green];
  r89 [label="v124 ← a2", color=green];
  r50 [label="v167 ← a0", color=green];
  r30 [label="v13 ← a2", color=green];
  r25 [label="fv190 ← a0", color=green];
  r149 [label="v61 ← a0", color=green];
  r143 [label="v73 ← a0", color=green];
  r13 -- r122;
  r96 -- r97;
  r96 -- r99;
  r17 -- r109;
  r17 -- r42;
  r14 -- r102;
  r0 -- r36;
  r14 -- r117;
  r14 -- r68;
  r20 -- r78;
  r14 -- r109;
  r0 -- r48;
  r0 -- r83;
  r17 -- r102;
  r14 -- r93;
  r20 -- r103;
  r17 -- r69;
  r14 -- r89;
  r88 -- r89;
  r20 -- r149;
  r0 -- r28;
  r0 -- r114;
  r0 -- r52;
  r20 -- r34;
  r0 -- r143;
  r17 -- r87;
  r2 -- r7;
  r20 -- r36;
  r17 -- r76;
  r0 -- r16;
  r17 -- r19;
  r64 -- r65;
  r20 -- r30;
  r14 -- r34;
  r0 -- r6;
  r20 -- r70;
  r0 -- r58;
  r20 -- r71;
  r17 -- r44;
  r0 -- r117;
  r20 -- r22;
  r0 -- r154;
  r0 -- r26;
  r17 -- r71;
  r0 -- r109;
  r10 -- r121;
  r20 -- r93;
  r0 -- r149;
  r20 -- r113;
  r17 -- r68;
  r14 -- r61;
  r14 -- r60;
  r14 -- r70;
  r20 -- r84;
  r0 -- r38;
  r20 -- r60;
  r2 -- r5;
  r2 -- r13;
  r20 -- r67;
  r0 -- r47;
  r14 -- r59;
  r14 -- r36;
  r0 -- r44;
  r14 -- r54;
  r17 -- r27;
  r14 -- r44;
  r17 -- r70;
  r14 -- r82;
  r0 -- r122;
  r0 -- r140;
  r14 -- r92;
  r17 -- r80;
  r0 -- r15;
  r17 -- r111;
  r20 -- r135;
  r0 -- r136;
  r14 -- r108;
  r14 -- r26;
  r0 -- r157;
  r20 -- r118;
  r2 -- r4;
  r14 -- r112;
  r72 -- r73;
  r0 -- r101;
  r20 -- r52;
  r113 -- r116;
  r17 -- r24;
  r0 -- r105;
  r20 -- r110;
  r2 -- r11;
  r0 -- r19;
  r20 -- r138;
  r10 -- r16;
  r17 -- r93;
  r23 -- r26;
  r0 -- r53;
  r20 -- r148;
  r14 -- r33;
  r14 -- r73;
  r0 -- r97;
  r0 -- r155;
  r17 -- r56;
  r38 -- r41;
  r2 -- r14;
  r10 -- r122;
  r0 -- r65;
  r20 -- r140;
  r0 -- r73;
  r0 -- r104;
  r13 -- r14;
  r12 -- r121;
  r0 -- r29;
  r0 -- r123;
  r20 -- r111;
  r4 -- r7;
  r55 -- r59;
  r88 -- r91;
  r12 -- r124;
  r152 -- r153;
  r20 -- r42;
  r14 -- r94;
  r113 -- r117;
  r12 -- r17;
  r20 -- r125;
  r14 -- r119;
  r17 -- r38;
  r17 -- r50;
  r20 -- r75;
  r20 -- r129;
  r0 -- r20;
  r17 -- r86;
  r20 -- r105;
  r20 -- r85;
  r20 -- r55;
  r20 -- r99;
  r17 -- r72;
  r122 -- r124;
  r10 -- r123;
  r14 -- r20;
  r123 -- r124;
  r0 -- r67;
  r0 -- r84;
  r14 -- r101;
  r2 -- r15;
  r0 -- r62;
  r105 -- r108;
  r0 -- r133;
  r17 -- r61;
  r17 -- r75;
  r14 -- r91;
  r17 -- r63;
  r10 -- r13;
  r10 -- r124;
  r17 -- r99;
  r10 -- r19;
  r20 -- r56;
  r17 -- r41;
  r20 -- r64;
  r2 -- r16;
  r17 -- r113;
  r14 -- r87;
  r17 -- r36;
  r14 -- r39;
  r20 -- r112;
  r20 -- r126;
  r20 -- r58;
  r17 -- r33;
  r20 -- r146;
  r14 -- r30;
  r20 -- r137;
  r14 -- r28;
  r14 -- r19;
  r64 -- r68;
  r0 -- r100;
  r10 -- r20;
  r20 -- r102;
  r17 -- r55;
  r0 -- r129;
  r14 -- r86;
  r20 -- r82;
  r20 -- r76;
  r0 -- r79;
  r14 -- r103;
  r20 -- r59;
  r20 -- r134;
  r17 -- r59;
  r20 -- r94;
  r20 -- r124;
  r144 -- r145;
  r0 -- r56;
  r0 -- r121;
  r20 -- r122;
  r0 -- r11;
  r14 -- r120;
  r17 -- r122;
  r105 -- r106;
  r14 -- r22;
  r55 -- r56;
  r17 -- r91;
  r20 -- r86;
  r30 -- r33;
  r20 -- r120;
  r17 -- r20;
  r10 -- r17;
  r152 -- r154;
  r55 -- r58;
  r0 -- r63;
  r20 -- r24;
  r20 -- r73;
  r20 -- r31;
  r4 -- r5;
  r0 -- r24;
  r20 -- r63;
  r0 -- r145;
  r14 -- r42;
  r17 -- r26;
  r0 -- r43;
  r0 -- r112;
  r17 -- r121;
  r0 -- r64;
  r17 -- r103;
  r20 -- r123;
  r0 -- r35;
  r14 -- r71;
  r20 -- r87;
  r0 -- r141;
  r0 -- r95;
  r17 -- r110;
  r0 -- r152;
  r14 -- r106;
  r14 -- r47;
  r113 -- r114;
  r20 -- r38;
  r20 -- r83;
  r0 -- r46;
  r0 -- r54;
  r0 -- r8;
  r20 -- r47;
  r14 -- r111;
  r17 -- r96;
  r0 -- r127;
  r12 -- r123;
  r7 -- r11;
  r17 -- r64;
  r17 -- r112;
  r135 -- r137;
  r14 -- r45;
  r14 -- r110;
  r20 -- r92;
  r20 -- r100;
  r14 -- r116;
  r0 -- r12;
  r12 -- r14;
  r20 -- r69;
  r20 -- r108;
  r17 -- r45;
  r20 -- r77;
  r0 -- r7;
  r79 -- r82;
  r0 -- r55;
  r0 -- r106;
  r17 -- r117;
  r20 -- r80;
  r17 -- r120;
  r0 -- r78;
  r20 -- r132;
  r13 -- r124;
  r17 -- r47;
  r14 -- r51;
  r20 -- r33;
  r17 -- r84;
  r0 -- r96;
  r14 -- r97;
  r0 -- r59;
  r0 -- r102;
  r20 -- r128;
  r14 -- r43;
  r47 -- r50;
  r14 -- r65;
  r17 -- r92;
  r0 -- r69;
  r17 -- r94;
  r38 -- r42;
  r14 -- r84;
  r17 -- r35;
  r17 -- r118;
  r96 -- r100;
  r0 -- r23;
  r0 -- r72;
  r0 -- r70;
  r0 -- r86;
  r17 -- r95;
  r0 -- r108;
  r30 -- r34;
  r17 -- r39;
  r14 -- r96;
  r20 -- r79;
  r20 -- r23;
  r17 -- r60;
  r0 -- r92;
  r0 -- r111;
  r2 -- r6;
  r14 -- r53;
  r10 -- r12;
  r0 -- r9;
  r0 -- r150;
  r0 -- r103;
  r2 -- r12;
  r17 -- r83;
  r20 -- r117;
  r135 -- r136;
  r17 -- r54;
  r20 -- r50;
  r20 -- r27;
  r14 -- r62;
  r0 -- r1;
  r0 -- r10;
  r23 -- r24;
  r20 -- r150;
  r17 -- r79;
  r79 -- r83;
  r0 -- r4;
  r17 -- r31;
  r14 -- r79;
  r14 -- r69;
  r20 -- r45;
  r14 -- r77;
  r14 -- r37;
  r0 -- r142;
  r17 -- r34;
  r14 -- r15;
  r17 -- r104;
  r0 -- r18;
  r20 -- r95;
  r14 -- r104;
  r17 -- r78;
  r17 -- r97;
  r20 -- r51;
  r17 -- r116;
  r0 -- r89;
  r0 -- r71;
  r127 -- r128;
  r20 -- r53;
  r17 -- r29;
  r17 -- r48;
  r20 -- r26;
  r47 -- r48;
  r14 -- r63;
  r0 -- r34;
  r14 -- r83;
  r0 -- r99;
  r0 -- r91;
  r0 -- r110;
  r17 -- r88;
  r0 -- r14;
  r20 -- r29;
  r0 -- r134;
  r14 -- r41;
  r0 -- r93;
  r20 -- r142;
  r14 -- r46;
  r79 -- r80;
  r20 -- r116;
  r20 -- r35;
  r0 -- r85;
  r20 -- r72;
  r0 -- r31;
  r0 -- r120;
  r7 -- r17;
  r14 -- r35;
  r14 -- r50;
  r122 -- r123;
  r0 -- r50;
  r17 -- r101;
  r12 -- r20;
  r20 -- r48;
  r17 -- r106;
  r17 -- r108;
  r20 -- r141;
  r0 -- r132;
  r0 -- r42;
  r12 -- r13;
  r20 -- r106;
  r0 -- r3;
  r7 -- r15;
  r14 -- r21;
  r0 -- r45;
  r20 -- r62;
  r0 -- r39;
  r17 -- r73;
  r0 -- r37;
  r10 -- r11;
  r0 -- r5;
  r0 -- r75;
  r13 -- r17;
  r13 -- r123;
  r0 -- r148;
  r20 -- r144;
  r20 -- r109;
  r2 -- r17;
  r14 -- r114;
  r12 -- r122;
  r20 -- r61;
  r0 -- r94;
  r20 -- r133;
  r20 -- r28;
  r7 -- r16;
  r2 -- r9;
  r4 -- r6;
  r0 -- r30;
  r7 -- r12;
  r20 -- r89;
  r17 -- r114;
  r20 -- r21;
  r7 -- r14;
  r17 -- r46;
  r0 -- r124;
  r17 -- r85;
  r0 -- r13;
  r17 -- r21;
  r14 -- r16;
  r14 -- r27;
  r14 -- r38;
  r0 -- r125;
  r0 -- r17;
  r0 -- r138;
  r14 -- r55;
  r14 -- r95;
  r14 -- r80;
  r30 -- r31;
  r2 -- r10;
  r0 -- r118;
  r0 -- r22;
  r0 -- r128;
  r14 -- r105;
  r0 -- r87;
  r0 -- r113;
  r0 -- r116;
  r17 -- r67;
  r14 -- r88;
  r0 -- r82;
  r14 -- r56;
  r20 -- r114;
  r17 -- r82;
  r14 -- r67;
  r14 -- r64;
  r0 -- r51;
  r0 -- r2;
  r20 -- r65;
  r7 -- r10;
  r17 -- r22;
  r2 -- r8;
  r0 -- r88;
  r14 -- r52;
  r20 -- r88;
  r0 -- r61;
  r72 -- r75;
  r14 -- r72;
  r0 -- r76;
  r4 -- r8;
  r14 -- r118;
  r14 -- r31;
  r64 -- r67;
  r20 -- r127;
  r7 -- r8;
  r14 -- r85;
  r17 -- r89;
  r0 -- r80;
  r17 -- r119;
  r14 -- r100;
  r17 -- r18;
  r14 -- r99;
  r17 -- r43;
  r17 -- r105;
  r17 -- r62;
  r14 -- r18;
  r14 -- r17;
  r0 -- r135;
  r20 -- r39;
  r20 -- r43;
  r20 -- r101;
  r2 -- r18;
  r0 -- r144;
  r0 -- r153;
  r0 -- r68;
  r17 -- r65;
  r20 -- r91;
  r14 -- r58;
  r0 -- r41;
  r14 -- r23;
  r20 -- r37;
  r7 -- r13;
  r0 -- r21;
  r20 -- r121;
  r20 -- r97;
  r20 -- r143;
  r14 -- r29;
  r14 -- r24;
  r14 -- r121;
  r7 -- r9;
  r20 -- r46;
  r17 -- r58;
  r14 -- r75;
  r13 -- r20;
  r17 -- r37;
  r20 -- r145;
  r20 -- r41;
  r20 -- r136;
  r17 -- r23;
  r17 -- r100;
  r0 -- r33;
  r10 -- r120;
  r17 -- r51;
  r0 -- r77;
  r20 -- r68;
  r14 -- r78;
  r0 -- r60;
  r0 -- r137;
  r20 -- r104;
  r0 -- r126;
  r17 -- r53;
  r0 -- r151;
  r0 -- r119;
  r20 -- r54;
  r14 -- r113;
  r17 -- r52;
  r14 -- r76;
  r38 -- r39;
  r17 -- r30;
  r0 -- r146;
  r17 -- r77;
  r2 -- r19;
  r20 -- r44;
  r0 -- r27;
  r2 -- r3;
  r20 -- r119;
  r14 -- r48;
  r20 -- r96;
  r17 -- r28;
  r10 -- r14;
  comment = "157:v53-> 0:zero-> 10:a0-> 5:v213-> 2:v2-> 9:v205-> 7:v4-> 17:v9-> 83:v135-> 153:v57-> 152:v51-> 151:v63-> 150:v62-> 20:v10-> 84:v136-> 148:v48-> 147:fv47-> 146:v69-> 145:v68-> 144:v46-> 143:v73-> 142:v72-> 141:v71-> 140:v43-> 139:fv42-> 138:v80-> 137:v79-> 136:v78-> 135:v41-> 134:v83-> 133:v82-> 132:v38-> 131:fa0-> 130:fv37-> 129:v89-> 128:v88-> 127:v36-> 126:v92-> 125:v91-> 124:a5-> 13:a2-> 122:a3-> 12:a1-> 123:a4-> 120:v95-> 119:v94-> 14:v8-> 69:v151-> 117:v101-> 116:v100-> 115:fv99-> 114:v98-> 113:v33-> 112:v105-> 111:v104-> 110:v103-> 109:v110-> 108:v109-> 105:v31-> 107:fv108-> 106:v107-> 104:v113-> 103:v112-> 102:v111-> 101:v119-> 100:v118-> 96:v29-> 99:v117-> 98:fv116-> 97:v115-> 95:v122-> 94:v121-> 93:v120-> 92:v127-> 91:v126-> 88:v27-> 90:fv125-> 49:fv166-> 89:v124-> 87:v130-> 86:v129-> 85:v128-> 3:v211-> 80:v132-> 1:v214-> 4:v3-> 154:v58-> 8:v210-> 79:v25-> 76:v143-> 75:v142-> 72:v23-> 74:fv141-> 73:v140-> 71:v145-> 70:v144-> 40:fv174-> 82:v134-> 39:v173-> 78:v138-> 68:v150-> 156:fv52-> 66:fv148-> 64:v21-> 61:v152-> 60:v160-> 59:v159-> 55:v19-> 58:v158-> 57:fv157-> 56:v156-> 54:v163-> 53:v162-> 52:v161-> 51:v168-> 50:v167-> 29:v187-> 48:v165-> 47:v17-> 46:v171-> 45:v170-> 44:v169-> 43:v177-> 42:v176-> 38:v15-> 41:v175-> 81:fv133-> 23:v11-> 26:v191-> 149:v61-> 37:v179-> 36:v178-> 35:v185-> 34:v184-> 18:v197-> 33:v183-> 32:fv182-> 31:v181-> 30:v13-> 22:v194-> 28:v186-> 6:v208-> 65:v147-> 118:v102-> 21:v193-> 25:fv190-> 24:v189-> 19:v198-> 155:v59-> 77:v137-> 11:v206-> 121:v96-> 67:v149-> 62:v153-> 63:v154-> 16:v202-> 27:v192-> 15:v201"
  comment = "v205<-a1;v191<-a0;v102<-a1;v169<-a1;v156<-a2;v104<-a1;v163<-a0;v189<-a0;v92<-a1;v94<-a1;v27<-a1;v132<-a0;v72<-a1;v173<-a0;v58<-a1;v147<-a1;v51<-a0;v25<-a1;v88<-a1;v33<-a1;v149<-a0;v137<-a0;v63<-a0;v206<-a1;v53<-a0;v158<-a2;v31<-a1;v48<-a0;v8<-a3;v138<-a0;v43<-a1;v202<-a1;v193<-a0;v160<-a1;v140<-a1;v120<-a1;v15<-a1;v68<-a0;v130<-a1;v122<-a0;v4<-a1;v46<-a1;v21<-a2;fv148<-a0;fv37<-a0;fv99<-a0;fv47<-a0;v80<-a1;v144<-a0;v165<-a1;v179<-a1;v111<-a1;v91<-a1;fv52<-a0;v145<-a0;v194<-a1;v136<-a1;v127<-a1;v170<-a1;fv108<-a0;v154<-a1;v2<-a0;v197<-a1;v79<-a0;v198<-a1;fv42<-a0;v96<-a2;v115<-a2;fv125<-a0;fv133<-a0;v119<-a1;v121<-a1;v171<-a1;v95<-a1;v183<-a1;v143<-a1;v159<-a1;v129<-a0;v162<-a1;v213<-a0;v177<-a1;v181<-a1;v117<-a1;v9<-a0;v82<-a1;v161<-a1;v89<-a0;v10<-a0;v152<-a1;v11<-a1;v109<-a1;v211<-a1;v38<-a1;v134<-a1;v142<-a1;v192<-a1;v153<-a1;fv174<-a0;v103<-a1;v184<-a1;v135<-a0;v112<-a1;v83<-a0;v69<-a1;v168<-a1;v29<-a1;v41<-a1;v19<-a1;v78<-a0;v57<-a0;v23<-a1;v113<-a0;v100<-a0;v118<-a1;v128<-a1;v59<-a0;v17<-a1;v208<-a1;v176<-a1;v3<-a2;v101<-a0;v187<-a0;v185<-a0;v98<-a0;v210<-a1;v178<-a1;v105<-a1;fv182<-a0;v201<-a1;fv166<-a0;v71<-a1;fv157<-a0;fv141<-a0;v62<-a0;v150<-a1;fv116<-a0;v126<-a1;v107<-a2;v110<-a1;v36<-a0;v214<-a0;v186<-a0;v175<-a2;v151<-a1;v124<-a2;v167<-a0;v13<-a2;fv190<-a0;v61<-a0;v73<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of init_arr"];
  r0 [label="v11 ← a1", color=green];
  r20 [label="v10 ← a0", color=green];
  r3 [label="v0 ← a0", color=green];
  r9 [label="v3 ← a0", color=green];
  r6 [label="v2 ← a1", color=green];
  r13 [label="v5 ← a2", color=green];
  r4 [label="a2", color=blue];
  r1 [label="a0", color=blue];
  r11 [label="v18 ← a2", color=green];
  r7 [label="v22 ← a3", color=green];
  r10 [label="v4 ← a0", color=green];
  r14 [label="fv21 ← a0", color=green];
  r8 [label="v6 ← a0", color=green];
  r5 [label="a1", color=blue];
  r15 [label="fa0", color=blue];
  r2 [label="zero", color=blue];
  r16 [label="v16 ← a2", color=green];
  r18 [label="v14 ← a2", color=green];
  r19 [label="v9 ← a0", color=green];
  r17 [label="v17 ← a0", color=green];
  r12 [label="v19 ← a2", color=green];
  r6 -- r9;
  r3 -- r19;
  r6 -- r11;
  r4 -- r5;
  r1 -- r8;
  r5 -- r8;
  r2 -- r4;
  r3 -- r16;
  r5 -- r10;
  r2 -- r18;
  r1 -- r4;
  r3 -- r6;
  r1 -- r7;
  r3 -- r12;
  r5 -- r13;
  r1 -- r10;
  r10 -- r13;
  r2 -- r10;
  r13 -- r16;
  r10 -- r19;
  r3 -- r9;
  r3 -- r11;
  r1 -- r13;
  r6 -- r16;
  r2 -- r16;
  r9 -- r17;
  r2 -- r7;
  r2 -- r11;
  r3 -- r18;
  r6 -- r12;
  r3 -- r5;
  r6 -- r20;
  r10 -- r16;
  r9 -- r18;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r6 -- r19;
  r2 -- r6;
  r9 -- r11;
  r10 -- r20;
  r5 -- r6;
  r3 -- r4;
  r10 -- r18;
  r5 -- r9;
  r10 -- r12;
  r3 -- r13;
  r6 -- r18;
  r6 -- r10;
  r9 -- r12;
  r2 -- r12;
  r10 -- r11;
  r2 -- r8;
  r3 -- r20;
  r3 -- r10;
  r13 -- r17;
  r1 -- r2;
  r2 -- r5;
  r6 -- r17;
  r0 -- r1;
  r2 -- r13;
  r9 -- r20;
  r2 -- r17;
  r4 -- r7;
  r3 -- r17;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r9 -- r16;
  r9 -- r19;
  r3 -- r7;
  r1 -- r6;
  r1 -- r5;
  r2 -- r9;
  r4 -- r6;
  r4 -- r10;
  r2 -- r19;
  r1 -- r3;
  r9 -- r13;
  r2 -- r3;
  r4 -- r9;
  r10 -- r17;
  r2 -- r20;
  comment = "20:v10-> 3:v0-> 2:zero-> 10:v4-> 9:v3-> 6:v2-> 11:v18-> 18:v14-> 16:v16-> 13:v5-> 17:v17-> 12:v19-> 14:fv21-> 15:fa0-> 8:v6-> 7:v22-> 5:a1-> 4:a2-> 19:v9-> 1:a0-> 0:v11"
  comment = "v11<-a1;v10<-a0;v0<-a0;v3<-a0;v2<-a1;v5<-a2;v18<-a2;v22<-a3;v4<-a0;fv21<-a0;v6<-a0;v16<-a2;v14<-a2;v9<-a0;v17<-a0;v19<-a2;"
}

graph G {
  graph [label="float interference graph of init_arr"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of mul"];
  r8 [label="v3 ← a0", color=green];
  r0 [label="a5", color=blue];
  r5 [label="a1", color=blue];
  r3 [label="a4", color=blue];
  r2 [label="a0", color=blue];
  r9 [label="v4 ← a2", color=green];
  r6 [label="a3", color=blue];
  r13 [label="v11 ← a1", color=green];
  r4 [label="a2", color=blue];
  r1 [label="zero", color=blue];
  r11 [label="v6 ← a0", color=green];
  r7 [label="v2 ← a4", color=green];
  r10 [label="v5 ← a3", color=green];
  r12 [label="v7 ← a0", color=green];
  r14 [label="v8 ← a0", color=green];
  r6 -- r7;
  r6 -- r9;
  r6 -- r11;
  r1 -- r12;
  r4 -- r5;
  r1 -- r8;
  r2 -- r4;
  r5 -- r10;
  r1 -- r4;
  r3 -- r6;
  r11 -- r14;
  r1 -- r7;
  r8 -- r9;
  r3 -- r12;
  r1 -- r10;
  r7 -- r13;
  r10 -- r13;
  r2 -- r10;
  r3 -- r9;
  r11 -- r12;
  r1 -- r13;
  r2 -- r11;
  r7 -- r9;
  r5 -- r11;
  r6 -- r12;
  r3 -- r5;
  r8 -- r12;
  r6 -- r8;
  r0 -- r6;
  r9 -- r14;
  r3 -- r8;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r4 -- r11;
  r3 -- r4;
  r12 -- r13;
  r11 -- r13;
  r8 -- r13;
  r0 -- r2;
  r5 -- r9;
  r10 -- r12;
  r0 -- r3;
  r0 -- r8;
  r0 -- r9;
  r7 -- r10;
  r9 -- r12;
  r2 -- r12;
  r10 -- r11;
  r2 -- r8;
  r7 -- r11;
  r3 -- r10;
  r0 -- r5;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r8 -- r10;
  r0 -- r10;
  r4 -- r7;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r0 -- r11;
  r8 -- r11;
  r12 -- r14;
  r1 -- r6;
  r3 -- r7;
  r1 -- r5;
  r0 -- r4;
  r2 -- r9;
  r1 -- r14;
  r8 -- r14;
  r4 -- r6;
  r4 -- r10;
  r7 -- r8;
  r1 -- r3;
  r7 -- r12;
  r9 -- r13;
  r0 -- r7;
  r2 -- r3;
  r10 -- r14;
  r5 -- r12;
  comment = "14:v8-> 11:v6-> 9:v4-> 8:v3-> 6:a3-> 5:a1-> 13:v11-> 12:v7-> 10:v5-> 1:zero-> 4:a2-> 2:a0-> 3:a4-> 7:v2-> 0:a5"
  comment = "v3<-a0;v4<-a2;v11<-a1;v6<-a0;v2<-a4;v5<-a3;v7<-a0;v8<-a0;"
}

graph G {
  graph [label="float interference graph of mul"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of loop3"];
  r0 [label="v2 ← a3", color=green];
  r38 [label="a4", color=blue];
  r33 [label="v19 ← a2", color=green];
  r9 [label="v9 ← a1", color=green];
  r26 [label="v30 ← a2", color=green];
  r6 [label="v3 ← a0", color=green];
  r13 [label="v41 ← a2", color=green];
  r42 [label="v8 ← a0", color=green];
  r4 [label="v4 ← a0", color=green];
  r29 [label="fv17 ← a0", color=green];
  r35 [label="a1", color=blue];
  r7 [label="v47 ← a1", color=green];
  r10 [label="v44 ← a2", color=green];
  r8 [label="v48 ← a2", color=green];
  r5 [label="v6 ← a0", color=green];
  r36 [label="a2", color=blue];
  r32 [label="v23 ← a2", color=green];
  r24 [label="v14 ← a3", color=green];
  r15 [label="fv11 ← a0", color=green];
  r43 [label="v21 ← a1", color=green];
  r31 [label="v26 ← a2", color=green];
  r39 [label="a5", color=blue];
  r17 [label="v39 ← a1", color=green];
  r12 [label="v10 ← a3", color=green];
  r37 [label="a3", color=blue];
  r20 [label="v36 ← a2", color=green];
  r23 [label="v33 ← a1", color=green];
  r3 [label="v7 ← a1", color=green];
  r27 [label="fv15 ← a0", color=green];
  r1 [label="v5 ← a2", color=green];
  r40 [label="v20 ← a0", color=green];
  r28 [label="fv16 ← a0", color=green];
  r41 [label="v50 ← a0", color=green];
  r11 [label="v45 ← a2", color=green];
  r34 [label="a0", color=blue];
  r22 [label="v32 ← a2", color=green];
  r14 [label="v42 ← a2", color=green];
  r30 [label="v25 ← a2", color=green];
  r25 [label="v29 ← a2", color=green];
  r2 [label="zero", color=blue];
  r16 [label="v38 ← a2", color=green];
  r18 [label="v12 ← a2", color=green];
  r19 [label="v35 ← a3", color=green];
  r21 [label="fv13 ← a0", color=green];
  r37 -- r39;
  r2 -- r32;
  r2 -- r31;
  r2 -- r38;
  r0 -- r36;
  r5 -- r33;
  r1 -- r26;
  r0 -- r32;
  r4 -- r34;
  r6 -- r35;
  r1 -- r30;
  r3 -- r16;
  r39 -- r41;
  r5 -- r10;
  r3 -- r6;
  r5 -- r17;
  r5 -- r22;
  r38 -- r42;
  r35 -- r42;
  r5 -- r18;
  r3 -- r9;
  r3 -- r11;
  r9 -- r26;
  r0 -- r23;
  r3 -- r37;
  r2 -- r37;
  r9 -- r17;
  r2 -- r7;
  r1 -- r16;
  r1 -- r33;
  r3 -- r26;
  r3 -- r31;
  r0 -- r16;
  r2 -- r41;
  r34 -- r42;
  r2 -- r42;
  r3 -- r5;
  r4 -- r31;
  r2 -- r34;
  r0 -- r6;
  r9 -- r14;
  r5 -- r31;
  r3 -- r8;
  r1 -- r9;
  r2 -- r25;
  r5 -- r35;
  r2 -- r6;
  r5 -- r6;
  r0 -- r26;
  r3 -- r39;
  r0 -- r9;
  r35 -- r38;
  r9 -- r23;
  r9 -- r12;
  r1 -- r40;
  r2 -- r12;
  r5 -- r32;
  r1 -- r2;
  r0 -- r38;
  r2 -- r5;
  r3 -- r33;
  r9 -- r20;
  r2 -- r13;
  r0 -- r1;
  r0 -- r10;
  r4 -- r25;
  r3 -- r17;
  r1 -- r11;
  r2 -- r36;
  r35 -- r37;
  r1 -- r38;
  r2 -- r22;
  r3 -- r35;
  r1 -- r5;
  r0 -- r4;
  r6 -- r23;
  r1 -- r35;
  r24 -- r25;
  r4 -- r14;
  r5 -- r36;
  r0 -- r18;
  r6 -- r25;
  r4 -- r13;
  r3 -- r19;
  r3 -- r25;
  r34 -- r41;
  r2 -- r26;
  r34 -- r35;
  r1 -- r8;
  r4 -- r23;
  r2 -- r4;
  r3 -- r38;
  r1 -- r34;
  r6 -- r33;
  r0 -- r34;
  r6 -- r30;
  r1 -- r22;
  r0 -- r14;
  r5 -- r19;
  r1 -- r13;
  r9 -- r30;
  r34 -- r39;
  r33 -- r35;
  r4 -- r18;
  r2 -- r11;
  r6 -- r22;
  r5 -- r11;
  r0 -- r19;
  r35 -- r41;
  r5 -- r38;
  r6 -- r20;
  r3 -- r22;
  r0 -- r31;
  r34 -- r38;
  r6 -- r19;
  r2 -- r40;
  r9 -- r11;
  r12 -- r13;
  r38 -- r41;
  r2 -- r14;
  r5 -- r9;
  r0 -- r3;
  r4 -- r32;
  r9 -- r24;
  r0 -- r39;
  r0 -- r37;
  r3 -- r20;
  r0 -- r5;
  r1 -- r25;
  r4 -- r36;
  r2 -- r17;
  r4 -- r7;
  r2 -- r30;
  r5 -- r39;
  r6 -- r39;
  r5 -- r25;
  r6 -- r38;
  r2 -- r9;
  r2 -- r35;
  r4 -- r6;
  r4 -- r10;
  r0 -- r30;
  r9 -- r13;
  r0 -- r20;
  r3 -- r23;
  r1 -- r24;
  r5 -- r12;
  r2 -- r20;
  r36 -- r38;
  r2 -- r39;
  r4 -- r38;
  r0 -- r13;
  r9 -- r25;
  r1 -- r12;
  r6 -- r36;
  r1 -- r37;
  r5 -- r8;
  r1 -- r4;
  r37 -- r38;
  r0 -- r17;
  r1 -- r7;
  r1 -- r18;
  r34 -- r43;
  r1 -- r19;
  r1 -- r10;
  r0 -- r25;
  r2 -- r10;
  r3 -- r32;
  r39 -- r42;
  r1 -- r17;
  r1 -- r20;
  r2 -- r16;
  r0 -- r22;
  r3 -- r24;
  r4 -- r22;
  r4 -- r40;
  r3 -- r18;
  r3 -- r34;
  r4 -- r35;
  r9 -- r18;
  r37 -- r42;
  r1 -- r31;
  r35 -- r39;
  r6 -- r13;
  r2 -- r33;
  r4 -- r33;
  r3 -- r30;
  r0 -- r40;
  r3 -- r4;
  r0 -- r2;
  r3 -- r13;
  r6 -- r18;
  r6 -- r10;
  r3 -- r40;
  r2 -- r8;
  r3 -- r10;
  r36 -- r42;
  r4 -- r12;
  r6 -- r31;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r5 -- r14;
  r0 -- r11;
  r3 -- r7;
  r1 -- r6;
  r2 -- r24;
  r4 -- r9;
  r2 -- r23;
  r36 -- r41;
  r6 -- r32;
  r5 -- r34;
  r36 -- r37;
  r35 -- r36;
  r6 -- r7;
  r6 -- r9;
  r4 -- r16;
  r6 -- r11;
  r4 -- r24;
  r4 -- r5;
  r5 -- r20;
  r2 -- r18;
  r4 -- r37;
  r0 -- r24;
  r36 -- r39;
  r1 -- r23;
  r6 -- r14;
  r5 -- r23;
  r3 -- r12;
  r5 -- r13;
  r1 -- r32;
  r4 -- r20;
  r6 -- r16;
  r4 -- r30;
  r0 -- r35;
  r5 -- r16;
  r6 -- r26;
  r6 -- r12;
  r6 -- r40;
  r6 -- r24;
  r1 -- r39;
  r6 -- r8;
  r33 -- r34;
  r6 -- r34;
  r9 -- r22;
  r6 -- r37;
  r4 -- r11;
  r18 -- r19;
  r0 -- r33;
  r5 -- r24;
  r5 -- r26;
  r34 -- r37;
  r0 -- r8;
  r5 -- r37;
  r34 -- r36;
  r6 -- r17;
  r3 -- r14;
  r9 -- r16;
  r0 -- r12;
  r4 -- r39;
  r3 -- r36;
  r4 -- r17;
  r9 -- r19;
  r38 -- r39;
  r1 -- r14;
  r1 -- r36;
  r4 -- r26;
  r1 -- r3;
  r2 -- r19;
  r0 -- r7;
  r5 -- r30;
  r2 -- r3;
  r37 -- r41;
  r5 -- r40;
  r4 -- r19;
  comment = "43:v21-> 34:a0-> 42:v8-> 37:a3-> 36:a2-> 35:a1-> 41:v50-> 40:v20-> 4:v4-> 5:v6-> 6:v3-> 3:v7-> 32:v23-> 31:v26-> 30:v25-> 9:v9-> 1:v5-> 2:zero-> 38:a4-> 17:v39-> 28:fv16-> 27:fv15-> 26:v30-> 25:v29-> 24:v14-> 23:v33-> 22:v32-> 21:fv13-> 16:v38-> 7:v47-> 18:v12-> 29:fv17-> 33:v19-> 39:a5-> 15:fv11-> 13:v41-> 20:v36-> 12:v10-> 10:v44-> 14:v42-> 11:v45-> 8:v48-> 0:v2-> 19:v35"
  comment = "v2<-a3;v19<-a2;v9<-a1;v30<-a2;v3<-a0;v41<-a2;v8<-a0;v4<-a0;fv17<-a0;v47<-a1;v44<-a2;v48<-a2;v6<-a0;v23<-a2;v14<-a3;fv11<-a0;v21<-a1;v26<-a2;v39<-a1;v10<-a3;v36<-a2;v33<-a1;v7<-a1;fv15<-a0;v5<-a2;v20<-a0;fv16<-a0;v50<-a0;v45<-a2;v32<-a2;v42<-a2;v25<-a2;v29<-a2;v38<-a2;v12<-a2;v35<-a3;fv13<-a0;"
}

graph G {
  graph [label="float interference graph of loop3"];
  r0 [label="fv11 ← fa1", color=green];
  r2 [label="fv15 ← fa0", color=green];
  r1 [label="fv13 ← fa2", color=green];
  r3 [label="fv16 ← fa0", color=green];
  r1 -- r2;
  r0 -- r3;
  r0 -- r1;
  r0 -- r2;
  comment = "3:fv16-> 0:fv11-> 2:fv15-> 1:fv13"
  comment = "fv11<-fa1;fv15<-fa0;fv13<-fa2;fv16<-fa0;"
}

graph G {
  graph [label="integer interference graph of loop1"];
  r0 [label="a5", color=blue];
  r20 [label="v13 ← a1", color=green];
  r3 [label="a4", color=blue];
  r9 [label="v8 ← a0", color=green];
  r6 [label="a3", color=blue];
  r13 [label="v6 ← a1", color=green];
  r4 [label="a2", color=blue];
  r1 [label="a0", color=blue];
  r11 [label="v7 ← a0", color=green];
  r7 [label="v2 ← a3", color=green];
  r10 [label="v5 ← a3", color=green];
  r14 [label="v3 ← a0", color=green];
  r8 [label="v20 ← a0", color=green];
  r5 [label="a1", color=blue];
  r15 [label="v18 ← a3", color=green];
  r2 [label="zero", color=blue];
  r16 [label="v9 ← a1", color=green];
  r18 [label="v11 ← a4", color=green];
  r19 [label="v12 ← a1", color=green];
  r17 [label="v15 ← a1", color=green];
  r12 [label="v4 ← a2", color=green];
  r0 -- r13;
  r1 -- r12;
  r2 -- r15;
  r14 -- r16;
  r5 -- r8;
  r5 -- r10;
  r1 -- r4;
  r11 -- r14;
  r3 -- r6;
  r1 -- r7;
  r1 -- r10;
  r10 -- r13;
  r2 -- r10;
  r10 -- r19;
  r3 -- r9;
  r3 -- r11;
  r1 -- r20;
  r2 -- r16;
  r2 -- r7;
  r11 -- r18;
  r1 -- r16;
  r3 -- r5;
  r12 -- r19;
  r11 -- r19;
  r0 -- r6;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r14 -- r19;
  r2 -- r6;
  r5 -- r6;
  r3 -- r4;
  r11 -- r13;
  r10 -- r18;
  r0 -- r2;
  r10 -- r12;
  r0 -- r9;
  r3 -- r13;
  r6 -- r10;
  r7 -- r10;
  r2 -- r12;
  r2 -- r8;
  r3 -- r10;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r2 -- r13;
  r0 -- r10;
  r13 -- r18;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r11 -- r15;
  r5 -- r14;
  r0 -- r11;
  r1 -- r6;
  r3 -- r7;
  r1 -- r5;
  r0 -- r4;
  r4 -- r14;
  r14 -- r15;
  r4 -- r9;
  r10 -- r17;
  r6 -- r7;
  r6 -- r9;
  r4 -- r13;
  r6 -- r11;
  r13 -- r15;
  r4 -- r5;
  r14 -- r18;
  r14 -- r17;
  r11 -- r17;
  r1 -- r8;
  r2 -- r4;
  r2 -- r18;
  r6 -- r14;
  r12 -- r15;
  r11 -- r16;
  r3 -- r12;
  r5 -- r13;
  r7 -- r13;
  r0 -- r14;
  r13 -- r16;
  r11 -- r12;
  r1 -- r13;
  r2 -- r11;
  r5 -- r11;
  r5 -- r16;
  r6 -- r12;
  r13 -- r19;
  r10 -- r16;
  r6 -- r8;
  r7 -- r17;
  r4 -- r11;
  r7 -- r19;
  r12 -- r13;
  r2 -- r14;
  r5 -- r9;
  r0 -- r3;
  r0 -- r8;
  r7 -- r15;
  r13 -- r14;
  r10 -- r15;
  r10 -- r11;
  r7 -- r11;
  r0 -- r5;
  r13 -- r17;
  r3 -- r14;
  r2 -- r17;
  r4 -- r7;
  r0 -- r12;
  r12 -- r14;
  r12 -- r16;
  r7 -- r16;
  r12 -- r17;
  r7 -- r18;
  r2 -- r9;
  r4 -- r6;
  r1 -- r14;
  r4 -- r10;
  r1 -- r3;
  r2 -- r19;
  r7 -- r12;
  r0 -- r7;
  r2 -- r3;
  r7 -- r14;
  r12 -- r18;
  r5 -- r12;
  r10 -- r14;
  comment = "20:v13-> 1:a0-> 3:a4-> 11:v7-> 14:v3-> 13:v6-> 12:v4-> 4:a2-> 6:a3-> 5:a1-> 16:v9-> 15:v18-> 2:zero-> 0:a5-> 17:v15-> 8:v20-> 7:v2-> 10:v5-> 18:v11-> 19:v12-> 9:v8"
  comment = "v13<-a1;v8<-a0;v6<-a1;v7<-a0;v2<-a3;v5<-a3;v3<-a0;v20<-a0;v18<-a3;v9<-a1;v11<-a4;v12<-a1;v15<-a1;v4<-a2;"
}

graph G {
  graph [label="float interference graph of loop1"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl loop2
  .type loop2, @function
loop2:
; block info: defs: [v2, v5, v20, v7, v8, v4, v6, v3], uses: [a5, a0, zero, a4, v20, v8, v4, a2, a1, a3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v3, v5, zero, v7, v4, v6, v2]
; block parameters: []
.loop2_b0:
  mv v2, a0  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v3, a1  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v4, a2  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v5, a3  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  mv v6, a4  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  mv v7, a5  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  slt v20, zero, v4  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  xori v8, v20, 1  ; live: [a5, a0, zero, a4, v20, a2, a1, a3]
; control
  bne v8, zero, .loop2_b1  ; live: [a5, a0, zero, a4, v8, a2, a1, a3]
  j .loop2_b2  ; live: [a5, a0, zero, a4, a2, a1, a3]

; block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v13]
; block parameters: []
.loop2_b2:
; control
  mv v13, zero  ; live: [zero]
  j .loop2_b3  ; live: [zero]

; block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
; live_in: [v13], live_out: []
; block parameters: [v13]
.loop2_b3:
; control
  mv a0, v13  ; live: [v13]
  ret  ; live: [v13, a0]

; block info: defs: [t1, v13, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v11, v5, a5, a0, v7, a2, a1, a3, v12, v9, v18, zero, a4, v4, v6, v15, v3], upward_exposed: [v3, v5, zero, v7, v4, v6, v2], params_defs: []
; live_in: [v2, v5, zero, v7, v4, v6, v3], live_out: [v13]
; block parameters: []
.loop2_b1:
  li v18, 1  ; live: [v3, v5, zero, v7, v4, v6, v2]
  sub v9, v3, v18  ; live: [v3, v5, v18, zero, v7, v4, v6, v2]
  mv a0, v2  ; live: [v3, v5, zero, v7, v4, v6, v9, v2]
  mv a1, v4  ; live: [v3, v5, zero, a0, v7, v4, v6, v9, v2]
  mv a2, v9  ; live: [v3, v5, zero, a0, v7, v4, a1, v6, v9, v2]
  mv a3, v5  ; live: [v3, v5, zero, a0, v7, v4, a2, a1, v6, v2]
  mv a4, v6  ; live: [v3, v5, zero, a0, v7, v4, a2, a1, v6, a3, v2]
  mv a5, v7  ; live: [v3, v5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v2]
  call loop3  ; live: [v3, v5, a5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v2]
  mv v10, zero  ; live: [v3, v5, zero, v7, v4, v6, v2]
  li v15, 1  ; live: [v3, v5, zero, v7, v4, v6, v2]
  sub v11, v4, v15  ; live: [v3, v5, zero, v7, v4, v6, v15, v2]
  mv a0, v2  ; live: [v3, v11, v5, zero, v7, v4, v6, v2]
  mv a1, v3  ; live: [v3, v11, v5, zero, a0, v7, v4, v6, v2]
  mv a2, v11  ; live: [v3, v11, v5, zero, a0, v7, v4, a1, v6, v2]
  mv a3, v5  ; live: [v3, v5, zero, a0, v7, v4, a2, a1, v6, v2]
  mv a4, v6  ; live: [v3, v5, zero, a0, v7, v4, a2, a1, v6, a3, v2]
  mv a5, v7  ; live: [v3, v5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v2]
  call loop2  ; live: [v3, v5, a5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v2]
  mv v12, zero  ; live: [v3, v5, zero, v7, v4, v6, v2]
; control
  mv v13, v12  ; live: [v3, v5, zero, v7, v4, v6, v12, v2]
  j .loop2_b3  ; live: [v3, v5, zero, v7, v4, v6, v2]

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl make_arr
  .type make_arr, @function
make_arr:
; block info: defs: [v2, t1, v14, v0, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v14, v5, a0, v0, a2, a1, s11, v12, s10, zero, v8, v4, v6, v15, v2], upward_exposed: [a2, a1, s11, s10, a0, zero], params_defs: []
; live_in: [a0, zero, a2, a1, s11, s10], live_out: []
; block parameters: []
.make_arr_b0:
  mv v0, s10  ; live: [zero, a0, a2, a1, s11, s10]
  mv v2, a0  ; live: [zero, a0, v0, a2, a1, s11]
  mv v3, a1  ; live: [zero, v0, a2, a1, s11, v2]
  mv v4, a2  ; live: [v2, zero, v0, a2, s11, v3]
  lw v5, 8(v0)  ; live: [v2, zero, v0, v4, s11, v3]
  slli v14, v2, 3  ; live: [v2, v5, zero, v4, s11, v3]
  sub v15, s11, v14  ; live: [v2, v5, v14, zero, v4, s11, v3]
  andi v6, v15, -8  ; live: [v2, v5, zero, v4, s11, v15, v3]
  mv a1, v2  ; live: [v2, v5, zero, v4, v6, s11, v3]
  mv a0, v6  ; live: [v2, v5, zero, v4, v6, a1, s11, v3]
  mv a2, v4  ; live: [v2, v5, zero, a0, v4, v6, a1, s11, v3]
  call _memseti32  ; live: [v2, v5, zero, a0, a2, v6, a1, s11, v3]
  li v12, 1  ; live: [v2, v5, zero, v6, s11, v3]
  sub v8, v2, v12  ; live: [v2, v5, zero, v6, s11, v12, v3]
  mv s10, v5  ; live: [v5, zero, v8, v6, s11, v3]
  ld v10, 0(v5)  ; live: [v5, zero, v8, v6, s11, s10, v3]
  mv a0, v8  ; live: [zero, v8, v6, s11, s10, v3]
  mv a1, v3  ; live: [zero, a0, v6, s11, s10, v3]
  mv a2, v6  ; live: [zero, a0, v6, a1, s11, s10]
  jalr v10  ; live: [zero, a0, a2, v6, a1, s11, s10]
  mv v9, zero  ; live: [zero, a2, a1, v6, s11, s10]
; control
  mv a0, v6  ; live: [zero, a2, a1, v6, s11, s10]
  ret  ; live: [a0, zero, a2, a1, s11, s10]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v153, v91, v58, fv190, v79, v159, v150, a1, fv47, t5, v44, fa1, v191, v82, fa2, fv174, v169, fv125, v50, v151, a6, ft10, v59, v102, v154, v117, v62, ft4, v10, ft9, v119, v110, v92, v184, fv148, v43, v206, fv182, a7, fv108, v205, v156, v48, v96, fv116, v181, v163, v132, v40, v25, fv52, v194, v179, ft0, ft1, v41, v177, v143, v192, v185, v173, v98, v193, v161, v130, v29, v8, v105, v89, fv216, v21, v121, v53, a2, v198, v160, v9, v145, v186, ft8, t3, v176, v112, fv157, fa5, v23, t4, v80, v15, v135, v2, v95, v200, v33, v73, v51, v168, v63, fv99, ft6, a4, fa6, v27, v183, ft5, v170, v210, v144, v137, v129, v54, fv37, v165, v49, v171, fa4, v208, ft2, v17, a3, v147, v196, v31, v113, v201, v167, fv166, v101, fa7, fv141, fa3, v204, v68, fv42, ft3, v45, v136, v104, v213, v140, t2, v61, v3, t1, v69, v162, v127, v13, v120, v107, v134, v149, fv133, v115, v109, v142, v126, v197, v19, v103, v4, v128, v57, v122, ft7, v11, v71, v46, a5, a0, v158, v211, v78, v36, v88, v111, v202, s10, v214, v187, v138, v39, v118, v175, v94, t0, v72, v124, v178, v35, fa0, v152, v38, v83, v100, v189], uses: [v153, v91, v58, fv190, v79, v159, v150, a1, s11, fv47, v191, v82, fv174, v169, fv125, v151, v59, v154, v117, v102, v62, v10, v119, v110, v92, v184, fv148, v43, v206, fv182, fv108, v205, v156, v48, v96, fv116, v181, v163, v132, v25, fv52, v194, v179, v41, v177, v192, v143, v185, v173, v193, v98, v161, v130, zero, v29, v8, v105, v89, v21, v121, v53, a2, v198, v160, v145, v9, v186, v176, v112, fv157, v23, v80, v15, v135, v2, v95, v33, v73, v51, v168, v63, fv99, v27, a4, v183, v170, v144, v137, v129, v210, v165, fv37, v171, v208, v17, a3, v147, v31, v113, v201, v167, fv166, v101, fv141, v68, fv42, v136, v104, v213, v140, v61, v3, v162, v69, v127, v13, v120, v134, v107, v149, fv133, v115, v109, v142, v126, v197, v19, v103, v4, v128, v57, v122, v11, v71, v46, a5, a0, v158, v211, v78, v36, v88, v111, v202, v214, v138, v187, v118, v175, v94, v72, v124, v178, v152, fa0, v38, v83, v100, v189], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v214, s11, 0  ; live: [zero, s11]
  andi v2, v214, -8  ; live: [zero, s11, v214]
  fmv.d.x fv216, zero  ; live: [zero, s11, v2]
  addi v211, s11, -8  ; live: [zero, s11, v2]
  andi v3, v211, -8  ; live: [zero, v211, s11, v2]
  la v213, init_arr  ; live: [v3, zero, s11, v2]
  sd v213, 0(v3)  ; live: [v3, zero, v213, s11, v2]
  addi v208, s11, -16  ; live: [v3, zero, s11, v2]
  andi v4, v208, -8  ; live: [v3, zero, v208, s11, v2]
  la v210, make_arr  ; live: [v3, zero, v4, s11, v2]
  sd v210, 0(v4)  ; live: [v3, zero, v4, s11, v210, v2]
  sd v3, 8(v4)  ; live: [v3, zero, v4, s11, v2]
  mv s10, v4  ; live: [zero, v4, s11, v2]
  ld v204, 0(v4)  ; live: [zero, v4, s11, v2]
  li v205, 2  ; live: [zero, v4, s11, v2]
  mv a0, v205  ; live: [v205, zero, v4, s11, v2]
  li v206, 3  ; live: [zero, a0, v4, s11, v2]
  mv a1, v206  ; live: [zero, a0, v4, s11, v206, v2]
  mv a2, v2  ; live: [zero, a0, v4, a1, s11, v2]
  jalr v204  ; live: [zero, a0, v4, a2, a1, s11, v2]
  mv v8, a0  ; live: [zero, a0, v4, s11, v2]
  mv s10, v4  ; live: [zero, v8, v4, s11, v2]
  ld v200, 0(v4)  ; live: [zero, v8, v4, s11, v2]
  li v201, 3  ; live: [zero, v8, v4, s11, v2]
  mv a0, v201  ; live: [zero, v8, v4, s11, v201, v2]
  li v202, 2  ; live: [zero, a0, v8, v4, s11, v2]
  mv a1, v202  ; live: [zero, a0, v8, v4, s11, v202, v2]
  mv a2, v2  ; live: [zero, a0, v8, v4, a1, s11, v2]
  jalr v200  ; live: [zero, a0, v8, v4, a2, a1, s11, v2]
  mv v9, a0  ; live: [zero, a0, v8, v4, s11, v2]
  mv s10, v4  ; live: [zero, v8, v4, s11, v9, v2]
  ld v196, 0(v4)  ; live: [zero, v8, v4, s11, v9, v2]
  li v197, 2  ; live: [zero, v8, s11, v9, v2]
  mv a0, v197  ; live: [zero, v8, v197, s11, v9, v2]
  li v198, 2  ; live: [zero, a0, v8, s11, v9, v2]
  mv a1, v198  ; live: [zero, a0, v8, v198, s11, v9, v2]
  mv a2, v2  ; live: [zero, a0, v8, a1, s11, v9, v2]
  jalr v196  ; live: [zero, a0, v8, a2, a1, s11, v9]
  mv v10, a0  ; live: [zero, a0, v8, s11, v9]
  slli v193, zero, 3  ; live: [v10, zero, v8, s11, v9]
  add v194, v8, v193  ; live: [v10, zero, v8, s11, v9, v193]
  ld v11, 0(v194)  ; live: [v194, v10, zero, v8, s11, v9]
  li v189, 4607182418800017408  ; live: [v11, v10, zero, v8, s11, v9]
  fmv.d.x fv190, v189  ; live: [v11, v10, zero, v8, s11, v9, v189]
  slli v191, zero, 3  ; live: [v11, v10, fv190, zero, v8, s11, v9]
  add v192, v11, v191  ; live: [v11, v10, fv190, zero, v8, s11, v9, v191]
  fsd fv190, 0(v192)  ; live: [v10, fv190, zero, v8, s11, v192, v9]
  slli v186, zero, 3  ; live: [v10, zero, v8, s11, v9]
  add v187, v8, v186  ; live: [v10, zero, v8, s11, v9, v186]
  ld v13, 0(v187)  ; live: [v10, zero, v8, s11, v9, v187]
  li v181, 4611686018427387904  ; live: [v10, zero, v13, v8, s11, v9]
  fmv.d.x fv182, v181  ; live: [v10, zero, v13, v8, v181, s11, v9]
  li v183, 1  ; live: [fv182, v10, zero, v13, v8, s11, v9]
  slli v184, v183, 3  ; live: [fv182, v10, zero, v13, v8, v183, s11, v9]
  add v185, v13, v184  ; live: [fv182, v10, zero, v13, v8, v184, s11, v9]
  fsd fv182, 0(v185)  ; live: [fv182, v10, zero, v8, s11, v9, v185]
  slli v178, zero, 3  ; live: [v10, zero, v8, s11, v9]
  add v179, v8, v178  ; live: [v10, zero, v178, v8, s11, v9]
  ld v15, 0(v179)  ; live: [v10, v179, zero, v8, s11, v9]
  li v173, 4613937818241073152  ; live: [v10, zero, v8, s11, v15, v9]
  fmv.d.x fv174, v173  ; live: [v10, zero, v8, s11, v15, v9, v173]
  li v175, 2  ; live: [v10, zero, fv174, v8, s11, v15, v9]
  slli v176, v175, 3  ; live: [v175, v10, zero, fv174, v8, s11, v15, v9]
  add v177, v15, v176  ; live: [v176, v10, zero, fv174, v8, s11, v15, v9]
  fsd fv174, 0(v177)  ; live: [v10, zero, fv174, v8, v177, s11, v9]
  li v169, 1  ; live: [v10, zero, v8, s11, v9]
  slli v170, v169, 3  ; live: [v10, zero, v169, v8, s11, v9]
  add v171, v8, v170  ; live: [v10, zero, v8, v170, s11, v9]
  ld v17, 0(v171)  ; live: [v10, v171, zero, v8, s11, v9]
  li v165, 4616189618054758400  ; live: [v10, zero, v8, v17, s11, v9]
  fmv.d.x fv166, v165  ; live: [v165, v10, zero, v8, v17, s11, v9]
  slli v167, zero, 3  ; live: [v10, zero, v8, v17, s11, v9, fv166]
  add v168, v17, v167  ; live: [v10, zero, v8, v17, s11, v9, v167, fv166]
  fsd fv166, 0(v168)  ; live: [v168, v10, zero, v8, s11, v9, fv166]
  li v161, 1  ; live: [v10, zero, v8, s11, v9]
  slli v162, v161, 3  ; live: [v10, v161, zero, v8, s11, v9]
  add v163, v8, v162  ; live: [v162, v10, zero, v8, s11, v9]
  ld v19, 0(v163)  ; live: [v10, zero, v8, s11, v9, v163]
  li v156, 4617315517961601024  ; live: [v10, zero, v8, v19, s11, v9]
  fmv.d.x fv157, v156  ; live: [v10, v156, zero, v8, v19, s11, v9]
  li v158, 1  ; live: [fv157, v10, zero, v8, v19, s11, v9]
  slli v159, v158, 3  ; live: [fv157, v10, zero, v158, v8, v19, s11, v9]
  add v160, v19, v159  ; live: [fv157, v10, zero, v159, v8, v19, s11, v9]
  fsd fv157, 0(v160)  ; live: [fv157, v10, zero, v8, s11, v160, v9]
  li v152, 1  ; live: [v10, zero, v8, s11, v9]
  slli v153, v152, 3  ; live: [v10, zero, v8, v152, s11, v9]
  add v154, v8, v153  ; live: [v153, v10, zero, v8, s11, v9]
  ld v21, 0(v154)  ; live: [v10, zero, v8, s11, v154, v9]
  li v147, 4618441417868443648  ; live: [v10, v21, zero, v8, s11, v9]
  fmv.d.x fv148, v147  ; live: [v10, v21, zero, v8, s11, v147, v9]
  li v149, 2  ; live: [v10, v21, zero, v8, fv148, s11, v9]
  slli v150, v149, 3  ; live: [v10, v21, zero, v8, fv148, s11, v9, v149]
  add v151, v21, v150  ; live: [v10, v21, zero, v8, v150, fv148, s11, v9]
  fsd fv148, 0(v151)  ; live: [v10, zero, v8, v151, fv148, s11, v9]
  slli v144, zero, 3  ; live: [v10, zero, v8, s11, v9]
  add v145, v9, v144  ; live: [v10, zero, v8, s11, v9, v144]
  ld v23, 0(v145)  ; live: [v10, zero, v8, s11, v9, v145]
  li v140, 4619567317775286272  ; live: [v10, zero, v23, v8, s11, v9]
  fmv.d.x fv141, v140  ; live: [v10, zero, v23, v8, v140, s11, v9]
  slli v142, zero, 3  ; live: [fv141, v10, zero, v23, v8, s11, v9]
  add v143, v23, v142  ; live: [fv141, v10, v142, zero, v23, v8, s11, v9]
  fsd fv141, 0(v143)  ; live: [fv141, v10, zero, v8, s11, v143, v9]
  slli v137, zero, 3  ; live: [v10, zero, v8, s11, v9]
  add v138, v9, v137  ; live: [v10, zero, v8, s11, v9, v137]
  ld v25, 0(v138)  ; live: [v10, zero, v8, s11, v9, v138]
  li v132, 4620693217682128896  ; live: [v25, v10, zero, v8, s11, v9]
  fmv.d.x fv133, v132  ; live: [v25, v10, zero, v8, s11, v9, v132]
  li v134, 1  ; live: [v25, v10, zero, v8, s11, v9, fv133]
  slli v135, v134, 3  ; live: [v25, v10, zero, v8, v134, s11, v9, fv133]
  add v136, v25, v135  ; live: [v25, v10, zero, v8, s11, v9, fv133, v135]
  fsd fv133, 0(v136)  ; live: [v10, zero, v8, v136, s11, v9, fv133]
  li v128, 1  ; live: [v10, zero, v8, s11, v9]
  slli v129, v128, 3  ; live: [v10, zero, v8, s11, v128, v9]
  add v130, v9, v129  ; live: [v10, zero, v8, s11, v9, v129]
  ld v27, 0(v130)  ; live: [v10, v130, zero, v8, s11, v9]
  li v124, 4621256167635550208  ; live: [v10, zero, v27, v8, s11, v9]
  fmv.d.x fv125, v124  ; live: [v10, v124, zero, v27, v8, s11, v9]
  slli v126, zero, 3  ; live: [v10, zero, v27, fv125, v8, s11, v9]
  add v127, v27, v126  ; live: [v10, zero, v126, v27, fv125, v8, s11, v9]
  fsd fv125, 0(v127)  ; live: [v10, v127, zero, fv125, v8, s11, v9]
  li v120, 1  ; live: [v10, zero, v8, s11, v9]
  slli v121, v120, 3  ; live: [v10, zero, v120, v8, s11, v9]
  add v122, v9, v121  ; live: [v10, v121, zero, v8, s11, v9]
  ld v29, 0(v122)  ; live: [v10, zero, v8, s11, v9, v122]
  li v115, 4621819117588971520  ; live: [v10, zero, v29, v8, s11, v9]
  fmv.d.x fv116, v115  ; live: [v115, v10, zero, v29, v8, s11, v9]
  li v117, 1  ; live: [v10, zero, v29, v8, fv116, s11, v9]
  slli v118, v117, 3  ; live: [v10, zero, v29, v8, fv116, s11, v117, v9]
  add v119, v29, v118  ; live: [v118, v10, zero, v29, v8, fv116, s11, v9]
  fsd fv116, 0(v119)  ; live: [v10, zero, v119, v8, fv116, s11, v9]
  li v111, 2  ; live: [v10, zero, v8, s11, v9]
  slli v112, v111, 3  ; live: [v10, zero, v8, v111, s11, v9]
  add v113, v9, v112  ; live: [v112, v10, zero, v8, s11, v9]
  ld v31, 0(v113)  ; live: [v10, zero, v8, s11, v9, v113]
  li v107, 4622382067542392832  ; live: [v10, zero, v8, s11, v31, v9]
  fmv.d.x fv108, v107  ; live: [v10, zero, v8, v107, s11, v31, v9]
  slli v109, zero, 3  ; live: [fv108, v10, zero, v8, s11, v31, v9]
  add v110, v31, v109  ; live: [v109, fv108, v10, zero, v8, s11, v31, v9]
  fsd fv108, 0(v110)  ; live: [fv108, v10, zero, v110, v8, s11, v9]
  li v103, 2  ; live: [v10, zero, v8, s11, v9]
  slli v104, v103, 3  ; live: [v10, zero, v8, v103, s11, v9]
  add v105, v9, v104  ; live: [v10, zero, v8, v104, s11, v9]
  ld v33, 0(v105)  ; live: [v10, zero, v8, v105, s11, v9]
  li v98, 4622945017495814144  ; live: [v10, zero, v8, s11, v9, v33]
  fmv.d.x fv99, v98  ; live: [v10, zero, v8, s11, v9, v33, v98]
  li v100, 1  ; live: [v10, fv99, zero, v8, s11, v9, v33]
  slli v101, v100, 3  ; live: [v10, fv99, zero, v8, s11, v9, v33, v100]
  add v102, v33, v101  ; live: [v10, fv99, zero, v8, s11, v9, v33, v101]
  fsd fv99, 0(v102)  ; live: [v10, fv99, zero, v8, s11, v102, v9]
  li v94, 2  ; live: [v10, zero, v8, s11, v9]
  mv a0, v94  ; live: [v94, v10, zero, v8, s11, v9]
  li v95, 3  ; live: [v10, zero, a0, v8, s11, v9]
  mv a1, v95  ; live: [v10, zero, a0, v8, v95, s11, v9]
  li v96, 2  ; live: [v10, zero, a0, v8, a1, s11, v9]
  mv a2, v96  ; live: [v10, v96, zero, a0, v8, a1, s11, v9]
  mv a3, v8  ; live: [v10, zero, a0, v8, a2, a1, s11, v9]
  mv a4, v9  ; live: [v10, zero, a0, a2, a1, s11, a3, v9]
  mv a5, v10  ; live: [v10, zero, a0, a4, a2, a1, s11, a3]
  call mul  ; live: [v10, a5, zero, a0, a4, a2, a1, s11, a3]
  mv v35, zero  ; live: [s11, v10, zero]
  slli v91, zero, 3  ; live: [s11, v10, zero]
  add v92, v10, v91  ; live: [v91, s11, v10, zero]
  ld v36, 0(v92)  ; live: [v92, s11, v10, zero]
  slli v88, zero, 3  ; live: [s11, v10, zero, v36]
  add v89, v36, v88  ; live: [v88, s11, v10, zero, v36]
  fld fv37, 0(v89)  ; live: [s11, v10, zero, v89]
  fmv.d fa0, fv37  ; live: [fv37, s11, v10, zero]
  call minimbt_truncate  ; live: [s11, v10, zero, fa0]
  mv v38, a0  ; live: [s11, v10, zero, a0]
  mv a0, v38  ; live: [v38, s11, v10, zero]
  call minimbt_print_int  ; live: [s11, v10, zero, a0]
  mv v39, zero  ; live: [s11, v10, zero]
  call minimbt_print_endline  ; live: [s11, v10, zero]
  mv v40, zero  ; live: [s11, v10, zero]
  slli v82, zero, 3  ; live: [s11, v10, zero]
  add v83, v10, v82  ; live: [v82, s11, v10, zero]
  ld v41, 0(v83)  ; live: [s11, v10, v83, zero]
  li v78, 1  ; live: [v41, s11, v10, zero]
  slli v79, v78, 3  ; live: [v41, s11, v10, zero, v78]
  add v80, v41, v79  ; live: [v41, s11, v10, zero, v79]
  fld fv42, 0(v80)  ; live: [v80, s11, v10, zero]
  fmv.d fa0, fv42  ; live: [s11, v10, zero, fv42]
  call minimbt_truncate  ; live: [s11, v10, zero, fa0]
  mv v43, a0  ; live: [s11, v10, zero, a0]
  mv a0, v43  ; live: [v43, s11, v10, zero]
  call minimbt_print_int  ; live: [s11, v10, zero, a0]
  mv v44, zero  ; live: [s11, v10, zero]
  call minimbt_print_endline  ; live: [s11, v10, zero]
  mv v45, zero  ; live: [s11, v10, zero]
  li v71, 1  ; live: [s11, v10, zero]
  slli v72, v71, 3  ; live: [v71, s11, v10, zero]
  add v73, v10, v72  ; live: [v72, s11, v10, zero]
  ld v46, 0(v73)  ; live: [s11, v10, zero, v73]
  slli v68, zero, 3  ; live: [v46, s11, v10, zero]
  add v69, v46, v68  ; live: [v46, s11, v10, zero, v68]
  fld fv47, 0(v69)  ; live: [v69, s11, v10, zero]
  fmv.d fa0, fv47  ; live: [s11, v10, fv47, zero]
  call minimbt_truncate  ; live: [s11, v10, zero, fa0]
  mv v48, a0  ; live: [s11, v10, zero, a0]
  mv a0, v48  ; live: [s11, v10, v48, zero]
  call minimbt_print_int  ; live: [s11, v10, zero, a0]
  mv v49, zero  ; live: [s11, v10, zero]
  call minimbt_print_endline  ; live: [s11, v10, zero]
  mv v50, zero  ; live: [s11, v10, zero]
  li v61, 1  ; live: [s11, v10, zero]
  slli v62, v61, 3  ; live: [s11, v10, v61, zero]
  add v63, v10, v62  ; live: [v62, s11, v10, zero]
  ld v51, 0(v63)  ; live: [v63, s11, zero]
  li v57, 1  ; live: [s11, zero, v51]
  slli v58, v57, 3  ; live: [s11, v57, zero, v51]
  add v59, v51, v58  ; live: [v58, s11, zero, v51]
  fld fv52, 0(v59)  ; live: [v59, s11, zero]
  fmv.d fa0, fv52  ; live: [fv52, s11, zero]
  call minimbt_truncate  ; live: [s11, zero, fa0]
  mv v53, a0  ; live: [s11, zero, a0]
  mv a0, v53  ; live: [s11, v53, zero]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v54, zero  ; live: [s11, zero]
; control
  mv a0, zero  ; live: [s11, zero]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl init_arr
  .type init_arr, @function
init_arr:
; block info: defs: [v3, v4, v6, v22, v2], uses: [a0, zero, v22, a2, a1, v6, v2], upward_exposed: [a2, a1, a0, zero], params_defs: []
; live_in: [a0, zero, v0, a2, a1, s11], live_out: [v2, zero, v0, v4, s11, v3]
; block parameters: []
.init_arr_b0:
  mv v2, a0  ; live: [a0, zero, v0, a2, a1, s11]
  mv v3, a1  ; live: [a0, zero, v0, a2, a1, s11, v2]
  mv v4, a2  ; live: [a0, zero, v0, a2, a1, s11, v2]
  slt v22, zero, v2  ; live: [a0, zero, v0, a2, a1, s11, v2]
  xori v6, v22, 1  ; live: [a0, zero, v22, v0, a2, a1, s11]
; control
  bne v6, zero, .init_arr_b1  ; live: [a0, zero, v0, a2, a1, v6, s11]
  j .init_arr_b2  ; live: [v0, a2, a1, s11, a0, zero]

; block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
; live_in: [v11], live_out: []
; block parameters: [v11]
.init_arr_b3:
; control
  mv a0, v11  ; live: [v11]
  ret  ; live: [v11, a0]

; block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v11]
; block parameters: []
.init_arr_b2:
; control
  mv v11, zero  ; live: [zero]
  j .init_arr_b3  ; live: [zero]

; block info: defs: [t1, v16, v14, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, a6, v19, ft5, ft10, fv21, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v3, v5, v16, v14, v10, a0, v0, a2, a1, v17, s11, v9, v18, zero, fa0, v19, v4, fv21, v2], upward_exposed: [v3, zero, v0, v4, s11, v2], params_defs: []
; live_in: [v3, zero, v0, v4, s11, v2], live_out: [v11]
; block parameters: []
.init_arr_b1:
  slli v18, v3, 3  ; live: [v3, zero, v0, v4, s11, v2]
  sub v19, s11, v18  ; live: [v3, v18, zero, v0, v4, s11, v2]
  andi v5, v19, -8  ; live: [v3, zero, v0, v19, v4, s11, v2]
  fmv.d.x fv21, zero  ; live: [v3, v5, zero, v0, v4, s11, v2]
  mv a1, v3  ; live: [v3, v5, zero, v0, v4, s11, fv21, v2]
  mv a0, v5  ; live: [v3, v5, zero, v0, v4, a1, s11, fv21, v2]
  fmv.d fa0, fv21  ; live: [v3, v5, zero, a0, v0, v4, a1, s11, fv21, v2]
  call _memsetf64  ; live: [v3, v5, zero, a0, fa0, v0, v4, a1, s11, v2]
  slli v16, v2, 3  ; live: [v3, v5, zero, v0, v4, s11, v2]
  add v17, v4, v16  ; live: [v3, v5, v16, zero, v0, v4, s11, v2]
  sd v5, 0(v17)  ; live: [v3, v5, zero, v0, v4, v17, s11, v2]
  li v14, 1  ; live: [v3, zero, v0, v4, s11, v2]
  sub v9, v2, v14  ; live: [v3, v14, zero, v0, v4, s11, v2]
  mv s10, v0  ; live: [v3, zero, v0, v4, s11, v9, v2]
  ld v12, 0(v0)  ; live: [v3, zero, v0, v4, s11, v9, v2]
  mv a0, v9  ; live: [v3, zero, v0, v4, s11, v9, v2]
  mv a1, v3  ; live: [v3, zero, a0, v0, v4, s11, v2]
  mv a2, v4  ; live: [v3, zero, a0, v0, v4, a1, s11, v2]
  jalr v12  ; live: [v3, zero, a0, v0, v4, a2, a1, s11, v2]
  mv v10, zero  ; live: [v3, zero, v0, v4, s11, v2]
; control
  mv v11, v10  ; live: [v3, v10, zero, v0, v4, s11, v2]
  j .init_arr_b3  ; live: [v2, v0, v4, s11, zero, v3]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl mul
  .type mul, @function
mul:
; block info: defs: [v2, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, v5, a5, a0, v7, a2, a1, a3, zero, a4, v8, v4, v6, v3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: []
; block parameters: []
.mul_b0:
  mv v2, a0  ; live: [a5, zero, a0, a4, a2, a1, a3]
  mv v3, a1  ; live: [a5, zero, a4, a2, a1, a3, v2]
  mv v4, a2  ; live: [v2, a5, zero, a4, a2, a3, v3]
  mv v5, a3  ; live: [v2, a5, zero, a4, v4, a3, v3]
  mv v6, a4  ; live: [v2, v5, a5, zero, a4, v4, v3]
  mv v7, a5  ; live: [v2, v5, a5, zero, v4, v6, v3]
  li v11, 1  ; live: [v2, v5, zero, v7, v4, v6, v3]
  sub v8, v2, v11  ; live: [v2, v11, v5, zero, v7, v4, v6, v3]
  mv a0, v8  ; live: [v5, zero, v7, v8, v4, v6, v3]
  mv a1, v3  ; live: [v5, zero, a0, v7, v4, v6, v3]
  mv a2, v4  ; live: [v5, zero, a0, v7, v4, a1, v6]
  mv a3, v5  ; live: [v5, zero, a0, v7, a2, a1, v6]
  mv a4, v6  ; live: [zero, a0, v7, a2, a1, v6, a3]
  mv a5, v7  ; live: [zero, a0, a4, v7, a2, a1, a3]
  call loop1  ; live: [a5, zero, a0, a4, a2, a1, a3]
  mv v9, zero  ; live: [a5, zero, a4, a2, a1, a3]
; control
  mv a0, zero  ; live: [a5, zero, a4, a2, a1, a3]
  ret  ; live: [a5, a0, zero, a4, a2, a1, a3]

  .p2align 3
  .globl loop3
  .type loop3, @function
loop3:
; block info: defs: [v2, v5, v50, v7, v8, v4, v6, v3], uses: [a5, a0, zero, a4, v50, v8, v4, a2, a1, a3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v2, v5, zero, v7, v4, v6, v3]
; block parameters: []
.loop3_b0:
  mv v2, a0  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v3, a1  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v4, a2  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v5, a3  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  mv v6, a4  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  mv v7, a5  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  slt v50, zero, v4  ; live: [a5, a0, zero, a4, a2, v4, a1, a3]
  xori v8, v50, 1  ; live: [a5, a0, zero, a4, v50, a2, a1, a3]
; control
  bne v8, zero, .loop3_b1  ; live: [a5, a0, zero, a4, v8, a2, a1, a3]
  j .loop3_b2  ; live: [a5, a0, zero, a4, a2, a1, a3]

; block info: defs: [a1, v44, t5, fv15, v33, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft4, v10, ft9, fa4, ft2, a3, a7, fa7, v48, fa3, fv11, ft3, v45, t2, fv17, v25, t1, v14, v42, v26, v41, v32, ft0, ft1, v12, fv16, v29, v19, v47, ft7, v21, a5, a0, v30, v36, a2, v9, v39, ft8, t3, t0, fa5, v23, fv13, v35, fa0, v38, t4], uses: [v3, v25, v14, v42, v26, v7, v41, v32, a1, v12, fv15, fv16, v44, v33, v29, zero, a4, v20, v19, v47, v4, v6, v5, v10, a5, a0, v30, v36, a2, a3, v9, v39, v48, fv11, v23, v45, v35, fv13, v38, fv17, v2], upward_exposed: [v2, v5, zero, v7, v4, v6, v3], params_defs: []
; live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v21]
; block parameters: []
.loop3_b1:
  slli v47, v2, 3  ; live: [v2, v5, zero, v7, v4, v6, v3]
  add v48, v7, v47  ; live: [v2, v5, zero, v7, v4, v47, v6, v3]
  ld v9, 0(v48)  ; live: [v2, v5, v48, zero, v7, v4, v6, v3]
  slli v44, v2, 3  ; live: [v2, v5, zero, v7, v4, v6, v9, v3]
  add v45, v7, v44  ; live: [v2, v5, zero, v7, v4, v6, v44, v9, v3]
  ld v10, 0(v45)  ; live: [v2, v5, zero, v7, v45, v4, v6, v9, v3]
  slli v41, v3, 3  ; live: [v2, v5, v10, zero, v7, v4, v6, v9, v3]
  add v42, v10, v41  ; live: [v2, v5, v10, zero, v7, v4, v41, v6, v9, v3]
  fld fv11, 0(v42)  ; live: [v2, v5, zero, v42, v7, v4, v6, v9, v3]
  slli v38, v2, 3  ; live: [v2, v5, zero, fv11, v7, v4, v6, v9, v3]
  add v39, v5, v38  ; live: [v2, v5, zero, fv11, v7, v4, v38, v6, v9, v3]
  ld v12, 0(v39)  ; live: [v2, v5, zero, fv11, v7, v4, v6, v9, v39, v3]
  slli v35, v4, 3  ; live: [v2, v5, zero, fv11, v7, v4, v6, v12, v9, v3]
  add v36, v12, v35  ; live: [v2, v5, zero, fv11, v7, v35, v4, v6, v12, v9, v3]
  fld fv13, 0(v36)  ; live: [v2, v5, zero, fv11, v7, v36, v4, v6, v9, v3]
  slli v32, v4, 3  ; live: [v2, v5, zero, fv11, v7, fv13, v4, v6, v9, v3]
  add v33, v6, v32  ; live: [v2, v5, zero, fv11, v7, fv13, v4, v32, v6, v9, v3]
  ld v14, 0(v33)  ; live: [v2, v5, zero, fv11, v7, fv13, v4, v6, v9, v33, v3]
  slli v29, v3, 3  ; live: [v2, v5, v14, zero, fv11, v7, fv13, v4, v6, v9, v3]
  add v30, v14, v29  ; live: [v2, v5, v14, zero, fv11, v29, v7, fv13, v4, v6, v9, v3]
  fld fv15, 0(v30)  ; live: [v2, v5, zero, fv11, v30, fv13, v7, v4, v6, v9, v3]
  fmul.d fv16, fv13, fv15  ; live: [v2, v5, zero, fv11, v7, fv13, v4, v6, fv15, v9, v3]
  fadd.d fv17, fv11, fv16  ; live: [v2, v5, zero, fv11, v7, v4, v6, fv16, v9, v3]
  slli v25, v3, 3  ; live: [v2, v5, zero, v7, v4, v6, fv17, v9, v3]
  add v26, v9, v25  ; live: [v2, v25, v5, zero, v7, v4, v6, fv17, v9, v3]
  fsd fv17, 0(v26)  ; live: [v2, v5, zero, v26, v7, v4, v6, fv17, v3]
  li v23, 1  ; live: [v2, v5, zero, v7, v4, v6, v3]
  sub v19, v4, v23  ; live: [v2, v5, zero, v23, v7, v4, v6, v3]
  mv a0, v2  ; live: [v2, v5, zero, v7, v19, v4, v6, v3]
  mv a1, v3  ; live: [v2, v5, zero, a0, v7, v19, v4, v6, v3]
  mv a2, v19  ; live: [v2, v5, zero, a0, v7, v19, v4, a1, v6, v3]
  mv a3, v5  ; live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
  mv a4, v6  ; live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, a3, v3]
  mv a5, v7  ; live: [v2, v5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v3]
  call loop3  ; live: [v2, v5, a5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v3]
  mv v20, zero  ; live: [v2, v5, zero, v7, v4, v6, v3]
; control
  mv v21, v20  ; live: [v2, v5, zero, v20, v7, v4, v6, v3]
  j .loop3_b3  ; live: [v2, v5, zero, v7, v4, v6, v3]

; block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v21]
; block parameters: []
.loop3_b2:
; control
  mv v21, zero  ; live: [zero]
  j .loop3_b3  ; live: [zero]

; block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
; live_in: [v21], live_out: []
; block parameters: [v21]
.loop3_b3:
; control
  mv a0, v21  ; live: [v21]
  ret  ; live: [v21, a0]

  .p2align 3
  .globl loop1
  .type loop1, @function
loop1:
; block info: defs: [v2, v5, v20, v7, v8, v4, v6, v3], uses: [a5, a0, zero, a4, v20, v8, a2, a1, a3, v2], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v2, v5, zero, v7, v4, v6, v3]
; block parameters: []
.loop1_b0:
  mv v2, a0  ; live: [a5, a0, zero, a4, a2, a1, a3]
  mv v3, a1  ; live: [a5, a0, zero, a4, a2, a1, a3, v2]
  mv v4, a2  ; live: [a5, a0, zero, a4, a2, a1, a3, v2]
  mv v5, a3  ; live: [a5, a0, zero, a4, a2, a1, a3, v2]
  mv v6, a4  ; live: [a5, a0, zero, a4, a2, a1, a3, v2]
  mv v7, a5  ; live: [a5, a0, zero, a4, a2, a1, a3, v2]
  slt v20, zero, v2  ; live: [a5, a0, zero, a4, a2, a1, a3, v2]
  xori v8, v20, 1  ; live: [a5, a0, zero, a4, v20, a2, a1, a3]
; control
  bne v8, zero, .loop1_b1  ; live: [a5, a0, zero, a4, v8, a2, a1, a3]
  j .loop1_b2  ; live: [a5, a0, zero, a4, a2, a1, a3]

; block info: defs: [t1, v13, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v11, v5, a5, a0, v7, a2, a1, a3, v12, v9, v18, zero, a4, v4, v6, v15, v2], upward_exposed: [v2, v5, zero, v7, v4, v6, v3], params_defs: []
; live_in: [v3, v5, zero, v7, v4, v6, v2], live_out: [v13]
; block parameters: []
.loop1_b1:
  li v18, 1  ; live: [v2, v5, zero, v7, v4, v6, v3]
  sub v9, v4, v18  ; live: [v2, v5, v18, zero, v7, v4, v6, v3]
  mv a0, v2  ; live: [v2, v5, zero, v7, v4, v6, v9, v3]
  mv a1, v3  ; live: [v2, v5, zero, a0, v7, v4, v6, v9, v3]
  mv a2, v9  ; live: [v2, v5, zero, a0, v7, v4, a1, v6, v9, v3]
  mv a3, v5  ; live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
  mv a4, v6  ; live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, a3, v3]
  mv a5, v7  ; live: [v2, v5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v3]
  call loop2  ; live: [v2, v5, a5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v3]
  mv v10, zero  ; live: [v2, v5, zero, v7, v4, v6, v3]
  li v15, 1  ; live: [v2, v5, zero, v7, v4, v6, v3]
  sub v11, v2, v15  ; live: [v2, v5, zero, v7, v4, v6, v15, v3]
  mv a0, v11  ; live: [v2, v11, v5, zero, v7, v4, v6, v3]
  mv a1, v3  ; live: [v2, v5, zero, a0, v7, v4, v6, v3]
  mv a2, v4  ; live: [v2, v5, zero, a0, v7, v4, a1, v6, v3]
  mv a3, v5  ; live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, v3]
  mv a4, v6  ; live: [v2, v5, zero, a0, v7, v4, a2, a1, v6, a3, v3]
  mv a5, v7  ; live: [v2, v5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v3]
  call loop1  ; live: [v2, v5, a5, zero, a0, a4, v7, v4, a2, a1, v6, a3, v3]
  mv v12, zero  ; live: [v2, v5, zero, v7, v4, v6, v3]
; control
  mv v13, v12  ; live: [v2, v5, zero, v7, v4, v6, v12, v3]
  j .loop1_b3  ; live: [v2, v5, zero, v7, v4, v6, v3]

; block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v13]
; block parameters: []
.loop1_b2:
; control
  mv v13, zero  ; live: [zero]
  j .loop1_b3  ; live: [zero]

; block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
; live_in: [v13], live_out: []
; block parameters: [v13]
.loop1_b3:
; control
  mv a0, v13  ; live: [v13]
  ret  ; live: [v13, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/matmul.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn loop2 #f2 : closure(int32) -> unit
.freevars (array[array[double]], int32, array[array[double]], array[array[double]], int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f3, [1] = ^1, [2] = ^2, [3] = $f0, [4] = ^3, [5] = ^4
    let %2: int32 = sub(^5, 1)
    let %3: unit = apply f2.m0(%2)
    let %4: int32 = sub($f0, 1)
    let %5: unit = apply self(%4)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn init_arr #f6 : closure(int32) -> unit
.freevars (int32, array[array[double]])
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap(^1)> <- [..] = 0
    let _ = store array[double] offset(^2, $f0) <- f6.m0
    let %3: int32 = sub($f0, 1)
    let %4: unit = apply self(%3)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn thunk_start #f7 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn loop3 #f3 : closure(int32) -> unit
.freevars (array[array[double]], int32, int32, array[array[double]], array[array[double]])
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: array[double] = load array[double] offset(^1, ^2)
    let %2: array[double] = load array[double] offset(^1, ^2)
    let %3: double = load double offset(%2, ^3)
    let %4: array[double] = load array[double] offset(^4, ^2)
    let %5: double = load double offset(%4, $f0)
    let %6: array[double] = load array[double] offset(^5, $f0)
    let %7: double = load double offset(%6, ^3)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, ^3) <- %9
    let %11: int32 = sub($f0, 1)
    let %12: unit = apply self(%11)
    jump b3(%12)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop1 #f1 : closure(int32) -> unit
.freevars (array[array[double]], array[array[double]], array[array[double]], int32, int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f2, [1] = ^1, [2] = $f0, [3] = ^2, [4] = ^3, [5] = ^4
    let %2: int32 = sub(^5, 1)
    let %3: unit = apply f1.m0(%2)
    let %4: int32 = sub($f0, 1)
    let %5: unit = apply self(%4)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn matmul #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f1, [1] = $f5, [2] = $f3, [3] = $f4, [4] = $f1, [5] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: unit = apply f0.m0(%1)
    return %2
  }
}
.fn gen_arr #f5 : closure(int32, int32) -> array[array[double]]
.freevars (array[double])
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = ^1
    let _ = alloc <m1: closure(int32) -> unit heap(3)> <- [0] = f6, [1] = $f1, [2] = f5.m0
    let %2: int32 = sub($f0, 1)
    let %3: unit = apply f5.m1(%2)
    return f5.m0
  }
}
.fn main #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let _ = alloc <m1: closure(int32, int32) -> array[array[double]] heap(2)> <- [0] = f5, [1] = f4.m0
    let %2: array[array[double]] = apply f4.m1(2, 3)
    let %3: array[array[double]] = apply f4.m1(3, 2)
    let %4: array[array[double]] = apply f4.m1(2, 2)
    let %5: array[double] = load array[double] offset(%2, 0)
    let _ = store double offset(%5, 0) <- 1
    let %7: array[double] = load array[double] offset(%2, 0)
    let _ = store double offset(%7, 1) <- 2
    let %9: array[double] = load array[double] offset(%2, 0)
    let _ = store double offset(%9, 2) <- 3
    let %11: array[double] = load array[double] offset(%2, 1)
    let _ = store double offset(%11, 0) <- 4
    let %13: array[double] = load array[double] offset(%2, 1)
    let _ = store double offset(%13, 1) <- 5
    let %15: array[double] = load array[double] offset(%2, 1)
    let _ = store double offset(%15, 2) <- 6
    let %17: array[double] = load array[double] offset(%3, 0)
    let _ = store double offset(%17, 0) <- 7
    let %19: array[double] = load array[double] offset(%3, 0)
    let _ = store double offset(%19, 1) <- 8
    let %21: array[double] = load array[double] offset(%3, 1)
    let _ = store double offset(%21, 0) <- 9
    let %23: array[double] = load array[double] offset(%3, 1)
    let _ = store double offset(%23, 1) <- 10
    let %25: array[double] = load array[double] offset(%3, 2)
    let _ = store double offset(%25, 0) <- 11
    let %27: array[double] = load array[double] offset(%3, 2)
    let _ = store double offset(%27, 1) <- 12
    let %29: unit = call f0(2, 3, 2, %2, %3, %4)
    let %30: array[double] = load array[double] offset(%4, 0)
    let %31: double = load double offset(%30, 0)
    let %32: int32 = ext_call minimbt_truncate(%31)
    let %33: unit = ext_call minimbt_print_int(%32)
    let %34: unit = ext_call minimbt_print_endline()
    let %35: array[double] = load array[double] offset(%4, 0)
    let %36: double = load double offset(%35, 1)
    let %37: int32 = ext_call minimbt_truncate(%36)
    let %38: unit = ext_call minimbt_print_int(%37)
    let %39: unit = ext_call minimbt_print_endline()
    let %40: array[double] = load array[double] offset(%4, 1)
    let %41: double = load double offset(%40, 0)
    let %42: int32 = ext_call minimbt_truncate(%41)
    let %43: unit = ext_call minimbt_print_int(%42)
    let %44: unit = ext_call minimbt_print_endline()
    let %45: array[double] = load array[double] offset(%4, 1)
    let %46: double = load double offset(%45, 1)
    let %47: int32 = ext_call minimbt_truncate(%46)
    let %48: unit = ext_call minimbt_print_int(%47)
    return ()
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of loop2"];
  r0 [label="a0", color=blue];
  r20 [label="v14 ← a0", color=green];
  r3 [label="v0 ← a0", color=green];
  r9 [label="v5 ← a3", color=green];
  r6 [label="v9 ← a1", color=green];
  r13 [label="v24 ← a1", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="zero", color=blue];
  r11 [label="v4 ← a1", color=green];
  r7 [label="v15 ← a1", color=green];
  r10 [label="v7 ← a2", color=green];
  r14 [label="v8 ← a2", color=green];
  r8 [label="v3 ← a4", color=green];
  r5 [label="v27 ← a1", color=green];
  r15 [label="v26 ← a3", color=green];
  r2 [label="s10", color=blue];
  r16 [label="v22 ← a3", color=green];
  r18 [label="v18 ← a3", color=green];
  r19 [label="v13 ← a3", color=green];
  r17 [label="v11 ← a3", color=green];
  r12 [label="v6 ← a0", color=green];
  r1 -- r12;
  r3 -- r15;
  r14 -- r16;
  r3 -- r16;
  r11 -- r14;
  r1 -- r4;
  r1 -- r18;
  r1 -- r19;
  r1 -- r10;
  r10 -- r13;
  r10 -- r19;
  r3 -- r9;
  r3 -- r11;
  r1 -- r17;
  r1 -- r20;
  r9 -- r17;
  r11 -- r18;
  r1 -- r16;
  r3 -- r18;
  r12 -- r19;
  r11 -- r19;
  r9 -- r18;
  r8 -- r12;
  r0 -- r6;
  r9 -- r14;
  r3 -- r8;
  r1 -- r9;
  r2 -- r6;
  r10 -- r20;
  r8 -- r17;
  r3 -- r4;
  r8 -- r16;
  r11 -- r13;
  r10 -- r18;
  r0 -- r2;
  r10 -- r12;
  r0 -- r9;
  r3 -- r13;
  r9 -- r12;
  r3 -- r10;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r9 -- r20;
  r0 -- r10;
  r1 -- r11;
  r3 -- r17;
  r4 -- r8;
  r9 -- r10;
  r11 -- r15;
  r0 -- r11;
  r8 -- r11;
  r1 -- r6;
  r1 -- r5;
  r0 -- r4;
  r8 -- r14;
  r4 -- r14;
  r14 -- r15;
  r4 -- r9;
  r10 -- r17;
  r4 -- r13;
  r3 -- r19;
  r4 -- r16;
  r11 -- r20;
  r14 -- r17;
  r11 -- r17;
  r1 -- r8;
  r2 -- r4;
  r9 -- r15;
  r12 -- r15;
  r8 -- r19;
  r8 -- r9;
  r11 -- r16;
  r3 -- r12;
  r11 -- r12;
  r1 -- r15;
  r1 -- r13;
  r4 -- r20;
  r4 -- r18;
  r8 -- r20;
  r10 -- r16;
  r12 -- r20;
  r9 -- r11;
  r4 -- r15;
  r4 -- r11;
  r12 -- r13;
  r8 -- r13;
  r8 -- r15;
  r0 -- r3;
  r0 -- r8;
  r10 -- r15;
  r8 -- r18;
  r10 -- r11;
  r3 -- r20;
  r0 -- r5;
  r3 -- r14;
  r8 -- r10;
  r9 -- r16;
  r0 -- r12;
  r12 -- r16;
  r12 -- r14;
  r4 -- r17;
  r9 -- r19;
  r12 -- r17;
  r4 -- r10;
  r1 -- r14;
  r1 -- r3;
  r0 -- r7;
  r9 -- r13;
  r2 -- r3;
  r12 -- r18;
  r4 -- r19;
  r10 -- r14;
  comment = "20:v14-> 1:zero-> 3:v0-> 12:v6-> 4:v2-> 11:v4-> 10:v7-> 18:v18-> 17:v11-> 9:v5-> 16:v22-> 14:v8-> 13:v24-> 2:s10-> 0:a0-> 8:v3-> 7:v15-> 6:v9-> 5:v27-> 19:v13-> 15:v26"
  comment = "v14<-a0;v0<-a0;v5<-a3;v9<-a1;v24<-a1;v2<-a0;v4<-a1;v15<-a1;v7<-a2;v8<-a2;v3<-a4;v27<-a1;v26<-a3;v22<-a3;v18<-a3;v13<-a3;v11<-a3;v6<-a0;"
}

graph G {
  graph [label="float interference graph of loop2"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of matmul"];
  r0 [label="a5", color=blue];
  r3 [label="a4", color=blue];
  r9 [label="v4 ← a1", color=green];
  r6 [label="a3", color=blue];
  r13 [label="v16 ← a3", color=green];
  r4 [label="a2", color=blue];
  r1 [label="zero", color=blue];
  r11 [label="v6 ← a1", color=green];
  r7 [label="v2 ← a0", color=green];
  r10 [label="v5 ← a2", color=green];
  r14 [label="v8 ← a0", color=green];
  r8 [label="v3 ← a2", color=green];
  r5 [label="a1", color=blue];
  r15 [label="v18 ← a1", color=green];
  r2 [label="a0", color=blue];
  r16 [label="v14 ← a0", color=green];
  r18 [label="v11 ← a0", color=green];
  r17 [label="v10 ← a0", color=green];
  r12 [label="v7 ← a2", color=green];
  r6 -- r7;
  r6 -- r9;
  r1 -- r12;
  r4 -- r5;
  r14 -- r17;
  r14 -- r16;
  r1 -- r8;
  r2 -- r4;
  r9 -- r15;
  r1 -- r4;
  r3 -- r6;
  r11 -- r14;
  r12 -- r15;
  r1 -- r7;
  r8 -- r9;
  r1 -- r18;
  r1 -- r10;
  r5 -- r18;
  r7 -- r13;
  r10 -- r13;
  r3 -- r9;
  r11 -- r12;
  r1 -- r15;
  r1 -- r13;
  r1 -- r17;
  r4 -- r18;
  r1 -- r16;
  r7 -- r9;
  r3 -- r18;
  r3 -- r5;
  r8 -- r12;
  r6 -- r8;
  r0 -- r6;
  r9 -- r14;
  r3 -- r8;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r3 -- r4;
  r12 -- r13;
  r8 -- r13;
  r11 -- r13;
  r0 -- r2;
  r0 -- r3;
  r10 -- r12;
  r8 -- r15;
  r0 -- r8;
  r0 -- r9;
  r7 -- r15;
  r6 -- r18;
  r7 -- r10;
  r9 -- r12;
  r10 -- r15;
  r10 -- r11;
  r7 -- r11;
  r3 -- r10;
  r0 -- r5;
  r1 -- r2;
  r2 -- r5;
  r0 -- r1;
  r8 -- r10;
  r4 -- r7;
  r0 -- r10;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r11 -- r15;
  r0 -- r11;
  r8 -- r11;
  r12 -- r14;
  r1 -- r6;
  r3 -- r7;
  r7 -- r16;
  r1 -- r5;
  r0 -- r4;
  r8 -- r14;
  r1 -- r14;
  r4 -- r6;
  r1 -- r3;
  r7 -- r8;
  r0 -- r7;
  r7 -- r12;
  r9 -- r13;
  r2 -- r3;
  r7 -- r14;
  r14 -- r15;
  r0 -- r18;
  r10 -- r14;
  comment = "18:v11-> 1:zero-> 5:a1-> 6:a3-> 4:a2-> 3:a4-> 0:a5-> 2:a0-> 16:v14-> 14:v8-> 7:v2-> 15:v18-> 11:v6-> 9:v4-> 12:v7-> 10:v5-> 17:v10-> 8:v3-> 13:v16"
  comment = "v4<-a1;v16<-a3;v6<-a1;v2<-a0;v5<-a2;v8<-a0;v3<-a2;v18<-a1;v14<-a0;v11<-a0;v10<-a0;v7<-a2;"
}

graph G {
  graph [label="float interference graph of matmul"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of gen_arr"];
  r0 [label="zero", color=blue];
  r3 [label="s10", color=blue];
  r9 [label="v19 ← a1", color=green];
  r6 [label="v3 ← a0", color=green];
  r13 [label="v6 ← a1", color=green];
  r4 [label="v0 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="a2", color=blue];
  r7 [label="v4 ← a2", color=green];
  r10 [label="v5 ← a0", color=green];
  r14 [label="v17 ← a0", color=green];
  r8 [label="v18 ← a1", color=green];
  r5 [label="v2 ← a0", color=green];
  r15 [label="v13 ← a0", color=green];
  r2 [label="a1", color=blue];
  r16 [label="v9 ← a0", color=green];
  r12 [label="v15 ← a1", color=green];
  r6 -- r7;
  r6 -- r9;
  r0 -- r15;
  r0 -- r13;
  r6 -- r11;
  r13 -- r15;
  r4 -- r5;
  r2 -- r4;
  r5 -- r8;
  r3 -- r16;
  r5 -- r10;
  r6 -- r14;
  r1 -- r4;
  r1 -- r7;
  r5 -- r13;
  r1 -- r10;
  r10 -- r13;
  r0 -- r14;
  r2 -- r10;
  r13 -- r16;
  r2 -- r7;
  r2 -- r11;
  r7 -- r9;
  r5 -- r11;
  r6 -- r12;
  r0 -- r16;
  r10 -- r16;
  r6 -- r8;
  r0 -- r6;
  r6 -- r13;
  r2 -- r6;
  r5 -- r6;
  r0 -- r2;
  r5 -- r9;
  r0 -- r3;
  r10 -- r12;
  r0 -- r8;
  r0 -- r9;
  r3 -- r13;
  r7 -- r10;
  r6 -- r10;
  r10 -- r15;
  r13 -- r14;
  r10 -- r11;
  r0 -- r5;
  r3 -- r10;
  r1 -- r2;
  r2 -- r5;
  r0 -- r1;
  r0 -- r10;
  r1 -- r11;
  r5 -- r7;
  r0 -- r12;
  r5 -- r14;
  r0 -- r11;
  r1 -- r6;
  r1 -- r5;
  r0 -- r4;
  r4 -- r6;
  r7 -- r8;
  r1 -- r3;
  r0 -- r7;
  r2 -- r3;
  r5 -- r15;
  r5 -- r12;
  r10 -- r14;
  comment = "16:v9-> 15:v13-> 5:v2-> 14:v17-> 6:v3-> 13:v6-> 3:s10-> 0:zero-> 1:a0-> 12:v15-> 11:a2-> 2:a1-> 10:v5-> 9:v19-> 7:v4-> 8:v18-> 4:v0"
  comment = "v19<-a1;v3<-a0;v6<-a1;v0<-a1;v4<-a2;v5<-a0;v17<-a0;v18<-a1;v2<-a0;v13<-a0;v9<-a0;v15<-a1;"
}

graph G {
  graph [label="float interference graph of gen_arr"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r9 [label="a1", color=blue];
  r26 [label="v11 ← a1", color=green];
  r118 [label="a2", color=blue];
  r44 [label="v163 ← a0", color=green];
  r56 [label="v158 ← a1", color=green];
  r10 [label="v6 ← a0", color=green];
  r111 [label="fv97 ← a0", color=green];
  r54 [label="v156 ← a1", color=green];
  r24 [label="v184 ← a1", color=green];
  r126 [label="v87 ← a1", color=green];
  r119 [label="a3", color=blue];
  r80 [label="v134 ← a1", color=green];
  r88 [label="v125 ← a1", color=green];
  r142 [label="v66 ← a1", color=green];
  r39 [label="v175 ← a1", color=green];
  r154 [label="v51 ← a0", color=green];
  r65 [label="v149 ← a0", color=green];
  r152 [label="v57 ← a0", color=green];
  r79 [label="v133 ← a0", color=green];
  r128 [label="fa0", color=blue];
  r113 [label="v99 ← a1", color=green];
  r67 [label="v143 ← a0", color=green];
  r77 [label="fv131 ← a0", color=green];
  r151 [label="v56 ← a0", color=green];
  r11 [label="v199 ← a1", color=green];
  r58 [label="v151 ← a1", color=green];
  r105 [label="v108 ← a0", color=green];
  r148 [label="v61 ← a0", color=green];
  r14 [label="v195 ← a0", color=green];
  r78 [label="v132 ← a0", color=green];
  r140 [label="v71 ← a1", color=green];
  r16 [label="v8 ← a0", color=green];
  r21 [label="fv188 ← a0", color=green];
  r60 [label="v19 ← a1", color=green];
  r73 [label="v135 ← a0", color=green];
  r93 [label="v113 ← a0", color=green];
  r38 [label="v174 ← a2", color=green];
  r145 [label="v46 ← a1", color=green];
  r122 [label="v89 ← a1", color=green];
  r87 [label="v124 ← a1", color=green];
  r95 [label="v115 ← a2", color=green];
  r7 [label="a0", color=blue];
  r144 [label="fv45 ← a0", color=green];
  r64 [label="v148 ← a1", color=green];
  r66 [label="v142 ← a1", color=green];
  r115 [label="v92 ← a1", color=green];
  r130 [label="v80 ← a1", color=green];
  r147 [label="v60 ← a1", color=green];
  r138 [label="v69 ← a1", color=green];
  r70 [label="fv139 ← a0", color=green];
  r48 [label="v159 ← a1", color=green];
  r37 [label="v173 ← a0", color=green];
  r102 [label="v105 ← a1", color=green];
  r123 [label="v90 ← a1", color=green];
  r125 [label="v86 ← a1", color=green];
  r71 [label="v140 ← a0", color=green];
  r22 [label="v189 ← a0", color=green];
  r84 [label="v25 ← a2", color=green];
  r45 [label="fv164 ← a0", color=green];
  r92 [label="v27 ← a1", color=green];
  r107 [label="v102 ← a0", color=green];
  r63 [label="v147 ← a0", color=green];
  r2 [label="v2 ← a1", color=green];
  r18 [label="v192 ← a0", color=green];
  r137 [label="v41 ← a1", color=green];
  r19 [label="v9 ← a0", color=green];
  r139 [label="v70 ← a1", color=green];
  r121 [label="a5", color=blue];
  r97 [label="v117 ← a0", color=green];
  r90 [label="v119 ← a1", color=green];
  r81 [label="v126 ← a1", color=green];
  r101 [label="v29 ← a2", color=green];
  r94 [label="fv114 ← a0", color=green];
  r46 [label="v165 ← a1", color=green];
  r120 [label="a4", color=blue];
  r33 [label="v177 ← a0", color=green];
  r59 [label="v152 ← a1", color=green];
  r76 [label="v130 ← a1", color=green];
  r86 [label="fv123 ← a0", color=green];
  r53 [label="fv155 ← a0", color=green];
  r5 [label="v208 ← a1", color=green];
  r43 [label="v15 ← a0", color=green];
  r31 [label="v183 ← a1", color=green];
  r99 [label="v110 ← a1", color=green];
  r17 [label="v191 ← a0", color=green];
  r133 [label="v76 ← a1", color=green];
  r52 [label="v154 ← a0", color=green];
  r129 [label="v36 ← a1", color=green];
  r20 [label="v187 ← a0", color=green];
  r61 [label="v145 ← a0", color=green];
  r23 [label="v190 ← a0", color=green];
  r108 [label="v103 ← a1", color=green];
  r3 [label="v206 ← a0", color=green];
  r132 [label="v39 ← a1", color=green];
  r82 [label="v127 ← a1", color=green];
  r75 [label="v23 ← a1", color=green];
  r27 [label="v179 ← a1", color=green];
  r62 [label="fv146 ← a0", color=green];
  r40 [label="v167 ← a0", color=green];
  r110 [label="v96 ← a1", color=green];
  r34 [label="v13 ← a1", color=green];
  r83 [label="v128 ← a0", color=green];
  r103 [label="fv106 ← a0", color=green];
  r134 [label="v77 ← a0", color=green];
  r146 [label="v59 ← a1", color=green];
  r51 [label="v17 ← a0", color=green];
  r96 [label="v116 ← a1", color=green];
  r135 [label="v78 ← a1", color=green];
  r55 [label="v157 ← a1", color=green];
  r136 [label="fv40 ← a0", color=green];
  r153 [label="fv50 ← a0", color=green];
  r72 [label="v141 ← a1", color=green];
  r104 [label="v107 ← a1", color=green];
  r116 [label="v93 ← a0", color=green];
  r100 [label="v111 ← a0", color=green];
  r85 [label="v122 ← a0", color=green];
  r47 [label="v166 ← a1", color=green];
  r6 [label="v203 ← a1", color=green];
  r13 [label="v7 ← a0", color=green];
  r42 [label="v169 ← a1", color=green];
  r4 [label="v3 ← a0", color=green];
  r117 [label="v94 ← a2", color=green];
  r29 [label="v181 ← a0", color=green];
  r35 [label="v171 ← a1", color=green];
  r131 [label="v81 ← a1", color=green];
  r114 [label="v100 ← a0", color=green];
  r8 [label="v204 ← a1", color=green];
  r112 [label="v98 ← a0", color=green];
  r36 [label="fv172 ← a0", color=green];
  r32 [label="v176 ← a1", color=green];
  r15 [label="v196 ← a0", color=green];
  r49 [label="v160 ← a0", color=green];
  r57 [label="v150 ← a1", color=green];
  r141 [label="v44 ← a1", color=green];
  r74 [label="v136 ← a1", color=green];
  r150 [label="v55 ← a0", color=green];
  r68 [label="v21 ← a1", color=green];
  r98 [label="v109 ← a1", color=green];
  r124 [label="v34 ← a1", color=green];
  r91 [label="v120 ← a1", color=green];
  r12 [label="v200 ← a1", color=green];
  r106 [label="v101 ← a0", color=green];
  r109 [label="v31 ← a0", color=green];
  r1 [label="v209 ← a0", color=green];
  r127 [label="fv35 ← a0", color=green];
  r28 [label="fv180 ← a0", color=green];
  r41 [label="v168 ← a1", color=green];
  r69 [label="v138 ← a0", color=green];
  r50 [label="v161 ← a1", color=green];
  r89 [label="v118 ← a1", color=green];
  r30 [label="v182 ← a1", color=green];
  r25 [label="v185 ← a0", color=green];
  r149 [label="v49 ← a1", color=green];
  r143 [label="v67 ← a1", color=green];
  r7 -- r117;
  r10 -- r64;
  r16 -- r20;
  r0 -- r32;
  r0 -- r66;
  r0 -- r48;
  r0 -- r83;
  r13 -- r76;
  r16 -- r147;
  r0 -- r115;
  r16 -- r119;
  r13 -- r82;
  r0 -- r114;
  r0 -- r52;
  r0 -- r143;
  r13 -- r67;
  r10 -- r69;
  r0 -- r16;
  r13 -- r95;
  r10 -- r93;
  r0 -- r6;
  r10 -- r67;
  r60 -- r64;
  r0 -- r107;
  r0 -- r58;
  r0 -- r117;
  r26 -- r27;
  r10 -- r98;
  r13 -- r30;
  r0 -- r154;
  r13 -- r33;
  r0 -- r26;
  r0 -- r81;
  r16 -- r102;
  r0 -- r109;
  r13 -- r71;
  r10 -- r18;
  r0 -- r149;
  r16 -- r33;
  r84 -- r87;
  r10 -- r33;
  r16 -- r74;
  r10 -- r22;
  r0 -- r38;
  r2 -- r5;
  r16 -- r108;
  r13 -- r93;
  r0 -- r47;
  r16 -- r89;
  r13 -- r98;
  r13 -- r72;
  r0 -- r44;
  r109 -- r112;
  r149 -- r150;
  r0 -- r122;
  r0 -- r140;
  r4 -- r13;
  r0 -- r15;
  r16 -- r30;
  r34 -- r35;
  r2 -- r4;
  r7 -- r116;
  r13 -- r88;
  r16 -- r32;
  r16 -- r51;
  r0 -- r101;
  r16 -- r43;
  r13 -- r16;
  r92 -- r96;
  r16 -- r129;
  r16 -- r66;
  r16 -- r117;
  r13 -- r80;
  r0 -- r105;
  r16 -- r50;
  r75 -- r78;
  r13 -- r48;
  r16 -- r146;
  r0 -- r19;
  r16 -- r18;
  r13 -- r91;
  r13 -- r19;
  r10 -- r16;
  r10 -- r81;
  r16 -- r132;
  r0 -- r97;
  r13 -- r78;
  r0 -- r65;
  r0 -- r73;
  r16 -- r56;
  r0 -- r104;
  r10 -- r15;
  r13 -- r14;
  r0 -- r29;
  r9 -- r119;
  r0 -- r123;
  r10 -- r57;
  r13 -- r52;
  r120 -- r121;
  r16 -- r67;
  r132 -- r134;
  r101 -- r104;
  r4 -- r7;
  r16 -- r46;
  r0 -- r90;
  r13 -- r39;
  r10 -- r32;
  r4 -- r10;
  r43 -- r44;
  r13 -- r68;
  r0 -- r20;
  r10 -- r79;
  r0 -- r67;
  r10 -- r60;
  r16 -- r140;
  r0 -- r84;
  r16 -- r55;
  r13 -- r44;
  r0 -- r49;
  r10 -- r115;
  r13 -- r61;
  r0 -- r133;
  r141 -- r142;
  r10 -- r118;
  r0 -- r131;
  r10 -- r88;
  r10 -- r13;
  r10 -- r19;
  r10 -- r99;
  r119 -- r121;
  r13 -- r119;
  r10 -- r47;
  r16 -- r126;
  r7 -- r118;
  r16 -- r110;
  r13 -- r90;
  r10 -- r113;
  r16 -- r90;
  r0 -- r100;
  r10 -- r56;
  r10 -- r20;
  r0 -- r40;
  r0 -- r129;
  r0 -- r79;
  r13 -- r43;
  r13 -- r84;
  r43 -- r46;
  r9 -- r120;
  r4 -- r12;
  r7 -- r121;
  r10 -- r75;
  r13 -- r18;
  r0 -- r56;
  r0 -- r121;
  r16 -- r145;
  r13 -- r57;
  r13 -- r22;
  r0 -- r11;
  r10 -- r25;
  r16 -- r42;
  r16 -- r96;
  r10 -- r35;
  r16 -- r23;
  r13 -- r115;
  r10 -- r17;
  r16 -- r68;
  r10 -- r95;
  r13 -- r24;
  r16 -- r31;
  r0 -- r63;
  r4 -- r5;
  r16 -- r92;
  r13 -- r42;
  r13 -- r46;
  r0 -- r24;
  r0 -- r145;
  r13 -- r85;
  r10 -- r108;
  r13 -- r26;
  r13 -- r109;
  r16 -- r19;
  r0 -- r43;
  r0 -- r112;
  r13 -- r112;
  r0 -- r64;
  r16 -- r118;
  r10 -- r102;
  r16 -- r73;
  r10 -- r41;
  r16 -- r40;
  r10 -- r27;
  r16 -- r79;
  r13 -- r101;
  r0 -- r35;
  r13 -- r25;
  r0 -- r141;
  r0 -- r95;
  r0 -- r152;
  r75 -- r79;
  r10 -- r105;
  r9 -- r121;
  r109 -- r110;
  r4 -- r11;
  r0 -- r46;
  r16 -- r113;
  r10 -- r63;
  r0 -- r54;
  r34 -- r37;
  r109 -- r113;
  r10 -- r73;
  r16 -- r98;
  r0 -- r8;
  r16 -- r120;
  r26 -- r30;
  r13 -- r108;
  r10 -- r23;
  r60 -- r61;
  r16 -- r124;
  r16 -- r44;
  r16 -- r95;
  r9 -- r16;
  r0 -- r12;
  r118 -- r121;
  r16 -- r97;
  r0 -- r7;
  r0 -- r55;
  r16 -- r100;
  r16 -- r48;
  r16 -- r101;
  r0 -- r106;
  r10 -- r96;
  r16 -- r52;
  r10 -- r66;
  r0 -- r78;
  r68 -- r69;
  r92 -- r93;
  r0 -- r96;
  r16 -- r84;
  r0 -- r59;
  r0 -- r102;
  r10 -- r61;
  r13 -- r66;
  r16 -- r141;
  r13 -- r59;
  r13 -- r32;
  r0 -- r69;
  r51 -- r55;
  r16 -- r81;
  r0 -- r147;
  r13 -- r31;
  r16 -- r105;
  r10 -- r89;
  r0 -- r23;
  r10 -- r110;
  r13 -- r64;
  r0 -- r72;
  r84 -- r85;
  r10 -- r40;
  r0 -- r108;
  r13 -- r74;
  r16 -- r123;
  r13 -- r69;
  r10 -- r104;
  r13 -- r118;
  r0 -- r92;
  r13 -- r38;
  r16 -- r29;
  r13 -- r63;
  r13 -- r99;
  r16 -- r72;
  r10 -- r38;
  r13 -- r55;
  r0 -- r57;
  r10 -- r12;
  r0 -- r9;
  r0 -- r150;
  r16 -- r37;
  r19 -- r22;
  r13 -- r83;
  r16 -- r83;
  r13 -- r41;
  r10 -- r31;
  r51 -- r54;
  r13 -- r58;
  r16 -- r82;
  r0 -- r1;
  r7 -- r119;
  r10 -- r42;
  r16 -- r142;
  r16 -- r143;
  r0 -- r10;
  r16 -- r41;
  r16 -- r125;
  r13 -- r35;
  r0 -- r4;
  r16 -- r38;
  r16 -- r24;
  r0 -- r142;
  r16 -- r64;
  r16 -- r76;
  r0 -- r18;
  r10 -- r59;
  r51 -- r52;
  r132 -- r133;
  r13 -- r113;
  r16 -- r47;
  r16 -- r109;
  r0 -- r89;
  r13 -- r15;
  r0 -- r71;
  r16 -- r58;
  r0 -- r34;
  r10 -- r107;
  r0 -- r99;
  r0 -- r91;
  r13 -- r102;
  r0 -- r110;
  r16 -- r104;
  r16 -- r63;
  r16 -- r137;
  r0 -- r14;
  r16 -- r134;
  r10 -- r29;
  r0 -- r134;
  r10 -- r48;
  r16 -- r106;
  r0 -- r93;
  r16 -- r116;
  r124 -- r125;
  r13 -- r110;
  r0 -- r85;
  r10 -- r51;
  r0 -- r31;
  r13 -- r114;
  r0 -- r120;
  r34 -- r38;
  r0 -- r50;
  r16 -- r107;
  r10 -- r101;
  r0 -- r132;
  r0 -- r42;
  r10 -- r43;
  r16 -- r57;
  r13 -- r23;
  r0 -- r3;
  r7 -- r15;
  r16 -- r35;
  r0 -- r130;
  r0 -- r39;
  r10 -- r11;
  r0 -- r37;
  r119 -- r120;
  r10 -- r85;
  r0 -- r5;
  r0 -- r75;
  r13 -- r17;
  r0 -- r148;
  r10 -- r46;
  r13 -- r65;
  r13 -- r47;
  r10 -- r54;
  r10 -- r109;
  r7 -- r16;
  r10 -- r65;
  r13 -- r87;
  r16 -- r115;
  r4 -- r6;
  r0 -- r30;
  r7 -- r12;
  r9 -- r13;
  r13 -- r79;
  r16 -- r49;
  r0 -- r124;
  r7 -- r120;
  r0 -- r13;
  r16 -- r87;
  r16 -- r25;
  r13 -- r97;
  r16 -- r69;
  r10 -- r26;
  r13 -- r75;
  r0 -- r74;
  r0 -- r125;
  r0 -- r17;
  r16 -- r135;
  r118 -- r120;
  r0 -- r138;
  r16 -- r91;
  r0 -- r25;
  r13 -- r49;
  r13 -- r107;
  r10 -- r100;
  r0 -- r118;
  r13 -- r50;
  r16 -- r59;
  r16 -- r88;
  r0 -- r22;
  r10 -- r58;
  r13 -- r92;
  r0 -- r87;
  r16 -- r85;
  r0 -- r113;
  r16 -- r17;
  r13 -- r37;
  r13 -- r40;
  r0 -- r116;
  r75 -- r76;
  r16 -- r34;
  r10 -- r49;
  r0 -- r82;
  r10 -- r37;
  r10 -- r92;
  r16 -- r80;
  r0 -- r98;
  r9 -- r117;
  r0 -- r51;
  r0 -- r139;
  r0 -- r2;
  r13 -- r89;
  r13 -- r54;
  r10 -- r74;
  r10 -- r117;
  r7 -- r10;
  r16 -- r130;
  r13 -- r106;
  r13 -- r104;
  r13 -- r51;
  r0 -- r88;
  r0 -- r61;
  r16 -- r75;
  r13 -- r116;
  r9 -- r118;
  r10 -- r30;
  r0 -- r76;
  r4 -- r8;
  r9 -- r10;
  r16 -- r39;
  r13 -- r100;
  r10 -- r112;
  r7 -- r8;
  r10 -- r55;
  r13 -- r29;
  r16 -- r78;
  r4 -- r9;
  r16 -- r27;
  r16 -- r22;
  r16 -- r112;
  r0 -- r80;
  r10 -- r114;
  r118 -- r119;
  r13 -- r60;
  r10 -- r83;
  r16 -- r61;
  r10 -- r87;
  r10 -- r72;
  r16 -- r99;
  r0 -- r135;
  r0 -- r68;
  r10 -- r106;
  r10 -- r68;
  r10 -- r78;
  r101 -- r102;
  r16 -- r121;
  r0 -- r41;
  r16 -- r60;
  r7 -- r13;
  r10 -- r71;
  r10 -- r76;
  r16 -- r26;
  r7 -- r9;
  r10 -- r34;
  r13 -- r20;
  r13 -- r56;
  r16 -- r71;
  r16 -- r138;
  r10 -- r91;
  r13 -- r81;
  r10 -- r50;
  r16 -- r65;
  r13 -- r34;
  r0 -- r33;
  r16 -- r114;
  r16 -- r131;
  r10 -- r84;
  r92 -- r95;
  r0 -- r60;
  r13 -- r96;
  r10 -- r90;
  r16 -- r54;
  r0 -- r137;
  r10 -- r44;
  r10 -- r52;
  r0 -- r126;
  r10 -- r39;
  r10 -- r97;
  r0 -- r151;
  r0 -- r119;
  r16 -- r139;
  r68 -- r71;
  r10 -- r82;
  r60 -- r63;
  r16 -- r133;
  r26 -- r29;
  r16 -- r122;
  r10 -- r116;
  r13 -- r73;
  r16 -- r93;
  r10 -- r80;
  r0 -- r146;
  r0 -- r27;
  r13 -- r105;
  r2 -- r3;
  r10 -- r24;
  r13 -- r27;
  r13 -- r117;
  r19 -- r20;
  r149 -- r151;
  r10 -- r14;
  comment = "154:v51-> 153:fv50-> 152:v57-> 0:zero-> 7:a0-> 79:v133-> 10:v6-> 16:v8-> 13:v7-> 9:a1-> 119:a3-> 118:a2-> 146:v59-> 145:v46-> 144:fv45-> 143:v67-> 142:v66-> 141:v44-> 140:v71-> 139:v70-> 138:v69-> 137:v41-> 136:fv40-> 135:v78-> 134:v77-> 133:v76-> 132:v39-> 131:v81-> 130:v80-> 129:v36-> 128:fa0-> 127:fv35-> 126:v87-> 125:v86-> 124:v34-> 123:v90-> 122:v89-> 121:a5-> 120:a4-> 37:v173-> 64:v148-> 60:v19-> 80:v134-> 116:v93-> 115:v92-> 114:v100-> 113:v99-> 109:v31-> 112:v98-> 111:fv97-> 110:v96-> 108:v103-> 107:v102-> 106:v101-> 105:v108-> 104:v107-> 103:fv106-> 102:v105-> 101:v29-> 100:v111-> 99:v110-> 98:v109-> 97:v117-> 96:v116-> 92:v27-> 95:v115-> 94:fv114-> 93:v113-> 91:v120-> 90:v119-> 89:v118-> 48:v159-> 88:v125-> 87:v124-> 86:fv123-> 85:v122-> 84:v25-> 83:v128-> 82:v127-> 4:v3-> 3:v206-> 2:v2-> 11:v199-> 1:v209-> 150:v55-> 148:v61-> 74:v136-> 73:v135-> 72:v141-> 71:v140-> 70:fv139-> 69:v138-> 68:v21-> 67:v143-> 66:v142-> 81:v126-> 151:v56-> 77:fv131-> 76:v130-> 75:v23-> 44:v163-> 117:v94-> 59:v152-> 58:v151-> 57:v150-> 56:v158-> 55:v157-> 51:v17-> 54:v156-> 53:fv155-> 52:v154-> 50:v161-> 49:v160-> 28:fv180-> 47:v166-> 46:v165-> 43:v15-> 15:v196-> 19:v9-> 22:v189-> 35:v171-> 34:v13-> 45:fv164-> 6:v203-> 40:v167-> 39:v175-> 38:v174-> 26:v11-> 30:v182-> 8:v204-> 23:v190-> 42:v169-> 41:v168-> 24:v184-> 33:v177-> 61:v145-> 31:v183-> 29:v181-> 14:v195-> 62:fv146-> 65:v149-> 36:fv172-> 27:v179-> 149:v49-> 25:v185-> 17:v191-> 78:v132-> 20:v187-> 12:v200-> 147:v60-> 18:v192-> 63:v147-> 32:v176-> 5:v208-> 21:fv188"
  comment = "v11<-a1;v163<-a0;v158<-a1;v6<-a0;fv97<-a0;v156<-a1;v184<-a1;v87<-a1;v134<-a1;v125<-a1;v66<-a1;v175<-a1;v51<-a0;v149<-a0;v57<-a0;v133<-a0;v99<-a1;v143<-a0;fv131<-a0;v56<-a0;v199<-a1;v151<-a1;v108<-a0;v61<-a0;v195<-a0;v132<-a0;v71<-a1;v8<-a0;fv188<-a0;v19<-a1;v135<-a0;v113<-a0;v174<-a2;v46<-a1;v89<-a1;v124<-a1;v115<-a2;fv45<-a0;v148<-a1;v142<-a1;v92<-a1;v80<-a1;v60<-a1;v69<-a1;fv139<-a0;v159<-a1;v173<-a0;v105<-a1;v90<-a1;v86<-a1;v140<-a0;v189<-a0;v25<-a2;fv164<-a0;v27<-a1;v102<-a0;v147<-a0;v2<-a1;v192<-a0;v41<-a1;v9<-a0;v70<-a1;v117<-a0;v119<-a1;v126<-a1;v29<-a2;fv114<-a0;v165<-a1;v177<-a0;v152<-a1;v130<-a1;fv123<-a0;fv155<-a0;v208<-a1;v15<-a0;v183<-a1;v110<-a1;v191<-a0;v76<-a1;v154<-a0;v36<-a1;v187<-a0;v145<-a0;v190<-a0;v103<-a1;v206<-a0;v39<-a1;v127<-a1;v23<-a1;v179<-a1;fv146<-a0;v167<-a0;v96<-a1;v13<-a1;v128<-a0;fv106<-a0;v77<-a0;v59<-a1;v17<-a0;v116<-a1;v78<-a1;v157<-a1;fv40<-a0;fv50<-a0;v141<-a1;v107<-a1;v93<-a0;v111<-a0;v122<-a0;v166<-a1;v203<-a1;v7<-a0;v169<-a1;v3<-a0;v94<-a2;v181<-a0;v171<-a1;v81<-a1;v100<-a0;v204<-a1;v98<-a0;fv172<-a0;v176<-a1;v196<-a0;v160<-a0;v150<-a1;v44<-a1;v136<-a1;v55<-a0;v21<-a1;v109<-a1;v34<-a1;v120<-a1;v200<-a1;v101<-a0;v31<-a0;v209<-a0;fv35<-a0;fv180<-a0;v168<-a1;v138<-a0;v161<-a1;v118<-a1;v182<-a1;v185<-a0;v49<-a1;v67<-a1;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of init_arr"];
  r0 [label="v11 ← a1", color=green];
  r20 [label="v10 ← a0", color=green];
  r3 [label="s10", color=blue];
  r9 [label="v4 ← a0", color=green];
  r6 [label="v22 ← a1", color=green];
  r13 [label="fv21 ← a0", color=green];
  r4 [label="v0 ← a1", color=green];
  r1 [label="a0", color=blue];
  r11 [label="v19 ← a1", color=green];
  r7 [label="v6 ← a1", color=green];
  r10 [label="v18 ← a2", color=green];
  r14 [label="a1", color=blue];
  r8 [label="v3 ← a0", color=green];
  r5 [label="v2 ← a0", color=green];
  r15 [label="fa0", color=blue];
  r2 [label="zero", color=blue];
  r16 [label="v16 ← a2", color=green];
  r18 [label="v14 ← a2", color=green];
  r19 [label="v9 ← a1", color=green];
  r17 [label="v17 ← a1", color=green];
  r12 [label="v5 ← a2", color=green];
  r2 -- r20;
  r4 -- r16;
  r1 -- r12;
  r4 -- r5;
  r1 -- r8;
  r2 -- r4;
  r5 -- r8;
  r5 -- r20;
  r2 -- r18;
  r5 -- r10;
  r1 -- r4;
  r3 -- r6;
  r5 -- r17;
  r8 -- r19;
  r1 -- r7;
  r8 -- r9;
  r5 -- r18;
  r2 -- r10;
  r5 -- r19;
  r4 -- r20;
  r2 -- r16;
  r9 -- r17;
  r4 -- r18;
  r2 -- r11;
  r2 -- r7;
  r5 -- r11;
  r5 -- r16;
  r8 -- r20;
  r3 -- r5;
  r9 -- r18;
  r8 -- r12;
  r9 -- r14;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r8 -- r17;
  r4 -- r11;
  r3 -- r4;
  r8 -- r16;
  r2 -- r14;
  r5 -- r9;
  r9 -- r12;
  r2 -- r12;
  r8 -- r18;
  r2 -- r8;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r9 -- r20;
  r2 -- r17;
  r8 -- r10;
  r4 -- r8;
  r9 -- r10;
  r9 -- r16;
  r5 -- r14;
  r8 -- r11;
  r12 -- r14;
  r12 -- r16;
  r4 -- r17;
  r9 -- r19;
  r12 -- r17;
  r3 -- r7;
  r1 -- r6;
  r1 -- r5;
  r2 -- r9;
  r8 -- r14;
  r4 -- r10;
  r1 -- r14;
  r2 -- r19;
  r1 -- r3;
  r4 -- r14;
  r2 -- r3;
  r4 -- r9;
  r4 -- r19;
  r5 -- r12;
  comment = "20:v10-> 5:v2-> 9:v4-> 2:zero-> 8:v3-> 4:v0-> 3:s10-> 1:a0-> 18:v14-> 17:v17-> 16:v16-> 14:a1-> 12:v5-> 0:v11-> 7:v6-> 6:v22-> 10:v18-> 11:v19-> 19:v9-> 13:fv21-> 15:fa0"
  comment = "v11<-a1;v10<-a0;v4<-a0;v22<-a1;fv21<-a0;v0<-a1;v19<-a1;v6<-a1;v18<-a2;v3<-a0;v2<-a0;v16<-a2;v14<-a2;v9<-a1;v17<-a1;v5<-a2;"
}

graph G {
  graph [label="float interference graph of init_arr"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of loop3"];
  r0 [label="v3 ← a3", color=green];
  r38 [label="v51 ← a1", color=green];
  r33 [label="v24 ← a0", color=green];
  r9 [label="v49 ← a2", color=green];
  r26 [label="v30 ← a2", color=green];
  r6 [label="v6 ← a0", color=green];
  r13 [label="v10 ← a3", color=green];
  r4 [label="v0 ← a1", color=green];
  r29 [label="fv16 ← a0", color=green];
  r35 [label="a0", color=blue];
  r7 [label="v2 ← a1", color=green];
  r10 [label="v9 ← a0", color=green];
  r8 [label="v48 ← a2", color=green];
  r5 [label="v4 ← a0", color=green];
  r36 [label="v20 ← a0", color=green];
  r32 [label="v27 ← a2", color=green];
  r24 [label="v34 ← a0", color=green];
  r15 [label="v43 ← a2", color=green];
  r31 [label="v26 ← a2", color=green];
  r39 [label="v8 ← a1", color=green];
  r17 [label="v39 ← a0", color=green];
  r12 [label="v46 ← a2", color=green];
  r37 [label="s10", color=blue];
  r20 [label="v36 ← a3", color=green];
  r23 [label="v33 ← a0", color=green];
  r3 [label="v7 ← a0", color=green];
  r27 [label="v31 ← a2", color=green];
  r1 [label="v5 ← a2", color=green];
  r40 [label="v21 ← a1", color=green];
  r28 [label="fv15 ← a0", color=green];
  r11 [label="v45 ← a2", color=green];
  r34 [label="v19 ← a2", color=green];
  r22 [label="fv13 ← a0", color=green];
  r14 [label="v42 ← a2", color=green];
  r30 [label="fv17 ← a0", color=green];
  r25 [label="v14 ← a2", color=green];
  r2 [label="zero", color=blue];
  r16 [label="fv11 ← a0", color=green];
  r18 [label="v40 ← a2", color=green];
  r19 [label="v12 ← a2", color=green];
  r21 [label="v37 ← a2", color=green];
  r37 -- r39;
  r2 -- r32;
  r2 -- r31;
  r2 -- r38;
  r0 -- r36;
  r5 -- r21;
  r5 -- r33;
  r1 -- r26;
  r0 -- r32;
  r3 -- r15;
  r4 -- r34;
  r6 -- r35;
  r5 -- r10;
  r3 -- r6;
  r5 -- r17;
  r7 -- r25;
  r5 -- r18;
  r3 -- r9;
  r3 -- r11;
  r0 -- r23;
  r2 -- r37;
  r2 -- r7;
  r1 -- r33;
  r3 -- r26;
  r3 -- r31;
  r7 -- r27;
  r7 -- r32;
  r7 -- r35;
  r3 -- r5;
  r4 -- r31;
  r2 -- r34;
  r0 -- r6;
  r5 -- r31;
  r3 -- r8;
  r1 -- r9;
  r2 -- r25;
  r5 -- r35;
  r2 -- r6;
  r5 -- r6;
  r0 -- r26;
  r10 -- r18;
  r10 -- r12;
  r0 -- r9;
  r35 -- r38;
  r2 -- r12;
  r5 -- r32;
  r10 -- r31;
  r1 -- r2;
  r2 -- r5;
  r3 -- r33;
  r0 -- r1;
  r2 -- r13;
  r0 -- r10;
  r3 -- r17;
  r4 -- r25;
  r1 -- r11;
  r2 -- r36;
  r35 -- r37;
  r3 -- r35;
  r1 -- r5;
  r6 -- r23;
  r0 -- r4;
  r1 -- r35;
  r4 -- r14;
  r5 -- r36;
  r0 -- r18;
  r6 -- r25;
  r4 -- r13;
  r0 -- r15;
  r3 -- r19;
  r3 -- r25;
  r2 -- r26;
  r1 -- r8;
  r4 -- r23;
  r2 -- r4;
  r1 -- r34;
  r7 -- r24;
  r6 -- r33;
  r0 -- r34;
  r7 -- r20;
  r0 -- r14;
  r5 -- r19;
  r1 -- r13;
  r4 -- r18;
  r2 -- r11;
  r5 -- r11;
  r0 -- r19;
  r6 -- r20;
  r0 -- r31;
  r7 -- r17;
  r6 -- r19;
  r6 -- r27;
  r4 -- r15;
  r7 -- r19;
  r2 -- r14;
  r5 -- r9;
  r3 -- r21;
  r0 -- r3;
  r4 -- r32;
  r7 -- r15;
  r13 -- r14;
  r10 -- r15;
  r10 -- r11;
  r3 -- r20;
  r7 -- r36;
  r0 -- r5;
  r1 -- r25;
  r4 -- r36;
  r2 -- r17;
  r4 -- r7;
  r5 -- r25;
  r7 -- r18;
  r2 -- r9;
  r2 -- r35;
  r4 -- r10;
  r4 -- r6;
  r7 -- r12;
  r0 -- r20;
  r3 -- r23;
  r7 -- r14;
  r2 -- r27;
  r1 -- r24;
  r5 -- r12;
  r2 -- r20;
  r2 -- r39;
  r6 -- r21;
  r0 -- r13;
  r7 -- r21;
  r1 -- r12;
  r6 -- r36;
  r2 -- r15;
  r5 -- r8;
  r10 -- r26;
  r1 -- r4;
  r37 -- r38;
  r0 -- r17;
  r1 -- r7;
  r1 -- r18;
  r1 -- r19;
  r1 -- r10;
  r0 -- r25;
  r10 -- r13;
  r2 -- r10;
  r10 -- r19;
  r3 -- r32;
  r1 -- r17;
  r1 -- r20;
  r4 -- r27;
  r3 -- r24;
  r3 -- r18;
  r3 -- r34;
  r4 -- r35;
  r4 -- r21;
  r1 -- r31;
  r35 -- r39;
  r6 -- r13;
  r7 -- r34;
  r2 -- r33;
  r4 -- r33;
  r10 -- r20;
  r3 -- r4;
  r0 -- r2;
  r1 -- r21;
  r3 -- r13;
  r6 -- r18;
  r6 -- r10;
  r7 -- r10;
  r2 -- r8;
  r3 -- r10;
  r1 -- r27;
  r4 -- r12;
  r6 -- r31;
  r3 -- r27;
  r5 -- r7;
  r4 -- r8;
  r5 -- r14;
  r0 -- r11;
  r1 -- r6;
  r3 -- r7;
  r10 -- r25;
  r2 -- r24;
  r7 -- r8;
  r4 -- r9;
  r2 -- r23;
  r6 -- r32;
  r5 -- r34;
  r10 -- r17;
  r6 -- r7;
  r6 -- r9;
  r6 -- r11;
  r4 -- r24;
  r4 -- r5;
  r6 -- r15;
  r5 -- r20;
  r2 -- r18;
  r4 -- r37;
  r0 -- r24;
  r1 -- r23;
  r6 -- r14;
  r5 -- r23;
  r3 -- r12;
  r7 -- r26;
  r5 -- r13;
  r7 -- r13;
  r1 -- r32;
  r0 -- r21;
  r1 -- r15;
  r4 -- r20;
  r25 -- r26;
  r10 -- r27;
  r0 -- r35;
  r7 -- r9;
  r6 -- r26;
  r6 -- r12;
  r6 -- r24;
  r6 -- r8;
  r6 -- r34;
  r7 -- r37;
  r4 -- r11;
  r0 -- r33;
  r5 -- r24;
  r5 -- r26;
  r0 -- r8;
  r7 -- r33;
  r10 -- r23;
  r7 -- r11;
  r2 -- r21;
  r35 -- r40;
  r6 -- r17;
  r3 -- r14;
  r7 -- r31;
  r0 -- r12;
  r3 -- r36;
  r5 -- r27;
  r4 -- r17;
  r7 -- r23;
  r1 -- r14;
  r1 -- r36;
  r1 -- r3;
  r4 -- r26;
  r2 -- r19;
  r0 -- r7;
  r0 -- r27;
  r2 -- r3;
  r10 -- r21;
  r10 -- r24;
  r5 -- r15;
  r4 -- r19;
  r19 -- r20;
  r10 -- r14;
  comment = "40:v21-> 35:a0-> 39:v8-> 2:zero-> 37:s10-> 4:v0-> 36:v20-> 3:v7-> 5:v4-> 7:v2-> 6:v6-> 8:v48-> 21:v37-> 10:v9-> 19:v12-> 31:v26-> 30:fv17-> 17:v39-> 28:fv15-> 27:v31-> 33:v24-> 25:v14-> 26:v30-> 32:v27-> 23:v33-> 22:fv13-> 18:v40-> 1:v5-> 34:v19-> 38:v51-> 20:v36-> 29:fv16-> 0:v3-> 24:v34-> 14:v42-> 11:v45-> 9:v49-> 12:v46-> 13:v10-> 16:fv11-> 15:v43"
  comment = "v3<-a3;v51<-a1;v24<-a0;v49<-a2;v30<-a2;v6<-a0;v10<-a3;v0<-a1;fv16<-a0;v2<-a1;v9<-a0;v48<-a2;v4<-a0;v20<-a0;v27<-a2;v34<-a0;v43<-a2;v26<-a2;v8<-a1;v39<-a0;v46<-a2;v36<-a3;v33<-a0;v7<-a0;v31<-a2;v5<-a2;v21<-a1;fv15<-a0;v45<-a2;v19<-a2;fv13<-a0;v42<-a2;fv17<-a0;v14<-a2;fv11<-a0;v40<-a2;v12<-a2;v37<-a2;"
}

graph G {
  graph [label="float interference graph of loop3"];
  r0 [label="fv11 ← fa1", color=green];
  r2 [label="fv15 ← fa0", color=green];
  r1 [label="fv13 ← fa2", color=green];
  r3 [label="fv16 ← fa0", color=green];
  r1 -- r2;
  r0 -- r3;
  r0 -- r1;
  r0 -- r2;
  comment = "3:fv16-> 0:fv11-> 2:fv15-> 1:fv13"
  comment = "fv11<-fa1;fv15<-fa0;fv13<-fa2;fv16<-fa0;"
}

graph G {
  graph [label="integer interference graph of loop1"];
  r0 [label="a0", color=blue];
  r20 [label="v15 ← a1", color=green];
  r3 [label="v0 ← a2", color=green];
  r9 [label="v7 ← a2", color=green];
  r6 [label="v9 ← a1", color=green];
  r13 [label="v8 ← a3", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="zero", color=blue];
  r11 [label="v6 ← a1", color=green];
  r7 [label="v3 ← a4", color=green];
  r10 [label="v4 ← a1", color=green];
  r14 [label="v26 ← a4", color=green];
  r8 [label="v5 ← a3", color=green];
  r5 [label="v27 ← a1", color=green];
  r15 [label="v22 ← a3", color=green];
  r2 [label="s10", color=blue];
  r16 [label="v11 ← a3", color=green];
  r18 [label="v13 ← a1", color=green];
  r19 [label="v14 ← a3", color=green];
  r17 [label="v18 ← a3", color=green];
  r12 [label="v24 ← a1", color=green];
  r1 -- r12;
  r3 -- r15;
  r3 -- r16;
  r1 -- r4;
  r11 -- r14;
  r1 -- r7;
  r1 -- r18;
  r1 -- r19;
  r1 -- r10;
  r10 -- r13;
  r10 -- r19;
  r3 -- r9;
  r3 -- r11;
  r1 -- r17;
  r9 -- r17;
  r11 -- r18;
  r1 -- r16;
  r3 -- r18;
  r11 -- r19;
  r9 -- r18;
  r8 -- r12;
  r0 -- r6;
  r9 -- r14;
  r3 -- r8;
  r1 -- r9;
  r2 -- r6;
  r8 -- r17;
  r3 -- r4;
  r8 -- r16;
  r11 -- r13;
  r10 -- r18;
  r0 -- r2;
  r10 -- r12;
  r0 -- r9;
  r3 -- r13;
  r7 -- r10;
  r9 -- r12;
  r3 -- r10;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r0 -- r10;
  r1 -- r11;
  r3 -- r17;
  r4 -- r8;
  r9 -- r10;
  r11 -- r15;
  r0 -- r11;
  r8 -- r11;
  r3 -- r7;
  r1 -- r6;
  r1 -- r5;
  r0 -- r4;
  r8 -- r14;
  r7 -- r8;
  r4 -- r14;
  r4 -- r9;
  r10 -- r17;
  r4 -- r13;
  r3 -- r19;
  r4 -- r16;
  r13 -- r15;
  r11 -- r17;
  r1 -- r8;
  r2 -- r4;
  r9 -- r15;
  r8 -- r19;
  r8 -- r9;
  r11 -- r16;
  r3 -- r12;
  r7 -- r13;
  r13 -- r16;
  r11 -- r12;
  r1 -- r15;
  r1 -- r13;
  r4 -- r18;
  r7 -- r9;
  r10 -- r16;
  r7 -- r17;
  r9 -- r11;
  r4 -- r15;
  r4 -- r11;
  r7 -- r19;
  r8 -- r13;
  r8 -- r15;
  r0 -- r3;
  r0 -- r8;
  r7 -- r15;
  r13 -- r14;
  r10 -- r15;
  r8 -- r18;
  r10 -- r11;
  r7 -- r11;
  r0 -- r5;
  r3 -- r14;
  r8 -- r10;
  r4 -- r7;
  r9 -- r16;
  r4 -- r17;
  r9 -- r19;
  r7 -- r16;
  r7 -- r18;
  r4 -- r10;
  r1 -- r14;
  r1 -- r3;
  r0 -- r7;
  r9 -- r13;
  r7 -- r12;
  r2 -- r3;
  r0 -- r20;
  r7 -- r14;
  r4 -- r19;
  r10 -- r14;
  comment = "20:v15-> 0:a0-> 4:v2-> 18:v13-> 10:v4-> 11:v6-> 9:v7-> 3:v0-> 16:v11-> 1:zero-> 8:v5-> 15:v22-> 13:v8-> 14:v26-> 2:s10-> 17:v18-> 7:v3-> 6:v9-> 5:v27-> 19:v14-> 12:v24"
  comment = "v15<-a1;v0<-a2;v7<-a2;v9<-a1;v8<-a3;v2<-a0;v6<-a1;v3<-a4;v4<-a1;v26<-a4;v5<-a3;v27<-a1;v22<-a3;v11<-a3;v13<-a1;v14<-a3;v18<-a3;v24<-a1;"
}

graph G {
  graph [label="float interference graph of loop1"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl loop2
  .type loop2, @function
loop2:
; block info: defs: [v2, v5, v27, v7, v0, v4, v6, v9, v3], uses: [a0, zero, v27, v0, s10, v9, v2], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s11, s10, a0, zero], live_out: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
; block parameters: []
.loop2_b0:
  mv v0, s10  ; live: [a0, zero, s11, s10]
  mv v2, a0  ; live: [a0, zero, v0, s11, s10]
  lw v3, 8(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v4, 16(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v5, 24(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v6, 32(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v7, 40(v0)  ; live: [v2, v0, s11, s10, a0, zero]
  slt v27, zero, v2  ; live: [v2, s11, s10, a0, zero]
  xori v9, v27, 1  ; live: [v27, s11, s10, a0, zero]
; control
  bne v9, zero, .loop2_b1  ; live: [v9, s11, s10, a0, zero]
  j .loop2_b2  ; live: [s11, s10, a0, zero]

; block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v15]
; block parameters: []
.loop2_b2:
; control
  mv v15, zero  ; live: [zero]
  j .loop2_b3  ; live: [zero]

; block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
; live_in: [v15], live_out: []
; block parameters: [v15]
.loop2_b3:
; control
  mv a0, v15  ; live: [v15]
  ret  ; live: [v15, a0]

; block info: defs: [t1, v16, v14, v26, v13, v22, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, v20, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v11, v5, v14, v26, a0, v13, v22, v7, v0, v24, s11, v18, zero, v8, v4, v6, v2], upward_exposed: [v3, v5, zero, v7, v0, v4, v6, s11, v2], params_defs: []
; live_in: [v2, v5, zero, v7, v0, v4, v6, s11, v3], live_out: [v15]
; block parameters: []
.loop2_b1:
  addi v24, s11, -48  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
  andi v8, v24, -8  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v24, v2]
  la v26, loop3  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v26, 0(v8)  ; live: [v3, v5, zero, v26, v7, v8, v0, v4, v6, s11, v2]
  sd v3, 8(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v4, 16(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v2, 24(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v5, 32(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v6, 40(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  li v22, 1  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sub v11, v7, v22  ; live: [v3, v5, zero, v22, v7, v8, v0, v4, v6, s11, v2]
  mv s10, v8  ; live: [v3, v11, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  ld v20, 0(v8)  ; live: [v3, v11, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  mv a0, v11  ; live: [v3, v11, v5, zero, v7, v0, v4, v6, s11, v2]
  jalr v20  ; live: [v3, v5, zero, a0, v7, v0, v4, v6, s11, v2]
  mv v12, zero  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
  li v18, 1  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
  sub v13, v2, v18  ; live: [v3, v5, v18, zero, v7, v0, v4, v6, s11, v2]
  mv s10, v0  ; live: [v3, v5, zero, v13, v7, v0, v4, v6, s11, v2]
  ld v16, 0(v0)  ; live: [v3, v5, zero, v13, v7, v0, v4, v6, s11, v2]
  mv a0, v13  ; live: [v3, v5, zero, v13, v7, v0, v4, v6, s11, v2]
  jalr v16  ; live: [v3, v5, zero, a0, v7, v0, v4, v6, s11, v2]
  mv v14, zero  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
; control
  mv v15, v14  ; live: [v3, v5, v14, zero, v7, v0, v4, v6, s11, v2]
  j .loop2_b3  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl matmul
  .type matmul, @function
matmul:
; block info: defs: [v2, t1, v16, v14, v7, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, v16, v5, v14, v10, a5, a0, v7, a2, a1, a3, s11, v18, zero, a4, v8, v4, v6, v3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3, s11], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3, s11], live_out: []
; block parameters: []
.matmul_b0:
  mv v2, a0  ; live: [a5, zero, a0, a4, a2, a1, s11, a3]
  mv v3, a1  ; live: [a5, zero, a4, a2, a1, s11, a3, v2]
  mv v4, a2  ; live: [v3, a5, zero, a4, a2, s11, a3, v2]
  mv v5, a3  ; live: [v3, a5, zero, a4, v4, s11, a3, v2]
  mv v6, a4  ; live: [v3, v5, a5, zero, a4, v4, s11, v2]
  mv v7, a5  ; live: [v3, v5, a5, zero, v4, v6, s11, v2]
  addi v16, s11, -48  ; live: [v3, v5, zero, v7, v4, v6, s11, v2]
  andi v8, v16, -8  ; live: [v3, v5, v16, zero, v7, v4, v6, s11, v2]
  la v18, loop1  ; live: [v3, v5, zero, v8, v7, v4, v6, s11, v2]
  sd v18, 0(v8)  ; live: [v3, v5, v18, zero, v8, v7, v4, v6, s11, v2]
  sd v7, 8(v8)  ; live: [v3, v5, zero, v8, v7, v4, v6, s11, v2]
  sd v5, 16(v8)  ; live: [v3, v5, zero, v8, v4, v6, s11, v2]
  sd v6, 24(v8)  ; live: [v3, zero, v8, v4, v6, s11, v2]
  sd v3, 32(v8)  ; live: [v3, zero, v8, v4, s11, v2]
  sd v4, 40(v8)  ; live: [zero, v8, v4, s11, v2]
  li v14, 1  ; live: [zero, v8, s11, v2]
  sub v10, v2, v14  ; live: [v14, zero, v8, s11, v2]
  mv s10, v8  ; live: [v10, zero, v8, s11]
  ld v12, 0(v8)  ; live: [v10, zero, v8, s11]
  mv a0, v10  ; live: [v10, zero, s11]
  jalr v12  ; live: [zero, a0, s11]
  mv v11, zero  ; live: [a5, zero, a4, a2, a1, a3, s11]
; control
  mv a0, v11  ; live: [v11, a5, zero, a4, a2, a1, a3, s11]
  ret  ; live: [a5, a0, zero, a4, a2, a1, a3, s11]

  .p2align 3
  .globl gen_arr
  .type gen_arr, @function
gen_arr:
; block info: defs: [v2, t1, v13, v0, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v19, a6, v4, ft5, ft10, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v5, a0, v13, v0, a2, a1, v17, s11, s10, v9, v18, zero, v19, v4, v6, v15, v2], upward_exposed: [a1, s11, s10, a0, zero], params_defs: []
; live_in: [a1, s11, s10, a0, zero], live_out: []
; block parameters: []
.gen_arr_b0:
  mv v0, s10  ; live: [zero, a0, a1, s11, s10]
  mv v2, a0  ; live: [zero, a0, v0, a1, s11]
  mv v3, a1  ; live: [zero, v0, a1, s11, v2]
  lw v4, 8(v0)  ; live: [v2, zero, v0, s11, v3]
  slli v18, v2, 3  ; live: [v2, zero, v4, s11, v3]
  sub v19, s11, v18  ; live: [v2, v18, zero, v4, s11, v3]
  andi v5, v19, -8  ; live: [v2, zero, v19, v4, s11, v3]
  mv a1, v2  ; live: [v2, v5, zero, v4, s11, v3]
  mv a0, v5  ; live: [v2, v5, zero, v4, a1, s11, v3]
  mv a2, v4  ; live: [v2, v5, zero, a0, v4, a1, s11, v3]
  call _memseti32  ; live: [v2, v5, zero, a0, a2, a1, s11, v3]
  addi v15, s11, -24  ; live: [v2, v5, zero, s11, v3]
  andi v6, v15, -8  ; live: [v2, v5, zero, s11, v15, v3]
  la v17, init_arr  ; live: [v2, v5, zero, v6, s11, v3]
  sd v17, 0(v6)  ; live: [v2, v5, zero, v6, v17, s11, v3]
  sd v3, 8(v6)  ; live: [v2, v5, zero, v6, s11, v3]
  sd v5, 16(v6)  ; live: [v5, v6, s11, zero, v2]
  li v13, 1  ; live: [v5, v6, s11, zero, v2]
  sub v9, v2, v13  ; live: [v5, v6, s11, zero, v13, v2]
  mv s10, v6  ; live: [v5, v6, s11, zero, v9]
  ld v11, 0(v6)  ; live: [v5, v6, s11, s10, zero, v9]
  mv a0, v9  ; live: [v5, s11, s10, zero, v9]
  jalr v11  ; live: [v5, s11, s10, zero, a0]
  mv v10, zero  ; live: [a1, v5, s11, s10, zero]
; control
  mv a0, v5  ; live: [a1, v5, s11, s10, zero]
  ret  ; live: [a1, s11, s10, a0, zero]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v189, v159, v67, v150, a1, t5, v44, fa1, v191, fa2, v99, v169, a6, v166, v151, ft10, v59, v6, v117, v102, v154, ft4, ft9, v119, v110, v157, v92, v141, v184, v37, v43, v190, v206, a7, fv50, v156, v48, v96, v181, v163, v132, v174, fv164, v25, v194, v179, v42, v7, ft0, ft1, v41, v108, v177, v192, v143, v86, v185, v173, v98, v161, v130, v29, v8, v105, v90, v47, v89, v34, v66, v21, a2, v198, v160, v9, v145, ft8, v176, t3, fa5, v56, v23, v77, v148, t4, v80, v15, v195, fv131, v135, v2, fv114, v76, fv97, fv35, v200, v33, v60, v51, v168, fv172, ft6, fa6, fv188, a4, v27, v183, ft5, v165, v116, v87, v171, v49, fa4, v208, v133, ft2, v17, a3, v52, v147, v31, v196, v113, v167, v101, fa7, v203, v204, fa3, ft3, v136, t2, v140, fv106, v61, v55, v3, t1, v199, v69, v127, v13, v120, v134, v107, v149, fv40, v93, v115, v109, v142, fv139, v126, fv211, v19, v103, fv123, v81, v128, v57, v122, ft7, v11, v71, fv45, v46, a5, fv180, v158, v125, a0, v78, v36, v111, v202, s10, v138, v39, v187, v175, v118, t0, v94, v182, v209, v124, fv146, fv155, fa0, v152, v38, v70, v100], uses: [v159, v67, v150, a1, s11, v44, v191, v99, v169, v151, v166, v59, v6, v117, v102, v154, v119, v110, v157, v92, v184, v141, v206, v190, fv50, v156, v96, v181, v163, v132, fv164, v174, v25, v179, v7, v41, v177, v108, v143, v192, v86, v185, v98, v173, v161, v130, v29, zero, v8, v105, v90, v89, v34, v66, v21, a2, v160, v9, v145, v176, v56, v23, v77, v148, v80, v15, v195, fv131, v135, v2, fv114, v76, fv97, fv35, v200, v60, v51, fv172, v168, fv188, v27, a4, v183, v165, v116, v87, v171, v49, v208, v133, v17, a3, v147, v196, v31, v113, v167, v101, v203, v204, v136, v140, fv106, v61, v55, v3, v199, v69, v127, v13, v120, v134, v107, v149, fv40, v93, v109, v115, v142, fv139, v126, v19, v103, fv123, v81, v128, v57, v122, v11, v71, fv45, v46, a5, fv180, v158, v125, a0, v78, v36, v111, v187, v138, v39, v118, v175, v94, v209, v182, v124, fv146, fv155, fa0, v152, v70, v100, v189], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: []
; block parameters: []
.main_b0:
  addi v209, s11, 0  ; live: [zero, s11]
  andi v2, v209, -8  ; live: [v209, zero, s11]
  fmv.d.x fv211, zero  ; live: [zero, s11, v2]
  addi v206, s11, -16  ; live: [zero, s11, v2]
  andi v3, v206, -8  ; live: [zero, s11, v206, v2]
  la v208, gen_arr  ; live: [v2, zero, s11, v3]
  sd v208, 0(v3)  ; live: [v2, zero, v208, s11, v3]
  sd v2, 8(v3)  ; live: [v2, zero, s11, v3]
  mv s10, v3  ; live: [zero, s11, v3]
  ld v202, 0(v3)  ; live: [zero, s11, v3]
  li v203, 2  ; live: [zero, s11, v3]
  mv a0, v203  ; live: [v203, zero, s11, v3]
  li v204, 3  ; live: [zero, a0, s11, v3]
  mv a1, v204  ; live: [v204, zero, a0, s11, v3]
  jalr v202  ; live: [zero, a0, a1, s11, v3]
  mv v6, a0  ; live: [zero, a0, s11, v3]
  mv s10, v3  ; live: [zero, v6, s11, v3]
  ld v198, 0(v3)  ; live: [zero, v6, s11, v3]
  li v199, 3  ; live: [zero, v6, s11, v3]
  mv a0, v199  ; live: [v199, zero, v6, s11, v3]
  li v200, 2  ; live: [zero, a0, v6, s11, v3]
  mv a1, v200  ; live: [zero, a0, v6, s11, v200, v3]
  jalr v198  ; live: [zero, a0, v6, a1, s11, v3]
  mv v7, a0  ; live: [zero, a0, v6, s11, v3]
  mv s10, v3  ; live: [zero, v7, v6, s11, v3]
  ld v194, 0(v3)  ; live: [zero, v7, v6, s11, v3]
  li v195, 2  ; live: [zero, v7, v6, s11]
  mv a0, v195  ; live: [zero, v7, v6, s11, v195]
  li v196, 2  ; live: [zero, a0, v7, v6, s11]
  mv a1, v196  ; live: [zero, a0, v7, v6, s11, v196]
  jalr v194  ; live: [zero, a0, v7, v6, a1, s11]
  mv v8, a0  ; live: [zero, a0, v7, v6, s11]
  slli v191, zero, 3  ; live: [zero, v7, v8, v6, s11]
  add v192, v6, v191  ; live: [zero, v7, v8, v6, s11, v191]
  ld v9, 0(v192)  ; live: [zero, v7, v8, v6, s11, v192]
  li v187, 4607182418800017408  ; live: [zero, v7, v8, v6, s11, v9]
  fmv.d.x fv188, v187  ; live: [zero, v7, v8, v6, s11, v9, v187]
  slli v189, zero, 3  ; live: [zero, fv188, v7, v8, v6, s11, v9]
  add v190, v9, v189  ; live: [zero, fv188, v7, v8, v6, s11, v9, v189]
  fsd fv188, 0(v190)  ; live: [zero, fv188, v7, v8, v6, s11, v190]
  slli v184, zero, 3  ; live: [zero, v7, v8, v6, s11]
  add v185, v6, v184  ; live: [zero, v7, v8, v184, v6, s11]
  ld v11, 0(v185)  ; live: [zero, v7, v8, v6, s11, v185]
  li v179, 4611686018427387904  ; live: [v11, zero, v7, v8, v6, s11]
  fmv.d.x fv180, v179  ; live: [v11, v179, zero, v7, v8, v6, s11]
  li v181, 1  ; live: [v11, zero, fv180, v7, v8, v6, s11]
  slli v182, v181, 3  ; live: [v11, zero, fv180, v7, v8, v6, v181, s11]
  add v183, v11, v182  ; live: [v11, v182, zero, fv180, v7, v8, v6, s11]
  fsd fv180, 0(v183)  ; live: [zero, fv180, v7, v8, v183, v6, s11]
  slli v176, zero, 3  ; live: [zero, v7, v8, v6, s11]
  add v177, v6, v176  ; live: [v176, zero, v7, v8, v6, s11]
  ld v13, 0(v177)  ; live: [zero, v7, v8, v6, v177, s11]
  li v171, 4613937818241073152  ; live: [zero, v13, v7, v8, v6, s11]
  fmv.d.x fv172, v171  ; live: [v171, zero, v13, v7, v8, v6, s11]
  li v173, 2  ; live: [fv172, zero, v13, v7, v8, v6, s11]
  slli v174, v173, 3  ; live: [fv172, zero, v13, v7, v8, v6, s11, v173]
  add v175, v13, v174  ; live: [fv172, v174, zero, v13, v7, v8, v6, s11]
  fsd fv172, 0(v175)  ; live: [fv172, v175, zero, v7, v8, v6, s11]
  li v167, 1  ; live: [zero, v7, v8, v6, s11]
  slli v168, v167, 3  ; live: [zero, v7, v8, v6, s11, v167]
  add v169, v6, v168  ; live: [v168, zero, v7, v8, v6, s11]
  ld v15, 0(v169)  ; live: [zero, v169, v7, v8, v6, s11]
  li v163, 4616189618054758400  ; live: [zero, v7, v8, v6, s11, v15]
  fmv.d.x fv164, v163  ; live: [zero, v7, v8, v6, s11, v15, v163]
  slli v165, zero, 3  ; live: [fv164, zero, v7, v8, v6, s11, v15]
  add v166, v15, v165  ; live: [fv164, v165, zero, v7, v8, v6, s11, v15]
  fsd fv164, 0(v166)  ; live: [fv164, zero, v7, v8, v166, v6, s11]
  li v159, 1  ; live: [zero, v7, v8, v6, s11]
  slli v160, v159, 3  ; live: [zero, v159, v7, v8, v6, s11]
  add v161, v6, v160  ; live: [zero, v7, v8, v6, s11, v160]
  ld v17, 0(v161)  ; live: [v161, zero, v7, v8, v6, s11]
  li v154, 4617315517961601024  ; live: [zero, v7, v8, v6, v17, s11]
  fmv.d.x fv155, v154  ; live: [zero, v7, v8, v6, v17, s11, v154]
  li v156, 1  ; live: [fv155, zero, v7, v8, v6, v17, s11]
  slli v157, v156, 3  ; live: [v156, fv155, zero, v7, v8, v6, v17, s11]
  add v158, v17, v157  ; live: [fv155, zero, v7, v8, v157, v6, v17, s11]
  fsd fv155, 0(v158)  ; live: [fv155, zero, v158, v7, v8, v6, s11]
  li v150, 1  ; live: [zero, v7, v8, v6, s11]
  slli v151, v150, 3  ; live: [zero, v7, v8, v150, v6, s11]
  add v152, v6, v151  ; live: [zero, v7, v8, v151, v6, s11]
  ld v19, 0(v152)  ; live: [zero, v7, v8, v152, v6, s11]
  li v145, 4618441417868443648  ; live: [zero, v7, v8, v19, v6, s11]
  fmv.d.x fv146, v145  ; live: [zero, v7, v8, v19, v6, s11, v145]
  li v147, 2  ; live: [fv146, zero, v7, v8, v19, v6, s11]
  slli v148, v147, 3  ; live: [fv146, zero, v7, v8, v19, v6, s11, v147]
  add v149, v19, v148  ; live: [fv146, zero, v7, v8, v148, v19, v6, s11]
  fsd fv146, 0(v149)  ; live: [fv146, zero, v7, v8, v6, s11, v149]
  slli v142, zero, 3  ; live: [zero, v7, v8, v6, s11]
  add v143, v7, v142  ; live: [v142, zero, v7, v8, v6, s11]
  ld v21, 0(v143)  ; live: [zero, v7, v8, v6, s11, v143]
  li v138, 4619567317775286272  ; live: [v21, zero, v7, v8, v6, s11]
  fmv.d.x fv139, v138  ; live: [v21, zero, v7, v8, v6, s11, v138]
  slli v140, zero, 3  ; live: [fv139, v21, zero, v7, v8, v6, s11]
  add v141, v21, v140  ; live: [fv139, v21, zero, v7, v8, v6, v140, s11]
  fsd fv139, 0(v141)  ; live: [fv139, zero, v7, v8, v141, v6, s11]
  slli v135, zero, 3  ; live: [zero, v7, v8, v6, s11]
  add v136, v7, v135  ; live: [zero, v7, v8, v6, s11, v135]
  ld v23, 0(v136)  ; live: [zero, v7, v8, v136, v6, s11]
  li v130, 4620693217682128896  ; live: [zero, v23, v7, v8, v6, s11]
  fmv.d.x fv131, v130  ; live: [v130, zero, v23, v7, v8, v6, s11]
  li v132, 1  ; live: [zero, v23, v7, v8, v6, s11, fv131]
  slli v133, v132, 3  ; live: [zero, v23, v7, v8, v6, s11, fv131, v132]
  add v134, v23, v133  ; live: [zero, v23, v133, v7, v8, v6, s11, fv131]
  fsd fv131, 0(v134)  ; live: [zero, v8, v7, v134, v6, s11, fv131]
  li v126, 1  ; live: [zero, v8, v7, v6, s11]
  slli v127, v126, 3  ; live: [zero, v126, v8, v7, v6, s11]
  add v128, v7, v127  ; live: [v127, zero, v8, v7, v6, s11]
  ld v25, 0(v128)  ; live: [zero, v8, v7, v6, s11, v128]
  li v122, 4621256167635550208  ; live: [v25, zero, v8, v7, v6, s11]
  fmv.d.x fv123, v122  ; live: [v25, zero, v8, v7, v6, s11, v122]
  slli v124, zero, 3  ; live: [v25, zero, v8, v7, fv123, v6, s11]
  add v125, v25, v124  ; live: [v25, v124, zero, v8, v7, fv123, v6, s11]
  fsd fv123, 0(v125)  ; live: [zero, v125, v8, v7, fv123, v6, s11]
  li v118, 1  ; live: [zero, v8, v7, v6, s11]
  slli v119, v118, 3  ; live: [v118, zero, v8, v7, v6, s11]
  add v120, v7, v119  ; live: [zero, v119, v8, v7, v6, s11]
  ld v27, 0(v120)  ; live: [zero, v120, v8, v7, v6, s11]
  li v113, 4621819117588971520  ; live: [zero, v27, v8, v7, v6, s11]
  fmv.d.x fv114, v113  ; live: [zero, v27, v8, v7, v6, s11, v113]
  li v115, 1  ; live: [zero, v27, v8, v7, v6, s11, fv114]
  slli v116, v115, 3  ; live: [v115, zero, v27, v8, v7, v6, s11, fv114]
  add v117, v27, v116  ; live: [v116, zero, v27, v8, v7, v6, s11, fv114]
  fsd fv114, 0(v117)  ; live: [zero, v8, v7, v6, s11, v117, fv114]
  li v109, 2  ; live: [zero, v8, v7, v6, s11]
  slli v110, v109, 3  ; live: [v109, zero, v8, v7, v6, s11]
  add v111, v7, v110  ; live: [zero, v110, v8, v7, v6, s11]
  ld v29, 0(v111)  ; live: [zero, v8, v7, v6, v111, s11]
  li v105, 4622382067542392832  ; live: [zero, v29, v8, v7, v6, s11]
  fmv.d.x fv106, v105  ; live: [zero, v29, v8, v7, v105, v6, s11]
  slli v107, zero, 3  ; live: [zero, v29, v8, v7, v6, fv106, s11]
  add v108, v29, v107  ; live: [zero, v29, v8, v7, v107, v6, fv106, s11]
  fsd fv106, 0(v108)  ; live: [zero, v8, v7, v6, fv106, v108, s11]
  li v101, 2  ; live: [zero, v8, v7, v6, s11]
  slli v102, v101, 3  ; live: [zero, v8, v7, v6, s11, v101]
  add v103, v7, v102  ; live: [zero, v8, v7, v6, s11, v102]
  ld v31, 0(v103)  ; live: [zero, v8, v7, v103, v6, s11]
  li v96, 4622945017495814144  ; live: [zero, v8, v7, v6, s11, v31]
  fmv.d.x fv97, v96  ; live: [v96, zero, v8, v7, v6, s11, v31]
  li v98, 1  ; live: [fv97, zero, v8, v7, v6, s11, v31]
  slli v99, v98, 3  ; live: [fv97, zero, v8, v7, v6, s11, v31, v98]
  add v100, v31, v99  ; live: [fv97, v99, zero, v8, v7, v6, s11, v31]
  fsd fv97, 0(v100)  ; live: [fv97, zero, v8, v7, v6, s11, v100]
  li v92, 2  ; live: [zero, v8, v7, v6, s11]
  mv a0, v92  ; live: [zero, v8, v7, v92, v6, s11]
  li v93, 3  ; live: [zero, a0, v8, v7, v6, s11]
  mv a1, v93  ; live: [zero, a0, v8, v7, v6, s11, v93]
  li v94, 2  ; live: [zero, a0, v8, v7, a1, v6, s11]
  mv a2, v94  ; live: [v94, zero, a0, v8, v7, a1, v6, s11]
  mv a3, v6  ; live: [zero, a0, v8, v7, a2, a1, v6, s11]
  mv a4, v7  ; live: [zero, a0, v8, v7, a2, a1, s11, a3]
  mv a5, v8  ; live: [zero, a0, a4, v8, a2, a1, s11, a3]
  call matmul  ; live: [a5, zero, a0, a4, v8, a2, a1, s11, a3]
  mv v33, zero  ; live: [s11, zero, v8]
  slli v89, zero, 3  ; live: [s11, zero, v8]
  add v90, v8, v89  ; live: [s11, zero, v89, v8]
  ld v34, 0(v90)  ; live: [v90, s11, zero, v8]
  slli v86, zero, 3  ; live: [s11, zero, v34, v8]
  add v87, v34, v86  ; live: [s11, v86, zero, v34, v8]
  fld fv35, 0(v87)  ; live: [v87, s11, zero, v8]
  fmv.d fa0, fv35  ; live: [s11, fv35, zero, v8]
  call minimbt_truncate  ; live: [fa0, s11, zero, v8]
  mv v36, a0  ; live: [s11, zero, a0, v8]
  mv a0, v36  ; live: [v36, s11, zero, v8]
  call minimbt_print_int  ; live: [s11, zero, a0, v8]
  mv v37, zero  ; live: [s11, zero, v8]
  call minimbt_print_endline  ; live: [s11, zero, v8]
  mv v38, zero  ; live: [s11, zero, v8]
  slli v80, zero, 3  ; live: [s11, zero, v8]
  add v81, v8, v80  ; live: [v80, s11, zero, v8]
  ld v39, 0(v81)  ; live: [v81, s11, zero, v8]
  li v76, 1  ; live: [s11, zero, v39, v8]
  slli v77, v76, 3  ; live: [v76, s11, zero, v39, v8]
  add v78, v39, v77  ; live: [v8, s11, zero, v39, v77]
  fld fv40, 0(v78)  ; live: [s11, zero, v78, v8]
  fmv.d fa0, fv40  ; live: [s11, zero, fv40, v8]
  call minimbt_truncate  ; live: [fa0, s11, zero, v8]
  mv v41, a0  ; live: [s11, zero, a0, v8]
  mv a0, v41  ; live: [v41, s11, zero, v8]
  call minimbt_print_int  ; live: [s11, zero, a0, v8]
  mv v42, zero  ; live: [s11, zero, v8]
  call minimbt_print_endline  ; live: [s11, zero, v8]
  mv v43, zero  ; live: [s11, zero, v8]
  li v69, 1  ; live: [s11, zero, v8]
  slli v70, v69, 3  ; live: [v69, s11, zero, v8]
  add v71, v8, v70  ; live: [v70, s11, zero, v8]
  ld v44, 0(v71)  ; live: [v71, s11, zero, v8]
  slli v66, zero, 3  ; live: [s11, v44, zero, v8]
  add v67, v44, v66  ; live: [v66, s11, v44, zero, v8]
  fld fv45, 0(v67)  ; live: [s11, zero, v67, v8]
  fmv.d fa0, fv45  ; live: [fv45, s11, zero, v8]
  call minimbt_truncate  ; live: [fa0, s11, zero, v8]
  mv v46, a0  ; live: [s11, zero, a0, v8]
  mv a0, v46  ; live: [v46, s11, zero, v8]
  call minimbt_print_int  ; live: [s11, zero, a0, v8]
  mv v47, zero  ; live: [s11, zero, v8]
  call minimbt_print_endline  ; live: [s11, zero, v8]
  mv v48, zero  ; live: [s11, zero, v8]
  li v59, 1  ; live: [s11, zero, v8]
  slli v60, v59, 3  ; live: [v59, s11, zero, v8]
  add v61, v8, v60  ; live: [s11, zero, v60, v8]
  ld v49, 0(v61)  ; live: [s11, v61, zero]
  li v55, 1  ; live: [s11, v49, zero]
  slli v56, v55, 3  ; live: [s11, v49, zero, v55]
  add v57, v49, v56  ; live: [s11, v49, v56, zero]
  fld fv50, 0(v57)  ; live: [s11, v57, zero]
  fmv.d fa0, fv50  ; live: [fv50, s11, zero]
  call minimbt_truncate  ; live: [s11, zero, fa0]
  mv v51, a0  ; live: [s11, zero, a0]
  mv a0, v51  ; live: [s11, zero, v51]
  call minimbt_print_int  ; live: [s11, zero, a0]
  mv v52, zero  ; live: [s11, zero]
; control
  mv a0, zero  ; live: [s11, zero]
  ret  ; live: [s11, zero, a0]

  .p2align 3
  .globl init_arr
  .type init_arr, @function
init_arr:
; block info: defs: [v3, v0, v4, v6, v22, v2], uses: [a0, zero, v22, v0, v6, s10, v2], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s11, s10, a0, zero], live_out: [v2, zero, v0, v4, s11, v3]
; block parameters: []
.init_arr_b0:
  mv v0, s10  ; live: [a0, zero, s11, s10]
  mv v2, a0  ; live: [a0, zero, v0, s11, s10]
  lw v3, 8(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v4, 16(v0)  ; live: [v2, v0, s11, s10, a0, zero]
  slt v22, zero, v2  ; live: [v2, s11, s10, a0, zero]
  xori v6, v22, 1  ; live: [v22, s11, s10, a0, zero]
; control
  bne v6, zero, .init_arr_b1  ; live: [v6, s11, s10, a0, zero]
  j .init_arr_b2  ; live: [s11, s10, a0, zero]

; block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
; live_in: [v11], live_out: []
; block parameters: [v11]
.init_arr_b3:
; control
  mv a0, v11  ; live: [v11]
  ret  ; live: [v11, a0]

; block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v11]
; block parameters: []
.init_arr_b2:
; control
  mv v11, zero  ; live: [zero]
  j .init_arr_b3  ; live: [zero]

; block info: defs: [t1, v16, v14, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, a6, v19, ft5, ft10, fv21, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v3, v5, v16, v14, v10, a0, v0, a1, v17, s11, v9, v18, zero, fa0, v19, v4, fv21, v2], upward_exposed: [v3, zero, v0, v4, s11, v2], params_defs: []
; live_in: [v3, zero, v0, v4, s11, v2], live_out: [v11]
; block parameters: []
.init_arr_b1:
  slli v18, v3, 3  ; live: [v3, zero, v0, v4, s11, v2]
  sub v19, s11, v18  ; live: [v3, v18, zero, v0, v4, s11, v2]
  andi v5, v19, -8  ; live: [v3, zero, v0, v19, v4, s11, v2]
  fmv.d.x fv21, zero  ; live: [v3, v5, zero, v0, v4, s11, v2]
  mv a1, v3  ; live: [v3, v5, zero, v0, v4, s11, fv21, v2]
  mv a0, v5  ; live: [v3, v5, zero, v0, v4, a1, s11, fv21, v2]
  fmv.d fa0, fv21  ; live: [v3, v5, zero, a0, v0, v4, a1, s11, fv21, v2]
  call _memsetf64  ; live: [v3, v5, zero, a0, fa0, v0, v4, a1, s11, v2]
  slli v16, v2, 3  ; live: [v3, v5, zero, v0, v4, s11, v2]
  add v17, v4, v16  ; live: [v3, v5, v16, zero, v0, v4, s11, v2]
  sd v5, 0(v17)  ; live: [v3, v5, zero, v0, v4, v17, s11, v2]
  li v14, 1  ; live: [v3, zero, v0, v4, s11, v2]
  sub v9, v2, v14  ; live: [v3, v14, zero, v0, v4, s11, v2]
  mv s10, v0  ; live: [v3, zero, v0, v4, s11, v9, v2]
  ld v12, 0(v0)  ; live: [v3, zero, v0, v4, s11, v9, v2]
  mv a0, v9  ; live: [v3, zero, v0, v4, s11, v9, v2]
  jalr v12  ; live: [v3, zero, a0, v0, v4, s11, v2]
  mv v10, zero  ; live: [v3, zero, v0, v4, s11, v2]
; control
  mv v11, v10  ; live: [v3, v10, zero, v0, v4, s11, v2]
  j .init_arr_b3  ; live: [v2, v0, v4, s11, zero, v3]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl loop3
  .type loop3, @function
loop3:
; block info: defs: [v2, v51, v5, v7, v8, v0, v4, v6, v3], uses: [v51, a0, zero, v8, v0, s10, v2], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s10, a0, zero], live_out: [v3, v5, zero, v7, v0, v4, v6, v2]
; block parameters: []
.loop3_b0:
  mv v0, s10  ; live: [s10, a0, zero]
  mv v2, a0  ; live: [v0, s10, a0, zero]
  lw v3, 8(v0)  ; live: [v2, v0, s10, a0, zero]
  lw v4, 16(v0)  ; live: [v2, v0, s10, a0, zero]
  lw v5, 24(v0)  ; live: [v2, v0, s10, a0, zero]
  lw v6, 32(v0)  ; live: [v2, v0, s10, a0, zero]
  lw v7, 40(v0)  ; live: [v2, v0, s10, a0, zero]
  slt v51, zero, v2  ; live: [v2, s10, a0, zero]
  xori v8, v51, 1  ; live: [v51, s10, a0, zero]
; control
  bne v8, zero, .loop3_b1  ; live: [v8, s10, a0, zero]
  j .loop3_b2  ; live: [s10, a0, zero]

; block info: defs: [v22, a1, fv15, t5, v33, fa1, fa2, ft6, v27, a4, fa6, v20, a6, ft5, ft10, ft4, v10, v49, ft9, fa4, ft2, v37, v43, a3, v31, a7, fa7, v48, fa3, fv11, ft3, v45, t2, fv17, v40, t1, v14, v42, v26, ft0, ft1, v12, fv16, v19, v34, ft7, v46, v21, a5, a0, v30, v36, a2, v24, s10, v9, v39, ft8, t3, t0, fa5, fv13, fa0, t4], uses: [v2, v40, v14, v42, v26, v7, v0, v12, fv15, fv16, v33, zero, v27, v20, v19, v4, v6, v34, v46, v5, v10, v49, a0, v30, v36, v37, v43, v24, v31, v9, v39, v48, fv11, v45, fv13, fv17, v3], upward_exposed: [v3, v5, zero, v7, v0, v4, v6, v2], params_defs: []
; live_in: [v2, v5, zero, v7, v0, v4, v6, v3], live_out: [v21]
; block parameters: []
.loop3_b1:
  slli v48, v4, 3  ; live: [v3, v5, zero, v7, v0, v4, v6, v2]
  add v49, v3, v48  ; live: [v3, v5, v48, zero, v7, v0, v4, v6, v2]
  ld v9, 0(v49)  ; live: [v3, v5, v49, zero, v7, v0, v4, v6, v2]
  slli v45, v4, 3  ; live: [v3, v5, zero, v7, v0, v4, v6, v9, v2]
  add v46, v3, v45  ; live: [v3, v5, zero, v7, v45, v0, v4, v6, v9, v2]
  ld v10, 0(v46)  ; live: [v3, v5, v46, zero, v7, v0, v4, v6, v9, v2]
  slli v42, v5, 3  ; live: [v3, v5, v10, zero, v7, v0, v4, v6, v9, v2]
  add v43, v10, v42  ; live: [v3, v5, v10, zero, v42, v7, v0, v4, v6, v9, v2]
  fld fv11, 0(v43)  ; live: [v3, v5, zero, v7, v0, v4, v6, v43, v9, v2]
  slli v39, v4, 3  ; live: [v3, v5, zero, fv11, v7, v0, v4, v6, v9, v2]
  add v40, v6, v39  ; live: [v3, v5, zero, fv11, v7, v0, v4, v6, v9, v39, v2]
  ld v12, 0(v40)  ; live: [v3, v40, v5, zero, fv11, v7, v0, v4, v6, v9, v2]
  slli v36, v2, 3  ; live: [v3, v5, zero, fv11, v7, v0, v4, v6, v12, v9, v2]
  add v37, v12, v36  ; live: [v3, v5, zero, fv11, v7, v36, v0, v4, v6, v12, v9, v2]
  fld fv13, 0(v37)  ; live: [v3, v5, zero, fv11, v7, v0, v4, v37, v6, v9, v2]
  slli v33, v2, 3  ; live: [v3, v5, zero, fv11, fv13, v7, v0, v4, v6, v9, v2]
  add v34, v7, v33  ; live: [v3, v5, zero, fv11, fv13, v7, v0, v4, v6, v9, v33, v2]
  ld v14, 0(v34)  ; live: [v3, v5, zero, fv11, fv13, v7, v0, v4, v6, v9, v34, v2]
  slli v30, v5, 3  ; live: [v3, v5, v14, zero, fv11, fv13, v7, v0, v4, v6, v9, v2]
  add v31, v14, v30  ; live: [v3, v5, v14, zero, fv11, v30, fv13, v7, v0, v4, v6, v9, v2]
  fld fv15, 0(v31)  ; live: [v3, v5, zero, fv11, v7, fv13, v0, v4, v6, v31, v9, v2]
  fmul.d fv16, fv13, fv15  ; live: [v3, v5, zero, fv11, v7, fv13, v0, v4, v6, fv15, v9, v2]
  fadd.d fv17, fv11, fv16  ; live: [v3, v5, zero, fv11, v7, v0, v4, v6, fv16, v9, v2]
  slli v26, v5, 3  ; live: [v3, v5, zero, v7, v0, v4, v6, fv17, v9, v2]
  add v27, v9, v26  ; live: [v3, v5, zero, v26, v7, v0, v4, v6, fv17, v9, v2]
  fsd fv17, 0(v27)  ; live: [v3, v5, zero, v27, v7, v0, v4, v6, fv17, v2]
  li v24, 1  ; live: [v3, v5, zero, v7, v0, v4, v6, v2]
  sub v19, v2, v24  ; live: [v3, v5, zero, v7, v0, v4, v6, v24, v2]
  mv s10, v0  ; live: [v3, v5, zero, v7, v0, v19, v4, v6, v2]
  ld v22, 0(v0)  ; live: [v3, v5, zero, v7, v0, v19, v4, v6, v2]
  mv a0, v19  ; live: [v3, v5, zero, v7, v0, v19, v4, v6, v2]
  jalr v22  ; live: [v3, v5, zero, a0, v7, v0, v4, v6, v2]
  mv v20, zero  ; live: [v3, v5, zero, v7, v0, v4, v6, v2]
; control
  mv v21, v20  ; live: [v3, v5, zero, v20, v7, v0, v4, v6, v2]
  j .loop3_b3  ; live: [v3, v5, zero, v7, v0, v4, v6, v2]

; block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v21]
; block parameters: []
.loop3_b2:
; control
  mv v21, zero  ; live: [zero]
  j .loop3_b3  ; live: [zero]

; block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
; live_in: [v21], live_out: []
; block parameters: [v21]
.loop3_b3:
; control
  mv a0, v21  ; live: [v21]
  ret  ; live: [v21, a0]

  .p2align 3
  .globl loop1
  .type loop1, @function
loop1:
; block info: defs: [v2, v5, v27, v7, v0, v4, v6, v9, v3], uses: [a0, zero, v27, v0, s10, v9, v2], upward_exposed: [s10, a0, zero], params_defs: []
; live_in: [s11, s10, a0, zero], live_out: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
; block parameters: []
.loop1_b0:
  mv v0, s10  ; live: [a0, zero, s11, s10]
  mv v2, a0  ; live: [a0, zero, v0, s11, s10]
  lw v3, 8(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v4, 16(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v5, 24(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v6, 32(v0)  ; live: [a0, zero, v0, s11, s10, v2]
  lw v7, 40(v0)  ; live: [v2, v0, s11, s10, a0, zero]
  slt v27, zero, v2  ; live: [v2, s11, s10, a0, zero]
  xori v9, v27, 1  ; live: [v27, s11, s10, a0, zero]
; control
  bne v9, zero, .loop1_b1  ; live: [v9, s11, s10, a0, zero]
  j .loop1_b2  ; live: [s11, s10, a0, zero]

; block info: defs: [t1, v16, v14, v26, v13, v22, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, v20, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v11, v5, v14, v26, a0, v13, v22, v7, v0, v24, s11, v18, zero, v8, v4, v6, v2], upward_exposed: [v3, v5, zero, v7, v0, v4, v6, s11, v2], params_defs: []
; live_in: [v2, v5, zero, v7, v0, v4, v6, s11, v3], live_out: [v15]
; block parameters: []
.loop1_b1:
  addi v24, s11, -48  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
  andi v8, v24, -8  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v24, v2]
  la v26, loop2  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v26, 0(v8)  ; live: [v3, v5, zero, v26, v7, v8, v0, v4, v6, s11, v2]
  sd v3, 8(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v2, 16(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v4, 24(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v5, 32(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sd v6, 40(v8)  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  li v22, 1  ; live: [v3, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  sub v11, v7, v22  ; live: [v3, v5, zero, v22, v7, v8, v0, v4, v6, s11, v2]
  mv s10, v8  ; live: [v3, v11, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  ld v20, 0(v8)  ; live: [v3, v11, v5, zero, v7, v8, v0, v4, v6, s11, v2]
  mv a0, v11  ; live: [v3, v11, v5, zero, v7, v0, v4, v6, s11, v2]
  jalr v20  ; live: [v3, v5, zero, a0, v7, v0, v4, v6, s11, v2]
  mv v12, zero  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
  li v18, 1  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
  sub v13, v2, v18  ; live: [v3, v5, v18, zero, v7, v0, v4, v6, s11, v2]
  mv s10, v0  ; live: [v3, v5, zero, v13, v7, v0, v4, v6, s11, v2]
  ld v16, 0(v0)  ; live: [v3, v5, zero, v13, v7, v0, v4, v6, s11, v2]
  mv a0, v13  ; live: [v3, v5, zero, v13, v7, v0, v4, v6, s11, v2]
  jalr v16  ; live: [v3, v5, zero, a0, v7, v0, v4, v6, s11, v2]
  mv v14, zero  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]
; control
  mv v15, v14  ; live: [v3, v5, v14, zero, v7, v0, v4, v6, s11, v2]
  j .loop1_b3  ; live: [v3, v5, zero, v7, v0, v4, v6, s11, v2]

; block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v15]
; block parameters: []
.loop1_b2:
; control
  mv v15, zero  ; live: [zero]
  j .loop1_b3  ; live: [zero]

; block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
; live_in: [v15], live_out: []
; block parameters: [v15]
.loop1_b3:
; control
  mv a0, v15  ; live: [v15]
  ret  ; live: [v15, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/non-tail-if.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn thunk_start #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b6 (int32) {
    let %6: int32 = add($b3.0, $b6.0)
    let %7: bool = le(0, %1)
    br %7 b7() b8()
  }
  .bb #b4 () {
    jump b6(%1)
  }
  .bb #b8 () {
    jump b9(%0)
  }
  .bb #b9 (int32) {
    let %8: int32 = add(%6, $b9.0)
    let %9: unit = ext_call minimbt_print_int(%8)
    return %9
  }
  .bb #b0 () {
    let %0: int32 = ext_call minimbt_truncate(1.23)
    let %1: int32 = ext_call minimbt_truncate(4.56)
    let %2: double = neg(7.89)
    let %3: int32 = ext_call minimbt_truncate(%2)
    let %4: bool = le(0, %3)
    br %4 b1() b2()
  }
  .bb #b1 () {
    jump b3(%0)
  }
  .bb #b5 () {
    jump b6(%3)
  }
  .bb #b2 () {
    jump b3(%1)
  }
  .bb #b3 (int32) {
    let %5: bool = le(%0, 0)
    br %5 b4() b5()
  }
  .bb #b7 () {
    jump b9(%3)
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="v2 ← a0", color=green];
  r20 [label="fv4 ← a0", color=green];
  r23 [label="v20 ← a2", color=green];
  r3 [label="v3 ← a0", color=green];
  r9 [label="v12 ← a1", color=green];
  r6 [label="v9 ← a1", color=green];
  r13 [label="v31 ← a0", color=green];
  r4 [label="v10 ← a0", color=green];
  r1 [label="v5 ← a1", color=green];
  r11 [label="a0", color=blue];
  r7 [label="v17 ← a2", color=green];
  r10 [label="v13 ← a0", color=green];
  r22 [label="v6 ← a0", color=green];
  r14 [label="fv32 ← a0", color=green];
  r8 [label="v11 ← a2", color=green];
  r5 [label="v7 ← a1", color=green];
  r15 [label="fa0", color=blue];
  r24 [label="v8 ← a0", color=green];
  r2 [label="zero", color=blue];
  r16 [label="v28 ← a0", color=green];
  r18 [label="v25 ← a0", color=green];
  r19 [label="fv26 ← a0", color=green];
  r21 [label="v22 ← a0", color=green];
  r17 [label="fv29 ← a0", color=green];
  r12 [label="v14 ← a2", color=green];
  r6 -- r7;
  r1 -- r8;
  r2 -- r4;
  r5 -- r8;
  r2 -- r18;
  r0 -- r24;
  r1 -- r4;
  r1 -- r23;
  r3 -- r6;
  r5 -- r23;
  r1 -- r7;
  r2 -- r10;
  r0 -- r23;
  r2 -- r16;
  r3 -- r24;
  r2 -- r7;
  r2 -- r11;
  r3 -- r5;
  r6 -- r8;
  r0 -- r6;
  r3 -- r8;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r4 -- r11;
  r0 -- r2;
  r5 -- r24;
  r0 -- r3;
  r0 -- r8;
  r9 -- r12;
  r2 -- r12;
  r2 -- r8;
  r0 -- r5;
  r2 -- r21;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r2 -- r13;
  r5 -- r7;
  r9 -- r10;
  r3 -- r7;
  r1 -- r6;
  r2 -- r22;
  r1 -- r5;
  r0 -- r4;
  r2 -- r9;
  r2 -- r24;
  r4 -- r10;
  r1 -- r3;
  r0 -- r7;
  r2 -- r3;
  r3 -- r23;
  r4 -- r9;
  r2 -- r23;
  r1 -- r24;
  comment = "24:v8-> 3:v3-> 0:v2-> 5:v7-> 1:v5-> 2:zero-> 20:fv4-> 19:fv26-> 6:v9-> 9:v12-> 11:a0-> 4:v10-> 22:v6-> 15:fa0-> 23:v20-> 13:v31-> 8:v11-> 10:v13-> 21:v22-> 7:v17-> 12:v14-> 14:fv32-> 18:v25-> 17:fv29-> 16:v28"
  comment = "v2<-a0;fv4<-a0;v20<-a2;v3<-a0;v12<-a1;v9<-a1;v31<-a0;v10<-a0;v5<-a1;v17<-a2;v13<-a0;v6<-a0;fv32<-a0;v11<-a2;v7<-a1;v8<-a0;v28<-a0;v25<-a0;fv26<-a0;v22<-a0;fv29<-a0;v14<-a2;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, v25, t1, v22, ft0, ft1, a1, t5, v28, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, fv32, ft9, a5, a0, fa4, ft2, a2, fv4, a3, v31, fv26, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, fv29, t4, t2, v2], uses: [v25, v5, fv32, a0, v22, fv4, v31, v28, fv26, zero, fa0, fv29, v6], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v3, v5, zero, v2]
; block parameters: []
.main_b0:
  li v31, 4608218246714312622  ; live: [zero]
  fmv.d.x fv32, v31  ; live: [v31, zero]
  fmv.d fa0, fv32  ; live: [fv32, zero]
  call minimbt_truncate  ; live: [zero, fa0]
  mv v2, a0  ; live: [zero, a0]
  li v28, 4616820122002590269  ; live: [zero]
  fmv.d.x fv29, v28  ; live: [v28, zero]
  fmv.d fa0, fv29  ; live: [fv29, zero]
  call minimbt_truncate  ; live: [zero, fa0]
  mv v3, a0  ; live: [zero, a0]
  li v25, 4620569368692376207  ; live: [zero]
  fmv.d.x fv26, v25  ; live: [v25, zero]
  fneg.d fv4, fv26  ; live: [zero, fv26]
  fmv.d fa0, fv4  ; live: [fv4, zero]
  call minimbt_truncate  ; live: [zero, fa0]
  mv v5, a0  ; live: [zero, a0]
  slt v22, zero, v5  ; live: [v5, zero]
  xori v6, v22, 1  ; live: [zero, v22]
; control
  bne v6, zero, .main_b1  ; live: [v6, zero]
  j .main_b2  ; live: [zero]

; block info: defs: [v7], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v3, v5, zero, v2], live_out: [v7, v3, v5, zero, v2]
; block parameters: []
.main_b1:
; control
  mv v7, v2  ; live: [v2, v5, zero, v3]
  j .main_b3  ; live: [v2, v5, zero, v3]

; block info: defs: [v12], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v10, zero, v2], live_out: [v12, v10, zero]
; block parameters: []
.main_b8:
; control
  mv v12, v2  ; live: [v10, zero, v2]
  j .main_b9  ; live: [v10, zero, v2]

; block info: defs: [v9], uses: [v5], upward_exposed: [v5], params_defs: []
; live_in: [v7, v2, v5, zero, v3], live_out: [v2, v5, zero, v7, v9, v3]
; block parameters: []
.main_b5:
; control
  mv v9, v5  ; live: [v2, v3, v5, zero, v7]
  j .main_b6  ; live: [v2, v3, v5, zero, v7]

; block info: defs: [v9], uses: [v3], upward_exposed: [v3], params_defs: []
; live_in: [v7, v2, v5, zero, v3], live_out: [v2, v5, zero, v7, v9, v3]
; block parameters: []
.main_b4:
; control
  mv v9, v3  ; live: [v2, v3, v5, zero, v7]
  j .main_b6  ; live: [v2, v3, v5, zero, v7]

; block info: defs: [v11, v17, v10], uses: [v11, zero, v7, v17, v9, v3], upward_exposed: [v3, v9, zero, v7], params_defs: [v9]
; live_in: [v3, v5, zero, v7, v9, v2], live_out: [v5, v10, zero, v2]
; block parameters: [v9]
.main_b6:
  add v10, v7, v9  ; live: [v3, v5, zero, v7, v9, v2]
  slt v17, zero, v3  ; live: [v3, v5, zero, v7, v9, v2]
  xori v11, v17, 1  ; live: [v3, v5, zero, v7, v17, v9, v2]
; control
  bne v11, zero, .main_b7  ; live: [v3, v11, v5, zero, v7, v9, v2]
  j .main_b8  ; live: [v7, v2, v5, zero, v9, v3]

; block info: defs: [t1, v14, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v10, v13, a0, zero, v12], upward_exposed: [v10, v12, zero], params_defs: [v12]
; live_in: [v12, v10, zero], live_out: []
; block parameters: [v12]
.main_b9:
  add v13, v10, v12  ; live: [v12, v10, zero]
  mv a0, v13  ; live: [v12, v10, zero, v13]
  call minimbt_print_int  ; live: [v12, v10, zero, a0]
  mv v14, zero  ; live: [v12, v10, zero]
; control
  mv a0, v14  ; live: [v14, v12, v10, zero]
  ret  ; live: [v12, v10, zero, a0]

; block info: defs: [v7], uses: [v3], upward_exposed: [v3], params_defs: []
; live_in: [v2, v5, zero, v3], live_out: [v7, v3, v5, zero, v2]
; block parameters: []
.main_b2:
; control
  mv v7, v3  ; live: [v3, v5, zero, v2]
  j .main_b3  ; live: [v3, v5, zero, v2]

; block info: defs: [v12], uses: [v5], upward_exposed: [v5], params_defs: []
; live_in: [v5, v10, zero], live_out: [v12, v10, zero]
; block parameters: []
.main_b7:
; control
  mv v12, v5  ; live: [v5, v10, zero]
  j .main_b9  ; live: [v5, v10, zero]

; block info: defs: [v20, v8], uses: [v8, zero, v20, v2], upward_exposed: [zero, v2], params_defs: [v7]
; live_in: [v2, v3, v5, zero, v7], live_out: [v7, v2, v5, zero, v3]
; block parameters: [v7]
.main_b3:
  slt v20, v2, zero  ; live: [v2, v5, zero, v7, v3]
  xori v8, v20, 1  ; live: [v2, v5, zero, v20, v7, v3]
; control
  bne v8, zero, .main_b4  ; live: [v2, v5, zero, v7, v8, v3]
  j .main_b5  ; live: [v3, v7, v5, zero, v2]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/non-tail-if2.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f1 : closure() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 12345
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure() -> int32 heap(1)> <- [0] = f1
    let _ = alloc <m1: array[int32] heap(10)> <- [..] = 3
    let %2: int32 = load int32 offset(f0.m1, 0)
    let %3: bool = eq(%2, 3)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: int32 = apply f0.m0()
    let %5: int32 = load int32 offset(f0.m1, 1)
    let %6: int32 = add(%4, %5)
    let %7: int32 = add(%6, 67890)
    jump b3(%7)
  }
  .bb #b2 () {
    jump b3(7)
  }
  .bb #b3 (int32) {
    let %8: unit = ext_call minimbt_print_int($b3.0)
    return %8
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  comment = "1:a0-> 0:v2"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="v12 ← a1", color=green];
  r20 [label="v6 ← a0", color=green];
  r23 [label="v7 ← a0", color=green];
  r3 [label="v13 ← a0", color=green];
  r9 [label="v20 ← a1", color=green];
  r6 [label="v8 ← a2", color=green];
  r13 [label="v11 ← a1", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="zero", color=blue];
  r11 [label="v10 ← a1", color=green];
  r7 [label="v18 ← a1", color=green];
  r10 [label="v9 ← a1", color=green];
  r22 [label="v26 ← a0", color=green];
  r14 [label="v34 ← a0", color=green];
  r8 [label="v19 ← a1", color=green];
  r5 [label="v2 ← a0", color=green];
  r24 [label="v24 ← a0", color=green];
  r15 [label="v36 ← a0", color=green];
  r2 [label="a0", color=blue];
  r16 [label="v31 ← a0", color=green];
  r18 [label="v28 ← a0", color=green];
  r19 [label="v29 ← a0", color=green];
  r21 [label="v25 ← a0", color=green];
  r17 [label="v33 ← a1", color=green];
  r12 [label="v15 ← a1", color=green];
  r6 -- r7;
  r6 -- r9;
  r4 -- r13;
  r1 -- r12;
  r4 -- r5;
  r1 -- r8;
  r5 -- r8;
  r2 -- r4;
  r5 -- r10;
  r1 -- r4;
  r1 -- r23;
  r1 -- r7;
  r1 -- r18;
  r5 -- r13;
  r1 -- r19;
  r1 -- r22;
  r1 -- r10;
  r11 -- r12;
  r1 -- r15;
  r1 -- r13;
  r1 -- r17;
  r1 -- r20;
  r4 -- r18;
  r1 -- r16;
  r5 -- r11;
  r6 -- r8;
  r1 -- r9;
  r5 -- r6;
  r4 -- r11;
  r0 -- r2;
  r5 -- r9;
  r0 -- r3;
  r1 -- r21;
  r6 -- r10;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r4 -- r7;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r4 -- r17;
  r1 -- r6;
  r1 -- r5;
  r1 -- r14;
  r4 -- r6;
  r4 -- r10;
  r1 -- r3;
  r20 -- r21;
  r4 -- r9;
  r5 -- r15;
  r1 -- r24;
  r5 -- r12;
  comment = "24:v24-> 1:zero-> 5:v2-> 15:v36-> 22:v26-> 21:v25-> 20:v6-> 19:v29-> 18:v28-> 4:v3-> 17:v33-> 16:v31-> 3:v13-> 2:a0-> 0:v12-> 8:v19-> 10:v9-> 9:v20-> 6:v8-> 7:v18-> 14:v34-> 13:v11-> 23:v7-> 11:v10-> 12:v15"
  comment = "v12<-a1;v6<-a0;v7<-a0;v13<-a0;v20<-a1;v8<-a2;v11<-a1;v3<-a0;v10<-a1;v18<-a1;v9<-a1;v26<-a0;v34<-a0;v19<-a1;v2<-a0;v24<-a0;v36<-a0;v31<-a0;v28<-a0;v29<-a0;v25<-a0;v33<-a1;v15<-a1;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.f_b0:
; control
  li v2, 12345  ; live: []
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v2, v3, v25, v29, v26, v36, v7, v6, v31, v28, v33, v34], uses: [v2, v25, v26, v36, v7, s11, v31, v28, v33, zero, v29, v6, v34, v3], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: [v3, zero, v2]
; block parameters: []
.main_b0:
  addi v34, s11, -8  ; live: [s11, zero]
  andi v2, v34, -8  ; live: [s11, zero, v34]
  la v36, f  ; live: [s11, zero, v2]
  sd v36, 0(v2)  ; live: [v2, s11, zero, v36]
  addi v31, s11, -40  ; live: [s11, zero]
  andi v3, v31, -8  ; live: [s11, v31, zero]
  li v33, 3  ; live: [s11, zero, v3]
  sw v33, 0(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 4(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 8(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 12(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 16(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 20(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 24(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 28(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 32(v3)  ; live: [s11, zero, v33, v3]
  sw v33, 36(v3)  ; live: [s11, zero, v33, v3]
  slli v28, zero, 2  ; live: [s11, zero, v3]
  add v29, v3, v28  ; live: [s11, v28, zero, v3]
  lw v6, 0(v29)  ; live: [s11, zero, v29]
  li v25, 3  ; live: [v6, s11, zero]
  xor v26, v6, v25  ; live: [v25, v6, s11, zero]
  sltiu v7, v26, 1  ; live: [s11, zero, v26]
; control
  bne v7, zero, .main_b1  ; live: [s11, zero, v7]
  j .main_b2  ; live: [s11, zero]

; block info: defs: [t1, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v12, a0, zero, v13], upward_exposed: [v12, zero], params_defs: [v12]
; live_in: [v12, zero], live_out: []
; block parameters: [v12]
.main_b3:
  mv a0, v12  ; live: [v12, zero]
  call minimbt_print_int  ; live: [v12, zero, a0]
  mv v13, zero  ; live: [v12, zero]
; control
  mv a0, v13  ; live: [v12, zero, v13]
  ret  ; live: [v12, zero, a0]

; block info: defs: [t1, v22, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v20, v8, v19, a6, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v11, v18, v10, a0, v20, v8, v19, v15, v9, v3], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, zero, v3], live_out: [v12, zero]
; block parameters: []
.main_b1:
  mv s10, v2  ; live: [v3, zero, v2]
  ld v22, 0(v2)  ; live: [v3, zero, v2]
  jalr v22  ; live: [v3, zero, v2]
  mv v8, a0  ; live: [v3, zero, a0, v2]
  li v18, 1  ; live: [v3, v8, zero, v2]
  slli v19, v18, 2  ; live: [v3, v8, v18, zero, v2]
  add v20, v3, v19  ; live: [v3, v8, v19, zero, v2]
  lw v9, 0(v20)  ; live: [v3, v8, zero, v20, v2]
  add v10, v8, v9  ; live: [v3, v8, zero, v9, v2]
  li v15, 67890  ; live: [v3, v10, zero, v2]
  add v11, v10, v15  ; live: [v3, v10, v15, zero, v2]
; control
  mv v12, v11  ; live: [v3, v11, zero, v2]
  j .main_b3  ; live: [v3, zero, v2]

; block info: defs: [v24, v12], uses: [v24], upward_exposed: [], params_defs: []
; live_in: [zero], live_out: [v12, zero]
; block parameters: []
.main_b2:
; control
  li v24, 7  ; live: [zero]
  mv v12, v24  ; live: [v24, zero]
  j .main_b3  ; live: [zero]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/print.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn thunk_start #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = ext_call minimbt_print_int(123)
    let %1: int32 = neg(456)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: int32 = add(789, 0)
    let %4: unit = ext_call minimbt_print_int(%3)
    return ()
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v8 ← a0", color=green];
  r6 [label="v5 ← a0", color=green];
  r4 [label="v3 ← a0", color=green];
  r1 [label="v13 ← a0", color=green];
  r3 [label="v11 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r5;
  r0 -- r6;
  r0 -- r2;
  comment = "6:v5-> 0:zero-> 2:a0-> 5:v8-> 4:v3-> 3:v11-> 1:v13"
  comment = "v8<-a0;v5<-a0;v3<-a0;v13<-a0;v11<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v13, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v11, v5, v13, a0, zero, v8, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v13, 123  ; live: [zero]
  mv a0, v13  ; live: [zero, v13]
  call minimbt_print_int  ; live: [zero, a0]
  mv v2, zero  ; live: [zero]
  li v11, 456  ; live: [zero]
  neg v3, v11  ; live: [v11, zero]
  mv a0, v3  ; live: [zero, v3]
  call minimbt_print_int  ; live: [zero, a0]
  mv v4, zero  ; live: [zero]
  li v8, 789  ; live: [zero]
  add v5, v8, zero  ; live: [zero, v8]
  mv a0, v5  ; live: [v5, zero]
  call minimbt_print_int  ; live: [zero, a0]
  mv v6, zero  ; live: [zero]
; control
  mv a0, zero  ; live: [zero]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/shuffle.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn foo #f0 : fn(int32, int32, int32, int32, int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = ext_call minimbt_print_int($f0)
    let %1: unit = ext_call minimbt_print_int($f1)
    let %2: unit = ext_call minimbt_print_int($f2)
    let %3: unit = ext_call minimbt_print_int($f3)
    let %4: unit = ext_call minimbt_print_int($f4)
    let %5: unit = ext_call minimbt_print_int($f5)
    return ()
  }
}
.fn bar #f1 : fn(int32, int32, int32, int32, int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0($f1, $f0, $f3, $f4, $f5, $f2)
    return %0
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1(1, 2, 3, 4, 5, 6)
    return %0
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of foo"];
  r0 [label="a5", color=blue];
  r5 [label="a1", color=blue];
  r3 [label="a4", color=blue];
  r2 [label="a0", color=blue];
  r9 [label="v4 ← a1", color=green];
  r6 [label="a3", color=blue];
  r4 [label="a2", color=blue];
  r1 [label="zero", color=blue];
  r11 [label="v6 ← a0", color=green];
  r7 [label="v2 ← a2", color=green];
  r10 [label="v5 ← a1", color=green];
  r12 [label="v7 ← a0", color=green];
  r8 [label="v3 ← a0", color=green];
  r6 -- r7;
  r6 -- r9;
  r1 -- r12;
  r4 -- r5;
  r1 -- r8;
  r2 -- r4;
  r1 -- r4;
  r3 -- r6;
  r1 -- r7;
  r8 -- r9;
  r1 -- r10;
  r2 -- r10;
  r3 -- r9;
  r11 -- r12;
  r2 -- r11;
  r7 -- r9;
  r3 -- r5;
  r8 -- r12;
  r6 -- r8;
  r0 -- r6;
  r3 -- r8;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r3 -- r4;
  r0 -- r2;
  r0 -- r3;
  r10 -- r12;
  r0 -- r9;
  r0 -- r8;
  r7 -- r10;
  r9 -- r12;
  r2 -- r12;
  r10 -- r11;
  r2 -- r8;
  r7 -- r11;
  r3 -- r10;
  r0 -- r5;
  r1 -- r2;
  r2 -- r5;
  r0 -- r1;
  r8 -- r10;
  r0 -- r10;
  r4 -- r7;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r0 -- r11;
  r8 -- r11;
  r1 -- r6;
  r3 -- r7;
  r1 -- r5;
  r0 -- r4;
  r2 -- r9;
  r4 -- r6;
  r1 -- r3;
  r7 -- r8;
  r7 -- r12;
  r0 -- r7;
  r2 -- r3;
  comment = "12:v7-> 11:v6-> 10:v5-> 1:zero-> 6:a3-> 5:a1-> 4:a2-> 3:a4-> 9:v4-> 8:v3-> 7:v2-> 2:a0-> 0:a5"
  comment = "v4<-a1;v6<-a0;v2<-a2;v5<-a1;v7<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of foo"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of bar"];
  r0 [label="a5", color=blue];
  r5 [label="a1", color=blue];
  r3 [label="a4", color=blue];
  r2 [label="a0", color=blue];
  r9 [label="v4 ← a0", color=green];
  r6 [label="a3", color=blue];
  r13 [label="v8 ← a0", color=green];
  r4 [label="a2", color=blue];
  r1 [label="zero", color=blue];
  r11 [label="v6 ← a0", color=green];
  r7 [label="v2 ← a0", color=green];
  r10 [label="v5 ← a2", color=green];
  r12 [label="v7 ← a0", color=green];
  r8 [label="v3 ← a1", color=green];
  r6 -- r7;
  r6 -- r9;
  r4 -- r13;
  r0 -- r13;
  r1 -- r12;
  r4 -- r5;
  r1 -- r8;
  r2 -- r4;
  r5 -- r10;
  r1 -- r4;
  r3 -- r6;
  r1 -- r7;
  r8 -- r9;
  r5 -- r13;
  r1 -- r10;
  r2 -- r10;
  r3 -- r9;
  r11 -- r12;
  r1 -- r13;
  r2 -- r11;
  r2 -- r7;
  r7 -- r9;
  r5 -- r11;
  r6 -- r12;
  r3 -- r5;
  r8 -- r12;
  r6 -- r8;
  r0 -- r6;
  r3 -- r8;
  r6 -- r13;
  r1 -- r9;
  r2 -- r6;
  r9 -- r11;
  r5 -- r6;
  r4 -- r11;
  r3 -- r4;
  r0 -- r2;
  r5 -- r9;
  r10 -- r12;
  r0 -- r3;
  r0 -- r8;
  r0 -- r9;
  r3 -- r13;
  r7 -- r10;
  r9 -- r12;
  r2 -- r12;
  r10 -- r11;
  r7 -- r11;
  r3 -- r10;
  r0 -- r5;
  r1 -- r2;
  r4 -- r12;
  r2 -- r5;
  r0 -- r1;
  r8 -- r10;
  r4 -- r7;
  r0 -- r10;
  r1 -- r11;
  r5 -- r7;
  r4 -- r8;
  r9 -- r10;
  r0 -- r11;
  r8 -- r11;
  r1 -- r6;
  r3 -- r7;
  r1 -- r5;
  r0 -- r4;
  r2 -- r9;
  r4 -- r6;
  r1 -- r3;
  r7 -- r8;
  r7 -- r12;
  r0 -- r7;
  r2 -- r3;
  r4 -- r9;
  r5 -- r12;
  comment = "13:v8-> 6:a3-> 5:a1-> 4:a2-> 12:v7-> 9:v4-> 11:v6-> 10:v5-> 2:a0-> 1:zero-> 3:a4-> 8:v3-> 7:v2-> 0:a5"
  comment = "v4<-a0;v8<-a0;v6<-a0;v2<-a0;v5<-a2;v7<-a0;v3<-a1;"
}

graph G {
  graph [label="float interference graph of bar"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v5 ← a2", color=green];
  r3 [label="v4 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v7 ← a0", color=green];
  r6 [label="a2", color=blue];
  r13 [label="v2 ← a0", color=green];
  r4 [label="a1", color=blue];
  r1 [label="v3 ← a0", color=green];
  r11 [label="v8 ← a0", color=green];
  r7 [label="v6 ← a0", color=green];
  r10 [label="a4", color=blue];
  r12 [label="a5", color=blue];
  r8 [label="a3", color=blue];
  r6 -- r7;
  r6 -- r9;
  r2 -- r6;
  r0 -- r13;
  r6 -- r11;
  r4 -- r11;
  r4 -- r5;
  r0 -- r2;
  r0 -- r3;
  r2 -- r4;
  r10 -- r12;
  r0 -- r9;
  r0 -- r8;
  r6 -- r10;
  r2 -- r12;
  r2 -- r8;
  r10 -- r11;
  r8 -- r9;
  r0 -- r5;
  r4 -- r12;
  r2 -- r5;
  r2 -- r10;
  r0 -- r1;
  r8 -- r10;
  r0 -- r10;
  r4 -- r7;
  r4 -- r8;
  r0 -- r12;
  r0 -- r11;
  r8 -- r11;
  r2 -- r7;
  r2 -- r11;
  r0 -- r4;
  r2 -- r9;
  r4 -- r6;
  r4 -- r10;
  r6 -- r12;
  r0 -- r7;
  r2 -- r3;
  r4 -- r9;
  r8 -- r12;
  r6 -- r8;
  r0 -- r6;
  comment = "13:v2-> 12:a5-> 10:a4-> 8:a3-> 6:a2-> 4:a1-> 2:a0-> 0:zero-> 11:v8-> 9:v7-> 7:v6-> 5:v5-> 3:v4-> 1:v3"
  comment = "v5<-a2;v4<-a0;v7<-a0;v2<-a0;v3<-a0;v8<-a0;v6<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl foo
  .type foo, @function
foo:
; block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, v12, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a5, a0, v7, a2, a1, a3, zero, a4, v4, v6, v3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: []
; block parameters: []
.foo_b0:
  mv v2, a0  ; live: [a5, zero, a0, a4, a2, a1, a3]
  mv v3, a1  ; live: [a5, zero, a4, a2, a1, a3, v2]
  mv v4, a2  ; live: [v2, a5, zero, a4, a2, a3, v3]
  mv v5, a3  ; live: [v2, a5, zero, a4, v4, a3, v3]
  mv v6, a4  ; live: [v2, v5, a5, zero, a4, v4, v3]
  mv v7, a5  ; live: [v2, v5, a5, zero, v4, v6, v3]
  mv a0, v2  ; live: [v2, v5, zero, v7, v4, v6, v3]
  call minimbt_print_int  ; live: [v5, zero, a0, v7, v4, v6, v3]
  mv v8, zero  ; live: [v5, zero, v7, v4, v6, v3]
  mv a0, v3  ; live: [v5, zero, v7, v4, v6, v3]
  call minimbt_print_int  ; live: [v5, zero, a0, v7, v4, v6]
  mv v9, zero  ; live: [v5, zero, v7, v4, v6]
  mv a0, v4  ; live: [v5, zero, v7, v4, v6]
  call minimbt_print_int  ; live: [v5, zero, a0, v7, v6]
  mv v10, zero  ; live: [v5, zero, v7, v6]
  mv a0, v5  ; live: [v5, zero, v7, v6]
  call minimbt_print_int  ; live: [zero, a0, v7, v6]
  mv v11, zero  ; live: [zero, v7, v6]
  mv a0, v6  ; live: [zero, v7, v6]
  call minimbt_print_int  ; live: [zero, a0, v7]
  mv v12, zero  ; live: [zero, v7]
  mv a0, v7  ; live: [zero, v7]
  call minimbt_print_int  ; live: [zero, a0]
  mv v13, zero  ; live: [a5, zero, a4, a2, a1, a3]
; control
  mv a0, zero  ; live: [a5, zero, a4, a2, a1, a3]
  ret  ; live: [a5, a0, zero, a4, a2, a1, a3]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl bar
  .type bar, @function
bar:
; block info: defs: [v2, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a5, a0, v7, a2, a1, a3, zero, a4, v8, v4, v6, v2], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
; live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: []
; block parameters: []
.bar_b0:
  mv v2, a0  ; live: [a5, zero, a0, a4, a2, a1, a3]
  mv v3, a1  ; live: [a5, zero, a4, a2, a1, a3, v2]
  mv v4, a2  ; live: [v3, a5, zero, a4, a2, a3, v2]
  mv v5, a3  ; live: [v3, a5, zero, a4, v4, a3, v2]
  mv v6, a4  ; live: [v3, v5, a5, zero, a4, v4, v2]
  mv v7, a5  ; live: [v3, v5, a5, zero, v4, v6, v2]
  mv a0, v3  ; live: [v3, v5, zero, v7, v4, v6, v2]
  mv a1, v2  ; live: [v5, zero, a0, v7, v4, v6, v2]
  mv a2, v5  ; live: [v5, zero, a0, v7, v4, a1, v6]
  mv a3, v6  ; live: [zero, a0, v7, a2, v4, a1, v6]
  mv a4, v7  ; live: [zero, a0, v7, a2, v4, a1, a3]
  mv a5, v4  ; live: [zero, a0, a4, a2, v4, a1, a3]
  call foo  ; live: [a5, zero, a0, a4, a2, a1, a3]
  mv v8, zero  ; live: [a5, zero, a4, a2, a1, a3]
; control
  mv a0, v8  ; live: [a5, zero, a4, v8, a2, a1, a3]
  ret  ; live: [a5, a0, zero, a4, a2, a1, a3]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v2, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a5, a0, v7, a2, a1, a3, zero, a4, v8, v4, v6, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v3, 1  ; live: [zero]
  mv a0, v3  ; live: [zero, v3]
  li v4, 2  ; live: [zero, a0]
  mv a1, v4  ; live: [zero, a0, v4]
  li v5, 3  ; live: [zero, a0, a1]
  mv a2, v5  ; live: [v5, zero, a0, a1]
  li v6, 4  ; live: [zero, a0, a2, a1]
  mv a3, v6  ; live: [zero, a0, a2, a1, v6]
  li v7, 5  ; live: [zero, a0, a2, a1, a3]
  mv a4, v7  ; live: [zero, a0, v7, a2, a1, a3]
  li v8, 6  ; live: [zero, a0, a4, a2, a1, a3]
  mv a5, v8  ; live: [zero, a0, a4, v8, a2, a1, a3]
  call bar  ; live: [a5, zero, a0, a4, a2, a1, a3]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/spill.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(int32, int32, int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    let %1: int32 = add($f0, $f2)
    let %2: int32 = add($f0, $f3)
    let %3: int32 = add($f1, $f2)
    let %4: int32 = add($f1, $f3)
    let %5: int32 = add($f2, $f3)
    let %6: int32 = add(%0, %1)
    let %7: int32 = add(%0, %2)
    let %8: int32 = add(%0, %3)
    let %9: int32 = add(%0, %4)
    let %10: int32 = add(%0, %5)
    let %11: int32 = add(%1, %2)
    let %12: int32 = add(%1, %3)
    let %13: int32 = add(%1, %4)
    let %14: int32 = add(%1, %5)
    let %15: int32 = add(%2, %3)
    let %16: int32 = add(%2, %4)
    let %17: int32 = add(%2, %5)
    let %18: int32 = add(%3, %4)
    let %19: int32 = add(%3, %5)
    let %20: int32 = add(%4, %5)
    let %21: int32 = add(%6, %7)
    let %22: int32 = add(%6, %8)
    let %23: int32 = add(%6, %9)
    let %24: int32 = add(%6, %10)
    let %25: int32 = add(%6, %11)
    let %26: int32 = add(%6, %12)
    let %27: int32 = add(%6, %13)
    let %28: int32 = add(%6, %14)
    let %29: int32 = add(%6, %15)
    let %30: int32 = add(%6, %16)
    let %31: int32 = add(%6, %17)
    let %32: int32 = add(%6, %18)
    let %33: int32 = add(%6, %19)
    let %34: int32 = add(%6, %20)
    let %35: int32 = add($f0, $f1)
    let %36: int32 = add(%35, $f2)
    let %37: int32 = add(%36, $f3)
    let %38: int32 = add(%37, %0)
    let %39: int32 = add(%38, %1)
    let %40: int32 = add(%39, %2)
    let %41: int32 = add(%40, %3)
    let %42: int32 = add(%41, %4)
    let %43: int32 = add(%42, %5)
    let %44: int32 = add(%43, %6)
    let %45: int32 = add(%44, %7)
    let %46: int32 = add(%45, %8)
    let %47: int32 = add(%46, %9)
    let %48: int32 = add(%47, %10)
    let %49: int32 = add(%48, %11)
    let %50: int32 = add(%49, %12)
    let %51: int32 = add(%50, %13)
    let %52: int32 = add(%51, %14)
    let %53: int32 = add(%52, %15)
    let %54: int32 = add(%53, %16)
    let %55: int32 = add(%54, %17)
    let %56: int32 = add(%55, %18)
    let %57: int32 = add(%56, %19)
    let %58: int32 = add(%57, %20)
    let %59: int32 = add(%58, %21)
    let %60: int32 = add(%59, %22)
    let %61: int32 = add(%60, %23)
    let %62: int32 = add(%61, %24)
    let %63: int32 = add(%62, %25)
    let %64: int32 = add(%63, %26)
    let %65: int32 = add(%64, %27)
    let %66: int32 = add(%65, %28)
    let %67: int32 = add(%66, %29)
    let %68: int32 = add(%67, %30)
    let %69: int32 = add(%68, %31)
    let %70: int32 = add(%69, %32)
    let %71: int32 = add(%70, %33)
    let %72: int32 = add(%71, %34)
    let %73: int32 = neg(%72)
    return %73
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(1, 2, 3, 4)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a1", color=blue];
  r46 [label="v44 ← t1", color=green];
  r33 [label="v31 ← a2", color=green];
  r59 [label="v57 ← a1", color=green];
  r76 [label="v74 ← a0", color=green];
  r9 [label="v7 ← t1", color=green];
  r26 [label="v24 ← a3", color=green];
  r44 [label="v42 ← t2", color=green];
  r53 [label="v51 ← a7", color=green];
  r56 [label="v54 ← a7", color=green];
  r10 [label="v8 ← t0", color=green];
  r5 [label="v3 ← t2", color=green];
  r54 [label="v52 ← a5", color=green];
  r24 [label="v22 ← a6", color=green];
  r43 [label="v41 ← t1", color=green];
  r80 [label="v78 ← a0", color=green];
  r31 [label="v29 ← a1", color=green];
  r39 [label="v37 ← a0", color=green];
  r17 [label="v15 ← a1", color=green];
  r52 [label="v50 ← a7", color=green];
  r65 [label="v63 ← a3", color=green];
  r79 [label="v77 ← a0", color=green];
  r20 [label="v18 ← a3", color=green];
  r61 [label="v59 ← a1", color=green];
  r23 [label="v21 ← a6", color=green];
  r3 [label="a3", color=blue];
  r67 [label="v65 ← a6", color=green];
  r77 [label="v75 ← a4", color=green];
  r75 [label="v73 ← a5", color=green];
  r27 [label="v25 ← a7", color=green];
  r62 [label="v60 ← a3", color=green];
  r40 [label="v38 ← a2", color=green];
  r11 [label="v9 ← a5", color=green];
  r58 [label="v56 ← a3", color=green];
  r34 [label="v32 ← a0", color=green];
  r14 [label="v12 ← a7", color=green];
  r51 [label="v49 ← a6", color=green];
  r78 [label="v76 ← a4", color=green];
  r55 [label="v53 ← a6", color=green];
  r16 [label="v14 ← t0", color=green];
  r21 [label="v19 ← a1", color=green];
  r60 [label="v58 ← a7", color=green];
  r73 [label="v71 ← a5", color=green];
  r38 [label="v36 ← a4", color=green];
  r72 [label="v70 ← a1", color=green];
  r47 [label="v45 ← a3", color=green];
  r6 [label="v4 ← a1", color=green];
  r13 [label="v11 ← a7", color=green];
  r42 [label="v40 ← a0", color=green];
  r4 [label="v2 ← t3", color=green];
  r29 [label="v27 ← a1", color=green];
  r35 [label="v33 ← a5", color=green];
  r7 [label="v5 ← a4", color=green];
  r64 [label="v62 ← t0", color=green];
  r8 [label="v6 ← t0", color=green];
  r36 [label="v34 ← a0", color=green];
  r66 [label="v64 ← a3", color=green];
  r32 [label="v30 ← a5", color=green];
  r15 [label="v13 ← t0", color=green];
  r49 [label="v47 ← t0", color=green];
  r57 [label="v55 ← a1", color=green];
  r74 [label="v72 ← a5", color=green];
  r68 [label="v66 ← a6", color=green];
  r70 [label="v68 ← a1", color=green];
  r12 [label="v10 ← a5", color=green];
  r48 [label="v46 ← a7", color=green];
  r37 [label="v35 ← a4", color=green];
  r1 [label="a0", color=blue];
  r41 [label="v39 ← a1", color=green];
  r28 [label="v26 ← a6", color=green];
  r71 [label="v69 ← a6", color=green];
  r22 [label="v20 ← a1", color=green];
  r69 [label="v67 ← a6", color=green];
  r50 [label="v48 ← a3", color=green];
  r30 [label="v28 ← a3", color=green];
  r45 [label="v43 ← a6", color=green];
  r25 [label="v23 ← a1", color=green];
  r63 [label="v61 ← a1", color=green];
  r2 [label="a2", color=blue];
  r18 [label="v16 ← a7", color=green];
  r19 [label="v17 ← a5", color=green];
  r81 [label="v79 ← a0", color=green];
  r32 -- r55;
  r38 -- r56;
  r32 -- r48;
  r0 -- r36;
  r16 -- r20;
  r0 -- r66;
  r0 -- r32;
  r11 -- r35;
  r38 -- r50;
  r23 -- r46;
  r36 -- r69;
  r35 -- r59;
  r26 -- r57;
  r15 -- r31;
  r37 -- r62;
  r33 -- r59;
  r0 -- r28;
  r30 -- r61;
  r0 -- r52;
  r20 -- r34;
  r25 -- r57;
  r40 -- r73;
  r2 -- r51;
  r31 -- r65;
  r20 -- r36;
  r3 -- r70;
  r3 -- r31;
  r2 -- r41;
  r20 -- r30;
  r0 -- r6;
  r9 -- r14;
  r3 -- r48;
  r25 -- r48;
  r0 -- r58;
  r17 -- r44;
  r26 -- r27;
  r32 -- r35;
  r41 -- r60;
  r30 -- r67;
  r0 -- r81;
  r10 -- r18;
  r35 -- r38;
  r29 -- r33;
  r19 -- r36;
  r4 -- r29;
  r28 -- r33;
  r40 -- r60;
  r41 -- r63;
  r35 -- r71;
  r12 -- r43;
  r18 -- r37;
  r25 -- r37;
  r22 -- r44;
  r9 -- r39;
  r24 -- r46;
  r2 -- r69;
  r18 -- r43;
  r32 -- r52;
  r40 -- r42;
  r39 -- r47;
  r26 -- r38;
  r0 -- r15;
  r27 -- r40;
  r35 -- r67;
  r2 -- r73;
  r2 -- r4;
  r23 -- r50;
  r12 -- r34;
  r30 -- r66;
  r15 -- r35;
  r19 -- r48;
  r30 -- r59;
  r22 -- r26;
  r21 -- r34;
  r9 -- r30;
  r32 -- r40;
  r4 -- r18;
  r2 -- r11;
  r24 -- r29;
  r0 -- r19;
  r35 -- r50;
  r18 -- r51;
  r19 -- r50;
  r14 -- r33;
  r3 -- r65;
  r34 -- r63;
  r2 -- r14;
  r29 -- r45;
  r37 -- r53;
  r28 -- r41;
  r9 -- r24;
  r8 -- r35;
  r8 -- r18;
  r9 -- r36;
  r23 -- r42;
  r19 -- r33;
  r15 -- r34;
  r2 -- r60;
  r42 -- r75;
  r15 -- r33;
  r12 -- r16;
  r39 -- r69;
  r6 -- r38;
  r9 -- r46;
  r23 -- r59;
  r15 -- r19;
  r26 -- r32;
  r31 -- r47;
  r9 -- r21;
  r5 -- r12;
  r41 -- r64;
  r11 -- r44;
  r40 -- r66;
  r2 -- r45;
  r21 -- r35;
  r30 -- r42;
  r30 -- r51;
  r0 -- r49;
  r40 -- r74;
  r30 -- r40;
  r3 -- r32;
  r9 -- r31;
  r42 -- r43;
  r11 -- r24;
  r36 -- r63;
  r38 -- r62;
  r14 -- r39;
  r31 -- r39;
  r37 -- r66;
  r36 -- r68;
  r42 -- r45;
  r26 -- r41;
  r26 -- r49;
  r24 -- r31;
  r24 -- r59;
  r40 -- r68;
  r35 -- r55;
  r6 -- r18;
  r42 -- r65;
  r18 -- r30;
  r37 -- r55;
  r24 -- r52;
  r3 -- r27;
  r29 -- r58;
  r19 -- r42;
  r38 -- r52;
  r0 -- r11;
  r34 -- r65;
  r10 -- r25;
  r38 -- r74;
  r24 -- r60;
  r31 -- r53;
  r24 -- r50;
  r30 -- r46;
  r6 -- r32;
  r30 -- r33;
  r27 -- r37;
  r40 -- r53;
  r17 -- r20;
  r10 -- r17;
  r33 -- r66;
  r13 -- r24;
  r16 -- r31;
  r20 -- r24;
  r41 -- r61;
  r12 -- r38;
  r23 -- r49;
  r15 -- r26;
  r28 -- r37;
  r15 -- r22;
  r9 -- r29;
  r22 -- r42;
  r34 -- r53;
  r0 -- r64;
  r27 -- r61;
  r31 -- r57;
  r24 -- r61;
  r41 -- r49;
  r23 -- r47;
  r41 -- r78;
  r2 -- r57;
  r4 -- r11;
  r30 -- r45;
  r9 -- r38;
  r15 -- r17;
  r40 -- r49;
  r25 -- r59;
  r21 -- r25;
  r20 -- r47;
  r12 -- r49;
  r10 -- r23;
  r22 -- r23;
  r24 -- r35;
  r18 -- r48;
  r12 -- r39;
  r30 -- r36;
  r31 -- r49;
  r20 -- r49;
  r9 -- r16;
  r2 -- r71;
  r9 -- r19;
  r42 -- r53;
  r37 -- r41;
  r0 -- r78;
  r8 -- r31;
  r37 -- r39;
  r30 -- r54;
  r12 -- r29;
  r28 -- r59;
  r42 -- r78;
  r12 -- r32;
  r5 -- r21;
  r0 -- r59;
  r35 -- r49;
  r5 -- r10;
  r13 -- r32;
  r3 -- r6;
  r0 -- r69;
  r34 -- r40;
  r22 -- r52;
  r25 -- r54;
  r40 -- r57;
  r41 -- r70;
  r5 -- r29;
  r42 -- r51;
  r42 -- r72;
  r29 -- r62;
  r34 -- r42;
  r3 -- r5;
  r4 -- r31;
  r23 -- r53;
  r20 -- r23;
  r26 -- r48;
  r10 -- r38;
  r36 -- r47;
  r10 -- r12;
  r22 -- r34;
  r39 -- r51;
  r24 -- r57;
  r16 -- r37;
  r2 -- r67;
  r18 -- r54;
  r37 -- r54;
  r17 -- r54;
  r10 -- r31;
  r20 -- r27;
  r9 -- r20;
  r30 -- r63;
  r4 -- r25;
  r41 -- r67;
  r42 -- r62;
  r13 -- r35;
  r27 -- r35;
  r12 -- r21;
  r7 -- r42;
  r11 -- r36;
  r36 -- r53;
  r16 -- r38;
  r4 -- r14;
  r3 -- r46;
  r15 -- r30;
  r29 -- r47;
  r13 -- r15;
  r37 -- r43;
  r4 -- r23;
  r20 -- r26;
  r25 -- r53;
  r8 -- r27;
  r32 -- r43;
  r31 -- r66;
  r8 -- r9;
  r37 -- r57;
  r33 -- r36;
  r2 -- r80;
  r10 -- r29;
  r42 -- r63;
  r28 -- r45;
  r37 -- r47;
  r35 -- r51;
  r21 -- r56;
  r6 -- r22;
  r41 -- r74;
  r21 -- r58;
  r34 -- r67;
  r14 -- r35;
  r27 -- r43;
  r2 -- r44;
  r3 -- r57;
  r30 -- r65;
  r12 -- r20;
  r4 -- r15;
  r12 -- r41;
  r23 -- r25;
  r0 -- r42;
  r12 -- r33;
  r10 -- r43;
  r0 -- r3;
  r8 -- r15;
  r30 -- r48;
  r31 -- r44;
  r22 -- r28;
  r0 -- r37;
  r34 -- r70;
  r35 -- r46;
  r0 -- r75;
  r10 -- r46;
  r37 -- r49;
  r26 -- r50;
  r11 -- r34;
  r34 -- r64;
  r18 -- r47;
  r23 -- r40;
  r13 -- r47;
  r7 -- r16;
  r7 -- r18;
  r15 -- r20;
  r19 -- r25;
  r17 -- r46;
  r7 -- r14;
  r20 -- r21;
  r28 -- r43;
  r42 -- r67;
  r30 -- r55;
  r28 -- r34;
  r2 -- r39;
  r37 -- r46;
  r42 -- r54;
  r27 -- r59;
  r22 -- r40;
  r14 -- r16;
  r18 -- r55;
  r27 -- r29;
  r10 -- r26;
  r25 -- r45;
  r19 -- r51;
  r27 -- r55;
  r30 -- r31;
  r2 -- r10;
  r11 -- r32;
  r3 -- r24;
  r38 -- r67;
  r34 -- r62;
  r4 -- r40;
  r40 -- r50;
  r3 -- r51;
  r2 -- r74;
  r37 -- r42;
  r18 -- r50;
  r35 -- r39;
  r7 -- r34;
  r39 -- r68;
  r40 -- r75;
  r8 -- r37;
  r2 -- r47;
  r3 -- r80;
  r24 -- r27;
  r23 -- r41;
  r29 -- r63;
  r28 -- r29;
  r8 -- r22;
  r42 -- r71;
  r14 -- r31;
  r16 -- r39;
  r18 -- r31;
  r2 -- r24;
  r11 -- r30;
  r28 -- r40;
  r17 -- r18;
  r24 -- r48;
  r19 -- r55;
  r4 -- r24;
  r14 -- r17;
  r32 -- r37;
  r19 -- r54;
  r33 -- r69;
  r31 -- r61;
  r35 -- r60;
  r12 -- r15;
  r14 -- r23;
  r0 -- r41;
  r7 -- r26;
  r40 -- r59;
  r28 -- r52;
  r29 -- r52;
  r9 -- r42;
  r19 -- r24;
  r8 -- r38;
  r3 -- r28;
  r26 -- r47;
  r10 -- r34;
  r41 -- r66;
  r20 -- r46;
  r30 -- r37;
  r20 -- r25;
  r6 -- r34;
  r20 -- r41;
  r18 -- r32;
  r26 -- r35;
  r19 -- r23;
  r21 -- r31;
  r32 -- r50;
  r8 -- r13;
  r35 -- r65;
  r0 -- r77;
  r2 -- r56;
  r32 -- r39;
  r32 -- r49;
  r23 -- r28;
  r27 -- r58;
  r3 -- r64;
  r20 -- r57;
  r6 -- r42;
  r10 -- r39;
  r37 -- r68;
  r3 -- r81;
  r27 -- r64;
  r3 -- r75;
  r28 -- r62;
  r37 -- r52;
  r7 -- r31;
  r4 -- r17;
  r21 -- r55;
  r2 -- r3;
  r10 -- r24;
  r3 -- r63;
  r42 -- r79;
  r24 -- r33;
  r12 -- r26;
  r10 -- r14;
  r15 -- r39;
  r2 -- r31;
  r27 -- r57;
  r0 -- r48;
  r24 -- r40;
  r23 -- r51;
  r3 -- r16;
  r40 -- r55;
  r2 -- r49;
  r27 -- r51;
  r3 -- r62;
  r35 -- r42;
  r14 -- r40;
  r29 -- r41;
  r3 -- r11;
  r9 -- r26;
  r36 -- r60;
  r27 -- r28;
  r30 -- r64;
  r18 -- r35;
  r32 -- r69;
  r17 -- r19;
  r29 -- r48;
  r3 -- r8;
  r8 -- r34;
  r29 -- r66;
  r26 -- r28;
  r19 -- r45;
  r5 -- r6;
  r16 -- r33;
  r10 -- r33;
  r34 -- r56;
  r27 -- r50;
  r22 -- r27;
  r41 -- r71;
  r40 -- r54;
  r8 -- r23;
  r37 -- r60;
  r19 -- r47;
  r38 -- r57;
  r2 -- r5;
  r3 -- r17;
  r27 -- r46;
  r15 -- r37;
  r31 -- r58;
  r35 -- r37;
  r11 -- r15;
  r29 -- r56;
  r40 -- r64;
  r8 -- r32;
  r40 -- r62;
  r32 -- r66;
  r15 -- r47;
  r29 -- r49;
  r38 -- r45;
  r27 -- r62;
  r29 -- r61;
  r16 -- r30;
  r36 -- r40;
  r34 -- r41;
  r28 -- r31;
  r26 -- r63;
  r16 -- r32;
  r9 -- r40;
  r16 -- r51;
  r7 -- r20;
  r31 -- r41;
  r21 -- r57;
  r18 -- r40;
  r27 -- r63;
  r13 -- r48;
  r16 -- r50;
  r11 -- r46;
  r39 -- r74;
  r40 -- r61;
  r5 -- r38;
  r11 -- r37;
  r23 -- r45;
  r28 -- r49;
  r3 -- r22;
  r23 -- r26;
  r0 -- r53;
  r41 -- r52;
  r31 -- r46;
  r28 -- r57;
  r7 -- r22;
  r0 -- r73;
  r13 -- r14;
  r12 -- r22;
  r3 -- r29;
  r36 -- r56;
  r3 -- r66;
  r4 -- r36;
  r15 -- r24;
  r39 -- r72;
  r22 -- r32;
  r6 -- r39;
  r31 -- r63;
  r2 -- r75;
  r5 -- r25;
  r10 -- r36;
  r31 -- r33;
  r41 -- r50;
  r4 -- r10;
  r17 -- r50;
  r39 -- r48;
  r2 -- r27;
  r36 -- r51;
  r33 -- r68;
  r36 -- r38;
  r41 -- r45;
  r24 -- r39;
  r26 -- r59;
  r33 -- r65;
  r29 -- r46;
  r13 -- r44;
  r36 -- r61;
  r39 -- r71;
  r22 -- r56;
  r37 -- r59;
  r10 -- r13;
  r24 -- r32;
  r31 -- r36;
  r39 -- r42;
  r5 -- r42;
  r18 -- r27;
  r2 -- r16;
  r29 -- r51;
  r17 -- r33;
  r38 -- r47;
  r14 -- r30;
  r2 -- r59;
  r42 -- r70;
  r2 -- r54;
  r14 -- r19;
  r32 -- r53;
  r4 -- r33;
  r3 -- r30;
  r18 -- r26;
  r28 -- r56;
  r25 -- r52;
  r0 -- r79;
  r9 -- r28;
  r3 -- r13;
  r20 -- r32;
  r6 -- r10;
  r25 -- r43;
  r33 -- r52;
  r12 -- r40;
  r23 -- r32;
  r36 -- r62;
  r3 -- r10;
  r4 -- r12;
  r32 -- r59;
  r16 -- r23;
  r35 -- r72;
  r23 -- r33;
  r26 -- r62;
  r0 -- r63;
  r6 -- r11;
  r20 -- r31;
  r4 -- r5;
  r36 -- r44;
  r13 -- r42;
  r18 -- r29;
  r8 -- r19;
  r13 -- r26;
  r35 -- r53;
  r8 -- r43;
  r3 -- r47;
  r25 -- r60;
  r22 -- r38;
  r29 -- r65;
  r0 -- r35;
  r16 -- r28;
  r22 -- r24;
  r28 -- r53;
  r28 -- r44;
  r25 -- r58;
  r27 -- r56;
  r0 -- r46;
  r0 -- r54;
  r5 -- r24;
  r5 -- r26;
  r9 -- r33;
  r0 -- r8;
  r25 -- r41;
  r26 -- r30;
  r21 -- r42;
  r9 -- r37;
  r16 -- r44;
  r34 -- r47;
  r7 -- r39;
  r7 -- r43;
  r12 -- r37;
  r0 -- r12;
  r3 -- r36;
  r35 -- r54;
  r12 -- r27;
  r31 -- r32;
  r3 -- r54;
  r17 -- r45;
  r16 -- r48;
  r5 -- r30;
  r33 -- r51;
  r4 -- r19;
  r14 -- r51;
  r2 -- r32;
  r32 -- r36;
  r26 -- r39;
  r14 -- r43;
  r11 -- r14;
  r5 -- r17;
  r18 -- r42;
  r41 -- r55;
  r39 -- r61;
  r2 -- r43;
  r38 -- r42;
  r15 -- r36;
  r5 -- r18;
  r36 -- r70;
  r18 -- r21;
  r40 -- r51;
  r35 -- r70;
  r7 -- r27;
  r33 -- r58;
  r36 -- r58;
  r18 -- r34;
  r2 -- r34;
  r41 -- r57;
  r8 -- r45;
  r18 -- r28;
  r28 -- r39;
  r16 -- r29;
  r40 -- r46;
  r2 -- r6;
  r17 -- r49;
  r11 -- r13;
  r10 -- r45;
  r24 -- r58;
  r40 -- r47;
  r9 -- r23;
  r32 -- r46;
  r2 -- r12;
  r18 -- r46;
  r41 -- r42;
  r10 -- r42;
  r20 -- r40;
  r21 -- r39;
  r0 -- r4;
  r23 -- r37;
  r42 -- r56;
  r8 -- r30;
  r37 -- r72;
  r14 -- r32;
  r0 -- r18;
  r7 -- r29;
  r20 -- r53;
  r3 -- r38;
  r22 -- r47;
  r0 -- r14;
  r2 -- r52;
  r11 -- r22;
  r34 -- r39;
  r17 -- r25;
  r8 -- r20;
  r23 -- r39;
  r14 -- r46;
  r6 -- r20;
  r42 -- r47;
  r21 -- r23;
  r34 -- r38;
  r19 -- r28;
  r20 -- r48;
  r30 -- r58;
  r39 -- r46;
  r31 -- r37;
  r22 -- r55;
  r3 -- r21;
  r5 -- r9;
  r4 -- r32;
  r29 -- r42;
  r16 -- r35;
  r2 -- r77;
  r0 -- r5;
  r13 -- r17;
  r19 -- r43;
  r8 -- r10;
  r2 -- r17;
  r3 -- r73;
  r38 -- r58;
  r27 -- r33;
  r15 -- r48;
  r2 -- r35;
  r2 -- r9;
  r37 -- r74;
  r9 -- r13;
  r16 -- r49;
  r26 -- r53;
  r18 -- r23;
  r21 -- r43;
  r41 -- r56;
  r38 -- r43;
  r5 -- r41;
  r33 -- r43;
  r17 -- r21;
  r7 -- r21;
  r40 -- r45;
  r26 -- r45;
  r32 -- r47;
  r14 -- r38;
  r26 -- r40;
  r17 -- r40;
  r42 -- r74;
  r33 -- r62;
  r0 -- r74;
  r0 -- r17;
  r19 -- r38;
  r36 -- r65;
  r26 -- r58;
  r18 -- r25;
  r3 -- r60;
  r28 -- r54;
  r32 -- r67;
  r25 -- r56;
  r38 -- r44;
  r19 -- r31;
  r0 -- r22;
  r4 -- r27;
  r4 -- r42;
  r22 -- r50;
  r12 -- r19;
  r27 -- r30;
  r30 -- r57;
  r2 -- r76;
  r12 -- r24;
  r41 -- r47;
  r6 -- r13;
  r16 -- r34;
  r31 -- r51;
  r3 -- r76;
  r2 -- r33;
  r34 -- r55;
  r12 -- r46;
  r0 -- r2;
  r28 -- r64;
  r40 -- r69;
  r0 -- r61;
  r36 -- r66;
  r29 -- r64;
  r10 -- r30;
  r5 -- r14;
  r12 -- r47;
  r3 -- r61;
  r21 -- r36;
  r24 -- r37;
  r22 -- r46;
  r34 -- r60;
  r32 -- r68;
  r16 -- r27;
  r29 -- r53;
  r2 -- r53;
  r29 -- r35;
  r0 -- r80;
  r36 -- r73;
  r15 -- r29;
  r28 -- r51;
  r2 -- r18;
  r36 -- r39;
  r0 -- r68;
  r37 -- r56;
  r21 -- r40;
  r13 -- r45;
  r20 -- r37;
  r22 -- r57;
  r5 -- r13;
  r7 -- r13;
  r39 -- r43;
  r0 -- r21;
  r7 -- r30;
  r8 -- r33;
  r33 -- r53;
  r16 -- r26;
  r23 -- r27;
  r19 -- r26;
  r5 -- r16;
  r6 -- r26;
  r39 -- r56;
  r31 -- r52;
  r3 -- r77;
  r15 -- r32;
  r17 -- r37;
  r26 -- r51;
  r22 -- r45;
  r32 -- r42;
  r21 -- r52;
  r9 -- r22;
  r39 -- r44;
  r35 -- r56;
  r17 -- r23;
  r0 -- r33;
  r19 -- r49;
  r41 -- r73;
  r5 -- r37;
  r32 -- r64;
  r37 -- r44;
  r10 -- r44;
  r28 -- r35;
  r17 -- r53;
  r2 -- r21;
  r42 -- r59;
  r38 -- r70;
  r3 -- r14;
  r33 -- r55;
  r36 -- r48;
  r39 -- r52;
  r36 -- r43;
  r26 -- r37;
  r5 -- r27;
  r7 -- r23;
  r4 -- r26;
  r22 -- r51;
  r25 -- r40;
  r13 -- r27;
  r5 -- r15;
  r12 -- r25;
  r18 -- r49;
  r17 -- r42;
  r2 -- r38;
  r2 -- r78;
  r15 -- r43;
  r34 -- r71;
  r8 -- r36;
  r36 -- r57;
  r27 -- r36;
  r35 -- r61;
  r39 -- r66;
  r3 -- r9;
  r23 -- r35;
  r15 -- r42;
  r26 -- r43;
  r3 -- r26;
  r37 -- r70;
  r0 -- r16;
  r15 -- r25;
  r7 -- r32;
  r18 -- r44;
  r14 -- r34;
  r16 -- r36;
  r42 -- r49;
  r24 -- r45;
  r24 -- r41;
  r5 -- r35;
  r20 -- r22;
  r13 -- r30;
  r32 -- r44;
  r25 -- r29;
  r0 -- r26;
  r13 -- r33;
  r8 -- r16;
  r19 -- r41;
  r2 -- r48;
  r21 -- r48;
  r24 -- r44;
  r15 -- r51;
  r5 -- r32;
  r40 -- r56;
  r27 -- r54;
  r1 -- r2;
  r0 -- r38;
  r29 -- r40;
  r11 -- r43;
  r12 -- r23;
  r32 -- r34;
  r17 -- r27;
  r40 -- r72;
  r28 -- r50;
  r6 -- r25;
  r14 -- r49;
  r23 -- r29;
  r7 -- r44;
  r27 -- r42;
  r27 -- r60;
  r39 -- r76;
  r27 -- r41;
  r21 -- r28;
  r29 -- r30;
  r21 -- r29;
  r38 -- r72;
  r42 -- r44;
  r34 -- r48;
  r19 -- r34;
  r16 -- r43;
  r2 -- r50;
  r5 -- r19;
  r17 -- r24;
  r33 -- r35;
  r5 -- r11;
  r8 -- r42;
  r16 -- r18;
  r35 -- r69;
  r28 -- r63;
  r18 -- r39;
  r18 -- r53;
  r9 -- r11;
  r31 -- r40;
  r32 -- r63;
  r26 -- r54;
  r14 -- r25;
  r24 -- r34;
  r38 -- r40;
  r10 -- r15;
  r33 -- r37;
  r0 -- r29;
  r7 -- r36;
  r4 -- r7;
  r26 -- r61;
  r16 -- r46;
  r25 -- r42;
  r35 -- r45;
  r12 -- r17;
  r10 -- r32;
  r26 -- r52;
  r0 -- r20;
  r36 -- r72;
  r3 -- r23;
  r25 -- r44;
  r2 -- r58;
  r12 -- r35;
  r32 -- r51;
  r41 -- r58;
  r24 -- r51;
  r15 -- r41;
  r9 -- r25;
  r4 -- r41;
  r0 -- r67;
  r38 -- r68;
  r2 -- r15;
  r42 -- r57;
  r5 -- r8;
  r34 -- r46;
  r3 -- r56;
  r34 -- r43;
  r38 -- r55;
  r10 -- r19;
  r20 -- r56;
  r27 -- r32;
  r29 -- r31;
  r22 -- r31;
  r9 -- r45;
  r34 -- r51;
  r42 -- r52;
  r4 -- r22;
  r21 -- r54;
  r9 -- r41;
  r3 -- r18;
  r17 -- r36;
  r4 -- r35;
  r37 -- r48;
  r41 -- r69;
  r32 -- r56;
  r42 -- r76;
  r14 -- r28;
  r42 -- r61;
  r22 -- r41;
  r11 -- r48;
  r2 -- r46;
  r13 -- r43;
  r39 -- r57;
  r42 -- r66;
  r4 -- r28;
  r3 -- r40;
  r3 -- r69;
  r13 -- r18;
  r8 -- r29;
  r15 -- r44;
  r5 -- r7;
  r35 -- r64;
  r23 -- r38;
  r13 -- r22;
  r8 -- r11;
  r3 -- r7;
  r16 -- r42;
  r24 -- r56;
  r21 -- r37;
  r29 -- r50;
  r38 -- r71;
  r11 -- r25;
  r2 -- r72;
  r29 -- r57;
  r40 -- r77;
  r23 -- r57;
  r25 -- r46;
  r38 -- r51;
  r13 -- r46;
  r30 -- r44;
  r6 -- r14;
  r5 -- r23;
  r14 -- r42;
  r16 -- r19;
  r23 -- r34;
  r4 -- r20;
  r39 -- r67;
  r6 -- r16;
  r25 -- r26;
  r33 -- r39;
  r4 -- r30;
  r10 -- r27;
  r19 -- r46;
  r35 -- r62;
  r9 -- r44;
  r2 -- r63;
  r32 -- r45;
  r25 -- r55;
  r12 -- r42;
  r19 -- r56;
  r7 -- r37;
  r28 -- r47;
  r7 -- r33;
  r34 -- r36;
  r3 -- r55;
  r28 -- r48;
  r41 -- r77;
  r19 -- r52;
  r12 -- r30;
  r4 -- r39;
  r37 -- r61;
  r11 -- r27;
  r0 -- r7;
  r10 -- r21;
  r16 -- r52;
  r12 -- r18;
  r33 -- r38;
  r3 -- r44;
  r26 -- r42;
  r23 -- r36;
  r35 -- r58;
  r5 -- r33;
  r4 -- r34;
  r2 -- r81;
  r5 -- r22;
  r26 -- r44;
  r36 -- r45;
  r17 -- r35;
  r37 -- r69;
  r38 -- r46;
  r39 -- r63;
  r13 -- r31;
  r11 -- r18;
  r0 -- r72;
  r0 -- r70;
  r10 -- r40;
  r30 -- r34;
  r8 -- r12;
  r34 -- r69;
  r8 -- r24;
  r33 -- r42;
  r13 -- r38;
  r2 -- r25;
  r22 -- r53;
  r19 -- r29;
  r31 -- r55;
  r39 -- r62;
  r39 -- r45;
  r21 -- r50;
  r0 -- r1;
  r23 -- r24;
  r3 -- r49;
  r35 -- r52;
  r2 -- r36;
  r30 -- r50;
  r25 -- r51;
  r17 -- r31;
  r6 -- r23;
  r31 -- r68;
  r16 -- r24;
  r14 -- r15;
  r18 -- r24;
  r16 -- r47;
  r38 -- r54;
  r20 -- r51;
  r19 -- r40;
  r3 -- r45;
  r40 -- r76;
  r31 -- r60;
  r2 -- r26;
  r40 -- r67;
  r28 -- r55;
  r30 -- r35;
  r7 -- r24;
  r27 -- r48;
  r6 -- r33;
  r40 -- r44;
  r2 -- r65;
  r34 -- r59;
  r28 -- r36;
  r35 -- r41;
  r20 -- r35;
  r39 -- r59;
  r21 -- r45;
  r30 -- r53;
  r2 -- r40;
  r6 -- r27;
  r35 -- r43;
  r12 -- r13;
  r5 -- r28;
  r32 -- r33;
  r25 -- r35;
  r13 -- r23;
  r7 -- r15;
  r14 -- r21;
  r0 -- r45;
  r25 -- r34;
  r39 -- r70;
  r24 -- r43;
  r25 -- r31;
  r37 -- r73;
  r33 -- r41;
  r7 -- r41;
  r40 -- r48;
  r2 -- r30;
  r5 -- r39;
  r20 -- r28;
  r26 -- r31;
  r30 -- r41;
  r22 -- r33;
  r39 -- r73;
  r0 -- r30;
  r7 -- r12;
  r6 -- r21;
  r33 -- r60;
  r38 -- r61;
  r4 -- r38;
  r23 -- r31;
  r19 -- r44;
  r26 -- r55;
  r33 -- r61;
  r7 -- r40;
  r30 -- r38;
  r27 -- r49;
  r36 -- r54;
  r0 -- r25;
  r13 -- r50;
  r23 -- r52;
  r36 -- r49;
  r30 -- r52;
  r39 -- r50;
  r30 -- r56;
  r31 -- r50;
  r3 -- r34;
  r38 -- r60;
  r16 -- r17;
  r13 -- r37;
  r37 -- r40;
  r9 -- r18;
  r13 -- r40;
  r29 -- r55;
  r32 -- r54;
  r25 -- r39;
  r15 -- r18;
  r10 -- r37;
  r18 -- r52;
  r0 -- r51;
  r35 -- r68;
  r24 -- r36;
  r7 -- r10;
  r21 -- r32;
  r17 -- r22;
  r42 -- r48;
  r41 -- r65;
  r36 -- r42;
  r42 -- r50;
  r22 -- r58;
  r2 -- r79;
  r8 -- r39;
  r30 -- r39;
  r39 -- r54;
  r8 -- r21;
  r4 -- r8;
  r8 -- r14;
  r15 -- r28;
  r34 -- r61;
  r25 -- r50;
  r28 -- r60;
  r3 -- r58;
  r36 -- r41;
  r38 -- r73;
  r2 -- r70;
  r35 -- r36;
  r12 -- r45;
  r33 -- r63;
  r17 -- r43;
  r22 -- r37;
  r11 -- r40;
  r6 -- r15;
  r20 -- r39;
  r34 -- r44;
  r9 -- r35;
  r20 -- r43;
  r9 -- r15;
  r33 -- r54;
  r39 -- r55;
  r16 -- r45;
  r31 -- r64;
  r23 -- r60;
  r25 -- r27;
  r3 -- r12;
  r31 -- r48;
  r36 -- r50;
  r33 -- r48;
  r19 -- r35;
  r32 -- r65;
  r14 -- r29;
  r14 -- r24;
  r7 -- r9;
  r40 -- r58;
  r36 -- r67;
  r6 -- r40;
  r15 -- r27;
  r22 -- r49;
  r7 -- r28;
  r32 -- r38;
  r6 -- r8;
  r8 -- r28;
  r34 -- r54;
  r33 -- r47;
  r42 -- r60;
  r11 -- r42;
  r19 -- r53;
  r11 -- r33;
  r18 -- r19;
  r13 -- r34;
  r22 -- r30;
  r17 -- r51;
  r31 -- r54;
  r12 -- r31;
  r34 -- r66;
  r15 -- r40;
  r21 -- r49;
  r18 -- r41;
  r35 -- r40;
  r20 -- r54;
  r38 -- r69;
  r21 -- r41;
  r17 -- r52;
  r23 -- r44;
  r17 -- r30;
  r15 -- r16;
  r41 -- r53;
  r17 -- r28;
  r5 -- r40;
  r19 -- r20;
  r21 -- r24;
  r26 -- r46;
  r3 -- r52;
  r28 -- r32;
  r3 -- r15;
  r41 -- r72;
  r39 -- r41;
  r3 -- r53;
  r21 -- r38;
  r32 -- r60;
  r31 -- r45;
  r7 -- r25;
  r23 -- r56;
  r28 -- r30;
  r2 -- r7;
  r27 -- r34;
  r18 -- r45;
  r2 -- r42;
  r7 -- r35;
  r11 -- r19;
  r31 -- r35;
  r22 -- r25;
  r33 -- r50;
  r37 -- r63;
  r32 -- r62;
  r3 -- r74;
  r3 -- r39;
  r25 -- r49;
  r9 -- r12;
  r39 -- r60;
  r10 -- r22;
  r3 -- r33;
  r3 -- r71;
  r37 -- r65;
  r2 -- r13;
  r0 -- r47;
  r39 -- r40;
  r18 -- r20;
  r14 -- r36;
  r23 -- r55;
  r2 -- r22;
  r3 -- r35;
  r0 -- r44;
  r24 -- r25;
  r39 -- r49;
  r21 -- r46;
  r40 -- r52;
  r14 -- r44;
  r5 -- r36;
  r4 -- r13;
  r3 -- r25;
  r34 -- r35;
  r14 -- r26;
  r6 -- r41;
  r19 -- r30;
  r20 -- r52;
  r13 -- r16;
  r11 -- r23;
  r27 -- r53;
  r30 -- r47;
  r19 -- r37;
  r8 -- r25;
  r33 -- r45;
  r34 -- r58;
  r24 -- r26;
  r38 -- r49;
  r13 -- r19;
  r34 -- r68;
  r10 -- r16;
  r40 -- r65;
  r6 -- r19;
  r22 -- r35;
  r22 -- r39;
  r7 -- r19;
  r38 -- r41;
  r23 -- r30;
  r0 -- r65;
  r27 -- r47;
  r33 -- r64;
  r11 -- r41;
  r31 -- r56;
  r20 -- r42;
  r13 -- r39;
  r17 -- r38;
  r32 -- r61;
  r11 -- r28;
  r27 -- r52;
  r30 -- r62;
  r11 -- r29;
  r20 -- r55;
  r25 -- r28;
  r2 -- r62;
  r3 -- r67;
  r14 -- r20;
  r35 -- r48;
  r34 -- r50;
  r42 -- r73;
  r6 -- r36;
  r0 -- r62;
  r37 -- r38;
  r22 -- r54;
  r19 -- r39;
  r41 -- r76;
  r28 -- r61;
  r17 -- r41;
  r28 -- r65;
  r10 -- r47;
  r13 -- r28;
  r27 -- r39;
  r2 -- r68;
  r10 -- r20;
  r0 -- r40;
  r35 -- r44;
  r38 -- r66;
  r12 -- r28;
  r40 -- r63;
  r6 -- r43;
  r41 -- r51;
  r0 -- r56;
  r40 -- r71;
  r21 -- r22;
  r11 -- r47;
  r33 -- r57;
  r10 -- r35;
  r14 -- r22;
  r2 -- r23;
  r15 -- r38;
  r30 -- r49;
  r37 -- r50;
  r37 -- r64;
  r29 -- r54;
  r25 -- r33;
  r15 -- r46;
  r4 -- r16;
  r25 -- r36;
  r29 -- r32;
  r34 -- r52;
  r39 -- r64;
  r0 -- r24;
  r41 -- r62;
  r31 -- r67;
  r12 -- r36;
  r24 -- r47;
  r26 -- r36;
  r41 -- r48;
  r17 -- r26;
  r0 -- r43;
  r34 -- r57;
  r25 -- r30;
  r39 -- r65;
  r29 -- r59;
  r42 -- r46;
  r10 -- r41;
  r2 -- r55;
  r16 -- r40;
  r21 -- r47;
  r6 -- r12;
  r13 -- r25;
  r18 -- r36;
  r6 -- r24;
  r24 -- r38;
  r24 -- r30;
  r14 -- r47;
  r20 -- r38;
  r2 -- r28;
  r2 -- r29;
  r6 -- r37;
  r10 -- r28;
  r19 -- r32;
  r9 -- r34;
  r39 -- r53;
  r34 -- r37;
  r6 -- r28;
  r38 -- r63;
  r11 -- r39;
  r7 -- r11;
  r14 -- r45;
  r30 -- r60;
  r11 -- r26;
  r40 -- r41;
  r37 -- r45;
  r9 -- r32;
  r35 -- r63;
  r12 -- r14;
  r18 -- r38;
  r33 -- r44;
  r1 -- r3;
  r0 -- r55;
  r23 -- r48;
  r26 -- r60;
  r36 -- r71;
  r33 -- r56;
  r11 -- r21;
  r2 -- r64;
  r17 -- r47;
  r20 -- r33;
  r33 -- r40;
  r15 -- r50;
  r37 -- r51;
  r28 -- r46;
  r6 -- r35;
  r13 -- r36;
  r3 -- r42;
  r37 -- r71;
  r15 -- r45;
  r36 -- r46;
  r22 -- r59;
  r0 -- r23;
  r3 -- r37;
  r11 -- r45;
  r2 -- r37;
  r9 -- r17;
  r3 -- r68;
  r17 -- r39;
  r35 -- r66;
  r5 -- r31;
  r3 -- r78;
  r21 -- r33;
  r0 -- r57;
  r39 -- r75;
  r0 -- r9;
  r25 -- r32;
  r24 -- r42;
  r19 -- r22;
  r41 -- r68;
  r7 -- r38;
  r13 -- r41;
  r23 -- r54;
  r36 -- r59;
  r20 -- r50;
  r23 -- r58;
  r42 -- r68;
  r0 -- r10;
  r15 -- r52;
  r16 -- r41;
  r18 -- r33;
  r15 -- r23;
  r16 -- r21;
  r42 -- r64;
  r28 -- r38;
  r20 -- r45;
  r27 -- r45;
  r14 -- r37;
  r17 -- r34;
  r24 -- r53;
  r27 -- r31;
  r22 -- r43;
  r26 -- r34;
  r38 -- r59;
  r3 -- r19;
  r0 -- r71;
  r11 -- r20;
  r17 -- r29;
  r33 -- r49;
  r17 -- r48;
  r29 -- r60;
  r30 -- r32;
  r0 -- r34;
  r11 -- r16;
  r6 -- r30;
  r20 -- r29;
  r37 -- r67;
  r11 -- r12;
  r14 -- r41;
  r34 -- r49;
  r26 -- r56;
  r31 -- r42;
  r24 -- r28;
  r33 -- r46;
  r0 -- r31;
  r3 -- r50;
  r7 -- r17;
  r8 -- r41;
  r14 -- r50;
  r30 -- r43;
  r0 -- r50;
  r27 -- r38;
  r42 -- r69;
  r21 -- r30;
  r28 -- r42;
  r41 -- r44;
  r0 -- r39;
  r10 -- r11;
  r3 -- r20;
  r24 -- r55;
  r42 -- r55;
  r31 -- r62;
  r41 -- r43;
  r32 -- r58;
  r8 -- r26;
  r4 -- r6;
  r36 -- r52;
  r2 -- r20;
  r31 -- r59;
  r38 -- r53;
  r22 -- r36;
  r25 -- r61;
  r26 -- r33;
  r0 -- r13;
  r16 -- r25;
  r38 -- r48;
  r14 -- r27;
  r21 -- r53;
  r3 -- r43;
  r9 -- r27;
  r27 -- r44;
  r25 -- r62;
  r3 -- r79;
  r13 -- r49;
  r38 -- r65;
  r6 -- r29;
  r11 -- r31;
  r42 -- r77;
  r19 -- r21;
  r38 -- r75;
  r29 -- r36;
  r32 -- r41;
  r38 -- r64;
  r29 -- r43;
  r29 -- r38;
  r4 -- r21;
  r42 -- r58;
  r35 -- r47;
  r12 -- r44;
  r25 -- r38;
  r32 -- r57;
  r8 -- r17;
  r33 -- r70;
  r3 -- r4;
  r33 -- r67;
  r19 -- r27;
  r21 -- r27;
  r25 -- r47;
  r28 -- r58;
  r35 -- r57;
  r36 -- r64;
  r2 -- r8;
  r6 -- r31;
  r40 -- r43;
  r8 -- r44;
  r36 -- r55;
  r0 -- r76;
  r9 -- r10;
  r31 -- r34;
  r13 -- r21;
  r7 -- r8;
  r37 -- r58;
  r13 -- r29;
  r4 -- r9;
  r16 -- r22;
  r5 -- r34;
  r2 -- r61;
  r36 -- r37;
  r6 -- r7;
  r6 -- r9;
  r14 -- r18;
  r11 -- r17;
  r15 -- r49;
  r5 -- r20;
  r4 -- r37;
  r24 -- r49;
  r22 -- r29;
  r24 -- r54;
  r31 -- r38;
  r18 -- r22;
  r16 -- r53;
  r21 -- r44;
  r41 -- r54;
  r41 -- r59;
  r39 -- r58;
  r13 -- r20;
  r40 -- r70;
  r33 -- r34;
  r41 -- r46;
  r29 -- r44;
  r34 -- r45;
  r15 -- r21;
  r0 -- r60;
  r29 -- r37;
  r8 -- r40;
  r9 -- r43;
  r2 -- r66;
  r3 -- r72;
  r29 -- r39;
  r3 -- r41;
  r21 -- r51;
  r6 -- r17;
  r21 -- r26;
  r29 -- r34;
  r3 -- r59;
  r22 -- r48;
  r11 -- r38;
  r26 -- r29;
  r23 -- r43;
  r12 -- r48;
  r38 -- r39;
  r31 -- r43;
  r17 -- r32;
  r2 -- r19;
  r20 -- r44;
  r0 -- r27;
  r41 -- r75;
  r14 -- r48;
  comment = "81:v79-> 80:v78-> 79:v77-> 42:v40-> 6:v4-> 39:v37-> 3:a3-> 41:v39-> 2:a2-> 1:a0-> 0:a1-> 7:v5-> 33:v31-> 37:v35-> 40:v38-> 12:v10-> 32:v30-> 38:v36-> 36:v34-> 26:v24-> 35:v33-> 25:v23-> 19:v17-> 20:v18-> 17:v15-> 23:v21-> 31:v29-> 34:v32-> 30:v28-> 29:v27-> 11:v9-> 24:v22-> 28:v26-> 61:v59-> 13:v11-> 8:v6-> 65:v63-> 72:v70-> 63:v61-> 57:v55-> 76:v74-> 70:v68-> 50:v48-> 45:v43-> 55:v53-> 71:v69-> 48:v46-> 49:v47-> 10:v8-> 47:v45-> 21:v19-> 9:v7-> 46:v44-> 22:v20-> 14:v12-> 59:v57-> 51:v49-> 77:v75-> 53:v51-> 52:v50-> 58:v56-> 60:v58-> 67:v65-> 16:v14-> 75:v73-> 69:v67-> 56:v54-> 18:v16-> 15:v13-> 73:v71-> 43:v41-> 62:v60-> 27:v25-> 5:v3-> 66:v64-> 78:v76-> 68:v66-> 44:v42-> 64:v62-> 74:v72-> 54:v52-> 4:v2"
  comment = "v44<-t1;v31<-a2;v57<-a1;v74<-a0;v7<-t1;v24<-a3;v42<-t2;v51<-a7;v54<-a7;v8<-t0;v3<-t2;v52<-a5;v22<-a6;v41<-t1;v78<-a0;v29<-a1;v37<-a0;v15<-a1;v50<-a7;v63<-a3;v77<-a0;v18<-a3;v59<-a1;v21<-a6;v65<-a6;v75<-a4;v73<-a5;v25<-a7;v60<-a3;v38<-a2;v9<-a5;v56<-a3;v32<-a0;v12<-a7;v49<-a6;v76<-a4;v53<-a6;v14<-t0;v19<-a1;v58<-a7;v71<-a5;v36<-a4;v70<-a1;v45<-a3;v4<-a1;v11<-a7;v40<-a0;v2<-t3;v27<-a1;v33<-a5;v5<-a4;v62<-t0;v6<-t0;v34<-a0;v64<-a3;v30<-a5;v13<-t0;v47<-t0;v55<-a1;v72<-a5;v66<-a6;v68<-a1;v10<-a5;v46<-a7;v35<-a4;v39<-a1;v26<-a6;v69<-a6;v20<-a1;v67<-a6;v48<-a3;v28<-a3;v43<-a6;v23<-a1;v61<-a1;v16<-a7;v17<-a5;v79<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v7 ← a0", color=green];
  r3 [label="v6 ← a1", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v2 ← a0", color=green];
  r6 [label="a2", color=blue];
  r4 [label="a1", color=blue];
  r1 [label="v5 ← a0", color=green];
  r7 [label="v8 ← a0", color=green];
  r10 [label="v3 ← a0", color=green];
  r8 [label="a3", color=blue];
  r6 -- r7;
  r2 -- r5;
  r0 -- r1;
  r4 -- r7;
  r0 -- r10;
  r2 -- r6;
  r4 -- r8;
  r4 -- r5;
  r2 -- r7;
  r0 -- r2;
  r0 -- r3;
  r0 -- r4;
  r2 -- r4;
  r4 -- r6;
  r0 -- r8;
  r0 -- r9;
  r0 -- r7;
  r2 -- r3;
  r2 -- r8;
  r6 -- r8;
  r0 -- r5;
  r0 -- r6;
  comment = "10:v3-> 9:v2-> 8:a3-> 2:a0-> 0:zero-> 7:v8-> 6:a2-> 4:a1-> 5:v7-> 3:v6-> 1:v5"
  comment = "v7<-a0;v6<-a1;v2<-a0;v5<-a0;v8<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v76, v58, v79, v22, v67, v28, v44, v33, v64, v60, v51, v73, v63, v20, v27, v50, v59, v6, v54, v62, v5, v10, v49, v37, v43, v17, v52, v31, v48, v75, v68, v45, v61, v55, v40, v3, v25, v16, v14, v69, v13, v26, v42, v7, v41, v32, v12, v29, v8, v19, v47, v4, v74, v57, v34, v11, v66, v46, v71, v53, v21, a0, v78, v30, v36, v65, v24, v9, v39, v72, v18, v56, v23, v77, v35, v38, v70, v15, v2], uses: [v76, v58, v79, v22, v67, a1, v44, v28, v64, v33, v60, v51, v73, v63, v20, v50, v27, v59, v6, v54, v62, v5, v10, v49, v37, v17, v43, a3, v52, v31, v48, v75, v68, v45, v61, v55, v3, v40, v25, v14, v16, v69, v13, v26, v42, v7, v41, v32, v12, v29, v8, v19, v47, v4, v74, v57, v34, v11, v66, v46, v71, v53, v21, a0, v30, v78, v36, v65, a2, v24, v9, v39, v72, v18, v56, v23, v77, v35, v38, v70, v15, v2], upward_exposed: [a2, a1, a3, a0], params_defs: []
; live_in: [a2, a1, a3, a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a1, a0, a2, a3]
  mv v3, a1  ; live: [a1, a2, a3, v2]
  mv v4, a2  ; live: [v3, a1, a2, a3, v2]
  mv v5, a3  ; live: [v3, a1, v4, a2, a3, v2]
  add v6, v2, v3  ; live: [v3, a1, v4, v5, a2, a3, v2]
  add v7, v2, v4  ; live: [v3, a1, v4, v6, v5, a2, a3, v2]
  add v8, v2, v5  ; live: [v3, v7, a1, v4, v6, v5, a2, a3, v2]
  add v9, v3, v4  ; live: [v3, v7, a1, v8, v4, v6, v5, a2, a3, v2]
  add v10, v3, v5  ; live: [v3, v7, a1, v8, v4, v6, v5, a2, a3, v9, v2]
  add v11, v4, v5  ; live: [v3, v7, a1, v8, v4, v6, v5, v10, a2, a3, v9, v2]
  add v12, v6, v7  ; live: [v3, v7, a1, v8, v4, v6, v11, v5, v10, a2, a3, v9, v2]
  add v13, v6, v8  ; live: [v3, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, a3, v9, v2]
  add v14, v6, v9  ; live: [v3, v13, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, a3, v9, v2]
  add v15, v6, v10  ; live: [v3, v14, v13, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, a3, v9, v2]
  add v16, v6, v11  ; live: [v3, v14, v13, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, a3, v9, v15, v2]
  add v17, v7, v8  ; live: [v3, v14, v16, v13, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, a3, v9, v15, v2]
  add v18, v7, v9  ; live: [v3, v14, v16, v13, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, v17, a3, v9, v15, v2]
  add v19, v7, v10  ; live: [v3, v14, v16, v13, v7, a1, v12, v8, v4, v6, v11, v5, v10, a2, v17, a3, v9, v18, v15, v2]
  add v20, v7, v11  ; live: [v3, v14, v16, v13, v7, a1, v12, v8, v19, v4, v6, v11, v5, v10, a2, v17, a3, v9, v18, v15, v2]
  add v21, v8, v9  ; live: [v3, v14, v16, v13, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v10, a2, v17, a3, v9, v18, v15, v2]
  add v22, v8, v10  ; live: [v3, v14, v16, v13, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v9, v18, v15, v2]
  add v23, v8, v11  ; live: [v3, v14, v16, v13, v22, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v9, v18, v15, v2]
  add v24, v9, v10  ; live: [v3, v14, v16, v13, v22, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v9, v18, v23, v15, v2]
  add v25, v9, v11  ; live: [v3, v14, v16, v13, v22, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v26, v10, v11  ; live: [v3, v25, v14, v16, v13, v22, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v27, v12, v13  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, a1, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v28, v12, v14  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, a1, v12, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v29, v12, v15  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, a1, v12, v28, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v30, v12, v16  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, a1, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v31, v12, v17  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, a1, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, a2, v17, a3, v24, v9, v18, v23, v15, v2]
  add v32, v12, v18  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, a1, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, a2, v17, a3, v24, v31, v9, v18, v23, v15, v2]
  add v33, v12, v19  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, a2, v17, a3, v24, v31, v9, v18, v23, v15, v2]
  add v34, v12, v20  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, a2, v17, a3, v24, v31, v9, v18, v23, v15, v2]
  add v35, v12, v21  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, a2, v17, a3, v24, v31, v9, v18, v23, v15, v2]
  add v36, v12, v22  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, a2, v17, a3, v24, v31, v9, v18, v23, v35, v15, v2]
  add v37, v12, v23  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, a2, v17, a3, v24, v31, v9, v18, v23, v35, v15, v2]
  add v38, v12, v24  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, a2, v37, v17, a3, v24, v31, v9, v18, v23, v35, v15, v2]
  add v39, v12, v25  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, a2, v37, v17, a3, v24, v31, v9, v18, v23, v35, v38, v15, v2]
  add v40, v12, v26  ; live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, a2, v37, v17, a3, v24, v31, v9, v39, v18, v23, v35, v38, v15, v2]
  add v41, v2, v3  ; live: [v2, v3, v25, v14, v16, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, a2, v37, v17, a3, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
  add v42, v41, v4  ; live: [v25, v16, v14, v26, v13, v22, v7, v32, v41, a1, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, a2, v37, v17, a3, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
  add v43, v42, v5  ; live: [v25, v16, v14, v26, v13, v42, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v5, v21, v10, v30, v36, a2, v37, v17, a3, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
  add v44, v43, v6  ; live: [v25, v16, v14, v26, v13, v22, v7, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v21, v10, v30, v36, a2, v37, v17, v43, a3, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
  add v45, v44, v7  ; live: [v25, v16, v14, v26, v13, v22, v7, v32, a1, v12, v28, v44, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, a2, v37, v17, v24, a3, v31, v9, v39, v18, v23, v35, v38, v15, v40]
  add v46, v45, v8  ; live: [v25, v16, v14, v26, v13, v22, v32, a1, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, a2, v37, v17, v24, a3, v31, v9, v39, v18, v23, v35, v45, v38, v15, v40]
  add v47, v46, v9  ; live: [v25, v16, v14, v26, v13, v22, v32, a1, v12, v28, v33, v29, v27, v20, v19, v34, v11, v46, v21, v10, v30, v36, a2, v37, v17, v24, a3, v31, v9, v39, v18, v23, v35, v38, v15, v40]
  add v48, v47, v10  ; live: [v25, v16, v14, v26, v13, v22, v32, a1, v12, v28, v33, v29, v27, v20, v19, v47, v34, v11, v21, v10, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v23, v35, v38, v15, v40]
  add v49, v48, v11  ; live: [v25, v16, v14, v26, v13, v22, v32, a1, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v48, v23, v35, v38, v15, v40]
  add v50, v49, v12  ; live: [v25, v16, v14, v26, v13, v22, v32, a1, v12, v28, v33, v29, v27, v20, v19, v34, v21, v49, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v23, v35, v38, v15, v40]
  add v51, v50, v13  ; live: [v25, v16, v14, v26, v13, v22, v32, a1, v28, v33, v29, v27, v20, v50, v19, v34, v21, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v23, v35, v38, v15, v40]
  add v52, v51, v14  ; live: [v25, v16, v14, v26, v22, v32, a1, v28, v33, v51, v29, v27, v20, v19, v34, v21, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v23, v35, v38, v15, v40]
  add v53, v52, v15  ; live: [v25, v16, v26, v22, v32, a1, v28, v33, v29, v27, v20, v19, v34, v21, v30, v36, a2, v37, v17, v24, a3, v52, v31, v39, v18, v23, v35, v38, v15, v40]
  add v54, v53, v16  ; live: [v25, v16, v26, v22, v32, a1, v28, v33, v29, v27, v20, v19, v34, v21, v53, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v23, v35, v38, v40]
  add v55, v54, v17  ; live: [v25, v26, v22, v32, a1, v28, v33, v29, v27, v20, v19, v34, v54, v21, v30, v36, a2, v37, v17, v24, a3, v31, v39, v18, v23, v35, v38, v40]
  add v56, v55, v18  ; live: [v25, v26, v22, v32, a1, v28, v33, v29, v27, v20, v19, v34, v21, v30, v36, a2, v37, a3, v24, v31, v39, v18, v23, v35, v38, v55, v40]
  add v57, v56, v19  ; live: [v25, v21, v26, v30, v22, v36, a2, v37, v32, a1, a3, v24, v28, v31, v33, v39, v56, v29, v27, v23, v20, v35, v19, v38, v34, v40]
  add v58, v57, v20  ; live: [v25, v21, v26, v30, v22, v36, a2, v37, v32, a1, a3, v24, v28, v31, v33, v39, v29, v27, v23, v20, v35, v38, v57, v34, v40]
  add v59, v58, v21  ; live: [v25, v58, v21, v26, v30, v22, v36, a2, v37, v32, a1, a3, v24, v28, v31, v33, v39, v29, v27, v23, v35, v38, v34, v40]
  add v60, v59, v22  ; live: [v25, v26, v30, v22, v36, a2, v37, v32, a1, a3, v24, v28, v31, v33, v39, v29, v27, v23, v35, v38, v59, v34, v40]
  add v61, v60, v23  ; live: [v25, v26, v30, v36, a2, v37, v32, a1, a3, v24, v28, v31, v33, v39, v60, v29, v27, v23, v35, v38, v34, v40]
  add v62, v61, v24  ; live: [v25, v26, v30, v36, a2, v37, v32, a1, a3, v24, v28, v31, v33, v39, v29, v27, v35, v38, v61, v34, v40]
  add v63, v62, v25  ; live: [v62, v25, v26, v30, v36, a2, v37, v32, a1, a3, v31, v28, v33, v39, v29, v27, v35, v38, v34, v40]
  add v64, v63, v26  ; live: [v26, v30, v36, a2, v37, v32, a1, a3, v31, v28, v33, v39, v63, v29, v27, v35, v38, v34, v40]
  add v65, v64, v27  ; live: [v30, v36, a2, v37, v32, a1, a3, v31, v28, v33, v64, v39, v29, v27, v35, v38, v34, v40]
  add v66, v65, v28  ; live: [v30, v36, a2, v37, v32, v65, a1, a3, v31, v28, v33, v39, v29, v35, v38, v34, v40]
  add v67, v66, v29  ; live: [v66, v30, v36, a2, v37, v32, a1, a3, v31, v33, v39, v29, v35, v38, v34, v40]
  add v68, v67, v30  ; live: [v67, v30, v36, a2, v37, v32, a1, a3, v31, v33, v39, v35, v38, v34, v40]
  add v69, v68, v31  ; live: [v36, a2, v37, v32, a1, a3, v31, v33, v39, v68, v35, v38, v34, v40]
  add v70, v69, v32  ; live: [v34, v39, v40, v69, v36, v35, a2, v38, v37, v32, a1, a3, v33]
  add v71, v70, v33  ; live: [v33, v39, v40, v36, v35, a2, v38, v37, a1, v70, a3, v34]
  add v72, v71, v34  ; live: [v40, v71, v36, v35, a2, v38, v37, a1, a3, v34, v39]
  add v73, v72, v35  ; live: [v72, v36, v35, a2, v38, v37, a1, a3, v39, v40]
  add v74, v73, v36  ; live: [v73, v36, a2, v38, v37, a1, a3, v39, v40]
  add v75, v74, v37  ; live: [v40, a2, v38, v37, v74, a1, a3, v39]
  add v76, v75, v38  ; live: [v75, a2, v38, a1, a3, v39, v40]
  add v77, v76, v39  ; live: [v76, a2, a1, a3, v39, v40]
  add v78, v77, v40  ; live: [a2, a1, a3, v77, v40]
  neg v79, v78  ; live: [a2, a1, a3, v78]
; control
  mv a0, v79  ; live: [a2, a1, a3, v79]
  ret  ; live: [a2, a1, a3, a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v8, v7, a2, v6, a1, a3, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 1  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  li v6, 2  ; live: [zero, a0]
  mv a1, v6  ; live: [v6, zero, a0]
  li v7, 3  ; live: [a1, zero, a0]
  mv a2, v7  ; live: [a1, zero, a0, v7]
  li v8, 4  ; live: [a2, a1, zero, a0]
  mv a3, v8  ; live: [a2, a1, zero, a0, v8]
  call f  ; live: [a2, a1, a3, zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/spill2.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(10)> <- [..] = 1
    let %1: int32 = call f0()
    let %2: int32 = load int32 offset(f2.m0, 0)
    let %3: int32 = add(%2, %2)
    let %4: int32 = add(%3, %3)
    let %5: int32 = add(%4, %4)
    let %6: int32 = add(%5, %5)
    let %7: int32 = add(%6, %6)
    let %8: int32 = add(%7, %7)
    let %9: int32 = add(%8, %8)
    let %10: int32 = add(%9, %9)
    let %11: int32 = add(%10, %10)
    let %12: int32 = add(%11, %11)
    let %13: int32 = add(%12, %12)
    let %14: int32 = add(%13, %13)
    let %15: int32 = add(%14, %14)
    let %16: int32 = add(%15, %15)
    let %17: int32 = add(%16, %16)
    let %18: int32 = load int32 offset(f2.m0, 1)
    let %19: bool = eq(%18, 0)
    br %19 b1() b2()
  }
  .bb #b1 () {
    let %20: int32 = call f1(67890)
    jump b3(%20)
  }
  .bb #b2 () {
    let %21: int32 = add(%2, %3)
    let %22: int32 = add(%21, %4)
    let %23: int32 = add(%22, %5)
    let %24: int32 = add(%23, %6)
    let %25: int32 = add(%24, %7)
    let %26: int32 = add(%25, %8)
    let %27: int32 = add(%26, %9)
    let %28: int32 = add(%27, %10)
    let %29: int32 = add(%28, %11)
    let %30: int32 = add(%29, %12)
    let %31: int32 = add(%30, %13)
    let %32: int32 = add(%31, %14)
    let %33: int32 = add(%32, %15)
    let %34: int32 = add(%33, %16)
    let %35: int32 = add(%34, %17)
    let %36: int32 = add(%35, %1)
    jump b3(%36)
  }
  .bb #b3 (int32) {
    let %37: unit = ext_call minimbt_print_int($b3.0)
    return %37
  }
}
.fn f #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 12345
  }
}
.fn thunk_start #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn g #f1 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    return %0
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  comment = "1:a0-> 0:v2"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of g"];
  r0 [label="a0", color=blue];
  r2 [label="v4 ← a0", color=green];
  r1 [label="v2 ← a0", color=green];
  r3 [label="v3 ← a0", color=green];
  r1 -- r2;
  comment = "3:v3-> 2:v4-> 1:v2-> 0:a0"
  comment = "v4<-a0;v2<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of g"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r46 [label="v35 ← a3", color=green];
  r38 [label="v27 ← a3", color=green];
  r33 [label="v4 ← a2", color=green];
  r9 [label="v82 ← a1", color=green];
  r26 [label="v63 ← a1", color=green];
  r47 [label="v36 ← a2", color=green];
  r6 [label="v86 ← a0", color=green];
  r44 [label="v33 ← a4", color=green];
  r13 [label="v7 ← a6", color=green];
  r42 [label="v31 ← a5", color=green];
  r4 [label="v43 ← a0", color=green];
  r29 [label="v21 ← a0", color=green];
  r35 [label="v24 ← a5", color=green];
  r7 [label="v2 ← a0", color=green];
  r10 [label="v83 ← a1", color=green];
  r8 [label="v88 ← a1", color=green];
  r5 [label="v39 ← a0", color=green];
  r36 [label="v25 ← t2", color=green];
  r24 [label="v18 ← a2", color=green];
  r15 [label="v9 ← a4", color=green];
  r32 [label="v20 ← a3", color=green];
  r49 [label="v38 ← a0", color=green];
  r43 [label="v32 ← a6", color=green];
  r31 [label="v22 ← a0", color=green];
  r39 [label="v28 ← a5", color=green];
  r17 [label="v11 ← a7", color=green];
  r48 [label="v37 ← a6", color=green];
  r12 [label="v6 ← a1", color=green];
  r37 [label="v26 ← a7", color=green];
  r20 [label="v14 ← t1", color=green];
  r23 [label="v17 ← a5", color=green];
  r3 [label="v41 ← a0", color=green];
  r27 [label="v64 ← a0", color=green];
  r1 [label="v40 ← a0", color=green];
  r40 [label="v29 ← a4", color=green];
  r41 [label="v30 ← a6", color=green];
  r28 [label="v65 ← a0", color=green];
  r11 [label="v5 ← t1", color=green];
  r34 [label="v23 ← a3", color=green];
  r22 [label="v16 ← a7", color=green];
  r14 [label="v8 ← a2", color=green];
  r30 [label="v61 ← a0", color=green];
  r45 [label="v34 ← a0", color=green];
  r25 [label="v19 ← a2", color=green];
  r2 [label="a0", color=blue];
  r16 [label="v10 ← t0", color=green];
  r18 [label="v12 ← a4", color=green];
  r19 [label="v13 ← a7", color=green];
  r21 [label="v15 ← a0", color=green];
  r21 -- r24;
  r12 -- r25;
  r15 -- r39;
  r17 -- r42;
  r18 -- r49;
  r32 -- r48;
  r0 -- r36;
  r16 -- r20;
  r15 -- r43;
  r0 -- r32;
  r11 -- r35;
  r0 -- r48;
  r24 -- r40;
  r23 -- r46;
  r21 -- r38;
  r7 -- r25;
  r0 -- r28;
  r14 -- r40;
  r20 -- r34;
  r23 -- r35;
  r15 -- r42;
  r2 -- r7;
  r18 -- r35;
  r20 -- r36;
  r18 -- r45;
  r0 -- r16;
  r15 -- r25;
  r18 -- r44;
  r17 -- r19;
  r11 -- r19;
  r14 -- r34;
  r0 -- r6;
  r25 -- r48;
  r16 -- r36;
  r17 -- r44;
  r19 -- r45;
  r24 -- r41;
  r32 -- r35;
  r24 -- r45;
  r22 -- r25;
  r20 -- r22;
  r32 -- r44;
  r13 -- r33;
  r0 -- r26;
  r19 -- r41;
  r21 -- r48;
  r16 -- r33;
  r24 -- r44;
  r25 -- r49;
  r19 -- r36;
  r19 -- r47;
  r1 -- r2;
  r0 -- r38;
  r11 -- r43;
  r0 -- r47;
  r12 -- r43;
  r15 -- r37;
  r12 -- r23;
  r32 -- r34;
  r18 -- r20;
  r14 -- r36;
  r11 -- r15;
  r18 -- r37;
  r25 -- r37;
  r0 -- r44;
  r22 -- r44;
  r24 -- r25;
  r24 -- r46;
  r15 -- r47;
  r21 -- r46;
  r18 -- r43;
  r14 -- r44;
  r14 -- r49;
  r0 -- r15;
  r16 -- r32;
  r12 -- r34;
  r15 -- r35;
  r19 -- r48;
  r19 -- r34;
  r16 -- r43;
  r7 -- r20;
  r13 -- r16;
  r18 -- r40;
  r17 -- r24;
  r11 -- r23;
  r21 -- r34;
  r33 -- r35;
  r32 -- r40;
  r13 -- r48;
  r11 -- r46;
  r19 -- r37;
  r33 -- r45;
  r0 -- r19;
  r11 -- r37;
  r16 -- r18;
  r23 -- r45;
  r13 -- r19;
  r18 -- r39;
  r22 -- r35;
  r7 -- r22;
  r14 -- r33;
  r22 -- r39;
  r7 -- r19;
  r14 -- r25;
  r24 -- r34;
  r13 -- r14;
  r33 -- r37;
  r12 -- r22;
  r11 -- r41;
  r0 -- r29;
  r23 -- r42;
  r19 -- r33;
  r15 -- r34;
  r15 -- r24;
  r22 -- r32;
  r16 -- r46;
  r25 -- r42;
  r15 -- r33;
  r20 -- r42;
  r12 -- r16;
  r12 -- r17;
  r13 -- r39;
  r17 -- r38;
  r0 -- r20;
  r15 -- r19;
  r25 -- r44;
  r11 -- r44;
  r12 -- r35;
  r24 -- r39;
  r15 -- r41;
  r21 -- r35;
  r14 -- r20;
  r13 -- r44;
  r0 -- r49;
  r19 -- r39;
  r24 -- r32;
  r17 -- r41;
  r11 -- r24;
  r17 -- r36;
  r14 -- r39;
  r17 -- r33;
  r14 -- r19;
  r22 -- r41;
  r0 -- r40;
  r11 -- r48;
  r20 -- r32;
  r13 -- r43;
  r25 -- r43;
  r12 -- r40;
  r23 -- r32;
  r19 -- r42;
  r13 -- r18;
  r15 -- r44;
  r23 -- r38;
  r13 -- r22;
  r0 -- r11;
  r16 -- r42;
  r21 -- r22;
  r11 -- r47;
  r16 -- r23;
  r21 -- r37;
  r15 -- r38;
  r14 -- r22;
  r11 -- r25;
  r17 -- r20;
  r25 -- r33;
  r13 -- r24;
  r23 -- r33;
  r15 -- r46;
  r20 -- r24;
  r25 -- r36;
  r12 -- r38;
  r25 -- r46;
  r13 -- r42;
  r23 -- r49;
  r13 -- r46;
  r0 -- r24;
  r12 -- r36;
  r15 -- r22;
  r22 -- r42;
  r24 -- r47;
  r11 -- r49;
  r14 -- r42;
  r16 -- r19;
  r0 -- r43;
  r23 -- r34;
  r33 -- r39;
  r22 -- r38;
  r16 -- r40;
  r0 -- r35;
  r21 -- r47;
  r19 -- r46;
  r13 -- r25;
  r18 -- r36;
  r22 -- r24;
  r24 -- r38;
  r14 -- r47;
  r32 -- r45;
  r20 -- r38;
  r12 -- r42;
  r23 -- r47;
  r19 -- r32;
  r0 -- r46;
  r15 -- r17;
  r0 -- r8;
  r25 -- r41;
  r11 -- r39;
  r21 -- r25;
  r20 -- r47;
  r12 -- r49;
  r22 -- r23;
  r24 -- r35;
  r7 -- r11;
  r21 -- r42;
  r18 -- r48;
  r12 -- r39;
  r16 -- r44;
  r14 -- r45;
  r12 -- r37;
  r20 -- r49;
  r0 -- r12;
  r12 -- r14;
  r18 -- r38;
  r33 -- r44;
  r17 -- r45;
  r1 -- r3;
  r0 -- r7;
  r23 -- r48;
  r16 -- r48;
  r11 -- r21;
  r33 -- r38;
  r12 -- r18;
  r17 -- r47;
  r23 -- r36;
  r20 -- r33;
  r33 -- r40;
  r12 -- r32;
  r32 -- r36;
  r14 -- r43;
  r13 -- r32;
  r13 -- r36;
  r11 -- r14;
  r18 -- r42;
  r15 -- r45;
  r17 -- r35;
  r15 -- r36;
  r0 -- r23;
  r18 -- r21;
  r11 -- r45;
  r11 -- r18;
  r7 -- r27;
  r17 -- r39;
  r18 -- r34;
  r20 -- r23;
  r33 -- r42;
  r13 -- r38;
  r21 -- r33;
  r17 -- r49;
  r11 -- r13;
  r22 -- r34;
  r0 -- r9;
  r25 -- r32;
  r24 -- r42;
  r16 -- r37;
  r19 -- r22;
  r32 -- r46;
  r18 -- r46;
  r13 -- r41;
  r0 -- r1;
  r0 -- r10;
  r23 -- r24;
  r16 -- r41;
  r18 -- r33;
  r15 -- r23;
  r20 -- r40;
  r13 -- r35;
  r16 -- r21;
  r21 -- r39;
  r12 -- r21;
  r0 -- r4;
  r23 -- r37;
  r20 -- r45;
  r11 -- r36;
  r16 -- r24;
  r16 -- r38;
  r14 -- r37;
  r17 -- r34;
  r14 -- r15;
  r14 -- r32;
  r22 -- r43;
  r0 -- r18;
  r18 -- r24;
  r16 -- r47;
  r19 -- r40;
  r13 -- r15;
  r11 -- r20;
  r33 -- r49;
  r17 -- r48;
  r7 -- r24;
  r22 -- r47;
  r32 -- r43;
  r0 -- r34;
  r11 -- r16;
  r0 -- r14;
  r33 -- r36;
  r11 -- r12;
  r14 -- r41;
  r11 -- r22;
  r17 -- r25;
  r23 -- r39;
  r33 -- r46;
  r14 -- r46;
  r20 -- r35;
  r21 -- r45;
  r21 -- r23;
  r0 -- r31;
  r7 -- r17;
  r14 -- r35;
  r12 -- r20;
  r20 -- r48;
  r12 -- r41;
  r23 -- r25;
  r12 -- r13;
  r0 -- r42;
  r12 -- r33;
  r32 -- r33;
  r25 -- r35;
  r13 -- r23;
  r0 -- r3;
  r7 -- r15;
  r14 -- r21;
  r0 -- r45;
  r25 -- r34;
  r16 -- r35;
  r0 -- r39;
  r0 -- r37;
  r24 -- r43;
  r0 -- r5;
  r13 -- r17;
  r19 -- r43;
  r33 -- r41;
  r11 -- r34;
  r18 -- r47;
  r23 -- r40;
  r15 -- r48;
  r13 -- r47;
  r7 -- r16;
  r7 -- r18;
  r22 -- r33;
  r0 -- r30;
  r7 -- r12;
  r15 -- r20;
  r19 -- r25;
  r16 -- r49;
  r17 -- r46;
  r20 -- r21;
  r7 -- r14;
  r18 -- r23;
  r21 -- r43;
  r22 -- r36;
  r33 -- r43;
  r0 -- r13;
  r19 -- r44;
  r16 -- r25;
  r17 -- r21;
  r7 -- r21;
  r22 -- r40;
  r14 -- r16;
  r32 -- r47;
  r14 -- r38;
  r17 -- r40;
  r25 -- r45;
  r0 -- r17;
  r19 -- r38;
  r18 -- r25;
  r0 -- r25;
  r13 -- r49;
  r11 -- r32;
  r0 -- r22;
  r19 -- r21;
  r32 -- r41;
  r12 -- r19;
  r16 -- r17;
  r13 -- r37;
  r13 -- r40;
  r12 -- r24;
  r16 -- r34;
  r25 -- r39;
  r15 -- r18;
  r12 -- r44;
  r25 -- r38;
  r0 -- r2;
  r12 -- r46;
  r24 -- r36;
  r7 -- r10;
  r25 -- r47;
  r21 -- r32;
  r17 -- r22;
  r23 -- r41;
  r16 -- r39;
  r12 -- r47;
  r21 -- r36;
  r13 -- r21;
  r7 -- r8;
  r24 -- r37;
  r22 -- r46;
  r16 -- r22;
  r12 -- r45;
  r17 -- r18;
  r24 -- r48;
  r17 -- r43;
  r22 -- r37;
  r14 -- r18;
  r11 -- r40;
  r14 -- r17;
  r32 -- r37;
  r20 -- r39;
  r11 -- r17;
  r20 -- r43;
  r15 -- r49;
  r16 -- r45;
  r21 -- r40;
  r12 -- r15;
  r13 -- r45;
  r0 -- r41;
  r14 -- r23;
  r20 -- r37;
  r24 -- r49;
  r7 -- r26;
  r7 -- r13;
  r0 -- r21;
  r19 -- r24;
  r19 -- r35;
  r33 -- r48;
  r18 -- r22;
  r14 -- r24;
  r7 -- r9;
  r21 -- r44;
  r20 -- r46;
  r22 -- r49;
  r20 -- r25;
  r13 -- r20;
  r15 -- r32;
  r17 -- r37;
  r22 -- r45;
  r32 -- r38;
  r32 -- r42;
  r33 -- r34;
  r20 -- r41;
  r33 -- r47;
  r18 -- r32;
  r11 -- r42;
  r11 -- r33;
  r17 -- r23;
  r18 -- r19;
  r13 -- r34;
  r0 -- r33;
  r19 -- r23;
  r19 -- r49;
  r15 -- r21;
  r32 -- r39;
  r32 -- r49;
  r15 -- r40;
  r18 -- r41;
  r21 -- r49;
  r21 -- r41;
  r22 -- r48;
  r11 -- r38;
  r23 -- r43;
  r23 -- r44;
  r12 -- r48;
  r7 -- r23;
  r17 -- r32;
  r20 -- r44;
  r0 -- r27;
  r15 -- r16;
  r14 -- r48;
  r25 -- r40;
  r24 -- r33;
  r19 -- r20;
  comment = "49:v38-> 21:v15-> 12:v6-> 47:v36-> 24:v18-> 14:v8-> 25:v19-> 33:v4-> 32:v20-> 0:zero-> 18:v12-> 15:v9-> 23:v17-> 6:v86-> 27:v64-> 7:v2-> 48:v37-> 46:v35-> 42:v31-> 41:v30-> 13:v7-> 5:v39-> 39:v28-> 38:v27-> 37:v26-> 31:v22-> 30:v61-> 29:v21-> 17:v11-> 22:v16-> 19:v13-> 16:v10-> 11:v5-> 20:v14-> 3:v41-> 1:v40-> 26:v63-> 45:v34-> 36:v25-> 34:v23-> 4:v43-> 40:v29-> 9:v82-> 35:v24-> 2:a0-> 8:v88-> 10:v83-> 28:v65-> 44:v33-> 43:v32"
  comment = "v35<-a3;v27<-a3;v4<-a2;v82<-a1;v63<-a1;v36<-a2;v86<-a0;v33<-a4;v7<-a6;v31<-a5;v43<-a0;v21<-a0;v24<-a5;v2<-a0;v83<-a1;v88<-a1;v39<-a0;v25<-t2;v18<-a2;v9<-a4;v20<-a3;v38<-a0;v32<-a6;v22<-a0;v28<-a5;v11<-a7;v37<-a6;v6<-a1;v26<-a7;v14<-t1;v17<-a5;v41<-a0;v64<-a0;v40<-a0;v29<-a4;v30<-a6;v65<-a0;v5<-t1;v23<-a3;v16<-a7;v8<-a2;v61<-a0;v34<-a0;v19<-a2;v10<-t0;v12<-a4;v13<-a7;v15<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
.f_b0:
; control
  li v2, 12345  ; live: []
  mv a0, v2  ; live: [v2]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl g
  .type g, @function
g:
; block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.g_b0:
  mv v2, a0  ; live: [a0]
  li v4, 1  ; live: [v2]
  add v3, v2, v4  ; live: [v4, v2]
; control
  mv a0, v3  ; live: [v3]
  ret  ; live: [a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v22, a1, t5, fa1, v64, v63, v82, fa2, ft6, a4, fa6, v20, a6, ft5, ft10, v6, ft4, v5, ft9, v10, fa4, ft2, v17, a3, a7, fa7, fa3, ft3, t2, v61, t1, v14, v16, v13, v7, ft0, ft1, v12, v86, v8, v19, v4, ft7, v11, v21, a5, a0, v88, a2, v65, v9, ft8, t3, t0, fa5, v18, fa0, t4, v83, v15, v2], uses: [v14, v16, v13, v22, v7, v12, s11, v86, v64, v63, v82, zero, v8, v19, v6, v11, v5, v10, v21, a0, v88, v65, v17, v9, v18, v83, v15, v61, v2], upward_exposed: [s11, zero], params_defs: []
; live_in: [s11, zero], live_out: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
; block parameters: []
.main_b0:
  addi v86, s11, -40  ; live: [s11, zero]
  andi v2, v86, -8  ; live: [s11, v86, zero]
  li v88, 1  ; live: [s11, zero, v2]
  sw v88, 0(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 4(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 8(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 12(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 16(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 20(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 24(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 28(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 32(v2)  ; live: [v88, s11, zero, v2]
  sw v88, 36(v2)  ; live: [v88, s11, zero, v2]
  call f  ; live: [s11, zero, v2]
  mv v4, a0  ; live: [s11, zero, a0, v2]
  slli v82, zero, 2  ; live: [s11, zero, v2]
  add v83, v2, v82  ; live: [v82, s11, zero, v2]
  lw v5, 0(v83)  ; live: [s11, v83, zero, v2]
  add v6, v5, v5  ; live: [v5, s11, zero, v2]
  add v7, v6, v6  ; live: [v6, s11, zero, v2]
  add v8, v7, v7  ; live: [v7, s11, zero, v2]
  add v9, v8, v8  ; live: [v8, s11, zero, v2]
  add v10, v9, v9  ; live: [s11, zero, v9, v2]
  add v11, v10, v10  ; live: [s11, v10, zero, v2]
  add v12, v11, v11  ; live: [v11, s11, zero, v2]
  add v13, v12, v12  ; live: [s11, v12, zero, v2]
  add v14, v13, v13  ; live: [s11, zero, v13, v2]
  add v15, v14, v14  ; live: [v14, s11, zero, v2]
  add v16, v15, v15  ; live: [s11, v15, zero, v2]
  add v17, v16, v16  ; live: [v16, s11, zero, v2]
  add v18, v17, v17  ; live: [v17, s11, zero, v2]
  add v19, v18, v18  ; live: [s11, v18, zero, v2]
  add v20, v19, v19  ; live: [v19, s11, zero, v2]
  li v63, 1  ; live: [s11, zero, v2]
  slli v64, v63, 2  ; live: [v63, s11, zero, v2]
  add v65, v2, v64  ; live: [s11, zero, v64, v2]
  lw v21, 0(v65)  ; live: [v65, s11, zero]
  xor v61, v21, zero  ; live: [s11, v21, zero]
  sltiu v22, v61, 1  ; live: [s11, v61, zero]
; control
  bne v22, zero, .main_b1  ; live: [s11, zero, v22]
  j .main_b2  ; live: [s11, zero]

; block info: defs: [t1, ft0, ft1, v41, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v41, a0, zero, v40], upward_exposed: [zero, v40], params_defs: [v40]
; live_in: [zero, v40], live_out: []
; block parameters: [v40]
.main_b3:
  mv a0, v40  ; live: [zero, v40]
  call minimbt_print_int  ; live: [zero, a0, v40]
  mv v41, zero  ; live: [zero, v40]
; control
  mv a0, v41  ; live: [v41, zero, v40]
  ret  ; live: [zero, a0, v40]

; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v43, a3, v39, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v43, a0, v39], upward_exposed: [], params_defs: []
; live_in: [zero], live_out: [zero, v40]
; block parameters: []
.main_b1:
  li v43, 67890  ; live: [zero]
  mv a0, v43  ; live: [v43, zero]
  call g  ; live: [zero, a0]
  mv v39, a0  ; live: [zero, a0]
; control
  mv v40, v39  ; live: [zero, v39]
  j .main_b3  ; live: [zero]

; block info: defs: [v25, v26, v30, v36, v32, v37, v24, v31, v28, v33, v29, v27, v23, v35, v38, v34, v40], uses: [v25, v14, v16, v13, v26, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15], upward_exposed: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v20, v8, v19, v4, v6, v15], params_defs: []
; live_in: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15], live_out: [zero, v40]
; block parameters: []
.main_b2:
  add v23, v5, v6  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v24, v23, v7  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v23, v8, v19, v4, v6, v15]
  add v25, v24, v8  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v24, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v26, v25, v9  ; live: [v11, v25, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v27, v26, v10  ; live: [v11, v5, v14, v16, v10, v13, v26, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v28, v27, v11  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v27, v8, v19, v4, v6, v15]
  add v29, v28, v12  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v28, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v30, v29, v13  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v29, v20, v8, v19, v4, v6, v15]
  add v31, v30, v14  ; live: [v11, v5, v14, v16, v10, v13, v30, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v32, v31, v15  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v31, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v33, v32, v16  ; live: [v11, v5, v14, v16, v10, v13, v7, v32, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v34, v33, v17  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v33, v18, zero, v20, v8, v19, v4, v6, v15]
  add v35, v34, v18  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15, v34]
  add v36, v35, v19  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v35, v19, v4, v6, v15]
  add v37, v36, v20  ; live: [v11, v5, v14, v16, v10, v13, v7, v36, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
  add v38, v37, v4  ; live: [v11, v5, v14, v16, v10, v13, v7, v37, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
; control
  mv v40, v38  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v38, v6, v15]
  j .main_b3  ; live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/spill3.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    let %1: int32 = add(%0, 1)
    let %2: int32 = add(%1, 1)
    let %3: int32 = add(%2, 1)
    let %4: int32 = add(%3, 1)
    let %5: int32 = add(%4, 1)
    let %6: int32 = add(%5, 1)
    let %7: int32 = add(%6, 1)
    let %8: int32 = add(%7, 1)
    let %9: int32 = add(%8, 1)
    let %10: int32 = add(%9, 1)
    let %11: int32 = add(%10, 1)
    let %12: int32 = add(%11, 1)
    let %13: int32 = add(%12, 1)
    let %14: int32 = add(%13, 1)
    let %15: int32 = add(%14, 1)
    let %16: int32 = add(%15, 1)
    let %17: int32 = add(%16, 1)
    let %18: int32 = add(%17, %0)
    let %19: int32 = add(%18, %1)
    let %20: int32 = add(%19, %2)
    let %21: int32 = add(%20, %3)
    let %22: int32 = add(%21, %4)
    let %23: int32 = add(%22, %5)
    let %24: int32 = add(%23, %6)
    let %25: int32 = add(%24, %7)
    let %26: int32 = add(%25, %8)
    let %27: int32 = add(%26, %9)
    let %28: int32 = add(%27, %10)
    let %29: int32 = add(%28, %11)
    let %30: int32 = add(%29, %12)
    let %31: int32 = add(%30, %13)
    let %32: int32 = add(%31, %14)
    let %33: int32 = add(%32, %15)
    let %34: int32 = add(%33, %16)
    let %35: int32 = add(%34, $f0)
    let %36: int32 = add(%0, %1)
    let %37: int32 = add(%36, %2)
    let %38: int32 = add(%37, %3)
    let %39: int32 = add(%38, %4)
    let %40: int32 = add(%39, %5)
    let %41: int32 = add(%40, %6)
    let %42: int32 = add(%41, %7)
    let %43: int32 = add(%42, %8)
    let %44: int32 = add(%43, %9)
    let %45: int32 = add(%44, %10)
    let %46: int32 = add(%45, %11)
    let %47: int32 = add(%46, %12)
    let %48: int32 = add(%47, %13)
    let %49: int32 = add(%48, %14)
    let %50: int32 = add(%49, %15)
    let %51: int32 = add(%50, %16)
    let %52: int32 = add(%51, %17)
    let %53: int32 = add(%52, %18)
    let %54: int32 = add(%53, %19)
    let %55: int32 = add(%54, %20)
    let %56: int32 = add(%55, %21)
    let %57: int32 = add(%56, %22)
    let %58: int32 = add(%57, %23)
    let %59: int32 = add(%58, %24)
    let %60: int32 = add(%59, %25)
    let %61: int32 = add(%60, %26)
    let %62: int32 = add(%61, %27)
    let %63: int32 = add(%62, %28)
    let %64: int32 = add(%63, %29)
    let %65: int32 = add(%64, %30)
    let %66: int32 = add(%65, %31)
    let %67: int32 = add(%66, %32)
    let %68: int32 = add(%67, %33)
    let %69: int32 = add(%68, %34)
    let %70: int32 = add(%69, %35)
    let %71: int32 = add(%70, $f0)
    return %71
  }
}
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(0)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of f"];
  r0 [label="a0", color=blue];
  r46 [label="v29 ← a3", color=green];
  r33 [label="v18 ← a4", color=green];
  r59 [label="v42 ← t0", color=green];
  r76 [label="v59 ← a2", color=green];
  r9 [label="v6 ← t0", color=green];
  r26 [label="v139 ← a0", color=green];
  r86 [label="v69 ← a0", color=green];
  r44 [label="v27 ← a3", color=green];
  r53 [label="v36 ← a2", color=green];
  r56 [label="v39 ← a5", color=green];
  r10 [label="v155 ← a0", color=green];
  r5 [label="v4 ← t0", color=green];
  r54 [label="v37 ← a0", color=green];
  r24 [label="v141 ← a0", color=green];
  r43 [label="v26 ← a4", color=green];
  r88 [label="v71 ← a0", color=green];
  r80 [label="v63 ← a3", color=green];
  r31 [label="v17 ← a5", color=green];
  r39 [label="v22 ← a5", color=green];
  r17 [label="v10 ← a6", color=green];
  r52 [label="v35 ← a2", color=green];
  r65 [label="v48 ← a4", color=green];
  r79 [label="v62 ← a4", color=green];
  r20 [label="v145 ← a0", color=green];
  r61 [label="v44 ← t0", color=green];
  r23 [label="v13 ← a7", color=green];
  r3 [label="v3 ← t1", color=green];
  r82 [label="v65 ← a2", color=green];
  r67 [label="v50 ← a3", color=green];
  r27 [label="v15 ← a2", color=green];
  r77 [label="v60 ← a4", color=green];
  r75 [label="v58 ← a4", color=green];
  r62 [label="v45 ← a3", color=green];
  r40 [label="v23 ← a3", color=green];
  r11 [label="v7 ← t0", color=green];
  r58 [label="v41 ← t0", color=green];
  r34 [label="v131 ← a0", color=green];
  r83 [label="v66 ← a3", color=green];
  r14 [label="v151 ← a0", color=green];
  r51 [label="v34 ← a0", color=green];
  r78 [label="v61 ← a2", color=green];
  r55 [label="v38 ← a0", color=green];
  r16 [label="v149 ← a0", color=green];
  r21 [label="v12 ← a5", color=green];
  r60 [label="v43 ← a6", color=green];
  r73 [label="v56 ← a4", color=green];
  r38 [label="v21 ← a6", color=green];
  r72 [label="v55 ← a0", color=green];
  r87 [label="v70 ← a0", color=green];
  r85 [label="v68 ← a2", color=green];
  r47 [label="v30 ← a3", color=green];
  r6 [label="v159 ← a0", color=green];
  r13 [label="v8 ← a7", color=green];
  r42 [label="v25 ← a5", color=green];
  r4 [label="v161 ← a0", color=green];
  r29 [label="v16 ← a7", color=green];
  r35 [label="v19 ← a2", color=green];
  r7 [label="v5 ← a7", color=green];
  r64 [label="v47 ← a7", color=green];
  r8 [label="v157 ← a0", color=green];
  r36 [label="v129 ← a0", color=green];
  r66 [label="v49 ← a6", color=green];
  r15 [label="v9 ← a5", color=green];
  r32 [label="v133 ← a0", color=green];
  r49 [label="v32 ← a2", color=green];
  r74 [label="v57 ← a2", color=green];
  r57 [label="v40 ← t1", color=green];
  r68 [label="v51 ← a5", color=green];
  r91 [label="v74 ← a0", color=green];
  r70 [label="v53 ← a5", color=green];
  r12 [label="v153 ← a0", color=green];
  r48 [label="v31 ← a1", color=green];
  r37 [label="v20 ← a3", color=green];
  r1 [label="v2 ← a1", color=green];
  r41 [label="v24 ← a4", color=green];
  r28 [label="v137 ← a0", color=green];
  r71 [label="v54 ← a0", color=green];
  r69 [label="v52 ← a5", color=green];
  r22 [label="v143 ← a0", color=green];
  r84 [label="v67 ← a3", color=green];
  r89 [label="v72 ← a0", color=green];
  r50 [label="v33 ← a0", color=green];
  r30 [label="v135 ← a0", color=green];
  r45 [label="v28 ← a1", color=green];
  r25 [label="v14 ← a7", color=green];
  r63 [label="v46 ← a7", color=green];
  r2 [label="v163 ← a0", color=green];
  r18 [label="v147 ← a0", color=green];
  r19 [label="v11 ← a7", color=green];
  r90 [label="v73 ← a0", color=green];
  r81 [label="v64 ← a0", color=green];
  r17 -- r42;
  r38 -- r56;
  r15 -- r43;
  r11 -- r35;
  r44 -- r55;
  r23 -- r46;
  r38 -- r50;
  r35 -- r59;
  r15 -- r31;
  r43 -- r48;
  r55 -- r67;
  r27 -- r36;
  r49 -- r78;
  r35 -- r61;
  r37 -- r62;
  r33 -- r59;
  r39 -- r66;
  r44 -- r71;
  r3 -- r9;
  r23 -- r35;
  r25 -- r57;
  r15 -- r42;
  r40 -- r73;
  r45 -- r79;
  r48 -- r79;
  r11 -- r55;
  r46 -- r57;
  r31 -- r65;
  r3 -- r26;
  r3 -- r31;
  r37 -- r70;
  r15 -- r25;
  r7 -- r32;
  r1 -- r68;
  r50 -- r77;
  r46 -- r79;
  r3 -- r48;
  r9 -- r14;
  r46 -- r56;
  r25 -- r48;
  r42 -- r49;
  r17 -- r44;
  r5 -- r35;
  r13 -- r30;
  r25 -- r29;
  r13 -- r33;
  r46 -- r59;
  r41 -- r60;
  r19 -- r41;
  r55 -- r66;
  r21 -- r48;
  r44 -- r49;
  r35 -- r38;
  r52 -- r79;
  r15 -- r51;
  r29 -- r33;
  r46 -- r78;
  r5 -- r32;
  r19 -- r36;
  r40 -- r56;
  r27 -- r54;
  r50 -- r70;
  r1 -- r2;
  r46 -- r64;
  r29 -- r40;
  r40 -- r60;
  r55 -- r81;
  r41 -- r63;
  r51 -- r69;
  r11 -- r43;
  r1 -- r11;
  r5 -- r51;
  r25 -- r37;
  r1 -- r35;
  r17 -- r27;
  r9 -- r39;
  r40 -- r72;
  r49 -- r54;
  r40 -- r42;
  r53 -- r75;
  r23 -- r29;
  r54 -- r66;
  r39 -- r47;
  r27 -- r40;
  r7 -- r44;
  r27 -- r42;
  r27 -- r60;
  r35 -- r67;
  r45 -- r75;
  r27 -- r41;
  r1 -- r55;
  r21 -- r28;
  r29 -- r30;
  r23 -- r50;
  r45 -- r69;
  r21 -- r29;
  r38 -- r72;
  r42 -- r44;
  r15 -- r35;
  r19 -- r48;
  r19 -- r34;
  r5 -- r19;
  r53 -- r86;
  r47 -- r56;
  r17 -- r24;
  r9 -- r30;
  r21 -- r34;
  r51 -- r85;
  r53 -- r66;
  r33 -- r35;
  r43 -- r45;
  r54 -- r80;
  r5 -- r11;
  r35 -- r69;
  r44 -- r74;
  r35 -- r50;
  r52 -- r83;
  r19 -- r50;
  r9 -- r11;
  r31 -- r40;
  r53 -- r74;
  r52 -- r70;
  r17 -- r56;
  r29 -- r45;
  r47 -- r51;
  r46 -- r53;
  r37 -- r53;
  r11 -- r52;
  r38 -- r40;
  r48 -- r49;
  r46 -- r70;
  r54 -- r79;
  r9 -- r24;
  r33 -- r37;
  r55 -- r60;
  r54 -- r64;
  r9 -- r36;
  r51 -- r80;
  r7 -- r36;
  r1 -- r72;
  r23 -- r42;
  r13 -- r52;
  r19 -- r33;
  r54 -- r84;
  r15 -- r34;
  r51 -- r78;
  r55 -- r59;
  r42 -- r75;
  r25 -- r42;
  r50 -- r74;
  r15 -- r33;
  r35 -- r45;
  r44 -- r63;
  r55 -- r85;
  r39 -- r69;
  r23 -- r59;
  r9 -- r46;
  r52 -- r75;
  r54 -- r56;
  r55 -- r75;
  r15 -- r19;
  r3 -- r23;
  r49 -- r80;
  r48 -- r56;
  r45 -- r64;
  r7 -- r46;
  r31 -- r47;
  r25 -- r44;
  r9 -- r21;
  r1 -- r24;
  r5 -- r12;
  r41 -- r64;
  r11 -- r44;
  r40 -- r66;
  r52 -- r74;
  r55 -- r87;
  r45 -- r72;
  r41 -- r58;
  r44 -- r46;
  r15 -- r41;
  r21 -- r35;
  r9 -- r25;
  r38 -- r68;
  r40 -- r74;
  r42 -- r57;
  r5 -- r8;
  r47 -- r61;
  r53 -- r69;
  r49 -- r58;
  r7 -- r56;
  r48 -- r66;
  r17 -- r61;
  r38 -- r55;
  r1 -- r10;
  r44 -- r52;
  r53 -- r57;
  r51 -- r72;
  r1 -- r85;
  r3 -- r32;
  r27 -- r32;
  r29 -- r31;
  r1 -- r17;
  r55 -- r78;
  r9 -- r45;
  r9 -- r31;
  r42 -- r43;
  r15 -- r53;
  r11 -- r24;
  r42 -- r52;
  r21 -- r54;
  r17 -- r36;
  r9 -- r41;
  r3 -- r18;
  r38 -- r62;
  r47 -- r80;
  r53 -- r77;
  r31 -- r39;
  r37 -- r48;
  r37 -- r66;
  r41 -- r69;
  r48 -- r77;
  r49 -- r59;
  r42 -- r76;
  r1 -- r70;
  r1 -- r31;
  r42 -- r45;
  r42 -- r61;
  r47 -- r79;
  r1 -- r87;
  r50 -- r51;
  r54 -- r77;
  r11 -- r48;
  r53 -- r59;
  r43 -- r62;
  r54 -- r82;
  r40 -- r68;
  r54 -- r88;
  r35 -- r55;
  r39 -- r57;
  r42 -- r66;
  r13 -- r43;
  r42 -- r65;
  r17 -- r59;
  r3 -- r40;
  r43 -- r46;
  r43 -- r63;
  r37 -- r55;
  r44 -- r65;
  r49 -- r60;
  r55 -- r61;
  r3 -- r27;
  r19 -- r42;
  r29 -- r58;
  r43 -- r65;
  r13 -- r18;
  r48 -- r57;
  r15 -- r44;
  r13 -- r57;
  r5 -- r7;
  r35 -- r64;
  r23 -- r38;
  r38 -- r52;
  r13 -- r22;
  r3 -- r7;
  r52 -- r54;
  r45 -- r47;
  r25 -- r63;
  r21 -- r37;
  r31 -- r53;
  r29 -- r50;
  r47 -- r77;
  r38 -- r71;
  r55 -- r56;
  r27 -- r37;
  r11 -- r25;
  r40 -- r53;
  r49 -- r57;
  r17 -- r20;
  r29 -- r57;
  r13 -- r24;
  r52 -- r60;
  r33 -- r66;
  r50 -- r83;
  r53 -- r55;
  r23 -- r57;
  r49 -- r66;
  r41 -- r61;
  r45 -- r77;
  r45 -- r67;
  r25 -- r46;
  r23 -- r49;
  r15 -- r26;
  r38 -- r51;
  r13 -- r46;
  r11 -- r57;
  r1 -- r23;
  r5 -- r23;
  r52 -- r86;
  r15 -- r22;
  r48 -- r71;
  r9 -- r29;
  r53 -- r80;
  r46 -- r47;
  r43 -- r76;
  r55 -- r74;
  r49 -- r83;
  r54 -- r72;
  r23 -- r34;
  r1 -- r60;
  r27 -- r61;
  r39 -- r67;
  r25 -- r26;
  r33 -- r39;
  r31 -- r57;
  r1 -- r65;
  r19 -- r46;
  r1 -- r66;
  r41 -- r49;
  r44 -- r54;
  r35 -- r62;
  r1 -- r39;
  r43 -- r59;
  r9 -- r44;
  r43 -- r61;
  r25 -- r55;
  r23 -- r47;
  r19 -- r56;
  r7 -- r37;
  r45 -- r71;
  r48 -- r78;
  r9 -- r38;
  r15 -- r17;
  r48 -- r65;
  r49 -- r73;
  r29 -- r67;
  r7 -- r33;
  r40 -- r49;
  r25 -- r59;
  r21 -- r25;
  r3 -- r55;
  r1 -- r83;
  r44 -- r59;
  r52 -- r63;
  r1 -- r84;
  r48 -- r74;
  r19 -- r52;
  r53 -- r85;
  r51 -- r58;
  r31 -- r49;
  r9 -- r16;
  r1 -- r73;
  r37 -- r61;
  r9 -- r19;
  r11 -- r27;
  r7 -- r50;
  r42 -- r53;
  r5 -- r43;
  r9 -- r54;
  r50 -- r57;
  r54 -- r57;
  r37 -- r41;
  r33 -- r38;
  r54 -- r61;
  r25 -- r64;
  r3 -- r44;
  r7 -- r51;
  r37 -- r39;
  r48 -- r54;
  r23 -- r36;
  r55 -- r63;
  r1 -- r90;
  r5 -- r21;
  r50 -- r78;
  r5 -- r33;
  r35 -- r58;
  r54 -- r85;
  r43 -- r52;
  r35 -- r49;
  r1 -- r30;
  r50 -- r66;
  r47 -- r50;
  r5 -- r10;
  r13 -- r32;
  r48 -- r61;
  r3 -- r6;
  r5 -- r22;
  r25 -- r54;
  r51 -- r71;
  r17 -- r35;
  r46 -- r65;
  r37 -- r69;
  r40 -- r57;
  r55 -- r57;
  r1 -- r45;
  r38 -- r46;
  r39 -- r63;
  r52 -- r68;
  r13 -- r31;
  r41 -- r70;
  r1 -- r52;
  r5 -- r29;
  r42 -- r51;
  r11 -- r18;
  r42 -- r72;
  r15 -- r58;
  r29 -- r62;
  r55 -- r86;
  r3 -- r5;
  r51 -- r63;
  r53 -- r81;
  r23 -- r53;
  r45 -- r62;
  r33 -- r42;
  r52 -- r55;
  r17 -- r60;
  r43 -- r51;
  r13 -- r38;
  r43 -- r58;
  r55 -- r88;
  r43 -- r72;
  r19 -- r29;
  r49 -- r76;
  r31 -- r55;
  r13 -- r55;
  r1 -- r77;
  r39 -- r51;
  r39 -- r62;
  r53 -- r63;
  r39 -- r45;
  r37 -- r54;
  r54 -- r60;
  r17 -- r54;
  r51 -- r54;
  r46 -- r74;
  r51 -- r84;
  r21 -- r50;
  r21 -- r60;
  r45 -- r48;
  r9 -- r20;
  r23 -- r24;
  r5 -- r55;
  r35 -- r52;
  r3 -- r49;
  r41 -- r67;
  r13 -- r35;
  r42 -- r62;
  r1 -- r80;
  r27 -- r35;
  r25 -- r51;
  r17 -- r31;
  r7 -- r42;
  r31 -- r68;
  r11 -- r36;
  r3 -- r46;
  r15 -- r30;
  r47 -- r73;
  r51 -- r52;
  r29 -- r47;
  r38 -- r54;
  r46 -- r50;
  r45 -- r56;
  r49 -- r67;
  r3 -- r45;
  r19 -- r40;
  r13 -- r15;
  r43 -- r60;
  r31 -- r60;
  r46 -- r67;
  r1 -- r43;
  r40 -- r67;
  r50 -- r58;
  r37 -- r43;
  r51 -- r68;
  r25 -- r53;
  r1 -- r34;
  r47 -- r74;
  r7 -- r24;
  r44 -- r57;
  r31 -- r66;
  r27 -- r48;
  r15 -- r59;
  r37 -- r57;
  r40 -- r44;
  r19 -- r62;
  r33 -- r36;
  r46 -- r51;
  r50 -- r54;
  r42 -- r63;
  r50 -- r62;
  r37 -- r47;
  r35 -- r51;
  r21 -- r56;
  r19 -- r58;
  r35 -- r41;
  r41 -- r74;
  r39 -- r59;
  r21 -- r45;
  r21 -- r58;
  r48 -- r82;
  r27 -- r43;
  r53 -- r83;
  r35 -- r43;
  r23 -- r25;
  r5 -- r28;
  r1 -- r81;
  r25 -- r35;
  r13 -- r23;
  r50 -- r53;
  r31 -- r44;
  r7 -- r15;
  r25 -- r34;
  r51 -- r64;
  r39 -- r70;
  r25 -- r31;
  r35 -- r46;
  r33 -- r41;
  r7 -- r41;
  r37 -- r49;
  r11 -- r34;
  r40 -- r48;
  r5 -- r39;
  r23 -- r40;
  r13 -- r47;
  r45 -- r59;
  r54 -- r62;
  r7 -- r16;
  r9 -- r48;
  r7 -- r18;
  r39 -- r73;
  r7 -- r12;
  r15 -- r20;
  r54 -- r63;
  r44 -- r62;
  r19 -- r25;
  r17 -- r46;
  r7 -- r14;
  r46 -- r72;
  r1 -- r54;
  r47 -- r58;
  r42 -- r67;
  r49 -- r75;
  r48 -- r81;
  r46 -- r49;
  r33 -- r60;
  r38 -- r61;
  r23 -- r31;
  r37 -- r46;
  r42 -- r54;
  r49 -- r64;
  r19 -- r44;
  r27 -- r59;
  r27 -- r65;
  r33 -- r61;
  r44 -- r48;
  r1 -- r12;
  r50 -- r69;
  r45 -- r74;
  r43 -- r49;
  r7 -- r40;
  r27 -- r29;
  r25 -- r45;
  r1 -- r4;
  r19 -- r51;
  r27 -- r55;
  r1 -- r18;
  r27 -- r49;
  r11 -- r32;
  r1 -- r69;
  r13 -- r50;
  r23 -- r52;
  r1 -- r20;
  r3 -- r24;
  r38 -- r67;
  r39 -- r50;
  r43 -- r75;
  r40 -- r50;
  r3 -- r51;
  r3 -- r34;
  r31 -- r50;
  r38 -- r60;
  r51 -- r60;
  r43 -- r68;
  r9 -- r18;
  r13 -- r37;
  r37 -- r40;
  r13 -- r40;
  r1 -- r46;
  r37 -- r42;
  r51 -- r82;
  r23 -- r64;
  r35 -- r39;
  r29 -- r55;
  r25 -- r39;
  r52 -- r61;
  r7 -- r34;
  r15 -- r18;
  r15 -- r57;
  r7 -- r55;
  r39 -- r68;
  r44 -- r53;
  r52 -- r69;
  r45 -- r70;
  r35 -- r68;
  r13 -- r54;
  r5 -- r53;
  r45 -- r66;
  r7 -- r10;
  r21 -- r32;
  r17 -- r22;
  r42 -- r48;
  r15 -- r56;
  r41 -- r65;
  r23 -- r41;
  r1 -- r27;
  r42 -- r50;
  r29 -- r63;
  r44 -- r64;
  r45 -- r76;
  r39 -- r54;
  r51 -- r57;
  r44 -- r66;
  r42 -- r71;
  r54 -- r65;
  r5 -- r50;
  r1 -- r49;
  r44 -- r58;
  r53 -- r84;
  r44 -- r69;
  r15 -- r28;
  r11 -- r30;
  r25 -- r50;
  r51 -- r56;
  r35 -- r36;
  r17 -- r18;
  r45 -- r55;
  r1 -- r58;
  r33 -- r63;
  r50 -- r59;
  r54 -- r59;
  r17 -- r43;
  r19 -- r55;
  r23 -- r63;
  r55 -- r71;
  r11 -- r40;
  r51 -- r62;
  r9 -- r35;
  r55 -- r72;
  r50 -- r71;
  r19 -- r54;
  r33 -- r69;
  r31 -- r61;
  r9 -- r15;
  r33 -- r54;
  r39 -- r55;
  r35 -- r60;
  r15 -- r60;
  r44 -- r75;
  r31 -- r64;
  r23 -- r60;
  r48 -- r69;
  r25 -- r27;
  r7 -- r26;
  r3 -- r12;
  r40 -- r59;
  r23 -- r62;
  r31 -- r48;
  r29 -- r52;
  r1 -- r78;
  r5 -- r52;
  r9 -- r42;
  r5 -- r44;
  r19 -- r24;
  r45 -- r46;
  r3 -- r28;
  r54 -- r86;
  r55 -- r69;
  r19 -- r35;
  r33 -- r48;
  r53 -- r60;
  r50 -- r84;
  r7 -- r9;
  r40 -- r58;
  r41 -- r66;
  r15 -- r27;
  r48 -- r75;
  r17 -- r58;
  r1 -- r28;
  r13 -- r56;
  r7 -- r28;
  r33 -- r47;
  r53 -- r56;
  r45 -- r53;
  r42 -- r60;
  r46 -- r54;
  r11 -- r42;
  r55 -- r73;
  r19 -- r53;
  r11 -- r33;
  r13 -- r34;
  r19 -- r23;
  r21 -- r31;
  r5 -- r46;
  r46 -- r63;
  r17 -- r51;
  r31 -- r54;
  r47 -- r63;
  r35 -- r65;
  r23 -- r28;
  r27 -- r58;
  r15 -- r40;
  r47 -- r49;
  r45 -- r51;
  r37 -- r68;
  r21 -- r49;
  r35 -- r40;
  r54 -- r69;
  r27 -- r64;
  r43 -- r69;
  r54 -- r58;
  r37 -- r52;
  r51 -- r59;
  r38 -- r69;
  r50 -- r60;
  r21 -- r41;
  r47 -- r78;
  r7 -- r31;
  r17 -- r52;
  r23 -- r44;
  r17 -- r30;
  r54 -- r73;
  r1 -- r36;
  r21 -- r55;
  r15 -- r16;
  r51 -- r75;
  r55 -- r62;
  r17 -- r28;
  r41 -- r53;
  r5 -- r40;
  r19 -- r20;
  r45 -- r78;
  r21 -- r24;
  r54 -- r78;
  r15 -- r39;
  r3 -- r52;
  r27 -- r57;
  r44 -- r70;
  r43 -- r54;
  r49 -- r71;
  r9 -- r53;
  r1 -- r26;
  r51 -- r83;
  r3 -- r15;
  r41 -- r72;
  r23 -- r51;
  r3 -- r16;
  r39 -- r41;
  r3 -- r53;
  r40 -- r55;
  r21 -- r38;
  r31 -- r45;
  r27 -- r51;
  r48 -- r63;
  r7 -- r25;
  r35 -- r42;
  r23 -- r56;
  r45 -- r61;
  r29 -- r41;
  r48 -- r72;
  r21 -- r61;
  r3 -- r11;
  r55 -- r77;
  r9 -- r26;
  r27 -- r28;
  r44 -- r72;
  r27 -- r34;
  r52 -- r82;
  r7 -- r35;
  r17 -- r19;
  r53 -- r67;
  r29 -- r48;
  r1 -- r50;
  r11 -- r19;
  r50 -- r55;
  r31 -- r35;
  r9 -- r56;
  r29 -- r66;
  r3 -- r8;
  r1 -- r9;
  r55 -- r65;
  r50 -- r64;
  r19 -- r45;
  r5 -- r6;
  r33 -- r50;
  r54 -- r76;
  r37 -- r63;
  r1 -- r48;
  r52 -- r62;
  r1 -- r64;
  r53 -- r71;
  r3 -- r39;
  r51 -- r70;
  r25 -- r49;
  r48 -- r50;
  r9 -- r12;
  r27 -- r50;
  r41 -- r71;
  r40 -- r54;
  r5 -- r54;
  r37 -- r60;
  r39 -- r60;
  r19 -- r47;
  r38 -- r57;
  r52 -- r71;
  r3 -- r33;
  r37 -- r65;
  r1 -- r51;
  r47 -- r55;
  r44 -- r77;
  r27 -- r46;
  r3 -- r17;
  r39 -- r40;
  r15 -- r37;
  r31 -- r58;
  r35 -- r37;
  r11 -- r15;
  r23 -- r55;
  r29 -- r56;
  r1 -- r41;
  r1 -- r38;
  r44 -- r47;
  r40 -- r64;
  r3 -- r35;
  r1 -- r5;
  r40 -- r62;
  r48 -- r59;
  r39 -- r49;
  r15 -- r47;
  r40 -- r52;
  r52 -- r72;
  r21 -- r46;
  r29 -- r49;
  r43 -- r73;
  r38 -- r45;
  r5 -- r36;
  r44 -- r78;
  r54 -- r81;
  r27 -- r62;
  r44 -- r51;
  r29 -- r61;
  r51 -- r81;
  r3 -- r25;
  r49 -- r62;
  r50 -- r76;
  r1 -- r75;
  r19 -- r30;
  r50 -- r75;
  r9 -- r40;
  r48 -- r68;
  r53 -- r64;
  r49 -- r81;
  r7 -- r20;
  r13 -- r16;
  r49 -- r68;
  r31 -- r41;
  r21 -- r57;
  r11 -- r23;
  r27 -- r63;
  r27 -- r53;
  r13 -- r48;
  r50 -- r63;
  r44 -- r73;
  r54 -- r71;
  r11 -- r46;
  r19 -- r37;
  r11 -- r51;
  r40 -- r61;
  r50 -- r65;
  r33 -- r45;
  r5 -- r38;
  r11 -- r37;
  r13 -- r19;
  r23 -- r45;
  r38 -- r49;
  r3 -- r22;
  r50 -- r68;
  r23 -- r26;
  r40 -- r65;
  r41 -- r52;
  r21 -- r62;
  r31 -- r46;
  r7 -- r22;
  r49 -- r53;
  r15 -- r54;
  r7 -- r19;
  r38 -- r41;
  r45 -- r65;
  r43 -- r71;
  r23 -- r30;
  r1 -- r79;
  r27 -- r47;
  r33 -- r64;
  r13 -- r14;
  r49 -- r72;
  r11 -- r41;
  r3 -- r29;
  r48 -- r51;
  r1 -- r89;
  r47 -- r75;
  r53 -- r68;
  r15 -- r24;
  r52 -- r67;
  r39 -- r72;
  r48 -- r52;
  r31 -- r63;
  r5 -- r25;
  r31 -- r56;
  r31 -- r33;
  r41 -- r50;
  r13 -- r39;
  r17 -- r38;
  r17 -- r50;
  r54 -- r87;
  r43 -- r44;
  r11 -- r28;
  r39 -- r48;
  r25 -- r65;
  r47 -- r69;
  r27 -- r52;
  r51 -- r77;
  r11 -- r56;
  r21 -- r63;
  r11 -- r29;
  r33 -- r68;
  r1 -- r42;
  r41 -- r45;
  r25 -- r28;
  r35 -- r48;
  r42 -- r73;
  r29 -- r46;
  r33 -- r65;
  r13 -- r44;
  r1 -- r37;
  r53 -- r65;
  r52 -- r85;
  r43 -- r56;
  r37 -- r38;
  r39 -- r71;
  r19 -- r39;
  r37 -- r59;
  r48 -- r67;
  r1 -- r19;
  r1 -- r88;
  r54 -- r74;
  r17 -- r41;
  r31 -- r36;
  r39 -- r42;
  r5 -- r42;
  r29 -- r51;
  r47 -- r52;
  r51 -- r53;
  r13 -- r28;
  r44 -- r60;
  r27 -- r39;
  r1 -- r62;
  r38 -- r47;
  r17 -- r33;
  r43 -- r57;
  r11 -- r53;
  r50 -- r82;
  r52 -- r76;
  r1 -- r67;
  r55 -- r70;
  r50 -- r79;
  r55 -- r82;
  r42 -- r70;
  r51 -- r66;
  r43 -- r66;
  r3 -- r30;
  r17 -- r55;
  r35 -- r44;
  r48 -- r73;
  r38 -- r66;
  r25 -- r52;
  r40 -- r63;
  r9 -- r28;
  r3 -- r13;
  r25 -- r43;
  r33 -- r52;
  r47 -- r67;
  r44 -- r56;
  r23 -- r32;
  r41 -- r51;
  r11 -- r54;
  r3 -- r10;
  r52 -- r78;
  r51 -- r65;
  r49 -- r77;
  r40 -- r71;
  r1 -- r6;
  r21 -- r22;
  r11 -- r47;
  r33 -- r57;
  r7 -- r54;
  r43 -- r64;
  r15 -- r38;
  r9 -- r47;
  r55 -- r76;
  r43 -- r55;
  r46 -- r61;
  r47 -- r68;
  r52 -- r73;
  r37 -- r50;
  r37 -- r64;
  r29 -- r54;
  r25 -- r33;
  r55 -- r58;
  r48 -- r60;
  r23 -- r33;
  r15 -- r46;
  r19 -- r57;
  r7 -- r52;
  r25 -- r36;
  r29 -- r32;
  r17 -- r57;
  r53 -- r62;
  r39 -- r64;
  r9 -- r57;
  r13 -- r42;
  r49 -- r55;
  r1 -- r53;
  r5 -- r48;
  r41 -- r62;
  r31 -- r67;
  r50 -- r81;
  r52 -- r57;
  r11 -- r49;
  r41 -- r48;
  r13 -- r26;
  r17 -- r26;
  r43 -- r50;
  r35 -- r53;
  r54 -- r83;
  r1 -- r15;
  r25 -- r30;
  r39 -- r65;
  r25 -- r60;
  r3 -- r47;
  r29 -- r59;
  r42 -- r46;
  r29 -- r65;
  r21 -- r47;
  r13 -- r25;
  r44 -- r68;
  r9 -- r51;
  r47 -- r65;
  r25 -- r58;
  r49 -- r69;
  r27 -- r56;
  r51 -- r61;
  r19 -- r32;
  r9 -- r34;
  r39 -- r53;
  r49 -- r65;
  r53 -- r76;
  r5 -- r24;
  r5 -- r26;
  r53 -- r61;
  r9 -- r33;
  r25 -- r41;
  r52 -- r58;
  r1 -- r59;
  r38 -- r63;
  r49 -- r51;
  r11 -- r39;
  r23 -- r61;
  r15 -- r55;
  r1 -- r74;
  r11 -- r50;
  r7 -- r11;
  r7 -- r47;
  r21 -- r42;
  r9 -- r37;
  r13 -- r53;
  r7 -- r39;
  r7 -- r43;
  r11 -- r26;
  r40 -- r41;
  r37 -- r45;
  r9 -- r32;
  r11 -- r58;
  r3 -- r36;
  r35 -- r54;
  r46 -- r58;
  r35 -- r63;
  r31 -- r32;
  r33 -- r44;
  r3 -- r54;
  r17 -- r45;
  r1 -- r3;
  r23 -- r48;
  r5 -- r30;
  r51 -- r79;
  r1 -- r82;
  r49 -- r50;
  r33 -- r51;
  r33 -- r56;
  r9 -- r50;
  r11 -- r21;
  r47 -- r53;
  r17 -- r47;
  r52 -- r53;
  r52 -- r65;
  r48 -- r53;
  r33 -- r40;
  r15 -- r50;
  r37 -- r51;
  r1 -- r86;
  r1 -- r57;
  r13 -- r59;
  r11 -- r14;
  r13 -- r36;
  r5 -- r17;
  r3 -- r42;
  r37 -- r71;
  r41 -- r55;
  r39 -- r61;
  r45 -- r54;
  r15 -- r45;
  r19 -- r59;
  r38 -- r42;
  r51 -- r55;
  r5 -- r18;
  r15 -- r36;
  r50 -- r72;
  r5 -- r47;
  r47 -- r57;
  r3 -- r37;
  r40 -- r51;
  r11 -- r45;
  r27 -- r66;
  r9 -- r17;
  r55 -- r83;
  r1 -- r16;
  r1 -- r33;
  r35 -- r70;
  r9 -- r49;
  r46 -- r68;
  r33 -- r58;
  r7 -- r27;
  r17 -- r39;
  r35 -- r66;
  r41 -- r57;
  r5 -- r31;
  r55 -- r64;
  r51 -- r76;
  r40 -- r46;
  r53 -- r87;
  r21 -- r33;
  r17 -- r49;
  r43 -- r74;
  r11 -- r13;
  r25 -- r32;
  r40 -- r47;
  r9 -- r23;
  r19 -- r22;
  r41 -- r68;
  r7 -- r38;
  r1 -- r40;
  r46 -- r52;
  r23 -- r54;
  r13 -- r41;
  r47 -- r59;
  r23 -- r58;
  r41 -- r42;
  r50 -- r67;
  r13 -- r58;
  r46 -- r55;
  r45 -- r52;
  r42 -- r68;
  r15 -- r52;
  r43 -- r77;
  r15 -- r23;
  r21 -- r39;
  r42 -- r64;
  r23 -- r37;
  r45 -- r73;
  r48 -- r70;
  r27 -- r45;
  r17 -- r34;
  r42 -- r56;
  r49 -- r56;
  r54 -- r68;
  r27 -- r31;
  r38 -- r59;
  r3 -- r19;
  r46 -- r69;
  r7 -- r29;
  r53 -- r54;
  r46 -- r80;
  r49 -- r79;
  r50 -- r56;
  r11 -- r20;
  r45 -- r57;
  r17 -- r29;
  r1 -- r8;
  r33 -- r49;
  r17 -- r48;
  r3 -- r38;
  r47 -- r70;
  r1 -- r47;
  r19 -- r61;
  r47 -- r48;
  r29 -- r60;
  r54 -- r67;
  r11 -- r16;
  r1 -- r22;
  r37 -- r67;
  r11 -- r12;
  r52 -- r81;
  r52 -- r84;
  r1 -- r13;
  r46 -- r75;
  r53 -- r82;
  r11 -- r22;
  r7 -- r48;
  r17 -- r25;
  r45 -- r63;
  r31 -- r42;
  r7 -- r49;
  r23 -- r39;
  r33 -- r46;
  r42 -- r47;
  r21 -- r23;
  r9 -- r52;
  r45 -- r50;
  r3 -- r50;
  r7 -- r17;
  r19 -- r28;
  r46 -- r71;
  r27 -- r38;
  r39 -- r46;
  r46 -- r60;
  r52 -- r80;
  r55 -- r80;
  r51 -- r67;
  r31 -- r37;
  r42 -- r69;
  r3 -- r21;
  r21 -- r30;
  r5 -- r9;
  r49 -- r52;
  r49 -- r70;
  r41 -- r44;
  r1 -- r29;
  r29 -- r42;
  r21 -- r59;
  r5 -- r45;
  r55 -- r79;
  r3 -- r20;
  r13 -- r17;
  r1 -- r25;
  r42 -- r55;
  r53 -- r79;
  r31 -- r62;
  r19 -- r43;
  r1 -- r61;
  r41 -- r43;
  r38 -- r58;
  r46 -- r73;
  r51 -- r73;
  r15 -- r48;
  r27 -- r33;
  r9 -- r13;
  r44 -- r50;
  r54 -- r70;
  r53 -- r73;
  r47 -- r71;
  r48 -- r62;
  r1 -- r76;
  r31 -- r59;
  r21 -- r43;
  r41 -- r56;
  r38 -- r43;
  r38 -- r53;
  r47 -- r60;
  r25 -- r61;
  r5 -- r41;
  r33 -- r43;
  r17 -- r21;
  r53 -- r58;
  r47 -- r66;
  r7 -- r21;
  r1 -- r71;
  r38 -- r48;
  r40 -- r45;
  r47 -- r72;
  r3 -- r43;
  r21 -- r53;
  r9 -- r27;
  r17 -- r40;
  r27 -- r44;
  r42 -- r74;
  r33 -- r62;
  r55 -- r89;
  r25 -- r62;
  r52 -- r59;
  r19 -- r38;
  r1 -- r7;
  r48 -- r64;
  r1 -- r56;
  r1 -- r63;
  r54 -- r75;
  r38 -- r65;
  r13 -- r49;
  r25 -- r56;
  r11 -- r31;
  r7 -- r53;
  r38 -- r44;
  r5 -- r49;
  r19 -- r31;
  r50 -- r80;
  r44 -- r45;
  r45 -- r58;
  r19 -- r21;
  r29 -- r36;
  r38 -- r64;
  r27 -- r30;
  r46 -- r48;
  r29 -- r43;
  r53 -- r70;
  r48 -- r58;
  r29 -- r38;
  r42 -- r58;
  r41 -- r47;
  r49 -- r63;
  r31 -- r51;
  r43 -- r47;
  r55 -- r84;
  r48 -- r80;
  r35 -- r47;
  r25 -- r38;
  r47 -- r76;
  r3 -- r4;
  r54 -- r55;
  r33 -- r67;
  r19 -- r27;
  r1 -- r21;
  r43 -- r67;
  r21 -- r27;
  r25 -- r47;
  r47 -- r81;
  r35 -- r57;
  r13 -- r51;
  r49 -- r82;
  r50 -- r52;
  r53 -- r78;
  r44 -- r67;
  r40 -- r69;
  r40 -- r43;
  r46 -- r62;
  r29 -- r64;
  r9 -- r10;
  r48 -- r55;
  r5 -- r14;
  r46 -- r76;
  r52 -- r66;
  r1 -- r44;
  r31 -- r34;
  r21 -- r36;
  r13 -- r21;
  r7 -- r8;
  r37 -- r58;
  r13 -- r29;
  r29 -- r53;
  r5 -- r34;
  r29 -- r35;
  r44 -- r61;
  r47 -- r64;
  r51 -- r74;
  r11 -- r17;
  r15 -- r29;
  r15 -- r49;
  r5 -- r20;
  r45 -- r49;
  r7 -- r45;
  r37 -- r56;
  r21 -- r40;
  r43 -- r70;
  r13 -- r45;
  r55 -- r68;
  r49 -- r61;
  r5 -- r13;
  r44 -- r76;
  r7 -- r13;
  r1 -- r32;
  r39 -- r43;
  r47 -- r62;
  r45 -- r68;
  r31 -- r38;
  r7 -- r30;
  r50 -- r73;
  r33 -- r53;
  r47 -- r54;
  r19 -- r26;
  r23 -- r27;
  r21 -- r44;
  r5 -- r16;
  r39 -- r56;
  r19 -- r60;
  r41 -- r59;
  r41 -- r54;
  r46 -- r66;
  r39 -- r58;
  r31 -- r52;
  r13 -- r20;
  r53 -- r72;
  r40 -- r70;
  r15 -- r32;
  r52 -- r56;
  r17 -- r37;
  r21 -- r52;
  r33 -- r34;
  r50 -- r61;
  r9 -- r22;
  r39 -- r44;
  r35 -- r56;
  r17 -- r23;
  r48 -- r76;
  r41 -- r46;
  r29 -- r44;
  r19 -- r49;
  r41 -- r73;
  r15 -- r21;
  r5 -- r37;
  r37 -- r44;
  r43 -- r53;
  r29 -- r37;
  r9 -- r43;
  r17 -- r53;
  r29 -- r39;
  r3 -- r41;
  r21 -- r51;
  r42 -- r59;
  r38 -- r70;
  r21 -- r26;
  r3 -- r14;
  r9 -- r55;
  r33 -- r55;
  r29 -- r34;
  r39 -- r52;
  r11 -- r38;
  r5 -- r27;
  r23 -- r43;
  r38 -- r39;
  r7 -- r23;
  r31 -- r43;
  r1 -- r14;
  r17 -- r32;
  r45 -- r60;
  r41 -- r75;
  r46 -- r77;
  r25 -- r40;
  r49 -- r74;
  r52 -- r77;
  r13 -- r27;
  r52 -- r64;
  r5 -- r15;
  comment = "91:v74-> 90:v73-> 89:v72-> 1:v2-> 55:v38-> 87:v70-> 86:v69-> 85:v68-> 51:v34-> 52:v35-> 54:v37-> 88:v71-> 53:v36-> 81:v64-> 80:v63-> 46:v29-> 48:v31-> 50:v33-> 47:v30-> 49:v32-> 75:v58-> 44:v27-> 43:v26-> 45:v28-> 78:v61-> 77:v60-> 41:v24-> 71:v54-> 70:v53-> 40:v23-> 74:v57-> 39:v22-> 73:v56-> 35:v19-> 37:v20-> 21:v12-> 31:v17-> 33:v18-> 68:v51-> 27:v15-> 38:v21-> 72:v55-> 63:v46-> 34:v131-> 76:v59-> 13:v8-> 15:v9-> 17:v10-> 19:v11-> 62:v45-> 0:a0-> 60:v43-> 11:v7-> 58:v41-> 7:v5-> 56:v39-> 6:v159-> 5:v4-> 9:v6-> 61:v44-> 30:v135-> 24:v141-> 29:v16-> 67:v50-> 66:v49-> 8:v157-> 4:v161-> 32:v133-> 14:v151-> 23:v13-> 64:v47-> 10:v155-> 26:v139-> 36:v129-> 83:v66-> 69:v52-> 16:v149-> 3:v3-> 42:v25-> 25:v14-> 65:v48-> 82:v65-> 57:v40-> 2:v163-> 18:v147-> 84:v67-> 12:v153-> 79:v62-> 28:v137-> 22:v143-> 59:v42-> 20:v145"
  comment = "v29<-a3;v18<-a4;v42<-t0;v59<-a2;v6<-t0;v139<-a0;v69<-a0;v27<-a3;v36<-a2;v39<-a5;v155<-a0;v4<-t0;v37<-a0;v141<-a0;v26<-a4;v71<-a0;v63<-a3;v17<-a5;v22<-a5;v10<-a6;v35<-a2;v48<-a4;v62<-a4;v145<-a0;v44<-t0;v13<-a7;v3<-t1;v65<-a2;v50<-a3;v15<-a2;v60<-a4;v58<-a4;v45<-a3;v23<-a3;v7<-t0;v41<-t0;v131<-a0;v66<-a3;v151<-a0;v34<-a0;v61<-a2;v38<-a0;v149<-a0;v12<-a5;v43<-a6;v56<-a4;v21<-a6;v55<-a0;v70<-a0;v68<-a2;v30<-a3;v159<-a0;v8<-a7;v25<-a5;v161<-a0;v16<-a7;v19<-a2;v5<-a7;v47<-a7;v157<-a0;v129<-a0;v49<-a6;v9<-a5;v133<-a0;v32<-a2;v57<-a2;v40<-t1;v51<-a5;v74<-a0;v53<-a5;v153<-a0;v31<-a1;v20<-a3;v2<-a1;v24<-a4;v137<-a0;v54<-a0;v52<-a5;v143<-a0;v67<-a3;v72<-a0;v33<-a0;v135<-a0;v28<-a1;v14<-a7;v46<-a7;v163<-a0;v147<-a0;v11<-a7;v73<-a0;v64<-a0;"
}

graph G {
  graph [label="float interference graph of f"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r2 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  r3 [label="v3 ← a0", color=green];
  r0 -- r3;
  r0 -- r1;
  r0 -- r2;
  comment = "3:v3-> 2:v2-> 1:a0-> 0:zero"
  comment = "v2<-a0;v3<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl f
  .type f, @function
f:
; block info: defs: [v153, v58, v159, v22, v67, v28, v44, v33, v64, v60, v51, v73, v63, v20, v27, v50, v151, v59, v6, v137, v129, v54, v62, v5, v10, v49, v133, v157, v141, v37, v17, v43, v52, v147, v31, v48, v68, v45, v61, v55, v163, v3, v40, v25, v14, v16, v69, v13, v26, v42, v7, v32, v41, v12, v143, v149, v161, v29, v8, v19, v4, v47, v74, v57, v34, v155, v11, v66, v46, v71, v21, v53, a0, v30, v36, v65, v24, v9, v145, v39, v72, v18, v56, v23, v35, v38, v70, v15, v139, v131, v135, v2], uses: [v153, v58, v159, v22, v67, v28, v44, v33, v64, v60, v51, v73, v63, v20, v27, v50, v151, v59, v6, v137, v129, v54, v62, v5, v10, v49, v133, v157, v141, v37, v17, v43, v52, v147, v31, v48, v68, v45, v61, v55, v163, v3, v40, v25, v14, v16, v69, v13, v26, v42, v7, v32, v41, v143, v12, v149, v161, v29, v8, v19, v4, v47, v74, v57, v34, v155, v11, v66, v46, v71, v21, v53, a0, v30, v36, v65, v24, v145, v9, v39, v72, v18, v56, v23, v35, v38, v70, v15, v139, v131, v135, v2], upward_exposed: [a0], params_defs: []
; live_in: [a0], live_out: []
; block parameters: []
.f_b0:
  mv v2, a0  ; live: [a0]
  li v163, 1  ; live: [v2]
  add v3, v2, v163  ; live: [v163, v2]
  li v161, 1  ; live: [v3, v2]
  add v4, v3, v161  ; live: [v3, v161, v2]
  li v159, 1  ; live: [v3, v4, v2]
  add v5, v4, v159  ; live: [v3, v159, v4, v2]
  li v157, 1  ; live: [v3, v4, v5, v2]
  add v6, v5, v157  ; live: [v3, v4, v5, v157, v2]
  li v155, 1  ; live: [v3, v4, v6, v5, v2]
  add v7, v6, v155  ; live: [v3, v4, v6, v155, v5, v2]
  li v153, 1  ; live: [v3, v7, v4, v6, v5, v2]
  add v8, v7, v153  ; live: [v3, v153, v7, v4, v6, v5, v2]
  li v151, 1  ; live: [v3, v7, v8, v4, v6, v5, v2]
  add v9, v8, v151  ; live: [v3, v7, v8, v151, v4, v6, v5, v2]
  li v149, 1  ; live: [v3, v7, v8, v4, v6, v5, v9, v2]
  add v10, v9, v149  ; live: [v3, v7, v149, v8, v4, v6, v5, v9, v2]
  li v147, 1  ; live: [v3, v7, v8, v4, v6, v5, v10, v9, v2]
  add v11, v10, v147  ; live: [v3, v7, v8, v4, v6, v5, v10, v147, v9, v2]
  li v145, 1  ; live: [v3, v7, v8, v4, v6, v11, v5, v10, v9, v2]
  add v12, v11, v145  ; live: [v3, v7, v8, v4, v6, v11, v5, v10, v9, v145, v2]
  li v143, 1  ; live: [v3, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
  add v13, v12, v143  ; live: [v3, v7, v12, v143, v8, v4, v6, v11, v5, v10, v9, v2]
  li v141, 1  ; live: [v3, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
  add v14, v13, v141  ; live: [v3, v13, v7, v12, v8, v4, v6, v11, v5, v10, v141, v9, v2]
  li v139, 1  ; live: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
  add v15, v14, v139  ; live: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v139, v2]
  li v137, 1  ; live: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v2]
  add v16, v15, v137  ; live: [v3, v14, v13, v7, v12, v8, v4, v6, v137, v11, v5, v10, v9, v15, v2]
  li v135, 1  ; live: [v3, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v2]
  add v17, v16, v135  ; live: [v3, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v135, v2]
  li v133, 1  ; live: [v3, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v15, v2]
  add v18, v17, v133  ; live: [v3, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v133, v17, v9, v15, v2]
  li v131, 1  ; live: [v3, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
  add v19, v18, v131  ; live: [v3, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v18, v15, v131, v2]
  li v129, 1  ; live: [v3, v16, v14, v13, v7, v12, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
  add v20, v19, v129  ; live: [v3, v16, v14, v13, v7, v12, v8, v19, v4, v6, v129, v11, v5, v10, v17, v9, v18, v15, v2]
  add v21, v20, v3  ; live: [v3, v16, v14, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
  add v22, v21, v4  ; live: [v3, v16, v14, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v2]
  add v23, v22, v5  ; live: [v3, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v2]
  add v24, v23, v6  ; live: [v3, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v23, v15, v2]
  add v25, v24, v7  ; live: [v3, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
  add v26, v25, v8  ; live: [v3, v25, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
  add v27, v26, v9  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
  add v28, v27, v10  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v12, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
  add v29, v28, v11  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v12, v28, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
  add v30, v29, v12  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
  add v31, v30, v13  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v9, v18, v23, v15, v2]
  add v32, v31, v14  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
  add v33, v32, v15  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
  add v34, v33, v16  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
  add v35, v34, v17  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
  add v36, v35, v18  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v35, v15, v2]
  add v37, v36, v19  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v2]
  add v38, v37, v2  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v15, v2]
  add v39, v3, v4  ; live: [v3, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15, v2]
  add v40, v39, v5  ; live: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v2]
  add v41, v40, v6  ; live: [v40, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15, v2]
  add v42, v41, v7  ; live: [v25, v16, v14, v26, v13, v22, v7, v32, v41, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15, v2]
  add v43, v42, v8  ; live: [v25, v16, v14, v26, v13, v42, v22, v32, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15, v2]
  add v44, v43, v9  ; live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v10, v30, v36, v37, v17, v43, v24, v31, v9, v18, v23, v35, v38, v15, v2]
  add v45, v44, v10  ; live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v44, v33, v29, v27, v20, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v18, v23, v35, v38, v15, v2]
  add v46, v45, v11  ; live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v30, v36, v37, v17, v24, v31, v18, v23, v35, v45, v38, v15, v2]
  add v47, v46, v12  ; live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v46, v21, v30, v36, v37, v17, v24, v31, v18, v23, v35, v38, v15, v2]
  add v48, v47, v13  ; live: [v25, v16, v14, v26, v13, v22, v32, v28, v33, v29, v27, v20, v19, v47, v34, v21, v30, v36, v37, v17, v24, v31, v18, v23, v35, v38, v15, v2]
  add v49, v48, v14  ; live: [v25, v16, v14, v26, v22, v32, v28, v33, v29, v27, v20, v19, v34, v21, v30, v36, v37, v17, v24, v31, v18, v48, v23, v35, v38, v15, v2]
  add v50, v49, v15  ; live: [v25, v16, v21, v49, v26, v30, v22, v36, v37, v32, v17, v24, v28, v31, v33, v18, v29, v27, v23, v20, v35, v19, v38, v15, v34, v2]
  add v51, v50, v16  ; live: [v25, v16, v21, v26, v30, v22, v36, v37, v32, v17, v24, v28, v31, v33, v18, v29, v27, v23, v20, v50, v35, v19, v38, v34, v2]
  add v52, v51, v17  ; live: [v25, v21, v26, v30, v22, v36, v37, v32, v17, v24, v28, v31, v33, v51, v18, v29, v27, v23, v20, v35, v19, v38, v34, v2]
  add v53, v52, v18  ; live: [v25, v21, v26, v30, v22, v36, v37, v32, v24, v52, v31, v28, v33, v18, v29, v27, v23, v20, v35, v19, v38, v34, v2]
  add v54, v53, v19  ; live: [v25, v21, v53, v26, v30, v22, v36, v37, v32, v24, v28, v31, v33, v29, v27, v23, v20, v35, v19, v38, v34, v2]
  add v55, v54, v20  ; live: [v25, v21, v26, v30, v22, v36, v37, v32, v24, v28, v31, v33, v29, v27, v23, v20, v35, v38, v34, v54, v2]
  add v56, v55, v21  ; live: [v25, v21, v26, v30, v22, v36, v37, v32, v24, v28, v31, v33, v29, v27, v23, v35, v38, v34, v55, v2]
  add v57, v56, v22  ; live: [v25, v26, v30, v22, v36, v37, v32, v24, v28, v31, v33, v56, v29, v27, v23, v35, v38, v34, v2]
  add v58, v57, v23  ; live: [v25, v26, v30, v36, v37, v32, v24, v28, v31, v33, v29, v27, v23, v35, v38, v57, v34, v2]
  add v59, v58, v24  ; live: [v25, v58, v26, v30, v36, v37, v32, v24, v28, v31, v33, v29, v27, v35, v38, v34, v2]
  add v60, v59, v25  ; live: [v25, v26, v30, v36, v37, v32, v28, v31, v33, v29, v27, v35, v38, v59, v34, v2]
  add v61, v60, v26  ; live: [v26, v30, v36, v37, v32, v28, v31, v33, v60, v29, v27, v35, v38, v34, v2]
  add v62, v61, v27  ; live: [v30, v36, v37, v32, v28, v31, v33, v29, v27, v35, v38, v61, v34, v2]
  add v63, v62, v28  ; live: [v2, v62, v29, v30, v36, v35, v37, v38, v32, v31, v28, v34, v33]
  add v64, v63, v29  ; live: [v63, v29, v30, v36, v35, v37, v38, v32, v31, v33, v34, v2]
  add v65, v64, v30  ; live: [v2, v30, v36, v35, v37, v38, v32, v31, v33, v34, v64]
  add v66, v65, v31  ; live: [v2, v36, v35, v37, v38, v32, v65, v31, v33, v34]
  add v67, v66, v32  ; live: [v66, v36, v35, v37, v38, v32, v34, v33, v2]
  add v68, v67, v33  ; live: [v67, v36, v35, v37, v38, v34, v33, v2]
  add v69, v68, v34  ; live: [v68, v36, v35, v37, v38, v34, v2]
  add v70, v69, v35  ; live: [v36, v35, v37, v38, v69, v2]
  add v71, v70, v36  ; live: [v36, v38, v37, v70, v2]
  add v72, v71, v37  ; live: [v38, v37, v71, v2]
  add v73, v72, v38  ; live: [v72, v38, v2]
  add v74, v73, v2  ; live: [v2, v73]
; control
  mv a0, v74  ; live: [v74]
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  call f  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/sum-tail.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn sum #f0 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3($f0)
  }
  .bb #b2 () {
    let %1: int32 = add($f0, $f1)
    let %2: int32 = sub($f1, 1)
    let %3: int32 = call f0(%1, %2)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(0, 10000)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of sum"];
  r0 [label="v2 ← a0", color=green];
  r5 [label="v10 ← a1", color=green];
  r3 [label="v3 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="zero", color=blue];
  r6 [label="v6 ← a1", color=green];
  r4 [label="v5 ← a1", color=green];
  r1 [label="v8 ← a0", color=green];
  r11 [label="v4 ← a2", color=green];
  r7 [label="a1", color=blue];
  r10 [label="v13 ← a0", color=green];
  r8 [label="v7 ← a0", color=green];
  r2 -- r6;
  r9 -- r11;
  r3 -- r4;
  r4 -- r5;
  r0 -- r2;
  r0 -- r3;
  r0 -- r8;
  r3 -- r6;
  r7 -- r10;
  r7 -- r11;
  r0 -- r5;
  r1 -- r2;
  r2 -- r10;
  r3 -- r9;
  r9 -- r10;
  r2 -- r7;
  r2 -- r11;
  r3 -- r7;
  r7 -- r9;
  r2 -- r9;
  r0 -- r4;
  r4 -- r6;
  r0 -- r7;
  r2 -- r3;
  r3 -- r5;
  r0 -- r6;
  r3 -- r8;
  comment = "11:v4-> 9:zero-> 7:a1-> 2:a0-> 10:v13-> 8:v7-> 0:v2-> 6:v6-> 5:v10-> 4:v5-> 3:v3-> 1:v8"
  comment = "v2<-a0;v10<-a1;v3<-a0;v6<-a1;v5<-a1;v8<-a0;v4<-a2;v13<-a0;v7<-a0;"
}

graph G {
  graph [label="float interference graph of sum"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r5 [label="v3 ← a0", color=green];
  r4 [label="v2 ← a0", color=green];
  r1 [label="a0", color=blue];
  r3 [label="a1", color=blue];
  r2 [label="v5 ← a1", color=green];
  r0 -- r2;
  r0 -- r4;
  r0 -- r3;
  r0 -- r1;
  r1 -- r3;
  r0 -- r5;
  r1 -- r2;
  comment = "5:v3-> 4:v2-> 3:a1-> 1:a0-> 0:zero-> 2:v5"
  comment = "v3<-a0;v2<-a0;v5<-a1;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl sum
  .type sum, @function
sum:
; block info: defs: [v3, v4, v13, v2], uses: [a0, zero, v13, v4, a1, v3], upward_exposed: [a1, a0, zero], params_defs: []
; live_in: [a1, a0, zero], live_out: [v3, v2]
; block parameters: []
.sum_b0:
  mv v2, a0  ; live: [a1, a0, zero]
  mv v3, a1  ; live: [a1, a0, zero]
  slt v13, v3, zero  ; live: [a1, a0, zero, v3]
  xori v4, v13, 1  ; live: [a1, a0, zero, v13]
; control
  bne v4, zero, .sum_b1  ; live: [v4, a1, a0, zero]
  j .sum_b2  ; live: [a1, a0, zero]

; block info: defs: [v8], uses: [v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v8]
; block parameters: []
.sum_b1:
; control
  mv v8, v2  ; live: [v2]
  j .sum_b3  ; live: [v2]

; block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
; live_in: [v8], live_out: []
; block parameters: [v8]
.sum_b3:
; control
  mv a0, v8  ; live: [v8]
  ret  ; live: [a0, v8]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v5, v10, a0, v7, v6, a1, v3], upward_exposed: [v3, v2], params_defs: []
; live_in: [v2, v3], live_out: [v8]
; block parameters: []
.sum_b2:
  add v5, v2, v3  ; live: [v3, v2]
  li v10, 1  ; live: [v3, v5, v2]
  sub v6, v3, v10  ; live: [v3, v5, v10, v2]
  mv a0, v5  ; live: [v3, v6, v5, v2]
  mv a1, v6  ; live: [v3, v6, a0, v2]
  call sum  ; live: [v3, a1, a0, v2]
  mv v7, a0  ; live: [v3, a0, v2]
; control
  mv v8, v7  ; live: [v3, v7, v2]
  j .sum_b3  ; live: [v3, v2]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v5, zero, a0, a1, v3], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  mv a0, zero  ; live: [zero]
  li v5, 10000  ; live: [zero, a0]
  mv a1, v5  ; live: [v5, zero, a0]
  call sum  ; live: [a1, zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



Testing test/test_src/sum.mbt
# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn thunk_start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn sum #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(0)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = call f0(%1)
    let %3: int32 = add(%2, $f0)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn main #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(10000)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start

graph G {
  graph [label="integer interference graph of _start"];
  r0 [label="a0", color=blue];
  comment = "0:a0"
  comment = ""
}

graph G {
  graph [label="float interference graph of _start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of thunk_start"];
  r0 [label="zero", color=blue];
  r2 [label="a0", color=blue];
  r1 [label="v2 ← a0", color=green];
  r0 -- r1;
  r0 -- r2;
  comment = "2:a0-> 1:v2-> 0:zero"
  comment = "v2<-a0;"
}

graph G {
  graph [label="float interference graph of thunk_start"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of sum"];
  r0 [label="zero", color=blue];
  r5 [label="v4 ← a1", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r9 [label="v3 ← a0", color=green];
  r6 [label="v5 ← a1", color=green];
  r4 [label="v10 ← a1", color=green];
  r1 [label="v7 ← a0", color=green];
  r7 [label="v6 ← a0", color=green];
  r8 [label="v12 ← a1", color=green];
  r0 -- r2;
  r0 -- r3;
  r2 -- r9;
  r0 -- r8;
  r0 -- r9;
  r3 -- r6;
  r2 -- r3;
  r3 -- r5;
  r3 -- r4;
  r2 -- r8;
  r3 -- r7;
  r1 -- r2;
  comment = "9:v3-> 8:v12-> 2:a0-> 0:zero-> 7:v6-> 3:v2-> 6:v5-> 5:v4-> 4:v10-> 1:v7"
  comment = "v4<-a1;v2<-a0;v3<-a0;v5<-a1;v10<-a1;v7<-a0;v6<-a0;v12<-a1;"
}

graph G {
  graph [label="float interference graph of sum"];
  comment = ""
  comment = ""
}

graph G {
  graph [label="integer interference graph of main"];
  r0 [label="zero", color=blue];
  r4 [label="v3 ← a0", color=green];
  r1 [label="v5 ← a0", color=green];
  r3 [label="v2 ← a0", color=green];
  r2 [label="a0", color=blue];
  r0 -- r3;
  r0 -- r4;
  r0 -- r1;
  r0 -- r2;
  comment = "4:v3-> 3:v2-> 2:a0-> 1:v5-> 0:zero"
  comment = "v3<-a0;v5<-a0;v2<-a0;"
}

graph G {
  graph [label="float interference graph of main"];
  comment = ""
  comment = ""
}

  .p2align 3
  .globl _start
  .type _start, @function
_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0], upward_exposed: [], params_defs: []
; live_in: [], live_out: []
; block parameters: []
_start_b0:
  call thunk_start  ; live: []
; control
  ret  ; live: [a0]

  .p2align 3
  .globl thunk_start
  .type thunk_start, @function
thunk_start:
; block info: defs: [t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.thunk_start_b0:
  call main  ; live: [zero]
  mv v2, zero  ; live: [zero]
; control
  mv a0, v2  ; live: [zero, v2]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl sum
  .type sum, @function
sum:
; block info: defs: [v3, v12, v2], uses: [v3, v12, a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
; live_in: [a0, zero], live_out: [zero, v2]
; block parameters: []
.sum_b0:
  mv v2, a0  ; live: [a0, zero]
  slt v12, v2, zero  ; live: [a0, zero, v2]
  xori v3, v12, 1  ; live: [v12, a0, zero]
; control
  bne v3, zero, .sum_b1  ; live: [a0, zero, v3]
  j .sum_b2  ; live: [a0, zero]

; block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: [v7]
; block parameters: []
.sum_b1:
; control
  mv v7, zero  ; live: [zero]
  j .sum_b3  ; live: [zero]

; block info: defs: [a0], uses: [a0, v7], upward_exposed: [v7], params_defs: [v7]
; live_in: [v7], live_out: []
; block parameters: [v7]
.sum_b3:
; control
  mv a0, v7  ; live: [v7]
  ret  ; live: [a0, v7]

; block info: defs: [t1, v7, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, v6, v10, a0, v2], upward_exposed: [v2], params_defs: []
; live_in: [v2], live_out: [v7]
; block parameters: []
.sum_b2:
  li v10, 1  ; live: [v2]
  sub v4, v2, v10  ; live: [v10, v2]
  mv a0, v4  ; live: [v4, v2]
  call sum  ; live: [a0, v2]
  mv v5, a0  ; live: [a0, v2]
  add v6, v5, v2  ; live: [v5, v2]
; control
  mv v7, v6  ; live: [v6, v2]
  j .sum_b3  ; live: [v2]

  .p2align 3
  .globl main
  .type main, @function
main:
; block info: defs: [v3, t1, ft0, ft1, a1, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, zero, v2], upward_exposed: [zero], params_defs: []
; live_in: [zero], live_out: []
; block parameters: []
.main_b0:
  li v5, 10000  ; live: [zero]
  mv a0, v5  ; live: [v5, zero]
  call sum  ; live: [zero, a0]
  mv v2, a0  ; live: [zero, a0]
  mv a0, v2  ; live: [zero, v2]
  call minimbt_print_int  ; live: [zero, a0]
  mv v3, zero  ; live: [zero]
; control
  mv a0, v3  ; live: [zero, v3]
  ret  ; live: [zero, a0]

  .p2align 3
  .globl start
  .type start, @object
start:
  .zero 4



