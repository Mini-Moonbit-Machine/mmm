package moonbitlang/minimbt

// Values

// Types and methods
pub struct Fundef {
  pub tyvars : Array[String]
  pub name : (String, Type)
  pub args : Array[(String, Type)]
  pub body : Syntax
}
impl Fundef {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub enum Kind {
  Int
  Double
}
impl Kind {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct MatchArm {
  pub pat : Pattern
  pub action : Syntax
}
impl MatchArm {
  to_string(Self) -> String
}

pub struct Name {
  pub name : String?
  pub slot : Int
}
impl Name {
  compare(Self, Self) -> Int
  from_json(Json) -> Self!
  from_string(String) -> Self!NameFromStringError
  hash_combine(Self, Hasher) -> Unit
  name_and_slot(String, Int) -> Self
  name_only(String) -> Self
  op_equal(Self, Self) -> Bool
  slot_only(Int) -> Self
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub type! NameFromStringError {
  InvalidSlotNumber(String, String)
}

pub enum Op {
  Add
  Sub
  Mul
  Div
}
impl Op {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub enum Pattern {
  Wildcard
  Unit
  Bool(Bool)
  Int(Int64)
  Double(Double)
  Var(String)
  Tuple(Array[Pattern])
  CtorApp(String, Array[Pattern])
}
impl Pattern {
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub type PrettySyntax Syntax

pub enum Syntax {
  Unit
  Bool(Bool)
  Int(Int64)
  Double(Double)
  Var(String)
  Tuple(Array[Syntax])
  Not(Syntax)
  Array(Syntax, Syntax)
  Neg(Syntax, Kind?)
  App(Syntax, Array[Syntax])
  Get(Syntax, Syntax)
  If(Syntax, Syntax, Syntax)
  Prim(Syntax, Syntax, Op, Kind?)
  Eq(Syntax, Syntax)
  LE(Syntax, Syntax)
  Let((String, Type), Syntax, Syntax)
  LetRec(Fundef, Syntax)
  LetTuple(Array[(String, Type)], Syntax, Syntax)
  Put(Syntax, Syntax, Syntax)
  CtorApp(String, Array[Syntax])
  Match(Syntax, Array[MatchArm])
  LetEnum(String, Type, Syntax)
}
impl Syntax {
  from_json(Json) -> Self!
  to_json(Self) -> Json
  to_pretty_print(Self) -> PrettySyntax
  to_string(Self) -> String
}

pub enum Type {
  Unit
  Bool
  Int
  Double
  Fun(Array[Type], Type)
  Tuple(Array[Type])
  Array(Type)
  Var(Ref[Type?])
  Ptr
  Named(String)
  Enum(String, Array[(String, Array[Type])])
}
impl Type {
  from_json(Json) -> Self!
  is_float_like(Self) -> Bool
  is_fn_like(Self) -> Bool
  is_ptr_like(Self) -> Bool
  is_unknown(Self) -> Bool
  new_named(String) -> Self
  new_var() -> Self
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  repr(Self) -> Self
  size_of(Self, Int) -> Int
  to_json(Self) -> Json
  to_scheme(Self) -> TypeScheme
  to_string(Self) -> String
}

pub type TypeScheme (Array[String], Type)
impl TypeScheme {
  no_quantifier(Self) -> Type?
  to_string(Self) -> String
}

// Type aliases

// Traits

// Extension Methods
impl Show for Fundef

impl Show for Kind

impl Show for MatchArm

impl Show for Name

impl Show for NameFromStringError

impl Show for Op

impl Show for Pattern

impl Show for PrettySyntax

impl Show for Syntax

impl Show for TypeScheme

