// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/core/prelude.isle
// - src/core/core.isle
// - src/riscv/riscv.isle
// - src/lower/lower_riscv.isle

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
pub trait Context {
  ref_fn(Self, @core.FnRef) -> @core.Fn
  ref_block(Self, @core.BlockRef) -> @core.Block
  ref_insn(Self, @core.InsnRef) -> @core.Insn
  ref_mem(Self, @core.MemRef) -> @core.Mem
  ref_free_v(Self, @core.FnFreeVarRef) -> UInt
  i64_sext_u64(Self, @core.Type, UInt64) -> Int64
  i32_as_u64(Self, Int) -> UInt64
  i64_as_u64(Self, Int64) -> UInt64
  f64_as_u64(Self, Double) -> UInt64
  arg2(Self, @core.Values) -> (@core.Value, @core.Value)?
  arg1(Self, @core.Values) -> @core.Value?
  next_virtual_xreg(Self) -> @riscv.Reg
  next_virtual_freg(Self) -> @riscv.FReg
  emit_risc_v(Self, @riscv.RvAsm) -> Unit
  xreg_new(Self, @riscv.AnyReg) -> @riscv.Reg
  freg_new(Self, @riscv.AnyReg) -> @riscv.FReg
  xreg_to_reg(Self, @riscv.Reg) -> @riscv.AnyReg
  freg_to_reg(Self, @riscv.FReg) -> @riscv.AnyReg
  put_in_xreg(Self, @core.Value) -> @riscv.Reg
  put_in_freg(Self, @core.Value) -> @riscv.FReg
  is_zero_reg(Self, @riscv.Reg) -> Unit?
  zero_reg(Self) -> @riscv.Reg
  is_closure_reg(Self, @riscv.Reg) -> Unit?
  closure_reg(Self) -> @riscv.Reg
  i64_generate_imm(Self, Int64) -> (@riscv.Imm20, @riscv.Imm12)?
  i32_generate_imm(Self, Int) -> (@riscv.Imm20, @riscv.Imm12)?
  imm20_is_zero(Self, @riscv.Imm20) -> Unit?
  imm12_is_zero(Self, @riscv.Imm12) -> Unit?
  imm20_to_i32(Self, @riscv.Imm20) -> Int
  imm12_to_i32(Self, @riscv.Imm12) -> Int
  imm32_to_string(Self, Int) -> String
  imm64_to_string(Self, Int64) -> String
  lower_val_mem(Self, @core.Fn, @core.Mem) -> @riscv.AnyReg?
  lower_val_fn(Self, @core.Fn) -> @riscv.AnyReg?
  lower_val_global_thunk(Self, @core.Fn) -> @riscv.AnyReg?
  lower_val_free_var(Self, @core.Type, @core.FnFreeVarRef) -> @riscv.AnyReg?
  lower_val_block_param(Self, @core.BlockRef, @core.BlockParamRef) ->
       @riscv.AnyReg?
  lower_val_fn_param(Self, @core.FnRef, @core.FnParamRef) -> @riscv.AnyReg?
  lower_call(Self, @core.Type, @core.Fn, @core.Values) -> @riscv.AnyReg?
  lower_ext_call(Self, @core.Type, String, @core.Values) -> @riscv.AnyReg?
  lower_apply(Self, @core.Type, @core.Value, @core.Values) -> @riscv.AnyReg?
  imm12_from_val(Self, @core.Value) -> @riscv.Imm12?
}

struct Returns[T, C] {
  data : Array[T?]
  next : (C) -> T?
}

fn default_next[T, C : Context](_ctx : C) -> T? {
  None
}

fn Returns::new[T, C : Context]() -> Returns[T, C] {
  { data: [], next: default_next }
}

fn Returns::push[T, C : Context](self : Returns[T, C], value : T?) -> Unit {
  self.data.push(value)
}

fn Returns::length[T, C : Context](self : Returns[T, C]) -> Int {
  self.data.length()
}

let _MAX_ISLE_RETURNS = 64

// Generated as internal constructor for term ty_unit.
pub fn constructor_ty_unit[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 47.
  return @core.Type::Unit
}

// Generated as internal constructor for term ty_bool.
pub fn constructor_ty_bool[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 51.
  return @core.Type::Bool
}

// Generated as internal constructor for term ty_int32.
pub fn constructor_ty_int32[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 55.
  return @core.Type::Int32
}

// Generated as internal constructor for term ty_int64.
pub fn constructor_ty_int64[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 59.
  return @core.Type::Int64
}

// Generated as internal constructor for term ty_double.
pub fn constructor_ty_double[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 63.
  return @core.Type::Double
}

// Generated as internal constructor for term ty_closure_fn.
pub fn constructor_ty_closure_fn[C : Context](
  ctx : C,
  arg0 : @core.Types,
  arg1 : @core.Type
) -> @core.Type {
  let v2 = @core.Type::ClosureFn(params=arg0, ty=arg1)
  // Rule at src/core/core.isle line 67.
  return v2
}

// Generated as internal constructor for term ty_direct_fn.
pub fn constructor_ty_direct_fn[C : Context](
  ctx : C,
  arg0 : @core.Types,
  arg1 : @core.Type
) -> @core.Type {
  let v2 = @core.Type::DirectFn(params=arg0, ty=arg1)
  // Rule at src/core/core.isle line 71.
  return v2
}

// Generated as internal constructor for term ty_tuple.
pub fn constructor_ty_tuple[C : Context](
  ctx : C,
  arg0 : @core.Types
) -> @core.Type {
  let v1 = @core.Type::Tuple(fields=arg0)
  // Rule at src/core/core.isle line 75.
  return v1
}

// Generated as internal constructor for term ty_array.
pub fn constructor_ty_array[C : Context](
  ctx : C,
  arg0 : @core.Type
) -> @core.Type {
  let v1 = @core.Type::Array(elem=arg0)
  // Rule at src/core/core.isle line 79.
  return v1
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Add(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 118.
  return v2
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sub(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 124.
  return v2
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Xor(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 130.
  return v2
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Or(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 136.
  return v2
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::And(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 142.
  return v2
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sll(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 148.
  return v2
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srl(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 154.
  return v2
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sra(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 160.
  return v2
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slt(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 166.
  return v2
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sltu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 172.
  return v2
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Addi(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 178.
  return v2
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Xori(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 184.
  return v2
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Ori(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 190.
  return v2
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Andi(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 196.
  return v2
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slli(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 202.
  return v2
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srli(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 208.
  return v2
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srai(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 214.
  return v2
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slti(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 220.
  return v2
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sltiu(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 226.
  return v2
}

// Generated as internal constructor for term rv_lb.
pub fn constructor_rv_lb[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, Int]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lb(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 232.
  return v1
}

// Generated as internal constructor for term rv_lh.
pub fn constructor_rv_lh[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, Int]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lh(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 238.
  return v1
}

// Generated as internal constructor for term rv_lw.
pub fn constructor_rv_lw[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, Int]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lw(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 244.
  return v1
}

// Generated as internal constructor for term rv_ld.
pub fn constructor_rv_ld[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, Int]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Ld(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 250.
  return v1
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mul(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 256.
  return v2
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 262.
  return v2
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulh(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 268.
  return v2
}

// Generated as internal constructor for term rv_mulhsu.
pub fn constructor_rv_mulhsu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulhsu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 274.
  return v2
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulhu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 280.
  return v2
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Div(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 286.
  return v2
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Divw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 292.
  return v2
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Divu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 298.
  return v2
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Rem(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 304.
  return v2
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Remu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 310.
  return v2
}

// Generated as internal constructor for term rv_fadd_d.
pub fn constructor_rv_fadd_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FaddD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 316.
  return v2
}

// Generated as internal constructor for term rv_fsub_d.
pub fn constructor_rv_fsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FsubD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 322.
  return v2
}

// Generated as internal constructor for term rv_fmul_d.
pub fn constructor_rv_fmul_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FmulD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 328.
  return v2
}

// Generated as internal constructor for term rv_fdiv_d.
pub fn constructor_rv_fdiv_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FdivD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 334.
  return v2
}

// Generated as internal constructor for term rv_fld.
pub fn constructor_rv_fld[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, Int]
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::Fld(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 340.
  return v1
}

// Generated as internal constructor for term rv_f_mv_dx.
pub fn constructor_rv_f_mv_dx[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FmvDX(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 346.
  return v1
}

// Generated as internal constructor for term rv_la.
pub fn constructor_rv_la[C : Context](
  ctx : C,
  arg0 : @riscv.Label
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::La(rd=v1, l=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 352.
  return v1
}

// Generated as internal constructor for term rv_li.
pub fn constructor_rv_li[C : Context](ctx : C, arg0 : String) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Li(rd=v1, i=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 358.
  return v1
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Neg(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 364.
  return v1
}

// Generated as internal constructor for term rv_fneg_d.
pub fn constructor_rv_fneg_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FnegD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 370.
  return v1
}

// Generated as internal constructor for term rv_mv.
pub fn constructor_rv_mv[C : Context](ctx : C, arg0 : @riscv.Reg) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Mv(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 376.
  return v1
}

// Generated as internal constructor for term imm.
pub fn constructor_imm[C : Context](
  ctx : C,
  arg0 : @core.Type,
  arg1 : UInt64
) -> @riscv.AnyReg {
  match arg0 {
    @core.Type::Int32 => {
      let v10 = constructor_ty_int32(ctx)
      let v11 = C::i64_sext_u64(ctx, v10, arg1)
      let v12 = C::imm64_to_string(ctx, v11)
      let v13 = constructor_rv_li(ctx, v12)
      let v14 = C::xreg_to_reg(ctx, v13)
      // Rule at src/lower/lower_riscv.isle line 11.
      return v14
    }
    @core.Type::Int64 => {
      let v5 = constructor_ty_int64(ctx)
      let v15 = C::i64_sext_u64(ctx, v5, arg1)
      let v16 = C::imm64_to_string(ctx, v15)
      let v17 = constructor_rv_li(ctx, v16)
      let v18 = C::xreg_to_reg(ctx, v17)
      // Rule at src/lower/lower_riscv.isle line 15.
      return v18
    }
    @core.Type::Double => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v3 = constructor_rv_f_mv_dx(ctx, v2)
          let v4 = C::freg_to_reg(ctx, v3)
          // Rule at src/lower/lower_riscv.isle line 4.
          return v4
        }
        _ => ()
      }
      let v5 = constructor_ty_int64(ctx)
      let v6 = constructor_imm(ctx, v5, arg1)
      let v7 = C::xreg_new(ctx, v6)
      let v8 = constructor_rv_f_mv_dx(ctx, v7)
      let v9 = C::freg_to_reg(ctx, v8)
      // Rule at src/lower/lower_riscv.isle line 7.
      return v9
    }
    _ => ()
  }
  abort(
    "no rule matched for term imm at src/lower/lower_riscv.isle line 2; should it be partial?",
  )
}

// Generated as internal constructor for term lower_value.
pub fn constructor_lower_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.AnyReg? {
  match arg0 {
    @core.Value::Double(val=v11) => {
      let v12 = constructor_ty_double(ctx)
      let v13 = C::f64_as_u64(ctx, v11)
      let v14 = constructor_imm(ctx, v12, v13)
      let v15 = Some(v14)
      // Rule at src/lower/lower_riscv.isle line 56.
      return v15
    }
    @core.Value::Int32(val=v1) => {
      let v2 = constructor_ty_int32(ctx)
      let v3 = C::i32_as_u64(ctx, v1)
      let v4 = constructor_imm(ctx, v2, v3)
      let v5 = Some(v4)
      // Rule at src/lower/lower_riscv.isle line 50.
      return v5
    }
    @core.Value::Int64(val=v6) => {
      let v7 = constructor_ty_int64(ctx)
      let v8 = C::i64_as_u64(ctx, v6)
      let v9 = constructor_imm(ctx, v7, v8)
      let v10 = Some(v9)
      // Rule at src/lower/lower_riscv.isle line 53.
      return v10
    }
    @core.Value::Insn(iref=v16) => {
      let v17 = C::ref_insn(ctx, v16)
      let v18 = constructor_lower(ctx, v17)
      let v19 = match v18 {
        Some(x) => x
        None => return None
      }
      let v20 = Some(v19)
      // Rule at src/lower/lower_riscv.isle line 59.
      return v20
    }
    @core.Value::Mem(fref=v21, mref=v22) => {
      let v23 = C::ref_fn(ctx, v21)
      let v24 = C::ref_mem(ctx, v22)
      let v25 = C::lower_val_mem(ctx, v23, v24)
      let v26 = match v25 {
        Some(x) => x
        None => return None
      }
      let v27 = Some(v26)
      // Rule at src/lower/lower_riscv.isle line 62.
      return v27
    }
    @core.Value::Fn(fref=v28) => {
      let v29 = C::ref_fn(ctx, v28)
      let v30 = C::lower_val_fn(ctx, v29)
      let v31 = match v30 {
        Some(x) => x
        None => return None
      }
      let v32 = Some(v31)
      // Rule at src/lower/lower_riscv.isle line 65.
      return v32
    }
    @core.Value::GlobalThunk(fref=v33) => {
      let v34 = C::ref_fn(ctx, v33)
      let v35 = C::lower_val_global_thunk(ctx, v34)
      let v36 = match v35 {
        Some(x) => x
        None => return None
      }
      let v37 = Some(v36)
      // Rule at src/lower/lower_riscv.isle line 68.
      return v37
    }
    @core.Value::FreeVar(ty=v38, fvref=v39) => {
      let v40 = C::lower_val_free_var(ctx, v38, v39)
      let v41 = match v40 {
        Some(x) => x
        None => return None
      }
      let v42 = Some(v41)
      // Rule at src/lower/lower_riscv.isle line 71.
      return v42
    }
    @core.Value::BlockParam(bref=v43, bpref=v44) => {
      let v45 = C::lower_val_block_param(ctx, v43, v44)
      let v46 = match v45 {
        Some(x) => x
        None => return None
      }
      let v47 = Some(v46)
      // Rule at src/lower/lower_riscv.isle line 74.
      return v47
    }
    @core.Value::FnParam(fref=v48, fpref=v49) => {
      let v50 = C::lower_val_fn_param(ctx, v48, v49)
      let v51 = match v50 {
        Some(x) => x
        None => return None
      }
      let v52 = Some(v51)
      // Rule at src/lower/lower_riscv.isle line 77.
      return v52
    }
    @core.Value::Self(fref=v53) => {
      let v54 = C::closure_reg(ctx)
      let v55 = C::xreg_to_reg(ctx, v54)
      let v56 = Some(v55)
      // Rule at src/lower/lower_riscv.isle line 80.
      return v56
    }
    _ => ()
  }
  None
}

// Generated as internal constructor for term lower.
pub fn constructor_lower[C : Context](
  ctx : C,
  arg0 : @core.Insn
) -> @riscv.AnyReg? {
  match arg0 {
    @core.Insn::Op(ty=v1, op=v2, args=v3) =>
      match v1 {
        @core.Type::Int32 =>
          match v2 {
            @core.Op::Add => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v8 = C::put_in_xreg(ctx, v5.0)
                  let v9 = C::put_in_xreg(ctx, v5.1)
                  let v10 = constructor_rv_add(ctx, v8, v9)
                  let v11 = C::xreg_to_reg(ctx, v10)
                  let v12 = Some(v11)
                  // Rule at src/lower/lower_riscv.isle line 90.
                  return v12
                }
                _ => ()
              }
            }
            @core.Op::Sub => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v8 = C::put_in_xreg(ctx, v5.0)
                  let v13 = constructor_rv_sub(ctx, v8, v8)
                  let v14 = C::xreg_to_reg(ctx, v13)
                  let v15 = Some(v14)
                  // Rule at src/lower/lower_riscv.isle line 96.
                  return v15
                }
                _ => ()
              }
            }
            @core.Op::Mul => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v8 = C::put_in_xreg(ctx, v5.0)
                  let v9 = C::put_in_xreg(ctx, v5.1)
                  let v16 = constructor_rv_mulw(ctx, v8, v9)
                  let v17 = C::xreg_to_reg(ctx, v16)
                  let v18 = Some(v17)
                  // Rule at src/lower/lower_riscv.isle line 102.
                  return v18
                }
                _ => ()
              }
            }
            @core.Op::Div => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v8 = C::put_in_xreg(ctx, v5.0)
                  let v9 = C::put_in_xreg(ctx, v5.1)
                  let v19 = constructor_rv_divw(ctx, v8, v9)
                  let v20 = C::xreg_to_reg(ctx, v19)
                  let v21 = Some(v20)
                  // Rule at src/lower/lower_riscv.isle line 108.
                  return v21
                }
                _ => ()
              }
            }
            @core.Op::Neg => {
              let v22 = C::arg1(ctx, v3)
              match v22 {
                Some(v23) => {
                  let v24 = C::put_in_xreg(ctx, v23)
                  let v25 = constructor_rv_neg(ctx, v24)
                  let v26 = C::xreg_to_reg(ctx, v25)
                  let v27 = Some(v26)
                  // Rule at src/lower/lower_riscv.isle line 114.
                  return v27
                }
                _ => ()
              }
            }
            @core.Op::Lnot => {
              let v22 = C::arg1(ctx, v3)
              match v22 {
                Some(v23) => {
                  let v24 = C::put_in_xreg(ctx, v23)
                  let v29 = constructor_rv_sltiu(ctx, v24, 0x1)
                  let v30 = C::xreg_to_reg(ctx, v29)
                  let v31 = Some(v30)
                  // Rule at src/lower/lower_riscv.isle line 120.
                  return v31
                }
                _ => ()
              }
            }
            @core.Op::Eq => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v8 = C::put_in_xreg(ctx, v5.0)
                  let v9 = C::put_in_xreg(ctx, v5.1)
                  let v32 = constructor_rv_xor(ctx, v8, v9)
                  let v33 = constructor_rv_sltiu(ctx, v32, 0x1)
                  let v34 = C::xreg_to_reg(ctx, v33)
                  let v35 = Some(v34)
                  // Rule at src/lower/lower_riscv.isle line 126.
                  return v35
                }
                _ => ()
              }
            }
            @core.Op::Le => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v8 = C::put_in_xreg(ctx, v5.0)
                  let v9 = C::put_in_xreg(ctx, v5.1)
                  let v36 = constructor_rv_sltu(ctx, v8, v9)
                  let v37 = constructor_rv_xori(ctx, v36, 0x1)
                  let v38 = C::xreg_to_reg(ctx, v37)
                  let v39 = Some(v38)
                  // Rule at src/lower/lower_riscv.isle line 133.
                  return v39
                }
                _ => ()
              }
            }
            _ => ()
          }
        @core.Type::Double =>
          match v2 {
            @core.Op::Add => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v40 = C::put_in_freg(ctx, v5.0)
                  let v41 = C::put_in_freg(ctx, v5.1)
                  let v42 = constructor_rv_fadd_d(ctx, v40, v41)
                  let v43 = C::freg_to_reg(ctx, v42)
                  let v44 = Some(v43)
                  // Rule at src/lower/lower_riscv.isle line 140.
                  return v44
                }
                _ => ()
              }
            }
            @core.Op::Sub => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v40 = C::put_in_freg(ctx, v5.0)
                  let v41 = C::put_in_freg(ctx, v5.1)
                  let v45 = constructor_rv_fsub_d(ctx, v40, v41)
                  let v46 = C::freg_to_reg(ctx, v45)
                  let v47 = Some(v46)
                  // Rule at src/lower/lower_riscv.isle line 146.
                  return v47
                }
                _ => ()
              }
            }
            @core.Op::Mul => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v40 = C::put_in_freg(ctx, v5.0)
                  let v41 = C::put_in_freg(ctx, v5.1)
                  let v48 = constructor_rv_fmul_d(ctx, v40, v41)
                  let v49 = C::freg_to_reg(ctx, v48)
                  let v50 = Some(v49)
                  // Rule at src/lower/lower_riscv.isle line 152.
                  return v50
                }
                _ => ()
              }
            }
            @core.Op::Div => {
              let v4 = C::arg2(ctx, v3)
              match v4 {
                Some(v5) => {
                  let v40 = C::put_in_freg(ctx, v5.0)
                  let v41 = C::put_in_freg(ctx, v5.1)
                  let v51 = constructor_rv_fdiv_d(ctx, v40, v41)
                  let v52 = C::freg_to_reg(ctx, v51)
                  let v53 = Some(v52)
                  // Rule at src/lower/lower_riscv.isle line 158.
                  return v53
                }
                _ => ()
              }
            }
            @core.Op::Neg => {
              let v22 = C::arg1(ctx, v3)
              match v22 {
                Some(v23) => {
                  let v54 = C::put_in_freg(ctx, v23)
                  let v55 = constructor_rv_fneg_d(ctx, v54)
                  let v56 = C::freg_to_reg(ctx, v55)
                  let v57 = Some(v56)
                  // Rule at src/lower/lower_riscv.isle line 164.
                  return v57
                }
                _ => ()
              }
            }
            _ => ()
          }
        _ => ()
      }
    @core.Insn::Call(ty=v64, f=v65, args=v66) =>
      match v65 {
        @core.Value::Fn(fref=v67) => {
          let v68 = C::ref_fn(ctx, v67)
          let v69 = C::lower_call(ctx, v64, v68, v66)
          let v70 = match v69 {
            Some(x) => x
            None => return None
          }
          let v71 = Some(v70)
          // Rule at src/lower/lower_riscv.isle line 172.
          return v71
        }
        _ => ()
      }
    @core.Insn::Apply(ty=v72, f=v73, args=v74) => {
      let v75 = C::lower_apply(ctx, v72, v73, v74)
      let v76 = match v75 {
        Some(x) => x
        None => return None
      }
      let v77 = Some(v76)
      // Rule at src/lower/lower_riscv.isle line 175.
      return v77
    }
    @core.Insn::ExtCall(ty=v58, ext_f=v59, args=v60) => {
      let v61 = C::lower_ext_call(ctx, v58, v59, v60)
      let v62 = match v61 {
        Some(x) => x
        None => return None
      }
      let v63 = Some(v62)
      // Rule at src/lower/lower_riscv.isle line 169.
      return v63
    }
    _ => ()
  }
  None
}
