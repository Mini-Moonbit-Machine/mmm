package moonbitlang/minimbt/lower/riscv

alias @moonbitlang/minimbt/core as @core

// Values
fn constructor_imm[C : Context](C, @core.Type, UInt64) -> @moonbitlang/minimbt/riscv.AnyReg

fn constructor_lower[C : Context](C, @core.Insn) -> @moonbitlang/minimbt/riscv.AnyReg?

fn constructor_lower_value[C : Context](C, @core.Value) -> @moonbitlang/minimbt/riscv.AnyReg?

fn constructor_rv_add[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_addi[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_and[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_andi[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_div[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_divu[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_divw[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_f_mv_dx[C : Context](C, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_fadd_d[C : Context](C, @moonbitlang/minimbt/riscv.FReg, @moonbitlang/minimbt/riscv.FReg) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_fdiv_d[C : Context](C, @moonbitlang/minimbt/riscv.FReg, @moonbitlang/minimbt/riscv.FReg) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_fld[C : Context](C, @moonbitlang/minimbt/riscv.MemAccess[@moonbitlang/minimbt/riscv.Reg, Int]) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_fmul_d[C : Context](C, @moonbitlang/minimbt/riscv.FReg, @moonbitlang/minimbt/riscv.FReg) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_fneg_d[C : Context](C, @moonbitlang/minimbt/riscv.FReg) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_fsub_d[C : Context](C, @moonbitlang/minimbt/riscv.FReg, @moonbitlang/minimbt/riscv.FReg) -> @moonbitlang/minimbt/riscv.FReg

fn constructor_rv_la[C : Context](C, @moonbitlang/minimbt/riscv.Label) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_lb[C : Context](C, @moonbitlang/minimbt/riscv.MemAccess[@moonbitlang/minimbt/riscv.Reg, Int]) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_ld[C : Context](C, @moonbitlang/minimbt/riscv.MemAccess[@moonbitlang/minimbt/riscv.Reg, Int]) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_lh[C : Context](C, @moonbitlang/minimbt/riscv.MemAccess[@moonbitlang/minimbt/riscv.Reg, Int]) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_li[C : Context](C, String) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_lw[C : Context](C, @moonbitlang/minimbt/riscv.MemAccess[@moonbitlang/minimbt/riscv.Reg, Int]) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_mul[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_mulh[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_mulhsu[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_mulhu[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_mulw[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_mv[C : Context](C, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_neg[C : Context](C, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_or[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_ori[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_rem[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_remu[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_sll[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_slli[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_slt[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_slti[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_sltiu[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_sltu[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_sra[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_srai[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_srl[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_srli[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_sub[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_xor[C : Context](C, @moonbitlang/minimbt/riscv.Reg, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_rv_xori[C : Context](C, @moonbitlang/minimbt/riscv.Reg, Int) -> @moonbitlang/minimbt/riscv.Reg

fn constructor_ty_array[C : Context](C, @core.Type) -> @core.Type

fn constructor_ty_bool[C : Context](C) -> @core.Type

fn constructor_ty_closure_fn[C : Context](C, Array[@core.Type], @core.Type) -> @core.Type

fn constructor_ty_direct_fn[C : Context](C, Array[@core.Type], @core.Type) -> @core.Type

fn constructor_ty_double[C : Context](C) -> @core.Type

fn constructor_ty_int32[C : Context](C) -> @core.Type

fn constructor_ty_int64[C : Context](C) -> @core.Type

fn constructor_ty_tuple[C : Context](C, Array[@core.Type]) -> @core.Type

fn constructor_ty_unit[C : Context](C) -> @core.Type

// Types and methods
type Returns

// Type aliases

// Traits
pub trait Context {
  ref_fn(Self, @core.FnRef) -> @core.Fn
  ref_block(Self, @core.BlockRef) -> @core.Block
  ref_insn(Self, @core.InsnRef) -> @core.Insn
  ref_mem(Self, @core.MemRef) -> @core.Mem
  ref_free_v(Self, @core.FnFreeVarRef) -> UInt
  i64_sext_u64(Self, @core.Type, UInt64) -> Int64
  i32_as_u64(Self, Int) -> UInt64
  i64_as_u64(Self, Int64) -> UInt64
  f64_as_u64(Self, Double) -> UInt64
  arg2(Self, Array[@core.Value]) -> (@core.Value, @core.Value)?
  arg1(Self, Array[@core.Value]) -> @core.Value?
  next_virtual_xreg(Self) -> @moonbitlang/minimbt/riscv.Reg
  next_virtual_freg(Self) -> @moonbitlang/minimbt/riscv.FReg
  emit_risc_v(Self, @moonbitlang/minimbt/riscv.RvAsm) -> Unit
  xreg_new(Self, @moonbitlang/minimbt/riscv.AnyReg) -> @moonbitlang/minimbt/riscv.Reg
  freg_new(Self, @moonbitlang/minimbt/riscv.AnyReg) -> @moonbitlang/minimbt/riscv.FReg
  xreg_to_reg(Self, @moonbitlang/minimbt/riscv.Reg) -> @moonbitlang/minimbt/riscv.AnyReg
  freg_to_reg(Self, @moonbitlang/minimbt/riscv.FReg) -> @moonbitlang/minimbt/riscv.AnyReg
  put_in_xreg(Self, @core.Value) -> @moonbitlang/minimbt/riscv.Reg
  put_in_freg(Self, @core.Value) -> @moonbitlang/minimbt/riscv.FReg
  is_zero_reg(Self, @moonbitlang/minimbt/riscv.Reg) -> Unit?
  zero_reg(Self) -> @moonbitlang/minimbt/riscv.Reg
  is_closure_reg(Self, @moonbitlang/minimbt/riscv.Reg) -> Unit?
  closure_reg(Self) -> @moonbitlang/minimbt/riscv.Reg
  i64_generate_imm(Self, Int64) -> (@moonbitlang/minimbt/riscv.Imm20, @moonbitlang/minimbt/riscv.Imm12)?
  i32_generate_imm(Self, Int) -> (@moonbitlang/minimbt/riscv.Imm20, @moonbitlang/minimbt/riscv.Imm12)?
  imm20_is_zero(Self, @moonbitlang/minimbt/riscv.Imm20) -> Unit?
  imm12_is_zero(Self, @moonbitlang/minimbt/riscv.Imm12) -> Unit?
  imm20_to_i32(Self, @moonbitlang/minimbt/riscv.Imm20) -> Int
  imm12_to_i32(Self, @moonbitlang/minimbt/riscv.Imm12) -> Int
  imm32_to_string(Self, Int) -> String
  imm64_to_string(Self, Int64) -> String
  lower_val_mem(Self, @core.Fn, @core.Mem) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_val_fn(Self, @core.Fn) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_val_global_thunk(Self, @core.Fn) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_val_free_var(Self, @core.Type, @core.FnFreeVarRef) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_val_block_param(Self, @core.BlockRef, @core.BlockParamRef) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_val_fn_param(Self, @core.FnRef, @core.FnParamRef) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_call(Self, @core.Type, @core.Fn, Array[@core.Value]) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_ext_call(Self, @core.Type, String, Array[@core.Value]) -> @moonbitlang/minimbt/riscv.AnyReg?
  lower_apply(Self, @core.Type, @core.Value, Array[@core.Value]) -> @moonbitlang/minimbt/riscv.AnyReg?
  imm12_from_val(Self, @core.Value) -> @moonbitlang/minimbt/riscv.Imm12?
}

// Extension Methods

