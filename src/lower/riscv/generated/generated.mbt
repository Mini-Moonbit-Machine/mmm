// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/core/prelude.isle
// - src/core/core.isle
// - src/riscv/riscv.isle
// - src/lower/riscv/lower.isle

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
pub trait Context {
  ref_fn(Self, @core.FnRef) -> @core.Fn
  ref_block(Self, @core.BlockRef) -> @core.Block
  ref_insn(Self, @core.InsnRef) -> @core.Insn
  ref_mem(Self, @core.MemRef) -> @core.Mem
  ref_free_v(Self, @core.FnFreeVarRef) -> UInt
  ref_symbol(Self, @core.SymbolRef) -> @core.Symbol
  insn_once(Self, @core.Value) -> @core.InsnRef?
  i64_sext_u64(Self, @core.Type, UInt64) -> Int64
  i32_as_u64(Self, Int) -> UInt64
  i64_as_u64(Self, Int64) -> UInt64
  f64_as_u64(Self, Double) -> UInt64
  values_to_args(Self, @core.Values) -> Args?
  has_type(Self, @core.Value) -> (@core.Value, @core.Type)
  next_virtual_xreg(Self) -> @riscv.Reg
  next_virtual_freg(Self) -> @riscv.FReg
  emit_risc_v(Self, @riscv.RvAsm) -> Unit
  xreg_new(Self, @riscv.RegPack) -> @riscv.Reg
  freg_new(Self, @riscv.RegPack) -> @riscv.FReg
  xreg_to_reg(Self, @riscv.Reg) -> @riscv.RegPack
  freg_to_reg(Self, @riscv.FReg) -> @riscv.RegPack
  is_zero_reg(Self, @riscv.Reg) -> Unit?
  zero_reg(Self) -> @riscv.Reg
  is_closure_reg(Self, @riscv.Reg) -> Unit?
  closure_reg(Self) -> @riscv.Reg
  is_return_reg(Self, @riscv.Reg) -> Unit?
  return_reg(Self) -> @riscv.Reg
  is_float_return_reg(Self, @riscv.FReg) -> Unit?
  float_return_reg(Self) -> @riscv.FReg
  i64_generate_imm(Self, Int64) -> (@riscv.Imm20, @riscv.Imm12)?
  i32_generate_imm(Self, Int) -> (@riscv.Imm20, @riscv.Imm12)?
  imm20_is_zero(Self, @riscv.Imm20) -> Unit?
  imm12_is_zero(Self, @riscv.Imm12) -> Unit?
  imm20_to_i32(Self, @riscv.Imm20) -> Int
  imm12_to_i32(Self, @riscv.Imm12) -> Int
  imm32_to_string(Self, Int) -> String
  imm64_to_string(Self, Int64) -> String
  lower_recent_imm(Self, @core.Type, UInt64) -> @riscv.RegPack
  mark_maybe_aliased(Self, @riscv.RegPack) -> @riscv.RegPack
  put_in_reg(Self, @core.Value) -> @riscv.RegPack
  block_label(Self, @core.BlockRef) -> @riscv.Label
  imm12_from_val(Self, @core.Value) -> @riscv.Imm12?
  imm12_from_neg_val(Self, @core.Value) -> @riscv.Imm12?
  emit_block_parameters(Self, @core.BlockRef, @core.Values) -> Unit
  emit_fake_epilogue(Self) -> Unit
  target_color(Self, @core.BlockRef) -> (@lower.ColorSeq, @core.BlockRef)
  lower_select(Self, @core.Control) -> Unit
  not_double(Self, @core.Value) -> @core.Value?
  power_of_two(Self, @core.Value) -> Int?
  power_of_two_minus_one(Self, Int) -> Int
  lower_load_fn(Self, @core.FnRef) -> @riscv.RegPack
  lower_call(Self, @core.Type, @core.Fn, @core.Values) -> @riscv.RegPack
  lower_ext_call(Self, @core.Type, String, @core.Values) -> @riscv.RegPack
  lower_apply(Self, @core.Type, @core.Value, @core.Values) -> @riscv.RegPack
  lower_load_symbol(Self, @core.Type, @core.SymbolRef) -> @riscv.RegPack
  lower_store(Self, @core.Type, @core.Address, @core.Value) -> @riscv.RegPack
  lower_load(Self, @core.Type, @core.Address) -> @riscv.RegPack
  lower_alloc(Self, @core.Type, @core.MemRef, @core.Fills) -> @riscv.RegPack
  lower_pack(Self, @core.Type, @core.Values) -> @riscv.RegPack
  lower_extract(Self, @core.Type, @core.Value, Int) -> @riscv.RegPack
  lower_compute_address(Self, @core.Address) -> @riscv.RegPack
}

struct Returns[T, C] {
  data : Array[T?]
  next : (C) -> T?
}

fn default_next[T, C : Context](_ctx : C) -> T? {
  None
}

fn Returns::new[T, C : Context]() -> Returns[T, C] {
  { data: [], next: default_next }
}

fn Returns::push[T, C : Context](self : Returns[T, C], value : T?) -> Unit {
  self.data.push(value)
}

fn Returns::length[T, C : Context](self : Returns[T, C]) -> Int {
  self.data.length()
}

let _MAX_ISLE_RETURNS = 64

/// Internal type Args: defined at src/core/core.isle line 347.
pub enum Args {
  Args2(~arg1 : @core.Value, ~arg2 : @core.Value)
  Args1(~arg1 : @core.Value)
  Args0
} derive(Eq, Show)

// Generated as internal constructor for term ty_unit.
pub fn constructor_ty_unit[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 52.
  return @core.Type::Unit
}

// Generated as internal constructor for term ty_bool.
pub fn constructor_ty_bool[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 56.
  return @core.Type::Bool
}

// Generated as internal constructor for term ty_int32.
pub fn constructor_ty_int32[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 60.
  return @core.Type::Int32
}

// Generated as internal constructor for term ty_int64.
pub fn constructor_ty_int64[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 64.
  return @core.Type::Int64
}

// Generated as internal constructor for term ty_double.
pub fn constructor_ty_double[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 68.
  return @core.Type::Double
}

// Generated as internal constructor for term ty_closure_fn.
pub fn constructor_ty_closure_fn[C : Context](
  ctx : C,
  arg0 : @core.Types,
  arg1 : @core.Type
) -> @core.Type {
  let v2 = @core.Type::ClosureFn(params=arg0, ty=arg1)
  // Rule at src/core/core.isle line 72.
  return v2
}

// Generated as internal constructor for term ty_direct_fn.
pub fn constructor_ty_direct_fn[C : Context](
  ctx : C,
  arg0 : @core.Types,
  arg1 : @core.Type
) -> @core.Type {
  let v2 = @core.Type::DirectFn(params=arg0, ty=arg1)
  // Rule at src/core/core.isle line 76.
  return v2
}

// Generated as internal constructor for term ty_tuple.
pub fn constructor_ty_tuple[C : Context](
  ctx : C,
  arg0 : @core.Types
) -> @core.Type {
  let v1 = @core.Type::Tuple(fields=arg0)
  // Rule at src/core/core.isle line 80.
  return v1
}

// Generated as internal constructor for term ty_array.
pub fn constructor_ty_array[C : Context](
  ctx : C,
  arg0 : @core.Type
) -> @core.Type {
  let v1 = @core.Type::Array(elem=arg0)
  // Rule at src/core/core.isle line 84.
  return v1
}

// Generated as internal constructor for term round_rne.
pub fn constructor_round_rne[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 150.
  return @core.RoundMode::Rne
}

// Generated as internal constructor for term round_rtz.
pub fn constructor_round_rtz[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 154.
  return @core.RoundMode::Rtz
}

// Generated as internal constructor for term round_rdn.
pub fn constructor_round_rdn[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 158.
  return @core.RoundMode::Rdn
}

// Generated as internal constructor for term round_rup.
pub fn constructor_round_rup[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 162.
  return @core.RoundMode::Rup
}

// Generated as internal constructor for term arg2.
pub fn constructor_arg2[C : Context](
  ctx : C,
  arg0 : @core.Value,
  arg1 : @core.Value
) -> Args {
  let v2 = Args::Args2(arg1=arg0, arg2=arg1)
  // Rule at src/core/core.isle line 354.
  return v2
}

// Generated as internal constructor for term arg1.
pub fn constructor_arg1[C : Context](ctx : C, arg0 : @core.Value) -> Args {
  let v1 = Args::Args1(arg1=arg0)
  // Rule at src/core/core.isle line 358.
  return v1
}

// Generated as internal constructor for term arg0.
pub fn constructor_arg0[C : Context](ctx : C) -> Args {
  // Rule at src/core/core.isle line 362.
  return Args::Args0
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Add(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 134.
  return v2
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sub(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 140.
  return v2
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Xor(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 146.
  return v2
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Or(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 152.
  return v2
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::And(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 158.
  return v2
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sll(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 164.
  return v2
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srl(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 170.
  return v2
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sra(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 176.
  return v2
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slt(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 182.
  return v2
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sltu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 188.
  return v2
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Addi(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 194.
  return v2
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Xori(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 200.
  return v2
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Ori(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 206.
  return v2
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Andi(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 212.
  return v2
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slli(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 218.
  return v2
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slliw(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 224.
  return v2
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srli(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 230.
  return v2
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srai(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 236.
  return v2
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slti(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 242.
  return v2
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sltiu(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 248.
  return v2
}

// Generated as internal constructor for term rv_lb.
pub fn constructor_rv_lb[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lb(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 254.
  return v1
}

// Generated as internal constructor for term rv_lh.
pub fn constructor_rv_lh[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lh(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 260.
  return v1
}

// Generated as internal constructor for term rv_lw.
pub fn constructor_rv_lw[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lw(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 266.
  return v1
}

// Generated as internal constructor for term rv_ld.
pub fn constructor_rv_ld[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Ld(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 272.
  return v1
}

// Generated as internal constructor for term rv_lbu.
pub fn constructor_rv_lbu[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lbu(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 278.
  return v1
}

// Generated as internal constructor for term rv_lhu.
pub fn constructor_rv_lhu[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lhu(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 284.
  return v1
}

// Generated as internal constructor for term rv_lwu.
pub fn constructor_rv_lwu[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lwu(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 290.
  return v1
}

// Generated as internal constructor for term rv_sb.
pub fn constructor_rv_sb[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sb(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 296.
  return v3
}

// Generated as internal constructor for term rv_sh.
pub fn constructor_rv_sh[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sh(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 299.
  return v3
}

// Generated as internal constructor for term rv_sw.
pub fn constructor_rv_sw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sw(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 302.
  return v3
}

// Generated as internal constructor for term rv_sd.
pub fn constructor_rv_sd[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sd(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 305.
  return v3
}

// Generated as internal constructor for term rv_beq.
pub fn constructor_rv_beq[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Beq(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 308.
  return v4
}

// Generated as internal constructor for term rv_bne.
pub fn constructor_rv_bne[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bne(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 311.
  return v4
}

// Generated as internal constructor for term rv_blt.
pub fn constructor_rv_blt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Blt(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 314.
  return v4
}

// Generated as internal constructor for term rv_bge.
pub fn constructor_rv_bge[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bge(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 317.
  return v4
}

// Generated as internal constructor for term rv_ble.
pub fn constructor_rv_ble[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Ble(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 320.
  return v4
}

// Generated as internal constructor for term rv_bgt.
pub fn constructor_rv_bgt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bgt(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 323.
  return v4
}

// Generated as internal constructor for term rv_bltu.
pub fn constructor_rv_bltu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bltu(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 326.
  return v4
}

// Generated as internal constructor for term rv_bgeu.
pub fn constructor_rv_bgeu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bgeu(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 329.
  return v4
}

// Generated as internal constructor for term rv_bnez.
pub fn constructor_rv_bnez[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Label
) -> Unit {
  let v2 = C::zero_reg(ctx)
  let v3 = @riscv.RvAsm::Bne(rs1=arg0, rs2=v2, target=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 332.
  return v4
}

// Generated as internal constructor for term rv_beqz.
pub fn constructor_rv_beqz[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Label
) -> Unit {
  let v2 = C::zero_reg(ctx)
  let v3 = @riscv.RvAsm::Beq(rs1=arg0, rs2=v2, target=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 335.
  return v4
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mul(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 338.
  return v2
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 344.
  return v2
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulh(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 350.
  return v2
}

// Generated as internal constructor for term rv_mulhsu.
pub fn constructor_rv_mulhsu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulhsu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 356.
  return v2
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulhu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 362.
  return v2
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Div(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 368.
  return v2
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Divw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 374.
  return v2
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Divu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 380.
  return v2
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Rem(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 386.
  return v2
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Remw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 392.
  return v2
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Remu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 398.
  return v2
}

// Generated as internal constructor for term rv_fadd_d.
pub fn constructor_rv_fadd_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FaddD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 404.
  return v2
}

// Generated as internal constructor for term rv_fsub_d.
pub fn constructor_rv_fsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FsubD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 410.
  return v2
}

// Generated as internal constructor for term rv_fmul_d.
pub fn constructor_rv_fmul_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FmulD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 416.
  return v2
}

// Generated as internal constructor for term rv_fdiv_d.
pub fn constructor_rv_fdiv_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FdivD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 422.
  return v2
}

// Generated as internal constructor for term rv_fld.
pub fn constructor_rv_fld[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::Fld(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 428.
  return v1
}

// Generated as internal constructor for term rv_fsd.
pub fn constructor_rv_fsd[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Fsd(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 434.
  return v3
}

// Generated as internal constructor for term rv_feq_d.
pub fn constructor_rv_feq_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::FeqD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 437.
  return v2
}

// Generated as internal constructor for term rv_fle_d.
pub fn constructor_rv_fle_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::FleD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 443.
  return v2
}

// Generated as internal constructor for term rv_fmv_dx.
pub fn constructor_rv_fmv_dx[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FmvDX(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 449.
  return v1
}

// Generated as internal constructor for term rv_fcvt_w_d.
pub fn constructor_rv_fcvt_w_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @core.RoundMode
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::FcvtWD(rd=v2, rs=arg0, rm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 455.
  return v2
}

// Generated as internal constructor for term rv_fcvt_d_w.
pub fn constructor_rv_fcvt_d_w[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FcvtDW(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 461.
  return v1
}

// Generated as internal constructor for term rv_fabs_d.
pub fn constructor_rv_fabs_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FabsD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 467.
  return v1
}

// Generated as internal constructor for term rv_fsqrt_d.
pub fn constructor_rv_fsqrt_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FsqrtD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 473.
  return v1
}

// Generated as internal constructor for term rv_fmadd_d.
pub fn constructor_rv_fmadd_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg,
  arg2 : @riscv.FReg
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::FmaddD(rd=v3, rs1=arg0, rs2=arg1, rs3=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 479.
  return v3
}

// Generated as internal constructor for term rv_fmsub_d.
pub fn constructor_rv_fmsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg,
  arg2 : @riscv.FReg
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::FmsubD(rd=v3, rs1=arg0, rs2=arg1, rs3=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 485.
  return v3
}

// Generated as internal constructor for term rv_fnmsub_d.
pub fn constructor_rv_fnmsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg,
  arg2 : @riscv.FReg
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::FnmsubD(rd=v3, rs1=arg0, rs2=arg1, rs3=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 491.
  return v3
}

// Generated as internal constructor for term rv_th_addsl.
pub fn constructor_rv_th_addsl[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : Int
) -> @riscv.Reg {
  let v3 = C::next_virtual_xreg(ctx)
  let v4 = @riscv.RvAsm::ThAddsl(rd=v3, rs1=arg0, rs2=arg1, shift=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 497.
  return v3
}

// Generated as internal constructor for term rv_th_flurd.
pub fn constructor_rv_th_flurd[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : Int
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::ThFlurd(rd=v3, rs1=arg0, rs2=arg1, shift=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 503.
  return v3
}

// Generated as internal constructor for term rv_th_fsurd.
pub fn constructor_rv_th_fsurd[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Reg,
  arg3 : Int
) -> Unit {
  let v4 = @riscv.RvAsm::ThFsurd(rd=arg0, rs1=arg1, rs2=arg2, shift=arg3)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 509.
  return v5
}

// Generated as internal constructor for term rv_th_lurd.
pub fn constructor_rv_th_lurd[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : Int
) -> @riscv.Reg {
  let v3 = C::next_virtual_xreg(ctx)
  let v4 = @riscv.RvAsm::ThLurd(rd=v3, rs1=arg0, rs2=arg1, shift=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 512.
  return v3
}

// Generated as internal constructor for term rv_th_surd.
pub fn constructor_rv_th_surd[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Reg,
  arg3 : Int
) -> Unit {
  let v4 = @riscv.RvAsm::ThSurd(rd=arg0, rs1=arg1, rs2=arg2, shift=arg3)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 518.
  return v5
}

// Generated as internal constructor for term rv_th_lurw.
pub fn constructor_rv_th_lurw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : Int
) -> @riscv.Reg {
  let v3 = C::next_virtual_xreg(ctx)
  let v4 = @riscv.RvAsm::ThLurw(rd=v3, rs1=arg0, rs2=arg1, shift=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 521.
  return v3
}

// Generated as internal constructor for term rv_th_surw.
pub fn constructor_rv_th_surw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Reg,
  arg3 : Int
) -> Unit {
  let v4 = @riscv.RvAsm::ThSurw(rd=arg0, rs1=arg1, rs2=arg2, shift=arg3)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 527.
  return v5
}

// Generated as internal constructor for term rv_lwsym.
pub fn constructor_rv_lwsym[C : Context](
  ctx : C,
  arg0 : @riscv.Label
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::LwSym(rd=v1, l=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 530.
  return v1
}

// Generated as internal constructor for term rv_ldsym.
pub fn constructor_rv_ldsym[C : Context](
  ctx : C,
  arg0 : @riscv.Label
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::LdSym(rd=v1, l=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 536.
  return v1
}

// Generated as internal constructor for term rv_fldsym.
pub fn constructor_rv_fldsym[C : Context](
  ctx : C,
  arg0 : @riscv.Label,
  arg1 : @riscv.Reg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FldSym(rd=v2, l=arg0, rt=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 542.
  return v2
}

// Generated as internal constructor for term rv_la.
pub fn constructor_rv_la[C : Context](
  ctx : C,
  arg0 : @riscv.Label
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::La(rd=v1, l=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 548.
  return v1
}

// Generated as internal constructor for term rv_li.
pub fn constructor_rv_li[C : Context](ctx : C, arg0 : String) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Li(rd=v1, i=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 554.
  return v1
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Neg(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 560.
  return v1
}

// Generated as internal constructor for term rv_fneg_d.
pub fn constructor_rv_fneg_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FnegD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 566.
  return v1
}

// Generated as internal constructor for term rv_mv.
pub fn constructor_rv_mv[C : Context](ctx : C, arg0 : @riscv.Reg) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Mv(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 572.
  return v1
}

// Generated as internal constructor for term rv_fmv_d.
pub fn constructor_rv_fmv_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FmvD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 578.
  return v1
}

// Generated as internal constructor for term rv_mv_to.
pub fn constructor_rv_mv_to[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> Unit {
  let v2 = @riscv.RvAsm::Mv(rd=arg0, rs=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 584.
  return v3
}

// Generated as internal constructor for term rv_fmv_to.
pub fn constructor_rv_fmv_to[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> Unit {
  let v2 = @riscv.RvAsm::FmvD(rd=arg0, rs=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 587.
  return v3
}

// Generated as internal constructor for term rv_fmv_dx_to.
pub fn constructor_rv_fmv_dx_to[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.Reg
) -> Unit {
  let v2 = @riscv.RvAsm::FmvDX(rd=arg0, rs=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 590.
  return v3
}

// Generated as internal constructor for term rv_andi_to.
pub fn constructor_rv_andi_to[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : Int
) -> Unit {
  let v3 = @riscv.RvAsm::Andi(rd=arg0, rs1=arg1, imm=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 593.
  return v4
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j[C : Context](ctx : C, arg0 : @riscv.Label) -> Unit {
  let v1 = @riscv.RvAsm::J(target=arg0)
  let v2 = C::emit_risc_v(ctx, v1)
  // Rule at src/riscv/riscv.isle line 596.
  return v2
}

// Generated as internal constructor for term rv_jalr.
pub fn constructor_rv_jalr[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int,
  arg2 : Int
) -> Unit {
  let v3 = @riscv.RvAsm::Jalr(target=arg0, num_xregs=arg1, num_fregs=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 599.
  return v4
}

// Generated as internal constructor for term rv_jr.
pub fn constructor_rv_jr[C : Context](ctx : C, arg0 : @riscv.Reg) -> Unit {
  let v1 = @riscv.RvAsm::Jr(target=arg0)
  let v2 = C::emit_risc_v(ctx, v1)
  // Rule at src/riscv/riscv.isle line 602.
  return v2
}

// Generated as internal constructor for term rv_call.
pub fn constructor_rv_call[C : Context](
  ctx : C,
  arg0 : @riscv.Label,
  arg1 : Int,
  arg2 : Int
) -> Unit {
  let v3 = @riscv.RvAsm::Call(target=arg0, num_xregs=arg1, num_fregs=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 605.
  return v4
}

// Generated as internal constructor for term rv_xret.
pub fn constructor_rv_xret[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::XRet)
  // Rule at src/riscv/riscv.isle line 608.
  return v1
}

// Generated as internal constructor for term rv_fret.
pub fn constructor_rv_fret[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::FRet)
  // Rule at src/riscv/riscv.isle line 611.
  return v1
}

// Generated as internal constructor for term rv_save_ctx1.
pub fn constructor_rv_save_ctx1[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::SaveCtx1)
  // Rule at src/riscv/riscv.isle line 614.
  return v1
}

// Generated as internal constructor for term rv_restore_ctx1.
pub fn constructor_rv_restore_ctx1[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::RestoreCtx1)
  // Rule at src/riscv/riscv.isle line 617.
  return v1
}

// Generated as internal constructor for term rv_save_ctx2.
pub fn constructor_rv_save_ctx2[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::SaveCtx2)
  // Rule at src/riscv/riscv.isle line 620.
  return v1
}

// Generated as internal constructor for term rv_restore_ctx2.
pub fn constructor_rv_restore_ctx2[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::RestoreCtx2)
  // Rule at src/riscv/riscv.isle line 623.
  return v1
}

// Generated as internal constructor for term lower_imm.
pub fn constructor_lower_imm[C : Context](
  ctx : C,
  arg0 : @core.Type,
  arg1 : UInt64
) -> @riscv.RegPack {
  match arg0 {
    @core.Type::Int32 => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v10 = C::xreg_to_reg(ctx, v2)
          // Rule at src/lower/riscv/lower.isle line 11.
          return v10
        }
        _ => ()
      }
      let v11 = constructor_ty_int32(ctx)
      let v12 = C::i64_sext_u64(ctx, v11, arg1)
      let v13 = C::imm64_to_string(ctx, v12)
      let v14 = constructor_rv_li(ctx, v13)
      let v15 = C::xreg_to_reg(ctx, v14)
      // Rule at src/lower/riscv/lower.isle line 17.
      return v15
    }
    @core.Type::Int64 => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v10 = C::xreg_to_reg(ctx, v2)
          // Rule at src/lower/riscv/lower.isle line 14.
          return v10
        }
        _ => ()
      }
      let v5 = constructor_ty_int64(ctx)
      let v16 = C::i64_sext_u64(ctx, v5, arg1)
      let v17 = C::imm64_to_string(ctx, v16)
      let v18 = constructor_rv_li(ctx, v17)
      let v19 = C::xreg_to_reg(ctx, v18)
      // Rule at src/lower/riscv/lower.isle line 21.
      return v19
    }
    @core.Type::Double => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v3 = constructor_rv_fmv_dx(ctx, v2)
          let v4 = C::freg_to_reg(ctx, v3)
          // Rule at src/lower/riscv/lower.isle line 4.
          return v4
        }
        _ => ()
      }
      let v5 = constructor_ty_int64(ctx)
      let v6 = constructor_lower_imm(ctx, v5, arg1)
      let v7 = C::xreg_new(ctx, v6)
      let v8 = constructor_rv_fmv_dx(ctx, v7)
      let v9 = C::freg_to_reg(ctx, v8)
      // Rule at src/lower/riscv/lower.isle line 7.
      return v9
    }
    _ => ()
  }
  abort(
    "no rule matched for term lower_imm at src/lower/riscv/lower.isle line 2; should it be partial?",
  )
}

// Generated as internal constructor for term lower_value.
pub fn constructor_lower_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.RegPack {
  match arg0 {
    @core.Value::Unit => {
      let v1 = constructor_ty_int32(ctx)
      let v3 = C::lower_recent_imm(ctx, v1, 0x0)
      // Rule at src/lower/riscv/lower.isle line 49.
      return v3
    }
    @core.Value::Bool(val=v4) =>
      match v4 {
        true => {
          let v1 = constructor_ty_int32(ctx)
          let v6 = C::lower_recent_imm(ctx, v1, 0x1)
          // Rule at src/lower/riscv/lower.isle line 52.
          return v6
        }
        false => {
          let v1 = constructor_ty_int32(ctx)
          let v3 = C::lower_recent_imm(ctx, v1, 0x0)
          // Rule at src/lower/riscv/lower.isle line 55.
          return v3
        }
        _ => ()
      }
    @core.Value::Double(val=v14) => {
      let v15 = constructor_ty_double(ctx)
      let v16 = C::f64_as_u64(ctx, v14)
      let v17 = C::lower_recent_imm(ctx, v15, v16)
      // Rule at src/lower/riscv/lower.isle line 64.
      return v17
    }
    @core.Value::Int32(val=v7) => {
      let v1 = constructor_ty_int32(ctx)
      let v8 = C::i32_as_u64(ctx, v7)
      let v9 = C::lower_recent_imm(ctx, v1, v8)
      // Rule at src/lower/riscv/lower.isle line 58.
      return v9
    }
    @core.Value::Int64(val=v10) => {
      let v11 = constructor_ty_int64(ctx)
      let v12 = C::i64_as_u64(ctx, v10)
      let v13 = C::lower_recent_imm(ctx, v11, v12)
      // Rule at src/lower/riscv/lower.isle line 61.
      return v13
    }
    @core.Value::Fn(fref=v18) => {
      let v19 = C::lower_load_fn(ctx, v18)
      // Rule at src/lower/riscv/lower.isle line 67.
      return v19
    }
    @core.Value::Self(fref=v20) => {
      let v21 = C::closure_reg(ctx)
      let v22 = C::xreg_to_reg(ctx, v21)
      // Rule at src/lower/riscv/lower.isle line 70.
      return v22
    }
    _ => ()
  }
  let v23 = C::put_in_reg(ctx, arg0)
  // Rule at src/lower/riscv/lower.isle line 73.
  return v23
}

// Generated as internal constructor for term lower_x_value.
pub fn constructor_lower_x_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.Reg {
  let v1 = constructor_lower_value(ctx, arg0)
  let v2 = C::xreg_new(ctx, v1)
  // Rule at src/lower/riscv/lower.isle line 32.
  return v2
}

// Generated as internal constructor for term lower_f_value.
pub fn constructor_lower_f_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.FReg {
  let v1 = constructor_lower_value(ctx, arg0)
  let v2 = C::freg_new(ctx, v1)
  // Rule at src/lower/riscv/lower.isle line 36.
  return v2
}

// Generated as internal constructor for term lower_control.
pub fn constructor_lower_control[C : Context](
  ctx : C,
  arg0 : @lower.ColorSeq,
  arg1 : @core.Control
) -> Unit? {
  match arg1 {
    @core.Control::Jump(target=v7, args=v8) => {
      let v13 = C::target_color(ctx, v7)
      if arg0 == v13.0 {
        let v16 = C::emit_block_parameters(ctx, v13.1, v8)
        let v17 = Some(v16)
        // Rule at src/lower/riscv/lower.isle line 107.
        return v17
      }
      let v9 = C::emit_block_parameters(ctx, v7, v8)
      let v10 = C::block_label(ctx, v7)
      let v11 = constructor_rv_j(ctx, v10)
      let v12 = Some(v11)
      // Rule at src/lower/riscv/lower.isle line 103.
      return v12
    }
    @core.Control::Return(args=v18) => {
      let v19 = C::values_to_args(ctx, v18)
      match v19 {
        Some(v20) =>
          match v20 {
            Args::Args1(arg1=v27) => {
              let v28 = C::has_type(ctx, v27)
              match v28.1 {
                @core.Type::Double => {
                  let v31 = constructor_lower_value(ctx, v28.0)
                  let v32 = C::freg_new(ctx, v31)
                  let v33 = C::float_return_reg(ctx)
                  let v34 = constructor_rv_fmv_to(ctx, v33, v32)
                  let v35 = C::emit_fake_epilogue(ctx)
                  let v36 = constructor_rv_fret(ctx)
                  let v37 = Some(v36)
                  // Rule at src/lower/riscv/lower.isle line 115.
                  return v37
                }
                _ => ()
              }
              let v38 = constructor_lower_value(ctx, v27)
              let v39 = C::xreg_new(ctx, v38)
              let v40 = C::return_reg(ctx)
              let v41 = constructor_rv_mv_to(ctx, v40, v39)
              let v35 = C::emit_fake_epilogue(ctx)
              let v42 = constructor_rv_xret(ctx)
              let v43 = Some(v42)
              // Rule at src/lower/riscv/lower.isle line 121.
              return v43
            }
            Args::Args0 => {
              let v21 = C::return_reg(ctx)
              let v22 = C::zero_reg(ctx)
              let v23 = constructor_rv_mv_to(ctx, v21, v22)
              let v24 = C::emit_fake_epilogue(ctx)
              let v25 = constructor_rv_xret(ctx)
              let v26 = Some(v25)
              // Rule at src/lower/riscv/lower.isle line 110.
              return v26
            }
            _ => ()
          }
        _ => ()
      }
    }
    @core.Control::Branch(cond=v44, t=v45, t_args=v46, f=v47, f_args=v48) => {
      match v44 {
        @core.Value::Bool(val=v71) =>
          match v71 {
            true => {
              let v63 = C::target_color(ctx, v45)
              if arg0 == v63.0 {
                let v76 = C::emit_block_parameters(ctx, v63.1, v46)
                let v77 = Some(v76)
                // Rule at src/lower/riscv/lower.isle line 150.
                return v77
              }
              let v72 = C::emit_block_parameters(ctx, v45, v46)
              let v73 = C::block_label(ctx, v45)
              let v74 = constructor_rv_j(ctx, v73)
              let v75 = Some(v74)
              // Rule at src/lower/riscv/lower.isle line 146.
              return v75
            }
            false => {
              let v58 = C::target_color(ctx, v47)
              if arg0 == v58.0 {
                let v79 = C::emit_block_parameters(ctx, v58.1, v48)
                let v80 = Some(v79)
                // Rule at src/lower/riscv/lower.isle line 157.
                return v80
              }
              let v78 = C::emit_block_parameters(ctx, v47, v48)
              let v73 = C::block_label(ctx, v45)
              let v74 = constructor_rv_j(ctx, v73)
              let v75 = Some(v74)
              // Rule at src/lower/riscv/lower.isle line 153.
              return v75
            }
            _ => ()
          }
        @core.Value::Insn(iref=v81) => {
          let v82 = C::ref_insn(ctx, v81)
          match v82 {
            @core.Insn::Op(ty=v83, op=v84, args=v85) =>
              match v83 {
                @core.Type::Bool =>
                  match v84 {
                    @core.Op::Eq => {
                      let v86 = C::values_to_args(ctx, v85)
                      match v86 {
                        Some(v87) =>
                          match v87 {
                            Args::Args2(arg1=v88, arg2=v89) => {
                              let v90 = C::not_double(ctx, v88)
                              match v90 {
                                Some(v91) => {
                                  let v92 = C::not_double(ctx, v89)
                                  match v92 {
                                    Some(v93) => {
                                      let v58 = C::target_color(ctx, v47)
                                      if arg0 == v58.0 {
                                        let v72 = C::emit_block_parameters(
                                          ctx, v45, v46,
                                        )
                                        let v94 = constructor_lower_value(
                                          ctx, v91,
                                        )
                                        let v95 = C::xreg_new(ctx, v94)
                                        let v96 = constructor_lower_value(
                                          ctx, v93,
                                        )
                                        let v97 = C::xreg_new(ctx, v96)
                                        let v98 = C::block_label(ctx, v45)
                                        let v99 = constructor_rv_beq(
                                          ctx, v95, v97, v98,
                                        )
                                        let v108 = C::emit_block_parameters(
                                          ctx,
                                          v58.1,
                                          v48,
                                        )
                                        let v109 = C::emit_block_parameters(
                                          ctx,
                                          v58.1,
                                          v48,
                                        )
                                        let v110 = Some(v109)
                                        // Rule at src/lower/riscv/lower.isle line 184.
                                        return v110
                                      }
                                      let v63 = C::target_color(ctx, v45)
                                      if arg0 == v63.0 {
                                        let v78 = C::emit_block_parameters(
                                          ctx, v47, v48,
                                        )
                                        let v94 = constructor_lower_value(
                                          ctx, v91,
                                        )
                                        let v95 = C::xreg_new(ctx, v94)
                                        let v96 = constructor_lower_value(
                                          ctx, v93,
                                        )
                                        let v97 = C::xreg_new(ctx, v96)
                                        let v104 = C::block_label(ctx, v47)
                                        let v105 = constructor_rv_bne(
                                          ctx, v95, v97, v104,
                                        )
                                        let v106 = C::emit_block_parameters(
                                          ctx,
                                          v63.1,
                                          v46,
                                        )
                                        let v107 = Some(v106)
                                        // Rule at src/lower/riscv/lower.isle line 175.
                                        return v107
                                      }
                                      let v72 = C::emit_block_parameters(
                                        ctx, v45, v46,
                                      )
                                      let v94 = constructor_lower_value(
                                        ctx, v91,
                                      )
                                      let v95 = C::xreg_new(ctx, v94)
                                      let v96 = constructor_lower_value(
                                        ctx, v93,
                                      )
                                      let v97 = C::xreg_new(ctx, v96)
                                      let v98 = C::block_label(ctx, v45)
                                      let v99 = constructor_rv_beq(
                                        ctx, v95, v97, v98,
                                      )
                                      let v100 = C::emit_block_parameters(
                                        ctx, v47, v48,
                                      )
                                      let v101 = C::block_label(ctx, v47)
                                      let v102 = constructor_rv_j(ctx, v101)
                                      let v103 = Some(v102)
                                      // Rule at src/lower/riscv/lower.isle line 165.
                                      return v103
                                    }
                                    _ => ()
                                  }
                                }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        _ => ()
                      }
                    }
                    @core.Op::Le => {
                      let v86 = C::values_to_args(ctx, v85)
                      match v86 {
                        Some(v87) =>
                          match v87 {
                            Args::Args2(arg1=v88, arg2=v89) => {
                              let v90 = C::not_double(ctx, v88)
                              match v90 {
                                Some(v91) => {
                                  let v92 = C::not_double(ctx, v89)
                                  match v92 {
                                    Some(v93) => {
                                      let v58 = C::target_color(ctx, v47)
                                      if arg0 == v58.0 {
                                        let v72 = C::emit_block_parameters(
                                          ctx, v45, v46,
                                        )
                                        let v111 = constructor_lower_value(
                                          ctx, v93,
                                        )
                                        let v112 = C::xreg_new(ctx, v111)
                                        let v113 = constructor_lower_value(
                                          ctx, v91,
                                        )
                                        let v114 = C::xreg_new(ctx, v113)
                                        let v98 = C::block_label(ctx, v45)
                                        let v115 = constructor_rv_bge(
                                          ctx, v112, v114, v98,
                                        )
                                        let v108 = C::emit_block_parameters(
                                          ctx,
                                          v58.1,
                                          v48,
                                        )
                                        let v119 = Some(v108)
                                        // Rule at src/lower/riscv/lower.isle line 216.
                                        return v119
                                      }
                                      let v63 = C::target_color(ctx, v45)
                                      if arg0 == v63.0 {
                                        let v78 = C::emit_block_parameters(
                                          ctx, v47, v48,
                                        )
                                        let v111 = constructor_lower_value(
                                          ctx, v93,
                                        )
                                        let v112 = C::xreg_new(ctx, v111)
                                        let v113 = constructor_lower_value(
                                          ctx, v91,
                                        )
                                        let v114 = C::xreg_new(ctx, v113)
                                        let v104 = C::block_label(ctx, v47)
                                        let v116 = constructor_rv_blt(
                                          ctx, v112, v114, v104,
                                        )
                                        let v106 = C::emit_block_parameters(
                                          ctx,
                                          v63.1,
                                          v46,
                                        )
                                        let v117 = C::emit_block_parameters(
                                          ctx,
                                          v63.1,
                                          v46,
                                        )
                                        let v118 = Some(v117)
                                        // Rule at src/lower/riscv/lower.isle line 206.
                                        return v118
                                      }
                                      let v72 = C::emit_block_parameters(
                                        ctx, v45, v46,
                                      )
                                      let v111 = constructor_lower_value(
                                        ctx, v93,
                                      )
                                      let v112 = C::xreg_new(ctx, v111)
                                      let v113 = constructor_lower_value(
                                        ctx, v91,
                                      )
                                      let v114 = C::xreg_new(ctx, v113)
                                      let v98 = C::block_label(ctx, v45)
                                      let v115 = constructor_rv_bge(
                                        ctx, v112, v114, v98,
                                      )
                                      let v100 = C::emit_block_parameters(
                                        ctx, v47, v48,
                                      )
                                      let v101 = C::block_label(ctx, v47)
                                      let v102 = constructor_rv_j(ctx, v101)
                                      let v103 = Some(v102)
                                      // Rule at src/lower/riscv/lower.isle line 196.
                                      return v103
                                    }
                                    _ => ()
                                  }
                                }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            _ => ()
          }
        }
        _ => ()
      }
      let v63 = C::target_color(ctx, v45)
      if arg0 == v63.0 {
        let v49 = constructor_lower_value(ctx, v44)
        let v50 = C::xreg_new(ctx, v49)
        let v66 = C::emit_block_parameters(ctx, v47, v48)
        let v67 = C::block_label(ctx, v47)
        let v68 = constructor_rv_beqz(ctx, v50, v67)
        let v69 = C::emit_block_parameters(ctx, v63.1, v46)
        let v70 = Some(v69)
        // Rule at src/lower/riscv/lower.isle line 140.
        return v70
      }
      let v58 = C::target_color(ctx, v47)
      if arg0 == v58.0 {
        let v49 = constructor_lower_value(ctx, v44)
        let v50 = C::xreg_new(ctx, v49)
        let v51 = C::emit_block_parameters(ctx, v45, v46)
        let v52 = C::block_label(ctx, v45)
        let v53 = constructor_rv_bnez(ctx, v50, v52)
        let v61 = C::emit_block_parameters(ctx, v58.1, v48)
        let v62 = Some(v61)
        // Rule at src/lower/riscv/lower.isle line 134.
        return v62
      }
      let v49 = constructor_lower_value(ctx, v44)
      let v50 = C::xreg_new(ctx, v49)
      let v51 = C::emit_block_parameters(ctx, v45, v46)
      let v52 = C::block_label(ctx, v45)
      let v53 = constructor_rv_bnez(ctx, v50, v52)
      let v54 = C::emit_block_parameters(ctx, v47, v48)
      let v55 = C::block_label(ctx, v47)
      let v56 = constructor_rv_j(ctx, v55)
      let v57 = Some(v56)
      // Rule at src/lower/riscv/lower.isle line 127.
      return v57
    }
    @core.Control::Select(cond=v2, targets=v3, fallback=v4) => {
      let v5 = C::lower_select(ctx, arg1)
      let v6 = Some(v5)
      // Rule at src/lower/riscv/lower.isle line 100.
      return v6
    }
    _ => ()
  }
  None
}

// Generated as internal constructor for term lower.
pub fn constructor_lower[C : Context](
  ctx : C,
  arg0 : @core.Insn
) -> @riscv.RegPack? {
  match arg0 {
    @core.Insn::Op(ty=v1, op=v2, args=v3) =>
      match v1 {
        @core.Type::Bool =>
          match v2 {
            @core.Op::Lnot => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Bool => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v113 = C::xreg_new(ctx, v112)
                          let v119 = constructor_rv_sltiu(ctx, v113, 0x1)
                          let v120 = C::xreg_to_reg(ctx, v119)
                          let v121 = C::mark_maybe_aliased(ctx, v120)
                          let v122 = Some(v121)
                          // Rule at src/lower/riscv/lower.isle line 312.
                          return v122
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Eq => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v123 = constructor_rv_xor(ctx, v15, v17)
                              let v124 = constructor_rv_sltiu(ctx, v123, 0x1)
                              let v125 = C::xreg_to_reg(ctx, v124)
                              let v126 = C::mark_maybe_aliased(ctx, v125)
                              let v127 = Some(v126)
                              // Rule at src/lower/riscv/lower.isle line 318.
                              return v127
                            }
                            _ => ()
                          }
                        }
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v135 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v136 = C::freg_new(ctx, v16)
                              let v247 = constructor_rv_feq_d(ctx, v135, v136)
                              let v248 = C::xreg_to_reg(ctx, v247)
                              let v249 = C::mark_maybe_aliased(ctx, v248)
                              let v250 = Some(v249)
                              // Rule at src/lower/riscv/lower.isle line 415.
                              return v250
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Le => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v31 = constructor_lower_value(ctx, v11.0)
                              let v32 = C::xreg_new(ctx, v31)
                              let v128 = constructor_lower_value(ctx, v8.0)
                              let v129 = C::xreg_new(ctx, v128)
                              let v130 = constructor_rv_slt(ctx, v32, v129)
                              let v131 = constructor_rv_xori(ctx, v130, 0x1)
                              let v132 = C::xreg_to_reg(ctx, v131)
                              let v133 = C::mark_maybe_aliased(ctx, v132)
                              let v134 = Some(v133)
                              // Rule at src/lower/riscv/lower.isle line 324.
                              return v134
                            }
                            _ => ()
                          }
                        }
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v135 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v136 = C::freg_new(ctx, v16)
                              let v251 = constructor_rv_fle_d(ctx, v135, v136)
                              let v252 = C::xreg_to_reg(ctx, v251)
                              let v253 = C::mark_maybe_aliased(ctx, v252)
                              let v254 = Some(v253)
                              // Rule at src/lower/riscv/lower.isle line 418.
                              return v254
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            _ => ()
          }
        @core.Type::Int32 =>
          match v2 {
            @core.Op::Add => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v11 = C::has_type(ctx, v7)
                      match v11.1 {
                        @core.Type::Int32 => {
                          let v29 = C::imm12_from_val(ctx, v6)
                          match v29 {
                            Some(v30) => {
                              let v31 = constructor_lower_value(ctx, v11.0)
                              let v32 = C::xreg_new(ctx, v31)
                              let v33 = C::imm12_to_i32(ctx, v30)
                              let v34 = constructor_rv_addi(ctx, v32, v33)
                              let v35 = C::xreg_to_reg(ctx, v34)
                              let v36 = C::mark_maybe_aliased(ctx, v35)
                              let v37 = Some(v36)
                              // Rule at src/lower/riscv/lower.isle line 238.
                              return v37
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v22 = C::imm12_from_val(ctx, v7)
                          match v22 {
                            Some(v23) => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v24 = C::imm12_to_i32(ctx, v23)
                              let v25 = constructor_rv_addi(ctx, v15, v24)
                              let v26 = C::xreg_to_reg(ctx, v25)
                              let v27 = C::mark_maybe_aliased(ctx, v26)
                              let v28 = Some(v27)
                              // Rule at src/lower/riscv/lower.isle line 235.
                              return v28
                            }
                            _ => ()
                          }
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v18 = constructor_rv_add(ctx, v15, v17)
                              let v19 = C::xreg_to_reg(ctx, v18)
                              let v20 = C::mark_maybe_aliased(ctx, v19)
                              let v21 = Some(v20)
                              // Rule at src/lower/riscv/lower.isle line 232.
                              return v21
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Sub => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v77 = C::insn_once(ctx, v11.0)
                              match v77 {
                                Some(v78) => {
                                  let v79 = C::ref_insn(ctx, v78)
                                  match v79 {
                                    @core.Insn::Op(ty=v80, op=v81, args=v82) =>
                                      match v80 {
                                        @core.Type::Int32 =>
                                          match v81 {
                                            @core.Op::Mul => {
                                              let v83 = C::values_to_args(
                                                ctx, v82,
                                              )
                                              match v83 {
                                                Some(v84) =>
                                                  match v84 {
                                                    Args::Args2(
                                                      arg1=v85,
                                                      arg2=v86
                                                    ) => {
                                                      let v87 = C::insn_once(
                                                        ctx, v85,
                                                      )
                                                      match v87 {
                                                        Some(v88) => {
                                                          let v89 = C::ref_insn(
                                                            ctx, v88,
                                                          )
                                                          match v89 {
                                                            @core.Insn::Op(
                                                              ty=v90,
                                                              op=v91,
                                                              args=v92
                                                            ) =>
                                                              match v90 {
                                                                @core.Type::Int32 =>
                                                                  match v91 {
                                                                    @core.Op::Div => {
                                                                      let v93 = C::values_to_args(
                                                                        ctx, v92,
                                                                      )
                                                                      match
                                                                        v93 {
                                                                        Some(
                                                                          v94
                                                                        ) =>
                                                                          match
                                                                            v94 {
                                                                            Args::Args2(
                                                                              arg1=v95,
                                                                              arg2=v96
                                                                            ) => {
                                                                              let v97 = C::has_type(
                                                                                ctx,
                                                                                v95,
                                                                              )
                                                                              match
                                                                                v97.1 {
                                                                                @core.Type::Int32 => {
                                                                                  let v100 = C::has_type(
                                                                                    ctx,
                                                                                    v96,
                                                                                  )
                                                                                  match
                                                                                    v100.1 {
                                                                                    @core.Type::Int32 => {
                                                                                      let v103 = C::has_type(
                                                                                        ctx,
                                                                                        v86,
                                                                                      )
                                                                                      match
                                                                                        v103.1 {
                                                                                        @core.Type::Int32 =>
                                                                                          if v8.0 ==
                                                                                            v97.0 {
                                                                                            if v100.0 ==
                                                                                              v103.0 {
                                                                                              let v106 = constructor_lower_mod(
                                                                                                ctx,
                                                                                                v8.0,
                                                                                                v100.0,
                                                                                              )
                                                                                              let v107 = Some(
                                                                                                v106,
                                                                                              )
                                                                                              // Rule at src/lower/riscv/lower.isle line 283.
                                                                                              return v107
                                                                                            }
                                                                                          }
                                                                                        _ =>
                                                                                          ()
                                                                                      }
                                                                                    }
                                                                                    _ =>
                                                                                      ()
                                                                                  }
                                                                                }
                                                                                _ =>
                                                                                  ()
                                                                              }
                                                                            }
                                                                            _ =>
                                                                              ()
                                                                          }
                                                                        _ => ()
                                                                      }
                                                                    }
                                                                    _ => ()
                                                                  }
                                                                _ => ()
                                                              }
                                                            _ => ()
                                                          }
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                _ => ()
                                              }
                                            }
                                            _ => ()
                                          }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                          let v42 = C::imm12_from_neg_val(ctx, v7)
                          match v42 {
                            Some(v43) => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v44 = C::imm12_to_i32(ctx, v43)
                              let v45 = constructor_rv_addi(ctx, v15, v44)
                              let v46 = C::xreg_to_reg(ctx, v45)
                              let v47 = C::mark_maybe_aliased(ctx, v46)
                              let v48 = Some(v47)
                              // Rule at src/lower/riscv/lower.isle line 247.
                              return v48
                            }
                            _ => ()
                          }
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v38 = constructor_rv_sub(ctx, v15, v17)
                              let v39 = C::xreg_to_reg(ctx, v38)
                              let v40 = C::mark_maybe_aliased(ctx, v39)
                              let v41 = Some(v40)
                              // Rule at src/lower/riscv/lower.isle line 244.
                              return v41
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Mul => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v11 = C::has_type(ctx, v7)
                      match v11.1 {
                        @core.Type::Int32 => {
                          let v59 = C::power_of_two(ctx, v6)
                          match v59 {
                            Some(v60) =>
                              match v60 {
                                0x0 => {
                                  let v31 = constructor_lower_value(ctx, v11.0)
                                  let v67 = C::mark_maybe_aliased(ctx, v31)
                                  let v68 = Some(v67)
                                  // Rule at src/lower/riscv/lower.isle line 268.
                                  return v68
                                }
                                _ => ()
                              }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v53 = C::power_of_two(ctx, v7)
                          match v53 {
                            Some(v54) =>
                              match v54 {
                                0x0 => {
                                  let v14 = constructor_lower_value(ctx, v8.0)
                                  let v65 = C::mark_maybe_aliased(ctx, v14)
                                  let v66 = Some(v65)
                                  // Rule at src/lower/riscv/lower.isle line 265.
                                  return v66
                                }
                                _ => ()
                              }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      match v11.1 {
                        @core.Type::Int32 => {
                          let v59 = C::power_of_two(ctx, v6)
                          match v59 {
                            Some(v60) => {
                              let v31 = constructor_lower_value(ctx, v11.0)
                              let v32 = C::xreg_new(ctx, v31)
                              let v61 = constructor_rv_slli(ctx, v32, v60)
                              let v62 = C::xreg_to_reg(ctx, v61)
                              let v63 = C::mark_maybe_aliased(ctx, v62)
                              let v64 = Some(v63)
                              // Rule at src/lower/riscv/lower.isle line 262.
                              return v64
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v53 = C::power_of_two(ctx, v7)
                          match v53 {
                            Some(v54) => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v55 = constructor_rv_slli(ctx, v15, v54)
                              let v56 = C::xreg_to_reg(ctx, v55)
                              let v57 = C::mark_maybe_aliased(ctx, v56)
                              let v58 = Some(v57)
                              // Rule at src/lower/riscv/lower.isle line 259.
                              return v58
                            }
                            _ => ()
                          }
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v49 = constructor_rv_mul(ctx, v15, v17)
                              let v50 = C::xreg_to_reg(ctx, v49)
                              let v51 = C::mark_maybe_aliased(ctx, v50)
                              let v52 = Some(v51)
                              // Rule at src/lower/riscv/lower.isle line 256.
                              return v52
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Div => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v53 = C::power_of_two(ctx, v7)
                          match v53 {
                            Some(v54) => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v73 = constructor_rv_srai(ctx, v15, v54)
                              let v74 = C::xreg_to_reg(ctx, v73)
                              let v75 = C::mark_maybe_aliased(ctx, v74)
                              let v76 = Some(v75)
                              // Rule at src/lower/riscv/lower.isle line 276.
                              return v76
                            }
                            _ => ()
                          }
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v69 = constructor_rv_div(ctx, v15, v17)
                              let v70 = C::xreg_to_reg(ctx, v69)
                              let v71 = C::mark_maybe_aliased(ctx, v70)
                              let v72 = Some(v71)
                              // Rule at src/lower/riscv/lower.isle line 273.
                              return v72
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Neg => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Int32 => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v113 = C::xreg_new(ctx, v112)
                          let v114 = constructor_rv_neg(ctx, v113)
                          let v115 = C::xreg_to_reg(ctx, v114)
                          let v116 = C::mark_maybe_aliased(ctx, v115)
                          let v117 = Some(v116)
                          // Rule at src/lower/riscv/lower.isle line 306.
                          return v117
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::D2I(rm=v242) => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Double => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v225 = C::freg_new(ctx, v112)
                          let v243 = constructor_rv_fcvt_w_d(ctx, v225, v242)
                          let v244 = C::xreg_to_reg(ctx, v243)
                          let v245 = C::mark_maybe_aliased(ctx, v244)
                          let v246 = Some(v245)
                          // Rule at src/lower/riscv/lower.isle line 410.
                          return v246
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            _ => ()
          }
        @core.Type::Double =>
          match v2 {
            @core.Op::Add => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v187 = C::insn_once(ctx, v7)
                          match v187 {
                            Some(v188) => {
                              let v189 = C::ref_insn(ctx, v188)
                              match v189 {
                                @core.Insn::Op(ty=v190, op=v191, args=v192) =>
                                  match v190 {
                                    @core.Type::Double =>
                                      match v191 {
                                        @core.Op::Mul => {
                                          let v193 = C::values_to_args(
                                            ctx, v192,
                                          )
                                          match v193 {
                                            Some(v194) =>
                                              match v194 {
                                                Args::Args2(
                                                  arg1=v195,
                                                  arg2=v196
                                                ) => {
                                                  let v197 = C::has_type(
                                                    ctx, v195,
                                                  )
                                                  match v197.1 {
                                                    @core.Type::Double => {
                                                      let v200 = C::has_type(
                                                        ctx, v196,
                                                      )
                                                      match v200.1 {
                                                        @core.Type::Double => {
                                                          let v203 = constructor_lower_value(
                                                            ctx,
                                                            v197.0,
                                                          )
                                                          let v204 = C::freg_new(
                                                            ctx, v203,
                                                          )
                                                          let v205 = constructor_lower_value(
                                                            ctx,
                                                            v200.0,
                                                          )
                                                          let v206 = C::freg_new(
                                                            ctx, v205,
                                                          )
                                                          let v207 = constructor_lower_value(
                                                            ctx,
                                                            v8.0,
                                                          )
                                                          let v208 = C::freg_new(
                                                            ctx, v207,
                                                          )
                                                          let v209 = constructor_rv_fmadd_d(
                                                            ctx, v204, v206, v208,
                                                          )
                                                          let v210 = C::freg_to_reg(
                                                            ctx, v209,
                                                          )
                                                          let v211 = C::mark_maybe_aliased(
                                                            ctx, v210,
                                                          )
                                                          let v212 = Some(v211)
                                                          // Rule at src/lower/riscv/lower.isle line 364.
                                                          return v212
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                }
                                                _ => ()
                                              }
                                            _ => ()
                                          }
                                        }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      let v11 = C::has_type(ctx, v7)
                      match v11.1 {
                        @core.Type::Double => {
                          let v161 = C::insn_once(ctx, v6)
                          match v161 {
                            Some(v162) => {
                              let v163 = C::ref_insn(ctx, v162)
                              match v163 {
                                @core.Insn::Op(ty=v164, op=v165, args=v166) =>
                                  match v164 {
                                    @core.Type::Double =>
                                      match v165 {
                                        @core.Op::Mul => {
                                          let v167 = C::values_to_args(
                                            ctx, v166,
                                          )
                                          match v167 {
                                            Some(v168) =>
                                              match v168 {
                                                Args::Args2(
                                                  arg1=v169,
                                                  arg2=v170
                                                ) => {
                                                  let v171 = C::has_type(
                                                    ctx, v169,
                                                  )
                                                  match v171.1 {
                                                    @core.Type::Double => {
                                                      let v174 = C::has_type(
                                                        ctx, v170,
                                                      )
                                                      match v174.1 {
                                                        @core.Type::Double => {
                                                          let v177 = constructor_lower_value(
                                                            ctx,
                                                            v171.0,
                                                          )
                                                          let v178 = C::freg_new(
                                                            ctx, v177,
                                                          )
                                                          let v179 = constructor_lower_value(
                                                            ctx,
                                                            v174.0,
                                                          )
                                                          let v180 = C::freg_new(
                                                            ctx, v179,
                                                          )
                                                          let v181 = constructor_lower_value(
                                                            ctx,
                                                            v11.0,
                                                          )
                                                          let v182 = C::freg_new(
                                                            ctx, v181,
                                                          )
                                                          let v183 = constructor_rv_fmadd_d(
                                                            ctx, v178, v180, v182,
                                                          )
                                                          let v184 = C::freg_to_reg(
                                                            ctx, v183,
                                                          )
                                                          let v185 = C::mark_maybe_aliased(
                                                            ctx, v184,
                                                          )
                                                          let v186 = Some(v185)
                                                          // Rule at src/lower/riscv/lower.isle line 357.
                                                          return v186
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                }
                                                _ => ()
                                              }
                                            _ => ()
                                          }
                                        }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                          match v8.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v135 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v136 = C::freg_new(ctx, v16)
                              let v137 = constructor_rv_fadd_d(ctx, v135, v136)
                              let v138 = C::freg_to_reg(ctx, v137)
                              let v139 = C::mark_maybe_aliased(ctx, v138)
                              let v140 = Some(v139)
                              // Rule at src/lower/riscv/lower.isle line 331.
                              return v140
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Sub => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v187 = C::insn_once(ctx, v7)
                          match v187 {
                            Some(v188) => {
                              let v189 = C::ref_insn(ctx, v188)
                              match v189 {
                                @core.Insn::Op(ty=v190, op=v191, args=v192) =>
                                  match v190 {
                                    @core.Type::Double =>
                                      match v191 {
                                        @core.Op::Mul => {
                                          let v193 = C::values_to_args(
                                            ctx, v192,
                                          )
                                          match v193 {
                                            Some(v194) =>
                                              match v194 {
                                                Args::Args2(
                                                  arg1=v195,
                                                  arg2=v196
                                                ) => {
                                                  let v197 = C::has_type(
                                                    ctx, v195,
                                                  )
                                                  match v197.1 {
                                                    @core.Type::Double => {
                                                      let v200 = C::has_type(
                                                        ctx, v196,
                                                      )
                                                      match v200.1 {
                                                        @core.Type::Double => {
                                                          let v203 = constructor_lower_value(
                                                            ctx,
                                                            v197.0,
                                                          )
                                                          let v204 = C::freg_new(
                                                            ctx, v203,
                                                          )
                                                          let v205 = constructor_lower_value(
                                                            ctx,
                                                            v200.0,
                                                          )
                                                          let v206 = C::freg_new(
                                                            ctx, v205,
                                                          )
                                                          let v207 = constructor_lower_value(
                                                            ctx,
                                                            v8.0,
                                                          )
                                                          let v208 = C::freg_new(
                                                            ctx, v207,
                                                          )
                                                          let v217 = constructor_rv_fnmsub_d(
                                                            ctx, v204, v206, v208,
                                                          )
                                                          let v218 = C::freg_to_reg(
                                                            ctx, v217,
                                                          )
                                                          let v219 = C::mark_maybe_aliased(
                                                            ctx, v218,
                                                          )
                                                          let v220 = Some(v219)
                                                          // Rule at src/lower/riscv/lower.isle line 378.
                                                          return v220
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                }
                                                _ => ()
                                              }
                                            _ => ()
                                          }
                                        }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      let v11 = C::has_type(ctx, v7)
                      match v11.1 {
                        @core.Type::Double => {
                          let v161 = C::insn_once(ctx, v6)
                          match v161 {
                            Some(v162) => {
                              let v163 = C::ref_insn(ctx, v162)
                              match v163 {
                                @core.Insn::Op(ty=v164, op=v165, args=v166) =>
                                  match v164 {
                                    @core.Type::Double =>
                                      match v165 {
                                        @core.Op::Mul => {
                                          let v167 = C::values_to_args(
                                            ctx, v166,
                                          )
                                          match v167 {
                                            Some(v168) =>
                                              match v168 {
                                                Args::Args2(
                                                  arg1=v169,
                                                  arg2=v170
                                                ) => {
                                                  let v171 = C::has_type(
                                                    ctx, v169,
                                                  )
                                                  match v171.1 {
                                                    @core.Type::Double => {
                                                      let v174 = C::has_type(
                                                        ctx, v170,
                                                      )
                                                      match v174.1 {
                                                        @core.Type::Double => {
                                                          let v177 = constructor_lower_value(
                                                            ctx,
                                                            v171.0,
                                                          )
                                                          let v178 = C::freg_new(
                                                            ctx, v177,
                                                          )
                                                          let v179 = constructor_lower_value(
                                                            ctx,
                                                            v174.0,
                                                          )
                                                          let v180 = C::freg_new(
                                                            ctx, v179,
                                                          )
                                                          let v181 = constructor_lower_value(
                                                            ctx,
                                                            v11.0,
                                                          )
                                                          let v182 = C::freg_new(
                                                            ctx, v181,
                                                          )
                                                          let v213 = constructor_rv_fmsub_d(
                                                            ctx, v178, v180, v182,
                                                          )
                                                          let v214 = C::freg_to_reg(
                                                            ctx, v213,
                                                          )
                                                          let v215 = C::mark_maybe_aliased(
                                                            ctx, v214,
                                                          )
                                                          let v216 = Some(v215)
                                                          // Rule at src/lower/riscv/lower.isle line 371.
                                                          return v216
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                }
                                                _ => ()
                                              }
                                            _ => ()
                                          }
                                        }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                          match v8.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v135 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v136 = C::freg_new(ctx, v16)
                              let v141 = constructor_rv_fsub_d(ctx, v135, v136)
                              let v142 = C::freg_to_reg(ctx, v141)
                              let v143 = C::mark_maybe_aliased(ctx, v142)
                              let v144 = Some(v143)
                              // Rule at src/lower/riscv/lower.isle line 337.
                              return v144
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Mul => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              match v11.0 {
                                @core.Value::Double(val=v155) =>
                                  match v155 {
                                    0x2 => {
                                      let v14 = constructor_lower_value(
                                        ctx,
                                        v8.0,
                                      )
                                      let v135 = C::freg_new(ctx, v14)
                                      let v128 = constructor_lower_value(
                                        ctx,
                                        v8.0,
                                      )
                                      let v156 = C::freg_new(ctx, v128)
                                      let v157 = constructor_rv_fadd_d(
                                        ctx, v135, v156,
                                      )
                                      let v158 = C::freg_to_reg(ctx, v157)
                                      let v159 = C::mark_maybe_aliased(
                                        ctx, v158,
                                      )
                                      let v160 = Some(v159)
                                      // Rule at src/lower/riscv/lower.isle line 349.
                                      return v160
                                    }
                                    _ => ()
                                  }
                                _ => ()
                              }
                              match v8.0 {
                                @core.Value::Double(val=v149) =>
                                  match v149 {
                                    0x2 => {
                                      let v31 = constructor_lower_value(
                                        ctx,
                                        v11.0,
                                      )
                                      let v150 = C::freg_new(ctx, v31)
                                      let v16 = constructor_lower_value(
                                        ctx,
                                        v11.0,
                                      )
                                      let v136 = C::freg_new(ctx, v16)
                                      let v151 = constructor_rv_fadd_d(
                                        ctx, v150, v136,
                                      )
                                      let v152 = C::freg_to_reg(ctx, v151)
                                      let v153 = C::mark_maybe_aliased(
                                        ctx, v152,
                                      )
                                      let v154 = Some(v153)
                                      // Rule at src/lower/riscv/lower.isle line 346.
                                      return v154
                                    }
                                    _ => ()
                                  }
                                _ => ()
                              }
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v135 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v136 = C::freg_new(ctx, v16)
                              let v145 = constructor_rv_fmul_d(ctx, v135, v136)
                              let v146 = C::freg_to_reg(ctx, v145)
                              let v147 = C::mark_maybe_aliased(ctx, v146)
                              let v148 = Some(v147)
                              // Rule at src/lower/riscv/lower.isle line 343.
                              return v148
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Div => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v135 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v136 = C::freg_new(ctx, v16)
                              let v221 = constructor_rv_fdiv_d(ctx, v135, v136)
                              let v222 = C::freg_to_reg(ctx, v221)
                              let v223 = C::mark_maybe_aliased(ctx, v222)
                              let v224 = Some(v223)
                              // Rule at src/lower/riscv/lower.isle line 386.
                              return v224
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Neg => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Double => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v225 = C::freg_new(ctx, v112)
                          let v226 = constructor_rv_fneg_d(ctx, v225)
                          let v227 = C::freg_to_reg(ctx, v226)
                          let v228 = C::mark_maybe_aliased(ctx, v227)
                          let v229 = Some(v228)
                          // Rule at src/lower/riscv/lower.isle line 392.
                          return v229
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::I2D => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Int32 => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v113 = C::xreg_new(ctx, v112)
                          let v238 = constructor_rv_fcvt_d_w(ctx, v113)
                          let v239 = C::freg_to_reg(ctx, v238)
                          let v240 = C::mark_maybe_aliased(ctx, v239)
                          let v241 = Some(v240)
                          // Rule at src/lower/riscv/lower.isle line 407.
                          return v241
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Abs => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Double => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v225 = C::freg_new(ctx, v112)
                          let v230 = constructor_rv_fabs_d(ctx, v225)
                          let v231 = C::freg_to_reg(ctx, v230)
                          let v232 = C::mark_maybe_aliased(ctx, v231)
                          let v233 = Some(v232)
                          // Rule at src/lower/riscv/lower.isle line 397.
                          return v233
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Sqrt => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v108) => {
                      let v109 = C::has_type(ctx, v108)
                      match v109.1 {
                        @core.Type::Double => {
                          let v112 = constructor_lower_value(ctx, v109.0)
                          let v225 = C::freg_new(ctx, v112)
                          let v234 = constructor_rv_fsqrt_d(ctx, v225)
                          let v235 = C::freg_to_reg(ctx, v234)
                          let v236 = C::mark_maybe_aliased(ctx, v235)
                          let v237 = Some(v236)
                          // Rule at src/lower/riscv/lower.isle line 402.
                          return v237
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            _ => ()
          }
        _ => ()
      }
    @core.Insn::Call(ty=v261, f=v262, args=v263) => {
      let v264 = C::ref_fn(ctx, v262)
      let v265 = C::lower_call(ctx, v261, v264, v263)
      let v266 = C::mark_maybe_aliased(ctx, v265)
      let v267 = Some(v266)
      // Rule at src/lower/riscv/lower.isle line 460.
      return v267
    }
    @core.Insn::Apply(ty=v268, f=v269, args=v270) => {
      let v271 = C::lower_apply(ctx, v268, v269, v270)
      let v272 = C::mark_maybe_aliased(ctx, v271)
      let v273 = Some(v272)
      // Rule at src/lower/riscv/lower.isle line 463.
      return v273
    }
    @core.Insn::ExtCall(ty=v255, ext_f=v256, args=v257) => {
      let v258 = C::lower_ext_call(ctx, v255, v256, v257)
      let v259 = C::mark_maybe_aliased(ctx, v258)
      let v260 = Some(v259)
      // Rule at src/lower/riscv/lower.isle line 457.
      return v260
    }
    @core.Insn::LoadSymbol(ty=v274, sref=v275) => {
      let v276 = C::lower_load_symbol(ctx, v274, v275)
      let v277 = C::mark_maybe_aliased(ctx, v276)
      let v278 = Some(v277)
      // Rule at src/lower/riscv/lower.isle line 466.
      return v278
    }
    @core.Insn::Pack(ty=v296, vals=v297) => {
      let v298 = C::lower_pack(ctx, v296, v297)
      let v299 = C::mark_maybe_aliased(ctx, v298)
      let v300 = Some(v299)
      // Rule at src/lower/riscv/lower.isle line 478.
      return v300
    }
    @core.Insn::Extract(ty=v301, val=v302, index=v303) => {
      let v304 = C::lower_extract(ctx, v301, v302, v303)
      let v305 = C::mark_maybe_aliased(ctx, v304)
      let v306 = Some(v305)
      // Rule at src/lower/riscv/lower.isle line 481.
      return v306
    }
    @core.Insn::Alloc(ty=v290, mref=v291, fills=v292) => {
      let v293 = C::lower_alloc(ctx, v290, v291, v292)
      let v294 = C::mark_maybe_aliased(ctx, v293)
      let v295 = Some(v294)
      // Rule at src/lower/riscv/lower.isle line 475.
      return v295
    }
    @core.Insn::Store(ty=v279, ma=v280, val=v281) => {
      let v282 = C::lower_store(ctx, v279, v280, v281)
      let v283 = C::mark_maybe_aliased(ctx, v282)
      let v284 = Some(v283)
      // Rule at src/lower/riscv/lower.isle line 469.
      return v284
    }
    @core.Insn::Load(ty=v285, ma=v286) => {
      let v287 = C::lower_load(ctx, v285, v286)
      let v288 = C::mark_maybe_aliased(ctx, v287)
      let v289 = Some(v288)
      // Rule at src/lower/riscv/lower.isle line 472.
      return v289
    }
    @core.Insn::ComputeAddress(ma=v307) => {
      let v308 = C::lower_compute_address(ctx, v307)
      let v309 = C::mark_maybe_aliased(ctx, v308)
      let v310 = Some(v309)
      // Rule at src/lower/riscv/lower.isle line 484.
      return v310
    }
    _ => ()
  }
  None
}

// Generated as internal constructor for term lower_mod.
pub fn constructor_lower_mod[C : Context](
  ctx : C,
  arg0 : @core.Value,
  arg1 : @core.Value
) -> @riscv.RegPack {
  let v9 = C::power_of_two(ctx, arg1)
  match v9 {
    Some(v10) => {
      let v2 = constructor_lower_value(ctx, arg0)
      let v3 = C::xreg_new(ctx, v2)
      let v11 = C::power_of_two_minus_one(ctx, v10)
      let v12 = constructor_rv_andi(ctx, v3, v11)
      let v13 = C::xreg_to_reg(ctx, v12)
      let v14 = C::mark_maybe_aliased(ctx, v13)
      // Rule at src/lower/riscv/lower.isle line 301.
      return v14
    }
    _ => ()
  }
  let v2 = constructor_lower_value(ctx, arg0)
  let v3 = C::xreg_new(ctx, v2)
  let v4 = constructor_lower_value(ctx, arg1)
  let v5 = C::xreg_new(ctx, v4)
  let v6 = constructor_rv_rem(ctx, v3, v5)
  let v7 = C::xreg_to_reg(ctx, v6)
  let v8 = C::mark_maybe_aliased(ctx, v7)
  // Rule at src/lower/riscv/lower.isle line 295.
  return v8
}
