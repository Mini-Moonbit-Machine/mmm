// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/core/prelude.isle
// - src/core/core.isle
// - src/riscv/riscv.isle
// - src/lower/riscv/lower.isle

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
pub trait Context {
  ref_fn(Self, @core.FnRef) -> @core.Fn
  ref_block(Self, @core.BlockRef) -> @core.Block
  ref_insn(Self, @core.InsnRef) -> @core.Insn
  ref_mem(Self, @core.MemRef) -> @core.Mem
  ref_free_v(Self, @core.FnFreeVarRef) -> UInt
  ref_symbol(Self, @core.SymbolRef) -> @core.Symbol
  i64_sext_u64(Self, @core.Type, UInt64) -> Int64
  i32_as_u64(Self, Int) -> UInt64
  i64_as_u64(Self, Int64) -> UInt64
  f64_as_u64(Self, Double) -> UInt64
  values_to_args(Self, @core.Values) -> Args?
  has_type(Self, @core.Value) -> (@core.Value, @core.Type)
  next_virtual_xreg(Self) -> @riscv.Reg
  next_virtual_freg(Self) -> @riscv.FReg
  emit_risc_v(Self, @riscv.RvAsm) -> Unit
  xreg_new(Self, @riscv.AnyReg) -> @riscv.Reg
  freg_new(Self, @riscv.AnyReg) -> @riscv.FReg
  xreg_to_reg(Self, @riscv.Reg) -> @riscv.AnyReg
  freg_to_reg(Self, @riscv.FReg) -> @riscv.AnyReg
  is_zero_reg(Self, @riscv.Reg) -> Unit?
  zero_reg(Self) -> @riscv.Reg
  is_closure_reg(Self, @riscv.Reg) -> Unit?
  closure_reg(Self) -> @riscv.Reg
  is_return_reg(Self, @riscv.Reg) -> Unit?
  return_reg(Self) -> @riscv.Reg
  is_float_return_reg(Self, @riscv.FReg) -> Unit?
  float_return_reg(Self) -> @riscv.FReg
  i64_generate_imm(Self, Int64) -> (@riscv.Imm20, @riscv.Imm12)?
  i32_generate_imm(Self, Int) -> (@riscv.Imm20, @riscv.Imm12)?
  imm20_is_zero(Self, @riscv.Imm20) -> Unit?
  imm12_is_zero(Self, @riscv.Imm12) -> Unit?
  imm20_to_i32(Self, @riscv.Imm20) -> Int
  imm12_to_i32(Self, @riscv.Imm12) -> Int
  imm32_to_string(Self, Int) -> String
  imm64_to_string(Self, Int64) -> String
  mark_maybe_aliased(Self, @riscv.AnyReg) -> @riscv.AnyReg
  put_in_reg(Self, @core.Value) -> @riscv.AnyReg
  block_label(Self, @core.BlockRef) -> @riscv.Label
  imm12_from_val(Self, @core.Value) -> @riscv.Imm12?
  imm12_from_neg_val(Self, @core.Value) -> @riscv.Imm12?
  emit_block_parameters(Self, @core.BlockRef, @core.Values) -> Unit
  emit_fake_epilogue(Self) -> Unit
  target_color(Self, @core.BlockRef) -> (@lower.ColorSeq, @core.BlockRef)
  not_double(Self, @core.Value) -> @core.Value?
  lower_load_fn(Self, @core.FnRef) -> @riscv.AnyReg
  lower_call(Self, @core.Type, @core.Fn, @core.Values) -> @riscv.AnyReg
  lower_ext_call(Self, @core.Type, String, @core.Values) -> @riscv.AnyReg
  lower_apply(Self, @core.Type, @core.Value, @core.Values) -> @riscv.AnyReg
  lower_load_symbol(Self, @core.Type, @core.SymbolRef) -> @riscv.AnyReg
  lower_store(Self, @core.Type, @core.Address, @core.Value) -> @riscv.AnyReg
  lower_load(Self, @core.Type, @core.Address) -> @riscv.AnyReg
  lower_alloc(Self, @core.Type, @core.MemRef, @core.Fills) -> @riscv.AnyReg
}

struct Returns[T, C] {
  data : Array[T?]
  next : (C) -> T?
}

fn default_next[T, C : Context](_ctx : C) -> T? {
  None
}

fn Returns::new[T, C : Context]() -> Returns[T, C] {
  { data: [], next: default_next }
}

fn Returns::push[T, C : Context](self : Returns[T, C], value : T?) -> Unit {
  self.data.push(value)
}

fn Returns::length[T, C : Context](self : Returns[T, C]) -> Int {
  self.data.length()
}

let _MAX_ISLE_RETURNS = 64

/// Internal type Args: defined at src/core/core.isle line 328.
pub enum Args {
  Args2(~arg1 : @core.Value, ~arg2 : @core.Value)
  Args1(~arg1 : @core.Value)
  Args0
} derive(Eq, Show)

// Generated as internal constructor for term ty_unit.
pub fn constructor_ty_unit[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 52.
  return @core.Type::Unit
}

// Generated as internal constructor for term ty_bool.
pub fn constructor_ty_bool[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 56.
  return @core.Type::Bool
}

// Generated as internal constructor for term ty_int32.
pub fn constructor_ty_int32[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 60.
  return @core.Type::Int32
}

// Generated as internal constructor for term ty_int64.
pub fn constructor_ty_int64[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 64.
  return @core.Type::Int64
}

// Generated as internal constructor for term ty_double.
pub fn constructor_ty_double[C : Context](ctx : C) -> @core.Type {
  // Rule at src/core/core.isle line 68.
  return @core.Type::Double
}

// Generated as internal constructor for term ty_closure_fn.
pub fn constructor_ty_closure_fn[C : Context](
  ctx : C,
  arg0 : @core.Types,
  arg1 : @core.Type
) -> @core.Type {
  let v2 = @core.Type::ClosureFn(params=arg0, ty=arg1)
  // Rule at src/core/core.isle line 72.
  return v2
}

// Generated as internal constructor for term ty_direct_fn.
pub fn constructor_ty_direct_fn[C : Context](
  ctx : C,
  arg0 : @core.Types,
  arg1 : @core.Type
) -> @core.Type {
  let v2 = @core.Type::DirectFn(params=arg0, ty=arg1)
  // Rule at src/core/core.isle line 76.
  return v2
}

// Generated as internal constructor for term ty_tuple.
pub fn constructor_ty_tuple[C : Context](
  ctx : C,
  arg0 : @core.Types
) -> @core.Type {
  let v1 = @core.Type::Tuple(fields=arg0)
  // Rule at src/core/core.isle line 80.
  return v1
}

// Generated as internal constructor for term ty_array.
pub fn constructor_ty_array[C : Context](
  ctx : C,
  arg0 : @core.Type
) -> @core.Type {
  let v1 = @core.Type::Array(elem=arg0)
  // Rule at src/core/core.isle line 84.
  return v1
}

// Generated as internal constructor for term round_rne.
pub fn constructor_round_rne[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 147.
  return @core.RoundMode::Rne
}

// Generated as internal constructor for term round_rtz.
pub fn constructor_round_rtz[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 151.
  return @core.RoundMode::Rtz
}

// Generated as internal constructor for term round_rdn.
pub fn constructor_round_rdn[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 155.
  return @core.RoundMode::Rdn
}

// Generated as internal constructor for term round_rup.
pub fn constructor_round_rup[C : Context](ctx : C) -> @core.RoundMode {
  // Rule at src/core/core.isle line 159.
  return @core.RoundMode::Rup
}

// Generated as internal constructor for term arg2.
pub fn constructor_arg2[C : Context](
  ctx : C,
  arg0 : @core.Value,
  arg1 : @core.Value
) -> Args {
  let v2 = Args::Args2(arg1=arg0, arg2=arg1)
  // Rule at src/core/core.isle line 335.
  return v2
}

// Generated as internal constructor for term arg1.
pub fn constructor_arg1[C : Context](ctx : C, arg0 : @core.Value) -> Args {
  let v1 = Args::Args1(arg1=arg0)
  // Rule at src/core/core.isle line 339.
  return v1
}

// Generated as internal constructor for term arg0.
pub fn constructor_arg0[C : Context](ctx : C) -> Args {
  // Rule at src/core/core.isle line 343.
  return Args::Args0
}

// Generated as internal constructor for term rv_add.
pub fn constructor_rv_add[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Add(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 123.
  return v2
}

// Generated as internal constructor for term rv_sub.
pub fn constructor_rv_sub[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sub(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 129.
  return v2
}

// Generated as internal constructor for term rv_xor.
pub fn constructor_rv_xor[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Xor(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 135.
  return v2
}

// Generated as internal constructor for term rv_or.
pub fn constructor_rv_or[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Or(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 141.
  return v2
}

// Generated as internal constructor for term rv_and.
pub fn constructor_rv_and[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::And(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 147.
  return v2
}

// Generated as internal constructor for term rv_sll.
pub fn constructor_rv_sll[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sll(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 153.
  return v2
}

// Generated as internal constructor for term rv_srl.
pub fn constructor_rv_srl[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srl(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 159.
  return v2
}

// Generated as internal constructor for term rv_sra.
pub fn constructor_rv_sra[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sra(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 165.
  return v2
}

// Generated as internal constructor for term rv_slt.
pub fn constructor_rv_slt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slt(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 171.
  return v2
}

// Generated as internal constructor for term rv_sltu.
pub fn constructor_rv_sltu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sltu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 177.
  return v2
}

// Generated as internal constructor for term rv_addi.
pub fn constructor_rv_addi[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Addi(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 183.
  return v2
}

// Generated as internal constructor for term rv_xori.
pub fn constructor_rv_xori[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Xori(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 189.
  return v2
}

// Generated as internal constructor for term rv_ori.
pub fn constructor_rv_ori[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Ori(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 195.
  return v2
}

// Generated as internal constructor for term rv_andi.
pub fn constructor_rv_andi[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Andi(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 201.
  return v2
}

// Generated as internal constructor for term rv_slli.
pub fn constructor_rv_slli[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slli(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 207.
  return v2
}

// Generated as internal constructor for term rv_slliw.
pub fn constructor_rv_slliw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slliw(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 213.
  return v2
}

// Generated as internal constructor for term rv_srli.
pub fn constructor_rv_srli[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srli(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 219.
  return v2
}

// Generated as internal constructor for term rv_srai.
pub fn constructor_rv_srai[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Srai(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 225.
  return v2
}

// Generated as internal constructor for term rv_slti.
pub fn constructor_rv_slti[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Slti(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 231.
  return v2
}

// Generated as internal constructor for term rv_sltiu.
pub fn constructor_rv_sltiu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Sltiu(rd=v2, rs1=arg0, imm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 237.
  return v2
}

// Generated as internal constructor for term rv_lb.
pub fn constructor_rv_lb[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lb(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 243.
  return v1
}

// Generated as internal constructor for term rv_lh.
pub fn constructor_rv_lh[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lh(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 249.
  return v1
}

// Generated as internal constructor for term rv_lw.
pub fn constructor_rv_lw[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lw(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 255.
  return v1
}

// Generated as internal constructor for term rv_ld.
pub fn constructor_rv_ld[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Ld(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 261.
  return v1
}

// Generated as internal constructor for term rv_lbu.
pub fn constructor_rv_lbu[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lbu(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 267.
  return v1
}

// Generated as internal constructor for term rv_lhu.
pub fn constructor_rv_lhu[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lhu(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 273.
  return v1
}

// Generated as internal constructor for term rv_lwu.
pub fn constructor_rv_lwu[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Lwu(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 279.
  return v1
}

// Generated as internal constructor for term rv_sb.
pub fn constructor_rv_sb[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sb(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 285.
  return v3
}

// Generated as internal constructor for term rv_sh.
pub fn constructor_rv_sh[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sh(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 288.
  return v3
}

// Generated as internal constructor for term rv_sw.
pub fn constructor_rv_sw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sw(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 291.
  return v3
}

// Generated as internal constructor for term rv_sd.
pub fn constructor_rv_sd[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Sd(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 294.
  return v3
}

// Generated as internal constructor for term rv_beq.
pub fn constructor_rv_beq[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Beq(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 297.
  return v4
}

// Generated as internal constructor for term rv_bne.
pub fn constructor_rv_bne[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bne(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 300.
  return v4
}

// Generated as internal constructor for term rv_blt.
pub fn constructor_rv_blt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Blt(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 303.
  return v4
}

// Generated as internal constructor for term rv_bge.
pub fn constructor_rv_bge[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bge(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 306.
  return v4
}

// Generated as internal constructor for term rv_ble.
pub fn constructor_rv_ble[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Ble(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 309.
  return v4
}

// Generated as internal constructor for term rv_bgt.
pub fn constructor_rv_bgt[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bgt(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 312.
  return v4
}

// Generated as internal constructor for term rv_bltu.
pub fn constructor_rv_bltu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bltu(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 315.
  return v4
}

// Generated as internal constructor for term rv_bgeu.
pub fn constructor_rv_bgeu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg,
  arg2 : @riscv.Label
) -> Unit {
  let v3 = @riscv.RvAsm::Bgeu(rs1=arg0, rs2=arg1, target=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 318.
  return v4
}

// Generated as internal constructor for term rv_bnez.
pub fn constructor_rv_bnez[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Label
) -> Unit {
  let v2 = C::zero_reg(ctx)
  let v3 = @riscv.RvAsm::Bne(rs1=arg0, rs2=v2, target=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 321.
  return v4
}

// Generated as internal constructor for term rv_beqz.
pub fn constructor_rv_beqz[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Label
) -> Unit {
  let v2 = C::zero_reg(ctx)
  let v3 = @riscv.RvAsm::Beq(rs1=arg0, rs2=v2, target=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 324.
  return v4
}

// Generated as internal constructor for term rv_mul.
pub fn constructor_rv_mul[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mul(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 327.
  return v2
}

// Generated as internal constructor for term rv_mulw.
pub fn constructor_rv_mulw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 333.
  return v2
}

// Generated as internal constructor for term rv_mulh.
pub fn constructor_rv_mulh[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulh(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 339.
  return v2
}

// Generated as internal constructor for term rv_mulhsu.
pub fn constructor_rv_mulhsu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulhsu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 345.
  return v2
}

// Generated as internal constructor for term rv_mulhu.
pub fn constructor_rv_mulhu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Mulhu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 351.
  return v2
}

// Generated as internal constructor for term rv_div.
pub fn constructor_rv_div[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Div(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 357.
  return v2
}

// Generated as internal constructor for term rv_divw.
pub fn constructor_rv_divw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Divw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 363.
  return v2
}

// Generated as internal constructor for term rv_divu.
pub fn constructor_rv_divu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Divu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 369.
  return v2
}

// Generated as internal constructor for term rv_rem.
pub fn constructor_rv_rem[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Rem(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 375.
  return v2
}

// Generated as internal constructor for term rv_remw.
pub fn constructor_rv_remw[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Remw(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 381.
  return v2
}

// Generated as internal constructor for term rv_remu.
pub fn constructor_rv_remu[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::Remu(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 387.
  return v2
}

// Generated as internal constructor for term rv_fadd_d.
pub fn constructor_rv_fadd_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FaddD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 393.
  return v2
}

// Generated as internal constructor for term rv_fsub_d.
pub fn constructor_rv_fsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FsubD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 399.
  return v2
}

// Generated as internal constructor for term rv_fmul_d.
pub fn constructor_rv_fmul_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FmulD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 405.
  return v2
}

// Generated as internal constructor for term rv_fdiv_d.
pub fn constructor_rv_fdiv_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.FReg {
  let v2 = C::next_virtual_freg(ctx)
  let v3 = @riscv.RvAsm::FdivD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 411.
  return v2
}

// Generated as internal constructor for term rv_fld.
pub fn constructor_rv_fld[C : Context](
  ctx : C,
  arg0 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::Fld(rd=v1, mem=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 417.
  return v1
}

// Generated as internal constructor for term rv_fsd.
pub fn constructor_rv_fsd[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.MemAccess[@riscv.Reg, @riscv.Imm12]
) -> Unit {
  let v2 = @riscv.RvAsm::Fsd(rs=arg0, mem=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 423.
  return v3
}

// Generated as internal constructor for term rv_feq_d.
pub fn constructor_rv_feq_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::FeqD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 426.
  return v2
}

// Generated as internal constructor for term rv_fle_d.
pub fn constructor_rv_fle_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::FleD(rd=v2, rs1=arg0, rs2=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 432.
  return v2
}

// Generated as internal constructor for term rv_fmv_dx.
pub fn constructor_rv_fmv_dx[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FmvDX(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 438.
  return v1
}

// Generated as internal constructor for term rv_fcvt_w_d.
pub fn constructor_rv_fcvt_w_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @core.RoundMode
) -> @riscv.Reg {
  let v2 = C::next_virtual_xreg(ctx)
  let v3 = @riscv.RvAsm::FcvtWD(rd=v2, rs=arg0, rm=arg1)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 444.
  return v2
}

// Generated as internal constructor for term rv_fcvt_d_w.
pub fn constructor_rv_fcvt_d_w[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FcvtDW(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 450.
  return v1
}

// Generated as internal constructor for term rv_fabs_d.
pub fn constructor_rv_fabs_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FabsD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 456.
  return v1
}

// Generated as internal constructor for term rv_fsqrt_d.
pub fn constructor_rv_fsqrt_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FsqrtD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 462.
  return v1
}

// Generated as internal constructor for term rv_fmadd_d.
pub fn constructor_rv_fmadd_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg,
  arg2 : @riscv.FReg
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::FmaddD(rd=v3, rs1=arg0, rs2=arg1, rs3=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 468.
  return v3
}

// Generated as internal constructor for term rv_fmsub_d.
pub fn constructor_rv_fmsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg,
  arg2 : @riscv.FReg
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::FmsubD(rd=v3, rs1=arg0, rs2=arg1, rs3=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 474.
  return v3
}

// Generated as internal constructor for term rv_fnmsub_d.
pub fn constructor_rv_fnmsub_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg,
  arg2 : @riscv.FReg
) -> @riscv.FReg {
  let v3 = C::next_virtual_freg(ctx)
  let v4 = @riscv.RvAsm::FnmsubD(rd=v3, rs1=arg0, rs2=arg1, rs3=arg2)
  let v5 = C::emit_risc_v(ctx, v4)
  // Rule at src/riscv/riscv.isle line 480.
  return v3
}

// Generated as internal constructor for term rv_la.
pub fn constructor_rv_la[C : Context](
  ctx : C,
  arg0 : @riscv.Label
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::La(rd=v1, l=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 486.
  return v1
}

// Generated as internal constructor for term rv_li.
pub fn constructor_rv_li[C : Context](ctx : C, arg0 : String) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Li(rd=v1, i=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 492.
  return v1
}

// Generated as internal constructor for term rv_neg.
pub fn constructor_rv_neg[C : Context](
  ctx : C,
  arg0 : @riscv.Reg
) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Neg(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 498.
  return v1
}

// Generated as internal constructor for term rv_fneg_d.
pub fn constructor_rv_fneg_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FnegD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 504.
  return v1
}

// Generated as internal constructor for term rv_mv.
pub fn constructor_rv_mv[C : Context](ctx : C, arg0 : @riscv.Reg) -> @riscv.Reg {
  let v1 = C::next_virtual_xreg(ctx)
  let v2 = @riscv.RvAsm::Mv(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 510.
  return v1
}

// Generated as internal constructor for term rv_fmv_d.
pub fn constructor_rv_fmv_d[C : Context](
  ctx : C,
  arg0 : @riscv.FReg
) -> @riscv.FReg {
  let v1 = C::next_virtual_freg(ctx)
  let v2 = @riscv.RvAsm::FmvD(rd=v1, rs=arg0)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 516.
  return v1
}

// Generated as internal constructor for term rv_mv_to.
pub fn constructor_rv_mv_to[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : @riscv.Reg
) -> Unit {
  let v2 = @riscv.RvAsm::Mv(rd=arg0, rs=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 522.
  return v3
}

// Generated as internal constructor for term rv_fmv_to.
pub fn constructor_rv_fmv_to[C : Context](
  ctx : C,
  arg0 : @riscv.FReg,
  arg1 : @riscv.FReg
) -> Unit {
  let v2 = @riscv.RvAsm::FmvD(rd=arg0, rs=arg1)
  let v3 = C::emit_risc_v(ctx, v2)
  // Rule at src/riscv/riscv.isle line 525.
  return v3
}

// Generated as internal constructor for term rv_j.
pub fn constructor_rv_j[C : Context](ctx : C, arg0 : @riscv.Label) -> Unit {
  let v1 = @riscv.RvAsm::J(target=arg0)
  let v2 = C::emit_risc_v(ctx, v1)
  // Rule at src/riscv/riscv.isle line 528.
  return v2
}

// Generated as internal constructor for term rv_jalr.
pub fn constructor_rv_jalr[C : Context](
  ctx : C,
  arg0 : @riscv.Reg,
  arg1 : Int,
  arg2 : Int
) -> Unit {
  let v3 = @riscv.RvAsm::Jalr(target=arg0, num_xregs=arg1, num_fregs=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 531.
  return v4
}

// Generated as internal constructor for term rv_jr.
pub fn constructor_rv_jr[C : Context](ctx : C, arg0 : @riscv.Reg) -> Unit {
  let v1 = @riscv.RvAsm::Jr(target=arg0)
  let v2 = C::emit_risc_v(ctx, v1)
  // Rule at src/riscv/riscv.isle line 534.
  return v2
}

// Generated as internal constructor for term rv_call.
pub fn constructor_rv_call[C : Context](
  ctx : C,
  arg0 : @riscv.Label,
  arg1 : Int,
  arg2 : Int
) -> Unit {
  let v3 = @riscv.RvAsm::Call(target=arg0, num_xregs=arg1, num_fregs=arg2)
  let v4 = C::emit_risc_v(ctx, v3)
  // Rule at src/riscv/riscv.isle line 537.
  return v4
}

// Generated as internal constructor for term rv_xret.
pub fn constructor_rv_xret[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::XRet)
  // Rule at src/riscv/riscv.isle line 540.
  return v1
}

// Generated as internal constructor for term rv_fret.
pub fn constructor_rv_fret[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::FRet)
  // Rule at src/riscv/riscv.isle line 543.
  return v1
}

// Generated as internal constructor for term rv_save_ctx1.
pub fn constructor_rv_save_ctx1[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::SaveCtx1)
  // Rule at src/riscv/riscv.isle line 546.
  return v1
}

// Generated as internal constructor for term rv_restore_ctx1.
pub fn constructor_rv_restore_ctx1[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::RestoreCtx1)
  // Rule at src/riscv/riscv.isle line 549.
  return v1
}

// Generated as internal constructor for term rv_save_ctx2.
pub fn constructor_rv_save_ctx2[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::SaveCtx2)
  // Rule at src/riscv/riscv.isle line 552.
  return v1
}

// Generated as internal constructor for term rv_restore_ctx2.
pub fn constructor_rv_restore_ctx2[C : Context](ctx : C) -> Unit {
  let v1 = C::emit_risc_v(ctx, @riscv.RvAsm::RestoreCtx2)
  // Rule at src/riscv/riscv.isle line 555.
  return v1
}

// Generated as internal constructor for term lower_imm.
pub fn constructor_lower_imm[C : Context](
  ctx : C,
  arg0 : @core.Type,
  arg1 : UInt64
) -> @riscv.AnyReg {
  match arg0 {
    @core.Type::Int32 => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v10 = C::xreg_to_reg(ctx, v2)
          // Rule at src/lower/riscv/lower.isle line 11.
          return v10
        }
        _ => ()
      }
      let v11 = constructor_ty_int32(ctx)
      let v12 = C::i64_sext_u64(ctx, v11, arg1)
      let v13 = C::imm64_to_string(ctx, v12)
      let v14 = constructor_rv_li(ctx, v13)
      let v15 = C::xreg_to_reg(ctx, v14)
      // Rule at src/lower/riscv/lower.isle line 17.
      return v15
    }
    @core.Type::Int64 => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v10 = C::xreg_to_reg(ctx, v2)
          // Rule at src/lower/riscv/lower.isle line 14.
          return v10
        }
        _ => ()
      }
      let v5 = constructor_ty_int64(ctx)
      let v16 = C::i64_sext_u64(ctx, v5, arg1)
      let v17 = C::imm64_to_string(ctx, v16)
      let v18 = constructor_rv_li(ctx, v17)
      let v19 = C::xreg_to_reg(ctx, v18)
      // Rule at src/lower/riscv/lower.isle line 21.
      return v19
    }
    @core.Type::Double => {
      match arg1 {
        0x0 => {
          let v2 = C::zero_reg(ctx)
          let v3 = constructor_rv_fmv_dx(ctx, v2)
          let v4 = C::freg_to_reg(ctx, v3)
          // Rule at src/lower/riscv/lower.isle line 4.
          return v4
        }
        _ => ()
      }
      let v5 = constructor_ty_int64(ctx)
      let v6 = constructor_lower_imm(ctx, v5, arg1)
      let v7 = C::xreg_new(ctx, v6)
      let v8 = constructor_rv_fmv_dx(ctx, v7)
      let v9 = C::freg_to_reg(ctx, v8)
      // Rule at src/lower/riscv/lower.isle line 7.
      return v9
    }
    _ => ()
  }
  abort(
    "no rule matched for term lower_imm at src/lower/riscv/lower.isle line 2; should it be partial?",
  )
}

// Generated as internal constructor for term lower_value.
pub fn constructor_lower_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.AnyReg {
  match arg0 {
    @core.Value::Unit => {
      let v1 = constructor_ty_int32(ctx)
      let v3 = constructor_lower_imm(ctx, v1, 0x0)
      // Rule at src/lower/riscv/lower.isle line 46.
      return v3
    }
    @core.Value::Bool(val=v4) =>
      match v4 {
        true => {
          let v1 = constructor_ty_int32(ctx)
          let v6 = constructor_lower_imm(ctx, v1, 0x1)
          // Rule at src/lower/riscv/lower.isle line 49.
          return v6
        }
        false => {
          let v1 = constructor_ty_int32(ctx)
          let v3 = constructor_lower_imm(ctx, v1, 0x0)
          // Rule at src/lower/riscv/lower.isle line 52.
          return v3
        }
        _ => ()
      }
    @core.Value::Double(val=v14) => {
      let v15 = constructor_ty_double(ctx)
      let v16 = C::f64_as_u64(ctx, v14)
      let v17 = constructor_lower_imm(ctx, v15, v16)
      // Rule at src/lower/riscv/lower.isle line 61.
      return v17
    }
    @core.Value::Int32(val=v7) => {
      let v1 = constructor_ty_int32(ctx)
      let v8 = C::i32_as_u64(ctx, v7)
      let v9 = constructor_lower_imm(ctx, v1, v8)
      // Rule at src/lower/riscv/lower.isle line 55.
      return v9
    }
    @core.Value::Int64(val=v10) => {
      let v11 = constructor_ty_int64(ctx)
      let v12 = C::i64_as_u64(ctx, v10)
      let v13 = constructor_lower_imm(ctx, v11, v12)
      // Rule at src/lower/riscv/lower.isle line 58.
      return v13
    }
    @core.Value::Fn(fref=v18) => {
      let v19 = C::lower_load_fn(ctx, v18)
      // Rule at src/lower/riscv/lower.isle line 64.
      return v19
    }
    @core.Value::Self(fref=v20) => {
      let v21 = C::closure_reg(ctx)
      let v22 = C::xreg_to_reg(ctx, v21)
      // Rule at src/lower/riscv/lower.isle line 67.
      return v22
    }
    _ => ()
  }
  let v23 = C::put_in_reg(ctx, arg0)
  // Rule at src/lower/riscv/lower.isle line 70.
  return v23
}

// Generated as internal constructor for term lower_x_value.
pub fn constructor_lower_x_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.Reg {
  let v1 = constructor_lower_value(ctx, arg0)
  let v2 = C::xreg_new(ctx, v1)
  // Rule at src/lower/riscv/lower.isle line 29.
  return v2
}

// Generated as internal constructor for term lower_f_value.
pub fn constructor_lower_f_value[C : Context](
  ctx : C,
  arg0 : @core.Value
) -> @riscv.FReg {
  let v1 = constructor_lower_value(ctx, arg0)
  let v2 = C::freg_new(ctx, v1)
  // Rule at src/lower/riscv/lower.isle line 33.
  return v2
}

// Generated as internal constructor for term lower_control.
pub fn constructor_lower_control[C : Context](
  ctx : C,
  arg0 : @lower.ColorSeq,
  arg1 : @core.Control
) -> Unit? {
  match arg1 {
    @core.Control::Jump(target=v2, args=v3) => {
      let v8 = C::target_color(ctx, v2)
      if arg0 == v8.0 {
        let v11 = C::emit_block_parameters(ctx, v8.1, v3)
        let v12 = Some(v11)
        // Rule at src/lower/riscv/lower.isle line 98.
        return v12
      }
      let v4 = C::emit_block_parameters(ctx, v2, v3)
      let v5 = C::block_label(ctx, v2)
      let v6 = constructor_rv_j(ctx, v5)
      let v7 = Some(v6)
      // Rule at src/lower/riscv/lower.isle line 94.
      return v7
    }
    @core.Control::Return(args=v13) => {
      let v14 = C::values_to_args(ctx, v13)
      match v14 {
        Some(v15) =>
          match v15 {
            Args::Args1(arg1=v22) => {
              let v23 = C::has_type(ctx, v22)
              match v23.1 {
                @core.Type::Double => {
                  let v26 = constructor_lower_value(ctx, v23.0)
                  let v27 = C::freg_new(ctx, v26)
                  let v28 = C::float_return_reg(ctx)
                  let v29 = constructor_rv_fmv_to(ctx, v28, v27)
                  let v30 = C::emit_fake_epilogue(ctx)
                  let v31 = constructor_rv_fret(ctx)
                  let v32 = Some(v31)
                  // Rule at src/lower/riscv/lower.isle line 106.
                  return v32
                }
                _ => ()
              }
              let v33 = constructor_lower_value(ctx, v22)
              let v34 = C::xreg_new(ctx, v33)
              let v35 = C::return_reg(ctx)
              let v36 = constructor_rv_mv_to(ctx, v35, v34)
              let v30 = C::emit_fake_epilogue(ctx)
              let v37 = constructor_rv_xret(ctx)
              let v38 = Some(v37)
              // Rule at src/lower/riscv/lower.isle line 112.
              return v38
            }
            Args::Args0 => {
              let v16 = C::return_reg(ctx)
              let v17 = C::zero_reg(ctx)
              let v18 = constructor_rv_mv_to(ctx, v16, v17)
              let v19 = C::emit_fake_epilogue(ctx)
              let v20 = constructor_rv_xret(ctx)
              let v21 = Some(v20)
              // Rule at src/lower/riscv/lower.isle line 101.
              return v21
            }
            _ => ()
          }
        _ => ()
      }
    }
    @core.Control::Branch(cond=v39, t=v40, t_args=v41, f=v42, f_args=v43) => {
      match v39 {
        @core.Value::Bool(val=v66) =>
          match v66 {
            true => {
              let v58 = C::target_color(ctx, v40)
              if arg0 == v58.0 {
                let v71 = C::emit_block_parameters(ctx, v58.1, v41)
                let v72 = Some(v71)
                // Rule at src/lower/riscv/lower.isle line 141.
                return v72
              }
              let v67 = C::emit_block_parameters(ctx, v40, v41)
              let v68 = C::block_label(ctx, v40)
              let v69 = constructor_rv_j(ctx, v68)
              let v70 = Some(v69)
              // Rule at src/lower/riscv/lower.isle line 137.
              return v70
            }
            false => {
              let v53 = C::target_color(ctx, v42)
              if arg0 == v53.0 {
                let v74 = C::emit_block_parameters(ctx, v53.1, v43)
                let v75 = Some(v74)
                // Rule at src/lower/riscv/lower.isle line 148.
                return v75
              }
              let v73 = C::emit_block_parameters(ctx, v42, v43)
              let v68 = C::block_label(ctx, v40)
              let v69 = constructor_rv_j(ctx, v68)
              let v70 = Some(v69)
              // Rule at src/lower/riscv/lower.isle line 144.
              return v70
            }
            _ => ()
          }
        @core.Value::Insn(iref=v76) => {
          let v77 = C::ref_insn(ctx, v76)
          match v77 {
            @core.Insn::Op(ty=v78, op=v79, args=v80) =>
              match v78 {
                @core.Type::Bool =>
                  match v79 {
                    @core.Op::Eq => {
                      let v81 = C::values_to_args(ctx, v80)
                      match v81 {
                        Some(v82) =>
                          match v82 {
                            Args::Args2(arg1=v83, arg2=v84) => {
                              let v85 = C::not_double(ctx, v83)
                              match v85 {
                                Some(v86) => {
                                  let v87 = C::not_double(ctx, v84)
                                  match v87 {
                                    Some(v88) => {
                                      let v53 = C::target_color(ctx, v42)
                                      if arg0 == v53.0 {
                                        let v67 = C::emit_block_parameters(
                                          ctx, v40, v41,
                                        )
                                        let v89 = constructor_lower_value(
                                          ctx, v86,
                                        )
                                        let v90 = C::xreg_new(ctx, v89)
                                        let v91 = constructor_lower_value(
                                          ctx, v88,
                                        )
                                        let v92 = C::xreg_new(ctx, v91)
                                        let v93 = C::block_label(ctx, v40)
                                        let v94 = constructor_rv_beq(
                                          ctx, v90, v92, v93,
                                        )
                                        let v103 = C::emit_block_parameters(
                                          ctx,
                                          v53.1,
                                          v43,
                                        )
                                        let v104 = C::emit_block_parameters(
                                          ctx,
                                          v53.1,
                                          v43,
                                        )
                                        let v105 = Some(v104)
                                        // Rule at src/lower/riscv/lower.isle line 175.
                                        return v105
                                      }
                                      let v58 = C::target_color(ctx, v40)
                                      if arg0 == v58.0 {
                                        let v73 = C::emit_block_parameters(
                                          ctx, v42, v43,
                                        )
                                        let v89 = constructor_lower_value(
                                          ctx, v86,
                                        )
                                        let v90 = C::xreg_new(ctx, v89)
                                        let v91 = constructor_lower_value(
                                          ctx, v88,
                                        )
                                        let v92 = C::xreg_new(ctx, v91)
                                        let v99 = C::block_label(ctx, v42)
                                        let v100 = constructor_rv_bne(
                                          ctx, v90, v92, v99,
                                        )
                                        let v101 = C::emit_block_parameters(
                                          ctx,
                                          v58.1,
                                          v41,
                                        )
                                        let v102 = Some(v101)
                                        // Rule at src/lower/riscv/lower.isle line 166.
                                        return v102
                                      }
                                      let v67 = C::emit_block_parameters(
                                        ctx, v40, v41,
                                      )
                                      let v89 = constructor_lower_value(
                                        ctx, v86,
                                      )
                                      let v90 = C::xreg_new(ctx, v89)
                                      let v91 = constructor_lower_value(
                                        ctx, v88,
                                      )
                                      let v92 = C::xreg_new(ctx, v91)
                                      let v93 = C::block_label(ctx, v40)
                                      let v94 = constructor_rv_beq(
                                        ctx, v90, v92, v93,
                                      )
                                      let v95 = C::emit_block_parameters(
                                        ctx, v42, v43,
                                      )
                                      let v96 = C::block_label(ctx, v42)
                                      let v97 = constructor_rv_j(ctx, v96)
                                      let v98 = Some(v97)
                                      // Rule at src/lower/riscv/lower.isle line 156.
                                      return v98
                                    }
                                    _ => ()
                                  }
                                }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        _ => ()
                      }
                    }
                    @core.Op::Le => {
                      let v81 = C::values_to_args(ctx, v80)
                      match v81 {
                        Some(v82) =>
                          match v82 {
                            Args::Args2(arg1=v83, arg2=v84) => {
                              let v85 = C::not_double(ctx, v83)
                              match v85 {
                                Some(v86) => {
                                  let v87 = C::not_double(ctx, v84)
                                  match v87 {
                                    Some(v88) => {
                                      let v53 = C::target_color(ctx, v42)
                                      if arg0 == v53.0 {
                                        let v67 = C::emit_block_parameters(
                                          ctx, v40, v41,
                                        )
                                        let v106 = constructor_lower_value(
                                          ctx, v88,
                                        )
                                        let v107 = C::xreg_new(ctx, v106)
                                        let v108 = constructor_lower_value(
                                          ctx, v86,
                                        )
                                        let v109 = C::xreg_new(ctx, v108)
                                        let v93 = C::block_label(ctx, v40)
                                        let v110 = constructor_rv_bge(
                                          ctx, v107, v109, v93,
                                        )
                                        let v103 = C::emit_block_parameters(
                                          ctx,
                                          v53.1,
                                          v43,
                                        )
                                        let v114 = Some(v103)
                                        // Rule at src/lower/riscv/lower.isle line 207.
                                        return v114
                                      }
                                      let v58 = C::target_color(ctx, v40)
                                      if arg0 == v58.0 {
                                        let v73 = C::emit_block_parameters(
                                          ctx, v42, v43,
                                        )
                                        let v106 = constructor_lower_value(
                                          ctx, v88,
                                        )
                                        let v107 = C::xreg_new(ctx, v106)
                                        let v108 = constructor_lower_value(
                                          ctx, v86,
                                        )
                                        let v109 = C::xreg_new(ctx, v108)
                                        let v99 = C::block_label(ctx, v42)
                                        let v111 = constructor_rv_blt(
                                          ctx, v107, v109, v99,
                                        )
                                        let v101 = C::emit_block_parameters(
                                          ctx,
                                          v58.1,
                                          v41,
                                        )
                                        let v112 = C::emit_block_parameters(
                                          ctx,
                                          v58.1,
                                          v41,
                                        )
                                        let v113 = Some(v112)
                                        // Rule at src/lower/riscv/lower.isle line 197.
                                        return v113
                                      }
                                      let v67 = C::emit_block_parameters(
                                        ctx, v40, v41,
                                      )
                                      let v106 = constructor_lower_value(
                                        ctx, v88,
                                      )
                                      let v107 = C::xreg_new(ctx, v106)
                                      let v108 = constructor_lower_value(
                                        ctx, v86,
                                      )
                                      let v109 = C::xreg_new(ctx, v108)
                                      let v93 = C::block_label(ctx, v40)
                                      let v110 = constructor_rv_bge(
                                        ctx, v107, v109, v93,
                                      )
                                      let v95 = C::emit_block_parameters(
                                        ctx, v42, v43,
                                      )
                                      let v96 = C::block_label(ctx, v42)
                                      let v97 = constructor_rv_j(ctx, v96)
                                      let v98 = Some(v97)
                                      // Rule at src/lower/riscv/lower.isle line 187.
                                      return v98
                                    }
                                    _ => ()
                                  }
                                }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            _ => ()
          }
        }
        _ => ()
      }
      let v58 = C::target_color(ctx, v40)
      if arg0 == v58.0 {
        let v44 = constructor_lower_value(ctx, v39)
        let v45 = C::xreg_new(ctx, v44)
        let v61 = C::emit_block_parameters(ctx, v42, v43)
        let v62 = C::block_label(ctx, v42)
        let v63 = constructor_rv_beqz(ctx, v45, v62)
        let v64 = C::emit_block_parameters(ctx, v58.1, v41)
        let v65 = Some(v64)
        // Rule at src/lower/riscv/lower.isle line 131.
        return v65
      }
      let v53 = C::target_color(ctx, v42)
      if arg0 == v53.0 {
        let v44 = constructor_lower_value(ctx, v39)
        let v45 = C::xreg_new(ctx, v44)
        let v46 = C::emit_block_parameters(ctx, v40, v41)
        let v47 = C::block_label(ctx, v40)
        let v48 = constructor_rv_bnez(ctx, v45, v47)
        let v56 = C::emit_block_parameters(ctx, v53.1, v43)
        let v57 = Some(v56)
        // Rule at src/lower/riscv/lower.isle line 125.
        return v57
      }
      let v44 = constructor_lower_value(ctx, v39)
      let v45 = C::xreg_new(ctx, v44)
      let v46 = C::emit_block_parameters(ctx, v40, v41)
      let v47 = C::block_label(ctx, v40)
      let v48 = constructor_rv_bnez(ctx, v45, v47)
      let v49 = C::emit_block_parameters(ctx, v42, v43)
      let v50 = C::block_label(ctx, v42)
      let v51 = constructor_rv_j(ctx, v50)
      let v52 = Some(v51)
      // Rule at src/lower/riscv/lower.isle line 118.
      return v52
    }
    _ => ()
  }
  None
}

// Generated as internal constructor for term lower.
pub fn constructor_lower[C : Context](
  ctx : C,
  arg0 : @core.Insn
) -> @riscv.AnyReg? {
  match arg0 {
    @core.Insn::Op(ty=v1, op=v2, args=v3) =>
      match v1 {
        @core.Type::Bool =>
          match v2 {
            @core.Op::Lnot => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Bool => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v62 = C::xreg_new(ctx, v61)
                          let v68 = constructor_rv_sltiu(ctx, v62, 0x1)
                          let v69 = C::xreg_to_reg(ctx, v68)
                          let v70 = C::mark_maybe_aliased(ctx, v69)
                          let v71 = Some(v70)
                          // Rule at src/lower/riscv/lower.isle line 262.
                          return v71
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Eq => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v72 = constructor_rv_xor(ctx, v15, v17)
                              let v73 = constructor_rv_sltiu(ctx, v72, 0x1)
                              let v74 = C::xreg_to_reg(ctx, v73)
                              let v75 = C::mark_maybe_aliased(ctx, v74)
                              let v76 = Some(v75)
                              // Rule at src/lower/riscv/lower.isle line 268.
                              return v76
                            }
                            _ => ()
                          }
                        }
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v84 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v85 = C::freg_new(ctx, v16)
                              let v174 = constructor_rv_feq_d(ctx, v84, v85)
                              let v175 = C::xreg_to_reg(ctx, v174)
                              let v176 = C::mark_maybe_aliased(ctx, v175)
                              let v177 = Some(v176)
                              // Rule at src/lower/riscv/lower.isle line 359.
                              return v177
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Le => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v31 = constructor_lower_value(ctx, v11.0)
                              let v32 = C::xreg_new(ctx, v31)
                              let v77 = constructor_lower_value(ctx, v8.0)
                              let v78 = C::xreg_new(ctx, v77)
                              let v79 = constructor_rv_slt(ctx, v32, v78)
                              let v80 = constructor_rv_xori(ctx, v79, 0x1)
                              let v81 = C::xreg_to_reg(ctx, v80)
                              let v82 = C::mark_maybe_aliased(ctx, v81)
                              let v83 = Some(v82)
                              // Rule at src/lower/riscv/lower.isle line 274.
                              return v83
                            }
                            _ => ()
                          }
                        }
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v84 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v85 = C::freg_new(ctx, v16)
                              let v178 = constructor_rv_fle_d(ctx, v84, v85)
                              let v179 = C::xreg_to_reg(ctx, v178)
                              let v180 = C::mark_maybe_aliased(ctx, v179)
                              let v181 = Some(v180)
                              // Rule at src/lower/riscv/lower.isle line 362.
                              return v181
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            _ => ()
          }
        @core.Type::Int32 =>
          match v2 {
            @core.Op::Add => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v11 = C::has_type(ctx, v7)
                      match v11.1 {
                        @core.Type::Int32 => {
                          let v29 = C::imm12_from_val(ctx, v6)
                          match v29 {
                            Some(v30) => {
                              let v31 = constructor_lower_value(ctx, v11.0)
                              let v32 = C::xreg_new(ctx, v31)
                              let v33 = C::imm12_to_i32(ctx, v30)
                              let v34 = constructor_rv_addi(ctx, v32, v33)
                              let v35 = C::xreg_to_reg(ctx, v34)
                              let v36 = C::mark_maybe_aliased(ctx, v35)
                              let v37 = Some(v36)
                              // Rule at src/lower/riscv/lower.isle line 229.
                              return v37
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v22 = C::imm12_from_val(ctx, v7)
                          match v22 {
                            Some(v23) => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v24 = C::imm12_to_i32(ctx, v23)
                              let v25 = constructor_rv_addi(ctx, v15, v24)
                              let v26 = C::xreg_to_reg(ctx, v25)
                              let v27 = C::mark_maybe_aliased(ctx, v26)
                              let v28 = Some(v27)
                              // Rule at src/lower/riscv/lower.isle line 226.
                              return v28
                            }
                            _ => ()
                          }
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v18 = constructor_rv_add(ctx, v15, v17)
                              let v19 = C::xreg_to_reg(ctx, v18)
                              let v20 = C::mark_maybe_aliased(ctx, v19)
                              let v21 = Some(v20)
                              // Rule at src/lower/riscv/lower.isle line 223.
                              return v21
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Sub => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v42 = C::imm12_from_neg_val(ctx, v7)
                          match v42 {
                            Some(v43) => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v44 = C::imm12_to_i32(ctx, v43)
                              let v45 = constructor_rv_addi(ctx, v15, v44)
                              let v46 = C::xreg_to_reg(ctx, v45)
                              let v47 = C::mark_maybe_aliased(ctx, v46)
                              let v48 = Some(v47)
                              // Rule at src/lower/riscv/lower.isle line 238.
                              return v48
                            }
                            _ => ()
                          }
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v38 = constructor_rv_sub(ctx, v15, v17)
                              let v39 = C::xreg_to_reg(ctx, v38)
                              let v40 = C::mark_maybe_aliased(ctx, v39)
                              let v41 = Some(v40)
                              // Rule at src/lower/riscv/lower.isle line 235.
                              return v41
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Mul => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v49 = constructor_rv_mul(ctx, v15, v17)
                              let v50 = C::xreg_to_reg(ctx, v49)
                              let v51 = C::mark_maybe_aliased(ctx, v50)
                              let v52 = Some(v51)
                              // Rule at src/lower/riscv/lower.isle line 244.
                              return v52
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Div => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Int32 => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Int32 => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v15 = C::xreg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v17 = C::xreg_new(ctx, v16)
                              let v53 = constructor_rv_div(ctx, v15, v17)
                              let v54 = C::xreg_to_reg(ctx, v53)
                              let v55 = C::mark_maybe_aliased(ctx, v54)
                              let v56 = Some(v55)
                              // Rule at src/lower/riscv/lower.isle line 250.
                              return v56
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Neg => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Int32 => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v62 = C::xreg_new(ctx, v61)
                          let v63 = constructor_rv_neg(ctx, v62)
                          let v64 = C::xreg_to_reg(ctx, v63)
                          let v65 = C::mark_maybe_aliased(ctx, v64)
                          let v66 = Some(v65)
                          // Rule at src/lower/riscv/lower.isle line 256.
                          return v66
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::D2I(rm=v169) => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Double => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v152 = C::freg_new(ctx, v61)
                          let v170 = constructor_rv_fcvt_w_d(ctx, v152, v169)
                          let v171 = C::xreg_to_reg(ctx, v170)
                          let v172 = C::mark_maybe_aliased(ctx, v171)
                          let v173 = Some(v172)
                          // Rule at src/lower/riscv/lower.isle line 354.
                          return v173
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            _ => ()
          }
        @core.Type::Double =>
          match v2 {
            @core.Op::Add => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      match v7 {
                        @core.Value::Insn(iref=v123) => {
                          let v8 = C::has_type(ctx, v6)
                          match v8.1 {
                            @core.Type::Double => {
                              let v124 = C::ref_insn(ctx, v123)
                              match v124 {
                                @core.Insn::Op(ty=v125, op=v126, args=v127) =>
                                  match v125 {
                                    @core.Type::Double =>
                                      match v126 {
                                        @core.Op::Mul => {
                                          let v128 = C::values_to_args(
                                            ctx, v127,
                                          )
                                          match v128 {
                                            Some(v129) =>
                                              match v129 {
                                                Args::Args2(
                                                  arg1=v130,
                                                  arg2=v131
                                                ) => {
                                                  let v132 = C::has_type(
                                                    ctx, v130,
                                                  )
                                                  match v132.1 {
                                                    @core.Type::Double => {
                                                      let v135 = C::has_type(
                                                        ctx, v131,
                                                      )
                                                      match v135.1 {
                                                        @core.Type::Double => {
                                                          let v138 = constructor_lower_value(
                                                            ctx,
                                                            v132.0,
                                                          )
                                                          let v139 = C::freg_new(
                                                            ctx, v138,
                                                          )
                                                          let v140 = constructor_lower_value(
                                                            ctx,
                                                            v135.0,
                                                          )
                                                          let v141 = C::freg_new(
                                                            ctx, v140,
                                                          )
                                                          let v142 = constructor_lower_value(
                                                            ctx,
                                                            v8.0,
                                                          )
                                                          let v143 = C::freg_new(
                                                            ctx, v142,
                                                          )
                                                          let v144 = constructor_rv_fmadd_d(
                                                            ctx, v139, v141, v143,
                                                          )
                                                          let v145 = C::freg_to_reg(
                                                            ctx, v144,
                                                          )
                                                          let v146 = C::mark_maybe_aliased(
                                                            ctx, v145,
                                                          )
                                                          let v147 = Some(v146)
                                                          // Rule at src/lower/riscv/lower.isle line 308.
                                                          return v147
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                }
                                                _ => ()
                                              }
                                            _ => ()
                                          }
                                        }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                      let v11 = C::has_type(ctx, v7)
                      match v11.1 {
                        @core.Type::Double => {
                          match v6 {
                            @core.Value::Insn(iref=v98) => {
                              let v99 = C::ref_insn(ctx, v98)
                              match v99 {
                                @core.Insn::Op(ty=v100, op=v101, args=v102) =>
                                  match v100 {
                                    @core.Type::Double =>
                                      match v101 {
                                        @core.Op::Mul => {
                                          let v103 = C::values_to_args(
                                            ctx, v102,
                                          )
                                          match v103 {
                                            Some(v104) =>
                                              match v104 {
                                                Args::Args2(
                                                  arg1=v105,
                                                  arg2=v106
                                                ) => {
                                                  let v107 = C::has_type(
                                                    ctx, v105,
                                                  )
                                                  match v107.1 {
                                                    @core.Type::Double => {
                                                      let v110 = C::has_type(
                                                        ctx, v106,
                                                      )
                                                      match v110.1 {
                                                        @core.Type::Double => {
                                                          let v113 = constructor_lower_value(
                                                            ctx,
                                                            v107.0,
                                                          )
                                                          let v114 = C::freg_new(
                                                            ctx, v113,
                                                          )
                                                          let v115 = constructor_lower_value(
                                                            ctx,
                                                            v110.0,
                                                          )
                                                          let v116 = C::freg_new(
                                                            ctx, v115,
                                                          )
                                                          let v117 = constructor_lower_value(
                                                            ctx,
                                                            v11.0,
                                                          )
                                                          let v118 = C::freg_new(
                                                            ctx, v117,
                                                          )
                                                          let v119 = constructor_rv_fmadd_d(
                                                            ctx, v114, v116, v118,
                                                          )
                                                          let v120 = C::freg_to_reg(
                                                            ctx, v119,
                                                          )
                                                          let v121 = C::mark_maybe_aliased(
                                                            ctx, v120,
                                                          )
                                                          let v122 = Some(v121)
                                                          // Rule at src/lower/riscv/lower.isle line 301.
                                                          return v122
                                                        }
                                                        _ => ()
                                                      }
                                                    }
                                                    _ => ()
                                                  }
                                                }
                                                _ => ()
                                              }
                                            _ => ()
                                          }
                                        }
                                        _ => ()
                                      }
                                    _ => ()
                                  }
                                _ => ()
                              }
                            }
                            _ => ()
                          }
                          let v8 = C::has_type(ctx, v6)
                          match v8.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v84 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v85 = C::freg_new(ctx, v16)
                              let v86 = constructor_rv_fadd_d(ctx, v84, v85)
                              let v87 = C::freg_to_reg(ctx, v86)
                              let v88 = C::mark_maybe_aliased(ctx, v87)
                              let v89 = Some(v88)
                              // Rule at src/lower/riscv/lower.isle line 281.
                              return v89
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Sub => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v84 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v85 = C::freg_new(ctx, v16)
                              let v90 = constructor_rv_fsub_d(ctx, v84, v85)
                              let v91 = C::freg_to_reg(ctx, v90)
                              let v92 = C::mark_maybe_aliased(ctx, v91)
                              let v93 = Some(v92)
                              // Rule at src/lower/riscv/lower.isle line 287.
                              return v93
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Mul => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v84 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v85 = C::freg_new(ctx, v16)
                              let v94 = constructor_rv_fmul_d(ctx, v84, v85)
                              let v95 = C::freg_to_reg(ctx, v94)
                              let v96 = C::mark_maybe_aliased(ctx, v95)
                              let v97 = Some(v96)
                              // Rule at src/lower/riscv/lower.isle line 293.
                              return v97
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Div => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args2(arg1=v6, arg2=v7) => {
                      let v8 = C::has_type(ctx, v6)
                      match v8.1 {
                        @core.Type::Double => {
                          let v11 = C::has_type(ctx, v7)
                          match v11.1 {
                            @core.Type::Double => {
                              let v14 = constructor_lower_value(ctx, v8.0)
                              let v84 = C::freg_new(ctx, v14)
                              let v16 = constructor_lower_value(ctx, v11.0)
                              let v85 = C::freg_new(ctx, v16)
                              let v148 = constructor_rv_fdiv_d(ctx, v84, v85)
                              let v149 = C::freg_to_reg(ctx, v148)
                              let v150 = C::mark_maybe_aliased(ctx, v149)
                              let v151 = Some(v150)
                              // Rule at src/lower/riscv/lower.isle line 330.
                              return v151
                            }
                            _ => ()
                          }
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Neg => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Double => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v152 = C::freg_new(ctx, v61)
                          let v153 = constructor_rv_fneg_d(ctx, v152)
                          let v154 = C::freg_to_reg(ctx, v153)
                          let v155 = C::mark_maybe_aliased(ctx, v154)
                          let v156 = Some(v155)
                          // Rule at src/lower/riscv/lower.isle line 336.
                          return v156
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::I2D => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Int32 => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v62 = C::xreg_new(ctx, v61)
                          let v165 = constructor_rv_fcvt_d_w(ctx, v62)
                          let v166 = C::freg_to_reg(ctx, v165)
                          let v167 = C::mark_maybe_aliased(ctx, v166)
                          let v168 = Some(v167)
                          // Rule at src/lower/riscv/lower.isle line 351.
                          return v168
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Abs => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Double => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v152 = C::freg_new(ctx, v61)
                          let v157 = constructor_rv_fabs_d(ctx, v152)
                          let v158 = C::freg_to_reg(ctx, v157)
                          let v159 = C::mark_maybe_aliased(ctx, v158)
                          let v160 = Some(v159)
                          // Rule at src/lower/riscv/lower.isle line 341.
                          return v160
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            @core.Op::Sqrt => {
              let v4 = C::values_to_args(ctx, v3)
              match v4 {
                Some(v5) =>
                  match v5 {
                    Args::Args1(arg1=v57) => {
                      let v58 = C::has_type(ctx, v57)
                      match v58.1 {
                        @core.Type::Double => {
                          let v61 = constructor_lower_value(ctx, v58.0)
                          let v152 = C::freg_new(ctx, v61)
                          let v161 = constructor_rv_fsqrt_d(ctx, v152)
                          let v162 = C::freg_to_reg(ctx, v161)
                          let v163 = C::mark_maybe_aliased(ctx, v162)
                          let v164 = Some(v163)
                          // Rule at src/lower/riscv/lower.isle line 346.
                          return v164
                        }
                        _ => ()
                      }
                    }
                    _ => ()
                  }
                _ => ()
              }
            }
            _ => ()
          }
        _ => ()
      }
    @core.Insn::Call(ty=v188, f=v189, args=v190) => {
      let v191 = C::ref_fn(ctx, v189)
      let v192 = C::lower_call(ctx, v188, v191, v190)
      let v193 = C::mark_maybe_aliased(ctx, v192)
      let v194 = Some(v193)
      // Rule at src/lower/riscv/lower.isle line 395.
      return v194
    }
    @core.Insn::Apply(ty=v195, f=v196, args=v197) => {
      let v198 = C::lower_apply(ctx, v195, v196, v197)
      let v199 = C::mark_maybe_aliased(ctx, v198)
      let v200 = Some(v199)
      // Rule at src/lower/riscv/lower.isle line 398.
      return v200
    }
    @core.Insn::ExtCall(ty=v182, ext_f=v183, args=v184) => {
      let v185 = C::lower_ext_call(ctx, v182, v183, v184)
      let v186 = C::mark_maybe_aliased(ctx, v185)
      let v187 = Some(v186)
      // Rule at src/lower/riscv/lower.isle line 392.
      return v187
    }
    @core.Insn::LoadSymbol(ty=v201, sref=v202) => {
      let v203 = C::lower_load_symbol(ctx, v201, v202)
      let v204 = C::mark_maybe_aliased(ctx, v203)
      let v205 = Some(v204)
      // Rule at src/lower/riscv/lower.isle line 401.
      return v205
    }
    @core.Insn::Alloc(ty=v217, mref=v218, fills=v219) => {
      let v220 = C::lower_alloc(ctx, v217, v218, v219)
      let v221 = C::mark_maybe_aliased(ctx, v220)
      let v222 = Some(v221)
      // Rule at src/lower/riscv/lower.isle line 410.
      return v222
    }
    @core.Insn::Store(ty=v206, ma=v207, val=v208) => {
      let v209 = C::lower_store(ctx, v206, v207, v208)
      let v210 = C::mark_maybe_aliased(ctx, v209)
      let v211 = Some(v210)
      // Rule at src/lower/riscv/lower.isle line 404.
      return v211
    }
    @core.Insn::Load(ty=v212, ma=v213) => {
      let v214 = C::lower_load(ctx, v212, v213)
      let v215 = C::mark_maybe_aliased(ctx, v214)
      let v216 = Some(v215)
      // Rule at src/lower/riscv/lower.isle line 407.
      return v216
    }
    _ => ()
  }
  None
}
