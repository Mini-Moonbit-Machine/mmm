package moonbitlang/minimbt/parser

alias @moonbitlang/minimbt as @minimbt
alias @moonbitlang/minimbt/lexer as @lexer
alias @moonbitlang/minimbt/util as @util

// Values

// Types and methods
pub struct PResult {
  pub inner : T
  pub ntokens : Int
}

pub struct Parser {
  pub tokenizer : @lexer.Lexer
  pub tracer : @util.SubTracer
  pub op : Map[String, UserOp]
  pub token : @lexer.Token?
}
impl Parser {
  get_flags(Self) -> Array[String]
  new(String, @util.SubTracer) -> Self
  next_token(Self) -> PResult[@lexer.Token]!Failure
  parse(Self) -> PResult[@minimbt.Syntax]!Failure
  parse_expr(Self) -> PResult[@minimbt.Syntax]!Failure
  parse_expr_with_level(Self, Int) -> PResult[@minimbt.Syntax]!Failure
  parse_stmt(Self, Bool) -> PResult[@minimbt.Syntax]!Failure
  parse_type(Self) -> PResult[@minimbt.Type]!Failure
}

type UserOp

// Type aliases

// Traits

// Extension Methods

