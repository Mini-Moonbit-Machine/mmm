package moonbitlang/minimbt/knf

alias @moonbitlang/core/immut/hashmap as @hashmap
alias @moonbitlang/minimbt as @minimbt
alias @moonbitlang/minimbt/util as @util

// Values
fn has_self_rec(Knf, @minimbt.Name) -> Bool

fn hoist_inv_from_def(FuncDef, @util.SubTracer) -> (FuncDef, Array[Binding])

fn is_loop(FuncDef) -> Bool

fn knf_fdef_free_vars(FuncDef) -> @moonbitlang/core/hashset.T[@minimbt.Name]

fn knf_free_vars(Knf) -> @moonbitlang/core/hashset.T[@minimbt.Name]

fn knf_max_counter(Knf) -> Int

fn loop_inv(Knf, @moonbitlang/core/immut/hashset.T[@minimbt.Name]) -> Bool

fn loop_inv_2(Knf, @moonbitlang/core/immut/hashset.T[@minimbt.Name]) -> Bool

fn loop_inv_args(Knf, @minimbt.Name, Array[@minimbt.Name]) -> @moonbitlang/core/hashset.T[@minimbt.Name]

fn tail_rec_or_trivial(Knf, @minimbt.Name) -> Bool

// Types and methods
type Binding

pub enum CallFreq {
  Zero
  Once
  Many(Int)
  AsClosure
}
impl CallFreq {
  next(Self) -> Self
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub enum DecisionTree {
  Succeed(@hashmap.T[Occurrence, String], @minimbt.Syntax)
  Fail
  Switch(Occurrence, Array[(SubPatSpec, DecisionTree)], DecisionTree?)
}
impl DecisionTree {
  to_pretty_print(Self) -> PrettyDecisionTree
}

pub struct FreeSetClosure {
  pub ctx : Map[@minimbt.Name, @moonbitlang/core/hashset.T[@minimbt.Name]]
  pub changed : Bool
}
impl FreeSetClosure {
  compute(Self, Knf) -> (@moonbitlang/core/hashset.T[@minimbt.Name], Map[@minimbt.Name, @moonbitlang/core/hashset.T[@minimbt.Name]])
  knf_fdef_free_vars_closure(Self, FuncDef) -> @moonbitlang/core/hashset.T[@minimbt.Name]
  knf_free_vars_closure(Self, Knf) -> @moonbitlang/core/hashset.T[@minimbt.Name]
  new() -> Self
}

pub struct FuncDef {
  pub name : @minimbt.Name
  pub ty : @minimbt.Type
  pub args : Array[(@minimbt.Name, @minimbt.Type)]
  pub body : Knf
}
impl FuncDef {
  from_json(Json) -> Self!
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
  to_string(Self) -> String
}

pub struct InlineEnv {
  pub knf_env : KnfEnv
  pub tracer : @util.SubTracer
}
impl InlineEnv {
  dfe(Self, Map[@minimbt.Name, CallFreq], @hashmap.T[@minimbt.Name, (Array[(@minimbt.Name, @minimbt.Type)], Knf)], Knf) -> Knf
  go(Self, Knf, Int) -> Knf
  inline(Self, Map[@minimbt.Name, CallFreq], @hashmap.T[@minimbt.Name, FuncDef], Knf) -> Knf
  new(KnfEnv, @util.SubTracer) -> Self
}

pub enum Knf {
  Unit
  Bool(Bool)
  Int(Int64)
  Double(Double)
  Neg(@minimbt.Name)
  Add(@minimbt.Name, @minimbt.Name)
  Sub(@minimbt.Name, @minimbt.Name)
  Mul(@minimbt.Name, @minimbt.Name)
  Div(@minimbt.Name, @minimbt.Name)
  FNeg(@minimbt.Name)
  FAdd(@minimbt.Name, @minimbt.Name)
  FSub(@minimbt.Name, @minimbt.Name)
  FMul(@minimbt.Name, @minimbt.Name)
  FDiv(@minimbt.Name, @minimbt.Name)
  IfEq(@minimbt.Name, @minimbt.Name, Knf, Knf)
  IfLe(@minimbt.Name, @minimbt.Name, Knf, Knf)
  Let((@minimbt.Name, @minimbt.Type), Knf, Knf)
  Var(@minimbt.Name)
  LetRec(FuncDef, Knf)
  Apply(@minimbt.Name, Array[@minimbt.Name])
  Tuple(Array[@minimbt.Name])
  LetTuple(Array[(@minimbt.Name, @minimbt.Type)], @minimbt.Name, Knf)
  UnboxedTuple(Array[@minimbt.Name])
  LetUnboxedTuple(Array[(@minimbt.Name, @minimbt.Type)], @minimbt.Name, Knf)
  Get(@minimbt.Name, @minimbt.Name)
  Put(@minimbt.Name, @minimbt.Name, @minimbt.Name)
  ExternalArray(@minimbt.Name)
  ExternalFunctionApplication(String, Array[@minimbt.Name])
}
impl Knf {
  from_json(Json) -> Self!
  op_equal(Self, Self) -> Bool
  to_json(Self) -> Json
  to_pretty_print(Self) -> PrettyKnf
  to_string(Self) -> String
}

type KnfEnv
impl KnfEnv {
  init_counter_from_existing(Self, Knf) -> Unit
  new(@hashmap.T[String, @minimbt.Type], @util.SubTracer) -> Self
  syntax_preprocess(Self, @minimbt.Syntax, Bool) -> @minimbt.Syntax
  to_knf(Self, @minimbt.Syntax) -> Knf!Failure
}

pub struct LICM {
  pub tracer : @util.SubTracer
  pub knf : Knf
}
impl LICM {
  go(Self, Int) -> Knf
  new(@util.SubTracer, Knf) -> Self
}

pub struct LambdaLiftEnv {
  pub name_ctx : @hashmap.T[@minimbt.Name, (@minimbt.Name, Array[@minimbt.Name], Array[@minimbt.Name], @minimbt.Type)]
  pub type_ctx : @hashmap.T[@minimbt.Name, @minimbt.Type]
  pub knf_env : KnfEnv
  pub tracer : @util.SubTracer
}
impl LambdaLiftEnv {
  eta_expand(Self, @minimbt.Name) -> (Array[Binding], @minimbt.Name, Self)
  new(KnfEnv, @util.SubTracer) -> Self
}

pub struct LambdaLifter {
  pub knf : Knf
  pub free_set_closure : Map[@minimbt.Name, @moonbitlang/core/hashset.T[@minimbt.Name]]
  pub knf_env : KnfEnv
  pub top_bindings : Array[Binding]
  pub top_names : @moonbitlang/core/hashset.T[@minimbt.Name]
  pub tracer : @util.SubTracer
}
impl LambdaLifter {
  go(Self) -> Knf
  new(@util.SubTracer, Knf) -> Self
}

pub struct Occurrence {
  pub order : Array[Int]
}
impl Occurrence {
  destruct(Self, Int) -> Self
  empty() -> Self
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub struct Occurrences {
  pub occurs : Array[Occurrence]
}
impl Occurrences {
  remove_col(Self, Int) -> Self
  root() -> Self
  to_string(Self) -> String
  unpack_col(Self, Int, Int) -> Self
}

pub struct PatMatrix {
  pub arity : Int
  pub occurs : Occurrences
  pub rows : Array[PatMatrixRow]
}
impl PatMatrix {
  to_string(Self) -> String
}

type PatMatrixRow
impl PatMatrixRow {
  to_string(Self) -> String
}

pub struct PatternMatcher {
  pub expr : @minimbt.Syntax
  pub tracer : @util.SubTracer
}
impl PatternMatcher {
  new(@minimbt.Syntax, @util.SubTracer) -> Self
  run(Self) -> DecisionTree
}

pub type PrettyDecisionTree DecisionTree
impl PrettyDecisionTree {
  print_one_level(Self, @util.IndentLogger, DecisionTree) -> Unit
  to_string(Self) -> String
}

type PrettyKnf
impl PrettyKnf {
  to_string(Self) -> String
}

pub enum SubPatSpec {
  Unit
  BoolLit(Bool)
  IntLit(Int64)
  DoubleLit(Double)
  Ctor(String, Int)
  Tuple(Int)
}
impl SubPatSpec {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type TupleFreq
impl TupleFreq {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct Unbox {
  pub tracer : @util.SubTracer
  pub knf : Knf
}
impl Unbox {
  go(Self) -> Knf
  new(@util.SubTracer, Knf) -> Self
}

// Type aliases
pub typealias BindCtx = @hashmap.T[Occurrence, String]

pub typealias BindEnv = @hashmap.T[Occurrence, (@minimbt.Name, @minimbt.Type)]

pub typealias LocalEnv = @hashmap.T[String, @minimbt.Type]

pub typealias MutMap[K, V] = @moonbitlang/core/hashmap.T[K, V]

pub typealias MutSet[K] = @moonbitlang/core/hashset.T[K]

pub typealias Name = @minimbt.Name

pub typealias NameEnv = @hashmap.T[String, @minimbt.Name]

pub typealias Type = @minimbt.Type

// Traits

// Extension Methods
impl Hash for Occurrence

impl Show for CallFreq

impl Show for FuncDef

impl Show for Knf

impl Show for Occurrences

impl Show for PatMatrix

impl Show for PatMatrixRow

impl Show for PrettyKnf

impl Show for TupleFreq

