(type FnRef (primitive `@core.FnRef`))
(type BlockRef (primitive `@core.BlockRef`))
(type InsnRef (primitive `@core.InsnRef`))
(type BlockParamRef (primitive `@core.BlockParamRef`))
(type FnParamRef (primitive `@core.FnParamRef`))
(type FnFreeVarRef (primitive `@core.FnFreeVarRef`))
(type LoopRef (primitive `@core.LoopRef`))
(type MemRef (primitive `@core.MemRef`))
(type SymbolRef (primitive `@core.SymbolRef`))
(type Width (primitive `@core.Width`))

(decl ref_fn (Fn) FnRef)
(extern extractor infallible ref_fn ref_fn)

(decl ref_block (Block) BlockRef)
(extern extractor infallible ref_block ref_block)

(decl ref_insn (Insn) InsnRef)
(extern extractor infallible ref_insn ref_insn)

(decl ref_mem (Mem) MemRef)
(extern extractor infallible ref_mem ref_mem)

(decl ref_free_var (UInt32) FnFreeVarRef)
(extern extractor infallible ref_free_var ref_free_v)

(decl ref_symbol (Symbol) SymbolRef)
(extern extractor infallible ref_symbol ref_symbol)

(type Types (primitive `@core.Types`))
(type Values (primitive `@core.Values`))
(type BlockRefs (primitive `@core.BlockRefs`))
(type Fills (primitive `@core.Fills`))
(type Fn (primitive `@core.Fn`))
(type BasicBlock (primitive `@core.BasicBlock`))
(type Loop (primitive `@core.Loop`))
(type Symbol (primitive `@core.Symbol`))

(type Type extern
  (enum as `@core.Type`
    Unit
    Bool
    Int32
    Int64
    Double
    (ClosureFn (params Types) (ty Type))
    (DirectFn (params Types) (ty Type))
    (Tuple (fields Types))
    (Array (elem Type))
    Ptr))

(decl pure ty_unit () Type)
(extractor (ty_unit) (Type.Unit))
(rule (ty_unit) (Type.Unit))

(decl pure ty_bool () Type)
(extractor (ty_bool) (Type.Bool))
(rule (ty_bool) (Type.Bool))

(decl pure ty_int32 () Type)
(extractor (ty_int32) (Type.Int32))
(rule (ty_int32) (Type.Int32))

(decl pure ty_int64 () Type)
(extractor (ty_int64) (Type.Int64))
(rule (ty_int64) (Type.Int64))

(decl pure ty_double () Type)
(extractor (ty_double) (Type.Double))
(rule (ty_double) (Type.Double))

(decl pure ty_closure_fn (Types Type) Type)
(extractor (ty_closure_fn) Type.ClosureFn)
(rule (ty_closure_fn params ty) (Type.ClosureFn params ty))

(decl pure ty_direct_fn (Types Type) Type)
(extractor (ty_direct_fn) Type.DirectFn)
(rule (ty_direct_fn params ty) (Type.DirectFn params ty))

(decl pure ty_tuple (Types) Type)
(extractor (ty_tuple) Type.Tuple)
(rule (ty_tuple fields) (Type.Tuple fields))

(decl pure ty_array (Type) Type)
(extractor (ty_array) Type.Array)
(rule (ty_array elem) (Type.Array elem))

(type Value extern
  (enum as `@core.Value`
    Unit
    (Bool (val Bool))
    (Double (val Double))
    (Int32 (val Int32))
    (Int64 (val Int64))
    (Insn (iref InsnRef))
    (Mem (fref FnRef) (mref MemRef))
    (Fn (fref FnRef))
    (FreeVar (ty Type) (fvref FnFreeVarRef))
    (BlockParam (bref BlockRef) (bpref BlockParamRef))
    (FnParam (fref FnRef) (fpref FnParamRef))
    (Self (fref FnRef))))

(decl pure val_unit () Value)
(extractor (val_unit) (Value.Unit))

(decl pure val_bool (Bool) Value)
(extractor (val_bool x) (Value.Bool x))

(decl pure val_double (Double) Value)
(extractor (val_double x) (Value.Double x))

(decl pure val_int32 (Int32) Value)
(extractor (val_int32 x) (Value.Int32 x))

(decl pure val_int64 (Int64) Value)
(extractor (val_int64 x) (Value.Int64 x))

(decl pure val_insn (InsnRef) Value)
(extractor (val_insn iref) (Value.Insn iref))

(decl pure val_mem (FnRef MemRef) Value)
(extractor (val_mem fref mref) (Value.Mem fref mref))

(decl pure val_fn (FnRef) Value)
(extractor (val_fn fref) (Value.Fn fref))

(decl pure val_free_var (Type FnFreeVarRef) Value)
(extractor (val_free_var ty fvref) (Value.FreeVar ty fvref))

(decl pure val_block_param (BlockRef BlockParamRef) Value)
(extractor (val_block_param bref bpref) (Value.BlockParam bref bpref))

(decl pure val_fn_param (FnRef FnParamRef) Value)
(extractor (val_fn_param fref fpref) (Value.FnParam fref fpref))

(decl pure val_self (FnRef) Value)
(extractor (val_self fref) (Value.Self fref))

(type RoundMode extern
  (enum as `@core.RoundMode`
    Rne
    Rtz
    Rdn
    Rup
    Rmm))

(decl pure round_rne () RoundMode)
(extractor (round_rne) (RoundMode.Rne))
(rule (round_rne) (RoundMode.Rne))

(decl pure round_rtz () RoundMode)
(extractor (round_rtz) (RoundMode.Rtz))
(rule (round_rtz) (RoundMode.Rtz))

(decl pure round_rdn () RoundMode)
(extractor (round_rdn) (RoundMode.Rdn))
(rule (round_rdn) (RoundMode.Rdn))

(decl pure round_rup () RoundMode)
(extractor (round_rup) (RoundMode.Rup))
(rule (round_rup) (RoundMode.Rup))

(type Op extern
  (enum as `@core.Op`
    Add
    Sub
    Mul
    Div
    Neg
    Lnot
    Eq
    Le
    I2D
    (D2I (rm RoundMode))
    Abs
    Sqrt))

(decl pure op_add () Op)
(extractor (op_add) (Op.Add))

(decl pure op_sub () Op)
(extractor (op_sub) (Op.Sub))

(decl pure op_mul () Op)
(extractor (op_mul) (Op.Mul))

(decl pure op_div () Op)
(extractor (op_div) (Op.Div))

(decl pure op_neg () Op)
(extractor (op_neg) (Op.Neg))

(decl pure op_lnot () Op)
(extractor (op_lnot) (Op.Lnot))

(decl pure op_eq () Op)
(extractor (op_eq) (Op.Eq))

(decl pure op_le () Op)
(extractor (op_le) (Op.Le))

(decl pure op_i2d () Op)
(extractor (op_i2d) (Op.I2D))

(decl pure op_d2i (RoundMode) Op)
(extractor (op_d2i rm) (Op.D2I rm))

(decl pure op_abs () Op)
(extractor (op_abs) (Op.Abs))

(decl pure op_sqrt () Op)
(extractor (op_sqrt) (Op.Sqrt))

(type Insn extern
  (enum as `@core.Insn`
    (Op (ty Type) (op Op) (args Values))
    (Call (ty Type) (f FnRef) (args Values))
    (Apply (ty Type) (f Value) (args Values))
    (ExtCall (ty Type) (ext_f String) (args Values))
    (LoadSymbol (ty Type) (sref SymbolRef))
    (Alloc (ty Type) (mref MemRef) (fills Fills))
    (Store (ty Type) (ma Address) (val Value))
    (Load (ty Type) (ma Address))))

(decl pure insn_op (Type Op Values) Insn)
(extractor (insn_op ty op vals) (Insn.Op ty op vals))

(decl pure insn_call (Type FnRef Values) Insn)
(extractor (insn_call ty f args) (Insn.Call ty f args))

(decl pure insn_apply (Type Value Values) Insn)
(extractor (insn_apply ty f args) (Insn.Apply ty f args))

(decl pure insn_ext_call (Type String Values) Insn)
(extractor (insn_ext_call ty ext_f args) (Insn.ExtCall ty ext_f args))

(decl pure insn_load_symbol (Type SymbolRef) Insn)
(extractor (insn_load_symbol ty sym) (Insn.LoadSymbol ty sym))

(decl pure insn_alloc (Type MemRef Fills) Insn)
(extractor (insn_alloc ty mref fills) (Insn.Alloc ty mref fills))

(decl pure insn_store (Type Address Value) Insn)
(extractor (insn_store ty ma val) (Insn.Store ty ma val))

(decl pure insn_load (Type Address) Insn)
(extractor (insn_load ty ma) (Insn.Load ty ma))

(type Fill extern
  (enum as `@core.Fill`
    Zero
    (Init (val Value))
    (Field (index Int32) (val Value))
    (Offset (offset Value) (val Value))))

(decl pure fill_zero () Fill)
(extractor (fill_zero) (Fill.Zero))

(decl pure fill_init (Value) Fill)
(extractor (fill_init val) (Fill.Init val))

(decl pure fill_field (Int32 Value) Fill)
(extractor (fill_field index val) (Fill.Field index val))

(decl pure fill_offset (Value Value) Fill)
(extractor (fill_offset offset val) (Fill.Offset offset val))

(type Mem extern
  (enum as `@core.Mem`
    (Heap (ty Type) (len Value))
    (Stack (ty Type) (len Value))))

(decl pure mem_heap (Type Value) Mem)
(extractor (mem_heap ty len) (Mem.Heap ty len))

(decl pure mem_stack (Type Value) Mem)
(extractor (mem_stack ty len) (Mem.Stack ty len))

(type Address extern
  (enum as `@core.Address`
    (Field (ty Type) (val Value) (index Int32) (width Width))
    (Offset (ty Type) (val Value) (offset Int32) (width Width))))

(decl pure addr_field (Type Value Int32 Width) Address)
(extractor (addr_field ty val index width) (Address.Field ty val index width))

(decl pure addr_offset (Type Value Int32 Width) Address)
(extractor (addr_offset ty val offset width) (Address.Offset ty val offset width))

(type Control extern
  (enum as `@core.Control`
    (Jump (target BlockRef) (args Values))
    (Return (args Values))
    (Branch (cond Value) (t BlockRef) (t_args Values) (f BlockRef) (f_args Values))
    (Select (cond Value) (targets BlockRefs) (args Values))
    Panic))

(decl pure control_jump (BlockRef Values) Control)
(extractor (control_jump target args) (Control.Jump target args))

(decl pure control_return (Values) Control)
(extractor (control_return args) (Control.Return args))

(decl pure control_branch (Value BlockRef Values BlockRef Values) Control)
(extractor (control_branch cond t t_args f f_args) (Control.Branch cond t t_args f f_args))

(decl pure control_select (Value BlockRefs Values) Control)
(extractor (control_select cond targets args) (Control.Select cond targets args))

(decl pure control_panic () Control)
(extractor (control_panic) Control.Panic)

(type Block extern
  (enum as `@core.Block`
    (BasicBlock (bb BasicBlock))
    (Loop (l Loop))))

(decl pure i64_sext_u64 (Type UInt64) Int64)
(extern constructor i64_sext_u64 i64_sext_u64)

(decl pure i32_as_u64 (Int32) UInt64)
(extern constructor i32_as_u64 i32_as_u64)

(decl pure i64_as_u64 (Int64) UInt64)
(extern constructor i64_as_u64 i64_as_u64)

(decl pure f64_as_u64 (Double) UInt64)
(extern constructor f64_as_u64 f64_as_u64)

(type Args
  (enum
    (Args2 (arg1 Value) (arg2 Value))
    (Args1 (arg1 Value))
    (Args0)))

(decl pure arg2 (Value Value) Args)
(rule (arg2 arg1 arg2) (Args.Args2 arg1 arg2))
(extractor (arg2 arg1 arg2) (Args.Args2 arg1 arg2))

(decl pure arg1 (Value) Args)
(rule (arg1 arg1) (Args.Args1 arg1))
(extractor (arg1 arg1) (Args.Args1 arg1))

(decl pure arg0 () Args)
(rule (arg0) (Args.Args0))
(extractor (arg0) (Args.Args0))

(decl args (Args) Values)
(extern extractor args values_to_args)
(convert Args Values args)

(decl val_is_insn (Insn) Value)
(extractor (val_is_insn insn) (val_insn (ref_insn insn)))

(decl has_type (Value Type) Value)
(extern extractor infallible has_type has_type)
