package moonbitlang/minimbt/core

alias @moonbitlang/minimbt as @minimbt
alias @moonbitlang/minimbt/knf as @knf
alias @moonbitlang/minimbt/util as @util

// Values
fn block_param(BlockRef, Int) -> Value

fn fn_param(FnRef, Int) -> Value

fn replace_all(Fn, BasicBlock, ~map : (Value) -> Value) -> Unit

// Types and methods
pub enum Address {
  Field(Type, Value, Int, Width)
  Offset(Type, Value, Value, Width)
  Raw(Type, Value, Value)
}
impl Address {
  op_equal(Self, Self) -> Bool
  replace(Self, (Value) -> Value) -> Self
  to_string(Self) -> String
}

pub struct BasicBlock {
  pub id : BlockRef
  pub params : Array[Type]
  pub seq : Array[InsnRef]
  pub control : Control
}
impl BasicBlock {
  to_string(Self) -> String
}

pub enum Block {
  BasicBlock(BasicBlock)
  Loop(Loop)
}
impl Block {
  all_basic_blocks(Self, Fn) -> Array[BasicBlock]
  bb_or_header_bb(Self, Fn) -> BasicBlock
  is_basic_block(Self) -> Bool
  to_string(Self) -> String
}

pub type BlockParamRef Id
impl BlockParamRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub type BlockRef Id
impl BlockRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub enum Control {
  Jump(BlockRef, Array[Value])
  Return(Array[Value])
  Branch(Value, BlockRef, Array[Value], BlockRef, Array[Value])
  Select(Value, Array[BlockRef], Array[Value])
  Panic
}
impl Control {
  op_equal(Self, Self) -> Bool
  replace(Self, (Value) -> Value) -> Self
  successors(Self) -> Array[BlockRef]
  to_string(Self) -> String
}

pub struct Core {
  pub names : @moonbitlang/core/hashmap.T[String, FnRef]
  pub funcs : @moonbitlang/core/hashmap.T[FnRef, Fn]
  pub global_names : Array[(String, SymbolRef)]
  pub global_symbols : @moonbitlang/core/hashmap.T[SymbolRef, Symbol]
}
impl Core {
  to_pretty_print(Self) -> PrettyCore
  to_string(Self) -> String
}

pub struct CoreEnv {
  pub func_counter : Ref[Int]
  pub func_fvar_counter : Int
  pub func_insn_counter : Int
  pub func_block_counter : Int
  pub func_mem_counter : Int
  pub sym_counter : Int
  pub tracer : @util.SubTracer
}
impl CoreEnv {
  build(Self, @knf.Knf) -> Core!Failure
  inherit(Self) -> Self
  new(@util.SubTracer) -> Self
}

pub struct Ctx {
  pub ty_ctx : @moonbitlang/core/immut/hashmap.T[@minimbt.Name, Type]
  pub name_ctx : @moonbitlang/core/immut/hashmap.T[@minimbt.Name, Value]
  pub top_fn_ctx : @moonbitlang/core/immut/hashmap.T[@minimbt.Name, FnRef]
  pub top_fref_name_ctx : @moonbitlang/core/immut/hashmap.T[FnRef, @minimbt.Name]
  pub top_sym_ctx : @moonbitlang/core/immut/hashmap.T[@minimbt.Name, SymbolRef]
  pub rename_ctx : @moonbitlang/core/immut/hashmap.T[@minimbt.Name, @minimbt.Name]
}
impl Ctx {
  to_string(Self) -> String
}

pub enum Fill {
  Zero
  Init(Value)
  Field(Int, Value)
}
impl Fill {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  replace(Self, (Value) -> Value) -> Self
  to_string(Self) -> String
}

pub struct Fn {
  pub id : FnRef
  pub name : String
  pub ty : Type
  pub fvars : Array[Type]
  pub entry : BlockRef
  pub blocks : @moonbitlang/core/hashmap.T[BlockRef, Block]
  pub insns : @moonbitlang/core/hashmap.T[InsnRef, Insn]
  pub mems : @moonbitlang/core/hashmap.T[MemRef, Mem]
}
impl Fn {
  next_block_id(Self) -> Id
  to_pretty_print(Self) -> PrettyFn
  to_string(Self) -> String
}

pub type FnFreeVarRef Id
impl FnFreeVarRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub type FnParamRef Id
impl FnParamRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub type FnRef Id
impl FnRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type FreeNames

pub struct Id {
  pub id : Int
}
impl Id {
  hash_combine(Self, Hasher) -> Unit
  new(Int) -> Self
  op_equal(Self, Self) -> Bool
  shift(Self, Int) -> Self
  to_string(Self) -> String
}

pub enum Insn {
  Op(Type, Op, Array[Value])
  Call(Type, FnRef, Array[Value])
  Apply(Type, Value, Array[Value])
  ExtCall(Type, String, Array[Value])
  LoadSymbol(Type, SymbolRef)
  Alloc(Type, MemRef, Array[Fill])
  Store(Type, Address, Value)
  Load(Type, Address)
  ComputeAddress(Address)
}
impl Insn {
  effectful(Self) -> Bool
  op_equal(Self, Self) -> Bool
  replace(Self, (Value) -> Value) -> Self
  to_string(Self) -> String
  ty(Self) -> Type
}

pub type InsnRef Id
impl InsnRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub struct Loop {
  pub id : BlockRef
  pub pre_header : BlockRef?
  pub header : BlockRef
  pub blocks : Array[BlockRef]
}
impl Loop {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub enum Mem {
  Heap(Type, Value)
  Stack(Type, Value)
}
impl Mem {
  op_equal(Self, Self) -> Bool
  replace(Self, (Value) -> Value) -> Self
  to_string(Self) -> String
}

pub type MemRef Id
impl MemRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub enum Op {
  Add
  Sub
  Mul
  Div
  Neg
  Lnot
  Eq
  Le
  I2D
  D2I(RoundMode)
  Abs
  Sqrt
}
impl Op {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct PrettyCore {
  pub core : Core
}
impl PrettyCore {
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub struct PrettyFn {
  pub func : Fn
}
impl PrettyFn {
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub enum RoundMode {
  Rne
  Rtz
  Rdn
  Rup
  Rmm
}
impl RoundMode {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
}

pub struct Symbol {
  pub id : SymbolRef
  pub name : String
  pub ty : Type
  pub thunk : FnRef
}
impl Symbol {
  to_string(Self) -> String
}

pub type SymbolRef Id
impl SymbolRef {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub enum Type {
  Unit
  Bool
  Int32
  Int64
  Double
  ClosureFn(Array[Type], Type)
  DirectFn(Array[Type], Type)
  Tuple(Array[Type])
  Array(Type)
  Ptr
}
impl Type {
  elem_size_of_ilp32(Self) -> Int
  elem_size_of_lp64(Self) -> Int
  elem_width(Self) -> Width?
  op_equal(Self, Self) -> Bool
  size_of_ilp32(Self) -> Int
  size_of_lp64(Self) -> Int
  to_string(Self) -> String
  width(Self) -> Width
}

pub enum Value {
  Unit
  Bool(Bool)
  Int32(Int)
  Int64(Int64)
  Double(Double)
  Insn(InsnRef)
  Mem(FnRef, MemRef)
  Fn(FnRef)
  FreeVar(FnFreeVarRef)
  BlockParam(BlockRef, BlockParamRef)
  FnParam(FnRef, FnParamRef)
  Self(FnRef)
}
impl Value {
  op_equal(Self, Self) -> Bool
  replace_all_uses_with(Self, Fn, BasicBlock, Self) -> Unit
  to_string(Self) -> String
  ty(Self, Core, Fn) -> Type!Failure
}

pub enum Width {
  WidthPtr
  Width64
  Width32
  Mix(Width, Width)
}
impl Width {
  hash_combine(Self, Hasher) -> Unit
  op_equal(Self, Self) -> Bool
  size_of_ilp32(Self) -> Int
  size_of_lp64(Self) -> Int
}

// Type aliases
pub typealias Fills = Array[Fill]

pub typealias MutMap[K, V] = @moonbitlang/core/hashmap.T[K, V]

pub typealias Types = Array[Type]

pub typealias Values = Array[Value]

// Traits

// Extension Methods
impl Hash for Address

impl Hash for Insn

impl Hash for Value

impl Show for Address

impl Show for BasicBlock

impl Show for Block

impl Show for Control

impl Show for Core

impl Show for Ctx

impl Show for Fill

impl Show for Fn

impl Show for Id

impl Show for Insn

impl Show for Loop

impl Show for Mem

impl Show for Op

impl Show for RoundMode

impl Show for Symbol

impl Show for Type

impl Show for Value

impl Show for Width

