package moonbitlang/minimbt/core_opt

alias @moonbitlang/minimbt/core as @core
alias @moonbitlang/minimbt/core_analysis as @core_analysis
alias @moonbitlang/minimbt/util as @util

// Values

// Types and methods
pub struct BasicBlockFloatOffset {
  pub func : @core.Fn
  pub bb : @core.BasicBlock
  pub insn_counter : Int
  pub tracer : @util.SubTracer
}
impl BasicBlockFloatOffset {
  go(Self) -> Unit
  new(@core.Fn, @core.BasicBlock, @util.SubTracer) -> Self
}

pub struct CoreOpt {
  pub core : @core.Core
  pub tracer : @util.SubTracer
}
impl CoreOpt {
  go(Self) -> Unit
  new(@core.Core, @util.SubTracer) -> Self
}

pub struct CoreOpt2 {
  pub core : @core.Core
  pub tracer : @util.SubTracer
}
impl CoreOpt2 {
  go(Self) -> Unit
  new(@core.Core, @util.SubTracer) -> Self
}

pub struct FloatOffset {
  pub core : @core.Core
  pub tracer : @util.SubTracer
}
impl FloatOffset {
  go(Self) -> Unit
  new(@core.Core, @util.SubTracer) -> Self
}

pub struct FnCounter {
  pub fvar_counter : Int
  pub insn_counter : Int
  pub block_counter : Int
  pub mem_counter : Int
}
impl FnCounter {
  new() -> Self
  new_from_existing(@core.Fn) -> Self
}

pub struct FnInliner {
  pub core : @core.Core
  pub func : @core.Fn
  pub fcf : @core_analysis.FnCallFreq
  pub tracer : @util.SubTracer
}
impl FnInliner {
  new(@core.Core, @core.Fn, @core_analysis.FnCallFreq, @util.SubTracer) -> Self
  split_bb_at_call(Self, @core.BasicBlock, @core.InsnRef, Int) -> @core.BlockRef?
}

pub struct FnTailRecElim {
  pub func : @core.Fn
  pub tracer : @util.SubTracer
}
impl FnTailRecElim {
  new(@core.Fn, @util.SubTracer) -> Self
  update_old_entry_basic_block(Self, @core.BasicBlock) -> Unit
}

pub struct Inliner {
  pub core : @core.Core
  pub fcf : @core_analysis.FnCallFreq
  pub tracer : @util.SubTracer
}
impl Inliner {
  go(Self) -> Unit
  new(@core.Core, @core_analysis.FnCallFreq, @util.SubTracer) -> Self
}

pub struct LocalValueNumbering {
  pub core : @core.Core
  pub tracer : @util.SubTracer
}
impl LocalValueNumbering {
  go(Self) -> Unit
  new(@core.Core, @util.SubTracer) -> Self
}

pub struct Numbering {
  pub func : @core.Fn
  pub bb : @core.BasicBlock
  pub tracer : @util.SubTracer
}
impl Numbering {
  go(Self) -> Unit
  new(@core.Fn, @core.BasicBlock, @util.SubTracer) -> Self
}

pub struct Offset2Field {
  pub core : @core.Core
}
impl Offset2Field {
  go(Self) -> Unit
  new(@core.Core) -> Self
}

pub struct Renamer {
  pub func : @core.Fn
  pub counter : FnCounter
  pub tracer : @util.SubTracer
}
impl Renamer {
  new(@core.Fn, FnCounter, @util.SubTracer) -> Self
  shift(Self) -> @core.Fn
}

pub struct TailRecElim {
  pub core : @core.Core
  pub tracer : @util.SubTracer
}
impl TailRecElim {
  go(Self) -> Unit
  new(@core.Core, @util.SubTracer) -> Self
}

// Type aliases

// Traits

// Extension Methods

