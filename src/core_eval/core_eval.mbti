package moonbitlang/minimbt/core_eval

alias @moonbitlang/minimbt/core as @core
alias @moonbitlang/minimbt/util as @util

// Values

// Types and methods
pub struct CoreInterpreter {
  pub tracer : @util.SubTracer
}
impl CoreInterpreter {
  interpret(Self, @core.Core) -> Unit!Failure
  new(@util.SubTracer) -> Self
}

pub struct Ctx {
  pub heap : @moonbitlang/core/hashmap.T[(@core.FnRef, @core.MemRef), Object]
  pub stack : @moonbitlang/core/immut/hashmap.T[@core.MemRef, Object]
  pub global : @moonbitlang/core/immut/hashmap.T[@core.SymbolRef, Object]
  pub funcs : @moonbitlang/core/hashmap.T[@core.FnRef, @core.Fn]
  pub insns : @moonbitlang/core/immut/hashmap.T[@core.InsnRef, Object]
  pub blkargs : @moonbitlang/core/immut/hashmap.T[@core.BlockRef, Array[Object]]
  pub fnargs : Array[Object]
  pub closure : Object
}
impl Ctx {
  to_string(Self) -> String
}

type Object
impl Object {
  to_string(Self) -> String
}

// Type aliases

// Traits

// Extension Methods
impl Show for Ctx

impl Show for Object

