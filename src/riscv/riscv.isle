(type Output (primitive Output))
(type RegId (primitive RegId))
(type Reg (primitive Reg))
(type FReg (primitive FReg))
(type Label (primitive Label))
(type MemAccess (primitive MemAccessRegInt32))
(type String (primitive String))

(type RvAsm extern
  (enum
    (Add (rd Reg) (rs1 Reg) (rs2 Reg))
    (Sub (rd Reg) (rs1 Reg) (rs2 Reg))
    (Xor (rd Reg) (rs1 Reg) (rs2 Reg))
    (Or (rd Reg) (rs1 Reg) (rs2 Reg))
    (And (rd Reg) (rs1 Reg) (rs2 Reg))
    (Sll (rd Reg) (rs1 Reg) (rs2 Reg))
    (Srl (rd Reg) (rs1 Reg) (rs2 Reg))
    (Sra (rd Reg) (rs1 Reg) (rs2 Reg))
    (Slt (rd Reg) (rs1 Reg) (rs2 Reg))
    (Sltu (rd Reg) (rs1 Reg) (rs2 Reg))
    (Addi (rd Reg) (rs1 Reg) (imm Int32))
    (Xori (rd Reg) (rs1 Reg) (imm Int32))
    (Ori (rd Reg) (rs1 Reg) (imm Int32))
    (Andi (rd Reg) (rs1 Reg) (imm Int32))
    (Slli (rd Reg) (rs1 Reg) (imm Int32))
    (Srli (rd Reg) (rs1 Reg) (imm Int32))
    (Srai (rd Reg) (rs1 Reg) (imm Int32))
    (Slti (rd Reg) (rs1 Reg) (imm Int32))
    (Sltiu (rd Reg) (rs1 Reg) (imm Int32))
    (Lb (rd Reg) (mem MemAccess))
    (Lh (rd Reg) (mem MemAccess))
    (Lw (rd Reg) (mem MemAccess))
    (Ld (rd Reg) (mem MemAccess))
    (Lbu (rd Reg) (mem MemAccess))
    (Lhu (rd Reg) (mem MemAccess))
    (Lwu (rd Reg) (mem MemAccess))
    (Sb (rs Reg) (mem MemAccess))
    (Sh (rs Reg) (mem MemAccess))
    (Sw (rs Reg) (mem MemAccess))
    (Sd (rs Reg) (mem MemAccess))
    (Beq (rs1 Reg) (rs2 Reg) (target Label))
    (Bne (rs1 Reg) (rs2 Reg) (target Label))
    (Blt (rs1 Reg) (rs2 Reg) (target Label))
    (Bge (rs1 Reg) (rs2 Reg) (target Label))
    (Ble (rs1 Reg) (rs2 Reg) (target Label))
    (Bgt (rs1 Reg) (rs2 Reg) (target Label))
    (Bltu (rs1 Reg) (rs2 Reg) (target Label))
    (Bgeu (rs1 Reg) (rs2 Reg) (target Label))
    (Ecall)
    (Mul (rd Reg) (rs1 Reg) (rs2 Reg))
    (Mulw (rd Reg) (rs1 Reg) (rs2 Reg))
    (Mulh (rd Reg) (rs1 Reg) (rs2 Reg))
    (Mulhsu (rd Reg) (rs1 Reg) (rs2 Reg))
    (Mulhu (rd Reg) (rs1 Reg) (rs2 Reg))
    (Div (rd Reg) (rs1 Reg) (rs2 Reg))
    (Divw (rd Reg) (rs1 Reg) (rs2 Reg))
    (Divu (rd Reg) (rs1 Reg) (rs2 Reg))
    (Rem (rd Reg) (rs1 Reg) (rs2 Reg))
    (Remw (rd Reg) (rs1 Reg) (rs2 Reg))
    (Remu (rd Reg) (rs1 Reg) (rs2 Reg))
    (FaddD (rd FReg) (rs1 FReg) (rs2 FReg))
    (FsubD (rd FReg) (rs1 FReg) (rs2 FReg))
    (FmulD (rd FReg) (rs1 FReg) (rs2 FReg))
    (FdivD (rd FReg) (rs1 FReg) (rs2 FReg))
    (Fld (rd FReg) (mem MemAccess))
    (Fsd (rs FReg) (mem MemAccess))
    (FbeqD (rs1 FReg) (rs2 FReg) (target Label))
    (FbleD (rs1 FReg) (rs2 FReg) (target Label))
    (FmvDX (rd FReg) (rs Reg))
    (Nop)
    (La (rd Reg) (l Label))
    (Li (rd Reg) (i String))
    (Neg (rd Reg) (rs Reg))
    (FnegD (rd FReg) (rs FReg))
    (Mv (rd Reg) (rs Reg))
    (FmvD (rd FReg) (rs FReg))
    (J (target Label))
    (Jalr (target Reg))
    (Jr (target Reg))
    (Call (target Label))
    (Tail (target Label))
    Ret))

(decl next_virtual_reg () Reg)
(extern constructor next_virtual_reg next_virtual_reg)

(decl next_virtual_freg () FReg)
(extern constructor next_virtual_freg next_virtual_freg)

(decl emit_risc_v (RvAsm) Unit)
(extern constructor emit_risc_v emit_risc_v)

(decl output_reg (Reg) Output)
(extern constructor output_reg output_reg)

(decl output_freg (FReg) Output)
(extern constructor output_freg output_freg)

(decl rv_add (Reg Reg) Reg)
(rule (rv_add x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Add dst x y))))
    dst))

(decl rv_sub (Reg Reg) Reg)
(rule (rv_sub x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Sub dst x y))))
    dst))

(decl rv_xor (Reg Reg) Reg)
(rule (rv_xor x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Xor dst x y))))
    dst))

(decl rv_or (Reg Reg) Reg)
(rule (rv_or x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Or dst x y))))
    dst))

(decl rv_and (Reg Reg) Reg)
(rule (rv_and x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.And dst x y))))
    dst))

(decl rv_sll (Reg Reg) Reg)
(rule (rv_sll x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Sll dst x y))))
    dst))

(decl rv_srl (Reg Reg) Reg)
(rule (rv_srl x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Srl dst x y))))
    dst))

(decl rv_sra (Reg Reg) Reg)
(rule (rv_sra x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Sra dst x y))))
    dst))

(decl rv_slt (Reg Reg) Reg)
(rule (rv_slt x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Slt dst x y))))
    dst))

(decl rv_sltu (Reg Reg) Reg)
(rule (rv_sltu x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Sltu dst x y))))
    dst))

(decl rv_addi (Reg Int32) Reg)
(rule (rv_addi x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Addi dst x y))))
    dst))

(decl rv_xori (Reg Int32) Reg)
(rule (rv_xori x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Xori dst x y))))
    dst))

(decl rv_ori (Reg Int32) Reg)
(rule (rv_ori x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Ori dst x y))))
    dst))

(decl rv_andi (Reg Int32) Reg)
(rule (rv_andi x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Andi dst x y))))
    dst))

(decl rv_slli (Reg Int32) Reg)
(rule (rv_slli x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Slli dst x y))))
    dst))

(decl rv_srli (Reg Int32) Reg)
(rule (rv_srli x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Srli dst x y))))
    dst))

(decl rv_srai (Reg Int32) Reg)
(rule (rv_srai x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Srai dst x y))))
    dst))

(decl rv_slti (Reg Int32) Reg)
(rule (rv_slti x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Slti dst x y))))
    dst))

(decl rv_sltiu (Reg Int32) Reg)
(rule (rv_sltiu x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Sltiu dst x y))))
    dst))

(decl rv_lb (MemAccess) Reg)
(rule (rv_lb x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Lb dst x))))
    dst))

(decl rv_lh (MemAccess) Reg)
(rule (rv_lh x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Lh dst x))))
    dst))

(decl rv_lw (MemAccess) Reg)
(rule (rv_lw x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Lw dst x))))
    dst))

(decl rv_ld (MemAccess) Reg)
(rule (rv_ld x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Ld dst x))))
    dst))

(decl rv_mul (Reg Reg) Reg)
(rule (rv_mul x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Mul dst x y))))
    dst))

(decl rv_mulw (Reg Reg) Reg)
(rule (rv_mulw x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Mulw dst x y))))
    dst))

(decl rv_mulh (Reg Reg) Reg)
(rule (rv_mulh x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Mulh dst x y))))
    dst))

(decl rv_mulhsu (Reg Reg) Reg)
(rule (rv_mulhsu x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Mulhsu dst x y))))
    dst))

(decl rv_mulhu (Reg Reg) Reg)
(rule (rv_mulhu x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Mulhu dst x y))))
    dst))

(decl rv_div (Reg Reg) Reg)
(rule (rv_div x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Div dst x y))))
    dst))

(decl rv_divw (Reg Reg) Reg)
(rule (rv_divw x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Divw dst x y))))
    dst))

(decl rv_divu (Reg Reg) Reg)
(rule (rv_divu x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Divu dst x y))))
    dst))

(decl rv_rem (Reg Reg) Reg)
(rule (rv_rem x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Rem dst x y))))
    dst))

(decl rv_remu (Reg Reg) Reg)
(rule (rv_remu x y)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Remu dst x y))))
    dst))

(decl rv_fadd_d (FReg FReg) FReg)
(rule (rv_fadd_d x y)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.FaddD dst x y))))
    dst))

(decl rv_fsub_d (FReg FReg) FReg)
(rule (rv_fsub_d x y)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.FsubD dst x y))))
    dst))

(decl rv_fmul_d (FReg FReg) FReg)
(rule (rv_fmul_d x y)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.FmulD dst x y))))
    dst))

(decl rv_fdiv_d (FReg FReg) FReg)
(rule (rv_fdiv_d x y)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.FdivD dst x y))))
    dst))

(decl rv_fld (MemAccess) FReg)
(rule (rv_fld x)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.Fld dst x))))
    dst))

(decl rv_f_mv_dx (Reg) FReg)
(rule (rv_f_mv_dx x)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.FmvDX dst x))))
    dst))

(decl rv_la (Label) Reg)
(rule (rv_la x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.La dst x))))
    dst))

(decl rv_li (String) Reg)
(rule (rv_li x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Li dst x))))
    dst))

(decl rv_neg (Reg) Reg)
(rule (rv_neg x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Neg dst x))))
    dst))

(decl rv_fneg_d (FReg) FReg)
(rule (rv_fneg_d x)
  (let ((dst FReg (next_virtual_freg))
        (_ Unit (emit_risc_v (RvAsm.FnegD dst x))))
    dst))

(decl rv_mv (Reg) Reg)
(rule (rv_mv x)
  (let ((dst Reg (next_virtual_reg))
        (_ Unit (emit_risc_v (RvAsm.Mv dst x))))
    dst))
