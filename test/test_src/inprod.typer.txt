let rec getx: (v: (Double, Double, Double)) -> Double {
  let (x: Double, _: Double, _: Double) = Var("v")
  Var(x)
}
let rec gety: (v: (Double, Double, Double)) -> Double {
  let (_: Double, y: Double, _: Double) = Var("v")
  Var(y)
}
let rec getz: (v: (Double, Double, Double)) -> Double {
  let (_: Double, _: Double, z: Double) = Var("v")
  Var(z)
}
let rec inprod: (v1: (Double, Double, Double), v2: (Double, Double, Double)) -> Double {
  Prim(Prim(App(Var("getx"), targs=Some([]), [Var("v1")]), App(Var("getx"), targs=Some([]), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), targs=Some([]), [Var("v1")]), App(Var("gety"), targs=Some([]), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)) + Prim(App(Var("getz"), targs=Some([]), [Var("v1")]), App(Var("getz"), targs=Some([]), [Var("v2")]), Mul, kind=Some(Double))
}
let rec main: () -> Unit {
  Apply[](Var("print_int"), [App(Var("truncate"), targs=Some([]), [Prim(Double(1000000), App(Var("inprod"), targs=Some([]), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))]), ])
}
Unit
