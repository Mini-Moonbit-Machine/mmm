# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn landins_knot.3 #f1 : fn(closure(closure(int32) -> int32) -> closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f0
    let _ = alloc <m1: array[closure(int32) -> int32] heap(1)> <- [..] = f1.m0
    let _ = alloc <m2: closure(int32) -> int32 heap(2)> <- [0] = f5, [1] = f1.m1
    let %3: closure(int32) -> int32 = apply $f0(f1.m2)
    let _ = store closure(int32) -> int32 offset(f1.m1, 0 * @ptr) <- %3
    return %3
  }
}
.fn aux.7 #f5 : closure(int32) -> int32
.freevars (array[closure(int32) -> int32])
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load closure(int32) -> int32 offset(^1, 0 * @ptr)
    let %1: int32 = apply %0($f0)
    return %1
  }
}
.fn g.14 #f2 : fn(closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f8, [1] = $f0
    return f2.m0
  }
}
.fn main.30 #f18 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f12()
    let %1: int32 = load_symbol ::2
    let %2: int32 = add(10, %1)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: int32 = load_symbol ::2
    let %5: int32 = add(31, %4)
    let %6: unit = ext_call minimbt_print_int(%5)
    return %6
  }
}
.fn dummy.1 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.fn T$factorial.22 #f10 : fn() -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(closure(int32) -> int32) -> closure(int32) -> int32 heap(1)> <- [0] = f2
    let %1: closure(int32) -> int32 = call f1(f10.m0)
    return %1
  }
}
.fn T$_26 #f14 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn h.16 #f8 : closure(int32) -> int32
.freevars (closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = apply ^1(%1)
    let %3: int32 = mul($f0, %2)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn T$a.27 #f16 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let %2: int32 = apply %0(%1)
    return %2
  }
}
.fn T$start #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f18()
    return %0
  }
}
.fn f1.23 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::0
    let %1: int32 = apply %0(5)
    let %2: unit = ext_call minimbt_print_int(%1)
    return %2
  }
}
.thunk ::0 factorial.22
.thunk ::1 _26
.thunk ::2 a.27
.thunk ::3 start
