// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init4_6"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v2-> 1:zero-> 2:v4-> 3:a0"
// [Asm]   comment = "v2<-a0;v4<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init4_6"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v2, len.3 ->   ld a0, len.3
// [Asm] subst   li v4, 1 ->   li a1, 1
// [Asm] subst   sw v4, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_12_12"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   comment = "0:a0"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_12_12"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a1, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$len.34"];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v2 ← s0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="v4 ← a2", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r5;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r2 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v3-> 1:s11-> 2:v4-> 3:v6-> 4:v7-> 5:v2-> 6:a1-> 7:a0-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7"
// [Asm]   comment = "v3<-a0;v6<-a1;v7<-a1;v2<-s0;v4<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$len.34"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v3, _1 ->   lw a0, _1
// [Asm] subst   lw v4, _2 ->   lw a2, _2
// [Asm] subst   slliw v6, v3, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v7, s11, v6 ->   sub a1, s11, a1
// [Asm] subst   andi v2, v7, -8 ->   andi s0, a1, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   mv a1, v3 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_10_8"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_10_8"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call init4_6 ->   call init4_6
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f16) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init14_16"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v2-> 1:zero-> 2:v4-> 3:a0"
// [Asm]   comment = "v2<-a0;v4<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init14_16"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v2, len2.13 ->   ld a0, len2.13
// [Asm] subst   li v4, 2 ->   li a1, 2
// [Asm] subst   sw v4, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f26) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_26"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_26"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main32_24 ->   call main32_24
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_11_10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_11_10"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_2_2"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   comment = "0:a0"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_2_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f18) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_20_18"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_20_18"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call init14_16 ->   call init14_16
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Mem(fref=f14, mref=m0) -> v2, Self(fref=f14) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a1, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$len2.1314"];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a1", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v2 ← s0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="v4 ← a2", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r5 -- r10;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r5;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r2 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v3-> 1:s11-> 2:v4-> 3:v6-> 4:v7-> 5:v2-> 6:a1-> 7:a0-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7"
// [Asm]   comment = "v3<-a0;v6<-a1;v7<-a1;v2<-s0;v4<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$len2.1314"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v3, _11 ->   lw a0, _11
// [Asm] subst   lw v4, _12 ->   lw a2, _12
// [Asm] subst   slliw v6, v3, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v7, s11, v6 ->   sub a1, s11, a1
// [Asm] subst   andi v2, v7, -8 ->   andi s0, a1, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   mv a1, v3 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v4, Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Insn(iref=%6) -> v8, Insn(iref=%5) -> v7, Self(fref=f24) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main32_24"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="v3 ← a0", color=green];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r14;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:zero-> 2:v3-> 3:a0-> 4:t0-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4-> 17:v5-> 18:v6-> 19:v7-> 20:v8"
// [Asm]   comment = "v2<-a0;v8<-a0;v3<-a0;v4<-a0;v6<-a0;v7<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main32_24"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v2, len.3 ->   ld a0, len.3
// [Asm] subst   lw v3, 0(v2) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v6, len2.13 ->   ld a0, len2.13
// [Asm] subst   lw v7, 0(v6) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_31_22"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_31_22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call init21_20 ->   call init21_20
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f20) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init21_20"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v6 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v8 ← a1", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:zero-> 2:v8-> 3:v4-> 4:v6-> 5:a0"
// [Asm]   comment = "v2<-a0;v6<-a1;v4<-a0;v8<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init21_20"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v2, len.3 ->   ld a0, len.3
// [Asm] subst   li v8, 3 ->   li a1, 3
// [Asm] subst   sw v8, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   ld v4, len2.13 ->   ld a0, len2.13
// [Asm] subst   li v6, 4 ->   li a1, 4
// [Asm] subst   sw v6, 0(v4) ->   sw a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$_11_10:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_11_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 1  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init21_20:
// [Asm] # block info: defs: [v8, v4, v6, a0, v2], uses: [v2, v4, v6, zero, a0, v8], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .init21_20_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len.3  # live: [zero, v2]
// [Asm]   li v8, 3  # live: [v2, zero, v8]
// [Asm]   sw v8, 0(v2)  # live: [zero]
// [Asm]   ld v4, len2.13  # live: [v4, zero]
// [Asm]   li v6, 4  # live: [v4, v6, zero]
// [Asm]   sw v6, 0(v4)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_1_0:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_1_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 1  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_2_2:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_2_2_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main32_24:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, v7, v6, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main32_24_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len.3  # live: [zero, v2]
// [Asm]   lw v3, 0(v2)  # live: [zero, v3]
// [Asm]   # save_ctx2  # live: [zero, v3]
// [Asm]   mv a0, v3  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call minimbt_print_endline  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   ld v6, len2.13  # live: [v6, zero]
// [Asm]   lw v7, 0(v6)  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$len.34:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v7, v4, a2, a1, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$len.34_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v3, _1  # live: [s11, v3]
// [Asm]   lw v4, _2  # live: [v4, s11, v3]
// [Asm]   slliw v6, v3, 2  # live: [v4, v6, s11, v3]
// [Asm]   sub v7, s11, v6  # live: [v7, v4, v3]
// [Asm]   andi v2, v7, -8  # live: [v3, v4, v2]
// [Asm]   mv s11, v2  # live: [v3, v4, v2]
// [Asm]   mv a1, v3  # live: [v4, a1, v2]
// [Asm]   mv a0, v2  # live: [v4, a1, a0, v2]
// [Asm]   mv a2, v4  # live: [a2, a1, a0, v2]
// [Asm]   call memseti32  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$len2.1314:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v7, v4, a2, a1, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$len2.1314_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v3, _11  # live: [s11, v3]
// [Asm]   lw v4, _12  # live: [v4, s11, v3]
// [Asm]   slliw v6, v3, 2  # live: [v4, v6, s11, v3]
// [Asm]   sub v7, s11, v6  # live: [v7, v4, v3]
// [Asm]   andi v2, v7, -8  # live: [v3, v4, v2]
// [Asm]   mv s11, v2  # live: [v3, v4, v2]
// [Asm]   mv a1, v3  # live: [v4, a1, v2]
// [Asm]   mv a0, v2  # live: [v4, a1, a0, v2]
// [Asm]   mv a2, v4  # live: [a2, a1, a0, v2]
// [Asm]   call memseti32  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$_20_18:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_20_18_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call init14_16  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_26:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_26_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main32_24  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$_31_22:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_31_22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call init21_20  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$_10_8:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_10_8_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call init4_6  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_12_12:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_12_12_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$_1_0  # live: [s0, a0]
// [Asm]   la t5, _1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_2_2  # live: [s0, a0]
// [Asm]   la t5, _2  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$len.34  # live: [s0, a0]
// [Asm]   la t5, len.3  # live: [s0, t5, a0]
// [Asm]   sd a0, 0(t5)  # live: [s0]
// [Asm]   call T$_10_8  # live: [s0]
// [Asm]   call T$_11_10  # live: [s0, a0]
// [Asm]   la t5, _11  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_12_12  # live: [s0, a0]
// [Asm]   la t5, _12  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$len2.1314  # live: [s0, a0]
// [Asm]   la t5, len2.13  # live: [s0, t5, a0]
// [Asm]   sd a0, 0(t5)  # live: [s0]
// [Asm]   call T$_20_18  # live: [s0]
// [Asm]   call T$_31_22  # live: [s0]
// [Asm]   call T$start_26  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init4_6:
// [Asm] # block info: defs: [v4, a0, v2], uses: [v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .init4_6_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len.3  # live: [zero, v2]
// [Asm]   li v4, 1  # live: [v4, zero, v2]
// [Asm]   sw v4, 0(v2)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] init14_16:
// [Asm] # block info: defs: [v4, a0, v2], uses: [v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .init14_16_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len2.13  # live: [zero, v2]
// [Asm]   li v4, 2  # live: [v4, zero, v2]
// [Asm]   sw v4, 0(v2)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] _11:
// [Asm]   .zero 4
// [Asm] _10:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _1:
// [Asm]   .zero 4
// [Asm] len.3:
// [Asm]   .zero 8
// [Asm] _31:
// [Asm]   .zero 4
// [Asm] _20:
// [Asm]   .zero 4
// [Asm] _2:
// [Asm]   .zero 4
// [Asm] _12:
// [Asm]   .zero 4
// [Asm] len2.13:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: Let(("len", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(1)), Unit)}, Let(("_", Unit), App(Var("init"), []), Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(1)), Unit)}, Let(("_", Unit), App(Var("init"), []), Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(1)), Unit)
// [Knf] build_knf: Put(Var("len"), Int(0), Int(1))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("init"), []), Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))))))
// [Knf] build_knf: App(Var("init"), [])
// [Knf] build_knf: Var("init")
// [Knf] build_knf: Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)
// [Knf] build_knf: Put(Var("len2"), Int(0), Int(2))
// [Knf] build_knf: Var("len2")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: App(Var("init"), [])
// [Knf] build_knf: Var("init")
// [Knf] build_knf: LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))
// [Knf] build_knf: Put(Var("len"), Int(0), Int(3))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit)
// [Knf] build_knf: Put(Var("len2"), Int(0), Int(4))
// [Knf] build_knf: Var("len2")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("init"), [])
// [Knf] build_knf: Var("init")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("len"), Int(0))])
// [Knf] build_knf: Get(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)
// [Knf] build_knf: App(Var("print_int"), [Get(Var("len2"), Int(0))])
// [Knf] build_knf: Get(Var("len2"), Int(0))
// [Knf] build_knf: Var("len2")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_11_10
// [Main]   .type T$_11_10, @function
// [Main] # leaf true
// [Main] T$_11_10:
// [Main] .T$_11_10_0:
// [Main]   li a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init21_20
// [Main]   .type init21_20, @function
// [Main] # leaf true
// [Main] init21_20:
// [Main] .init21_20_0:
// [Main]   ld a0, len.3
// [Main]   li a1, 3
// [Main]   sw a1, 0(a0)
// [Main]   ld a0, len2.13
// [Main]   li a1, 4
// [Main]   sw a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_1_0
// [Main]   .type T$_1_0, @function
// [Main] # leaf true
// [Main] T$_1_0:
// [Main] .T$_1_0_0:
// [Main]   li a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_2_2
// [Main]   .type T$_2_2, @function
// [Main] # leaf true
// [Main] T$_2_2:
// [Main] .T$_2_2_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main32_24
// [Main]   .type main32_24, @function
// [Main] # leaf false
// [Main] main32_24:
// [Main] .main32_24_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   ld a0, len.3
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, len2.13
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$len.34
// [Main]   .type T$len.34, @function
// [Main] # leaf false
// [Main] T$len.34:
// [Main] .T$len.34_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a0, _1
// [Main]   lw a2, _2
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s0, a1, -8
// [Main]   mv s11, s0
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$len2.1314
// [Main]   .type T$len2.1314, @function
// [Main] # leaf false
// [Main] T$len2.1314:
// [Main] .T$len2.1314_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a0, _11
// [Main]   lw a2, _12
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s0, a1, -8
// [Main]   mv s11, s0
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_20_18
// [Main]   .type T$_20_18, @function
// [Main] # leaf false
// [Main] T$_20_18:
// [Main] .T$_20_18_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call init14_16
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_26
// [Main]   .type T$start_26, @function
// [Main] # leaf false
// [Main] T$start_26:
// [Main] .T$start_26_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main32_24
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_31_22
// [Main]   .type T$_31_22, @function
// [Main] # leaf false
// [Main] T$_31_22:
// [Main] .T$_31_22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call init21_20
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_10_8
// [Main]   .type T$_10_8, @function
// [Main] # leaf false
// [Main] T$_10_8:
// [Main] .T$_10_8_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call init4_6
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_12_12
// [Main]   .type T$_12_12, @function
// [Main] # leaf true
// [Main] T$_12_12:
// [Main] .T$_12_12_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$_1_0
// [Main]   la t5, _1
// [Main]   sw a0, 0(t5)
// [Main]   call T$_2_2
// [Main]   la t5, _2
// [Main]   sw a0, 0(t5)
// [Main]   call T$len.34
// [Main]   la t5, len.3
// [Main]   sd a0, 0(t5)
// [Main]   call T$_10_8
// [Main]   call T$_11_10
// [Main]   la t5, _11
// [Main]   sw a0, 0(t5)
// [Main]   call T$_12_12
// [Main]   la t5, _12
// [Main]   sw a0, 0(t5)
// [Main]   call T$len2.1314
// [Main]   la t5, len2.13
// [Main]   sd a0, 0(t5)
// [Main]   call T$_20_18
// [Main]   call T$_31_22
// [Main]   call T$start_26
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init4_6
// [Main]   .type init4_6, @function
// [Main] # leaf true
// [Main] init4_6:
// [Main] .init4_6_0:
// [Main]   ld a0, len.3
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init14_16
// [Main]   .type init14_16, @function
// [Main] # leaf true
// [Main] init14_16:
// [Main] .init14_16_0:
// [Main]   ld a0, len2.13
// [Main]   li a1, 2
// [Main]   sw a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _11
// [Main]   .type _11, @object
// [Main] _11:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _10
// [Main]   .type _10, @object
// [Main] _10:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _1
// [Main]   .type _1, @object
// [Main] _1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl len.3
// [Main]   .type len.3, @object
// [Main] len.3:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _31
// [Main]   .type _31, @object
// [Main] _31:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _20
// [Main]   .type _20, @object
// [Main] _20:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _2
// [Main]   .type _2, @object
// [Main] _2:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _12
// [Main]   .type _12, @object
// [Main] _12:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl len2.13
// [Main]   .type len2.13, @object
// [Main] len2.13:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function init4_6
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@32), val=Int32(val=1))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init4_6 to wasm
// [Wasm] Lowering function T$_12_12
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_12_12 to wasm
// [Wasm] Lowering function T$len.34
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$len.34 to wasm
// [Wasm] Lowering function T$_10_8
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$_10_8 to wasm
// [Wasm] Lowering function init14_16
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::6)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@32), val=Int32(val=2))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init14_16 to wasm
// [Wasm] Lowering function T$_1_0
// [Wasm] Lowering control Return(args=[Int32(val=1)])
// [Wasm] Lowered function T$_1_0 to wasm
// [Wasm] Lowering function T$start_26
// [Wasm] Lowering insn Call(ty=Unit, f=f24, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_26 to wasm
// [Wasm] Lowering function T$_11_10
// [Wasm] Lowering control Return(args=[Int32(val=1)])
// [Wasm] Lowered function T$_11_10 to wasm
// [Wasm] Lowering function T$_2_2
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_2_2 to wasm
// [Wasm] Lowering function T$_20_18
// [Wasm] Lowering insn Call(ty=Unit, f=f16, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$_20_18 to wasm
// [Wasm] Lowering function T$len2.1314
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::4)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::5)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f14, mref=m0)])
// [Wasm] Get Local name Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f14, mref=m0) -> $f14.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$len2.1314 to wasm
// [Wasm] Lowering function main32_24
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@32))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::6)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%4), index=0, width=@32))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main32_24 to wasm
// [Wasm] Lowering function T$_31_22
// [Wasm] Lowering insn Call(ty=Unit, f=f20, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$_31_22 to wasm
// [Wasm] Lowering function init21_20
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@32), val=Int32(val=3))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::6)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%2), index=0, width=@32), val=Int32(val=4))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function init21_20 to wasm
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f8: Once, f16: Once, f0: Once, f26: Once, f10: Once, f2: Once, f18: Once, f14: Once, f24: Once, f22: Once, f20: Once})
