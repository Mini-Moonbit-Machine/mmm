// [Asm] pre_assigned_registers: Self(fref=f8) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f28) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f16) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f26) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v5, Insn(iref=%1) -> v3, Insn(iref=%3) -> v6, Self(fref=f32) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%1), width=@32))
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   ld v2, len.3 ->   ld a0, len.3
// [Asm] subst   lw v3, _49 ->   lw a1, _49
// [Asm] subst   lw v4, _50 ->   lw a2, _50
// [Asm] subst   th.surw v4, v2, v3, 2 ->   th.surw a2, a0, a1, 2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f40) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v5, Insn(iref=%1) -> v3, Self(fref=f38) -> v0, Insn(iref=%3) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%1), width=@32))
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   ld v2, len2.13 ->   ld a0, len2.13
// [Asm] subst   lw v3, _52 ->   lw a1, _52
// [Asm] subst   lw v4, _53 ->   lw a2, _53
// [Asm] subst   th.surw v4, v2, v3, 2 ->   th.surw a2, a0, a1, 2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Insn(iref=%6) -> v8, Self(fref=f42) -> v0, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   ld v2, len.3 ->   ld a0, len.3
// [Asm] subst   lw v3, 0(v2) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v6, len2.13 ->   ld a0, len2.13
// [Asm] subst   lw v7, 0(v6) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Mem(fref=f18, mref=m0) -> v2, Self(fref=f18) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   lw v3, _11 ->   lw a0, _11
// [Asm] subst   lw v4, _12 ->   lw a1, _12
// [Asm] subst   slliw v6, v3, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a1
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   mv a1, v3 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v4, Insn(iref=%4) -> v5, Insn(iref=%1) -> v3, Insn(iref=%3) -> v6, Self(fref=f24) -> v0, Insn(iref=%0) -> v2
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%1), width=@32))
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   ld v2, len2.13 ->   ld a0, len2.13
// [Asm] subst   lw v3, _46 ->   lw a1, _46
// [Asm] subst   lw v4, _47 ->   lw a2, _47
// [Asm] subst   th.surw v4, v2, v3, 2 ->   th.surw a2, a0, a1, 2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 2 ->   li a0, 2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f6) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   lw v3, _1 ->   lw a0, _1
// [Asm] subst   lw v4, _2 ->   lw a1, _2
// [Asm] subst   slliw v6, v3, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a1
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   mv a1, v3 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f34) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f44) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   call main32.55 ->   call main32.55
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v5, Insn(iref=%1) -> v3, Insn(iref=%3) -> v6, Self(fref=f10) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%1), width=@32))
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   ld v2, len.3 ->   ld a0, len.3
// [Asm] subst   lw v3, _43 ->   lw a1, _43
// [Asm] subst   lw v4, _44 ->   lw a2, _44
// [Asm] subst   th.surw v4, v2, v3, 2 ->   th.surw a2, a0, a1, 2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f36) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 4 ->   li a0, 4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f30) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] subst   li v2, 3 ->   li a0, 3
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$_52:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_52_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_20:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_20_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_50:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_50_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 3  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_47:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_47_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_10:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_10_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_44:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_44_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 1  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$len.3:
// [Asm] # block info: defs: [v3, a0, v4, v6, a1, s11, v2], uses: [v2, v6, s11, a0, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$len.3_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v3, _1  # live: [s11, v3]
// [Asm]   lw v4, _2  # live: [s11, v3]
// [Asm]   slliw v6, v3, 2  # live: [v6, s11, v3]
// [Asm]   sub v2, s11, v6  # live: [v3, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v2]
// [Asm]   mv a1, v3  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 1  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_46:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_46_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_43:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_43_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$_1  # live: [s0, a0]
// [Asm]   la t5, _1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_2  # live: [s0, a0]
// [Asm]   la t5, _2  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$len.3  # live: [s0, a0]
// [Asm]   la t5, len.3  # live: [s0, t5, a0]
// [Asm]   sd a0, 0(t5)  # live: [s0]
// [Asm]   call T$_43  # live: [s0, a0]
// [Asm]   la t5, _43  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_44  # live: [s0, a0]
// [Asm]   la t5, _44  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_45  # live: [s0]
// [Asm]   call T$_10  # live: [s0]
// [Asm]   call T$_11  # live: [s0, a0]
// [Asm]   la t5, _11  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_12  # live: [s0, a0]
// [Asm]   la t5, _12  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$len2.13  # live: [s0, a0]
// [Asm]   la t5, len2.13  # live: [s0, t5, a0]
// [Asm]   sd a0, 0(t5)  # live: [s0]
// [Asm]   call T$_46  # live: [s0, a0]
// [Asm]   la t5, _46  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_47  # live: [s0, a0]
// [Asm]   la t5, _47  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_48  # live: [s0]
// [Asm]   call T$_20  # live: [s0]
// [Asm]   call T$_49  # live: [s0, a0]
// [Asm]   la t5, _49  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_50  # live: [s0, a0]
// [Asm]   la t5, _50  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_51  # live: [s0]
// [Asm]   call T$_52  # live: [s0, a0]
// [Asm]   la t5, _52  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_53  # live: [s0, a0]
// [Asm]   la t5, _53  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_54  # live: [s0]
// [Asm]   call T$_31  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_48:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_48_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len2.13  # live: [zero, v2]
// [Asm]   lw v3, _46  # live: [v3, zero, v2]
// [Asm]   lw v4, _47  # live: [v3, v4, zero, v2]
// [Asm]   th.surw v4, v2, v3, 2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$len2.13:
// [Asm] # block info: defs: [v3, a0, v4, v6, a1, s11, v2], uses: [v2, v6, s11, a0, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$len2.13_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v3, _11  # live: [s11, v3]
// [Asm]   lw v4, _12  # live: [s11, v3]
// [Asm]   slliw v6, v3, 2  # live: [v6, s11, v3]
// [Asm]   sub v2, s11, v6  # live: [v3, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v2]
// [Asm]   mv a1, v3  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main32.55:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, v7, v6, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main32.55_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len.3  # live: [zero, v2]
// [Asm]   lw v3, 0(v2)  # live: [zero, v3]
// [Asm]   # save_ctx2  # live: [zero, v3]
// [Asm]   mv a0, v3  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call minimbt_print_endline  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   ld v6, len2.13  # live: [v6, zero]
// [Asm]   lw v7, 0(v6)  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_45:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_45_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len.3  # live: [zero, v2]
// [Asm]   lw v3, _43  # live: [v3, zero, v2]
// [Asm]   lw v4, _44  # live: [v3, v4, zero, v2]
// [Asm]   th.surw v4, v2, v3, 2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_11:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_11_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 1  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_49:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_49_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_12:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_12_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_2:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_2_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_31:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_31_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_51:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_51_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len.3  # live: [zero, v2]
// [Asm]   lw v3, _49  # live: [v3, zero, v2]
// [Asm]   lw v4, _50  # live: [v3, v4, zero, v2]
// [Asm]   th.surw v4, v2, v3, 2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_54:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_54_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, len2.13  # live: [zero, v2]
// [Asm]   lw v3, _52  # live: [v3, zero, v2]
// [Asm]   lw v4, _53  # live: [v3, v4, zero, v2]
// [Asm]   th.surw v4, v2, v3, 2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main32.55  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_53:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_53_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 4  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] _47:
// [Asm]   .zero 4
// [Asm] _48:
// [Asm]   .zero 4
// [Asm] _51:
// [Asm]   .zero 4
// [Asm] _1:
// [Asm]   .zero 4
// [Asm] _44:
// [Asm]   .zero 4
// [Asm] len.3:
// [Asm]   .zero 8
// [Asm] _53:
// [Asm]   .zero 4
// [Asm] _31:
// [Asm]   .zero 4
// [Asm] _50:
// [Asm]   .zero 4
// [Asm] _20:
// [Asm]   .zero 4
// [Asm] _43:
// [Asm]   .zero 4
// [Asm] _12:
// [Asm]   .zero 4
// [Asm] len2.13:
// [Asm]   .zero 8
// [Asm] _54:
// [Asm]   .zero 4
// [Asm] _11:
// [Asm]   .zero 4
// [Asm] _10:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] _49:
// [Asm]   .zero 4
// [Asm] _52:
// [Asm]   .zero 4
// [Asm] _2:
// [Asm]   .zero 4
// [Asm] _46:
// [Asm]   .zero 4
// [Asm] _45:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("len", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(1)), Unit)}, Let(("_", Unit), App(Var("init"), []), Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(1)), Unit)}, Let(("_", Unit), App(Var("init"), []), Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(1)), Unit)
// [Knf] build_knf: Put(Var("len"), Int(0), Int(1))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("init"), []), Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))))))
// [Knf] build_knf: App(Var("init"), [])
// [Knf] build_knf: Var("init")
// [Knf] build_knf: Let(("len2", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(2)), Unit)
// [Knf] build_knf: Put(Var("len2"), Int(0), Int(2))
// [Knf] build_knf: Var("len2")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("init"), []), LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))))
// [Knf] build_knf: App(Var("init"), [])
// [Knf] build_knf: Var("init")
// [Knf] build_knf: LetRec({name: ("init", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))}, Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len"), Int(0), Int(3)), Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit))
// [Knf] build_knf: Put(Var("len"), Int(0), Int(3))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("len2"), Int(0), Int(4)), Unit)
// [Knf] build_knf: Put(Var("len2"), Int(0), Int(4))
// [Knf] build_knf: Var("len2")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("init"), []), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("init"), [])
// [Knf] build_knf: Var("init")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("len"), Int(0))])
// [Knf] build_knf: Get(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)
// [Knf] build_knf: App(Var("print_int"), [Get(Var("len2"), Int(0))])
// [Knf] build_knf: Get(Var("len2"), Int(0))
// [Knf] build_knf: Var("len2")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_52
// [Main]   .type T$_52, @function
// [Main] # leaf true
// [Main] T$_52:
// [Main] .T$_52_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_20
// [Main]   .type T$_20, @function
// [Main] # leaf true
// [Main] T$_20:
// [Main] .T$_20_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_50
// [Main]   .type T$_50, @function
// [Main] # leaf true
// [Main] T$_50:
// [Main] .T$_50_0:
// [Main]   li a0, 3
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_47
// [Main]   .type T$_47, @function
// [Main] # leaf true
// [Main] T$_47:
// [Main] .T$_47_0:
// [Main]   li a0, 2
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_10
// [Main]   .type T$_10, @function
// [Main] # leaf true
// [Main] T$_10:
// [Main] .T$_10_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_44
// [Main]   .type T$_44, @function
// [Main] # leaf true
// [Main] T$_44:
// [Main] .T$_44_0:
// [Main]   li a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$len.3
// [Main]   .type T$len.3, @function
// [Main] # leaf false
// [Main] T$len.3:
// [Main] .T$len.3_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, _1
// [Main]   lw a1, _2
// [Main]   slliw a1, a0, 2
// [Main]   sub a2, s11, a1
// [Main]   andi s11, a2, -8
// [Main]   mv a1, a0
// [Main]   mv a0, a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_1
// [Main]   .type T$_1, @function
// [Main] # leaf true
// [Main] T$_1:
// [Main] .T$_1_0:
// [Main]   li a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_46
// [Main]   .type T$_46, @function
// [Main] # leaf true
// [Main] T$_46:
// [Main] .T$_46_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_43
// [Main]   .type T$_43, @function
// [Main] # leaf true
// [Main] T$_43:
// [Main] .T$_43_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$_1
// [Main]   la t5, _1
// [Main]   sw a0, 0(t5)
// [Main]   call T$_2
// [Main]   la t5, _2
// [Main]   sw a0, 0(t5)
// [Main]   call T$len.3
// [Main]   la t5, len.3
// [Main]   sd a0, 0(t5)
// [Main]   call T$_43
// [Main]   la t5, _43
// [Main]   sw a0, 0(t5)
// [Main]   call T$_44
// [Main]   la t5, _44
// [Main]   sw a0, 0(t5)
// [Main]   call T$_45
// [Main]   call T$_10
// [Main]   call T$_11
// [Main]   la t5, _11
// [Main]   sw a0, 0(t5)
// [Main]   call T$_12
// [Main]   la t5, _12
// [Main]   sw a0, 0(t5)
// [Main]   call T$len2.13
// [Main]   la t5, len2.13
// [Main]   sd a0, 0(t5)
// [Main]   call T$_46
// [Main]   la t5, _46
// [Main]   sw a0, 0(t5)
// [Main]   call T$_47
// [Main]   la t5, _47
// [Main]   sw a0, 0(t5)
// [Main]   call T$_48
// [Main]   call T$_20
// [Main]   call T$_49
// [Main]   la t5, _49
// [Main]   sw a0, 0(t5)
// [Main]   call T$_50
// [Main]   la t5, _50
// [Main]   sw a0, 0(t5)
// [Main]   call T$_51
// [Main]   call T$_52
// [Main]   la t5, _52
// [Main]   sw a0, 0(t5)
// [Main]   call T$_53
// [Main]   la t5, _53
// [Main]   sw a0, 0(t5)
// [Main]   call T$_54
// [Main]   call T$_31
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_48
// [Main]   .type T$_48, @function
// [Main] # leaf true
// [Main] T$_48:
// [Main] .T$_48_0:
// [Main]   ld a0, len2.13
// [Main]   lw a1, _46
// [Main]   lw a2, _47
// [Main]   th.surw a2, a0, a1, 2
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$len2.13
// [Main]   .type T$len2.13, @function
// [Main] # leaf false
// [Main] T$len2.13:
// [Main] .T$len2.13_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, _11
// [Main]   lw a1, _12
// [Main]   slliw a1, a0, 2
// [Main]   sub a2, s11, a1
// [Main]   andi s11, a2, -8
// [Main]   mv a1, a0
// [Main]   mv a0, a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main32.55
// [Main]   .type main32.55, @function
// [Main] # leaf false
// [Main] main32.55:
// [Main] .main32.55_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   ld a0, len.3
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, len2.13
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_45
// [Main]   .type T$_45, @function
// [Main] # leaf true
// [Main] T$_45:
// [Main] .T$_45_0:
// [Main]   ld a0, len.3
// [Main]   lw a1, _43
// [Main]   lw a2, _44
// [Main]   th.surw a2, a0, a1, 2
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_11
// [Main]   .type T$_11, @function
// [Main] # leaf true
// [Main] T$_11:
// [Main] .T$_11_0:
// [Main]   li a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_49
// [Main]   .type T$_49, @function
// [Main] # leaf true
// [Main] T$_49:
// [Main] .T$_49_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_12
// [Main]   .type T$_12, @function
// [Main] # leaf true
// [Main] T$_12:
// [Main] .T$_12_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_2
// [Main]   .type T$_2, @function
// [Main] # leaf true
// [Main] T$_2:
// [Main] .T$_2_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_31
// [Main]   .type T$_31, @function
// [Main] # leaf true
// [Main] T$_31:
// [Main] .T$_31_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_51
// [Main]   .type T$_51, @function
// [Main] # leaf true
// [Main] T$_51:
// [Main] .T$_51_0:
// [Main]   ld a0, len.3
// [Main]   lw a1, _49
// [Main]   lw a2, _50
// [Main]   th.surw a2, a0, a1, 2
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_54
// [Main]   .type T$_54, @function
// [Main] # leaf true
// [Main] T$_54:
// [Main] .T$_54_0:
// [Main]   ld a0, len2.13
// [Main]   lw a1, _52
// [Main]   lw a2, _53
// [Main]   th.surw a2, a0, a1, 2
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main32.55
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_53
// [Main]   .type T$_53, @function
// [Main] # leaf true
// [Main] T$_53:
// [Main] .T$_53_0:
// [Main]   li a0, 4
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _47
// [Main]   .type _47, @object
// [Main] _47:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _48
// [Main]   .type _48, @object
// [Main] _48:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _51
// [Main]   .type _51, @object
// [Main] _51:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _1
// [Main]   .type _1, @object
// [Main] _1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _44
// [Main]   .type _44, @object
// [Main] _44:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl len.3
// [Main]   .type len.3, @object
// [Main] len.3:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _53
// [Main]   .type _53, @object
// [Main] _53:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _31
// [Main]   .type _31, @object
// [Main] _31:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _50
// [Main]   .type _50, @object
// [Main] _50:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _20
// [Main]   .type _20, @object
// [Main] _20:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _43
// [Main]   .type _43, @object
// [Main] _43:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _12
// [Main]   .type _12, @object
// [Main] _12:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl len2.13
// [Main]   .type len2.13, @object
// [Main] len2.13:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _54
// [Main]   .type _54, @object
// [Main] _54:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _11
// [Main]   .type _11, @object
// [Main] _11:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _10
// [Main]   .type _10, @object
// [Main] _10:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _49
// [Main]   .type _49, @object
// [Main] _49:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _52
// [Main]   .type _52, @object
// [Main] _52:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _2
// [Main]   .type _2, @object
// [Main] _2:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _46
// [Main]   .type _46, @object
// [Main] _46:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _45
// [Main]   .type _45, @object
// [Main] _45:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$_44
// [Wasm] Lowering control Return(args=[Int32(val=1)])
// [Wasm] Lowered function T$_44 to wasm
// [Wasm] Lowering function T$_49
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_49 to wasm
// [Wasm] Lowering function T$_12
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_12 to wasm
// [Wasm] Lowering function T$_20
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowered function T$_20 to wasm
// [Wasm] Lowering function T$_51
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::14)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::15)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Insn(iref=%0), offset=Insn(iref=%1), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$_51 to wasm
// [Wasm] Lowering function T$_31
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowered function T$_31 to wasm
// [Wasm] Lowering function T$_54
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::9)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::17)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::18)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Insn(iref=%0), offset=Insn(iref=%1), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$_54 to wasm
// [Wasm] Lowering function main32.55
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%0), index=0, width=@32))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::9)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%4), index=0, width=@32))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main32.55 to wasm
// [Wasm] Lowering function T$_2
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_2 to wasm
// [Wasm] Lowering function T$len2.13
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::7)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::8)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f18, mref=m0) -> $f18.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f18, mref=m0)])
// [Wasm] Get Local name Mem(fref=f18, mref=m0) -> $f18.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f18, mref=m0) -> $f18.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$len2.13 to wasm
// [Wasm] Lowering function T$_48
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::9)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::10)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::11)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Insn(iref=%0), offset=Insn(iref=%1), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$_48 to wasm
// [Wasm] Lowering function T$_47
// [Wasm] Lowering control Return(args=[Int32(val=2)])
// [Wasm] Lowered function T$_47 to wasm
// [Wasm] Lowering function T$_46
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_46 to wasm
// [Wasm] Lowering function T$_43
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_43 to wasm
// [Wasm] Lowering function T$_10
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowered function T$_10 to wasm
// [Wasm] Lowering function T$len.3
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$len.3 to wasm
// [Wasm] Lowering function T$_52
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_52 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f42, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function T$_1
// [Wasm] Lowering control Return(args=[Int32(val=1)])
// [Wasm] Lowered function T$_1 to wasm
// [Wasm] Lowering function T$_45
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::3)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::4)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Insn(iref=%0), offset=Insn(iref=%1), width=@32), val=Insn(iref=%2))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$_45 to wasm
// [Wasm] Lowering function T$_53
// [Wasm] Lowering control Return(args=[Int32(val=4)])
// [Wasm] Lowered function T$_53 to wasm
// [Wasm] Lowering function T$_11
// [Wasm] Lowering control Return(args=[Int32(val=1)])
// [Wasm] Lowered function T$_11 to wasm
// [Wasm] Lowering function T$_50
// [Wasm] Lowering control Return(args=[Int32(val=3)])
// [Wasm] Lowered function T$_50 to wasm
// [KnfOpt] freq: {init4: Once, init14: Once, init21: Once, main32: Once}
// [KnfOpt] Knf inline Some(init4)
// [KnfOpt] Knf inline Some(init14)
// [KnfOpt] Knf inline Some(init21)
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f8: Once, f28: Once, f16: Once, f26: Once, f32: Once, f40: Once, f38: Once, f42: Once, f2: Once, f18: Once, f24: Once, f22: Once, f20: Once, f6: Once, f12: Once, f4: Once, f34: Once, f44: Once, f0: Once, f10: Once, f36: Once, f14: Once, f30: Once})
