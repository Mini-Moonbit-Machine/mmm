// [Main] function thunk_main(k) {
// [Main]   const _1 = 1;
// [Main]   const _2 = 0;
// [Main]   return $thunk(() => $external(minimbt_create_array, function (len_3) {
// [Main]     function init_4(k) {
// [Main]       const _5 = 0;
// [Main]       const _6 = 1;
// [Main]       const _8 = len_3[_5] = _6;
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]     return $thunk(() => init_4(function (_10) {
// [Main]       const _11 = 1;
// [Main]       const _12 = 0;
// [Main]       return $thunk(() => $external(minimbt_create_array, function (len2_13) {
// [Main]         function init_14(k) {
// [Main]           const _15 = 0;
// [Main]           const _16 = 2;
// [Main]           const _18 = len2_13[_15] = _16;
// [Main]           return $thunk(() => k(null))
// [Main]         }
// [Main]         return $thunk(() => init_14(function (_20) {
// [Main]           function init_21(k) {
// [Main]             const _22 = 0;
// [Main]             const _23 = 3;
// [Main]             const _25 = len_3[_22] = _23;
// [Main]             const _26 = 0;
// [Main]             const _27 = 4;
// [Main]             const _29 = len2_13[_26] = _27;
// [Main]             return $thunk(() => k(null))
// [Main]           }
// [Main]           return $thunk(() => init_21(function (_31) {
// [Main]             function main_32(k) {
// [Main]               const _33 = 0;
// [Main]               const _34 = len_3[_33];
// [Main]               return $thunk(() => $external(minimbt_print_int, function (_36) {
// [Main]                 return $thunk(() => $external(minimbt_print_endline, function (_38) {
// [Main]                   const _39 = 0;
// [Main]                   const _40 = len2_13[_39];
// [Main]                   return $thunk(() => $external(minimbt_print_int, function (_42) {
// [Main]                     return $thunk(() => k(null))
// [Main]                   }
// [Main]                   , _40))
// [Main]                 }
// [Main]                 ))
// [Main]               }
// [Main]               , _34))
// [Main]             }
// [Main]             return $thunk(() => main_32(function (x) {
// [Main]               return $thunk(() => k(x))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       , _11, _12))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   , _1, _2))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: Let(("len", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(1)), Unit)}, Let(("len2", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(2)), Unit)}, LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(3)), Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, Unit)))))) against Unit
// [Typer] check: Array(Int(1), Int(0)) against Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(1)), Unit)}, Let(("len2", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(2)), Unit)}, LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(3)), Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(1)), Unit)
// [Typer] infer: Put(Var("len"), Int(0), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Var("len") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Let(("len2", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(2)), Unit)}, LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(3)), Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, Unit)))) against Unit
// [Typer] check: Array(Int(1), Int(0)) against Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(2)), Unit)}, LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(3)), Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(2)), Unit)
// [Typer] infer: Put(Var("len2"), Int(0), Int(2))
// [Typer] infer: Int(2)
// [Typer] check: Var("len2") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: LetRec({tyvars: [], name: ("init", Var(None)), args: [], body: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(3)), Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), Put(Var("len"), Int(0), Int(3)), Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit))
// [Typer] infer: Put(Var("len"), Int(0), Int(3))
// [Typer] infer: Int(3)
// [Typer] check: Var("len") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("len2"), Int(0), Int(4)), Unit)
// [Typer] infer: Put(Var("len2"), Int(0), Int(4))
// [Typer] infer: Int(4)
// [Typer] check: Var("len2") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len"), Int(0))]), Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)))
// [Typer] infer: App(Var("print_int"), [Get(Var("len"), Int(0))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Get(Var("len"), Int(0)) against Int
// [Typer] check: Var("len") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), []), Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Get(Var("len2"), Int(0))]), Unit)
// [Typer] infer: App(Var("print_int"), [Get(Var("len2"), Int(0))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Get(Var("len2"), Int(0)) against Int
// [Typer] check: Var("len2") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
