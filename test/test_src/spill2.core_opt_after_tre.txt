# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn g2l1_1 #f1 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    return %0
  }
}
.fn f1l0_0 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 12345
  }
}
.fn T$start_6 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn main6l2_2 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(10)> <- [..] = 1
    let %1: int32 = call f0()
    let %2: int32 = load int32 field(f2.m0, 0)
    let %3: int32 = add(%2, %2)
    let %4: int32 = add(%3, %3)
    let %5: int32 = add(%4, %4)
    let %6: int32 = add(%5, %5)
    let %7: int32 = add(%6, %6)
    let %8: int32 = add(%7, %7)
    let %9: int32 = add(%8, %8)
    let %10: int32 = add(%9, %9)
    let %11: int32 = add(%10, %10)
    let %12: int32 = add(%11, %11)
    let %13: int32 = add(%12, %12)
    let %14: int32 = add(%13, %13)
    let %15: int32 = add(%14, %14)
    let %16: int32 = add(%15, %15)
    let %17: int32 = add(%16, %16)
    let %18: int32 = load int32 field(f2.m0, 1)
    let %19: bool = eq(%18, 0)
    br %19 b1() b2()
  }
  .bb #b1 () {
    let %20: int32 = call f1(67890)
    jump b3(%20)
  }
  .bb #b2 () {
    let %21: int32 = add(%2, %3)
    let %22: int32 = add(%21, %4)
    let %23: int32 = add(%22, %5)
    let %24: int32 = add(%23, %6)
    let %25: int32 = add(%24, %7)
    let %26: int32 = add(%25, %8)
    let %27: int32 = add(%26, %9)
    let %28: int32 = add(%27, %10)
    let %29: int32 = add(%28, %11)
    let %30: int32 = add(%29, %12)
    let %31: int32 = add(%30, %13)
    let %32: int32 = add(%31, %14)
    let %33: int32 = add(%32, %15)
    let %34: int32 = add(%33, %16)
    let %35: int32 = add(%34, %17)
    let %36: int32 = add(%35, %1)
    jump b3(%36)
  }
  .bb #b3 (int32) {
    let %37: unit = ext_call minimbt_print_int($b3.0)
    return %37
  }
}
.thunk ::0 start
