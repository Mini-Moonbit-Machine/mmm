# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn g.13 #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn main.14 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: bool = le(%0, 0)
    br %1 b1() b2()
  }
  .bb #b1 () {
    let %2: int32 = call f1(())
    let %3: int32 = add(%2, %0)
    let %4: unit = ext_call minimbt_print_int(%3)
    jump b3(%4)
  }
  .bb #b2 () {
    let %5: int32 = add(%0, %0)
    let %6: unit = ext_call minimbt_print_int(%5)
    jump b3(%6)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn f.12 #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.thunk ::0 start
