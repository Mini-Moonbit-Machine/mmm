// [Main] function thunk_main(k) {
// [Main]   function main_1(k) {
// [Main]     function f_2(k) {
// [Main]       const x_3 = minimbt_read_int();
// [Main]       const _4 = -2147483648;
// [Main]       if (x_3 === _4) {
// [Main]         return k(minimbt_print_int($force(x_3)))
// [Main]       } else {
// [Main]         const _6 = minimbt_print_int($force(x_3));
// [Main]         return $thunk(() => f_2(k))
// [Main]       }
// [Main]     }
// [Main]     return $thunk(() => f_2(k))
// [Main]   }
// [Main]   return $thunk(() => main_1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: LetRec({tyvars: [], name: ("f", Var({val: None})), args: [], body: Let(("x", Var({val: None})), App(Var("read_int"), []), If(Eq(Var("x"), Neg(Int(2147483648), kind=None)), App(Var("print_int"), [Var("x")]), Let(("_", Var({val: None})), App(Var("print_int"), [Var("x")]), App(Var("f"), []))))}, App(Var("f"), []))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: LetRec({tyvars: [], name: ("f", Var({val: None})), args: [], body: Let(("x", Var({val: None})), App(Var("read_int"), []), If(Eq(Var("x"), Neg(Int(2147483648), kind=None)), App(Var("print_int"), [Var("x")]), Let(("_", Var({val: None})), App(Var("print_int"), [Var("x")]), App(Var("f"), []))))}, App(Var("f"), []))
// [Typer] typevars: []
// [Typer] infer: Let(("x", Var({val: None})), App(Var("read_int"), []), If(Eq(Var("x"), Neg(Int(2147483648), kind=None)), App(Var("print_int"), [Var("x")]), Let(("_", Var({val: None})), App(Var("print_int"), [Var("x")]), App(Var("f"), []))))
// [Typer] infer: App(Var("read_int"), [])
// [Typer] infer: Var("read_int")
// [Typer] inst: TypeScheme(([], Fun([], Int)))
// [Typer] inst result: Fun([], Int)
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] infer: If(Eq(Var("x"), Neg(Int(2147483648), kind=None)), App(Var("print_int"), [Var("x")]), Let(("_", Var({val: None})), App(Var("print_int"), [Var("x")]), App(Var("f"), [])))
// [Typer] check: Eq(Var("x"), Neg(Int(2147483648), kind=None)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Neg(Int(2147483648), kind=None)
// [Typer] infer: Int(2147483648)
// [Typer] unify: Int and Int
// [Typer] infer: App(Var("print_int"), [Var("x")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [Var("x")]), App(Var("f"), []))
// [Typer] infer: App(Var("print_int"), [Var("x")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: App(Var("f"), [])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Fun([], Var({val: None}))))
// [Typer] inst result: Fun([], Var({val: None}))
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] unify: Unit and Var({val: Some(Unit)})
// [Typer] infer: App(Var("f"), [])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Fun([], Var({val: Some(Unit)}))))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
