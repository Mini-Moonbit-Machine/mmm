let rec getx: (v: (Double, Double, Double)) -> Double {
  let (x: Var(None), _: Var(None), _: Var(None)) = Var("v")
  Var(x)
}
let rec gety: (v: (Double, Double, Double)) -> Double {
  let (_: Var(None), y: Var(None), _: Var(None)) = Var("v")
  Var(y)
}
let rec getz: (v: (Double, Double, Double)) -> Double {
  let (_: Var(None), _: Var(None), z: Var(None)) = Var("v")
  Var(z)
}
let rec inprod: (v1: (Double, Double, Double), v2: (Double, Double, Double)) -> Double {
  Prim(Prim(App(Var("getx"), targs=None, [Var("v1")]), App(Var("getx"), targs=None, [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), targs=None, [Var("v1")]), App(Var("gety"), targs=None, [Var("v2")]), Mul, kind=None), Add, kind=None) + Prim(App(Var("getz"), targs=None, [Var("v1")]), App(Var("getz"), targs=None, [Var("v2")]), Mul, kind=None)
}
let rec main: () -> Var(None) {
  Apply(Var("print_int"), [App(Var("truncate"), targs=None, [Prim(Double(1000000), App(Var("inprod"), targs=None, [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)]), ])
}
Unit
