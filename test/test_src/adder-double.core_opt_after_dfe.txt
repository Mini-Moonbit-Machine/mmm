# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.15 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> double = call f1(2.14)
    let %1: double = apply %0(1)
    let %2: int32 = conv.d2i.rtz(%1)
    let %3: unit = ext_call minimbt_print_int(%2)
    return %3
  }
}
.fn adder.13 #f0 : fn(int32, double) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = conv.i2d($f0)
    let %1: double = add($f1, %0)
    return %1
  }
}
.fn adder.14 #f5 : closure(int32) -> double
.freevars (double)
.entry b0 {
  .bb #b0 () {
    let %0: double = call f0($f0, ^1)
    return %0
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn make_adder.12 #f1 : fn(double) -> closure(int32) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> double heap(2)> <- [0] = f5, [1] = $f0
    return f1.m0
  }
}
.thunk ::0 start
