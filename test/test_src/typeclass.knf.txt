let rec aux.1: Unit = (x.3: Int) {
  ExtApply(minimbt_print_int, [x.3, ])
}
let D$Print.4: ((Int) -> Unit) = Tuple([aux.1, ])
let rec aux.5: Unit = (x.7: String) {
  ExtApply(minimbt_print_string, [x.7, ])
}
let D$Print.8: ((String) -> Unit) = Tuple([aux.5, ])
let rec print_generic.10: Unit = (dict.9: ((T) -> Unit), p.12: P, _dummy.14: X) {
  let (_15: (T) -> Unit) = dict.9
  Apply(_15, [p.12, ])
}
let rec main.16: Unit = () {
  let _17: Int = Int(1)
  let _18: Double = Double(0.1)
  let _20: Unit = Apply(print_generic.10, [D$Print.4, _17, _18, ])
  let _21: String = String("\n")
  let _22: Unit = Unit
  let _24: Unit = Apply(print_generic.10, [D$Print.8, _21, _22, ])
  let _25: String = String("Hello Moonbit")
  let _26: Int = Int(2)
  let _28: Unit = Apply(print_generic.10, [D$Print.8, _25, _26, ])
  Unit
}
Apply(main.16, [])
