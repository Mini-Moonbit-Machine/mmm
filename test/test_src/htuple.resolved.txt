let rec return_i_d: () -> (Int, Double) {
  Tuple([Int(1), Double(2), ])
}
let rec return_i_d_i: () -> (Int, Double, Int) {
  Tuple([Int(1), Double(2), Int(3), ])
}
let rec return_d_i_i: () -> (Double, Int, Int) {
  Tuple([Double(2), Int(3), Int(4), ])
}
let rec return_i_i_i: () -> (Int, Int, Int) {
  Tuple([Int(1), Int(2), Int(3), ])
}
let rec main: () -> Var(None) {
  let (i: Var(None), d: Var(None)) = App(Var("return_i_d"), targs=None, [])
  let _: Var(None) = Apply(Var("print_int"), [Var("i"), ])
  let _: Var(None) = Apply(Var("print_int"), [App(Var("int_of_float"), targs=None, [Var("d")]), ])
  let (i: Var(None), d: Var(None), i2: Var(None)) = App(Var("return_i_d_i"), targs=None, [])
  let _: Var(None) = Apply(Var("print_int"), [Var("i"), ])
  let _: Var(None) = Apply(Var("print_int"), [App(Var("int_of_float"), targs=None, [Var("d")]), ])
  let _: Var(None) = Apply(Var("print_int"), [Var("i2"), ])
  let (d: Var(None), i: Var(None), i2: Var(None)) = App(Var("return_d_i_i"), targs=None, [])
  let _: Var(None) = Apply(Var("print_int"), [App(Var("int_of_float"), targs=None, [Var("d")]), ])
  let _: Var(None) = Apply(Var("print_int"), [Var("i"), ])
  let _: Var(None) = Apply(Var("print_int"), [Var("i2"), ])
  let (i: Var(None), i2: Var(None), i3: Var(None)) = App(Var("return_i_i_i"), targs=None, [])
  let _: Var(None) = Apply(Var("print_int"), [Var("i"), ])
  let _: Var(None) = Apply(Var("print_int"), [Var("i2"), ])
  let _: Var(None) = Apply(Var("print_int"), [Var("i3"), ])
  Unit
}
Unit
