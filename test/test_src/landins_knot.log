// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Mem(fref=f6, mref=m1) -> v3, Self(fref=f6) -> v0, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11]
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v4, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, s11, v10, v2]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v3]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] skip edge 7 -> 5
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v3]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$arr.47") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("T$arr.47") clobbered_f: @hashset.of([])
// [Asm] subst   lw v4, _57 ->   lw a0, _57
// [Asm] subst   addi v2, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   la v10, dummy1 ->   la a1, dummy1
// [Asm] subst   sd v10, 0(v2) ->   sd a1, 0(a2)
// [Asm] subst   slliw v7, v4, 3 ->   slliw a1, a0, 3
// [Asm] subst   sub v3, s11, v7 ->   sub s0, s11, a1
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v4 ->   mv a1, a0
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v5, Insn(iref=%1) -> v3, Self(fref=f12) -> v0, Insn(iref=%3) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%1), width=@64))
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$_54") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("T$_54") clobbered_f: @hashset.of([])
// [Asm] subst   ld v2, arr.47 ->   ld a0, arr.47
// [Asm] subst   lw v3, _58 ->   lw a1, _58
// [Asm] subst   ld v4, fixedpoint.52 ->   ld a2, fixedpoint.52
// [Asm] subst   th.surd v4, v2, v3, 3 ->   th.surd a2, a0, a1, 3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, FreeVar(fvref=^1) -> v3, Insn(iref=%3) -> v7, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v8
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=0)])
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, v2]
// [Asm] move: s10 <- v3
// [Asm] defined: s10 is X
// [Asm] skip edge 3 -> 1
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v2]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, a0, v2]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- v7
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- v9
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] Label("h21") clobbered_x: @hashset.of([s0, a1, a0])
// [Asm] Label("h21") clobbered_f: @hashset.of([])
// [Asm] subst   addi v5, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v11, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   jalr v11 ->   jalr a1
// [Asm] subst   mul v7, v2, v6 ->   mul a0, s0, a0
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a1)
// [Asm] subst   beq v2, zero, .h21_1 ->   beq s0, zero, .h21_1
// [Asm] subst   ret ->   ret
// [Asm] subst   li v9, 1 ->   li a0, 1
// [Asm] subst   j .h21_3 ->   j .h21_3
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, FnParam(fref=f8, fpref=$f.0) -> v2, Self(fref=f8) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v2]
// [Asm] move: s10 <- v4
// [Asm] defined: s10 is X
// [Asm] skip edge 4 -> 3
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("aux9.48") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("aux9.48") clobbered_f: @hashset.of([])
// [Asm] subst   ld v3, arr.47 ->   ld a1, arr.47
// [Asm] subst   ld v4, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   mv s10, v4 ->   mv s10, a1
// [Asm] subst   ld v6, 0(v4) ->   ld a1, 0(a1)
// [Asm] subst   jalr v6 ->   jalr a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v5, Insn(iref=%7) -> v8, Self(fref=f16) -> v0, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Insn(iref=%8) -> v9, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2]
// [Asm] move: s10 <- v2
// [Asm] defined: s10 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v17]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v16, a0]
// [Asm] move: a0 <- v17
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: []
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v6]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v6]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v5]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main37") clobbered_x: @hashset.of([s0, a1, a0])
// [Asm] Label("main37") clobbered_f: @hashset.of([])
// [Asm] subst   ld v2, fixedpoint.52 ->   ld a0, fixedpoint.52
// [Asm] subst   mv s10, v2 ->   mv s10, a0
// [Asm] subst   ld v16, 0(v2) ->   ld a1, 0(a0)
// [Asm] subst   li v17, 5 ->   li a0, 5
// [Asm] subst   jalr v16 ->   jalr a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   lw v5, a.33 ->   lw s0, a.33
// [Asm] subst   addi v6, v5, 10 ->   addi a0, s0, 10
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v8, v5, 31 ->   addi a0, s0, 31
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("dummy1") clobbered_x: @hashset.of([a0])
// [Asm] Label("dummy1") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, Mem(fref=f1, mref=m0) -> v3, Insn(iref=%0) -> v4, Self(fref=f1) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v6, v3]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("g18") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("g18") clobbered_f: @hashset.of([])
// [Asm] subst   addi v3, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   la v6, h21 ->   la a2, h21
// [Asm] subst   sd v6, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v3) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f10) -> v0, Mem(fref=f10, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$fixedpoint.52") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$fixedpoint.52") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   la v7, aux9.48 ->   la a1, aux9.48
// [Asm] subst   sd v7, 0(v2) ->   sd a1, 0(a0)
// [Asm] subst   call g18 ->   call g18
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f18) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f14) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v3]
// [Asm] move: s10 <- v2
// [Asm] defined: s10 is X
// [Asm] skip edge 2 -> 0
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v3]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$a.33") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("T$a.33") clobbered_f: @hashset.of([])
// [Asm] subst   ld v2, fixedpoint.52 ->   ld a0, fixedpoint.52
// [Asm] subst   lw v3, _59 ->   lw a1, _59
// [Asm] subst   mv s10, v2 ->   mv s10, a0
// [Asm] subst   ld v5, 0(v2) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   jalr v5 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main37:
// [Asm] # block info: defs: [v3, t1, v16, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v16, v5, a0, v8, v17, v6, v9, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main37_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   ld v2, fixedpoint.52  # live: [v2]
// [Asm]   mv s10, v2  # live: [v2]
// [Asm]   ld v16, 0(v2)  # live: [v16]
// [Asm]   # save_ctx2  # live: [v16]
// [Asm]   li v17, 5  # live: [v16, v17]
// [Asm]   mv a0, v17  # live: [v16, a0]
// [Asm]   jalr v16  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v4, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm]   lw v5, a.33  # live: [v5]
// [Asm]   addi v6, v5, 10  # live: [v5, v6]
// [Asm]   # save_ctx2  # live: [v5, v6]
// [Asm]   mv a0, v6  # live: [v5, a0]
// [Asm]   call minimbt_print_int  # live: [v5, a0]
// [Asm]   mv v7, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm]   addi v8, v5, 31  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$fixedpoint.52:
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v7, v4, s11, a0, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$fixedpoint.52_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -8  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [v2]
// [Asm]   la v7, aux9.48  # live: [v7, v2]
// [Asm]   sd v7, 0(v2)  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call g18  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$arr.47:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v10, a0, v7, v4, a2, a1, s11, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$arr.47_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v4, _57  # live: [v4, s11]
// [Asm]   addi v2, s11, -8  # live: [v4, v2]
// [Asm]   andi s11, v2, -8  # live: [v4, s11, v2]
// [Asm]   la v10, dummy1  # live: [v4, s11, v10, v2]
// [Asm]   sd v10, 0(v2)  # live: [v4, s11, v2]
// [Asm]   slliw v7, v4, 3  # live: [v7, v4, s11, v2]
// [Asm]   sub v3, s11, v7  # live: [v2, v4, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v4, v3]
// [Asm]   mv a1, v4  # live: [v2, a1, v3]
// [Asm]   mv a0, v3  # live: [v2, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [a2, a1, a0, v3]
// [Asm]   call memseti64  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dummy1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dummy1_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$a.33:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v4, v5, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$a.33_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   ld v2, fixedpoint.52  # live: [v2]
// [Asm]   lw v3, _59  # live: [v2, v3]
// [Asm]   mv s10, v2  # live: [v2, v3]
// [Asm]   ld v5, 0(v2)  # live: [v5, v3]
// [Asm]   # save_ctx2  # live: [v5, v3]
// [Asm]   mv a0, v3  # live: [v5, a0]
// [Asm]   jalr v5  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] aux9.48:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, v4, v6, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux9.48_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   ld v3, arr.47  # live: [v3, v2]
// [Asm]   ld v4, 0(v3)  # live: [v4, v2]
// [Asm]   mv s10, v4  # live: [v4, v2]
// [Asm]   ld v6, 0(v4)  # live: [v6, v2]
// [Asm]   # save_ctx2  # live: [v6, v2]
// [Asm]   mv a0, v2  # live: [v6, a0]
// [Asm]   jalr v6  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] h21:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v2, v0, s10, a0, zero], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .h21_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   beq v2, zero, .h21_1  # live: [v3, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v5, a0, v7, v6, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .h21_2:
// [Asm]   addi v5, v2, -1  # live: [v3, v5, v2]
// [Asm]   mv s10, v3  # live: [v3, v5, v2]
// [Asm]   ld v11, 0(v3)  # live: [v11, v5, v2]
// [Asm]   # save_ctx2  # live: [v11, v5, v2]
// [Asm]   mv a0, v5  # live: [v11, a0, v2]
// [Asm]   jalr v11  # live: [a0, v2]
// [Asm]   mv v6, a0  # live: [v6, v2]
// [Asm]   # restore_ctx2  # live: [v6, v2]
// [Asm]   mul v7, v2, v6  # live: [v7]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .h21_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v9, v8], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .h21_1:
// [Asm] # control
// [Asm]   li v9, 1  # live: [v9]
// [Asm]   mv v8, v9  # live: [v8]
// [Asm]   j .h21_3  # live: [v8]
// [Asm] 
// [Asm] # leaf true
// [Asm] g18:
// [Asm] # block info: defs: [v3, v6, s11, a0, v2], uses: [v2, v6, s11, a0, v3], upward_exposed: [s11, a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .g18_0:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm]   addi v3, s11, -16  # live: [v2, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v3]
// [Asm]   la v6, h21  # live: [v2, v6, v3]
// [Asm]   sd v6, 0(v3)  # live: [v2, v3]
// [Asm]   sd v2, 8(v3)  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_54:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, zero, a0, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_54_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   ld v2, arr.47  # live: [zero, v2]
// [Asm]   lw v3, _58  # live: [v3, zero, v2]
// [Asm]   ld v4, fixedpoint.52  # live: [v3, v4, zero, v2]
// [Asm]   th.surd v4, v2, v3, 3  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, t5, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call T$arr.47  # live: [a0]
// [Asm]   la t5, arr.47  # live: [t5, a0]
// [Asm]   sd a0, 0(t5)  # live: []
// [Asm]   call T$fixedpoint.52  # live: [a0]
// [Asm]   la t5, fixedpoint.52  # live: [t5, a0]
// [Asm]   sd a0, 0(t5)  # live: []
// [Asm]   call T$_54  # live: []
// [Asm]   call T$a.33  # live: [a0]
// [Asm]   la t5, a.33  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call main37  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] arr.47:
// [Asm]   .zero 8
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _57:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] fixedpoint.52:
// [Asm]   .zero 8
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] a.33:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _58:
// [Asm]   .word 0
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _59:
// [Asm]   .word 5
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] _54:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("i", Int)], body: Var("i")}, LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))
// [Knf] build_knf: Array(Int(1), Var("dummy"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))))
// [Knf] build_knf: App(Get(Var("arr"), Int(0)), [Var("x")])
// [Knf] build_knf: Get(Var("arr"), Int(0))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))
// [Knf] build_knf: App(Var("f"), [Var("aux")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))
// [Knf] build_knf: Put(Var("arr"), Int(0), Var("fixedpoint"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")]))
// [Knf] build_knf: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("h")
// [Knf] build_knf: App(Var("landins_knot"), [Var("g")])
// [Knf] build_knf: Var("landins_knot")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g")))
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))
// [Knf] build_knf: Prim(Var("x"), Var("a"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))
// [Knf] build_knf: App(Var("f1"), [])
// [Knf] build_knf: Var("f1")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])]))
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(10)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(10)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(31)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(31)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce factorial.28 = fixedpoint.52
// [Main] top int reduce _46 = Int(1)
// [Main] top int reduce _53 = Int(0)
// [Main] top int reduce _32 = Int(5)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main37
// [Main]   .type main37, @function
// [Main] # leaf false
// [Main] main37:
// [Main] .main37_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   ld a0, fixedpoint.52
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   li a0, 5
// [Main]   jalr a1
// [Main]   call minimbt_print_int
// [Main]   lw s0, a.33
// [Main]   addi a0, s0, 10
// [Main]   call minimbt_print_int
// [Main]   addi a0, s0, 31
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$fixedpoint.52
// [Main]   .type T$fixedpoint.52, @function
// [Main] # leaf false
// [Main] T$fixedpoint.52:
// [Main] .T$fixedpoint.52_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   la a1, aux9.48
// [Main]   sd a1, 0(a0)
// [Main]   call g18
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$arr.47
// [Main]   .type T$arr.47, @function
// [Main] # leaf false
// [Main] T$arr.47:
// [Main] .T$arr.47_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a0, _57
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   la a1, dummy1
// [Main]   sd a1, 0(a2)
// [Main]   slliw a1, a0, 3
// [Main]   sub s0, s11, a1
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dummy1
// [Main]   .type dummy1, @function
// [Main] # leaf true
// [Main] dummy1:
// [Main] .dummy1_0:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$a.33
// [Main]   .type T$a.33, @function
// [Main] # leaf false
// [Main] T$a.33:
// [Main] .T$a.33_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   ld a0, fixedpoint.52
// [Main]   lw a1, _59
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux9.48
// [Main]   .type aux9.48, @function
// [Main] # leaf false
// [Main] aux9.48:
// [Main] .aux9.48_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   ld a1, arr.47
// [Main]   ld a1, 0(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl h21
// [Main]   .type h21, @function
// [Main] # leaf false
// [Main] h21:
// [Main] .h21_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a1, s10
// [Main]   mv s0, a0
// [Main]   ld a1, 8(a1)
// [Main]   beq s0, zero, .h21_1
// [Main] 
// [Main] .h21_2:
// [Main]   addi a0, s0, -1
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   mul a0, s0, a0
// [Main] 
// [Main] .h21_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .h21_1:
// [Main]   li a0, 1
// [Main]   j .h21_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g18
// [Main]   .type g18, @function
// [Main] # leaf true
// [Main] g18:
// [Main] .g18_0:
// [Main]   addi a1, s11, -16
// [Main]   andi s11, a1, -8
// [Main]   la a2, h21
// [Main]   sd a2, 0(a1)
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_54
// [Main]   .type T$_54, @function
// [Main] # leaf true
// [Main] T$_54:
// [Main] .T$_54_0:
// [Main]   ld a0, arr.47
// [Main]   lw a1, _58
// [Main]   ld a2, fixedpoint.52
// [Main]   th.surd a2, a0, a1, 3
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call T$arr.47
// [Main]   la t5, arr.47
// [Main]   sd a0, 0(t5)
// [Main]   call T$fixedpoint.52
// [Main]   la t5, fixedpoint.52
// [Main]   sd a0, 0(t5)
// [Main]   call T$_54
// [Main]   call T$a.33
// [Main]   la t5, a.33
// [Main]   sw a0, 0(t5)
// [Main]   call main37
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl arr.47
// [Main]   .type arr.47, @object
// [Main] arr.47:
// [Main]   .zero 8
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _57
// [Main]   .type _57, @object
// [Main] _57:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl fixedpoint.52
// [Main]   .type fixedpoint.52, @object
// [Main] fixedpoint.52:
// [Main]   .zero 8
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl a.33
// [Main]   .type a.33, @object
// [Main] a.33:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _58
// [Main]   .type _58, @object
// [Main] _58:
// [Main]   .word 0
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _59
// [Main]   .type _59, @object
// [Main] _59:
// [Main]   .word 5
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _54
// [Main]   .type _54, @object
// [Main] _54:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$arr.47
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f0))])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), mref=m1, fills=[Init(val=Mem(fref=f6, mref=m0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Lowering control Return(args=[Mem(fref=f6, mref=m1)])
// [Wasm] Get Local name Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Local Mem(fref=f6, mref=m1) -> $f6.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowered function T$arr.47 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$_54
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), sref=::1)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::3)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=ClosureFn(params=[Int32], ty=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Store(ty=ClosureFn(params=[Int32], ty=Int32), ma=Offset(ty=ClosureFn(params=[Int32], ty=Int32), val=Insn(iref=%0), offset=Insn(iref=%1), width=@ptr), val=Insn(iref=%2))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$_54 to wasm
// [Wasm] LoweringOrder: [0, 2, 1, 3]
// [Wasm] LoweringOrder: [[1, 2], [3], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Wasm] LoweringOrder: [b0, b2, b3, b1]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Wasm] Lowering function h21
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^1), args=[Insn(iref=%1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[FnParam(fref=f4, fpref=$f.0), Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function h21 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function aux9.48
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), sref=::1)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=ClosureFn(params=[Int32], ty=Int32), ma=Field(ty=ClosureFn(params=[Int32], ty=Int32), val=Insn(iref=%0), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%1), args=[FnParam(fref=f8, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function aux9.48 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main37
// [Wasm] Lowering insn LoadSymbol(ty=ClosureFn(params=[Int32], ty=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%0), args=[Int32(val=5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::6)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=10), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=31), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Return(args=[Insn(iref=%8)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main37 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function dummy1
// [Wasm] Lowering control Return(args=[FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function dummy1 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function g18
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f4)), Field(index=1, val=FnParam(fref=f1, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function g18 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$fixedpoint.52
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f8))])
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Int32], ty=Int32), f=f1, args=[Mem(fref=f10, mref=m0)])
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Lowered function T$fixedpoint.52 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f16, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$a.33
// [Wasm] Lowering insn LoadSymbol(ty=ClosureFn(params=[Int32], ty=Int32), sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::5)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%0), args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$a.33 to wasm
// [KnfOpt] freq: {dummy1: AsClosure, landins_knot4: Once, aux9: AsClosure, g18: AsClosure, h21: AsClosure, f129: Once, g34: Many(2), main37: Once}
// [KnfOpt] Knf inline Some(landins_knot4)
// [KnfOpt] Knf inline Some(f129)
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(g34)
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(g34)
// [KnfOpt] Numbers of let rec: 5 8 3
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: MaybeInClosure, f8: MaybeInClosure, f16: Once, f0: MaybeInClosure, f1: Once, f10: Once, f18: Once, f14: Once})
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%3)
