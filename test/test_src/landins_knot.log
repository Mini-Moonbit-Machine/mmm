// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, Insn(iref=%4) -> v6, Insn(iref=%1) -> v4, Insn(iref=%3) -> v7, Self(fref=f6) -> v0, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] fuse raw offset and compute address
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=Insn(iref=%1), width=@64))
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v11, v4, zero, v2]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v8, zero, v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$_54") clobbered_x: @hashset.of([a2, a1, a3, a0])
// [Asm] Label("T$_54") clobbered_f: @hashset.of([])
// [Asm] subst   ld v3, arr.47 ->   ld a0, arr.47
// [Asm] subst   lw v4, _72 ->   lw a1, _72
// [Asm] subst   addi v2, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   la v11, h.60 ->   la a3, h.60
// [Asm] subst   sd v11, 0(v2) ->   sd a3, 0(a2)
// [Asm] subst   slliw v8, v4, 3 ->   slliw a1, a1, 3
// [Asm] subst   add v9, v3, v8 ->   add a0, a0, a1
// [Asm] subst   sd v2, 0(v9) ->   sd a2, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v9, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Self(fref=f4) -> v0, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%4) -> v7
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v6, v12, v2]
// [Asm] defined: v12 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v12, v2]
// [Asm] move: s10 <- v6
// [Asm] defined: s10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v12, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v12, a0, v2]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v2]
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v8
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] defined: v10 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v10
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] Label("h.60") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("h.60") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v4, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   ld v5, arr.47 ->   ld a1, arr.47
// [Asm] subst   ld v6, 0(v5) ->   ld a2, 0(a1)
// [Asm] subst   ld v12, 0(v6) ->   ld a1, 0(a2)
// [Asm] subst   mv s10, v6 ->   mv s10, a2
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   mulw v8, v2, v7 ->   mulw a0, s0, a0
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   beq v2, zero, .h.60_1 ->   beq s0, zero, .h.60_1
// [Asm] subst   li v10, 1 ->   li a0, 1
// [Asm] subst   j .h.60_3 ->   j .h.60_3
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v5, Insn(iref=%7) -> v9, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Self(fref=f10) -> v0, Insn(iref=%6) -> v8, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v17
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: []
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: []
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.37") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.37") clobbered_f: @hashset.of([])
// [Asm] subst   li v17, 5 ->   li a0, 5
// [Asm] subst   call h.60 ->   call h.60
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   lw v4, a.33 ->   lw a0, a.33
// [Asm] subst   addi v5, v4, 10 ->   addi a0, a0, 10
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   lw v7, a.33 ->   lw a0, a.33
// [Asm] subst   addi v8, v7, 31 ->   addi a0, a0, 31
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$a.33") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$a.33") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, _73 ->   lw a0, _73
// [Asm] subst   call h.60 ->   call h.60
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v5, Mem(fref=f2, mref=m1) -> v3, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11]
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v4, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, s11, v10, v2]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v3]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] skip edge 7 -> 5
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v3]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$arr.47") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("T$arr.47") clobbered_f: @hashset.of([])
// [Asm] subst   lw v4, _71 ->   lw a1, _71
// [Asm] subst   addi v2, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   la v10, dummy.1 ->   la a0, dummy.1
// [Asm] subst   sd v10, 0(v2) ->   sd a0, 0(a2)
// [Asm] subst   slliw v7, v4, 3 ->   slliw a0, a1, 3
// [Asm] subst   sub v3, s11, v7 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("dummy.1") clobbered_x: @hashset.of([a0])
// [Asm] Label("dummy.1") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$a.33:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$a.33_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, _73  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call h.60  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dummy.1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dummy.1_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.37:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v5, a0, v7, v8, v4, v17, v9, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.37_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v17, 5  # live: [v17]
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   call h.60  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm]   lw v4, a.33  # live: [v4]
// [Asm]   addi v5, v4, 10  # live: [v5]
// [Asm]   # save_ctx2  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm]   lw v7, a.33  # live: [v7]
// [Asm]   addi v8, v7, 31  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] h.60:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .h.60_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   beq v2, zero, .h.60_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, a0, v7, v8, v4, v6, v12, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .h.60_2:
// [Asm]   addi v4, v2, -1  # live: [v4, v2]
// [Asm]   ld v5, arr.47  # live: [v4, v5, v2]
// [Asm]   ld v6, 0(v5)  # live: [v4, v6, v2]
// [Asm]   ld v12, 0(v6)  # live: [v4, v6, v12, v2]
// [Asm]   mv s10, v6  # live: [v4, v12, v2]
// [Asm]   # save_ctx2  # live: [v4, v12, v2]
// [Asm]   mv a0, v4  # live: [v12, a0, v2]
// [Asm]   jalr v12  # live: [a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v2]
// [Asm]   # restore_ctx2  # live: [v7, v2]
// [Asm]   mulw v8, v2, v7  # live: [v8]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .h.60_3:
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v10, v9], uses: [v10], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .h.60_1:
// [Asm] # control
// [Asm]   li v10, 1  # live: [v10]
// [Asm]   mv v9, v10  # live: [v9]
// [Asm]   j .h.60_3  # live: [v9]
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_54:
// [Asm] # block info: defs: [v3, v11, a0, v8, v4, s11, v9, v2], uses: [v2, v11, zero, a0, v8, v4, s11, v9, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_54_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   ld v3, arr.47  # live: [s11, zero, v3]
// [Asm]   lw v4, _72  # live: [v4, s11, zero, v3]
// [Asm]   addi v2, s11, -8  # live: [v3, v4, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v4, zero, v2]
// [Asm]   la v11, h.60  # live: [v3, v11, v4, zero, v2]
// [Asm]   sd v11, 0(v2)  # live: [v3, v4, zero, v2]
// [Asm]   slliw v8, v4, 3  # live: [v3, v8, zero, v2]
// [Asm]   add v9, v3, v8  # live: [zero, v9, v2]
// [Asm]   sd v2, 0(v9)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$arr.47:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v10, a0, v7, v4, a2, a1, s11, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$arr.47_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v4, _71  # live: [v4, s11]
// [Asm]   addi v2, s11, -8  # live: [v4, v2]
// [Asm]   andi s11, v2, -8  # live: [v4, s11, v2]
// [Asm]   la v10, dummy.1  # live: [v4, s11, v10, v2]
// [Asm]   sd v10, 0(v2)  # live: [v4, s11, v2]
// [Asm]   slliw v7, v4, 3  # live: [v7, v4, s11, v2]
// [Asm]   sub v3, s11, v7  # live: [v2, v4, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v4, v3]
// [Asm]   mv a1, v4  # live: [v2, a1, v3]
// [Asm]   mv a0, v3  # live: [v2, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [a2, a1, a0, v3]
// [Asm]   call memseti64  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, t5, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call T$arr.47  # live: [a0]
// [Asm]   la t5, arr.47  # live: [t5, a0]
// [Asm]   sd a0, 0(t5)  # live: []
// [Asm]   call T$_54  # live: []
// [Asm]   call T$a.33  # live: [a0]
// [Asm]   la t5, a.33  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call main.37  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _71:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] arr.47:
// [Asm]   .zero 8
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] a.33:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _72:
// [Asm]   .word 0
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _73:
// [Asm]   .word 5
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] _54:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce factorial.28 = fixedpoint.52
// [Main] top int reduce _46 = Int(1)
// [Main] top int reduce _53 = Int(0)
// [Main] top int reduce _32 = Int(5)
// [Main] beta reduce fixedpoint.52 = h.60
// [Main] top int reduce _57 = Int(1)
// [Main] top int reduce _58 = Int(0)
// [Main] top int reduce _59 = Int(5)
// [Main] top int reduce _66 = Int(1)
// [Main] top int reduce _67 = Int(0)
// [Main] top int reduce _68 = Int(5)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$a.33
// [Main]   .type T$a.33, @function
// [Main] # leaf false
// [Main] T$a.33:
// [Main] .T$a.33_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, _73
// [Main]   call h.60
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dummy.1
// [Main]   .type dummy.1, @function
// [Main] # leaf true
// [Main] dummy.1:
// [Main] .dummy.1_0:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.37
// [Main]   .type main.37, @function
// [Main] # leaf false
// [Main] main.37:
// [Main] .main.37_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 5
// [Main]   call h.60
// [Main]   call minimbt_print_int
// [Main]   lw a0, a.33
// [Main]   addi a0, a0, 10
// [Main]   call minimbt_print_int
// [Main]   lw a0, a.33
// [Main]   addi a0, a0, 31
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl h.60
// [Main]   .type h.60, @function
// [Main] # leaf false
// [Main] h.60:
// [Main] .h.60_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, a0
// [Main]   beq s0, zero, .h.60_1
// [Main] 
// [Main] .h.60_2:
// [Main]   addi a0, s0, -1
// [Main]   ld a1, arr.47
// [Main]   ld a2, 0(a1)
// [Main]   ld a1, 0(a2)
// [Main]   mv s10, a2
// [Main]   jalr a1
// [Main]   mulw a0, s0, a0
// [Main] 
// [Main] .h.60_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .h.60_1:
// [Main]   li a0, 1
// [Main]   j .h.60_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_54
// [Main]   .type T$_54, @function
// [Main] # leaf true
// [Main] T$_54:
// [Main] .T$_54_0:
// [Main]   ld a0, arr.47
// [Main]   lw a1, _72
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   la a3, h.60
// [Main]   sd a3, 0(a2)
// [Main]   slliw a1, a1, 3
// [Main]   add a0, a0, a1
// [Main]   sd a2, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$arr.47
// [Main]   .type T$arr.47, @function
// [Main] # leaf false
// [Main] T$arr.47:
// [Main] .T$arr.47_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a1, _71
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   la a0, dummy.1
// [Main]   sd a0, 0(a2)
// [Main]   slliw a0, a1, 3
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call T$arr.47
// [Main]   la t5, arr.47
// [Main]   sd a0, 0(t5)
// [Main]   call T$_54
// [Main]   call T$a.33
// [Main]   la t5, a.33
// [Main]   sw a0, 0(t5)
// [Main]   call main.37
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _71
// [Main]   .type _71, @object
// [Main] _71:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl arr.47
// [Main]   .type arr.47, @object
// [Main] arr.47:
// [Main]   .zero 8
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl a.33
// [Main]   .type a.33, @object
// [Main] a.33:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _72
// [Main]   .type _72, @object
// [Main] _72:
// [Main]   .word 0
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _73
// [Main]   .type _73, @object
// [Main] _73:
// [Main]   .word 5
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _54
// [Main]   .type _54, @object
// [Main] _54:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("dummy", Int), args: [("i", Int)], body: Var("i")}, LetRec({tyvars: [], name: ("landins_knot", (Int) -> Int), args: [("f", ((Int) -> Int) -> (Int) -> Int)], body: Let(("arr", Var(None)), Array(Int(1), Var("dummy")), LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", (Int) -> Int), LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])), LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit))))))
// [Typer] resolve: Var("i")
// [Typer] resolve: LetRec({tyvars: [], name: ("landins_knot", (Int) -> Int), args: [("f", ((Int) -> Int) -> (Int) -> Int)], body: Let(("arr", Var(None)), Array(Int(1), Var("dummy")), LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", (Int) -> Int), LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])), LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit)))))
// [Typer] resolve: Let(("arr", Var(None)), Array(Int(1), Var("dummy")), LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))
// [Typer] resolve: Array(Int(1), Var("dummy"))
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("dummy")
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))))
// [Typer] resolve: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Get(Var("arr"), Int(0))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))
// [Typer] resolve: App(Var("f"), targs=None, [Var("aux")])
// [Typer] resolve: Var("aux")
// [Typer] resolve: Var("f")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))
// [Typer] resolve: Put(Var("arr"), Int(0), Var("fixedpoint"))
// [Typer] resolve: Var("arr")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("fixedpoint")
// [Typer] resolve: Var("fixedpoint")
// [Typer] resolve: Let(("factorial", (Int) -> Int), LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])), LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit))))
// [Typer] resolve: LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")]))
// [Typer] resolve: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))
// [Typer] resolve: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))
// [Typer] resolve: Eq(Var("x"), Int(0))
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("h")
// [Typer] resolve: App(Var("landins_knot"), targs=None, [Var("g")])
// [Typer] resolve: Var("g")
// [Typer] resolve: Var("landins_knot")
// [Typer] resolve: LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit)))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])
// [Typer] resolve: App(Var("factorial"), targs=None, [Int(5)])
// [Typer] resolve: Int(5)
// [Typer] resolve: Var("factorial")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit))
// [Typer] resolve: Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g")))
// [Typer] resolve: App(Var("factorial"), targs=None, [Int(5)])
// [Typer] resolve: Int(5)
// [Typer] resolve: Var("factorial")
// [Typer] resolve: LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))
// [Typer] resolve: Prim(Var("x"), Var("a"), Add, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("g")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit)
// [Typer] resolve: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))
// [Typer] resolve: App(Var("f1"), targs=None, [])
// [Typer] resolve: Var("f1")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])]))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])])
// [Typer] resolve: App(Var("with_effect"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("with_effect")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])
// [Typer] resolve: App(Var("with_effect"), targs=None, [Int(31)])
// [Typer] resolve: Int(31)
// [Typer] resolve: Var("with_effect")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("dummy", Int), args: [("i", Int)], body: Var("i")}, LetRec({tyvars: [], name: ("landins_knot", (Int) -> Int), args: [("f", ((Int) -> Int) -> (Int) -> Int)], body: Let(("arr", Var(None)), Array(Int(1), Var("dummy")), LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", (Int) -> Int), LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])), LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit)))))) against Unit
// [Typer] typevars: []
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("landins_knot", (Int) -> Int), args: [("f", ((Int) -> Int) -> (Int) -> Int)], body: Let(("arr", Var(None)), Array(Int(1), Var("dummy")), LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", (Int) -> Int), LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])), LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("arr", Var(None)), Array(Int(1), Var("dummy")), LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))))) against (Int) -> Int
// [Typer] infer: Array(Int(1), Var("dummy"))
// [Typer] infer: Var("dummy")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[(Int) -> Int]
// [Typer] union: Var(None) and Array[(Int) -> Int]
// [Typer] check: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])}, Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))) against (Int) -> Int
// [Typer] typevars: []
// [Typer] infer: App(Get(Var("arr"), Int(0)), targs=None, [Var("x")])
// [Typer] infer: Get(Var("arr"), Int(0))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[(Int) -> Int]))
// [Typer] inst result: Array[(Int) -> Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] check: Let(("fixedpoint", Var(None)), App(Var("f"), targs=None, [Var("aux")]), Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))) against (Int) -> Int
// [Typer] infer: App(Var("f"), targs=None, [Var("aux")])
// [Typer] inst: TypeScheme(([], ((Int) -> Int) -> (Int) -> Int))
// [Typer] inst result: ((Int) -> Int) -> (Int) -> Int
// [Typer] check: Var("aux") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Int) -> Int
// [Typer] union: Var(None) and (Int) -> Int
// [Typer] check: Let(("_", Var(None)), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")) against (Int) -> Int
// [Typer] infer: Put(Var("arr"), Int(0), Var("fixedpoint"))
// [Typer] infer: Var("fixedpoint")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Var("arr") against Array[(Int) -> Int]
// [Typer] inst: TypeScheme(([], Array[(Int) -> Int]))
// [Typer] inst result: Array[(Int) -> Int]
// [Typer] unify: Array[(Int) -> Int] and Array[(Int) -> Int]
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("fixedpoint") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("factorial", (Int) -> Int), LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])), LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit)))) against Unit
// [Typer] check: LetRec({tyvars: [], name: ("g", Var(None)), args: [("f", Var(None))], body: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))}, App(Var("landins_knot"), targs=None, [Var("g")])) against (Int) -> Int
// [Typer] typevars: []
// [Typer] infer: LetRec({tyvars: [], name: ("h", Var(None)), args: [("x", Var(None))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))}, Var("h"))
// [Typer] typevars: []
// [Typer] infer: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None))
// [Typer] check: Eq(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] infer: Int(0)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Int(1)
// [Typer] infer: Prim(Var("x"), App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)]), Mul, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: App(Var("f"), targs=None, [Prim(Var("x"), Int(1), Sub, kind=None)])
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Int) -> Var(None)
// [Typer] union: Var(None) and (Int) -> Var(None)
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and Var(None)
// [Typer] union: (Int) -> Int and Var(None)
// [Typer] check: App(Var("landins_knot"), targs=None, [Var("g")]) against (Int) -> Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], ((Int) -> Int) -> (Int) -> Int))
// [Typer] inst result: ((Int) -> Int) -> (Int) -> Int
// [Typer] inst: TypeScheme(([], (((Int) -> Int) -> (Int) -> Int) -> (Int) -> Int))
// [Typer] inst result: (((Int) -> Int) -> (Int) -> Int) -> (Int) -> Int
// [Typer] unify: (((Int) -> Int) -> (Int) -> Int) -> (Int) -> Int and (((Int) -> Int) -> (Int) -> Int) -> (Int) -> Int
// [Typer] unify: ((Int) -> Int) -> (Int) -> Int and ((Int) -> Int) -> (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("f1", Unit), args: [], body: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])])}, Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: App(Var("print_int"), targs=None, [App(Var("factorial"), targs=None, [Int(5)])]) against Unit
// [Typer] infer: App(Var("factorial"), targs=None, [Int(5)])
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Int(5) against Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Let(("with_effect", (Int) -> Int), Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))), LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit)) against Unit
// [Typer] check: Let(("a", Var(None)), App(Var("factorial"), targs=None, [Int(5)]), LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g"))) against (Int) -> Int
// [Typer] infer: App(Var("factorial"), targs=None, [Int(5)])
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Int(5) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Var(None)), args: [("x", Var(None))], body: Prim(Var("x"), Var("a"), Add, kind=None)}, Var("g")) against (Int) -> Int
// [Typer] typevars: []
// [Typer] infer: Prim(Var("x"), Var("a"), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Int and Var(None)
// [Typer] union: Int and Var(None)
// [Typer] check: Var("g") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("f1"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])))
// [Typer] infer: App(Var("f1"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])]), App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])]))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(10)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("with_effect"), targs=None, [Int(10)]) against Int
// [Typer] infer: Int(10)
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("with_effect"), targs=None, [Int(31)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("with_effect"), targs=None, [Int(31)]) against Int
// [Typer] infer: Int(31)
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {dummy.1: AsClosure, landins_knot.4: Once, aux.9: AsClosure, g.18: AsClosure, h.21: AsClosure, f1.29: Once, g.34: Many(2), main.37: Once}
// [KnfOpt] Knf inline Some(landins_knot)
// [KnfOpt] Knf inline Some(f1)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(g)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(g)
// [KnfOpt] freq: {dummy.1: AsClosure, g.18: Once, h.21: AsClosure, aux.48: AsClosure, main.37: Once}
// [KnfOpt] Knf inline Some(g)
// [KnfOpt] freq: {dummy.1: AsClosure, aux.48: Once, h.60: AsClosure, main.37: Once}
// [KnfOpt] Knf inline Some(aux)
// [KnfOpt] Numbers of let rec: 3 5 2
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [KnfOpt] Tuple freq: {i.3: MayEscape, _71: MayEscape, dummy.1: MayEscape, _64: MayEscape, h.60: MayEscape, _73: MayEscape, _55: MayEscape, _56: MayEscape, _41: MayEscape, _45: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: MaybeInClosure, f10: Once, f8: Once, f2: Once, f0: MaybeInClosure})
// [CoreOpt] allow_inline: false %0 main.37 false true true false true
// [CoreOpt] allow_inline: false %0 h.60 false false true false true
// [CoreOpt] allow_inline: false %1 h.60 true false true false true
// [CoreOpt] allow_inline: false %0 main.37 false true true false true
// [CoreOpt] allow_inline: false %0 h.60 false false true false true
// [CoreOpt] allow_inline: false %1 h.60 true false true false true
// [CoreOpt] allow_inline: false %0 main.37 false true true false true
// [CoreOpt] allow_inline: false %0 h.60 false false true false true
// [CoreOpt] allow_inline: false %1 h.60 true false true false true
// [CoreOpt] allow_inline: false %0 main.37 false true true false true
// [CoreOpt] allow_inline: false %0 h.60 false false true false true
// [CoreOpt] allow_inline: false %1 h.60 true false true false true
// [CoreOpt] allow_inline: false %0 main.37 false true true false true
// [CoreOpt] allow_inline: false %0 h.60 false false true false true
// [CoreOpt] allow_inline: false %1 h.60 true false true false true
// [CoreOpt] allow_inline: false %0 main.37 false true true false true
// [CoreOpt] allow_inline: false %0 h.60 false false true false true
// [CoreOpt] allow_inline: false %1 h.60 true false true false true
