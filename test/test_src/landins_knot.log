// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%1) -> v3, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s10 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f129_12"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v7 ← a0", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="s10", color=blue];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v6 ← a1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="v3 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v2-> 1:s10-> 2:v6-> 3:v7-> 4:a0-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v3-> 18:v4"
// [Asm]   comment = "v2<-a0;v7<-a0;v6<-a1;v4<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f129_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v2, factorial.28 ->   ld a0, factorial.28
// [Asm] subst   mv s10, v2 ->   mv s10, a0
// [Asm] subst   ld v6, 0(v2) ->   ld a1, 0(a0)
// [Asm] subst   li v7, 5 ->   li a0, 5
// [Asm] subst   jalr v6 ->   jalr a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, FreeVar(fvref=^1) -> v3, Insn(iref=%3) -> v7, FnParam(fref=f8, fpref=$f.0) -> v2, Self(fref=f8) -> v0, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f8, fpref=$f.0), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, a0, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v9]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of h21_8"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r23 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="v2 ← s0", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r1 [label="v5 ← a0", color=green];
// [Asm]   r11 [label="a1", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r22 [label="zero", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="v11 ← a1", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r21 [label="v0 ← a1", color=green];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r16;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r14;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r21;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:a0-> 3:v2-> 5:v11-> 1:v5-> 2:v3-> 4:s10-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a1-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 21:v0-> 22:zero-> 18:v6-> 19:v7-> 20:v8-> 23:v9"
// [Asm]   comment = "v8<-a0;v9<-a0;v2<-s0;v5<-a0;v11<-a1;v3<-a1;v6<-a0;v7<-a0;v0<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of h21_8"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v5, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v11, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   jalr v11 ->   jalr a1
// [Asm] subst   mul v7, v2, v6 ->   mul a0, s0, a0
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a1)
// [Asm] subst   beq v2, zero, .h21_8_1 ->   beq s0, zero, .h21_8_1
// [Asm] subst   li v9, 1 ->   li a0, 1
// [Asm] subst   j .h21_8_3 ->   j .h21_8_3
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f16) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: s10 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$a.3316"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v5 ← a2", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="s10", color=blue];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v2-> 1:v3-> 2:s10-> 3:v5-> 4:a0-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v4"
// [Asm]   comment = "v2<-a0;v5<-a2;v3<-a1;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$a.3316"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v2, factorial.28 ->   ld a0, factorial.28
// [Asm] subst   lw v3, _32 ->   lw a1, _32
// [Asm] subst   mv s10, v2 ->   mv s10, a0
// [Asm] subst   ld v5, 0(v2) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   jalr v5 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dummy1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dummy1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f19) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: []
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: []
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main37_19"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="v11 ← a0", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r19 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v8 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2-> 14:v11-> 15:v3-> 16:v4-> 17:v8-> 18:v5-> 19:v6"
// [Asm]   comment = "v2<-a0;v11<-a0;v3<-a0;v4<-a0;v5<-a0;v6<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main37_19"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call f129_12 ->   call f129_12
// [Asm] subst   li v11, 10 ->   li a0, 10
// [Asm] subst   call g34_18 ->   call g34_18
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v8, 31 ->   li a0, 31
// [Asm] subst   call g34_18 ->   call g34_18
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%2) -> v8, Mem(fref=f1, mref=m2) -> v5, Insn(iref=%1) -> v7, Mem(fref=f1, mref=m0) -> v3, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v4, Insn(iref=%0) -> v6, Insn(iref=%4) -> v10
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, s11, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v16, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v4, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of landins_knot4_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="v15 ← a2", color=green];
// [Asm]   r6 [label="v4 ← s0", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v20 ← a2", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="v11 ← a2", color=green];
// [Asm]   r7 [label="v13 ← a1", color=green];
// [Asm]   r10 [label="s10", color=blue];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="v5 ← a1", color=green];
// [Asm]   r5 [label="v16 ← a2", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r25 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="v18 ← a1", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a1", color=blue];
// [Asm]   r19 [label="a2", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r9;
// [Asm]   r12 -- r20;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r12 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r10;
// [Asm]   r6 -- r16;
// [Asm]   r12 -- r23;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r6 -- r22;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r12 -- r18;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r12 -- r24;
// [Asm]   comment = "0:v2-> 1:s11-> 3:v3-> 4:v20-> 6:v4-> 5:v16-> 7:v13-> 8:v5-> 9:v15-> 10:s10-> 11:v11-> 12:a0-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a1-> 19:a2-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 2:v18-> 25:v9"
// [Asm]   comment = "v2<-a0;v3<-a1;v15<-a2;v4<-s0;v20<-a2;v11<-a2;v13<-a1;v5<-a1;v16<-a2;v9<-a0;v18<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of landins_knot4_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v18, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v3, v18, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v20, dummy1_0 ->   la a2, dummy1_0
// [Asm] subst   sd v20, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   addi v16, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi v4, v16, -8 ->   andi s0, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, s0
// [Asm] subst   sd v3, 0(v4) ->   sd a1, 0(s0)
// [Asm] subst   addi v13, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v5, v13, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a1
// [Asm] subst   la v15, aux9_5 ->   la a2, aux9_5
// [Asm] subst   sd v15, 0(v5) ->   sd a2, 0(a1)
// [Asm] subst   sd v4, 8(v5) ->   sd s0, 8(a1)
// [Asm] subst   mv s10, v2 ->   mv s10, a0
// [Asm] subst   ld v11, 0(v2) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v5 ->   mv a0, a1
// [Asm] subst   jalr v11 ->   jalr a2
// [Asm] subst   sd v9, 0(v4) ->   sd a0, 0(s0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f10) -> v0, Mem(fref=f10, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$factorial.2810"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v8 ← a1", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="t0", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r17 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v6-> 1:v2-> 3:v8-> 2:s11-> 4:a0-> 5:t0-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v4"
// [Asm]   comment = "v6<-a0;v8<-a1;v2<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$factorial.2810"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v6, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v2, v6, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   la v8, g18_2 ->   la a1, g18_2
// [Asm] subst   sd v8, 0(v2) ->   sd a1, 0(a0)
// [Asm] subst   call landins_knot4_1 ->   call landins_knot4_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, Insn(iref=%1) -> v5, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux9_5"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="v6 ← a1", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v4 ← a1", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="s10", color=blue];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r15;
// [Asm]   r2 -- r6;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 6:v6-> 3:v3-> 4:v4-> 5:s10-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v5"
// [Asm]   comment = "v0<-a1;v3<-a1;v6<-a1;v4<-a1;v2<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux9_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v3, 8(v0) ->   ld a1, 8(a1)
// [Asm] subst   ld v4, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   mv s10, v4 ->   mv s10, a1
// [Asm] subst   ld v6, 0(v4) ->   ld a1, 0(a1)
// [Asm] subst   jalr v6 ->   jalr a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.0) -> v2, Mem(fref=f2, mref=m0) -> v3, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g18_2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v5-> 3:v3-> 4:v7-> 5:a0"
// [Asm]   comment = "v2<-a0;v7<-a2;v3<-a1;v5<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g18_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v5, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v3, v5, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v7, h21_8 ->   la a2, h21_8
// [Asm] subst   sd v7, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v3) ->   sd a0, 8(a1)
// [Asm] subst   mv a0, v3 ->   mv a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f18) -> v0, FnParam(fref=f18, fpref=$f.0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g34_18"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   comment = "0:v2-> 1:v3-> 2:v4-> 3:a0"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g34_18"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v3, a.33 ->   lw a1, a.33
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_32_14"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_32_14"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 5 ->   li a0, 5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f22) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_22"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main37_19 ->   call main37_19
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] g18_2:
// [Asm] # block info: defs: [v3, v7, v5, s11, a0, v2], uses: [v3, v5, a0, v7, s11, v2], upward_exposed: [s11, a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .g18_2_0:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm]   addi v5, s11, -16  # live: [v5, v2]
// [Asm]   andi v3, v5, -8  # live: [v2, v3]
// [Asm]   mv s11, v3  # live: [v2, v3]
// [Asm]   la v7, h21_8  # live: [v2, v7, v3]
// [Asm]   sd v7, 0(v3)  # live: [v2, v3]
// [Asm]   sd v2, 8(v3)  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$factorial.2810:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v8, v4, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$factorial.2810_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v6, s11, -8  # live: [v6]
// [Asm]   andi v2, v6, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [v2]
// [Asm]   la v8, g18_2  # live: [v8, v2]
// [Asm]   sd v8, 0(v2)  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call landins_knot4_1  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] landins_knot4_1:
// [Asm] # block info: defs: [v2, t1, v16, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, v20, a4, fa6, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v11, v16, v5, a0, v13, s11, v9, v18, v20, v4, v15, v2], upward_exposed: [s11, a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .landins_knot4_1_0:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm]   addi v18, s11, -8  # live: [v18, v2]
// [Asm]   andi v3, v18, -8  # live: [v3, v2]
// [Asm]   mv s11, v3  # live: [v3, s11, v2]
// [Asm]   la v20, dummy1_0  # live: [v3, s11, v20, v2]
// [Asm]   sd v20, 0(v3)  # live: [v3, s11, v2]
// [Asm]   addi v16, s11, -8  # live: [v3, v16, v2]
// [Asm]   andi v4, v16, -8  # live: [v3, v4, v2]
// [Asm]   mv s11, v4  # live: [v3, v4, s11, v2]
// [Asm]   sd v3, 0(v4)  # live: [v4, s11, v2]
// [Asm]   addi v13, s11, -16  # live: [v4, v13, v2]
// [Asm]   andi v5, v13, -8  # live: [v4, v5, v2]
// [Asm]   mv s11, v5  # live: [v4, v5, v2]
// [Asm]   la v15, aux9_5  # live: [v4, v5, v15, v2]
// [Asm]   sd v15, 0(v5)  # live: [v4, v5, v2]
// [Asm]   sd v4, 8(v5)  # live: [v4, v5, v2]
// [Asm]   mv s10, v2  # live: [v4, v5, v2]
// [Asm]   ld v11, 0(v2)  # live: [v11, v4, v5]
// [Asm]   # save_ctx2  # live: [v11, v4, v5]
// [Asm]   mv a0, v5  # live: [v11, v4, a0]
// [Asm]   jalr v11  # live: [v4, a0]
// [Asm]   mv v9, a0  # live: [v4, v9]
// [Asm]   # restore_ctx2  # live: [v4, v9]
// [Asm]   sd v9, 0(v4)  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$a.3316:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v4, v5, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$a.3316_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   ld v2, factorial.28  # live: [v2]
// [Asm]   lw v3, _32  # live: [v2, v3]
// [Asm]   mv s10, v2  # live: [v2, v3]
// [Asm]   ld v5, 0(v2)  # live: [v5, v3]
// [Asm]   # save_ctx2  # live: [v5, v3]
// [Asm]   mv a0, v3  # live: [v5, a0]
// [Asm]   jalr v5  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] h21_8:
// [Asm] # block info: defs: [v3, v0, v2], uses: [v2, v0, s10, a0, zero], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .h21_8_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   beq v2, zero, .h21_8_1  # live: [v2, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v5, a0, v7, v6, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .h21_8_2:
// [Asm]   addi v5, v2, -1  # live: [v3, v5, v2]
// [Asm]   mv s10, v3  # live: [v3, v5, v2]
// [Asm]   ld v11, 0(v3)  # live: [v11, v5, v2]
// [Asm]   # save_ctx2  # live: [v11, v5, v2]
// [Asm]   mv a0, v5  # live: [v11, a0, v2]
// [Asm]   jalr v11  # live: [a0, v2]
// [Asm]   mv v6, a0  # live: [v6, v2]
// [Asm]   # restore_ctx2  # live: [v6, v2]
// [Asm]   mul v7, v2, v6  # live: [v7]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .h21_8_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v9, v8], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .h21_8_1:
// [Asm] # control
// [Asm]   li v9, 1  # live: [v9]
// [Asm]   mv v8, v9  # live: [v8]
// [Asm]   j .h21_8_3  # live: [v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux9_5:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, v0, v4, v6, s10, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .aux9_5_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v3, v2]
// [Asm]   ld v4, 0(v3)  # live: [v4, v2]
// [Asm]   mv s10, v4  # live: [v4, v2]
// [Asm]   ld v6, 0(v4)  # live: [v6, v2]
// [Asm]   # save_ctx2  # live: [v6, v2]
// [Asm]   mv a0, v2  # live: [v6, a0]
// [Asm]   jalr v6  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_32_14:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_32_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 5  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] f129_12:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, a0, v7, v4, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .f129_12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   ld v2, factorial.28  # live: [v2]
// [Asm]   mv s10, v2  # live: [v2]
// [Asm]   ld v6, 0(v2)  # live: [v6]
// [Asm]   # save_ctx2  # live: [v6]
// [Asm]   li v7, 5  # live: [v6, v7]
// [Asm]   mv a0, v7  # live: [v6, a0]
// [Asm]   jalr v6  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main37_19:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v11, v5, a0, v8, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main37_19_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call f129_12  # live: [a0]
// [Asm]   mv v2, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v11, 10  # live: [v11]
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   call g34_18  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v4, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v8, 31  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call g34_18  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm]   # save_ctx2  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] g34_18:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .g34_18_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   lw v3, a.33  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_22:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main37_19  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dummy1_0:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dummy1_0_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$factorial.2810  # live: [s0, a0]
// [Asm]   la t5, factorial.28  # live: [s0, t5, a0]
// [Asm]   sd a0, 0(t5)  # live: [s0]
// [Asm]   call T$_32_14  # live: [s0, a0]
// [Asm]   la t5, _32  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$a.3316  # live: [s0, a0]
// [Asm]   la t5, a.33  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start_22  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] _32:
// [Asm]   .zero 4
// [Asm] a.33:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] factorial.28:
// [Asm]   .zero 8
// [Asm] 
// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("i", Int)], body: Var("i")}, LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))
// [Knf] build_knf: Array(Int(1), Var("dummy"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))))
// [Knf] build_knf: App(Get(Var("arr"), Int(0)), [Var("x")])
// [Knf] build_knf: Get(Var("arr"), Int(0))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))
// [Knf] build_knf: App(Var("f"), [Var("aux")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))
// [Knf] build_knf: Put(Var("arr"), Int(0), Var("fixedpoint"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")]))
// [Knf] build_knf: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("h")
// [Knf] build_knf: App(Var("landins_knot"), [Var("g")])
// [Knf] build_knf: Var("landins_knot")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g")))
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))
// [Knf] build_knf: Prim(Var("x"), Var("a"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))
// [Knf] build_knf: App(Var("f1"), [])
// [Knf] build_knf: Var("f1")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])]))
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(10)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(10)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(31)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(31)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g18_2
// [Main]   .type g18_2, @function
// [Main] # leaf true
// [Main] g18_2:
// [Main] .g18_2_0:
// [Main]   addi a1, s11, -16
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, h21_8
// [Main]   sd a2, 0(a1)
// [Main]   sd a0, 8(a1)
// [Main]   mv a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$factorial.2810
// [Main]   .type T$factorial.2810, @function
// [Main] # leaf false
// [Main] T$factorial.2810:
// [Main] .T$factorial.2810_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, g18_2
// [Main]   sd a1, 0(a0)
// [Main]   call landins_knot4_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl landins_knot4_1
// [Main]   .type landins_knot4_1, @function
// [Main] # leaf false
// [Main] landins_knot4_1:
// [Main] .landins_knot4_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, dummy1_0
// [Main]   sd a2, 0(a1)
// [Main]   addi a2, s11, -8
// [Main]   andi s0, a2, -8
// [Main]   mv s11, s0
// [Main]   sd a1, 0(s0)
// [Main]   addi a1, s11, -16
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, aux9_5
// [Main]   sd a2, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   jalr a2
// [Main]   sd a0, 0(s0)
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$a.3316
// [Main]   .type T$a.3316, @function
// [Main] # leaf false
// [Main] T$a.3316:
// [Main] .T$a.3316_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   ld a0, factorial.28
// [Main]   lw a1, _32
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   jalr a2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl h21_8
// [Main]   .type h21_8, @function
// [Main] # leaf false
// [Main] h21_8:
// [Main] .h21_8_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a1, s10
// [Main]   mv s0, a0
// [Main]   ld a1, 8(a1)
// [Main]   beq s0, zero, .h21_8_1
// [Main] 
// [Main] .h21_8_2:
// [Main]   addi a0, s0, -1
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   mul a0, s0, a0
// [Main] 
// [Main] .h21_8_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .h21_8_1:
// [Main]   li a0, 1
// [Main]   j .h21_8_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux9_5
// [Main]   .type aux9_5, @function
// [Main] # leaf false
// [Main] aux9_5:
// [Main] .aux9_5_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   ld a1, 8(a1)
// [Main]   ld a1, 0(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_32_14
// [Main]   .type T$_32_14, @function
// [Main] # leaf true
// [Main] T$_32_14:
// [Main] .T$_32_14_0:
// [Main]   li a0, 5
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f129_12
// [Main]   .type f129_12, @function
// [Main] # leaf false
// [Main] f129_12:
// [Main] .f129_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   ld a0, factorial.28
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   li a0, 5
// [Main]   jalr a1
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main37_19
// [Main]   .type main37_19, @function
// [Main] # leaf false
// [Main] main37_19:
// [Main] .main37_19_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call f129_12
// [Main]   li a0, 10
// [Main]   call g34_18
// [Main]   call minimbt_print_int
// [Main]   li a0, 31
// [Main]   call g34_18
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g34_18
// [Main]   .type g34_18, @function
// [Main] # leaf true
// [Main] g34_18:
// [Main] .g34_18_0:
// [Main]   lw a1, a.33
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_22
// [Main]   .type T$start_22, @function
// [Main] # leaf false
// [Main] T$start_22:
// [Main] .T$start_22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main37_19
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dummy1_0
// [Main]   .type dummy1_0, @function
// [Main] # leaf true
// [Main] dummy1_0:
// [Main] .dummy1_0_0:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$factorial.2810
// [Main]   la t5, factorial.28
// [Main]   sd a0, 0(t5)
// [Main]   call T$_32_14
// [Main]   la t5, _32
// [Main]   sw a0, 0(t5)
// [Main]   call T$a.3316
// [Main]   la t5, a.33
// [Main]   sw a0, 0(t5)
// [Main]   call T$start_22
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _32
// [Main]   .type _32, @object
// [Main] _32:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl a.33
// [Main]   .type a.33, @object
// [Main] a.33:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl factorial.28
// [Main]   .type factorial.28, @object
// [Main] factorial.28:
// [Main]   .zero 8
// [Main] 
// [Wasm] Lowering function f129_12
// [Wasm] Lowering insn LoadSymbol(ty=ClosureFn(params=[Int32], ty=Int32), sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%0), args=[Int32(val=5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function f129_12 to wasm
// [Wasm] Lowering function h21_8
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f8, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Int32, f=FreeVar(fvref=^1), args=[Insn(iref=%1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[FnParam(fref=f8, fpref=$f.0), Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[FnParam(fref=f8, fpref=$f.0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f8, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function h21_8 to wasm
// [Wasm] Lowering function T$a.3316
// [Wasm] Lowering insn LoadSymbol(ty=ClosureFn(params=[Int32], ty=Int32), sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%0), args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$a.3316 to wasm
// [Wasm] Lowering function dummy1_0
// [Wasm] Lowering control Return(args=[FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function dummy1_0 to wasm
// [Wasm] Lowering function main37_19
// [Wasm] Lowering insn Call(ty=Unit, f=f12, args=[])
// [Wasm] Lowering insn Call(ty=Int32, f=f18, args=[Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Int32, f=f18, args=[Int32(val=31)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Lowered function main37_19 to wasm
// [Wasm] Lowering function landins_knot4_1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), mref=m1, fills=[Init(val=Mem(fref=f1, mref=m0))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m2, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=Mem(fref=f1, mref=m1))])
// [Wasm] Get Local name Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Get Local name Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Get Local name Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Apply(ty=ClosureFn(params=[Int32], ty=Int32), f=FnParam(fref=f1, fpref=$f.0), args=[Mem(fref=f1, mref=m2)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=ClosureFn(params=[Int32], ty=Int32), ma=Field(ty=ClosureFn(params=[Int32], ty=Int32), val=Mem(fref=f1, mref=m1), index=0, width=@ptr), val=Insn(iref=%3))
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Mem(fref=f1, mref=m2) -> $f1.m2
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Lowered function landins_knot4_1 to wasm
// [Wasm] Lowering function T$factorial.2810
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[ClosureFn(params=[Int32], ty=Int32)], ty=ClosureFn(params=[Int32], ty=Int32)), mref=m0, fills=[Field(index=0, val=Fn(fref=f2))])
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Lowering insn Call(ty=ClosureFn(params=[Int32], ty=Int32), f=f1, args=[Mem(fref=f10, mref=m0)])
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Lowered function T$factorial.2810 to wasm
// [Wasm] Lowering function aux9_5
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Load(ty=ClosureFn(params=[Int32], ty=Int32), ma=Field(ty=ClosureFn(params=[Int32], ty=Int32), val=FreeVar(fvref=^1), index=0, width=@ptr))
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%0), args=[FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function aux9_5 to wasm
// [Wasm] Lowering function g18_2
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f8)), Field(index=1, val=FnParam(fref=f2, fpref=$f.0))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowered function g18_2 to wasm
// [Wasm] Lowering function g34_18
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f18, fpref=$f.0), Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f18, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function g34_18 to wasm
// [Wasm] Lowering function T$_32_14
// [Wasm] Lowering control Return(args=[Int32(val=5)])
// [Wasm] Lowered function T$_32_14 to wasm
// [Wasm] Lowering function T$start_22
// [Wasm] Lowering insn Call(ty=Unit, f=f19, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_22 to wasm
// [Parser] flags: []
