// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("i", Int)], body: Var("i")}, LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))
// [Knf] build_knf: Array(Int(1), Var("dummy"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))))
// [Knf] build_knf: App(Get(Var("arr"), Int(0)), [Var("x")])
// [Knf] build_knf: Get(Var("arr"), Int(0))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))
// [Knf] build_knf: App(Var("f"), [Var("aux")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))
// [Knf] build_knf: Put(Var("arr"), Int(0), Var("fixedpoint"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")]))
// [Knf] build_knf: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("h")
// [Knf] build_knf: App(Var("landins_knot"), [Var("g")])
// [Knf] build_knf: Var("landins_knot")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g")))
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))
// [Knf] build_knf: Prim(Var("x"), Var("a"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))
// [Knf] build_knf: App(Var("f1"), [])
// [Knf] build_knf: Var("f1")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])]))
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(10)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(10)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(31)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(31)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function dummy1(i2_3, k) {
// [Main]     return k(i2_3)
// [Main]   }
// [Main]   function landins_knot4(f5_6, k) {
// [Main]     const _7 = 1;
// [Main]     const arr_8 = minimbt_create_ptr_array($force(_7), $force(dummy1));
// [Main]     function aux9(x10_11, k) {
// [Main]       const _12 = 0;
// [Main]       const _13 = arr_8[_12];
// [Main]       return $thunk(() => _13(x10_11, k))
// [Main]     }
// [Main]     return $thunk(() => f5_6(aux9, function (fixedpoint_14) {
// [Main]       const _15 = 0;
// [Main]       const _17 = arr_8[_15] = fixedpoint_14;
// [Main]       return $thunk(() => k(fixedpoint_14))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function g18(f19_20, k) {
// [Main]     function h21(x22_23, k) {
// [Main]       const _24 = 0;
// [Main]       if (x22_23 === _24) {
// [Main]         return k(1)
// [Main]       } else {
// [Main]         const _25 = 1;
// [Main]         const _26 = x22_23 - _25;
// [Main]         return $thunk(() => f19_20(_26, function (_27) {
// [Main]           return $thunk(() => k(x22_23 * _27))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]     }
// [Main]     return k(h21)
// [Main]   }
// [Main]   return $thunk(() => landins_knot4(g18, function (factorial_28) {
// [Main]     function f129(k) {
// [Main]       const _30 = 5;
// [Main]       return $thunk(() => factorial_28(_30, function (_31) {
// [Main]         return $thunk(() => k(minimbt_print_int($force(_31))))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     const _32 = 5;
// [Main]     return $thunk(() => factorial_28(_32, function (a_33) {
// [Main]       function g34(x35_36, k) {
// [Main]         return k(x35_36 + a_33)
// [Main]       }
// [Main]       function main37(k) {
// [Main]         return $thunk(() => f129(function (_39) {
// [Main]           const _40 = 10;
// [Main]           return $thunk(() => g34(_40, function (_41) {
// [Main]             const _43 = minimbt_print_int($force(_41));
// [Main]             const _44 = 31;
// [Main]             return $thunk(() => g34(_44, function (_45) {
// [Main]               return $thunk(() => $thunk(() => $thunk(() => k(minimbt_print_int($force(_45))))))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       return $thunk(() => main37(k))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
