// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f12, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v4, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_47"];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r5 [label="v10 ← a3", color=green];
// [Asm]   r3 [label="v4 ← a1", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r6 [label="v7 ← a1", color=green];
// [Asm]   r4 [label="v2 ← a2", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r7 [label="v8 ← a0", color=green];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r7;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v3-> 1:s11-> 2:zero-> 3:v4-> 4:v2-> 5:v10-> 6:v7-> 7:v8-> 8:a0"
// [Asm]   comment = "v3<-a0;v10<-a3;v4<-a1;v7<-a1;v2<-a2;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_47"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v3, arr.40 ->   ld a0, arr.40
// [Asm] subst   lw v4, _46 ->   lw a1, _46
// [Asm] subst   addi v2, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   la v10, h.50 ->   la a3, h.50
// [Asm] subst   sd v10, 0(v2) ->   sd a3, 0(a2)
// [Asm] subst   slliw v7, v4, 3 ->   slliw a1, a1, 3
// [Asm] subst   add v8, v3, v7 ->   add a0, a0, a1
// [Asm] subst   sd v2, 0(v8) ->   sd a2, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v5, Mem(fref=f4, mref=m1) -> v3, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, s11, v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$arr.40"];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r3 [label="v10 ← a1", color=green];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v3 ← s0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r2 [label="v2 ← a2", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r5;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v4-> 1:s11-> 2:v2-> 3:v10-> 4:v7-> 5:v3-> 6:a1-> 7:a0-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4"
// [Asm]   comment = "v4<-a0;v10<-a1;v7<-a1;v3<-s0;v2<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$arr.40"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v4, _39 ->   lw a0, _39
// [Asm] subst   addi v2, s11, -8 ->   addi a2, s11, -8
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   la v10, dummy.1 ->   la a1, dummy.1
// [Asm] subst   sd v10, 0(v2) ->   sd a1, 0(a2)
// [Asm] subst   slliw v7, v4, 3 ->   slliw a1, a0, 3
// [Asm] subst   sub v3, s11, v7 ->   sub s0, s11, a1
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v4 ->   mv a1, a0
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   mv a0, v3 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f16) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$a.27"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r14 [label="v3 ← a0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v2-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v3"
// [Asm]   comment = "v2<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$a.27"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v2, _26 ->   lw a0, _26
// [Asm] subst   call h.50 ->   call h.50
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dummy.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dummy.1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_46"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   comment = "0:a0"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_46"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_39"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_39"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 1 ->   li a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Insn(iref=%7) -> v8, Self(fref=f18) -> v0, Insn(iref=%6) -> v7, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: []
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.30"];
// [Asm]   r0 [label="v15 ← a0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v4 ← s0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r8 -- r16;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r16;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r5 -- r16;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r18;
// [Asm]   r16 -- r17;
// [Asm]   r10 -- r16;
// [Asm]   comment = "0:v15-> 1:a0-> 2:a1-> 16:v4-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 17:v5-> 18:v6-> 14:v2-> 15:v3-> 19:v7-> 20:v8"
// [Asm]   comment = "v15<-a0;v8<-a0;v2<-a0;v3<-a0;v4<-s0;v6<-a0;v7<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.30"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v15, 5 ->   li a0, 5
// [Asm] subst   call h.50 ->   call h.50
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   lw v4, a.27 ->   lw s0, a.27
// [Asm] subst   addi v5, v4, 10 ->   addi a0, s0, 10
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v7, v4, 31 ->   addi a0, s0, 31
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$_26"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$_26"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 5 ->   li a0, 5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%1) -> v4, BlockParam(bref=b4, bpref=$b.0) -> v8, Insn(iref=%6) -> v7, Insn(iref=%5) -> v6, Insn(iref=%0) -> v3, Insn(iref=%4) -> v5
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f7, fpref=$f.0), Int32(val=0)])
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v6, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v13, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v8]
// [Asm] move_origin: [v7]
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v11]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of h.50"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r23 [label="zero", color=blue];
// [Asm]   r3 [label="v6 ← a0", color=green];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r1 [label="v4 ← a1", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v10 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v13 ← a2", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="v2 ← s0", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v5-> 1:v4-> 2:v2-> 3:v6-> 4:s10-> 5:v13-> 6:a0-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:v7-> 20:v8-> 23:zero-> 21:v9-> 22:v10-> 24:v11"
// [Asm]   comment = "v5<-a0;v8<-a0;v6<-a0;v4<-a1;v10<-a0;v13<-a2;v11<-a0;v2<-s0;v7<-a0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of h.50"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ld v5, arr.40 ->   ld a0, arr.40
// [Asm] subst   ld v6, 0(v5) ->   ld a0, 0(a0)
// [Asm] subst   mv s10, v6 ->   mv s10, a0
// [Asm] subst   ld v13, 0(v6) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, v4 ->   mv a0, a1
// [Asm] subst   jalr v13 ->   jalr a2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v4, v2, -1 ->   addi a1, s0, -1
// [Asm] subst   mul v9, v2, v8 ->   mul a0, s0, a0
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   beq v2, zero, .h.50_1 ->   beq s0, zero, .h.50_1
// [Asm] subst   li v11, 1 ->   li a0, 1
// [Asm] subst   j .h.50_3 ->   j .h.50_3
// [Asm] pre_assigned_registers: Self(fref=f20) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.30 ->   call main.30
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$_47:
// [Asm] # block info: defs: [v3, v10, a0, v7, v8, v4, s11, v2], uses: [v2, v10, zero, a0, v7, v8, v4, s11, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_47_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   ld v3, arr.40  # live: [s11, zero, v3]
// [Asm]   lw v4, _46  # live: [v4, s11, zero, v3]
// [Asm]   addi v2, s11, -8  # live: [v3, v4, zero, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v4, zero, v2]
// [Asm]   la v10, h.50  # live: [v3, v4, v10, zero, v2]
// [Asm]   sd v10, 0(v2)  # live: [v3, v4, zero, v2]
// [Asm]   slliw v7, v4, 3  # live: [v3, v7, zero, v2]
// [Asm]   add v8, v3, v7  # live: [v8, zero, v2]
// [Asm]   sd v2, 0(v8)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] h.50:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .h.50_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   beq v2, zero, .h.50_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v4], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v4, v2]
// [Asm] # block parameters: []
// [Asm] .h.50_2:
// [Asm]   addi v4, v2, -1  # live: [v4, v2]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, v6, a0, v13, v7], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4, v2], live_out: [v8, v2]
// [Asm] # block parameters: []
// [Asm] .h.50_5:
// [Asm]   ld v5, arr.40  # live: [v4, v5, v2]
// [Asm]   ld v6, 0(v5)  # live: [v4, v6, v2]
// [Asm]   mv s10, v6  # live: [v4, v6, v2]
// [Asm]   ld v13, 0(v6)  # live: [v4, v13, v2]
// [Asm]   # save_ctx2  # live: [v4, v13, v2]
// [Asm]   mv a0, v4  # live: [a0, v13, v2]
// [Asm]   jalr v13  # live: [a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v2]
// [Asm]   # restore_ctx2  # live: [v7, v2]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v2, v8]
// [Asm] 
// [Asm] # block info: defs: [v10, v9], uses: [v8, v9, v2], upward_exposed: [v8, v2], params_defs: [v8]
// [Asm] # live_in: [v2, v8], live_out: [v10]
// [Asm] # block parameters: [v8]
// [Asm] .h.50_4:
// [Asm]   mul v9, v2, v8  # live: [v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .h.50_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11, v10], uses: [v11], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .h.50_1:
// [Asm] # control
// [Asm]   li v11, 1  # live: [v11]
// [Asm]   mv v10, v11  # live: [v10]
// [Asm]   j .h.50_3  # live: [v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$arr.40:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v10, a0, v7, v4, a2, a1, s11, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$arr.40_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v4, _39  # live: [v4, s11]
// [Asm]   addi v2, s11, -8  # live: [v4, v2]
// [Asm]   andi s11, v2, -8  # live: [v4, s11, v2]
// [Asm]   la v10, dummy.1  # live: [v4, s11, v10, v2]
// [Asm]   sd v10, 0(v2)  # live: [v4, s11, v2]
// [Asm]   slliw v7, v4, 3  # live: [v7, v4, s11, v2]
// [Asm]   sub v3, s11, v7  # live: [v2, v4, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v4, v3]
// [Asm]   mv a1, v4  # live: [v2, a1, v3]
// [Asm]   mv a0, v3  # live: [v2, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [a2, a1, a0, v3]
// [Asm]   call memseti64  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_39:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_39_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 1  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.30:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v5, a0, v7, v8, v4, v15, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.30_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v15, 5  # live: [v15]
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   call h.50  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm]   lw v4, a.27  # live: [v4]
// [Asm]   addi v5, v4, 10  # live: [v4, v5]
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   mv a0, v5  # live: [v4, a0]
// [Asm]   call minimbt_print_int  # live: [v4, a0]
// [Asm]   mv v6, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm]   addi v7, v4, 31  # live: [v7]
// [Asm]   # save_ctx2  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dummy.1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dummy.1_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_26:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_26_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 5  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$_46:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$_46_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$a.27:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$a.27_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, _26  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call h.50  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.30  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$_39  # live: [s0, a0]
// [Asm]   la t5, _39  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$arr.40  # live: [s0, a0]
// [Asm]   la t5, arr.40  # live: [s0, t5, a0]
// [Asm]   sd a0, 0(t5)  # live: [s0]
// [Asm]   call T$_46  # live: [s0, a0]
// [Asm]   la t5, _46  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$_47  # live: [s0]
// [Asm]   call T$_26  # live: [s0, a0]
// [Asm]   la t5, _26  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$a.27  # live: [s0, a0]
// [Asm]   la t5, a.27  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] _47:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] a.27:
// [Asm]   .zero 4
// [Asm] arr.40:
// [Asm]   .zero 8
// [Asm] _39:
// [Asm]   .zero 4
// [Asm] _46:
// [Asm]   .zero 4
// [Asm] _26:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("i", Int)], body: Var("i")}, LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("landins_knot", Fun([Int], Int)), args: [("f", Fun([Fun([Int], Int)], Fun([Int], Int)))], body: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))}, Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Fun([Int], Int)))})), Array(Int(1), Var("dummy")), LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))))
// [Knf] build_knf: Array(Int(1), Var("dummy"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: App(Get(Var("arr"), Int(0)), [Var("x")])}, Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))))
// [Knf] build_knf: App(Get(Var("arr"), Int(0)), [Var("x")])
// [Knf] build_knf: Get(Var("arr"), Int(0))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("fixedpoint", Var({val: Some(Fun([Int], Int))})), App(Var("f"), [Var("aux")]), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint")))
// [Knf] build_knf: App(Var("f"), [Var("aux")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Int(0), Var("fixedpoint")), Var("fixedpoint"))
// [Knf] build_knf: Put(Var("arr"), Int(0), Var("fixedpoint"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Var("fixedpoint")
// [Knf] build_knf: Let(("factorial", Fun([Int], Int)), LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")])), LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))})), args: [("f", Var({val: Some(Fun([Int], Var({val: Some(Int)})))}))], body: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))}, App(Var("landins_knot"), [Var("g")]))
// [Knf] build_knf: LetRec({name: ("h", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))}, Var("h"))
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Int(1), Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("x"), App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Mul, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("f"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("h")
// [Knf] build_knf: App(Var("landins_knot"), [Var("g")])
// [Knf] build_knf: Var("landins_knot")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("f1", Unit), args: [], body: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])}, Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("factorial"), [Int(5)])])
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Let(("with_effect", Fun([Int], Int)), Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))), LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("a", Var({val: Some(Int)})), App(Var("factorial"), [Int(5)]), LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g")))
// [Knf] build_knf: App(Var("factorial"), [Int(5)])
// [Knf] build_knf: Var("factorial")
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("g", Var({val: Some(Int)})), args: [("x", Var({val: Some(Int)}))], body: Prim(Var("x"), Var("a"), Add, kind=Some(Int))}, Var("g"))
// [Knf] build_knf: Prim(Var("x"), Var("a"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("f1"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])))
// [Knf] build_knf: App(Var("f1"), [])
// [Knf] build_knf: Var("f1")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("with_effect"), [Int(10)])]), App(Var("print_int"), [App(Var("with_effect"), [Int(31)])]))
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(10)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(10)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("print_int"), [App(Var("with_effect"), [Int(31)])])
// [Knf] build_knf: App(Var("with_effect"), [Int(31)])
// [Knf] build_knf: Var("with_effect")
// [Knf] build_knf: Int(31)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[FnParam(fref=f0, fpref=$f.0)])
// [Core] b0 control: Panic -> Return(args=[Int32(val=1)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f4, mref=m1)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Int32(val=1)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%3)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Int32(val=0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Int32(val=5)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%7)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce factorial.22 = fixedpoint.45
// [Main] beta reduce fixedpoint.45 = h.50
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_47
// [Main]   .type T$_47, @function
// [Main] # leaf true
// [Main] T$_47:
// [Main] .T$_47_0:
// [Main]   ld a0, arr.40
// [Main]   lw a1, _46
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   la a3, h.50
// [Main]   sd a3, 0(a2)
// [Main]   slliw a1, a1, 3
// [Main]   add a0, a0, a1
// [Main]   sd a2, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl h.50
// [Main]   .type h.50, @function
// [Main] # leaf false
// [Main] h.50:
// [Main] .h.50_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, a0
// [Main]   beq s0, zero, .h.50_1
// [Main] 
// [Main] .h.50_2:
// [Main]   addi a1, s0, -1
// [Main] 
// [Main] .h.50_5:
// [Main]   ld a0, arr.40
// [Main]   ld a0, 0(a0)
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, a1
// [Main]   jalr a2
// [Main] 
// [Main] .h.50_4:
// [Main]   mul a0, s0, a0
// [Main] 
// [Main] .h.50_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .h.50_1:
// [Main]   li a0, 1
// [Main]   j .h.50_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$arr.40
// [Main]   .type T$arr.40, @function
// [Main] # leaf false
// [Main] T$arr.40:
// [Main] .T$arr.40_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a0, _39
// [Main]   addi a2, s11, -8
// [Main]   andi s11, a2, -8
// [Main]   la a1, dummy.1
// [Main]   sd a1, 0(a2)
// [Main]   slliw a1, a0, 3
// [Main]   sub s0, s11, a1
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_39
// [Main]   .type T$_39, @function
// [Main] # leaf true
// [Main] T$_39:
// [Main] .T$_39_0:
// [Main]   li a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.30
// [Main]   .type main.30, @function
// [Main] # leaf false
// [Main] main.30:
// [Main] .main.30_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 5
// [Main]   call h.50
// [Main]   call minimbt_print_int
// [Main]   lw s0, a.27
// [Main]   addi a0, s0, 10
// [Main]   call minimbt_print_int
// [Main]   addi a0, s0, 31
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dummy.1
// [Main]   .type dummy.1, @function
// [Main] # leaf true
// [Main] dummy.1:
// [Main] .dummy.1_0:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_26
// [Main]   .type T$_26, @function
// [Main] # leaf true
// [Main] T$_26:
// [Main] .T$_26_0:
// [Main]   li a0, 5
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$_46
// [Main]   .type T$_46, @function
// [Main] # leaf true
// [Main] T$_46:
// [Main] .T$_46_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$a.27
// [Main]   .type T$a.27, @function
// [Main] # leaf false
// [Main] T$a.27:
// [Main] .T$a.27_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, _26
// [Main]   call h.50
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.30
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$_39
// [Main]   la t5, _39
// [Main]   sw a0, 0(t5)
// [Main]   call T$arr.40
// [Main]   la t5, arr.40
// [Main]   sd a0, 0(t5)
// [Main]   call T$_46
// [Main]   la t5, _46
// [Main]   sw a0, 0(t5)
// [Main]   call T$_47
// [Main]   call T$_26
// [Main]   la t5, _26
// [Main]   sw a0, 0(t5)
// [Main]   call T$a.27
// [Main]   la t5, a.27
// [Main]   sw a0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _47
// [Main]   .type _47, @object
// [Main] _47:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl a.27
// [Main]   .type a.27, @object
// [Main] a.27:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl arr.40
// [Main]   .type arr.40, @object
// [Main] arr.40:
// [Main]   .zero 8
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _39
// [Main]   .type _39, @object
// [Main] _39:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _46
// [Main]   .type _46, @object
// [Main] _46:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl _26
// [Main]   .type _26, @object
// [Main] _26:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$_47
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), sref=::1)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f7))])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowering insn Store(ty=ClosureFn(params=[Int32], ty=Int32), ma=Offset(ty=ClosureFn(params=[Int32], ty=Int32), val=Insn(iref=%0), offset=Insn(iref=%1), width=@ptr), val=Mem(fref=f12, mref=m0))
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowered function T$_47 to wasm
// [Wasm] Lowering function T$arr.40
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), mref=m1, fills=[Init(val=Mem(fref=f4, mref=m0))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering control Return(args=[Mem(fref=f4, mref=m1)])
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$arr.40 to wasm
// [Wasm] Lowering function T$a.27
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::4)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Int32, f=f7, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$a.27 to wasm
// [Wasm] Lowering function dummy.1
// [Wasm] Lowering control Return(args=[FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function dummy.1 to wasm
// [Wasm] Lowering function T$_46
// [Wasm] Lowering control Return(args=[Int32(val=0)])
// [Wasm] Lowered function T$_46 to wasm
// [Wasm] Lowering function T$_39
// [Wasm] Lowering control Return(args=[Int32(val=1)])
// [Wasm] Lowered function T$_39 to wasm
// [Wasm] Lowering function main.30
// [Wasm] Lowering insn Call(ty=Int32, f=f7, args=[Int32(val=5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::5)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=10), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=31), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Return(args=[Insn(iref=%7)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.30 to wasm
// [Wasm] Lowering function T$_26
// [Wasm] Lowering control Return(args=[Int32(val=5)])
// [Wasm] Lowered function T$_26 to wasm
// [Wasm] Lowering function h.50
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[FnParam(fref=f7, fpref=$f.0), BlockParam(bref=b4, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=ClosureFn(params=[Int32], ty=Int32)), sref=::1)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=ClosureFn(params=[Int32], ty=Int32), ma=Field(ty=ClosureFn(params=[Int32], ty=Int32), val=Insn(iref=%4), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Apply(ty=Int32, f=Insn(iref=%5), args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b4, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f7, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b5, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[FnParam(fref=f7, fpref=$f.0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function h.50 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f18, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: dummy.1 false
// [KnfOpt] func_tre: landins_knot.3 false
// [KnfOpt] func_tre: aux.7 false
// [KnfOpt] func_tre: g.14 false
// [KnfOpt] func_tre: h.16 false
// [KnfOpt] func_tre: f1.23 false
// [KnfOpt] func_tre: g.28 false
// [KnfOpt] func_tre: main.30 false
// [KnfOpt] freq: {dummy.1: AsClosure, landins_knot.3: Once, aux.7: AsClosure, g.14: AsClosure, h.16: AsClosure, f1.23: Once, g.28: Many(2), main.30: Once}
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(g) let _33: Int = Unit
// [KnfOpt] let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt] let _35: Int = Int(31)
// [KnfOpt] let _36: Int = Add(_35, a.27)
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(f1) let _31: Unit = Unit
// [KnfOpt] let _32: Int = Int(10)
// [KnfOpt] let _33: Int = Add(_32, a.27)
// [KnfOpt] let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt] let _35: Int = Int(31)
// [KnfOpt] let _36: Int = Add(_35, a.27)
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(g) let _33: Int = Unit
// [KnfOpt] let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt] let _35: Int = Int(31)
// [KnfOpt] let _36: Int = Add(_35, a.27)
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(landins_knot) let factorial.22: Fun([Int], Int) = Unit
// [KnfOpt] let rec f1.23: Unit = () {
// [KnfOpt]   let _24: Int = Int(5)
// [KnfOpt]   let _25: Int = Apply(factorial.22, [_24, ])
// [KnfOpt]   ExtApply(minimbt_print_int, [_25, ])
// [KnfOpt] }
// [KnfOpt] let _26: Int = Int(5)
// [KnfOpt] let a.27: Int = Apply(factorial.22, [_26, ])
// [KnfOpt] let rec g.28: Var({val: Some(Int)}) = (x.29: Var({val: Some(Int)})) {
// [KnfOpt]   Add(x.29, a.27)
// [KnfOpt] }
// [KnfOpt] let rec main.30: Var({val: Some(Unit)}) = () {
// [KnfOpt]   let _37: Int = Int(5)
// [KnfOpt]   let _38: Int = Apply(factorial.22, [_37, ])
// [KnfOpt]   let _31: Unit = ExtApply(minimbt_print_int, [_38, ])
// [KnfOpt]   let _32: Int = Int(10)
// [KnfOpt]   let _33: Int = Add(_32, a.27)
// [KnfOpt]   let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt]   let _35: Int = Int(31)
// [KnfOpt]   let _36: Int = Add(_35, a.27)
// [KnfOpt]   ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] }
// [KnfOpt] Apply(main.30, [])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(g) let _33: Int = Unit
// [KnfOpt] let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt] let _35: Int = Int(31)
// [KnfOpt] let _36: Int = Add(_35, a.27)
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(f1) let _31: Unit = Unit
// [KnfOpt] let _32: Int = Int(10)
// [KnfOpt] let _33: Int = Add(_32, a.27)
// [KnfOpt] let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt] let _35: Int = Int(31)
// [KnfOpt] let _36: Int = Add(_35, a.27)
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Knf inline Some(g) let _33: Int = Unit
// [KnfOpt] let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt] let _35: Int = Int(31)
// [KnfOpt] let _36: Int = Add(_35, a.27)
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] Inline threshold 2 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision g.28 accepted
// [KnfOpt] Knf inline Some(g) let _36: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] freq: {dummy.1: AsClosure, g.14: Once, h.16: AsClosure, aux.41: AsClosure, main.30: Once}
// [KnfOpt] Knf inline Some(g) let fixedpoint.45: Fun([Int], Int) = Unit
// [KnfOpt] let _46: Int = Int(0)
// [KnfOpt] let _47: Unit = Put arr.40[_46] = fixedpoint.45
// [KnfOpt] let _26: Int = Int(5)
// [KnfOpt] let a.27: Int = Apply(fixedpoint.45, [_26, ])
// [KnfOpt] let rec main.30: Var({val: Some(Unit)}) = () {
// [KnfOpt]   let _48: Int = Int(5)
// [KnfOpt]   let _49: Int = Apply(fixedpoint.45, [_48, ])
// [KnfOpt]   let _31: Unit = ExtApply(minimbt_print_int, [_49, ])
// [KnfOpt]   let _32: Int = Int(10)
// [KnfOpt]   let _33: Int = Add(_32, a.27)
// [KnfOpt]   let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
// [KnfOpt]   let _35: Int = Int(31)
// [KnfOpt]   let _36: Int = Add(_35, a.27)
// [KnfOpt]   ExtApply(minimbt_print_int, [_36, ])
// [KnfOpt] }
// [KnfOpt] Apply(main.30, [])
// [KnfOpt] Numbers of let rec: 4 6 2
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f12: Once, f4: Once, f16: Once, f0: MaybeInClosure, f10: Once, f2: Once, f18: Once, f14: Once, f7: MaybeInClosure, f20: Once})
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b4, bpref=$b.0)
// [CoreOpt] h.50 is inlining Call(ty=Int32, f=f6, args=[Insn(iref=%1)])
// [CoreOpt] shifted callee .fn aux.41 #f6 : fn(int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b5 {
// [CoreOpt]   .bb #b5 () {
// [CoreOpt]     let %4: array[closure(int32) -> int32] = load_symbol ::1
// [CoreOpt]     let %5: closure(int32) -> int32 = load closure(int32) -> int32 field(%4, 0 * @ptr)
// [CoreOpt]     let %6: int32 = apply %5($f0)
// [CoreOpt]     return %6
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f6
// [CoreOpt] LVN subst Insn(iref=%5) with Insn(iref=%2)
