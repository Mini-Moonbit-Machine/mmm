let rec odd.25: Int = (x.8: Int) {
  let _9: Int = Int(0)
  if (_9 <= x.8) then {
    let _10: Int = Int(0)
    if (x.8 == _10) then {
      Int(456)
    } else {
      let _11: Int = Int(1)
      let _12: Int = Sub(x.8, _11)
      Apply(even.24, [_12, ])
    }
  } else {
    let _13: Int = Int(1)
    let _14: Int = Add(x.8, _13)
    Apply(even.24, [_14, ])
  }
}
let rec even.24: Int = (x.5: Int) {
  let _15: Int = Int(0)
  if (_15 <= x.5) then {
    let _16: Int = Int(0)
    if (x.5 == _16) then {
      Int(123)
    } else {
      let _17: Int = Int(1)
      let _18: Int = Sub(x.5, _17)
      Apply(odd.25, [_18, ])
    }
  } else {
    let _19: Int = Int(1)
    let _20: Int = Add(x.5, _19)
    Apply(odd.25, [_20, ])
  }
}
let rec main.26: Var({val: Some(Unit)}) = () {
  let _22: Int = Int(789)
  let _23: Int = Apply(even.24, [_22, ])
  ExtApply(minimbt_print_int, [_23, ])
}
Apply(main.26, [])
