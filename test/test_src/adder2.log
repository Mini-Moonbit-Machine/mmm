// [Main] function thunk_main(k) {
// [Main]   function make_adder_1(x_3, k) {
// [Main]     function adder_4(y_6, k) {
// [Main]       return k(x_3 + y_6)
// [Main]     }
// [Main]     return k(adder_4)
// [Main]   }
// [Main]   function main_7(k) {
// [Main]     const _8 = 2;
// [Main]     return $thunk(() => make_adder_1(_8, function (add2_9) {
// [Main]       const _10 = 3;
// [Main]       return $thunk(() => make_adder_1(_10, function (add3_11) {
// [Main]         const _12 = 10;
// [Main]         return $thunk(() => add2_9(_12, function (_13) {
// [Main]           const _14 = 20;
// [Main]           return $thunk(() => add3_11(_14, function (_15) {
// [Main]             const _16 = _13 + _15;
// [Main]             return $thunk(() => $thunk(() => $thunk(() => $thunk(() => k(minimbt_print_int($force(_16)))))))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_7(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("make_adder", Fun([Int], Int)), args: [("x", Int)], body: LetRec({tyvars: [], name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("add2", Var({val: None})), App(Var("make_adder"), [Int(2)]), Let(("add3", Var({val: None})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=None)])))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("adder")) against Fun([Int], Int)
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Var("y"), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("adder") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("add2", Var({val: None})), App(Var("make_adder"), [Int(2)]), Let(("add3", Var({val: None})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=None)])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("add2", Var({val: None})), App(Var("make_adder"), [Int(2)]), Let(("add3", Var({val: None})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=None)])))
// [Typer] infer: App(Var("make_adder"), [Int(2)])
// [Typer] infer: Var("make_adder")
// [Typer] inst: TypeScheme(([], Fun([Int], Fun([Int], Int))))
// [Typer] inst result: Fun([Int], Fun([Int], Int))
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Fun([Int], Int)
// [Typer] union: Var({val: None}) and Fun([Int], Int)
// [Typer] infer: Let(("add3", Var({val: None})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=None)]))
// [Typer] infer: App(Var("make_adder"), [Int(3)])
// [Typer] infer: Var("make_adder")
// [Typer] inst: TypeScheme(([], Fun([Int], Fun([Int], Int))))
// [Typer] inst result: Fun([Int], Fun([Int], Int))
// [Typer] check: Int(3) against Int
// [Typer] unify: Var({val: None}) and Fun([Int], Int)
// [Typer] union: Var({val: None}) and Fun([Int], Int)
// [Typer] infer: App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=None)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=None) against Int
// [Typer] check: App(Var("add2"), [Int(10)]) against Int
// [Typer] infer: Int(10)
// [Typer] check: Var("add2") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Int], Int))})))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("add3"), [Int(20)]) against Int
// [Typer] infer: Int(20)
// [Typer] check: Var("add3") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Int], Int))})))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
