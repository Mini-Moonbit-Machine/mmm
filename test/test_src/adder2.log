// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main7 ->   call main7
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Mem(fref=f0, mref=m1) -> v3, Self(fref=f0) -> v0, Insn(iref=%2) -> v6, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%1) -> v5, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v22]
// [Asm] live_set: [s11, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [s11, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: s10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v15, a0, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v12]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v12, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v12, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main7"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a5", color=blue];
// [Asm]   r23 [label="v6 ← s1", color=green];
// [Asm]   r3 [label="v23 ← a1", color=green];
// [Asm]   r9 [label="v16 ← a0", color=green];
// [Asm]   r26 [label="v7 ← a0", color=green];
// [Asm]   r27 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="v20 ← a1", color=green];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="v3 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r28 [label="v9 ← a0", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="s10", color=blue];
// [Asm]   r10 [label="a0", color=blue];
// [Asm]   r22 [label="a7", color=blue];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="v15 ← a1", color=green];
// [Asm]   r5 [label="v19 ← a1", color=green];
// [Asm]   r24 [label="v12 ← a1", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="v22 ← a1", color=green];
// [Asm]   r16 [label="a1", color=blue];
// [Asm]   r18 [label="a3", color=blue];
// [Asm]   r19 [label="a4", color=blue];
// [Asm]   r17 [label="a2", color=blue];
// [Asm]   r21 [label="a6", color=blue];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r8 -- r9;
// [Asm]   r14 -- r23;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r4 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r10 -- r16;
// [Asm]   r21 -- r23;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r20 -- r23;
// [Asm]   r23 -- r26;
// [Asm]   r10 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r17 -- r23;
// [Asm]   r19 -- r23;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r10 -- r15;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r15 -- r23;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r4 -- r19;
// [Asm]   r10 -- r17;
// [Asm]   r10 -- r14;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v22-> 3:v23-> 4:v3-> 5:v19-> 6:v20-> 7:s10-> 23:v6-> 10:a0-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:a1-> 17:a2-> 18:a3-> 19:a4-> 20:a5-> 21:a6-> 22:a7-> 8:v15-> 9:v16-> 24:v12-> 25:v13-> 26:v7-> 27:v8-> 28:v9"
// [Asm]   comment = "v2<-a0;v6<-s1;v23<-a1;v16<-a0;v7<-a0;v8<-a0;v20<-a1;v3<-s0;v9<-a0;v15<-a1;v19<-a1;v12<-a1;v13<-a0;v22<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   la v22, adder4.17 ->   la a1, adder4.17
// [Asm] subst   sd v22, 0(v2) ->   sd a1, 0(a0)
// [Asm] subst   li v23, 2 ->   li a1, 2
// [Asm] subst   sd v23, 8(v2) ->   sd a1, 8(a0)
// [Asm] subst   addi v3, s11, -16 ->   addi s0, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   la v19, adder4.19 ->   la a1, adder4.19
// [Asm] subst   sd v19, 0(v3) ->   sd a1, 0(s0)
// [Asm] subst   li v20, 3 ->   li a1, 3
// [Asm] subst   sd v20, 8(v3) ->   sd a1, 8(s0)
// [Asm] subst   mv s10, v2 ->   mv s10, a0
// [Asm] subst   ld v15, 0(v2) ->   ld a1, 0(a0)
// [Asm] subst   li v16, 10 ->   li a0, 10
// [Asm] subst   jalr v15 ->   jalr a1
// [Asm] subst   mv v6, a0 ->   mv s1, a0
// [Asm] subst   mv s10, v3 ->   mv s10, s0
// [Asm] subst   ld v12, 0(v3) ->   ld a1, 0(s0)
// [Asm] subst   li v13, 20 ->   li a0, 20
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   add v8, v6, v7 ->   add a0, s1, a0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of adder4.19"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r4 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:v4"
// [Asm]   comment = "v0<-a1;v4<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of adder4.19"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   add v4, v3, v2 ->   add a0, a1, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, FreeVar(fvref=^1) -> v3, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v4
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of adder4.17"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r4 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3-> 4:v4"
// [Asm]   comment = "v0<-a1;v4<-a0;v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of adder4.17"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a1, 8(a1)
// [Asm] subst   add v4, v3, v2 ->   add a0, a1, a0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] adder4.17:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v3, a0, v0, v4, s10, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .adder4.17_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   add v4, v3, v2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main7:
// [Asm] # block info: defs: [v3, t1, v16, v13, v22, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, v20, a4, fa6, v8, v19, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2, v15, v2], uses: [v2, v16, a0, v13, v22, v7, v12, s11, v9, v23, v20, v8, v19, v6, v15, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main7_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -16  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [s11, v2]
// [Asm]   la v22, adder4.17  # live: [s11, v22, v2]
// [Asm]   sd v22, 0(v2)  # live: [s11, v2]
// [Asm]   li v23, 2  # live: [s11, v23, v2]
// [Asm]   sd v23, 8(v2)  # live: [s11, v2]
// [Asm]   addi v3, s11, -16  # live: [v2, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v3]
// [Asm]   la v19, adder4.19  # live: [v2, v19, v3]
// [Asm]   sd v19, 0(v3)  # live: [v2, v3]
// [Asm]   li v20, 3  # live: [v2, v20, v3]
// [Asm]   sd v20, 8(v3)  # live: [v2, v3]
// [Asm]   mv s10, v2  # live: [v2, v3]
// [Asm]   ld v15, 0(v2)  # live: [v15, v3]
// [Asm]   # save_ctx2  # live: [v15, v3]
// [Asm]   li v16, 10  # live: [v16, v15, v3]
// [Asm]   mv a0, v16  # live: [v15, a0, v3]
// [Asm]   jalr v15  # live: [a0, v3]
// [Asm]   mv v6, a0  # live: [v6, v3]
// [Asm]   # restore_ctx2  # live: [v6, v3]
// [Asm]   mv s10, v3  # live: [v6, v3]
// [Asm]   ld v12, 0(v3)  # live: [v6, v12]
// [Asm]   # save_ctx2  # live: [v6, v12]
// [Asm]   li v13, 20  # live: [v6, v12, v13]
// [Asm]   mv a0, v13  # live: [v6, v12, a0]
// [Asm]   jalr v12  # live: [v6, a0]
// [Asm]   mv v7, a0  # live: [v6, v7]
// [Asm]   # restore_ctx2  # live: [v6, v7]
// [Asm]   add v8, v6, v7  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] adder4.19:
// [Asm] # block info: defs: [v3, v0, v4, a0, v2], uses: [v3, a0, v0, v4, s10, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .adder4.19_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v3]
// [Asm]   add v4, v3, v2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main7  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("make_adder", Fun([Int], Int)), args: [("x", Int)], body: LetRec({name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("adder"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("add2", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(2)]), Let(("add3", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=Some(Int))])))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("adder"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("adder")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("add2", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(2)]), Let(("add3", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=Some(Int))])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("add2", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(2)]), Let(("add3", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("make_adder"), [Int(2)])
// [Knf] build_knf: Var("make_adder")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("add3", Var({val: Some(Fun([Int], Int))})), App(Var("make_adder"), [Int(3)]), App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("make_adder"), [Int(3)])
// [Knf] build_knf: Var("make_adder")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: App(Var("print_int"), [Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(App(Var("add2"), [Int(10)]), App(Var("add3"), [Int(20)]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("add2"), [Int(10)])
// [Knf] build_knf: Var("add2")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("add3"), [Int(20)])
// [Knf] build_knf: Var("add3")
// [Knf] build_knf: Int(20)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl adder4.17
// [Main]   .type adder4.17, @function
// [Main] # leaf true
// [Main] adder4.17:
// [Main] .adder4.17_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   add a0, a1, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main7
// [Main]   .type main7, @function
// [Main] # leaf false
// [Main] main7:
// [Main] .main7_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   addi a0, s11, -16
// [Main]   andi s11, a0, -8
// [Main]   la a1, adder4.17
// [Main]   sd a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sd a1, 8(a0)
// [Main]   addi s0, s11, -16
// [Main]   andi s11, s0, -8
// [Main]   la a1, adder4.19
// [Main]   sd a1, 0(s0)
// [Main]   li a1, 3
// [Main]   sd a1, 8(s0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   li a0, 10
// [Main]   jalr a1
// [Main]   mv s1, a0
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   li a0, 20
// [Main]   jalr a1
// [Main]   add a0, s1, a0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl adder4.19
// [Main]   .type adder4.19, @function
// [Main] # leaf true
// [Main] adder4.19:
// [Main] .adder4.19_0:
// [Main]   mv a1, s10
// [Main]   lw a1, 8(a1)
// [Main]   add a0, a1, a0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main7
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function main7
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m0, fills=[Field(index=0, val=Fn(fref=f2)), Field(index=1, val=Int32(val=2))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f4)), Field(index=1, val=Int32(val=3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f0, mref=m0), args=[Int32(val=10)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f0, mref=m1), args=[Int32(val=20)])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main7 to wasm
// [Wasm] Lowering function adder4.19
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^1), FnParam(fref=f4, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function adder4.19 to wasm
// [Wasm] Lowering function adder4.17
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^1), FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function adder4.17 to wasm
// [KnfOpt] freq: {make_adder1: Many(2), adder4: AsClosure, main7: Once}
// [KnfOpt] Inline threshold 2 3
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(make_adder1)
// [KnfOpt] Inline threshold 2 3
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(make_adder1)
// [KnfOpt] Numbers of let rec: 3 5 2
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f4: MaybeInClosure, f2: MaybeInClosure})
