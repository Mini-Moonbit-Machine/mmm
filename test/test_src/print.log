// [Main] function thunk_main(k) {
// [Main]   function main_1(k) {
// [Main]     const _2 = 123;
// [Main]     const _4 = minimbt_print_int($force(_2));
// [Main]     const _5 = -456;
// [Main]     const _7 = minimbt_print_int($force(_5));
// [Main]     const _8 = 789;
// [Main]     const _9 = 0;
// [Main]     const _10 = _8 + _9;
// [Main]     const _12 = minimbt_print_int($force(_10));
// [Main]     return k(null)
// [Main]   }
// [Main]   return $thunk(() => main_1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("_", Var({val: None})), App(Var("print_int"), [Int(123)]), Let(("_", Var({val: None})), App(Var("print_int"), [Neg(Int(456), kind=None)]), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=None)]), Unit)))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [Int(123)]), Let(("_", Var({val: None})), App(Var("print_int"), [Neg(Int(456), kind=None)]), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=None)]), Unit)))
// [Typer] infer: App(Var("print_int"), [Int(123)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(123) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [Neg(Int(456), kind=None)]), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=None)]), Unit))
// [Typer] infer: App(Var("print_int"), [Neg(Int(456), kind=None)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Neg(Int(456), kind=None) against Int
// [Typer] check: Int(456) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=None)]), Unit)
// [Typer] infer: App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=None)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(Int(789), Int(0), Add, kind=None) against Int
// [Typer] check: Int(789) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
