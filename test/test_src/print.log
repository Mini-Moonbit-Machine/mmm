// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Int(123)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Neg(Int(456), kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=Some(Int))]), Unit)))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Int(123)]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Neg(Int(456), kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=Some(Int))]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [Int(123)])
// [Knf] build_knf: Int(123)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Neg(Int(456), kind=Some(Int))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=Some(Int))]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Neg(Int(456), kind=Some(Int))])
// [Knf] build_knf: Neg(Int(456), kind=Some(Int))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=Some(Int))]), Unit)
// [Knf] build_knf: App(Var("print_int"), [Prim(Int(789), Int(0), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Int(789), Int(0), Add, kind=Some(Int))
// [Knf] build_knf: Int(789)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function main1(k) {
// [Main]     const _2 = 123;
// [Main]     const _4 = minimbt_print_int($force(_2));
// [Main]     const _5 = -456;
// [Main]     const _7 = minimbt_print_int($force(_5));
// [Main]     const _8 = 789;
// [Main]     const _9 = 0;
// [Main]     const _10 = _8 + _9;
// [Main]     const _12 = minimbt_print_int($force(_10));
// [Main]     return k(null)
// [Main]   }
// [Main]   return $thunk(() => main1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
