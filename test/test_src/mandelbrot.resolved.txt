let rec mandelbrot: (w: Int) -> Unit {
  let rec dbl: (f: Double) -> Double {
    Var("f") + Var("f")
  }
  let rec yloop: (y: Int) -> Unit {
    if (LE(Var("w"), Var("y"))) then {
      Unit
    } else {
      let rec xloop: (x: Int, y: Int) -> Unit {
        if (LE(Var("w"), Var("x"))) then {
          let _: Var(None) = Apply(Var("print_endline"), [])
          Unit
        } else {
          let cr: Var(None) = Prim(App(Var("dbl"), targs=None, [App(Var("float_of_int"), targs=None, [Var("x")])]), App(Var("float_of_int"), targs=None, [Var("w")]), Div, kind=None) - Double(1.5)
          let ci: Var(None) = Prim(App(Var("dbl"), targs=None, [App(Var("float_of_int"), targs=None, [Var("y")])]), App(Var("float_of_int"), targs=None, [Var("w")]), Div, kind=None) - Double(1)
          let rec iloop: (i: Int, zr: Double, zi: Double, zr2: Double, zi2: Double, cr: Double, ci: Double) -> Unit {
            if (Eq(Var("i"), Int(0))) then {
              Apply(Var("print_int"), [Int(1), ])
            } else {
              let tr: Var(None) = Prim(Var("zr2"), Var("zi2"), Sub, kind=None) + Var("cr")
              let ti: Var(None) = Prim(App(Var("dbl"), targs=None, [Var("zr")]), Var("zi"), Mul, kind=None) + Var("ci")
              let zr: Var(None) = Var(tr)
              let zi: Var(None) = Var(ti)
              let zr2: Var(None) = Var("zr") * Var("zr")
              let zi2: Var(None) = Var("zi") * Var("zi")
              if (LE(Prim(Double(2), Double(2), Mul, kind=None), Prim(Var("zr2"), Var("zi2"), Add, kind=None))) then {
                Apply(Var("print_int"), [Int(0), ])
              } else {
                Apply(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci"), ])
              }
            }
          }
          let _: Var(None) = Apply(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci"), ])
          Apply(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=None), Var("y"), ])
        }
      }
      let _: Var(None) = Apply(Var("xloop"), [Int(0), Var("y"), ])
      Apply(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=None), ])
    }
  }
  Apply(Var("yloop"), [Int(0), ])
}
let rec main: () -> Var(None) {
  Apply(Var("mandelbrot"), [Int(40), ])
}
Unit
