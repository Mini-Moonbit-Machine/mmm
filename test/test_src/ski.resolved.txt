let rec s: forall [("X", None), ("Y", None), ("Z", None)] . (x: (Z) -> (Y) -> X) -> ((Z) -> Y) -> (Z) -> X {
  let rec f: (y: Var(None)) -> Var(None) {
    let rec g: (z: Var(None)) -> Var(None) {
      Apply(App(Var("x"), targs=None, [Var("z")]), [App(Var("y"), targs=None, [Var("z")]), ])
    }
    Var(g)
  }
  Var(f)
}
let rec k: forall [("X", None), ("Y", None)] . (x: X) -> (Y) -> X {
  let rec f: (y: Var(None)) -> Var(None) {
    Var(x)
  }
  Var(f)
}
let rec i: forall [("X", None)] . (x: X) -> X {
  Var(x)
}
let rec main: () -> Var(None) {
  let rev_apply: Var(None) = Apply(App(Var("s"), targs=None, [App(Var("k"), targs=None, [App(Var("s"), targs=None, [Var("i")])])]), [Var("k"), ])
  let rec printi: (x: Int) -> Var(None) {
    Apply(Var("print_int"), [Var("x"), ])
  }
  Apply(App(Var("rev_apply"), targs=None, [Int(2)]), [Var("printi"), ])
}
Unit
