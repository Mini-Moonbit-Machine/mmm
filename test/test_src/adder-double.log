// [Knf] build_knf: LetRec({tyvars: [], name: ("make_adder", Fun([Int], Double)), args: [("x", Double)], body: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=Some(Double))}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("add", Fun([Int], Double)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=Some(Double))}, Var("adder"))
// [Knf] build_knf: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=Some(Double))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("adder")
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("add", Fun([Int], Double)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("add", Fun([Int], Double)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))
// [Knf] build_knf: App(Var("make_adder"), [Double(2.14)])
// [Knf] build_knf: Var("make_adder")
// [Knf] build_knf: Double(2.14)
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])])
// [Knf] build_knf: App(Var("int_of_float"), [App(Var("add"), [Int(1)])])
// [Knf] build_knf: App(Var("add"), [Int(1)])
// [Knf] build_knf: Var("add")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function make_adder_1(x_3, k) {
// [Main]     function adder_4(y_6, k) {
// [Main]       const _7 = minimbt_float_of_int($force(y_6));
// [Main]       return k(x_3 + _7)
// [Main]     }
// [Main]     return k(adder_4)
// [Main]   }
// [Main]   function main_8(k) {
// [Main]     const _9 = 2.14;
// [Main]     return $thunk(() => make_adder_1(_9, function (add_10) {
// [Main]       const _11 = 1;
// [Main]       return $thunk(() => add_10(_11, function (_12) {
// [Main]         const _13 = minimbt_int_of_float($force(_12));
// [Main]         return $thunk(() => $thunk(() => k(minimbt_print_int($force(_13)))))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_8(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("make_adder", Fun([Int], Double)), args: [("x", Double)], body: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None)}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("add", Var({val: None})), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None)}, Var("adder")) against Fun([Int], Double)
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None) against Double
// [Typer] check: Var("x") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: App(Var("float_of_int"), [Var("y")]) against Double
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("float_of_int") against Fun([Int], Double)
// [Typer] inst: TypeScheme(([], Fun([Int], Double)))
// [Typer] inst result: Fun([Int], Double)
// [Typer] unify: Fun([Int], Double) and Fun([Int], Double)
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: Var("adder") against Fun([Int], Double)
// [Typer] inst: TypeScheme(([], Fun([Int], Double)))
// [Typer] inst result: Fun([Int], Double)
// [Typer] unify: Fun([Int], Double) and Fun([Int], Double)
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("add", Var({val: None})), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("add", Var({val: None})), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))
// [Typer] infer: App(Var("make_adder"), [Double(2.14)])
// [Typer] infer: Var("make_adder")
// [Typer] inst: TypeScheme(([], Fun([Double], Fun([Int], Double))))
// [Typer] inst result: Fun([Double], Fun([Int], Double))
// [Typer] check: Double(2.14) against Double
// [Typer] unify: Var({val: None}) and Fun([Int], Double)
// [Typer] union: Var({val: None}) and Fun([Int], Double)
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("int_of_float"), [App(Var("add"), [Int(1)])]) against Int
// [Typer] infer: App(Var("add"), [Int(1)])
// [Typer] infer: Var("add")
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Int], Double))})))
// [Typer] inst result: Fun([Int], Double)
// [Typer] check: Int(1) against Int
// [Typer] check: Var("int_of_float") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
