// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv3, Insn(iref=%3) -> v5, Self(fref=f0) -> v0, Insn(iref=%0) -> fv2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] defined: v11 is X
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] defined: fv2 is F
// [Asm] defs: [v8]
// [Asm] live_set: [fv2, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv2]
// [Asm] defined: fv9 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] defined: fv3 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.18") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.18") clobbered_f: @hashset.of([fa1, fa0])
// [Asm] subst   li v11, 1 ->   li a0, 1
// [Asm] subst   fcvt.d.w fv2, v11 ->   fcvt.d.w fa0, a0
// [Asm] subst   li v8, 4612001270401303839 ->   li a0, 4612001270401303839
// [Asm] subst   fmv.d.x fv9, v8 ->   fmv.d.x fa1, a0
// [Asm] subst   fadd.d fv3, fv9, fv2 ->   fadd.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v4, fv3, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.18  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.18:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fv2, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, fv3, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, fv9, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, fv9, v5, fv2, a0, v8, v4, fv3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.18_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   li v11, 1  # live: [v11]
// [Asm]   fcvt.d.w fv2, v11  # live: [fv2]
// [Asm]   li v8, 4612001270401303839  # live: [fv2, v8]
// [Asm]   fmv.d.x fv9, v8  # live: [fv9, fv2]
// [Asm]   fadd.d fv3, fv9, fv2  # live: [fv3]
// [Asm]   fcvt.w.d v4, fv3, rtz  # live: [v4]
// [Asm]   # save_ctx2  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce add.10 = adder.14
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.18
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.18
// [Main]   .type main.18, @function
// [Main] # leaf false
// [Main] main.18:
// [Main] .main.18_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 1
// [Main]   fcvt.d.w fa0, a0
// [Main]   li a0, 4612001270401303839
// [Main]   fmv.d.x fa1, a0
// [Main]   fadd.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] check: LetRec({tyvars: [], name: ("make_adder", (Int) -> Double), args: [("x", Double)], body: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None)}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("add", Var(None)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None)}, Var("adder")) against (Int) -> Double
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None) against Double
// [Typer] check: Var("x") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: App(Var("float_of_int"), [Var("y")]) against Double
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("float_of_int") against (Int) -> Double
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] unify: (Int) -> Double and (Int) -> Double
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: Var("adder") against (Int) -> Double
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] unify: (Int) -> Double and (Int) -> Double
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("add", Var(None)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("add", Var(None)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))
// [Typer] infer: App(Var("make_adder"), [Double(2.14)])
// [Typer] infer: Var("make_adder")
// [Typer] inst: TypeScheme(([], (Double) -> (Int) -> Double))
// [Typer] inst result: (Double) -> (Int) -> Double
// [Typer] check: Double(2.14) against Double
// [Typer] unify: Var(None) and (Int) -> Double
// [Typer] union: Var(None) and (Int) -> Double
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [App(Var("add"), [Int(1)])]) against Int
// [Typer] infer: App(Var("add"), [Int(1)])
// [Typer] infer: Var("add")
// [Typer] inst: TypeScheme(([], Var((Int) -> Double)))
// [Typer] inst result: (Int) -> Double
// [Typer] check: Int(1) against Int
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {make_adder.1: Once, adder.4: AsClosure, main.8: Once}
// [KnfOpt] Knf inline Some(make_adder)
// [KnfOpt] freq: {main.8: Once, adder.14: Once}
// [KnfOpt] Knf inline Some(adder)
// [KnfOpt] freq: {main.8: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_11: MayEscape, _12: MayEscape, _13: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
