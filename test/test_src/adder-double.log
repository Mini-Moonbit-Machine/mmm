// [Main] function thunk_main(k) {
// [Main]   function make_adder_1(x_3, k) {
// [Main]     function adder_4(y_6, k) {
// [Main]       return $thunk(() => $external(minimbt_float_of_int, function (_7) {
// [Main]         return $thunk(() => k(x_3 + _7))
// [Main]       }
// [Main]       , y_6))
// [Main]     }
// [Main]     return $thunk(() => k(adder_4))
// [Main]   }
// [Main]   function main_8(k) {
// [Main]     const _9 = 2.14;
// [Main]     return $thunk(() => make_adder_1(_9, function (add_10) {
// [Main]       const _11 = 1;
// [Main]       return $thunk(() => add_10(_11, function (_12) {
// [Main]         return $thunk(() => $external(minimbt_int_of_float, function (_13) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           , _13))
// [Main]         }
// [Main]         , _12))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_8(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("make_adder", (Int) -> Double), args: [("x", Double)], body: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None)}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("add", Var(None)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("adder", Double), args: [("y", Int)], body: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None)}, Var("adder")) against (Int) -> Double
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), App(Var("float_of_int"), [Var("y")]), Add, kind=None) against Double
// [Typer] check: Var("x") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: App(Var("float_of_int"), [Var("y")]) against Double
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("float_of_int") against (Int) -> Double
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] unify: (Int) -> Double and (Int) -> Double
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: Var("adder") against (Int) -> Double
// [Typer] inst: TypeScheme(([], (Int) -> Double))
// [Typer] inst result: (Int) -> Double
// [Typer] unify: (Int) -> Double and (Int) -> Double
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("add", Var(None)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("add", Var(None)), App(Var("make_adder"), [Double(2.14)]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])]))
// [Typer] infer: App(Var("make_adder"), [Double(2.14)])
// [Typer] infer: Var("make_adder")
// [Typer] inst: TypeScheme(([], (Double) -> (Int) -> Double))
// [Typer] inst result: (Double) -> (Int) -> Double
// [Typer] check: Double(2.14) against Double
// [Typer] unify: Var(None) and (Int) -> Double
// [Typer] union: Var(None) and (Int) -> Double
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [App(Var("add"), [Int(1)])])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [App(Var("add"), [Int(1)])]) against Int
// [Typer] infer: App(Var("add"), [Int(1)])
// [Typer] infer: Var("add")
// [Typer] inst: TypeScheme(([], Var((Int) -> Double)))
// [Typer] inst result: (Int) -> Double
// [Typer] check: Int(1) against Int
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
