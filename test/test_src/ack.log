// [Knf] build_knf: LetRec({tyvars: [], name: ("ack", Int), args: [("x", Int), ("y", Int)], body: If(LE(Var("x"), Int(0)), Prim(Var("y"), Int(1), Add, kind=Some(Int)), If(LE(Var("y"), Int(0)), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), Int(1)]), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=Some(Int))])])))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("print_int"), [App(Var("ack"), [Int(3), Int(8)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Prim(Var("y"), Int(1), Add, kind=Some(Int)), If(LE(Var("y"), Int(0)), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), Int(1)]), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=Some(Int))])])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(LE(Var("y"), Int(0)), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), Int(1)]), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=Some(Int))])]))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), Int(1)])
// [Knf] build_knf: Var("ack")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int)), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=Some(Int))])])
// [Knf] build_knf: Var("ack")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("ack")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("y"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("print_int"), [App(Var("ack"), [Int(3), Int(8)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("ack"), [Int(3), Int(8)])])
// [Knf] build_knf: App(Var("ack"), [Int(3), Int(8)])
// [Knf] build_knf: Var("ack")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function ack_1(x_3, y_5, k) {
// [Main]     const _6 = 0;
// [Main]     if (x_3 <= _6) {
// [Main]       const _7 = 1;
// [Main]       return k(y_5 + _7)
// [Main]     } else {
// [Main]       const _8 = 0;
// [Main]       if (y_5 <= _8) {
// [Main]         const _9 = 1;
// [Main]         const _10 = x_3 - _9;
// [Main]         const _11 = 1;
// [Main]         return $thunk(() => ack_1(_10, _11, k))
// [Main]       } else {
// [Main]         const _12 = 1;
// [Main]         const _13 = x_3 - _12;
// [Main]         const _14 = 1;
// [Main]         const _15 = y_5 - _14;
// [Main]         return $thunk(() => ack_1(x_3, _15, function (_16) {
// [Main]           return $thunk(() => ack_1(_13, _16, k))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function main_17(k) {
// [Main]     const _18 = 3;
// [Main]     const _19 = 8;
// [Main]     return $thunk(() => ack_1(_18, _19, function (_20) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_20))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_17(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("ack", Int), args: [("x", Int), ("y", Int)], body: If(LE(Var("x"), Int(0)), Prim(Var("y"), Int(1), Add, kind=None), If(LE(Var("y"), Int(0)), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), Int(1)]), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=None)])])))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("ack"), [Int(3), Int(8)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Int(0)), Prim(Var("y"), Int(1), Add, kind=None), If(LE(Var("y"), Int(0)), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), Int(1)]), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=None)])]))) against Int
// [Typer] check: LE(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("y"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: If(LE(Var("y"), Int(0)), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), Int(1)]), App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=None)])])) against Int
// [Typer] check: LE(Var("y"), Int(0)) against Bool
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), Int(1)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Int(1)
// [Typer] check: Var("ack") against Fun([Int, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] unify: Fun([Int, Int], Int) and Fun([Int, Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("ack"), [Prim(Var("x"), Int(1), Sub, kind=None), App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=None)])]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: App(Var("ack"), [Var("x"), Prim(Var("y"), Int(1), Sub, kind=None)])
// [Typer] infer: Var("ack")
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("y"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("ack") against Fun([Int, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] unify: Fun([Int, Int], Int) and Fun([Int, Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("ack"), [Int(3), Int(8)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("ack"), [Int(3), Int(8)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("ack"), [Int(3), Int(8)]) against Int
// [Typer] infer: Int(3)
// [Typer] infer: Int(8)
// [Typer] check: Var("ack") against Fun([Int, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] unify: Fun([Int, Int], Int) and Fun([Int, Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
