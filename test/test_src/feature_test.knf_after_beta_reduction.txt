let rec main.1: Var({val: Some(Unit)}) = () {
  let _2: Double = Double(1)
  let _3: Double = Double(2)
  let _4: Double = FAdd(_2, _3)
  let _5: Int = ExtApply(minimbt_int_of_float, [_4, ])
  let _6: Unit = ExtApply(minimbt_print_int, [_5, ])
  let _7: Double = Double(1)
  let _8: Double = Double(2)
  let _9: Double = FSub(_7, _8)
  let _10: Int = ExtApply(minimbt_int_of_float, [_9, ])
  let _11: Unit = ExtApply(minimbt_print_int, [_10, ])
  let _12: Double = Double(1)
  let _13: Double = Double(2)
  let _14: Double = FMul(_12, _13)
  let _15: Int = ExtApply(minimbt_int_of_float, [_14, ])
  let _16: Unit = ExtApply(minimbt_print_int, [_15, ])
  let _17: Double = Double(1)
  let _18: Double = Double(2)
  let _19: Double = FDiv(_17, _18)
  let _20: Int = ExtApply(minimbt_int_of_float, [_19, ])
  let _21: Unit = ExtApply(minimbt_print_int, [_20, ])
  let _22: Double = Double(1)
  let _23: Double = Double(2)
  if (_22 <= _23) then {
    let _24: Int = Int(1)
    let _26: Unit = ExtApply(minimbt_print_int, [_24, ])
    let _27: Double = Double(1)
    let _28: Double = Double(1)
    if (_27 == _28) then {
      let _29: Int = Int(1)
      ExtApply(minimbt_print_int, [_29, ])
    } else {
      let _30: Int = Int(0)
      ExtApply(minimbt_print_int, [_30, ])
    }
  } else {
    let _25: Int = Int(0)
    let _26: Unit = ExtApply(minimbt_print_int, [_25, ])
    let _27: Double = Double(1)
    let _28: Double = Double(1)
    if (_27 == _28) then {
      let _29: Int = Int(1)
      ExtApply(minimbt_print_int, [_29, ])
    } else {
      let _30: Int = Int(0)
      ExtApply(minimbt_print_int, [_30, ])
    }
  }
}
Apply(main.1, [])let rec main.1: Var({val: Some(Unit)}) = () {
  let _2: Double = Double(1)
  let _3: Double = Double(2)
  let _4: Double = FAdd(_2, _3)
  let _5: Int = ExtApply(minimbt_int_of_float, [_4, ])
  let _6: Unit = ExtApply(minimbt_print_int, [_5, ])
  let _7: Double = Double(1)
  let _8: Double = Double(2)
  let _9: Double = FSub(_7, _8)
  let _10: Int = ExtApply(minimbt_int_of_float, [_9, ])
  let _11: Unit = ExtApply(minimbt_print_int, [_10, ])
  let _12: Double = Double(1)
  let _13: Double = Double(2)
  let _14: Double = FMul(_12, _13)
  let _15: Int = ExtApply(minimbt_int_of_float, [_14, ])
  let _16: Unit = ExtApply(minimbt_print_int, [_15, ])
  let _17: Double = Double(1)
  let _18: Double = Double(2)
  let _19: Double = FDiv(_17, _18)
  let _20: Int = ExtApply(minimbt_int_of_float, [_19, ])
  let _21: Unit = ExtApply(minimbt_print_int, [_20, ])
  let _22: Double = Double(1)
  let _23: Double = Double(2)
  if (_22 <= _23) then {
    let _24: Int = Int(1)
    let _26: Unit = ExtApply(minimbt_print_int, [_24, ])
    let _27: Double = Double(1)
    let _28: Double = Double(1)
    if (_27 == _28) then {
      let _29: Int = Int(1)
      ExtApply(minimbt_print_int, [_29, ])
    } else {
      let _30: Int = Int(0)
      ExtApply(minimbt_print_int, [_30, ])
    }
  } else {
    let _25: Int = Int(0)
    let _26: Unit = ExtApply(minimbt_print_int, [_25, ])
    let _27: Double = Double(1)
    let _28: Double = Double(1)
    if (_27 == _28) then {
      let _29: Int = Int(1)
      ExtApply(minimbt_print_int, [_29, ])
    } else {
      let _30: Int = Int(0)
      ExtApply(minimbt_print_int, [_30, ])
    }
  }
}
Apply(main.1, [])