let rec loop3.340: Unit = (i.2: Int, j.3: Int, k.4: Int, a.5: Array(Array(Double)), b.6: Array(Array(Double)), c.7: Array(Array(Double))) {
  let join loop3.179: Unit = (i.180: Int, j.181: Int, k.182: Int, a.183: Array(Array(Double)), b.184: Array(Array(Double)), c.185: Array(Array(Double))) {
    let _186: Int = Int(0)
    if (_186 <= k.182) then {
      let _187: Array(Double) = Get c.185[i.180]
      let _188: Array(Double) = Get c.185[i.180]
      let _189: Double = Get _188[j.181]
      let _190: Array(Double) = Get a.183[i.180]
      let _191: Double = Get _190[k.182]
      let _192: Array(Double) = Get b.184[k.182]
      let _193: Double = Get _192[j.181]
      let _194: Double = FMul(_191, _193)
      let _195: Double = FAdd(_189, _194)
      let _196: Unit = Put _187[j.181] = _195
      let _197: Int = Int(1)
      let _198: Int = Sub(k.182, _197)
      Jump(loop3.179, [i.180, j.181, _198, a.183, b.184, c.185, ])
    } else {
      Unit
    }
  }
  Jump(loop3.179, [i.2, j.3, k.4, a.5, b.6, c.7, ])
}
let rec make_arr.342: Array(Array(Double)) = (m.72: Int, n.73: Int, dummy.74: Array(Double)) {
  let mat.75: Array(Array(Double)) = ExtApply(minimbt_create_ptr_array, [m.72, dummy.74, ])
  let _76: Int = Int(1)
  let _77: Int = Sub(m.72, _76)
  let join init_arr.281: Unit = (i.282: Int, n.283: Int, mat.284: Array(Array(Double))) {
    let _285: Int = Int(0)
    if (_285 <= i.282) then {
      let _286: Double = Double(0)
      let _287: Array(Double) = ExtApply(minimbt_create_float_array, [n.283, _286, ])
      let _288: Unit = Put mat.284[i.282] = _287
      let _289: Int = Int(1)
      let _290: Int = Sub(i.282, _289)
      Jump(init_arr.281, [_290, n.283, mat.284, ])
    } else {
      let _78: Unit = Unit
      Var(mat.75)
    }
  }
  Jump(init_arr.281, [_77, n.73, mat.75, ])
}
let rec main.341: Var({val: Some(Unit)}) = () {
  let _58: Int = Int(0)
  let _59: Double = Double(0)
  let dummy.60: Array(Double) = ExtApply(minimbt_create_float_array, [_58, _59, ])
  let _79: Int = Int(2)
  let _80: Int = Int(3)
  let a.81: Array(Array(Double)) = Apply(make_arr.342, [_79, _80, dummy.60, ])
  let _82: Int = Int(3)
  let _83: Int = Int(2)
  let b.84: Array(Array(Double)) = Apply(make_arr.342, [_82, _83, dummy.60, ])
  let _85: Int = Int(2)
  let _86: Int = Int(2)
  let c.87: Array(Array(Double)) = Apply(make_arr.342, [_85, _86, dummy.60, ])
  let _88: Int = Int(0)
  let _89: Array(Double) = Get a.81[_88]
  let _90: Int = Int(0)
  let _91: Double = Double(1)
  let _92: Unit = Put _89[_90] = _91
  let _93: Int = Int(0)
  let _94: Array(Double) = Get a.81[_93]
  let _95: Int = Int(1)
  let _96: Double = Double(2)
  let _97: Unit = Put _94[_95] = _96
  let _98: Int = Int(0)
  let _99: Array(Double) = Get a.81[_98]
  let _100: Int = Int(2)
  let _101: Double = Double(3)
  let _102: Unit = Put _99[_100] = _101
  let _103: Int = Int(1)
  let _104: Array(Double) = Get a.81[_103]
  let _105: Int = Int(0)
  let _106: Double = Double(4)
  let _107: Unit = Put _104[_105] = _106
  let _108: Int = Int(1)
  let _109: Array(Double) = Get a.81[_108]
  let _110: Int = Int(1)
  let _111: Double = Double(5)
  let _112: Unit = Put _109[_110] = _111
  let _113: Int = Int(1)
  let _114: Array(Double) = Get a.81[_113]
  let _115: Int = Int(2)
  let _116: Double = Double(6)
  let _117: Unit = Put _114[_115] = _116
  let _118: Int = Int(0)
  let _119: Array(Double) = Get b.84[_118]
  let _120: Int = Int(0)
  let _121: Double = Double(7)
  let _122: Unit = Put _119[_120] = _121
  let _123: Int = Int(0)
  let _124: Array(Double) = Get b.84[_123]
  let _125: Int = Int(1)
  let _126: Double = Double(8)
  let _127: Unit = Put _124[_125] = _126
  let _128: Int = Int(1)
  let _129: Array(Double) = Get b.84[_128]
  let _130: Int = Int(0)
  let _131: Double = Double(9)
  let _132: Unit = Put _129[_130] = _131
  let _133: Int = Int(1)
  let _134: Array(Double) = Get b.84[_133]
  let _135: Int = Int(1)
  let _136: Double = Double(10)
  let _137: Unit = Put _134[_135] = _136
  let _138: Int = Int(2)
  let _139: Array(Double) = Get b.84[_138]
  let _140: Int = Int(0)
  let _141: Double = Double(11)
  let _142: Unit = Put _139[_140] = _141
  let _143: Int = Int(2)
  let _144: Array(Double) = Get b.84[_143]
  let _145: Int = Int(1)
  let _146: Double = Double(12)
  let _147: Unit = Put _144[_145] = _146
  let _148: Int = Int(2)
  let _149: Int = Int(3)
  let _150: Int = Int(2)
  let _291: Int = Int(1)
  let _292: Int = Sub(_148, _291)
  let join loop1.314: Unit = (i.315: Int, m.316: Int, n.317: Int, a.318: Array(Array(Double)), b.319: Array(Array(Double)), c.320: Array(Array(Double))) {
    let _321: Int = Int(0)
    if (_321 <= i.315) then {
      let _322: Int = Int(1)
      let _323: Int = Sub(n.317, _322)
      let join loop2.324: Unit = (i.325: Int, m.326: Int, j.327: Int, a.328: Array(Array(Double)), b.329: Array(Array(Double)), c.330: Array(Array(Double))) {
        let _331: Int = Int(0)
        if (_331 <= j.327) then {
          let _332: Int = Int(1)
          let _333: Int = Sub(m.326, _332)
          let _334: Unit = Apply(loop3.340, [i.325, j.327, _333, a.328, b.329, c.330, ])
          let _335: Int = Int(1)
          let _336: Int = Sub(j.327, _335)
          Jump(loop2.324, [i.325, m.326, _336, a.328, b.329, c.330, ])
        } else {
          let _337: Unit = Unit
          let _338: Int = Int(1)
          let _339: Int = Sub(i.315, _338)
          Jump(loop1.314, [_339, m.316, n.317, a.318, b.319, c.320, ])
        }
      }
      Jump(loop2.324, [i.315, m.316, _323, a.318, b.319, c.320, ])
    } else {
      let _293: Unit = Unit
      let _151: Unit = Unit
      let _152: Int = Int(0)
      let _153: Array(Double) = Get c.87[_152]
      let _154: Int = Int(0)
      let _155: Double = Get _153[_154]
      let _156: Int = ExtApply(minimbt_truncate, [_155, ])
      let _157: Unit = ExtApply(minimbt_print_int, [_156, ])
      let _158: Unit = ExtApply(minimbt_print_endline, [])
      let _159: Int = Int(0)
      let _160: Array(Double) = Get c.87[_159]
      let _161: Int = Int(1)
      let _162: Double = Get _160[_161]
      let _163: Int = ExtApply(minimbt_truncate, [_162, ])
      let _164: Unit = ExtApply(minimbt_print_int, [_163, ])
      let _165: Unit = ExtApply(minimbt_print_endline, [])
      let _166: Int = Int(1)
      let _167: Array(Double) = Get c.87[_166]
      let _168: Int = Int(0)
      let _169: Double = Get _167[_168]
      let _170: Int = ExtApply(minimbt_truncate, [_169, ])
      let _171: Unit = ExtApply(minimbt_print_int, [_170, ])
      let _172: Unit = ExtApply(minimbt_print_endline, [])
      let _173: Int = Int(1)
      let _174: Array(Double) = Get c.87[_173]
      let _175: Int = Int(1)
      let _176: Double = Get _174[_175]
      let _177: Int = ExtApply(minimbt_truncate, [_176, ])
      let _178: Unit = ExtApply(minimbt_print_int, [_177, ])
      Unit
    }
  }
  Jump(loop1.314, [_292, _149, _150, a.81, b.84, c.87, ])
}
Apply(main.341, [])