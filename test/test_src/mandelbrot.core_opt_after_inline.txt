# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start_10 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn dbl.62l1_0 #f0 : fn(double) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = add($f0, $f0)
    return %0
  }
}
.fn iloop.82l4_1 #f1 : fn(int32, double, double, double, double, double, double) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, double, double, double, double, double, double) {
    let %0: bool = eq($b0.0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_int(1)
    jump b6(%1)
  }
  .bb #b2 () {
    let %2: double = sub($b0.3, $b0.4)
    let %3: double = add(%2, $b0.5)
    let %4: double = call f0($b0.1)
    let %5: double = mul(%4, $b0.2)
    let %6: double = add(%5, $b0.6)
    let %7: double = mul(%3, %3)
    let %8: double = mul(%6, %6)
    let %9: double = mul(2, 2)
    let %10: double = add(%7, %8)
    let %11: bool = le(%9, %10)
    br %11 b3() b4()
  }
  .bb #b3 () {
    let %12: unit = ext_call minimbt_print_int(0)
    jump b5(%12)
  }
  .bb #b4 () {
    let %13: int32 = sub($b0.0, 1)
    jump b0(%13, %3, %6, %7, %8, $b0.5, $b0.6)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2, $f3, $f4, $f5, $f6)
  }
}
.fn xloop.66l3_2 #f2 : fn(int32, int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_endline()
    jump b3(())
  }
  .bb #b2 () {
    let %2: double = conv.i2d($b0.0)
    let %3: double = call f0(%2)
    let %4: double = conv.i2d($b0.2)
    let %5: double = div(%3, %4)
    let %6: double = sub(%5, 1.5)
    let %7: double = conv.i2d($b0.1)
    let %8: double = call f0(%7)
    let %9: double = conv.i2d($b0.2)
    let %10: double = div(%8, %9)
    let %11: double = sub(%10, 1)
    jump b22()
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
  .bb #b6 (unit) {
    let %13: int32 = add($b0.0, 1)
    jump b0(%13, $b0.1, $b0.2)
  }
  .bb #b14 (int32, double, double, double, double, double, double) {
    let %14: bool = eq($b14.0, 0)
    br %14 b15() b16()
  }
  .bb #b15 () {
    let %15: unit = ext_call minimbt_print_int(1)
    jump b20(%15)
  }
  .bb #b16 () {
    let %16: double = sub($b14.3, $b14.4)
    let %17: double = add(%16, $b14.5)
    let %18: double = call f0($b14.1)
    let %19: double = mul(%18, $b14.2)
    let %20: double = add(%19, $b14.6)
    let %21: double = mul(%17, %17)
    let %22: double = mul(%20, %20)
    let %23: double = mul(2, 2)
    let %24: double = add(%21, %22)
    let %25: bool = le(%23, %24)
    br %25 b17() b18()
  }
  .bb #b17 () {
    let %26: unit = ext_call minimbt_print_int(0)
    jump b19(%26)
  }
  .bb #b18 () {
    let %27: int32 = sub($b14.0, 1)
    jump b14(%27, %17, %20, %21, %22, $b14.5, $b14.6)
  }
  .bb #b19 (unit) {
    jump b20($b19.0)
  }
  .bb #b20 (unit) {
    jump b6($b20.0)
  }
  .loop #b21 pre #Some(b22) header #b14 {
    .block #b20
    .block #b18
    .block #b15
    .block #b19
    .block #b16
    .block #b17
  }
  .bb #b22 () {
    jump b21(1000, 0, 0, 0, 0, %6, %11)
  }
}
.fn yloop.64l2_3 #f3 : fn(int32, int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32) {
    let %0: bool = le($b0.1, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    jump b12()
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1)
  }
  .bb #b6 (unit) {
    let %2: int32 = add($b0.0, 1)
    jump b0(%2, $b0.1)
  }
  .bb #b7 (int32, int32, int32) {
    let %3: bool = le($b7.2, $b7.0)
    br %3 b8() b9()
  }
  .bb #b8 () {
    let %4: unit = ext_call minimbt_print_endline()
    jump b10(())
  }
  .bb #b9 () {
    let %5: double = conv.i2d($b7.0)
    let %6: double = call f0(%5)
    let %7: double = conv.i2d($b7.2)
    let %8: double = div(%6, %7)
    let %9: double = sub(%8, 1.5)
    let %10: double = conv.i2d($b7.1)
    let %11: double = call f0(%10)
    let %12: double = conv.i2d($b7.2)
    let %13: double = div(%11, %12)
    let %14: double = sub(%13, 1)
    jump b29()
  }
  .bb #b10 (unit) {
    jump b6($b10.0)
  }
  .loop #b11 pre #Some(b12) header #b7 {
    .block #b8
    .block #b9
    .block #b10
  }
  .bb #b12 () {
    jump b11(0, $b0.0, $b0.1)
  }
  .bb #b13 (unit) {
    let %16: int32 = add($b7.0, 1)
    jump b7(%16, $b7.1, $b7.2)
  }
  .bb #b21 (int32, double, double, double, double, double, double) {
    let %17: bool = eq($b21.0, 0)
    br %17 b22() b23()
  }
  .bb #b22 () {
    let %18: unit = ext_call minimbt_print_int(1)
    jump b27(%18)
  }
  .bb #b23 () {
    let %19: double = sub($b21.3, $b21.4)
    let %20: double = add(%19, $b21.5)
    let %21: double = call f0($b21.1)
    let %22: double = mul(%21, $b21.2)
    let %23: double = add(%22, $b21.6)
    let %24: double = mul(%20, %20)
    let %25: double = mul(%23, %23)
    let %26: double = mul(2, 2)
    let %27: double = add(%24, %25)
    let %28: bool = le(%26, %27)
    br %28 b24() b25()
  }
  .bb #b24 () {
    let %29: unit = ext_call minimbt_print_int(0)
    jump b26(%29)
  }
  .bb #b25 () {
    let %30: int32 = sub($b21.0, 1)
    jump b21(%30, %20, %23, %24, %25, $b21.5, $b21.6)
  }
  .bb #b26 (unit) {
    jump b27($b26.0)
  }
  .bb #b27 (unit) {
    jump b13($b27.0)
  }
  .loop #b28 pre #Some(b29) header #b21 {
    .block #b27
    .block #b25
    .block #b22
    .block #b26
    .block #b23
    .block #b24
  }
  .bb #b29 () {
    jump b28(1000, 0, 0, 0, 0, %9, %14)
  }
}
.fn main.60l0_4 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3(0, 40)
    return %0
  }
}
.thunk ::0 start
