# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn h.50 #f7 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = call f6(%1)
    jump b4(%2)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
  .bb #b4 (int32) {
    let %3: int32 = mul($f0, $b4.0)
    jump b3(%3)
  }
}
.fn T$_47 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: int32 = load_symbol ::2
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f7
    let _ = store closure(int32) -> int32 offset(%0, %1 * @ptr) <- f12.m0
    return ()
  }
}
.fn aux.41 #f6 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: closure(int32) -> int32 = load closure(int32) -> int32 field(%0, 0 * @ptr)
    let %2: int32 = apply %1($f0)
    return %2
  }
}
.fn T$arr.40 #f4 : fn() -> array[closure(int32) -> int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f0
    let _ = alloc <m1: array[closure(int32) -> int32] heap(%0)> <- [..] = f4.m0
    return f4.m1
  }
}
.fn T$_39 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn main.30 #f18 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f7(5)
    let %1: unit = ext_call minimbt_print_int(%0)
    let %2: int32 = load_symbol ::5
    let %3: int32 = add(10, %2)
    let %4: unit = ext_call minimbt_print_int(%3)
    let %5: int32 = load_symbol ::5
    let %6: int32 = add(31, %5)
    let %7: unit = ext_call minimbt_print_int(%6)
    return %7
  }
}
.fn dummy.1 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.fn T$_26 #f14 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn T$_46 #f10 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 0
  }
}
.fn T$a.27 #f16 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::4
    let %1: int32 = call f7(%0)
    return %1
  }
}
.fn T$start #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f18()
    return %0
  }
}
.thunk ::0 _39
.thunk ::1 arr.40
.thunk ::2 _46
.thunk ::3 _47
.thunk ::4 _26
.thunk ::5 a.27
.thunk ::6 start
