# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn dbl10l1_2 #f2 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f0)
    return %0
  }
}
.fn composed6l1c0_8 #f8 : closure(int32) -> int32
.freevars (closure(int32) -> int32, closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0($f0, ^1, ^2)
    return %0
  }
}
.fn dbl10l1c0_14 #f14 : closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f2($f0)
    return %0
  }
}
.fn dec17l3c0_16 #f16 : closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f4($f0)
    return %0
  }
}
.fn inc13l2c0_18 #f18 : closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f3($f0)
    return %0
  }
}
.fn T$start_20 #f20 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn composed6l1_0 #f0 : fn(int32, closure(int32) -> int32, closure(int32) -> int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = apply $f1($f0)
    let %1: int32 = apply $f2(%0)
    return %1
  }
}
.fn inc13l2_3 #f3 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    return %0
  }
}
.fn compose1l0_1 #f1 : fn(closure(int32) -> int32, closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(3)> <- [0] = f8, [1] = $f0, [2] = $f1
    return f1.m0
  }
}
.fn main21l4_5 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f14
    let _ = alloc <m1: closure(int32) -> int32 heap(1)> <- [0] = f16
    let %2: closure(int32) -> int32 = call f1(f5.m0, f5.m1)
    let _ = alloc <m2: closure(int32) -> int32 heap(1)> <- [0] = f18
    let %4: closure(int32) -> int32 = call f1(f5.m2, %2)
    let %5: int32 = apply %4(123)
    let %6: unit = ext_call minimbt_print_int(%5)
    return %6
  }
}
.fn dec17l3_4 #f4 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f0, 1)
    return %0
  }
}
.thunk ::0 start
