// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, Insn(iref=%3) -> v7, FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v8
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f0, fpref=$f.1), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, v2]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 4
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v2]
// [Asm] move: a1 <- v5
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- v7
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- v9
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] Label("pow.48") clobbered_x: @hashset.of([s0, a1, a0])
// [Asm] Label("pow.48") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v5, v3, -1 ->   addi a1, a1, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call pow.48 ->   call pow.48
// [Asm] subst   mul v7, v2, v6 ->   mul a0, s0, a0
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   beq v3, zero, .pow.48_1 ->   beq a1, zero, .pow.48_1
// [Asm] subst   li v9, 1 ->   li a0, 1
// [Asm] subst   j .pow.48_3 ->   j .pow.48_3
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v5, Insn(iref=%7) -> v9, Insn(iref=%2) -> v4, Insn(iref=%9) -> v11, Insn(iref=%8) -> v10, Insn(iref=%1) -> v3, Self(fref=f1) -> v0, Insn(iref=%6) -> v8, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero]
// [Asm] defined: v28 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v28
// [Asm] defined: a0 is X
// [Asm] defs: [v29]
// [Asm] live_set: [zero, a0, v29]
// [Asm] defined: v29 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v29
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [v26]
// [Asm] live_set: [zero, v26, v2]
// [Asm] defined: v26 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v26
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23]
// [Asm] defined: v23 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v23
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero]
// [Asm] defined: v21 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v21, zero, a0]
// [Asm] move: a0 <- v21
// [Asm] defined: a0 is X
// [Asm] skip edge 2 -> 22
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v21
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, zero, a0]
// [Asm] defined: v19 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move: a1 <- v19
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] defined: v16 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v16
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [zero]
// [Asm] move: v10 <- a0
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] defined: v12 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [zero]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.49") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("main.49") clobbered_f: @hashset.of([])
// [Asm] subst   li v28, 2 ->   li a0, 2
// [Asm] subst   li v29, 3 ->   li a1, 3
// [Asm] subst   call pow.48 ->   call pow.48
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   li v26, 2 ->   li a0, 2
// [Asm] subst   call pow.48 ->   call pow.48
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v23, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   li v21, 2 ->   li a0, 2
// [Asm] subst   mv a1, v21 ->   mv a1, a0
// [Asm] subst   call pow.48 ->   call pow.48
// [Asm] subst   li v19, 3 ->   li a1, 3
// [Asm] subst   call pow.48 ->   call pow.48
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v16, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   li v14, 34 ->   li a0, 34
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v12, 10 ->   li a0, 10
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] pow.48:
// [Asm] # block info: defs: [v3, v2], uses: [a1, a0, zero, v3], upward_exposed: [a1, a0, zero], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v2, v3]
// [Asm] # block parameters: []
// [Asm] .pow.48_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   beq v3, zero, .pow.48_1  # live: [v2, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, v5, a0, v7, a1, v6, v2], upward_exposed: [v2, v3], params_defs: []
// [Asm] # live_in: [v3, v2], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .pow.48_2:
// [Asm]   addi v5, v3, -1  # live: [v5, v2]
// [Asm]   # save_ctx2  # live: [v5, v2]
// [Asm]   mv a0, v2  # live: [v5, a0, v2]
// [Asm]   mv a1, v5  # live: [a1, a0, v2]
// [Asm]   call pow.48  # live: [a0, v2]
// [Asm]   mv v6, a0  # live: [v6, v2]
// [Asm]   # restore_ctx2  # live: [v6, v2]
// [Asm]   mul v7, v2, v6  # live: [v7]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .pow.48_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v9, v8], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .pow.48_1:
// [Asm] # control
// [Asm]   li v9, 1  # live: [v9]
// [Asm]   mv v8, v9  # live: [v8]
// [Asm]   j .pow.48_3  # live: [v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.49:
// [Asm] # block info: defs: [v3, t1, v16, v14, v26, v7, ft0, ft1, a1, v12, v28, fa1, fa2, v29, ft6, a4, fa6, v8, v19, a6, v4, ft10, ft5, v6, ft7, v11, ft4, v5, v21, v10, ft9, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2, v2], uses: [v2, v16, v14, v21, a0, v26, v7, a1, v12, v28, v29, zero, v23, v19, v6, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.49_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v28, 2  # live: [v28, zero]
// [Asm]   mv a0, v28  # live: [zero, a0]
// [Asm]   li v29, 3  # live: [zero, a0, v29]
// [Asm]   mv a1, v29  # live: [a1, zero, a0]
// [Asm]   call pow.48  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v26, 2  # live: [zero, v26, v2]
// [Asm]   mv a0, v26  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call pow.48  # live: [zero, a0]
// [Asm]   mv v3, a0  # live: [zero, v3]
// [Asm]   # restore_ctx2  # live: [zero, v3]
// [Asm]   # save_ctx2  # live: [zero, v3]
// [Asm]   mv a0, v3  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v23, 10  # live: [zero, v23]
// [Asm]   mv a0, v23  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v21, 2  # live: [v21, zero]
// [Asm]   mv a0, v21  # live: [v21, zero, a0]
// [Asm]   mv a1, v21  # live: [a1, zero, a0]
// [Asm]   call pow.48  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   mv a0, v6  # live: [zero, a0]
// [Asm]   li v19, 3  # live: [v19, zero, a0]
// [Asm]   mv a1, v19  # live: [a1, zero, a0]
// [Asm]   call pow.48  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero, v7]
// [Asm]   # restore_ctx2  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v16, 10  # live: [v16, zero]
// [Asm]   mv a0, v16  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v14, 34  # live: [v14, zero]
// [Asm]   mv a0, v14  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v12, 10  # live: [v12, zero]
// [Asm]   mv a0, v12  # live: [zero, a0]
// [Asm]   call minimbt_print_char  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.49  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl pow.48
// [Main]   .type pow.48, @function
// [Main] # leaf false
// [Main] pow.48:
// [Main] .pow.48_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, a0
// [Main]   beq a1, zero, .pow.48_1
// [Main] 
// [Main] .pow.48_2:
// [Main]   addi a1, a1, -1
// [Main]   mv a0, s0
// [Main]   call pow.48
// [Main]   mul a0, s0, a0
// [Main] 
// [Main] .pow.48_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .pow.48_1:
// [Main]   li a0, 1
// [Main]   j .pow.48_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.49
// [Main]   .type main.49, @function
// [Main] # leaf false
// [Main] main.49:
// [Main] .main.49_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   call pow.48
// [Main]   mv a1, a0
// [Main]   li a0, 2
// [Main]   call pow.48
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   call pow.48
// [Main]   li a1, 3
// [Main]   call pow.48
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   li a0, 34
// [Main]   call minimbt_print_int
// [Main]   li a0, 10
// [Main]   call minimbt_print_char
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.49
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("pow", Int), args: [("x", Int), ("n", Int)], body: If(Eq(Var("n"), Int(0)), Int(1), Prim(Var("x"), App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]), Mul, kind=None))}, LetRec({tyvars: [], name: ("mod", Int), args: [("x", Int), ("n", Int)], body: Prim(Var("x"), Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))}, Unit)))
// [Typer] resolve: If(Eq(Var("n"), Int(0)), Int(1), Prim(Var("x"), App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]), Mul, kind=None))
// [Typer] resolve: Eq(Var("n"), Int(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Prim(Var("x"), App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]), Mul, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] resolve: Var("x")
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("pow")
// [Typer] resolve: LetRec({tyvars: [], name: ("mod", Int), args: [("x", Int), ("n", Int)], body: Prim(Var("x"), Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))}, Unit))
// [Typer] resolve: Prim(Var("x"), Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None), Sub, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None)
// [Typer] resolve: Prim(Var("x"), Var("n"), Div, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("n")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))}, Unit)
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])])
// [Typer] resolve: App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])
// [Typer] resolve: Int(2)
// [Typer] resolve: App(Var("pow"), targs=None, [Int(2), Int(3)])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Var("pow")
// [Typer] resolve: Var("pow")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))))
// [Typer] resolve: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])])
// [Typer] resolve: App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])
// [Typer] resolve: App(Var("pow"), targs=None, [Int(2), Int(2)])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("pow")
// [Typer] resolve: Int(3)
// [Typer] resolve: Var("pow")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))
// [Typer] resolve: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])])
// [Typer] resolve: App(Var("mod"), targs=None, [Int(66434), Int(100)])
// [Typer] resolve: Int(66434)
// [Typer] resolve: Int(100)
// [Typer] resolve: Var("mod")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)
// [Typer] resolve: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print_char")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("pow", Int), args: [("x", Int), ("n", Int)], body: If(Eq(Var("n"), Int(0)), Int(1), Prim(Var("x"), App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]), Mul, kind=None))}, LetRec({tyvars: [], name: ("mod", Int), args: [("x", Int), ("n", Int)], body: Prim(Var("x"), Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("n"), Int(0)), Int(1), Prim(Var("x"), App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]), Mul, kind=None)) against Int
// [Typer] check: Eq(Var("n"), Int(0)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Prim(Var("x"), App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]), Mul, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("pow"), targs=None, [Var("x"), Prim(Var("n"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("mod", Int), args: [("x", Int), ("n", Int)], body: Prim(Var("x"), Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None), Sub, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Var("x"), Var("n"), Div, kind=None), Var("n"), Mul, kind=None) against Int
// [Typer] check: Prim(Var("x"), Var("n"), Div, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("pow"), targs=None, [Int(2), App(Var("pow"), targs=None, [Int(2), Int(3)])]) against Int
// [Typer] infer: Int(2)
// [Typer] infer: App(Var("pow"), targs=None, [Int(2), Int(3)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))))
// [Typer] infer: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("pow"), targs=None, [App(Var("pow"), targs=None, [Int(2), Int(2)]), Int(3)]) against Int
// [Typer] infer: App(Var("pow"), targs=None, [Int(2), Int(2)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(2) against Int
// [Typer] infer: Int(3)
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)))
// [Typer] infer: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])]), Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("mod"), targs=None, [Int(66434), Int(100)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("mod"), targs=None, [Int(66434), Int(100)]) against Int
// [Typer] infer: Int(66434)
// [Typer] infer: Int(100)
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_char"), targs=None, [Int(10)]), Unit)
// [Typer] infer: App(Var("print_char"), targs=None, [Int(10)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {pow.1: Many(5), mod.10: Once, main.17: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(mod)
// [KnfOpt] freq: {pow.1: Many(5), main.17: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {pow.1: Many(5), main.17: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 5 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {x.3: MayEscape, _8: MayEscape, _19: MayEscape, _20: MayEscape, _18: MayEscape, _21: MayEscape, _22: MayEscape, _25: MayEscape, _28: MayEscape, _29: MayEscape, _30: MayEscape, _31: MayEscape, _32: MayEscape, _35: MayEscape, _40: MayEscape, _43: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %2 pow.48 true false true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 pow.48 false false true false true
// [CoreOpt] allow_inline: false %1 pow.48 false false true false true
// [CoreOpt] allow_inline: false %4 pow.48 false false true false true
// [CoreOpt] allow_inline: false %5 pow.48 false false true false true
// [CoreOpt] allow_inline: false %2 pow.48 true false true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 pow.48 false false true false true
// [CoreOpt] allow_inline: false %1 pow.48 false false true false true
// [CoreOpt] allow_inline: false %4 pow.48 false false true false true
// [CoreOpt] allow_inline: false %5 pow.48 false false true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %2 pow.48 true false true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 pow.48 false false true false true
// [CoreOpt] allow_inline: false %1 pow.48 false false true false true
// [CoreOpt] allow_inline: false %4 pow.48 false false true false true
// [CoreOpt] allow_inline: false %5 pow.48 false false true false true
// [CoreOpt] allow_inline: false %2 pow.48 true false true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 pow.48 false false true false true
// [CoreOpt] allow_inline: false %1 pow.48 false false true false true
// [CoreOpt] allow_inline: false %4 pow.48 false false true false true
// [CoreOpt] allow_inline: false %5 pow.48 false false true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %2 pow.48 true false true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 pow.48 false false true false true
// [CoreOpt] allow_inline: false %1 pow.48 false false true false true
// [CoreOpt] allow_inline: false %4 pow.48 false false true false true
// [CoreOpt] allow_inline: false %5 pow.48 false false true false true
// [CoreOpt] allow_inline: false %2 pow.48 true false true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 pow.48 false false true false true
// [CoreOpt] allow_inline: false %1 pow.48 false false true false true
// [CoreOpt] allow_inline: false %4 pow.48 false false true false true
// [CoreOpt] allow_inline: false %5 pow.48 false false true false true
