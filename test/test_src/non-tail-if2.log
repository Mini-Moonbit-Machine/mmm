// [Main] function thunk_main(k) {
// [Main]   function main_1(k) {
// [Main]     function f_2(k) {
// [Main]       return $thunk(() => k(12345))
// [Main]     }
// [Main]     const _3 = 10;
// [Main]     const _4 = 3;
// [Main]     return $thunk(() => $external(minimbt_create_array, function (y_5) {
// [Main]       const x_6 = 67890;
// [Main]       const _7 = 0;
// [Main]       const _8 = y_5[_7];
// [Main]       const _9 = 3;
// [Main]       function j0(_14) {
// [Main]         return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]           return $thunk(() => k(x))
// [Main]         }
// [Main]         , _14))
// [Main]       }
// [Main]       if (_8 === _9) {
// [Main]         return $thunk(() => f_2(function (_10) {
// [Main]           const _11 = 1;
// [Main]           const _12 = y_5[_11];
// [Main]           const _13 = _10 + _12;
// [Main]           return $thunk(() => j0(_13 + x_6))
// [Main]         }
// [Main]         ))
// [Main]       } else {
// [Main]         return $thunk(() => j0(7))
// [Main]       }
// [Main]     }
// [Main]     , _3, _4))
// [Main]   }
// [Main]   return $thunk(() => main_1(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetRec({tyvars: [], name: ("f", Int), args: [], body: Int(12345)}, Let(("y", Var(None)), Array(Int(10), Int(3)), Let(("x", Var(None)), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None), Int(7))]))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: LetRec({tyvars: [], name: ("f", Int), args: [], body: Int(12345)}, Let(("y", Var(None)), Array(Int(10), Int(3)), Let(("x", Var(None)), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None), Int(7))]))))
// [Typer] typevars: []
// [Typer] check: Int(12345) against Int
// [Typer] infer: Let(("y", Var(None)), Array(Int(10), Int(3)), Let(("x", Var(None)), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None), Int(7))])))
// [Typer] infer: Array(Int(10), Int(3))
// [Typer] infer: Int(3)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: Let(("x", Var(None)), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None), Int(7))]))
// [Typer] infer: Int(67890)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None), Int(7))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None), Int(7)) against Int
// [Typer] check: Eq(Get(Var("y"), Int(0)), Int(3)) against Bool
// [Typer] infer: Get(Var("y"), Int(0))
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] infer: Int(3)
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None), Var("x"), Add, kind=None) against Int
// [Typer] check: Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=None) against Int
// [Typer] check: App(Var("f"), []) against Int
// [Typer] check: Var("f") against () -> Int
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: () -> Int and () -> Int
// [Typer] unify: Int and Int
// [Typer] check: Get(Var("y"), Int(1)) against Int
// [Typer] check: Var("y") against Array[Int]
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(7) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
