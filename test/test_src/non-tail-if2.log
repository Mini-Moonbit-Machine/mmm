// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, Insn(iref=%7) -> v6, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v5, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%1) -> v4, Insn(iref=%6) -> v10, Insn(iref=%5) -> v9, Insn(iref=%0) -> v3, Insn(iref=%4) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=3)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, v8]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v23, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v4, v20, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.15"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v2 ← a0", color=green];
// [Asm]   r23 [label="v4 ← a1", color=green];
// [Asm]   r3 [label="v8 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r26 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v13 ← a1", color=green];
// [Asm]   r1 [label="v7 ← a0", color=green];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r22 [label="v23 ← a1", color=green];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r24 [label="v20 ← a2", color=green];
// [Asm]   r25 [label="v18 ← a0", color=green];
// [Asm]   r2 [label="v15 ← a1", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v10 ← a0", color=green];
// [Asm]   r19 [label="v11 ← a0", color=green];
// [Asm]   r21 [label="s11", color=blue];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r15;
// [Asm]   r20 -- r22;
// [Asm]   r23 -- r24;
// [Asm]   r0 -- r13;
// [Asm]   r20 -- r24;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r16;
// [Asm]   r20 -- r21;
// [Asm]   r0 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:a0-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 1:v7-> 2:v15-> 3:v8-> 4:v13-> 5:v9-> 18:v10-> 19:v11-> 20:v2-> 21:s11-> 22:v23-> 23:v4-> 24:v20-> 25:v18-> 26:v6"
// [Asm]   comment = "v2<-a0;v4<-a1;v8<-a0;v6<-a0;v13<-a1;v7<-a0;v23<-a1;v9<-a0;v20<-a2;v18<-a0;v15<-a1;v10<-a0;v11<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.15"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v7, 4(v2) ->   lw a0, 4(a0)
// [Asm] subst   li v15, 12345 ->   li a1, 12345
// [Asm] subst   add v8, v15, v7 ->   add a0, a1, a0
// [Asm] subst   li v13, 67890 ->   li a1, 67890
// [Asm] subst   add v9, v8, v13 ->   add a0, a0, a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v23, 3 ->   li a1, 3
// [Asm] subst   sw v23, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v23, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v23, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v23, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v23, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   sw v23, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   sw v23, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   sw v23, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   sw v23, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   sw v23, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   lw v4, 0(v2) ->   lw a1, 0(a0)
// [Asm] subst   li v20, 3 ->   li a2, 3
// [Asm] subst   bne v4, v20, .main.15_2 ->   bne a1, a2, .main.15_2
// [Asm] subst   li v18, 7 ->   li a0, 7
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.15_3 ->   j .main.15_3
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.15 ->   call main.15
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.15:
// [Asm] # block info: defs: [v2, v4, s11, v23, v20], uses: [v2, v4, s11, v23, v20], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .main.15_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -40  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [v2]
// [Asm]   li v23, 3  # live: [v23, v2]
// [Asm]   sw v23, 0(v2)  # live: [v23, v2]
// [Asm]   sw v23, 4(v2)  # live: [v23, v2]
// [Asm]   sw v23, 8(v2)  # live: [v23, v2]
// [Asm]   sw v23, 12(v2)  # live: [v23, v2]
// [Asm]   sw v23, 16(v2)  # live: [v23, v2]
// [Asm]   sw v23, 20(v2)  # live: [v23, v2]
// [Asm]   sw v23, 24(v2)  # live: [v23, v2]
// [Asm]   sw v23, 28(v2)  # live: [v23, v2]
// [Asm]   sw v23, 32(v2)  # live: [v23, v2]
// [Asm]   sw v23, 36(v2)  # live: [v2]
// [Asm]   lw v4, 0(v2)  # live: [v4, v2]
// [Asm] # control
// [Asm]   li v20, 3  # live: [v4, v20, v2]
// [Asm]   bne v4, v20, .main.15_2  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v10, v13, a0, v7, v8, v15, v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .main.15_1:
// [Asm]   lw v7, 4(v2)  # live: [v7]
// [Asm]   li v15, 12345  # live: [v15, v7]
// [Asm]   add v8, v15, v7  # live: [v8]
// [Asm]   li v13, 67890  # live: [v13, v8]
// [Asm]   add v9, v8, v13  # live: [v9]
// [Asm]   # save_ctx2  # live: [v9]
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .main.15_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v6, v18, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .main.15_2:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v18, 7  # live: [v18]
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv v11, v6  # live: [v11]
// [Asm]   j .main.15_3  # live: [v11]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.15  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetRec({name: ("f", Int), args: [], body: Int(12345)}, Let(("y", Var({val: Some(Array(Int))})), Array(Int(10), Int(3)), Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))]))))}, App(Var("main"), []))
// [Knf] build_knf: LetRec({name: ("f", Int), args: [], body: Int(12345)}, Let(("y", Var({val: Some(Array(Int))})), Array(Int(10), Int(3)), Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))]))))
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: Let(("y", Var({val: Some(Array(Int))})), Array(Int(10), Int(3)), Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))])))
// [Knf] build_knf: Array(Int(10), Int(3))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))]))
// [Knf] build_knf: Int(67890)
// [Knf] build_knf: App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))])
// [Knf] build_knf: If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))
// [Knf] build_knf: Get(Var("y"), Int(0))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Get(Var("y"), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(7)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%6)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%7)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.15
// [Main]   .type main.15, @function
// [Main] # leaf false
// [Main] main.15:
// [Main] .main.15_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 3
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   sw a1, 20(a0)
// [Main]   sw a1, 24(a0)
// [Main]   sw a1, 28(a0)
// [Main]   sw a1, 32(a0)
// [Main]   sw a1, 36(a0)
// [Main]   lw a1, 0(a0)
// [Main]   li a2, 3
// [Main]   bne a1, a2, .main.15_2
// [Main] 
// [Main] .main.15_1:
// [Main]   lw a0, 4(a0)
// [Main]   li a1, 12345
// [Main]   add a0, a1, a0
// [Main]   li a1, 67890
// [Main]   add a0, a0, a1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.15_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main.15_2:
// [Main]   li a0, 7
// [Main]   call minimbt_print_int
// [Main]   j .main.15_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.15
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.15
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=1, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=12345), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Int32(val=67890)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%6)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=7)])
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%7)])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.15 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: main.1 false
// [KnfOpt] func_tre: f.2 false
// [KnfOpt] freq: {main.1: Once, f.2: Once}
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision f.2 accepted
// [KnfOpt] Knf inline Some(f) let _10: Int = Unit
// [KnfOpt] let _11: Int = Int(1)
// [KnfOpt] let _12: Int = Get y.5[_11]
// [KnfOpt] let _13: Int = Add(_10, _12)
// [KnfOpt] let _14: Int = Add(_13, x.6)
// [KnfOpt] ExtApply(minimbt_print_int, [_14, ])
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
