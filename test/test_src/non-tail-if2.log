// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetRec({name: ("f", Int), args: [], body: Int(12345)}, Let(("y", Var({val: Some(Array(Int))})), Array(Int(10), Int(3)), Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))]))))}, App(Var("main"), []))
// [Knf] build_knf: LetRec({name: ("f", Int), args: [], body: Int(12345)}, Let(("y", Var({val: Some(Array(Int))})), Array(Int(10), Int(3)), Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))]))))
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: Let(("y", Var({val: Some(Array(Int))})), Array(Int(10), Int(3)), Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))])))
// [Knf] build_knf: Array(Int(10), Int(3))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), Int(67890), App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))]))
// [Knf] build_knf: Int(67890)
// [Knf] build_knf: App(Var("print_int"), [If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))])
// [Knf] build_knf: If(Eq(Get(Var("y"), Int(0)), Int(3)), Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Int(7))
// [Knf] build_knf: Get(Var("y"), Int(0))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Prim(Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(App(Var("f"), []), Get(Var("y"), Int(1)), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("f"), [])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Get(Var("y"), Int(1))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(7)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function main1(k) {
// [Main]     function f2(k) {
// [Main]       return k(12345)
// [Main]     }
// [Main]     const _3 = 10;
// [Main]     const _4 = 3;
// [Main]     const y_5 = minimbt_create_array($force(_3), $force(_4));
// [Main]     const x_6 = 67890;
// [Main]     const _7 = 0;
// [Main]     const _8 = y_5[_7];
// [Main]     const _9 = 3;
// [Main]     const _14 = $force((() => {
// [Main]       if (_8 === _9) {
// [Main]         return $thunk(() => f2(function (_10) {
// [Main]           const _11 = 1;
// [Main]           const _12 = y_5[_11];
// [Main]           const _13 = _10 + _12;
// [Main]           return $thunk(() => _13 + x_6)
// [Main]         }
// [Main]         ))
// [Main]       } else {
// [Main]         return 7
// [Main]       }
// [Main]     })());
// [Main]     return k(minimbt_print_int($force(_14)))
// [Main]   }
// [Main]   return $thunk(() => main1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
