# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main75l1_4 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3(40)
    return %0
  }
}
.fn yloop7l2_2 #f2 : fn(int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f1, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: unit = call f1(0, $f0, $f1)
    let %2: int32 = add($f0, 1)
    let %3: unit = call f2(%2, $f1)
    jump b3(%3)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start_12 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn xloop10l3_1 #f1 : fn(int32, int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le($f2, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_endline()
    jump b3(())
  }
  .bb #b2 () {
    let %2: double = conv.i2d($f0)
    let %3: double = call f0(%2)
    let %4: double = conv.i2d($f2)
    let %5: double = div(%3, %4)
    let %6: double = sub(%5, 1.5)
    let %7: double = conv.i2d($f1)
    let %8: double = call f0(%7)
    let %9: double = conv.i2d($f2)
    let %10: double = div(%8, %9)
    let %11: double = sub(%10, 1)
    let _ = alloc <m0: closure(int32, double, double, double, double, double, double) -> unit heap(1)> <- [0] = f7
    let %13: unit = apply f1.m0(1000, 0, 0, 0, 0, %6, %11)
    let %14: int32 = add($f0, 1)
    let %15: unit = call f1(%14, $f1, $f2)
    jump b3(%15)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn iloop29_7 #f7 : closure(int32, double, double, double, double, double, double) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_int(1)
    jump b6(%1)
  }
  .bb #b2 () {
    let %2: double = sub($f3, $f4)
    let %3: double = add(%2, $f5)
    let %4: double = call f0($f1)
    let %5: double = mul(%4, $f2)
    let %6: double = add(%5, $f6)
    let %7: double = mul(%3, %3)
    let %8: double = mul(%6, %6)
    let %9: double = mul(2, 2)
    let %10: double = add(%7, %8)
    let %11: bool = le(%9, %10)
    br %11 b3() b4()
  }
  .bb #b3 () {
    let %12: unit = ext_call minimbt_print_int(0)
    jump b5(%12)
  }
  .bb #b4 () {
    let %13: int32 = sub($f0, 1)
    let %14: unit = apply self(%13, %3, %6, %7, %8, $f5, $f6)
    jump b5(%14)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn mandelbrot1l0_3 #f3 : fn(int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2(0, $f0)
    return %0
  }
}
.fn dbl4l1_0 #f0 : fn(double) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = add($f0, $f0)
    return %0
  }
}
.thunk ::0 start
