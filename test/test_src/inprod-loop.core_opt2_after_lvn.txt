# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.50 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(3)> <- [..] = 1.23
    let _ = alloc <m1: array[double] heap(3)> <- [..] = 4.56
    jump b1(f0.m0, f0.m1, 0, 2)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (array[double], array[double], double, int32) {
    let %2: bool = le(0, $b2.3)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %13: ptr = compute_address unit offset(0, $b2.3 * @64)
    let %3: double = load double raw($b2.0, %13)
    let %4: double = load double raw($b2.1, %13)
    let %5: double = mul(%3, %4)
    let %6: double = add($b2.2, %5)
    let %7: int32 = sub($b2.3, 1)
    jump b2($b2.0, $b2.1, %6, %7)
  }
  .bb #b4 () {
    let %8: double = mul(1000000, $b2.2)
    let %9: int32 = conv.d2i.rtz(%8)
    let %10: unit = ext_call minimbt_print_int(%9)
    jump b5(%10)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.thunk ::0 start
