# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$x_15.29 #f26 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::26
    let %1: int32 = load_symbol ::27
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_6.11 #f8 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::8
    let %1: int32 = load_symbol ::9
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_7.13 #f10 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::10
    let %1: int32 = load_symbol ::11
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_14.27 #f24 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::24
    let %1: int32 = load_symbol ::25
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_13.25 #f22 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::22
    let %1: int32 = load_symbol ::23
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$dummy.32 #f28 : fn() -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::29
    let %1: int32 = load_symbol ::30
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = %1
    return f28.m0
  }
}
.fn T$x_5.9 #f6 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::6
    let %1: int32 = load_symbol ::7
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn print39.125 #f30 : fn(int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: array[int32] = load_symbol ::31
    let _ = store int32 field(%1, 0 * @32) <- 0
    let %3: int32 = load_symbol ::2
    let %4: int32 = add(1, %3)
    let %5: int32 = load_symbol ::4
    let %6: int32 = add(%4, %5)
    let %7: int32 = load_symbol ::6
    let %8: int32 = add(%6, %7)
    let %9: int32 = load_symbol ::8
    let %10: int32 = add(%8, %9)
    let %11: int32 = load_symbol ::10
    let %12: int32 = add(%10, %11)
    let %13: int32 = load_symbol ::12
    let %14: int32 = add(%12, %13)
    let %15: int32 = load_symbol ::14
    let %16: int32 = add(%14, %15)
    let %17: int32 = load_symbol ::16
    let %18: int32 = add(%16, %17)
    let %19: int32 = load_symbol ::18
    let %20: int32 = add(%18, %19)
    let %21: int32 = load_symbol ::20
    let %22: int32 = add(%20, %21)
    let %23: int32 = load_symbol ::22
    let %24: int32 = add(%22, %23)
    let %25: int32 = load_symbol ::24
    let %26: int32 = add(%24, %25)
    let %27: int32 = load_symbol ::26
    let %28: int32 = add(%26, %27)
    let %29: int32 = load_symbol ::28
    let %30: int32 = add(%28, %29)
    let %31: unit = ext_call minimbt_print_int(%30)
    let %32: int32 = sub($f0, 1)
    let %33: unit = call f30(%32)
    jump b3(%33)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$x_9.17 #f14 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::14
    let %1: int32 = load_symbol ::15
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_4.7 #f4 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::4
    let %1: int32 = load_symbol ::5
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_8.15 #f12 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::12
    let %1: int32 = load_symbol ::13
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_2.3 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn main64.126 #f31 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f30(10)
    return %0
  }
}
.fn T$x_11.21 #f18 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::18
    let %1: int32 = load_symbol ::19
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_10.19 #f16 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::16
    let %1: int32 = load_symbol ::17
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_3.5 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::2
    let %1: int32 = load_symbol ::3
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_12.23 #f20 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::20
    let %1: int32 = load_symbol ::21
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$start #f34 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f31()
    return %0
  }
}
.thunk ::0 _108
.thunk ::1 _109
.thunk ::2 x_2.3
.thunk ::3 _110
.thunk ::4 x_3.5
.thunk ::5 _111
.thunk ::6 x_4.7
.thunk ::7 _112
.thunk ::8 x_5.9
.thunk ::9 _113
.thunk ::10 x_6.11
.thunk ::11 _114
.thunk ::12 x_7.13
.thunk ::13 _115
.thunk ::14 x_8.15
.thunk ::15 _116
.thunk ::16 x_9.17
.thunk ::17 _117
.thunk ::18 x_10.19
.thunk ::19 _118
.thunk ::20 x_11.21
.thunk ::21 _119
.thunk ::22 x_12.23
.thunk ::23 _120
.thunk ::24 x_13.25
.thunk ::25 _121
.thunk ::26 x_14.27
.thunk ::27 _122
.thunk ::28 x_15.29
.thunk ::29 _123
.thunk ::30 _124
.thunk ::31 dummy.32
.thunk ::32 start

