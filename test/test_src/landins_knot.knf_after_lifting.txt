let rec dummy1.74: Int = (i2.3: Int) {
  Var(i2.3)
}
let _71: Int = Int(1)
let rec dummy1.75: Int = (i2.3: Int) {
  Apply(dummy1.74, [i2.3, ])
}
let arr.47: Array(Fun([Int], Int)) = ExtApply(minimbt_create_ptr_array, [_71, dummy1.75, ])
let rec h21.76: Var({val: Some(Int)}) = (x22.61: Var({val: Some(Int)})) {
  let _62: Int = Int(0)
  if (x22.61 == _62) then {
    Int(1)
  } else {
    let _63: Int = Int(1)
    let _64: Int = Sub(x22.61, _63)
    let _69: Int = Int(0)
    let _70: Fun([Int], Int) = Get arr.47[_69]
    let _65: Var({val: Some(Int)}) = Apply(_70, [_64, ])
    Mul(x22.61, _65)
  }
}
let _72: Int = Int(0)
let rec h21.77: Var({val: Some(Int)}) = (x22.61: Var({val: Some(Int)})) {
  Apply(h21.76, [x22.61, ])
}
let _54: Unit = Put arr.47[_72] = h21.77
let _73: Int = Int(5)
let a.33: Int = Apply(h21.76, [_73, ])
let rec main37.78: Var({val: Some(Unit)}) = () {
  let _55: Int = Int(5)
  let _56: Int = Apply(h21.76, [_55, ])
  let _39: Unit = ExtApply(minimbt_print_int, [_56, ])
  let _40: Int = Int(10)
  let _41: Int = Add(_40, a.33)
  let _43: Unit = ExtApply(minimbt_print_int, [_41, ])
  let _44: Int = Int(31)
  let _45: Int = Add(_44, a.33)
  ExtApply(minimbt_print_int, [_45, ])
}
Apply(main37.78, [])
