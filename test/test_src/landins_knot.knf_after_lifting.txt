let rec dummy1.60: Int = (i2.3: Int) {
  Var(i2.3)
}
let rec h21.62: Var({val: Some(Int)}) = (x22.23: Var({val: Some(Int)}), f19.20: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let _24: Int = Int(0)
  if (x22.23 == _24) then {
    Int(1)
  } else {
    let _25: Int = Int(1)
    let _26: Int = Sub(x22.23, _25)
    let _27: Var({val: Some(Int)}) = Apply(f19.20, [_26, ])
    Mul(x22.23, _27)
  }
}
let rec g18.61: Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))}) = (f19.20: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let rec h21.63: Var({val: Some(Int)}) = (x22.23: Var({val: Some(Int)})) {
    Apply(h21.62, [x22.23, f19.20, ])
  }
  Var(h21.63)
}
let _57: Int = Int(1)
let rec dummy1.64: Int = (i2.3: Int) {
  Apply(dummy1.60, [i2.3, ])
}
let arr.47: Array(Fun([Int], Int)) = ExtApply(minimbt_create_ptr_array, [_57, dummy1.64, ])
let rec aux9.65: Var({val: Some(Int)}) = (x10.49: Var({val: Some(Int)})) {
  let _50: Int = Int(0)
  let _51: Fun([Int], Int) = Get arr.47[_50]
  Apply(_51, [x10.49, ])
}
let rec aux9.66: Var({val: Some(Int)}) = (x10.49: Var({val: Some(Int)})) {
  Apply(aux9.65, [x10.49, ])
}
let fixedpoint.52: Fun([Int], Int) = Apply(g18.61, [aux9.66, ])
let _58: Int = Int(0)
let _54: Unit = Put arr.47[_58] = fixedpoint.52
let _59: Int = Int(5)
let a.33: Int = Apply(fixedpoint.52, [_59, ])
let rec main37.67: Var({val: Some(Unit)}) = () {
  let _55: Int = Int(5)
  let _56: Int = Apply(fixedpoint.52, [_55, ])
  let _39: Unit = ExtApply(minimbt_print_int, [_56, ])
  let _40: Int = Int(10)
  let _41: Int = Add(_40, a.33)
  let _43: Unit = ExtApply(minimbt_print_int, [_41, ])
  let _44: Int = Int(31)
  let _45: Int = Add(_44, a.33)
  ExtApply(minimbt_print_int, [_45, ])
}
Apply(main37.67, [])
