let rec dummy.48: Int = (i.2: Int) {
  Var(i.2)
}
let rec h.50: Var({val: Some(Int)}) = (x.17: Var({val: Some(Int)}), f.15: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let _18: Int = Int(0)
  if (x.17 == _18) then {
    Int(1)
  } else {
    let _19: Int = Int(1)
    let _20: Int = Sub(x.17, _19)
    let _21: Var({val: Some(Int)}) = Apply(f.15, [_20, ])
    Mul(x.17, _21)
  }
}
let rec g.49: Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))}) = (f.15: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let rec h.51: Var({val: Some(Int)}) = (x.17: Var({val: Some(Int)})) {
    Apply(h.50, [x.17, f.15, ])
  }
  Var(h.51)
}
let _37: Int = Int(1)
let rec dummy.52: Int = (i.2: Int) {
  Apply(dummy.48, [i.2, ])
}
let arr.38: Array(Fun([Int], Int)) = ExtApply(minimbt_create_ptr_array, [_37, dummy.52, ])
let rec aux.53: Var({val: Some(Int)}) = (x.40: Var({val: Some(Int)}), arr.38: Array(Fun([Int], Int))) {
  let _41: Int = Int(0)
  let _42: Fun([Int], Int) = Get arr.38[_41]
  Apply(_42, [x.40, ])
}
let rec aux.54: Var({val: Some(Int)}) = (x.40: Var({val: Some(Int)})) {
  Apply(aux.53, [x.40, arr.38, ])
}
let fixedpoint.43: Fun([Int], Int) = Apply(g.49, [aux.54, ])
let _44: Int = Int(0)
let _45: Unit = Put arr.38[_44] = fixedpoint.43
let _26: Int = Int(5)
let a.27: Int = Apply(fixedpoint.43, [_26, ])
let rec main.55: Var({val: Some(Unit)}) = (a.27: Int, fixedpoint.43: Fun([Int], Int)) {
  let _46: Int = Int(5)
  let _47: Int = Apply(fixedpoint.43, [_46, ])
  let _31: Unit = ExtApply(minimbt_print_int, [_47, ])
  let _32: Int = Int(10)
  let _33: Int = Add(_32, a.27)
  let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
  let _35: Int = Int(31)
  let _36: Int = Add(_35, a.27)
  ExtApply(minimbt_print_int, [_36, ])
}
Apply(main.55, [a.27, fixedpoint.43, ])