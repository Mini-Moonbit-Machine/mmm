let rec dummy.37: Int = (i.2: Int) {
  Var(i.2)
}
let rec aux.40: Var({val: Some(Int)}) = (x.8: Var({val: Some(Int)}), arr.6: Array(Fun([Int], Int))) {
  let _9: Int = Int(0)
  let _10: Fun([Int], Int) = Get arr.6[_9]
  Apply(_10, [x.8, ])
}
let rec landins_knot.38: Fun([Int], Int) = (f.4: Fun([Fun([Int], Int)], Fun([Int], Int))) {
  let _5: Int = Int(1)
  let rec dummy.39: Int = (i.2: Int) {
    Apply(dummy.37, [i.2, ])
  }
  let arr.6: Array(Fun([Int], Int)) = ExtApply(minimbt_create_ptr_array, [_5, dummy.39, ])
  let rec aux.41: Var({val: Some(Int)}) = (x.8: Var({val: Some(Int)})) {
    Apply(aux.40, [x.8, arr.6, ])
  }
  let fixedpoint.11: Fun([Int], Int) = Apply(f.4, [aux.41, ])
  let _12: Int = Int(0)
  let _13: Unit = Put arr.6[_12] = fixedpoint.11
  Var(fixedpoint.11)
}
let rec h.43: Var({val: Some(Int)}) = (x.17: Var({val: Some(Int)}), f.15: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let _18: Int = Int(0)
  if (x.17 == _18) then {
    Int(1)
  } else {
    let _19: Int = Int(1)
    let _20: Int = Sub(x.17, _19)
    let _21: Var({val: Some(Int)}) = Apply(f.15, [_20, ])
    Mul(x.17, _21)
  }
}
let rec g.42: Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))}) = (f.15: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let rec h.44: Var({val: Some(Int)}) = (x.17: Var({val: Some(Int)})) {
    Apply(h.43, [x.17, f.15, ])
  }
  Var(h.44)
}
let rec g.45: Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))}) = (f.15: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  Apply(g.42, [f.15, ])
}
let factorial.22: Fun([Int], Int) = Apply(landins_knot.38, [g.45, ])
let rec f1.46: Unit = (factorial.22: Fun([Int], Int)) {
  let _24: Int = Int(5)
  let _25: Int = Apply(factorial.22, [_24, ])
  ExtApply(minimbt_print_int, [_25, ])
}
let _26: Int = Int(5)
let a.27: Int = Apply(factorial.22, [_26, ])
let rec main.47: Var({val: Some(Unit)}) = (a.27: Int, factorial.22: Fun([Int], Int)) {
  let _31: Unit = Apply(f1.46, [factorial.22, ])
  let _32: Int = Int(10)
  let _33: Int = Add(_32, a.27)
  let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
  let _35: Int = Int(31)
  let _36: Int = Add(_35, a.27)
  ExtApply(minimbt_print_int, [_36, ])
}
Apply(main.47, [a.27, factorial.22, ])