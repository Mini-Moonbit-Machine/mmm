enum IntList = Enum IntList { Nil(), Cons(Int, ~0) }
let rec int_array_to_list: (arr: Array[Int], len: Int) -> Enum IntList { Nil(), Cons(Int, ~0) } {
  let rec aux: (i: Int) -> Enum IntList { Nil(), Cons(Int, ~1) } {
    if (Eq(Var("i"), Var("len"))) then {
      CtorApp(Nil, [])
    } else {
      CtorApp(Cons, [Get(Var("arr"), Var("i")), App(Var("aux"), targs=Some([]), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]), ])
    }
  }
  Apply[](Var("aux"), [Int(0), ])
}
let rec print_int_list: (lst: Enum IntList { Nil(), Cons(Int, ~0) }) -> Unit {
  Match(Var("lst"), [
    CtorApp("Nil", []) =>
      Unit
    CtorApp("Cons", [Var("h"), Var("t")]) =>
      let _: Unit = Apply[](Var("print_int"), [Var("h"), ])
      Apply[](Var("print_int_list"), [Var("t"), ])
  ])
}
let rec main: () -> Unit {
  let arr: Array[Int] = Array::make(Int(5), Int(1))
  let _: Unit = Put Var("arr")[Int(0)] = Int(1)
  let _: Unit = Put Var("arr")[Int(1)] = Int(2)
  let _: Unit = Put Var("arr")[Int(2)] = Int(3)
  let _: Unit = Put Var("arr")[Int(3)] = Int(4)
  let _: Unit = Put Var("arr")[Int(4)] = Int(5)
  let lst: Enum IntList { Nil(), Cons(Int, ~1) } = Apply[](Var("int_array_to_list"), [Var("arr"), Int(5), ])
  Apply[](Var("print_int_list"), [Var("lst"), ])
}
let rec print_int: (x: Int) -> Unit {
  Unit
}
Unit
