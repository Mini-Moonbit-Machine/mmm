let rec s: forall [("X", None), ("Y", None), ("Z", None)] . (x: (Z) -> (Y) -> X) -> ((Z) -> Y) -> (Z) -> X {
  let rec f: (y: (Z) -> Y) -> (Z) -> X {
    let rec g: (z: Z) -> X {
      Apply(App(Var("x"), targs=Some([]), [Var("z")]), [App(Var("y"), targs=Some([]), [Var("z")]), ])
    }
    Var(g)
  }
  Var(f)
}
let rec k: forall [("X", None), ("Y", None)] . (x: X) -> (Y) -> X {
  let rec f: (y: Y) -> X {
    Var(x)
  }
  Var(f)
}
let rec i: forall [("X", None)] . (x: X) -> X {
  Var(x)
}
let rec main: () -> Unit {
  let rev_apply: (Int) -> ((Int) -> Unit) -> Unit = Apply(App(Var("s"), targs=Some([("X", ((Int) -> Unit) -> Unit), ("Y", ((Int) -> Unit) -> Int), ("Z", Int)]), [App(Var("k"), targs=Some([("X", (((Int) -> Unit) -> Int) -> ((Int) -> Unit) -> Unit), ("Y", Int)]), [App(Var("s"), targs=Some([("X", Unit), ("Y", Int), ("Z", (Int) -> Unit)]), [Var("i")])])]), [Var("k"), ])
  let rec printi: (x: Int) -> Unit {
    Apply[](Var("print_int"), [Var("x"), ])
  }
  Apply(App(Var("rev_apply"), targs=Some([]), [Int(2)]), [Var("printi"), ])
}
Unit
