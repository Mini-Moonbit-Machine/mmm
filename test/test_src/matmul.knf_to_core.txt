# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.255 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let %1: array[array[double]] = call f4(2, 3, f5.m0)
    let %2: array[array[double]] = call f4(3, 2, f5.m0)
    let %3: array[array[double]] = call f4(2, 2, f5.m0)
    let %4: array[double] = load array[double] offset(%1, 0 * @ptr)
    let _ = store double offset(%4, 0 * @64) <- 1
    let %6: array[double] = load array[double] offset(%1, 0 * @ptr)
    let _ = store double offset(%6, 1 * @64) <- 2
    let %8: array[double] = load array[double] offset(%1, 0 * @ptr)
    let _ = store double offset(%8, 2 * @64) <- 3
    let %10: array[double] = load array[double] offset(%1, 1 * @ptr)
    let _ = store double offset(%10, 0 * @64) <- 4
    let %12: array[double] = load array[double] offset(%1, 1 * @ptr)
    let _ = store double offset(%12, 1 * @64) <- 5
    let %14: array[double] = load array[double] offset(%1, 1 * @ptr)
    let _ = store double offset(%14, 2 * @64) <- 6
    let %16: array[double] = load array[double] offset(%2, 0 * @ptr)
    let _ = store double offset(%16, 0 * @64) <- 7
    let %18: array[double] = load array[double] offset(%2, 0 * @ptr)
    let _ = store double offset(%18, 1 * @64) <- 8
    let %20: array[double] = load array[double] offset(%2, 1 * @ptr)
    let _ = store double offset(%20, 0 * @64) <- 9
    let %22: array[double] = load array[double] offset(%2, 1 * @ptr)
    let _ = store double offset(%22, 1 * @64) <- 10
    let %24: array[double] = load array[double] offset(%2, 2 * @ptr)
    let _ = store double offset(%24, 0 * @64) <- 11
    let %26: array[double] = load array[double] offset(%2, 2 * @ptr)
    let _ = store double offset(%26, 1 * @64) <- 12
    let %28: unit = call f3(2, 3, 2, %1, %2, %3)
    let %29: array[double] = load array[double] offset(%3, 0 * @ptr)
    let %30: double = load double offset(%29, 0 * @64)
    let %31: int32 = conv.d2i.rtz(%30)
    let %32: unit = ext_call minimbt_print_int(%31)
    let %33: unit = ext_call minimbt_print_endline()
    let %34: array[double] = load array[double] offset(%3, 0 * @ptr)
    let %35: double = load double offset(%34, 1 * @64)
    let %36: int32 = conv.d2i.rtz(%35)
    let %37: unit = ext_call minimbt_print_int(%36)
    let %38: unit = ext_call minimbt_print_endline()
    let %39: array[double] = load array[double] offset(%3, 1 * @ptr)
    let %40: double = load double offset(%39, 0 * @64)
    let %41: int32 = conv.d2i.rtz(%40)
    let %42: unit = ext_call minimbt_print_int(%41)
    let %43: unit = ext_call minimbt_print_endline()
    let %44: array[double] = load array[double] offset(%3, 1 * @ptr)
    let %45: double = load double offset(%44, 1 * @64)
    let %46: int32 = conv.d2i.rtz(%45)
    let %47: unit = ext_call minimbt_print_int(%46)
    return ()
  }
}
.fn loop3.254 #f0 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: bool = le(0, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    let %1: array[double] = load array[double] offset($f3, $f4 * @ptr)
    let %2: array[double] = load array[double] offset($f3, $f4 * @ptr)
    let %3: double = load double offset(%2, $f5 * @64)
    let %4: array[double] = load array[double] offset($f1, $f4 * @ptr)
    let %5: double = load double offset(%4, $b2.0 * @64)
    let %6: array[double] = load array[double] offset($f2, $b2.0 * @ptr)
    let %7: double = load double offset(%6, $f5 * @64)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, $f5 * @64) <- %9
    let %11: int32 = sub($b2.0, 1)
    jump b2(%11)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn loop2.253 #f1 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: bool = le(0, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    let %1: int32 = sub($f5, 1)
    let %2: unit = call f0(%1, $f1, $f2, $f3, $f4, $b2.0)
    let %3: int32 = sub($b2.0, 1)
    jump b2(%3)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn loop1.252 #f2 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: bool = le(0, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    let %1: int32 = sub($f5, 1)
    let %2: unit = call f1(%1, $f1, $f2, $f3, $b2.0, $f4)
    let %3: int32 = sub($b2.0, 1)
    jump b2(%3)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn gen_arr.256 #f4 : fn(int32, int32, array[double]) -> array[array[double]]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = $f2
    let %1: int32 = sub($f0, 1)
    jump b1(%1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %2: bool = le(0, $b2.0)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let _ = alloc <m1: array[double] heap($f1)> <- [..] = 0
    let _ = store array[double] offset(f4.m0, $b2.0 * @ptr) <- f4.m1
    let %5: int32 = sub($b2.0, 1)
    jump b2(%5)
  }
  .bb #b4 () {
    jump b5(f4.m0)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.fn matmul.251 #f3 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f0, 1)
    let %1: unit = call f2(%0, $f3, $f4, $f5, $f1, $f2)
    return %1
  }
}
.thunk ::0 start
