# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn loop322.241l4_2 #f2 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: array[double] = load array[double] offset($f3, $f4 * @ptr)
    let %2: array[double] = load array[double] offset($f3, $f4 * @ptr)
    let %3: double = load double offset(%2, $f5 * @64)
    let %4: array[double] = load array[double] offset($f1, $f4 * @ptr)
    let %5: double = load double offset(%4, $f0 * @64)
    let %6: array[double] = load array[double] offset($f2, $f0 * @ptr)
    let %7: double = load double offset(%6, $f5 * @64)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, $f5 * @64) <- %9
    let %11: int32 = sub($f0, 1)
    let %12: unit = call f2(%11, $f1, $f2, $f3, $f4, $f5)
    jump b3(%12)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start_12 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn main53l0_5 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let %1: array[array[double]] = call f1(2, 3, f5.m0)
    let %2: array[array[double]] = call f1(3, 2, f5.m0)
    let %3: array[array[double]] = call f1(2, 2, f5.m0)
    let %4: array[double] = load array[double] offset(%1, 0 * @ptr)
    let _ = store double offset(%4, 0 * @64) <- 1
    let %6: array[double] = load array[double] offset(%1, 0 * @ptr)
    let _ = store double offset(%6, 1 * @64) <- 2
    let %8: array[double] = load array[double] offset(%1, 0 * @ptr)
    let _ = store double offset(%8, 2 * @64) <- 3
    let %10: array[double] = load array[double] offset(%1, 1 * @ptr)
    let _ = store double offset(%10, 0 * @64) <- 4
    let %12: array[double] = load array[double] offset(%1, 1 * @ptr)
    let _ = store double offset(%12, 1 * @64) <- 5
    let %14: array[double] = load array[double] offset(%1, 1 * @ptr)
    let _ = store double offset(%14, 2 * @64) <- 6
    let %16: array[double] = load array[double] offset(%2, 0 * @ptr)
    let _ = store double offset(%16, 0 * @64) <- 7
    let %18: array[double] = load array[double] offset(%2, 0 * @ptr)
    let _ = store double offset(%18, 1 * @64) <- 8
    let %20: array[double] = load array[double] offset(%2, 1 * @ptr)
    let _ = store double offset(%20, 0 * @64) <- 9
    let %22: array[double] = load array[double] offset(%2, 1 * @ptr)
    let _ = store double offset(%22, 1 * @64) <- 10
    let %24: array[double] = load array[double] offset(%2, 2 * @ptr)
    let _ = store double offset(%24, 0 * @64) <- 11
    let %26: array[double] = load array[double] offset(%2, 2 * @ptr)
    let _ = store double offset(%26, 1 * @64) <- 12
    let %28: int32 = sub(2, 1)
    let %29: unit = call f4(%28, 3, 2, %1, %2, %3)
    let %30: array[double] = load array[double] offset(%3, 0 * @ptr)
    let %31: double = load double offset(%30, 0 * @64)
    let %32: int32 = conv.d2i.rtz(%31)
    let %33: unit = ext_call minimbt_print_int(%32)
    let %34: unit = ext_call minimbt_print_endline()
    let %35: array[double] = load array[double] offset(%3, 0 * @ptr)
    let %36: double = load double offset(%35, 1 * @64)
    let %37: int32 = conv.d2i.rtz(%36)
    let %38: unit = ext_call minimbt_print_int(%37)
    let %39: unit = ext_call minimbt_print_endline()
    let %40: array[double] = load array[double] offset(%3, 1 * @ptr)
    let %41: double = load double offset(%40, 0 * @64)
    let %42: int32 = conv.d2i.rtz(%41)
    let %43: unit = ext_call minimbt_print_int(%42)
    let %44: unit = ext_call minimbt_print_endline()
    let %45: array[double] = load array[double] offset(%3, 1 * @ptr)
    let %46: double = load double offset(%45, 1 * @64)
    let %47: int32 = conv.d2i.rtz(%46)
    let %48: unit = ext_call minimbt_print_int(%47)
    return ()
  }
}
.fn init_arr63l2_0 #f0 : fn(int32, array[array[double]], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap($f2)> <- [..] = 0
    let _ = store array[double] offset($f1, $f0 * @ptr) <- f0.m0
    let %3: int32 = sub($f0, 1)
    let %4: bool = le(0, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let _ = alloc <m1: array[double] heap($f2)> <- [..] = 0
    let _ = store array[double] offset($f1, %3 * @ptr) <- f0.m1
    let %7: int32 = sub(%3, 1)
    let %8: unit = call f0(%7, $f1, $f2)
    jump b5(%8)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn gen_arr57l1_1 #f1 : fn(int32, int32, array[double]) -> array[array[double]]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: bool = le(0, %1)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m1: array[double] heap($f1)> <- [..] = 0
    let _ = store array[double] offset(f1.m0, %1 * @ptr) <- f1.m1
    let %5: int32 = sub(%1, 1)
    let %6: unit = call f0(%5, f1.m0, $f1)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return f1.m0
  }
}
.fn loop218.238l3_3 #f3 : fn(int32, int32, array[array[double]], array[array[double]], array[array[double]], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f1, 1)
    let %2: unit = call f2(%1, $f2, $f3, $f4, $f5, $f0)
    let %3: int32 = sub($f0, 1)
    let %4: unit = call f3(%3, $f1, $f2, $f3, $f4, $f5)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop114.235l2_4 #f4 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f2, 1)
    let %2: unit = call f3(%1, $f1, $f3, $f4, $f5, $f0)
    let %3: int32 = sub($f0, 1)
    let %4: unit = call f4(%3, $f1, $f2, $f3, $f4, $f5)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.thunk ::0 start
