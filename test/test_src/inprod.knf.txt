let rec getx.1: Double = (v.3: (Double, Double, Double)) {
  let (x.5: Double, _7: Double, _9: Double) = v.3
  Var(x.5)
}
let rec gety.10: Double = (v.12: (Double, Double, Double)) {
  let (_14: Double, y.16: Double, _18: Double) = v.12
  Var(y.16)
}
let rec getz.19: Double = (v.21: (Double, Double, Double)) {
  let (_23: Double, _25: Double, z.27: Double) = v.21
  Var(z.27)
}
let rec inprod.28: Double = (v1.30: (Double, Double, Double), v2.32: (Double, Double, Double)) {
  let _33: Double = Apply(getx.1, [v1.30, ])
  let _34: Double = Apply(getx.1, [v2.32, ])
  let _35: Double = FMul(_33, _34)
  let _36: Double = Apply(gety.10, [v1.30, ])
  let _37: Double = Apply(gety.10, [v2.32, ])
  let _38: Double = FMul(_36, _37)
  let _39: Double = FAdd(_35, _38)
  let _40: Double = Apply(getz.19, [v1.30, ])
  let _41: Double = Apply(getz.19, [v2.32, ])
  let _42: Double = FMul(_40, _41)
  FAdd(_39, _42)
}
let rec main.43: Unit = () {
  let _44: Double = Double(1000000)
  let _45: Double = Double(1)
  let _46: Double = Double(2)
  let _47: Double = Double(3)
  let _48: (Double, Double, Double) = Tuple([_45, _46, _47, ])
  let _49: Double = Double(4)
  let _50: Double = Double(5)
  let _51: Double = Double(6)
  let _52: (Double, Double, Double) = Tuple([_49, _50, _51, ])
  let _53: Double = Apply(inprod.28, [_48, _52, ])
  let _54: Double = FMul(_44, _53)
  let _55: Int = ExtApply(minimbt_truncate, [_54, ])
  ExtApply(minimbt_print_int, [_55, ])
}
Apply(main.43, [])
