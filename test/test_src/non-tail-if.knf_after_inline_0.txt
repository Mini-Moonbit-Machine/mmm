let rec main.1: Var({val: Some(Unit)}) = () {
  let _2: Double = Double(1.23)
  let x.3: Int = ExtApply(minimbt_truncate, [_2, ])
  let _4: Double = Double(4.56)
  let y.5: Int = ExtApply(minimbt_truncate, [_4, ])
  let _6: Double = Double(7.89)
  let _7: Double = FNeg(_6)
  let z.8: Int = ExtApply(minimbt_truncate, [_7, ])
  let _9: Int = Int(0)
  if (_9 <= z.8) then {
    let _10: Var({val: Some(Int)}) = Var(x.3)
    let _11: Int = Int(0)
    if (x.3 <= _11) then {
      let _12: Var({val: Some(Int)}) = Var(y.5)
      let _13: Int = Add(_10, _12)
      let _14: Int = Int(0)
      if (_14 <= y.5) then {
        let _15: Var({val: Some(Int)}) = Var(z.8)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      } else {
        let _15: Var({val: Some(Int)}) = Var(x.3)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      }
    } else {
      let _12: Var({val: Some(Int)}) = Var(z.8)
      let _13: Int = Add(_10, _12)
      let _14: Int = Int(0)
      if (_14 <= y.5) then {
        let _15: Var({val: Some(Int)}) = Var(z.8)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      } else {
        let _15: Var({val: Some(Int)}) = Var(x.3)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      }
    }
  } else {
    let _10: Var({val: Some(Int)}) = Var(y.5)
    let _11: Int = Int(0)
    if (x.3 <= _11) then {
      let _12: Var({val: Some(Int)}) = Var(y.5)
      let _13: Int = Add(_10, _12)
      let _14: Int = Int(0)
      if (_14 <= y.5) then {
        let _15: Var({val: Some(Int)}) = Var(z.8)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      } else {
        let _15: Var({val: Some(Int)}) = Var(x.3)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      }
    } else {
      let _12: Var({val: Some(Int)}) = Var(z.8)
      let _13: Int = Add(_10, _12)
      let _14: Int = Int(0)
      if (_14 <= y.5) then {
        let _15: Var({val: Some(Int)}) = Var(z.8)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      } else {
        let _15: Var({val: Some(Int)}) = Var(x.3)
        let _16: Int = Add(_13, _15)
        ExtApply(minimbt_print_int, [_16, ])
      }
    }
  }
}
Apply(main.1, [])