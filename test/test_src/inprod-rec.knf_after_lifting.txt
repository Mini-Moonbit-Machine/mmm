let rec inprod.1l0: Double = (v1.2: Array(Double), v2.3: Array(Double), i.4: Int) {
  let _5: Int = Int(0)
  if (_5 <= i.4) then {
    let _6: Double = Get v1.2[i.4]
    let _7: Double = Get v2.3[i.4]
    let _8: Double = FMul(_6, _7)
    let _9: Int = Int(1)
    let _10: Int = Sub(i.4, _9)
    let _11: Double = Apply(inprod.1l0, [v1.2, v2.3, _10, ])
    FAdd(_8, _11)
  } else {
    Double(0)
  }
}
let rec main.12l1: Var({val: Some(Unit)}) = () {
  let _13: Int = Int(3)
  let _14: Double = Double(1.23)
  let v1.15: Array(Double) = ExtApply(minimbt_create_float_array, [_13, _14, ])
  let _16: Int = Int(3)
  let _17: Double = Double(4.56)
  let v2.18: Array(Double) = ExtApply(minimbt_create_float_array, [_16, _17, ])
  let _19: Double = Double(1000000)
  let _20: Int = Int(2)
  let _21: Double = Apply(inprod.1l0, [v1.15, v2.18, _20, ])
  let _22: Double = FMul(_19, _21)
  let _23: Int = ExtApply(minimbt_truncate, [_22, ])
  ExtApply(minimbt_print_int, [_23, ])
}
Apply(main.12l1, [])