// [Asm] pre_assigned_registers: Insn(iref=%4) -> fv6, Insn(iref=%3) -> fv5, Insn(iref=%7) -> fv9, Self(fref=f0) -> v0, Insn(iref=%2) -> fv4, Insn(iref=%9) -> fv11, Insn(iref=%8) -> fv10, Insn(iref=%1) -> fv3, Insn(iref=%10) -> fv12, Insn(iref=%11) -> v13, Insn(iref=%6) -> fv8, Insn(iref=%5) -> fv7, Insn(iref=%0) -> fv2, Insn(iref=%12) -> v14
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [fv37]
// [Asm] live_set: [fv37]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [fv4]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: []
// [Asm] live_set: [fv4]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv4]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv5]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv6]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [fv6]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [fv6, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [fv30]
// [Asm] live_set: [fv6, fv30]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v24, fv7]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [fv25]
// [Asm] live_set: [fv25, fv7]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [v26]
// [Asm] live_set: [fv25, v26, fv7]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [fv27]
// [Asm] live_set: [fv27, fv25, fv7]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v21, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv7]
// [Asm] move_origin: []
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv10]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [v18]
// [Asm] live_set: [fv10, v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [fv10, fv11]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv12]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main1l0_0"];
// [Asm]   r0 [label="v36 ← a0", color=green];
// [Asm]   r20 [label="v14 ← a0", color=green];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="t0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v29 ← a0", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v24 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v26 ← a0", color=green];
// [Asm]   r18 [label="v18 ← a0", color=green];
// [Asm]   r19 [label="v13 ← a0", color=green];
// [Asm]   r17 [label="v21 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r6;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r8;
// [Asm]   r1 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v36-> 1:t0-> 6:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v29-> 15:v24-> 16:v26-> 17:v21-> 18:v18-> 19:v13-> 20:v14"
// [Asm]   comment = "v36<-a0;v14<-a0;v29<-a0;v24<-a0;v26<-a0;v18<-a0;v13<-a0;v21<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main1l0_0"];
// [Asm]   r0 [label="fv37 ← fa0", color=green];
// [Asm]   r33 [label="fv11 ← fa1", color=green];
// [Asm]   r9 [label="ft4", color=blue];
// [Asm]   r26 [label="fv7 ← fa0", color=green];
// [Asm]   r6 [label="ft1", color=blue];
// [Asm]   r13 [label="ft8", color=blue];
// [Asm]   r4 [label="fa0", color=blue];
// [Asm]   r29 [label="fv8 ← fa1", color=green];
// [Asm]   r7 [label="ft2", color=blue];
// [Asm]   r10 [label="ft5", color=blue];
// [Asm]   r8 [label="ft3", color=blue];
// [Asm]   r5 [label="ft0", color=blue];
// [Asm]   r32 [label="fv10 ← fa0", color=green];
// [Asm]   r15 [label="ft10", color=blue];
// [Asm]   r24 [label="fv6 ← fa0", color=green];
// [Asm]   r31 [label="fv9 ← fa1", color=green];
// [Asm]   r17 [label="fa2", color=blue];
// [Asm]   r12 [label="ft7", color=blue];
// [Asm]   r20 [label="fa5", color=blue];
// [Asm]   r23 [label="fv5 ← fa0", color=green];
// [Asm]   r3 [label="fv4 ← fa0", color=green];
// [Asm]   r27 [label="fv25 ← fa1", color=green];
// [Asm]   r1 [label="fv2 ← fa0", color=green];
// [Asm]   r28 [label="fv27 ← fa2", color=green];
// [Asm]   r11 [label="ft6", color=blue];
// [Asm]   r34 [label="fv12 ← fa0", color=green];
// [Asm]   r22 [label="fa7", color=blue];
// [Asm]   r14 [label="ft9", color=blue];
// [Asm]   r30 [label="fv22 ← fa2", color=green];
// [Asm]   r25 [label="fv30 ← fa1", color=green];
// [Asm]   r2 [label="fv3 ← fa0", color=green];
// [Asm]   r16 [label="fa1", color=blue];
// [Asm]   r18 [label="fa3", color=blue];
// [Asm]   r19 [label="fa4", color=blue];
// [Asm]   r21 [label="fa6", color=blue];
// [Asm]   r26 -- r28;
// [Asm]   r4 -- r13;
// [Asm]   r26 -- r27;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r32 -- r33;
// [Asm]   r26 -- r30;
// [Asm]   r29 -- r30;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r8;
// [Asm]   r27 -- r28;
// [Asm]   r26 -- r29;
// [Asm]   r4 -- r18;
// [Asm]   r4 -- r17;
// [Asm]   r4 -- r22;
// [Asm]   r26 -- r31;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r4 -- r21;
// [Asm]   comment = "0:fv37-> 1:fv2-> 2:fv3-> 3:fv4-> 4:fa0-> 5:ft0-> 6:ft1-> 7:ft2-> 8:ft3-> 9:ft4-> 10:ft5-> 11:ft6-> 12:ft7-> 13:ft8-> 14:ft9-> 15:ft10-> 16:fa1-> 17:fa2-> 18:fa3-> 19:fa4-> 20:fa5-> 21:fa6-> 22:fa7-> 23:fv5-> 24:fv6-> 25:fv30-> 26:fv7-> 27:fv25-> 28:fv27-> 29:fv8-> 30:fv22-> 31:fv9-> 32:fv10-> 33:fv11-> 34:fv12"
// [Asm]   comment = "fv37<-fa0;fv11<-fa1;fv7<-fa0;fv8<-fa1;fv10<-fa0;fv6<-fa0;fv9<-fa1;fv5<-fa0;fv4<-fa0;fv25<-fa1;fv2<-fa0;fv27<-fa2;fv12<-fa0;fv22<-fa2;fv30<-fa1;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v36, 4623113902481840538 ->   li a0, 4623113902481840538
// [Asm] subst   fmv.d.x fv37, v36 ->   fmv.d.x fa0, a0
// [Asm] subst   fneg.d fv2, fv37 ->   fneg.d fa0, fa0
// [Asm] subst   fabs.d fv3, fv2 ->   fabs.d fa0, fa0
// [Asm] subst   fsqrt.d fv4, fv3 ->   fsqrt.d fa0, fa0
// [Asm] subst   call minimbt_cos ->   call minimbt_cos
// [Asm] subst   call minimbt_sin ->   call minimbt_sin
// [Asm] subst   li v29, 4616752568008179712 ->   li a0, 4616752568008179712
// [Asm] subst   fmv.d.x fv30, v29 ->   fmv.d.x fa1, a0
// [Asm] subst   fadd.d fv7, fv6, fv30 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   li v24, 4619229547803233485 ->   li a0, 4619229547803233485
// [Asm] subst   fmv.d.x fv25, v24 ->   fmv.d.x fa1, a0
// [Asm] subst   li v26, 4621199872640208077 ->   li a0, 4621199872640208077
// [Asm] subst   fmv.d.x fv27, v26 ->   fmv.d.x fa2, a0
// [Asm] subst   fmul.d fv8, fv25, fv27 ->   fmul.d fa1, fa1, fa2
// [Asm] subst   li v21, 4608238818662014491 ->   li a0, 4608238818662014491
// [Asm] subst   fmv.d.x fv22, v21 ->   fmv.d.x fa2, a0
// [Asm] subst   fdiv.d fv9, fv8, fv22 ->   fdiv.d fa1, fa1, fa2
// [Asm] subst   fsub.d fv10, fv7, fv9 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   li v18, 1000000 ->   li a0, 1000000
// [Asm] subst   fcvt.d.w fv11, v18 ->   fcvt.d.w fa1, a0
// [Asm] subst   fmul.d fv12, fv10, fv11 ->   fmul.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v13, fv12, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_2"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main1l0_0 ->   call main1l0_0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main1l0_0:
// [Asm] # block info: defs: [fv30, fv12, a1, fa1, fv2, fa2, ft6, fv25, a4, fa6, a6, ft5, ft10, fv27, fv3, fv37, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, fv11, ft3, t2, fv7, t1, fv10, v14, v26, v13, ft0, ft1, fv5, fv22, v29, ft7, v21, a5, a0, fv8, v36, a2, fv4, v24, fv6, ft8, t3, fv9, t0, fa5, v18, fa0, t4], uses: [fv10, v14, v26, v13, fv30, fv12, fv5, fv22, fv2, v29, fv25, fv27, fv3, fv37, v21, a0, fv8, v36, fv4, v24, fv6, fv9, v18, fv11, fa0, fv7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main1l0_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   li v36, 4623113902481840538  # live: [v36]
// [Asm]   fmv.d.x fv37, v36  # live: [fv37]
// [Asm]   fneg.d fv2, fv37  # live: [fv2]
// [Asm]   fabs.d fv3, fv2  # live: [fv3]
// [Asm]   fsqrt.d fv4, fv3  # live: [fv4]
// [Asm]   # save_ctx2  # live: [fv4]
// [Asm]   fmv.d fa0, fv4  # live: [fa0]
// [Asm]   call minimbt_cos  # live: [fa0]
// [Asm]   fmv.d fv5, fa0  # live: [fv5]
// [Asm]   # restore_ctx2  # live: [fv5]
// [Asm]   # save_ctx2  # live: [fv5]
// [Asm]   fmv.d fa0, fv5  # live: [fa0]
// [Asm]   call minimbt_sin  # live: [fa0]
// [Asm]   fmv.d fv6, fa0  # live: [fv6]
// [Asm]   # restore_ctx2  # live: [fv6]
// [Asm]   li v29, 4616752568008179712  # live: [fv6, v29]
// [Asm]   fmv.d.x fv30, v29  # live: [fv6, fv30]
// [Asm]   fadd.d fv7, fv6, fv30  # live: [fv7]
// [Asm]   li v24, 4619229547803233485  # live: [v24, fv7]
// [Asm]   fmv.d.x fv25, v24  # live: [fv25, fv7]
// [Asm]   li v26, 4621199872640208077  # live: [fv25, v26, fv7]
// [Asm]   fmv.d.x fv27, v26  # live: [fv27, fv25, fv7]
// [Asm]   fmul.d fv8, fv25, fv27  # live: [fv7, fv8]
// [Asm]   li v21, 4608238818662014491  # live: [v21, fv7, fv8]
// [Asm]   fmv.d.x fv22, v21  # live: [fv22, fv7, fv8]
// [Asm]   fdiv.d fv9, fv8, fv22  # live: [fv9, fv7]
// [Asm]   fsub.d fv10, fv7, fv9  # live: [fv10]
// [Asm]   li v18, 1000000  # live: [fv10, v18]
// [Asm]   fcvt.d.w fv11, v18  # live: [fv10, fv11]
// [Asm]   fmul.d fv12, fv10, fv11  # live: [fv12]
// [Asm]   fcvt.w.d v13, fv12, rtz  # live: [v13]
// [Asm]   # save_ctx2  # live: [v13]
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v14, a0  # live: [v14]
// [Asm]   # restore_ctx2  # live: [v14]
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_2  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_2:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main1l0_0  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double))
// [Knf] build_knf: App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])])
// [Knf] build_knf: App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])
// [Knf] build_knf: App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])
// [Knf] build_knf: App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])
// [Knf] build_knf: Neg(Double(12.3), kind=Some(Double))
// [Knf] build_knf: Double(12.3)
// [Knf] build_knf: Double(4.5)
// [Knf] build_knf: Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double))
// [Knf] build_knf: Double(6.7)
// [Knf] build_knf: Double(8.9)
// [Knf] build_knf: Double(1.23456789)
// [Knf] build_knf: App(Var("float_of_int"), [Int(1000000)])
// [Knf] build_knf: Int(1000000)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main1l0_0
// [Main]   .type main1l0_0, @function
// [Main] # leaf false
// [Main] main1l0_0:
// [Main] .main1l0_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4623113902481840538
// [Main]   fmv.d.x fa0, a0
// [Main]   fneg.d fa0, fa0
// [Main]   fabs.d fa0, fa0
// [Main]   fsqrt.d fa0, fa0
// [Main]   call minimbt_cos
// [Main]   call minimbt_sin
// [Main]   li a0, 4616752568008179712
// [Main]   fmv.d.x fa1, a0
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   li a0, 4619229547803233485
// [Main]   fmv.d.x fa1, a0
// [Main]   li a0, 4621199872640208077
// [Main]   fmv.d.x fa2, a0
// [Main]   fmul.d fa1, fa1, fa2
// [Main]   li a0, 4608238818662014491
// [Main]   fmv.d.x fa2, a0
// [Main]   fdiv.d fa1, fa1, fa2
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   li a0, 1000000
// [Main]   fcvt.d.w fa1, a0
// [Main]   fmul.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_2
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_2
// [Main]   .type T$start_2, @function
// [Main] # leaf false
// [Main] T$start_2:
// [Main] .T$start_2_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main1l0_0
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main1l0_0
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Double(val=12.3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Abs, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Sqrt, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Double, ext_f="minimbt_cos", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn ExtCall(ty=Double, ext_f="minimbt_sin", args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%4), Double(val=4.5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=6.7), Double(val=8.9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%6), Double(val=1.23456789)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%5), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[Int32(val=1000000)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Return(args=[Insn(iref=%12)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main1l0_0 to wasm
// [Wasm] Lowering function T$start_2
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_2 to wasm
// [KnfOpt] freq: {main1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
