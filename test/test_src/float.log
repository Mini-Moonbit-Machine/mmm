// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv5, Insn(iref=%7) -> fv9, Self(fref=f0) -> v0, Insn(iref=%2) -> fv4, Insn(iref=%9) -> v11, Insn(iref=%8) -> v10, Insn(iref=%1) -> fv3, Insn(iref=%6) -> fv8, Insn(iref=%5) -> fv7, Insn(iref=%0) -> fv2, Insn(iref=%4) -> fv6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] defined: v26 is X
// [Asm] defs: [fv27]
// [Asm] live_set: [fv27]
// [Asm] defined: fv27 is F
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] defined: fv3 is F
// [Asm] defs: []
// [Asm] live_set: [fv3]
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move: fa0 <- fv3
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [fv4]
// [Asm] move: fv4 <- fa0
// [Asm] defined: fv4 is F
// [Asm] defs: []
// [Asm] live_set: [fv4]
// [Asm] defs: []
// [Asm] live_set: [fv4]
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move: fa0 <- fv4
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5]
// [Asm] move: fv5 <- fa0
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5]
// [Asm] defs: [v20]
// [Asm] live_set: [fv5, v20]
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [fv5, fv21]
// [Asm] defined: fv21 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv6]
// [Asm] defined: fv6 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v17, fv6]
// [Asm] defined: v17 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [fv6, fv18]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7]
// [Asm] defined: fv7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15, fv7]
// [Asm] defined: v15 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv7, fv8]
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9]
// [Asm] defined: fv9 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v11
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.20") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.20") clobbered_f: @hashset.of([fa1, fa0])
// [Asm] subst   li v26, -4600258134372935270 ->   li a0, -4600258134372935270
// [Asm] subst   fmv.d.x fv27, v26 ->   fmv.d.x fa0, a0
// [Asm] subst   fabs.d fv2, fv27 ->   fabs.d fa0, fa0
// [Asm] subst   fsqrt.d fv3, fv2 ->   fsqrt.d fa0, fa0
// [Asm] subst   call minimbt_cos ->   call minimbt_cos
// [Asm] subst   call minimbt_sin ->   call minimbt_sin
// [Asm] subst   li v20, 4616752568008179712 ->   li a0, 4616752568008179712
// [Asm] subst   fmv.d.x fv21, v20 ->   fmv.d.x fa1, a0
// [Asm] subst   fadd.d fv6, fv5, fv21 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   li v17, 4631994480280166975 ->   li a0, 4631994480280166975
// [Asm] subst   fmv.d.x fv18, v17 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv7, fv6, fv18 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   li v15, 1000000 ->   li a0, 1000000
// [Asm] subst   fcvt.d.w fv8, v15 ->   fcvt.d.w fa1, a0
// [Asm] subst   fmul.d fv9, fv7, fv8 ->   fmul.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v10, fv9, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main.20:
// [Asm] # block info: defs: [t1, v26, ft0, ft1, a1, fa1, fv5, fv2, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, fv27, fv3, fv21, ft7, v11, ft4, ft9, v10, a5, fa4, a0, fv8, ft2, a2, v17, fv4, a3, fv6, ft8, t3, a7, fa7, fv9, t0, fa5, fa3, ft3, fa0, t4, t2, v15, fv18, fv7], uses: [v11, v10, v26, a0, fv8, fv4, v17, fv6, fv5, fv9, fv2, v20, fa0, fv27, v15, fv18, fv3, fv21, fv7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.20_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   li v26, -4600258134372935270  # live: [v26]
// [Asm]   fmv.d.x fv27, v26  # live: [fv27]
// [Asm]   fabs.d fv2, fv27  # live: [fv2]
// [Asm]   fsqrt.d fv3, fv2  # live: [fv3]
// [Asm]   # save_ctx2  # live: [fv3]
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   call minimbt_cos  # live: [fa0]
// [Asm]   fmv.d fv4, fa0  # live: [fv4]
// [Asm]   # restore_ctx2  # live: [fv4]
// [Asm]   # save_ctx2  # live: [fv4]
// [Asm]   fmv.d fa0, fv4  # live: [fa0]
// [Asm]   call minimbt_sin  # live: [fa0]
// [Asm]   fmv.d fv5, fa0  # live: [fv5]
// [Asm]   # restore_ctx2  # live: [fv5]
// [Asm]   li v20, 4616752568008179712  # live: [fv5, v20]
// [Asm]   fmv.d.x fv21, v20  # live: [fv5, fv21]
// [Asm]   fadd.d fv6, fv5, fv21  # live: [fv6]
// [Asm]   li v17, 4631994480280166975  # live: [v17, fv6]
// [Asm]   fmv.d.x fv18, v17  # live: [fv6, fv18]
// [Asm]   fsub.d fv7, fv6, fv18  # live: [fv7]
// [Asm]   li v15, 1000000  # live: [v15, fv7]
// [Asm]   fcvt.d.w fv8, v15  # live: [fv7, fv8]
// [Asm]   fmul.d fv9, fv7, fv8  # live: [fv9]
// [Asm]   fcvt.w.d v10, fv9, rtz  # live: [v10]
// [Asm]   # save_ctx2  # live: [v10]
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.20  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double))
// [Knf] build_knf: App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])])
// [Knf] build_knf: App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])
// [Knf] build_knf: App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])
// [Knf] build_knf: App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])
// [Knf] build_knf: Neg(Double(12.3), kind=Some(Double))
// [Knf] build_knf: Double(12.3)
// [Knf] build_knf: Double(4.5)
// [Knf] build_knf: Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double))
// [Knf] build_knf: Double(6.7)
// [Knf] build_knf: Double(8.9)
// [Knf] build_knf: Double(1.23456789)
// [Knf] build_knf: App(Var("float_of_int"), [Int(1000000)])
// [Knf] build_knf: Int(1000000)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.20
// [Main]   .type main.20, @function
// [Main] # leaf false
// [Main] main.20:
// [Main] .main.20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, -4600258134372935270
// [Main]   fmv.d.x fa0, a0
// [Main]   fabs.d fa0, fa0
// [Main]   fsqrt.d fa0, fa0
// [Main]   call minimbt_cos
// [Main]   call minimbt_sin
// [Main]   li a0, 4616752568008179712
// [Main]   fmv.d.x fa1, a0
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   li a0, 4631994480280166975
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   li a0, 1000000
// [Main]   fcvt.d.w fa1, a0
// [Main]   fmul.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.20
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main.20
// [Wasm] Lowering insn Op(ty=Double, op=Abs, args=[Double(val=-12.3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Double, op=Sqrt, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Double, ext_f="minimbt_cos", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Double, ext_f="minimbt_sin", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%3), Double(val=4.5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%4), Double(val=48.30030043953274)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[Int32(val=1000000)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Return(args=[Insn(iref=%9)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.20 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.20 false true true false true
// [CoreOpt] allow_inline: false %0 main.20 false true true false true
// [CoreOpt] allow_inline: false %0 main.20 false true true false true
// [CoreOpt] allow_inline: false %0 main.20 false true true false true
// [CoreOpt] allow_inline: false %0 main.20 false true true false true
// [CoreOpt] allow_inline: false %0 main.20 false true true false true
