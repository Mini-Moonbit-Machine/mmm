// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double)), App(Var("float_of_int"), [Int(1000000)]), Mul, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double)), Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double)), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])]), Double(4.5), Add, kind=Some(Double))
// [Knf] build_knf: App(Var("sin"), [App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])])
// [Knf] build_knf: App(Var("cos"), [App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])])
// [Knf] build_knf: App(Var("sqrt"), [App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])])
// [Knf] build_knf: App(Var("abs_float"), [Neg(Double(12.3), kind=Some(Double))])
// [Knf] build_knf: Neg(Double(12.3), kind=Some(Double))
// [Knf] build_knf: Double(12.3)
// [Knf] build_knf: Double(4.5)
// [Knf] build_knf: Prim(Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double)), Double(1.23456789), Div, kind=Some(Double))
// [Knf] build_knf: Prim(Double(6.7), Double(8.9), Mul, kind=Some(Double))
// [Knf] build_knf: Double(6.7)
// [Knf] build_knf: Double(8.9)
// [Knf] build_knf: Double(1.23456789)
// [Knf] build_knf: App(Var("float_of_int"), [Int(1000000)])
// [Knf] build_knf: Int(1000000)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function main1(k) {
// [Main]     const _2 = 12.3;
// [Main]     const _3 = -_2;
// [Main]     const _4 = minimbt_abs_float($force(_3));
// [Main]     const _5 = minimbt_sqrt($force(_4));
// [Main]     const _6 = minimbt_cos($force(_5));
// [Main]     const _7 = minimbt_sin($force(_6));
// [Main]     const _8 = 4.5;
// [Main]     const _9 = _7 + _8;
// [Main]     const _10 = 6.7;
// [Main]     const _11 = 8.9;
// [Main]     const _12 = _10 * _11;
// [Main]     const _13 = 1.23456789;
// [Main]     const _14 = _12 / _13;
// [Main]     const _15 = _9 - _14;
// [Main]     const _16 = 1000000;
// [Main]     const _17 = minimbt_float_of_int($force(_16));
// [Main]     const _18 = _15 * _17;
// [Main]     const _19 = minimbt_int_of_float($force(_18));
// [Main]     return k(minimbt_print_int($force(_19)))
// [Main]   }
// [Main]   return $thunk(() => main1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
