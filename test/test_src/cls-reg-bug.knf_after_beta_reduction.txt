let rec h.1: Int = (p.2: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])) {
  let (v1.3: Var({val: Some(Int)}), v2.4: Var({val: Some(Int)}), v3.5: Var({val: Some(Int)}), v4.6: Var({val: Some(Int)}), v5.7: Var({val: Some(Int)}), v6.8: Var({val: Some(Int)}), v7.9: Var({val: Some(Int)}), v8.10: Var({val: Some(Int)}), v9.11: Var({val: Some(Int)}), v10.12: Var({val: Some(Int)})) = p.2
  let _26: Int = Int(1)
  let join g.54: Int = (z.55: Int) {
    let _56: Int = Add(v1.3, v2.4)
    let _57: Int = Add(_56, v3.5)
    let _58: Int = Add(_57, v4.6)
    let _59: Int = Add(_58, v5.7)
    let _60: Int = Add(_59, v6.8)
    let _61: Int = Add(_60, v7.9)
    let _62: Int = Add(_61, v8.10)
    let _63: Int = Add(_62, v9.11)
    let r.64: Int = Add(_63, v10.12)
    let _65: Int = Int(0)
    if (z.55 <= _65) then {
      let _66: Int = Neg(z.55)
      Jump(g.54, [_66, ])
    } else {
      Var(r.64)
    }
  }
  Jump(g.54, [_26, ])
}
let rec main.27: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let _39: Int = Apply(h.1, [_38, ])
  let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
  Unit
}
Apply(main.27, [])let rec h.1: Int = (p.2: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])) {
  let (v1.3: Var({val: Some(Int)}), v2.4: Var({val: Some(Int)}), v3.5: Var({val: Some(Int)}), v4.6: Var({val: Some(Int)}), v5.7: Var({val: Some(Int)}), v6.8: Var({val: Some(Int)}), v7.9: Var({val: Some(Int)}), v8.10: Var({val: Some(Int)}), v9.11: Var({val: Some(Int)}), v10.12: Var({val: Some(Int)})) = p.2
  let _26: Int = Int(1)
  let join g.54: Int = (z.55: Int) {
    let _56: Int = Add(v1.3, v2.4)
    let _57: Int = Add(_56, v3.5)
    let _58: Int = Add(_57, v4.6)
    let _59: Int = Add(_58, v5.7)
    let _60: Int = Add(_59, v6.8)
    let _61: Int = Add(_60, v7.9)
    let _62: Int = Add(_61, v8.10)
    let _63: Int = Add(_62, v9.11)
    let r.64: Int = Add(_63, v10.12)
    let _65: Int = Int(0)
    if (z.55 <= _65) then {
      let _66: Int = Neg(z.55)
      Jump(g.54, [_66, ])
    } else {
      Var(r.64)
    }
  }
  Jump(g.54, [_26, ])
}
let rec main.27: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let _39: Int = Apply(h.1, [_38, ])
  let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
  Unit
}
Apply(main.27, [])