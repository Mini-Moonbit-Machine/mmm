let rec main39: Var({val: Some(Unit)}) = () {
  let _40: Int = Int(1)
  let _41: Int = Int(2)
  let _42: Int = Int(3)
  let _43: Int = Int(4)
  let _44: Int = Int(5)
  let _45: Int = Int(6)
  let _46: Int = Int(7)
  let _47: Int = Int(8)
  let _48: Int = Int(9)
  let _49: Int = Int(10)
  let _50: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_40, _41, _42, _43, _44, _45, _46, _47, _48, _49, ])
  let (v14.75: Var({val: Some(Int)}), v26.76: Var({val: Some(Int)}), v38.77: Var({val: Some(Int)}), v410.78: Var({val: Some(Int)}), v512.79: Var({val: Some(Int)}), v614.80: Var({val: Some(Int)}), v716.81: Var({val: Some(Int)}), v818.82: Var({val: Some(Int)}), v920.83: Var({val: Some(Int)}), v1022.84: Var({val: Some(Int)})) = _50
  let rec g24.85: Int = (z25.86: Int) {
    let _87: Int = Add(v14.75, v26.76)
    let _88: Int = Add(_87, v38.77)
    let _89: Int = Add(_88, v410.78)
    let _90: Int = Add(_89, v512.79)
    let _91: Int = Add(_90, v614.80)
    let _92: Int = Add(_91, v716.81)
    let _93: Int = Add(_92, v818.82)
    let _94: Int = Add(_93, v920.83)
    let r.95: Int = Add(_94, v1022.84)
    let _96: Int = Int(0)
    if (z25.86 <= _96) then {
      let _97: Int = Neg(z25.86)
      Apply(g24.85, [_97, ])
    } else {
      Var(r.95)
    }
  }
  let _98: Int = Int(1)
  let _51: Int = Apply(g24.85, [_98, ])
  let t1.52: Unit = ExtApply(minimbt_print_int, [_51, ])
  Unit
}
Apply(main39, [])