let rec main.41: Var({val: Some(Unit)}) = () {
  let _42: Int = Int(0)
  let _43: Double = Double(0)
  let dummy.44: Array(Double) = ExtApply(minimbt_create_float_array, [_42, _43, ])
  let rec gen_arr.45: Array(Array(Double)) = (m.46: Int, n.47: Int) {
    let mat.48: Array(Var({val: Some(Array(Double))})) = ExtApply(minimbt_create_ptr_array, [m.46, dummy.44, ])
    let rec init_arr.49: Unit = (i.50: Int) {
      let _51: Int = Int(0)
      if (_51 <= i.50) then {
        let _52: Double = Double(0)
        let _53: Array(Double) = ExtApply(minimbt_create_float_array, [n.47, _52, ])
        let _54: Unit = Put mat.48[i.50] = _53
        let _55: Int = Int(1)
        let _56: Int = Sub(i.50, _55)
        Apply(init_arr.49, [_56, ])
      } else {
        Unit
      }
    }
    let _57: Int = Int(1)
    let _58: Int = Sub(m.46, _57)
    let _59: Unit = Apply(init_arr.49, [_58, ])
    Var(mat.48)
  }
  let _60: Int = Int(2)
  let _61: Int = Int(3)
  let a.62: Array(Array(Double)) = Apply(gen_arr.45, [_60, _61, ])
  let _63: Int = Int(3)
  let _64: Int = Int(2)
  let b.65: Array(Array(Double)) = Apply(gen_arr.45, [_63, _64, ])
  let _66: Int = Int(2)
  let _67: Int = Int(2)
  let c.68: Array(Array(Double)) = Apply(gen_arr.45, [_66, _67, ])
  let _69: Int = Int(0)
  let _70: Array(Double) = Get a.62[_69]
  let _71: Int = Int(0)
  let _72: Double = Double(1)
  let _73: Unit = Put _70[_71] = _72
  let _74: Int = Int(0)
  let _75: Array(Double) = Get a.62[_74]
  let _76: Int = Int(1)
  let _77: Double = Double(2)
  let _78: Unit = Put _75[_76] = _77
  let _79: Int = Int(0)
  let _80: Array(Double) = Get a.62[_79]
  let _81: Int = Int(2)
  let _82: Double = Double(3)
  let _83: Unit = Put _80[_81] = _82
  let _84: Int = Int(1)
  let _85: Array(Double) = Get a.62[_84]
  let _86: Int = Int(0)
  let _87: Double = Double(4)
  let _88: Unit = Put _85[_86] = _87
  let _89: Int = Int(1)
  let _90: Array(Double) = Get a.62[_89]
  let _91: Int = Int(1)
  let _92: Double = Double(5)
  let _93: Unit = Put _90[_91] = _92
  let _94: Int = Int(1)
  let _95: Array(Double) = Get a.62[_94]
  let _96: Int = Int(2)
  let _97: Double = Double(6)
  let _98: Unit = Put _95[_96] = _97
  let _99: Int = Int(0)
  let _100: Array(Double) = Get b.65[_99]
  let _101: Int = Int(0)
  let _102: Double = Double(7)
  let _103: Unit = Put _100[_101] = _102
  let _104: Int = Int(0)
  let _105: Array(Double) = Get b.65[_104]
  let _106: Int = Int(1)
  let _107: Double = Double(8)
  let _108: Unit = Put _105[_106] = _107
  let _109: Int = Int(1)
  let _110: Array(Double) = Get b.65[_109]
  let _111: Int = Int(0)
  let _112: Double = Double(9)
  let _113: Unit = Put _110[_111] = _112
  let _114: Int = Int(1)
  let _115: Array(Double) = Get b.65[_114]
  let _116: Int = Int(1)
  let _117: Double = Double(10)
  let _118: Unit = Put _115[_116] = _117
  let _119: Int = Int(2)
  let _120: Array(Double) = Get b.65[_119]
  let _121: Int = Int(0)
  let _122: Double = Double(11)
  let _123: Unit = Put _120[_121] = _122
  let _124: Int = Int(2)
  let _125: Array(Double) = Get b.65[_124]
  let _126: Int = Int(1)
  let _127: Double = Double(12)
  let _128: Unit = Put _125[_126] = _127
  let _129: Int = Int(2)
  let _130: Int = Int(3)
  let _131: Int = Int(2)
  let _132: Unit = 
    let rec loop1.160: Unit = (i.161: Int) {
      let _162: Int = Int(0)
      if (_162 <= i.161) then {
        let rec loop2.163: Unit = (j.164: Int) {
          let _165: Int = Int(0)
          if (_165 <= j.164) then {
            let rec loop3.166: Unit = (k.167: Int) {
              let _168: Int = Int(0)
              if (_168 <= k.167) then {
                let _169: Array(Double) = Get c.68[i.161]
                let _170: Array(Double) = Get c.68[i.161]
                let _171: Double = Get _170[j.164]
                let _172: Array(Double) = Get a.62[i.161]
                let _173: Double = Get _172[k.167]
                let _174: Array(Double) = Get b.65[k.167]
                let _175: Double = Get _174[j.164]
                let _176: Double = FMul(_173, _175)
                let _177: Double = FAdd(_171, _176)
                let _178: Unit = Put _169[j.164] = _177
                let _179: Int = Int(1)
                let _180: Int = Sub(k.167, _179)
                Apply(loop3.166, [_180, ])
              } else {
                Unit
              }
            }
            let _181: Int = Int(1)
            let _182: Int = Sub(_130, _181)
            let _183: Unit = Apply(loop3.166, [_182, ])
            let _184: Int = Int(1)
            let _185: Int = Sub(j.164, _184)
            Apply(loop2.163, [_185, ])
          } else {
            Unit
          }
        }
        let _186: Int = Int(1)
        let _187: Int = Sub(_131, _186)
        let _188: Unit = Apply(loop2.163, [_187, ])
        let _189: Int = Int(1)
        let _190: Int = Sub(i.161, _189)
        Apply(loop1.160, [_190, ])
      } else {
        Unit
      }
    }
    let _191: Int = Int(1)
    let _192: Int = Sub(_129, _191)
    Apply(loop1.160, [_192, ])
  let _133: Int = Int(0)
  let _134: Array(Double) = Get c.68[_133]
  let _135: Int = Int(0)
  let _136: Double = Get _134[_135]
  let _137: Int = ExtApply(minimbt_truncate, [_136, ])
  let _138: Unit = ExtApply(minimbt_print_int, [_137, ])
  let _139: Unit = ExtApply(minimbt_print_endline, [])
  let _140: Int = Int(0)
  let _141: Array(Double) = Get c.68[_140]
  let _142: Int = Int(1)
  let _143: Double = Get _141[_142]
  let _144: Int = ExtApply(minimbt_truncate, [_143, ])
  let _145: Unit = ExtApply(minimbt_print_int, [_144, ])
  let _146: Unit = ExtApply(minimbt_print_endline, [])
  let _147: Int = Int(1)
  let _148: Array(Double) = Get c.68[_147]
  let _149: Int = Int(0)
  let _150: Double = Get _148[_149]
  let _151: Int = ExtApply(minimbt_truncate, [_150, ])
  let _152: Unit = ExtApply(minimbt_print_int, [_151, ])
  let _153: Unit = ExtApply(minimbt_print_endline, [])
  let _154: Int = Int(1)
  let _155: Array(Double) = Get c.68[_154]
  let _156: Int = Int(1)
  let _157: Double = Get _155[_156]
  let _158: Int = ExtApply(minimbt_truncate, [_157, ])
  let _159: Unit = ExtApply(minimbt_print_int, [_158, ])
  Unit
}
Apply(main.41, [])