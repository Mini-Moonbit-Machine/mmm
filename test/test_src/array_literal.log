// [Knf] matcher_run: init mat
// [Knf] {arity: 1, occurs: {occurs: [/\]}, rows: [{binds: @immut/hashmap.of([]), patterns: [CtorApp("None", [])], action: App(Var("print_string"), targs=Some([]), [String("None")])}, {binds: @immut/hashmap.of([]), patterns: [CtorApp("Some", [Var("i")])], action: Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String("Some(")]), Let(("_", Unit), App(Var("print_int"), targs=Some([]), [Var("i")]), Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String(")")]), Unit)))}]}
// [Knf] specialize_matrix: by subpat ctor(None, 0), at col 0:
// [Knf] {arity: 0, occurs: {occurs: []}, rows: [{binds: @immut/hashmap.of([]), patterns: [], action: App(Var("print_string"), targs=Some([]), [String("None")])}]}
// [Knf] specialize_matrix: by subpat ctor(Some, 1), at col 0:
// [Knf] {arity: 1, occurs: {occurs: [/\.0]}, rows: [{binds: @immut/hashmap.of([]), patterns: [Var("i")], action: Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String("Some(")]), Let(("_", Unit), App(Var("print_int"), targs=Some([]), [Var("i")]), Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String(")")]), Unit)))}]}
// [Knf] default_matrix:
// [Knf] {arity: 0, occurs: {occurs: []}, rows: []}
// [Knf] matcher_run: final tree
// [Knf] Switch(/\, 
// [Knf]   [(ctor(None, 0), Succeed({}, App(Var("print_string"), targs=Some([]), [String("None")]))),
// [Knf]   (ctor(Some, 1), Succeed({/\.0 -> i, }, Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String("Some(")]), Let(("_", Unit), App(Var("print_int"), targs=Some([]), [Var("i")]), Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String(")")]), Unit))))),
// [Knf]   
// [Knf] ])
// [Knf] decision_tree_to_knf: Switch(/\, 
// [Knf]   [(ctor(None, 0), Succeed({}, App(Var("print_string"), targs=Some([]), [String("None")]))),
// [Knf]   (ctor(Some, 1), Succeed({/\.0 -> i, }, Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String("Some(")]), Let(("_", Unit), App(Var("print_int"), targs=Some([]), [Var("i")]), Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String(")")]), Unit))))),
// [Knf]   
// [Knf] ])
// [Knf] decision_tree_to_knf: Succeed({}, App(Var("print_string"), targs=Some([]), [String("None")]))
// [Knf] decision_tree_to_knf: Succeed({/\.0 -> i, }, Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String("Some(")]), Let(("_", Unit), App(Var("print_int"), targs=Some([]), [Var("i")]), Let(("_", Unit), App(Var("print_string"), targs=Some([]), [String(")")]), Unit))))
// [Main] function thunk_main(k) {
// [Main]   function aux_1(x_3, k) {
// [Main]     const _4 = 0;
// [Main]     const [_5, _6] = x_3;
// [Main]     function j0(_21) {
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]     if (_5 === _4) {
// [Main]       const [] = _6;
// [Main]       const _7 = "None";
// [Main]       return $thunk(() => $external(minimbt_print_string, function (x) {
// [Main]         return $thunk(() => j0(x))
// [Main]       }
// [Main]       , _7))
// [Main]     } else {
// [Main]       const _8 = 1;
// [Main]       const [_9, _10] = x_3;
// [Main]       if (_9 === _8) {
// [Main]         const [_11] = _10;
// [Main]         const _12 = "Some(";
// [Main]         return $thunk(() => $external(minimbt_print_string, function (_14) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (_16) {
// [Main]             const _17 = ")";
// [Main]             return $thunk(() => $external(minimbt_print_string, function (_19) {
// [Main]               return $thunk(() => j0(null))
// [Main]             }
// [Main]             , _17))
// [Main]           }
// [Main]           , _11))
// [Main]         }
// [Main]         , _12))
// [Main]       } else {
// [Main]         return $thunk(() => $external(minimbt_panic, function (x) {
// [Main]           return $thunk(() => j0(x))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   const D_Print_22 = [aux_1];
// [Main]   function println_24(dict_23, x_26, k) {
// [Main]     const [_27] = dict_23;
// [Main]     return $thunk(() => _27(x_26, function (_29) {
// [Main]       const _30 = "\n";
// [Main]       return $thunk(() => $external(minimbt_print_string, function (_32) {
// [Main]         return $thunk(() => k(null))
// [Main]       }
// [Main]       , _30))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_33(k) {
// [Main]     const _34 = 3;
// [Main]     const _35 = 0;
// [Main]     const _36 = [];
// [Main]     const _37 = [_35, _36];
// [Main]     return $thunk(() => $external(minimbt_create_ptr_array, function (_array_38) {
// [Main]       const _39 = 1;
// [Main]       const _40 = 1;
// [Main]       const _41 = 1;
// [Main]       const _42 = [_41];
// [Main]       const _43 = [_40, _42];
// [Main]       const _45 = _array_38[_39] = _43;
// [Main]       const _46 = 2;
// [Main]       const _47 = 1;
// [Main]       const _48 = 2;
// [Main]       const _49 = [_48];
// [Main]       const _50 = [_47, _49];
// [Main]       const _52 = _array_38[_46] = _50;
// [Main]       const _53 = 0;
// [Main]       const _54 = _array_38[_53];
// [Main]       return $thunk(() => println_24(D_Print_22, _54, function (_56) {
// [Main]         const _57 = 1;
// [Main]         const _58 = _array_38[_57];
// [Main]         return $thunk(() => println_24(D_Print_22, _58, function (_60) {
// [Main]           const _61 = 2;
// [Main]           const _62 = _array_38[_61];
// [Main]           return $thunk(() => println_24(D_Print_22, _62, function (_64) {
// [Main]             return $thunk(() => k(null))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     , _34, _37))
// [Main]   }
// [Main]   return $thunk(() => main_33(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] resolve: LetEnum("IntOpt", Enum IntOpt { None(), Some(Int) }, LetClass({tyvar: "T", name: "Print", methods: [("print", (T) -> Unit)]}, LetInstance({ty: IntOpt, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")))]}, LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit)))))
// [Typer] resolve: LetClass({tyvar: "T", name: "Print", methods: [("print", (T) -> Unit)]}, LetInstance({ty: IntOpt, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")))]}, LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit))))
// [Typer] resolve: LetInstance({ty: IntOpt, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")))]}, LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux"))
// [Typer] resolve: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)
// [Typer] resolve: Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}])
// [Typer] resolve: Var("x")
// [Typer] resolve: App(Var("print_string"), targs=None, [String("None")])
// [Typer] resolve: String("None")
// [Typer] resolve: Var("print_string")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))
// [Typer] resolve: App(Var("print_string"), targs=None, [String("Some(")])
// [Typer] resolve: String("Some(")
// [Typer] resolve: Var("print_string")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("i")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)
// [Typer] resolve: App(Var("print_string"), targs=None, [String(")")])
// [Typer] resolve: String(")")
// [Typer] resolve: Var("print_string")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit))
// [Typer] resolve: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))
// [Typer] resolve: App(Var("print"), targs=None, [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit)
// [Typer] resolve: App(Var("print_string"), targs=None, [String("\n")])
// [Typer] resolve: String("\n")
// [Typer] resolve: Var("print_string")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit)
// [Typer] resolve: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))
// [Typer] resolve: Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array"))))
// [Typer] resolve: Array(Int(3), CtorApp("None", []))
// [Typer] resolve: Int(3)
// [Typer] resolve: CtorApp("None", [])
// [Typer] resolve: Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))
// [Typer] resolve: Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)]))
// [Typer] resolve: Var("_array")
// [Typer] resolve: Int(1)
// [Typer] resolve: CtorApp("Some", [Int(1)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array"))
// [Typer] resolve: Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)]))
// [Typer] resolve: Var("_array")
// [Typer] resolve: Int(2)
// [Typer] resolve: CtorApp("Some", [Int(2)])
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("_array")
// [Typer] resolve: Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit)))
// [Typer] resolve: App(Var("println"), targs=None, [Get(Var("xs"), Int(0))])
// [Typer] resolve: Get(Var("xs"), Int(0))
// [Typer] resolve: Var("xs")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("println")
// [Typer] resolve: Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))
// [Typer] resolve: App(Var("println"), targs=None, [Get(Var("xs"), Int(1))])
// [Typer] resolve: Get(Var("xs"), Int(1))
// [Typer] resolve: Var("xs")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("println")
// [Typer] resolve: Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit)
// [Typer] resolve: App(Var("println"), targs=None, [Get(Var("xs"), Int(2))])
// [Typer] resolve: Get(Var("xs"), Int(2))
// [Typer] resolve: Var("xs")
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("println")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetEnum("IntOpt", Enum IntOpt { None(), Some(Int) }, LetClass({tyvar: "T", name: "Print", methods: [("print", (T) -> Unit)]}, LetInstance({ty: Enum IntOpt { None(), Some(Int) }, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")))]}, LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit))))) against Unit
// [Typer] check: LetClass({tyvar: "T", name: "Print", methods: [("print", (T) -> Unit)]}, LetInstance({ty: Enum IntOpt { None(), Some(Int) }, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")))]}, LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit)))) against Unit
// [Typer] check: LetInstance({ty: Enum IntOpt { None(), Some(Int) }, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")))]}, LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit))) against Unit
// [Typer] check: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)}, Var("aux")) against (Enum IntOpt { None(), Some(Int) }) -> Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}]), Unit)
// [Typer] infer: Match(Var("x"), [{pat: CtorApp("None", []), action: App(Var("print_string"), targs=None, [String("None")])}, {pat: CtorApp("Some", [Var("i")]), action: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))}])
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] inst: TypeScheme(([], () -> Enum IntOpt { None(), Some(Int) }))
// [Typer] inst result: () -> Enum IntOpt { None(), Some(Int) }
// [Typer] unify: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] union: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] infer: App(Var("print_string"), targs=None, [String("None")])
// [Typer] inst: TypeScheme(([], (String) -> Unit))
// [Typer] inst result: (String) -> Unit
// [Typer] check: String("None") against String
// [Typer] inst: TypeScheme(([], (Int) -> Enum IntOpt { None(), Some(Int) }))
// [Typer] inst result: (Int) -> Enum IntOpt { None(), Some(Int) }
// [Typer] unify: Enum IntOpt { None(), Some(Int) } and Enum IntOpt { None(), Some(Int) }
// [Typer] infer: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("Some(")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)))
// [Typer] infer: App(Var("print_string"), targs=None, [String("Some(")])
// [Typer] inst: TypeScheme(([], (String) -> Unit))
// [Typer] inst result: (String) -> Unit
// [Typer] check: String("Some(") against String
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("i")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit))
// [Typer] infer: App(Var("print_int"), targs=None, [Var("i")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String(")")]), Unit)
// [Typer] infer: App(Var("print_string"), targs=None, [String(")")])
// [Typer] inst: TypeScheme(([], (String) -> Unit))
// [Typer] inst result: (String) -> Unit
// [Typer] check: String(")") against String
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Var("aux") against (Enum IntOpt { None(), Some(Int) }) -> Unit
// [Typer] inst: TypeScheme(([], (Enum IntOpt { None(), Some(Int) }) -> Unit))
// [Typer] inst result: (Enum IntOpt { None(), Some(Int) }) -> Unit
// [Typer] unify: (Enum IntOpt { None(), Some(Int) }) -> Unit and (Enum IntOpt { None(), Some(Int) }) -> Unit
// [Typer] unify: Enum IntOpt { None(), Some(Int) } and Enum IntOpt { None(), Some(Int) }
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [("X", Some("Print"))], name: ("println", Unit), args: [("x", X)], body: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit)) against Unit
// [Typer] typevars: [("X", Some("Print"))]
// [Typer] unify: Var(None) and X
// [Typer] union: Var(None) and X
// [Typer] check: Let(("_", Var(None)), App(Var("print"), targs=None, [Var("x")]), Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit)) against Unit
// [Typer] infer: App(Var("print"), targs=None, [Var("x")])
// [Typer] inst: TypeScheme(([], (X) -> Unit))
// [Typer] inst result: (X) -> Unit
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], X))
// [Typer] inst result: X
// [Typer] unify: X and X
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_string"), targs=None, [String("\n")]), Unit) against Unit
// [Typer] infer: App(Var("print_string"), targs=None, [String("\n")])
// [Typer] inst: TypeScheme(([], (String) -> Unit))
// [Typer] inst result: (String) -> Unit
// [Typer] check: String("\n") against String
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("xs", Var(None)), Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))))
// [Typer] infer: Let(("_array", Var(None)), Array(Int(3), CtorApp("None", [])), Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array"))))
// [Typer] infer: Array(Int(3), CtorApp("None", []))
// [Typer] infer: CtorApp("None", [])
// [Typer] inst: TypeScheme(([], () -> Enum IntOpt { None(), Some(Int) }))
// [Typer] inst result: () -> Enum IntOpt { None(), Some(Int) }
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] union: Var(None) and Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] infer: Let(("_", Var(None)), Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)])), Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array")))
// [Typer] infer: Put(Var("_array"), Int(1), CtorApp("Some", [Int(1)]))
// [Typer] infer: CtorApp("Some", [Int(1)])
// [Typer] inst: TypeScheme(([], (Int) -> Enum IntOpt { None(), Some(Int) }))
// [Typer] inst result: (Int) -> Enum IntOpt { None(), Some(Int) }
// [Typer] check: Int(1) against Int
// [Typer] check: Var("_array") against Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] inst: TypeScheme(([], Array[Enum IntOpt { None(), Some(Int) }]))
// [Typer] inst result: Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] unify: Array[Enum IntOpt { None(), Some(Int) }] and Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] unify: Enum IntOpt { None(), Some(Int) } and Enum IntOpt { None(), Some(Int) }
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)])), Var("_array"))
// [Typer] infer: Put(Var("_array"), Int(2), CtorApp("Some", [Int(2)]))
// [Typer] infer: CtorApp("Some", [Int(2)])
// [Typer] inst: TypeScheme(([], (Int) -> Enum IntOpt { None(), Some(Int) }))
// [Typer] inst result: (Int) -> Enum IntOpt { None(), Some(Int) }
// [Typer] check: Int(2) against Int
// [Typer] check: Var("_array") against Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] inst: TypeScheme(([], Array[Enum IntOpt { None(), Some(Int) }]))
// [Typer] inst result: Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] unify: Array[Enum IntOpt { None(), Some(Int) }] and Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] unify: Enum IntOpt { None(), Some(Int) } and Enum IntOpt { None(), Some(Int) }
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Var("_array")
// [Typer] inst: TypeScheme(([], Array[Enum IntOpt { None(), Some(Int) }]))
// [Typer] inst result: Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] unify: Var(None) and Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] union: Var(None) and Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] infer: Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(0))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit)))
// [Typer] infer: App(Var("println"), targs=None, [Get(Var("xs"), Int(0))])
// [Typer] inst: TypeScheme((["X"], (X) -> Unit))
// [Typer] inst result: (Var(None)) -> Unit
// [Typer] infer: Get(Var("xs"), Int(0))
// [Typer] infer: Var("xs")
// [Typer] inst: TypeScheme(([], Array[Enum IntOpt { None(), Some(Int) }]))
// [Typer] inst result: Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] union: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(1))]), Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit))
// [Typer] infer: App(Var("println"), targs=None, [Get(Var("xs"), Int(1))])
// [Typer] inst: TypeScheme((["X"], (X) -> Unit))
// [Typer] inst result: (Var(None)) -> Unit
// [Typer] infer: Get(Var("xs"), Int(1))
// [Typer] infer: Var("xs")
// [Typer] inst: TypeScheme(([], Array[Enum IntOpt { None(), Some(Int) }]))
// [Typer] inst result: Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] union: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("println"), targs=None, [Get(Var("xs"), Int(2))]), Unit)
// [Typer] infer: App(Var("println"), targs=None, [Get(Var("xs"), Int(2))])
// [Typer] inst: TypeScheme((["X"], (X) -> Unit))
// [Typer] inst result: (Var(None)) -> Unit
// [Typer] infer: Get(Var("xs"), Int(2))
// [Typer] infer: Var("xs")
// [Typer] inst: TypeScheme(([], Array[Enum IntOpt { None(), Some(Int) }]))
// [Typer] inst result: Array[Enum IntOpt { None(), Some(Int) }]
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] union: Var(None) and Enum IntOpt { None(), Some(Int) }
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: ["extension"]
