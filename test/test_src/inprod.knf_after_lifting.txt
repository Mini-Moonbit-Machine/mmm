let rec getx.241: Double = (v.2: Tuple([Double, Double, Double])) {
  let (x.3: Var({val: Some(Double)}), _4: Var({val: Some(Double)}), _5: Var({val: Some(Double)})) = v.2
  Var(x.3)
}
let rec gety.242: Double = (v.7: Tuple([Double, Double, Double])) {
  let (_8: Var({val: Some(Double)}), y.9: Var({val: Some(Double)}), _10: Var({val: Some(Double)})) = v.7
  Var(y.9)
}
let rec getz.243: Double = (v.12: Tuple([Double, Double, Double])) {
  let (_13: Var({val: Some(Double)}), _14: Var({val: Some(Double)}), z.15: Var({val: Some(Double)})) = v.12
  Var(z.15)
}
let rec main.244: Var({val: Some(Unit)}) = () {
  let _30: Double = Double(1000000)
  let _31: Double = Double(1)
  let _32: Double = Double(2)
  let _33: Double = Double(3)
  let _34: Tuple([Double, Double, Double]) = Tuple([_31, _32, _33, ])
  let _35: Double = Double(4)
  let _36: Double = Double(5)
  let _37: Double = Double(6)
  let _38: Tuple([Double, Double, Double]) = Tuple([_35, _36, _37, ])
  let _231: Double = Apply(getx.241, [_34, ])
  let _232: Double = Apply(getx.241, [_38, ])
  let _233: Double = FMul(_231, _232)
  let _234: Double = Apply(gety.242, [_34, ])
  let _235: Double = Apply(gety.242, [_38, ])
  let _236: Double = FMul(_234, _235)
  let _237: Double = FAdd(_233, _236)
  let _238: Double = Apply(getz.243, [_34, ])
  let _239: Double = Apply(getz.243, [_38, ])
  let _240: Double = FMul(_238, _239)
  let _39: Double = FAdd(_237, _240)
  let _40: Double = FMul(_30, _39)
  let _41: Int = ExtApply(minimbt_truncate, [_40, ])
  ExtApply(minimbt_print_int, [_41, ])
}
Apply(main.244, [])