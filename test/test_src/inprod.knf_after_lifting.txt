let rec getx1l0: Double = (v2.3: Tuple([Double, Double, Double])) {
  let (x4.5: Var({val: Some(Double)}), _7: Var({val: Some(Double)}), _9: Var({val: Some(Double)})) = v2.3Var(x4.5)
}
let rec gety10l1: Double = (v11.12: Tuple([Double, Double, Double])) {
  let (_14: Var({val: Some(Double)}), y15.16: Var({val: Some(Double)}), _18: Var({val: Some(Double)})) = v11.12Var(y15.16)
}
let rec getz19l2: Double = (v20.21: Tuple([Double, Double, Double])) {
  let (_23: Var({val: Some(Double)}), _25: Var({val: Some(Double)}), z26.27: Var({val: Some(Double)})) = v20.21Var(z26.27)
}
let rec main43l3: Var({val: Some(Unit)}) = () {
  let _44: Double = Double(1000000)
  let _45: Double = Double(1)
  let _46: Double = Double(2)
  let _47: Double = Double(3)
  let _48: Tuple([Double, Double, Double]) = Tuple([_45, _46, _47, ])
  let _49: Double = Double(4)
  let _50: Double = Double(5)
  let _51: Double = Double(6)
  let _52: Tuple([Double, Double, Double]) = Tuple([_49, _50, _51, ])
  let _56: Double = Apply(getx1l0, [_48, ])
  let _57: Double = Apply(getx1l0, [_52, ])
  let _58: Double = FMul(_56, _57)
  let _59: Double = Apply(gety10l1, [_48, ])
  let _60: Double = Apply(gety10l1, [_52, ])
  let _61: Double = FMul(_59, _60)
  let _62: Double = FAdd(_58, _61)
  let _63: Double = Apply(getz19l2, [_48, ])
  let _64: Double = Apply(getz19l2, [_52, ])
  let _65: Double = FMul(_63, _64)
  let _53: Double = FAdd(_62, _65)
  let _54: Double = FMul(_44, _53)
  let _55: Int = ExtApply(minimbt_truncate, [_54, ])
  ExtApply(minimbt_print_int, [_55, ])
}
Apply(main43l3, [])