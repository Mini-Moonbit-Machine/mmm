let rec getx1l0: Double = (v2.3: Tuple([Double, Double, Double])) {
  let (, x4.5: Var({val: Some(Double)})_7: Var({val: Some(Double)})_9: Var({val: Some(Double)})) = v2.3Var(x4.5)
}
let rec gety10l1: Double = (v11.12: Tuple([Double, Double, Double])) {
  let (, _14: Var({val: Some(Double)})y15.16: Var({val: Some(Double)})_18: Var({val: Some(Double)})) = v11.12Var(y15.16)
}
let rec getz19l2: Double = (v20.21: Tuple([Double, Double, Double])) {
  let (, _23: Var({val: Some(Double)})_25: Var({val: Some(Double)})z26.27: Var({val: Some(Double)})) = v20.21Var(z26.27)
}
let rec inprod28: Double = (v129.30: Tuple([Double, Double, Double]), v231.32: Tuple([Double, Double, Double])) {
  let _33: Double = Apply(getx1l0, [v129.30, ])
  let _34: Double = Apply(getx1l0, [v231.32, ])
  let _35: Double = FMul(_33, _34)
  let _36: Double = Apply(gety10l1, [v129.30, ])
  let _37: Double = Apply(gety10l1, [v231.32, ])
  let _38: Double = FMul(_36, _37)
  let _39: Double = FAdd(_35, _38)
  let _40: Double = Apply(getz19l2, [v129.30, ])
  let _41: Double = Apply(getz19l2, [v231.32, ])
  let _42: Double = FMul(_40, _41)
  FAdd(_39, _42)
}
let rec main43l3: Var({val: Some(Unit)}) = () {
  let _44: Double = Double(1000000)
  let _45: Double = Double(1)
  let _46: Double = Double(2)
  let _47: Double = Double(3)
  let _48: Tuple([Double, Double, Double]) = Tuple([_45, _46, _47, ])
  let _49: Double = Double(4)
  let _50: Double = Double(5)
  let _51: Double = Double(6)
  let _52: Tuple([Double, Double, Double]) = Tuple([_49, _50, _51, ])
  let _53: Double = Apply(inprod28, [_48, _52, ])
  let _54: Double = FMul(_44, _53)
  let _55: Int = ExtApply(minimbt_truncate, [_54, ])
  ExtApply(minimbt_print_int, [_55, ])
}
Apply(main43l3, [])