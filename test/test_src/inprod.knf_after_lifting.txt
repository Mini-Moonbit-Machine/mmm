let rec main.430: Var({val: Some(Unit)}) = () {
  let _30: Double = Double(1000000)
  let _31: Double = Double(1)
  let _32: Double = Double(2)
  let _33: Double = Double(3)
  let _34: Tuple([Double, Double, Double]) = Tuple([_31, _32, _33, ])
  let _35: Double = Double(4)
  let _36: Double = Double(5)
  let _37: Double = Double(6)
  let _38: Tuple([Double, Double, Double]) = Tuple([_35, _36, _37, ])
  let (x.334: Var({val: Some(Double)}), _335: Var({val: Some(Double)}), _336: Var({val: Some(Double)})) = _34
  let (x.382: Var({val: Some(Double)}), _383: Var({val: Some(Double)}), _384: Var({val: Some(Double)})) = _38
  let _233: Double = FMul(x.334, x.382)
  let (_406: Var({val: Some(Double)}), y.407: Var({val: Some(Double)}), _408: Var({val: Some(Double)})) = _34
  let (_418: Var({val: Some(Double)}), y.419: Var({val: Some(Double)}), _420: Var({val: Some(Double)})) = _38
  let _236: Double = FMul(y.407, y.419)
  let _237: Double = FAdd(_233, _236)
  let (_424: Var({val: Some(Double)}), _425: Var({val: Some(Double)}), z.426: Var({val: Some(Double)})) = _34
  let (_427: Var({val: Some(Double)}), _428: Var({val: Some(Double)}), z.429: Var({val: Some(Double)})) = _38
  let _240: Double = FMul(z.426, z.429)
  let _39: Double = FAdd(_237, _240)
  let _40: Double = FMul(_30, _39)
  let _41: Int = ExtApply(minimbt_truncate, [_40, ])
  ExtApply(minimbt_print_int, [_41, ])
}
Apply(main.430, [])