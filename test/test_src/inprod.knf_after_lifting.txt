let rec main.259: Var({val: Some(Unit)}) = () {
  let _30: Double = Double(1000000)
  let _31: Double = Double(1)
  let _32: Double = Double(2)
  let _33: Double = Double(3)
  let _34: Tuple([Double, Double, Double]) = Tuple([_31, _32, _33, ])
  let _35: Double = Double(4)
  let _36: Double = Double(5)
  let _37: Double = Double(6)
  let _38: Tuple([Double, Double, Double]) = Tuple([_35, _36, _37, ])
  let (x.231: Var({val: Some(Double)}), _232: Var({val: Some(Double)}), _233: Var({val: Some(Double)})) = _34
  let (x.235: Var({val: Some(Double)}), _236: Var({val: Some(Double)}), _237: Var({val: Some(Double)})) = _38
  let _239: Double = FMul(x.231, x.235)
  let (_240: Var({val: Some(Double)}), y.241: Var({val: Some(Double)}), _242: Var({val: Some(Double)})) = _34
  let (_244: Var({val: Some(Double)}), y.245: Var({val: Some(Double)}), _246: Var({val: Some(Double)})) = _38
  let _248: Double = FMul(y.241, y.245)
  let _249: Double = FAdd(_239, _248)
  let (_250: Var({val: Some(Double)}), _251: Var({val: Some(Double)}), z.252: Var({val: Some(Double)})) = _34
  let (_254: Var({val: Some(Double)}), _255: Var({val: Some(Double)}), z.256: Var({val: Some(Double)})) = _38
  let _258: Double = FMul(z.252, z.256)
  let _39: Double = FAdd(_249, _258)
  let _40: Double = FMul(_30, _39)
  let _41: Int = ExtApply(minimbt_truncate, [_40, ])
  ExtApply(minimbt_print_int, [_41, ])
}
Apply(main.259, [])