# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.79 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: #(int32, double) = pack 1, 2
    let %1: int32 = extract %0 0
    let %2: double = extract %0 1
    let %3: unit = ext_call minimbt_print_int(%1)
    let %4: int32 = conv.d2i.rtz(%2)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %6: #(int32, double, int32) = pack 1, 2, 3
    let %7: int32 = extract %6 0
    let %8: double = extract %6 1
    let %9: int32 = extract %6 2
    let %10: unit = ext_call minimbt_print_int(%7)
    let %11: int32 = conv.d2i.rtz(%8)
    let %12: unit = ext_call minimbt_print_int(%11)
    let %13: unit = ext_call minimbt_print_int(%9)
    let %14: #(double, int32, int32) = pack 2, 3, 4
    let %15: double = extract %14 0
    let %16: int32 = extract %14 1
    let %17: int32 = extract %14 2
    let %18: int32 = conv.d2i.rtz(%15)
    let %19: unit = ext_call minimbt_print_int(%18)
    let %20: unit = ext_call minimbt_print_int(%16)
    let %21: unit = ext_call minimbt_print_int(%17)
    let %22: #(int32, int32, int32) = pack 1, 2, 3
    let %23: int32 = extract %22 0
    let %24: int32 = extract %22 1
    let %25: int32 = extract %22 2
    let %26: unit = ext_call minimbt_print_int(%23)
    let %27: unit = ext_call minimbt_print_int(%24)
    let %28: unit = ext_call minimbt_print_int(%25)
    return ()
  }
}
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.thunk ::0 start

