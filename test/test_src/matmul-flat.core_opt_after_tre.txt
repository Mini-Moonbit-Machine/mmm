# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn init_arr.235 #f3 : fn(int32, int32, array[array[double]]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, array[array[double]]) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap($b0.1)> <- [..] = 0
    let _ = store array[double] offset($b0.2, $b0.0 * @ptr) <- f3.m0
    let %3: int32 = sub($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2)
  }
}
.fn main.234 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let _ = alloc <m1: array[array[double]] heap(2)> <- [..] = f4.m0
    let %2: int32 = sub(2, 1)
    let %3: unit = call f3(%2, 3, f4.m1)
    let _ = alloc <m2: array[array[double]] heap(3)> <- [..] = f4.m0
    let %5: int32 = sub(3, 1)
    let %6: unit = call f3(%5, 2, f4.m2)
    let _ = alloc <m3: array[array[double]] heap(2)> <- [..] = f4.m0
    let %8: int32 = sub(2, 1)
    let %9: unit = call f3(%8, 2, f4.m3)
    let %10: array[double] = load array[double] field(f4.m1, 0 * @ptr)
    let _ = store double field(%10, 0 * @64) <- 1
    let %12: array[double] = load array[double] field(f4.m1, 0 * @ptr)
    let _ = store double field(%12, 1 * @64) <- 2
    let %14: array[double] = load array[double] field(f4.m1, 0 * @ptr)
    let _ = store double field(%14, 2 * @64) <- 3
    let %16: array[double] = load array[double] field(f4.m1, 1 * @ptr)
    let _ = store double field(%16, 0 * @64) <- 4
    let %18: array[double] = load array[double] field(f4.m1, 1 * @ptr)
    let _ = store double field(%18, 1 * @64) <- 5
    let %20: array[double] = load array[double] field(f4.m1, 1 * @ptr)
    let _ = store double field(%20, 2 * @64) <- 6
    let %22: array[double] = load array[double] field(f4.m2, 0 * @ptr)
    let _ = store double field(%22, 0 * @64) <- 7
    let %24: array[double] = load array[double] field(f4.m2, 0 * @ptr)
    let _ = store double field(%24, 1 * @64) <- 8
    let %26: array[double] = load array[double] field(f4.m2, 1 * @ptr)
    let _ = store double field(%26, 0 * @64) <- 9
    let %28: array[double] = load array[double] field(f4.m2, 1 * @ptr)
    let _ = store double field(%28, 1 * @64) <- 10
    let %30: array[double] = load array[double] field(f4.m2, 2 * @ptr)
    let _ = store double field(%30, 0 * @64) <- 11
    let %32: array[double] = load array[double] field(f4.m2, 2 * @ptr)
    let _ = store double field(%32, 1 * @64) <- 12
    let %34: int32 = sub(2, 1)
    let %35: unit = call f2(%34, 3, 2, f4.m1, f4.m2, f4.m3)
    let %36: array[double] = load array[double] field(f4.m3, 0 * @ptr)
    let %37: double = load double field(%36, 0 * @64)
    let %38: int32 = conv.d2i.rtz(%37)
    let %39: unit = ext_call minimbt_print_int(%38)
    let %40: unit = ext_call minimbt_print_endline()
    let %41: array[double] = load array[double] field(f4.m3, 0 * @ptr)
    let %42: double = load double field(%41, 1 * @64)
    let %43: int32 = conv.d2i.rtz(%42)
    let %44: unit = ext_call minimbt_print_int(%43)
    let %45: unit = ext_call minimbt_print_endline()
    let %46: array[double] = load array[double] field(f4.m3, 1 * @ptr)
    let %47: double = load double field(%46, 0 * @64)
    let %48: int32 = conv.d2i.rtz(%47)
    let %49: unit = ext_call minimbt_print_int(%48)
    let %50: unit = ext_call minimbt_print_endline()
    let %51: array[double] = load array[double] field(f4.m3, 1 * @ptr)
    let %52: double = load double field(%51, 1 * @64)
    let %53: int32 = conv.d2i.rtz(%52)
    let %54: unit = ext_call minimbt_print_int(%53)
    return ()
  }
}
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn loop2.232 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
    let %0: bool = le(0, $b0.2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($b0.1, 1)
    let %2: unit = call f0($b0.0, $b0.2, %1, $b0.3, $b0.4, $b0.5, $b0.6, $b0.7, $b0.8)
    let %3: int32 = sub($b0.2, 1)
    jump b0($b0.0, $b0.1, %3, $b0.3, $b0.4, $b0.5, $b0.6, $b0.7, $b0.8)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
  }
}
.fn loop3.231 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
    let %0: bool = le(0, $b0.2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = load double offset($b0.7, $b0.1 * @64)
    let %2: double = load double offset($b0.8, $b0.2 * @64)
    let %3: array[double] = load array[double] offset($b0.4, $b0.2 * @ptr)
    let %4: double = load double offset(%3, $b0.1 * @64)
    let %5: double = mul(%2, %4)
    let %6: double = add(%1, %5)
    let _ = store double offset($b0.6, $b0.1 * @64) <- %6
    let %8: int32 = sub($b0.2, 1)
    jump b0($b0.0, $b0.1, %8, $b0.3, $b0.4, $b0.5, $b0.6, $b0.7, $b0.8)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
  }
}
.fn loop1.233 #f2 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($b0.2, 1)
    let %2: array[double] = load array[double] offset($b0.5, $b0.0 * @ptr)
    let %3: array[double] = load array[double] offset($b0.5, $b0.0 * @ptr)
    let %4: array[double] = load array[double] offset($b0.3, $b0.0 * @ptr)
    let %5: unit = call f1($b0.0, $b0.1, %1, $b0.3, $b0.4, $b0.5, %2, %3, %4)
    let %6: int32 = sub($b0.0, 1)
    jump b0(%6, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3, $f4, $f5)
  }
}
.thunk ::0 start
