let rec h.1: Int = (p.3: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int)) {
  let (v1.5: Int, v2.7: Int, v3.9: Int, v4.11: Int, v5.13: Int, v6.15: Int, v7.17: Int, v8.19: Int, v9.21: Int, v10.23: Int) = p.3
  let rec g.24: Int = (z.26: Int) {
    let _27: Int = Add(v1.5, v2.7)
    let _28: Int = Add(_27, v3.9)
    let _29: Int = Add(_28, v4.11)
    let _30: Int = Add(_29, v5.13)
    let _31: Int = Add(_30, v6.15)
    let _32: Int = Add(_31, v7.17)
    let _33: Int = Add(_32, v8.19)
    let _34: Int = Add(_33, v9.21)
    let r.35: Int = Add(_34, v10.23)
    let _36: Int = Int(0)
    if (z.26 <= _36) then {
      let _37: Int = Neg(z.26)
      Apply(g.24, [_37, ])
    } else {
      Var(r.35)
    }
  }
  let _38: Int = Int(1)
  Apply(g.24, [_38, ])
}
let rec main.39: Unit = () {
  let _40: Int = Int(1)
  let _41: Int = Int(2)
  let _42: Int = Int(3)
  let _43: Int = Int(4)
  let _44: Int = Int(5)
  let _45: Int = Int(6)
  let _46: Int = Int(7)
  let _47: Int = Int(8)
  let _48: Int = Int(9)
  let _49: Int = Int(10)
  let _50: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) = Tuple([_40, _41, _42, _43, _44, _45, _46, _47, _48, _49, ])
  let _51: Int = Apply(h.1, [_50, ])
  let t1.52: Unit = ExtApply(minimbt_print_int, [_51, ])
  Unit
}
Apply(main.39, [])
