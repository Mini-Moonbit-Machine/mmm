// [Main] function thunk_main(k) {
// [Main]   function gcd_1(m_3, n_5, k) {
// [Main]     const _6 = 0;
// [Main]     if (m_3 === _6) {
// [Main]       return k(n_5)
// [Main]     } else {
// [Main]       if (m_3 <= n_5) {
// [Main]         const _7 = n_5 - m_3;
// [Main]         return $thunk(() => gcd_1(m_3, _7, k))
// [Main]       } else {
// [Main]         const _8 = m_3 - n_5;
// [Main]         return $thunk(() => gcd_1(n_5, _8, k))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function main_9(k) {
// [Main]     const _10 = 21600;
// [Main]     const _11 = 337500;
// [Main]     return $thunk(() => gcd_1(_10, _11, function (_12) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_12))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_9(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("gcd", Int), args: [("m", Int), ("n", Int)], body: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)]))) against Int
// [Typer] check: Eq(Var("m"), Int(0)) against Bool
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])) against Int
// [Typer] check: LE(Var("m"), Var("n")) against Bool
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]) against Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("n"), Var("m"), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("gcd") against Fun([Int, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] unify: Fun([Int, Int], Int) and Fun([Int, Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)]) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("m"), Var("n"), Sub, kind=None)
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("gcd") against Fun([Int, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] unify: Fun([Int, Int], Int) and Fun([Int, Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("gcd"), [Int(21600), Int(337500)]) against Int
// [Typer] infer: Int(21600)
// [Typer] infer: Int(337500)
// [Typer] check: Var("gcd") against Fun([Int, Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Int)))
// [Typer] inst result: Fun([Int, Int], Int)
// [Typer] unify: Fun([Int, Int], Int) and Fun([Int, Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
