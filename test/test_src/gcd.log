// [Asm] LoweringOrder: [8, 0, 2, 4, 3, 1, 6]
// [Asm] LoweringOrder: [[7], [1, 2], [3, 4], [0], [0], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 2), (b4, 1), (b1, 2), (b8, 0), (b2, 0), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b8, b0, b2, b3, b4, b1, b6]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 0), (b1, 0), (b8, 0), (b2, 2), (b3, 3), (b0, 1)])
// [Asm] pre_assigned_registers: FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v10, Insn(iref=%2) -> v9, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6, Insn(iref=%4) -> v8
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [0]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] succs: [7]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v8]
// [Asm] move: v4 <- v5
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v8
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- v5
// [Asm] defined: v10 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, zero, v9]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v9]
// [Asm] move: v4 <- v4
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v9
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- v2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v3
// [Asm] defined: v5 is X
// [Asm] Label("gcd.13") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("gcd.13") clobbered_f: @hashset.of([])
// [Asm] subst   blt v5, v4, .gcd.13_4 ->   blt a0, a1, .gcd.13_4
// [Asm] subst   sub v8, v4, v5 ->   sub a2, a1, a0
// [Asm] subst   mv v4, v5 ->   mv a1, a0
// [Asm] subst   mv v5, v8 ->   mv a0, a2
// [Asm] subst   j .gcd.13_0 ->   j .gcd.13_0
// [Asm] subst   sub v9, v5, v4 ->   sub a0, a0, a1
// [Asm] subst   j .gcd.13_0 ->   j .gcd.13_0
// [Asm] subst   ret ->   ret
// [Asm] subst   beq v4, zero, .gcd.13_1 ->   beq a1, zero, .gcd.13_1
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, v2 ->   mv a1, a2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Insn(iref=%0) -> v2, Self(fref=f1) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, a0]
// [Asm] defined: v6 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move: a1 <- v6
// [Asm] defined: a1 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.14") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("main.14") clobbered_f: @hashset.of([])
// [Asm] subst   li v5, 21600 ->   li a0, 21600
// [Asm] subst   li v6, 337500 ->   li a1, 337500
// [Asm] subst   call gcd.13 ->   call gcd.13
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.14:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v5, a0, v6, a1, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v5, 21600  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   li v6, 337500  # live: [v6, a0]
// [Asm]   mv a1, v6  # live: [a1, a0]
// [Asm]   call gcd.13  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.14  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] gcd.13:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd.13_8:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, zero], upward_exposed: [v4, zero], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .gcd.13_0:
// [Asm] # control
// [Asm]   beq v4, zero, .gcd.13_1  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v5], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd.13_2:
// [Asm] # control
// [Asm]   blt v5, v4, .gcd.13_4  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v5, v9], uses: [v4, v5, v9], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd.13_3:
// [Asm]   sub v9, v5, v4  # live: [v4, zero, v9]
// [Asm] # control
// [Asm]   mv v4, v4  # live: [v4, zero, v9]
// [Asm]   mv v5, v9  # live: [v4, v5, zero]
// [Asm]   j .gcd.13_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v4, v5, v8], uses: [v4, v5, v8], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd.13_4:
// [Asm]   sub v8, v4, v5  # live: [v5, zero, v8]
// [Asm] # control
// [Asm]   mv v4, v5  # live: [v4, zero, v8]
// [Asm]   mv v5, v8  # live: [v4, v5, zero]
// [Asm]   j .gcd.13_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v5], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .gcd.13_1:
// [Asm] # control
// [Asm]   mv v10, v5  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .gcd.13_6:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.14
// [Main]   .type main.14, @function
// [Main] # leaf false
// [Main] main.14:
// [Main] .main.14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 21600
// [Main]   li a1, 337500
// [Main]   call gcd.13
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.14
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gcd.13
// [Main]   .type gcd.13, @function
// [Main] # leaf true
// [Main] gcd.13:
// [Main] .gcd.13_8:
// [Main]   mv a2, a0
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main] 
// [Main] .gcd.13_0:
// [Main]   beq a1, zero, .gcd.13_1
// [Main] 
// [Main] .gcd.13_2:
// [Main]   blt a0, a1, .gcd.13_4
// [Main] 
// [Main] .gcd.13_3:
// [Main]   sub a0, a0, a1
// [Main]   j .gcd.13_0
// [Main] 
// [Main] .gcd.13_4:
// [Main]   sub a2, a1, a0
// [Main]   mv a1, a0
// [Main]   mv a0, a2
// [Main]   j .gcd.13_0
// [Main] 
// [Main] .gcd.13_1:
// [Main] 
// [Main] .gcd.13_6:
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("gcd", Int), args: [("m", Int), ("n", Int)], body: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("gcd"), targs=None, [Int(21600), Int(337500)])])}, Unit))
// [Typer] resolve: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])))
// [Typer] resolve: Eq(Var("m"), Int(0))
// [Typer] resolve: Var("m")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("n")
// [Typer] resolve: If(LE(Var("m"), Var("n")), App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)]))
// [Typer] resolve: LE(Var("m"), Var("n"))
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("n")
// [Typer] resolve: App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)])
// [Typer] resolve: Var("m")
// [Typer] resolve: Prim(Var("n"), Var("m"), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("gcd")
// [Typer] resolve: App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])
// [Typer] resolve: Var("n")
// [Typer] resolve: Prim(Var("m"), Var("n"), Sub, kind=None)
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("gcd")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("gcd"), targs=None, [Int(21600), Int(337500)])])}, Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("gcd"), targs=None, [Int(21600), Int(337500)])])
// [Typer] resolve: App(Var("gcd"), targs=None, [Int(21600), Int(337500)])
// [Typer] resolve: Int(21600)
// [Typer] resolve: Int(337500)
// [Typer] resolve: Var("gcd")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("gcd", Int), args: [("m", Int), ("n", Int)], body: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("gcd"), targs=None, [Int(21600), Int(337500)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)]))) against Int
// [Typer] check: Eq(Var("m"), Int(0)) against Bool
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(LE(Var("m"), Var("n")), App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]), App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)])) against Int
// [Typer] check: LE(Var("m"), Var("n")) against Bool
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("gcd"), targs=None, [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=None)]) against Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("n"), Var("m"), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("gcd"), targs=None, [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=None)]) against Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("m"), Var("n"), Sub, kind=None)
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("gcd"), targs=None, [Int(21600), Int(337500)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("gcd"), targs=None, [Int(21600), Int(337500)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("gcd"), targs=None, [Int(21600), Int(337500)]) against Int
// [Typer] infer: Int(21600)
// [Typer] infer: Int(337500)
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {gcd.1: Many(3), main.9: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {gcd.1: Many(3), main.9: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {gcd.1: Many(3), main.9: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {n.5: MayEscape, m.3: MayEscape, _7: MayEscape, _8: MayEscape, _10: MayEscape, _11: MayEscape, _12: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Int32, f=f0, args=[FnParam(fref=f0, fpref=$f.1), Insn(iref=%4)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Int32, f=f0, args=[FnParam(fref=f0, fpref=$f.0), Insn(iref=%2)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 gcd.13 false true true false true
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 gcd.13 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 gcd.13 false true true false true
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 gcd.13 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 gcd.13 false true true false true
// [CoreOpt] allow_inline: false %0 main.14 false true true true true
// [CoreOpt] allow_inline: false %0 gcd.13 false true true false true
