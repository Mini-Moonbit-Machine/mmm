// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, BlockParam(bref=b16, bpref=$b.0) -> v13, BlockParam(bref=b17, bpref=$b.0) -> v20, Insn(iref=%9) -> v8, BlockParam(bref=b10, bpref=$b.0) -> v19, Insn(iref=%10) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v4, Insn(iref=%14) -> v11, BlockParam(bref=b0, bpref=$b.1) -> v5, BlockParam(bref=b18, bpref=$b.0) -> v21, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v18, Insn(iref=%0) -> v6, Insn(iref=%4) -> v16, Insn(iref=%3) -> v15, FnParam(fref=f0, fpref=$f.1) -> v3, Insn(iref=%7) -> v17, Insn(iref=%2) -> v14, Insn(iref=%1) -> v7, Insn(iref=%11) -> v10, Insn(iref=%12) -> v12
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [v4, v14, zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v5, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v12, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v12]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v14, zero]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v11, v4, zero]
// [Asm] move_origin: [v8]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v11]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v5]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v8]
// [Asm] defined: v13 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17, v14, zero]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v17, zero]
// [Asm] move_origin: [v14]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v17]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v4, v18, zero]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v18, zero]
// [Asm] move_origin: [v4]
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v18]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v14]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v13]
// [Asm] defined: v20 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gcd1l0_0"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a2", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="v11 ← a1", color=green];
// [Asm]   r13 [label="v20 ← a0", color=green];
// [Asm]   r4 [label="v14 ← a0", color=green];
// [Asm]   r1 [label="v5 ← a1", color=green];
// [Asm]   r11 [label="v13 ← a0", color=green];
// [Asm]   r7 [label="v21 ← a0", color=green];
// [Asm]   r10 [label="v3 ← a0", color=green];
// [Asm]   r14 [label="v18 ← a0", color=green];
// [Asm]   r8 [label="v2 ← a2", color=green];
// [Asm]   r5 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v19 ← a0", color=green];
// [Asm]   r12 [label="v17 ← a1", color=green];
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r3;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v12-> 1:v5-> 2:zero-> 3:v4-> 4:v14-> 12:v17-> 5:v8-> 6:v11-> 10:v3-> 8:v2-> 14:v18-> 9:a1-> 7:v21-> 11:v13-> 13:v20-> 15:a0-> 16:v19"
// [Asm]   comment = "v12<-a0;v4<-a2;v11<-a1;v20<-a0;v14<-a0;v5<-a1;v13<-a0;v21<-a0;v3<-a0;v18<-a0;v2<-a2;v8<-a0;v19<-a0;v17<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gcd1l0_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   blt v14, v4, .gcd1l0_0_8 ->   blt a0, a2, .gcd1l0_0_8
// [Asm] subst   sub v12, v8, v5 ->   sub a0, a0, a1
// [Asm] subst   mv v4, v5 ->   mv a2, a1
// [Asm] subst   mv v5, v12 ->   mv a1, a0
// [Asm] subst   j .gcd1l0_0_0 ->   j .gcd1l0_0_0
// [Asm] subst   blt v5, v4, .gcd1l0_0_4 ->   blt a1, a2, .gcd1l0_0_4
// [Asm] subst   sub v8, v4, v5 ->   sub a0, a2, a1
// [Asm] subst   beq v5, zero, .gcd1l0_0_11 ->   beq a1, zero, .gcd1l0_0_11
// [Asm] subst   sub v14, v5, v4 ->   sub a0, a1, a2
// [Asm] subst   beq v4, zero, .gcd1l0_0_5 ->   beq a2, zero, .gcd1l0_0_5
// [Asm] subst   sub v11, v5, v8 ->   sub a1, a1, a0
// [Asm] subst   mv v4, v8 ->   mv a2, a0
// [Asm] subst   j .gcd1l0_0_0 ->   j .gcd1l0_0_0
// [Asm] subst   mv v21, v5 ->   mv a0, a1
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v5, v3 ->   mv a1, a0
// [Asm] subst   blt v8, v5, .gcd1l0_0_14 ->   blt a0, a1, .gcd1l0_0_14
// [Asm] subst   sub v17, v4, v14 ->   sub a1, a2, a0
// [Asm] subst   mv v4, v14 ->   mv a2, a0
// [Asm] subst   j .gcd1l0_0_0 ->   j .gcd1l0_0_0
// [Asm] subst   j .gcd1l0_0_17 ->   j .gcd1l0_0_17
// [Asm] subst   sub v18, v14, v4 ->   sub a0, a0, a2
// [Asm] subst   mv v5, v18 ->   mv a1, a0
// [Asm] subst   j .gcd1l0_0_0 ->   j .gcd1l0_0_0
// [Asm] subst   ret ->   ret
// [Asm] subst   beq v4, zero, .gcd1l0_0_1 ->   beq a2, zero, .gcd1l0_0_1
// [Asm] subst   j .gcd1l0_0_18 ->   j .gcd1l0_0_18
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main9l1_1 ->   call main9l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, BlockParam(bref=b5, bpref=$b.0) -> v8, BlockParam(bref=b6, bpref=$b.0) -> v9, Insn(iref=%2) -> v6, Insn(iref=%1) -> v3, Self(fref=f1) -> v0, Insn(iref=%6) -> v10, Insn(iref=%5) -> v5, Insn(iref=%0) -> v2, Insn(iref=%4) -> v4
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=21600), Int32(val=337500)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Int32(val=21600), Int32(val=0)])
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21, v20]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v4, v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v24, v23]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v9 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v15]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v6, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v7]
// [Asm] defined: v8 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [v12]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main9l1_1"];
// [Asm]   r0 [label="v20 ← a0", color=green];
// [Asm]   r20 [label="v23 ← a0", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v18 ← a0", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r26 [label="v13 ← a0", color=green];
// [Asm]   r27 [label="v7 ← a0", color=green];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v25 ← a0", color=green];
// [Asm]   r1 [label="v21 ← a1", color=green];
// [Asm]   r28 [label="v12 ← a0", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r22 [label="v9 ← a0", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r30 [label="zero", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r24 [label="v16 ← a1", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r25 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="v4 ← a1", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v8 ← a0", color=green];
// [Asm]   r19 [label="v10 ← a0", color=green];
// [Asm]   r21 [label="v24 ← a1", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r25;
// [Asm]   r25 -- r26;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r29 -- r30;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v20-> 1:v21-> 2:v4-> 3:v18-> 4:a0-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 25:v6-> 26:v13-> 17:v5-> 18:v8-> 19:v10-> 20:v23-> 21:v24-> 22:v9-> 23:v15-> 24:v16-> 27:v7-> 28:v12-> 29:v25-> 30:zero"
// [Asm]   comment = "v20<-a0;v23<-a0;v15<-a0;v18<-a0;v13<-a0;v7<-a0;v25<-a0;v21<-a1;v12<-a0;v9<-a0;v16<-a1;v6<-a1;v4<-a1;v8<-a0;v10<-a0;v24<-a1;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main9l1_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v20, 21600 ->   li a0, 21600
// [Asm] subst   li v21, 337500 ->   li a1, 337500
// [Asm] subst   sub v4, v20, v21 ->   sub a1, a0, a1
// [Asm] subst   li v18, 337500 ->   li a0, 337500
// [Asm] subst   call gcd1l0_0 ->   call gcd1l0_0
// [Asm] subst   j .main9l1_1_5 ->   j .main9l1_1_5
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   li v23, 337500 ->   li a0, 337500
// [Asm] subst   li v24, 21600 ->   li a1, 21600
// [Asm] subst   blt v23, v24, .main9l1_1_4 ->   blt a0, a1, .main9l1_1_4
// [Asm] subst   li v15, 337500 ->   li a0, 337500
// [Asm] subst   li v16, 21600 ->   li a1, 21600
// [Asm] subst   sub v6, v15, v16 ->   sub a1, a0, a1
// [Asm] subst   li v13, 21600 ->   li a0, 21600
// [Asm] subst   call gcd1l0_0 ->   call gcd1l0_0
// [Asm] subst   li v12, 337500 ->   li a0, 337500
// [Asm] subst   j .main9l1_1_6 ->   j .main9l1_1_6
// [Asm] subst   li v25, 21600 ->   li a0, 21600
// [Asm] subst   beq v25, zero, .main9l1_1_1 ->   beq a0, zero, .main9l1_1_1
// [Asm] before colored: # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main9l1_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] gcd1l0_0:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_20:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, zero], upward_exposed: [v4, zero], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .gcd1l0_0_0:
// [Asm] # control
// [Asm]   beq v4, zero, .gcd1l0_0_1  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v5], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_2:
// [Asm] # control
// [Asm]   blt v5, v4, .gcd1l0_0_4  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v4, v5, zero], upward_exposed: [v4, v5, zero], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v14, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_3:
// [Asm]   sub v14, v5, v4  # live: [v4, v14, zero]
// [Asm] # control
// [Asm]   beq v4, zero, .gcd1l0_0_5  # live: [v4, v14, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v14], upward_exposed: [v4, v14], params_defs: []
// [Asm] # live_in: [v4, v14, zero], live_out: [v4, v14, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_6:
// [Asm] # control
// [Asm]   blt v14, v4, .gcd1l0_0_8  # live: [v4, v14, zero]
// [Asm] 
// [Asm] # block info: defs: [v5, v18], uses: [v4, v14, v18], upward_exposed: [v4, v14], params_defs: []
// [Asm] # live_in: [v4, v14, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_7:
// [Asm]   sub v18, v14, v4  # live: [v4, v18, zero]
// [Asm] # control
// [Asm]   mv v4, v4  # live: [v4, v18, zero]
// [Asm]   mv v5, v18  # live: [v4, v5, zero]
// [Asm]   j .gcd1l0_0_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v5], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_1:
// [Asm] # control
// [Asm]   mv v21, v5  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .gcd1l0_0_18:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v4, v5, zero], upward_exposed: [v4, v5, zero], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v5, zero, v8]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_4:
// [Asm]   sub v8, v4, v5  # live: [v5, zero, v8]
// [Asm] # control
// [Asm]   beq v5, zero, .gcd1l0_0_11  # live: [v5, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, v8], upward_exposed: [v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8], live_out: [v5, zero, v8]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_12:
// [Asm] # control
// [Asm]   blt v8, v5, .gcd1l0_0_14  # live: [v5, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v4, v5, v12], uses: [v5, v12, v8], upward_exposed: [v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_13:
// [Asm]   sub v12, v8, v5  # live: [v5, v12, zero]
// [Asm] # control
// [Asm]   mv v4, v5  # live: [v4, v12, zero]
// [Asm]   mv v5, v12  # live: [v4, v5, zero]
// [Asm]   j .gcd1l0_0_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_11:
// [Asm] # control
// [Asm]   mv v13, v8  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v13], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: [v20]
// [Asm] # block parameters: [v13]
// [Asm] .gcd1l0_0_16:
// [Asm] # control
// [Asm]   mv v20, v13  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: [v21]
// [Asm] # block parameters: [v20]
// [Asm] .gcd1l0_0_17:
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm]   j .gcd1l0_0_18  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v11, v4, v5], uses: [v11, v5, v8], upward_exposed: [v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_14:
// [Asm]   sub v11, v5, v8  # live: [v11, zero, v8]
// [Asm] # control
// [Asm]   mv v4, v8  # live: [v11, v4, zero]
// [Asm]   mv v5, v11  # live: [v4, v5, zero]
// [Asm]   j .gcd1l0_0_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v14], upward_exposed: [v14], params_defs: []
// [Asm] # live_in: [v14], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_5:
// [Asm] # control
// [Asm]   mv v19, v14  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: [v20]
// [Asm] # block parameters: [v19]
// [Asm] .gcd1l0_0_10:
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v20]
// [Asm]   j .gcd1l0_0_17  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v4, v17, v5], uses: [v4, v14, v17], upward_exposed: [v4, v14], params_defs: []
// [Asm] # live_in: [v4, v14, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .gcd1l0_0_8:
// [Asm]   sub v17, v4, v14  # live: [v17, v14, zero]
// [Asm] # control
// [Asm]   mv v4, v14  # live: [v4, v17, zero]
// [Asm]   mv v5, v17  # live: [v4, v5, zero]
// [Asm]   j .gcd1l0_0_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] main9l1_1:
// [Asm] # block info: defs: [v25], uses: [v25, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main9l1_1_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   li v25, 21600  # live: [v25, zero]
// [Asm]   beq v25, zero, .main9l1_1_1  # live: []
// [Asm] 
// [Asm] # block info: defs: [v24, v23], uses: [v24, v23], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main9l1_1_2:
// [Asm] # control
// [Asm]   li v23, 337500  # live: [v23]
// [Asm]   li v24, 21600  # live: [v24, v23]
// [Asm]   blt v23, v24, .main9l1_1_4  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v16, a0, v13, v7, v6, a1, v15], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .main9l1_1_3:
// [Asm]   li v15, 337500  # live: [v15]
// [Asm]   li v16, 21600  # live: [v16, v15]
// [Asm]   sub v6, v15, v16  # live: [v6]
// [Asm]   # save_ctx2  # live: [v6]
// [Asm]   li v13, 21600  # live: [v6, v13]
// [Asm]   mv a0, v13  # live: [v6, a0]
// [Asm]   mv a1, v6  # live: [a1, a0]
// [Asm]   call gcd1l0_0  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: [v9]
// [Asm] # block parameters: [v8]
// [Asm] .main9l1_1_5:
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v10, v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .main9l1_1_6:
// [Asm]   # save_ctx2  # live: [v9]
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12, v9], uses: [v12], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .main9l1_1_1:
// [Asm] # control
// [Asm]   li v12, 337500  # live: [v12]
// [Asm]   mv v9, v12  # live: [v9]
// [Asm]   j .main9l1_1_6  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, v20, fa6, v8, a6, ft10, v4, ft5, ft7, ft4, v5, v21, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v5, v21, v18, a0, v20, v4, a1], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .main9l1_1_4:
// [Asm]   li v20, 21600  # live: [v20]
// [Asm]   li v21, 337500  # live: [v21, v20]
// [Asm]   sub v4, v20, v21  # live: [v4]
// [Asm]   # save_ctx2  # live: [v4]
// [Asm]   li v18, 337500  # live: [v4, v18]
// [Asm]   mv a0, v18  # live: [v4, a0]
// [Asm]   mv a1, v4  # live: [a1, a0]
// [Asm]   call gcd1l0_0  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv v8, v5  # live: [v8]
// [Asm]   j .main9l1_1_5  # live: [v8]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("gcd", Int), args: [("m", Int), ("n", Int)], body: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))])))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("gcd")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Var("m"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("gcd")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(Var("m"), Var("n"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])
// [Knf] build_knf: App(Var("gcd"), [Int(21600), Int(337500)])
// [Knf] build_knf: Var("gcd")
// [Knf] build_knf: Int(21600)
// [Knf] build_knf: Int(337500)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main9l1_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gcd1l0_0
// [Main]   .type gcd1l0_0, @function
// [Main] # leaf true
// [Main] gcd1l0_0:
// [Main] .gcd1l0_0_20:
// [Main]   mv a2, a0
// [Main]   mv a0, a1
// [Main]   mv a1, a0
// [Main] 
// [Main] .gcd1l0_0_0:
// [Main]   beq a2, zero, .gcd1l0_0_1
// [Main] 
// [Main] .gcd1l0_0_2:
// [Main]   blt a1, a2, .gcd1l0_0_4
// [Main] 
// [Main] .gcd1l0_0_3:
// [Main]   sub a0, a1, a2
// [Main]   beq a2, zero, .gcd1l0_0_5
// [Main] 
// [Main] .gcd1l0_0_6:
// [Main]   blt a0, a2, .gcd1l0_0_8
// [Main] 
// [Main] .gcd1l0_0_7:
// [Main]   sub a0, a0, a2
// [Main]   mv a1, a0
// [Main]   j .gcd1l0_0_0
// [Main] 
// [Main] .gcd1l0_0_1:
// [Main]   mv a0, a1
// [Main] 
// [Main] .gcd1l0_0_18:
// [Main]   ret
// [Main] 
// [Main] .gcd1l0_0_4:
// [Main]   sub a0, a2, a1
// [Main]   beq a1, zero, .gcd1l0_0_11
// [Main] 
// [Main] .gcd1l0_0_12:
// [Main]   blt a0, a1, .gcd1l0_0_14
// [Main] 
// [Main] .gcd1l0_0_13:
// [Main]   sub a0, a0, a1
// [Main]   mv a2, a1
// [Main]   mv a1, a0
// [Main]   j .gcd1l0_0_0
// [Main] 
// [Main] .gcd1l0_0_11:
// [Main] 
// [Main] .gcd1l0_0_16:
// [Main] 
// [Main] .gcd1l0_0_17:
// [Main]   j .gcd1l0_0_18
// [Main] 
// [Main] .gcd1l0_0_14:
// [Main]   sub a1, a1, a0
// [Main]   mv a2, a0
// [Main]   j .gcd1l0_0_0
// [Main] 
// [Main] .gcd1l0_0_5:
// [Main] 
// [Main] .gcd1l0_0_10:
// [Main]   j .gcd1l0_0_17
// [Main] 
// [Main] .gcd1l0_0_8:
// [Main]   sub a1, a2, a0
// [Main]   mv a2, a0
// [Main]   j .gcd1l0_0_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main9l1_1
// [Main]   .type main9l1_1, @function
// [Main] # leaf false
// [Main] main9l1_1:
// [Main] .main9l1_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 21600
// [Main]   beq a0, zero, .main9l1_1_1
// [Main] 
// [Main] .main9l1_1_2:
// [Main]   li a0, 337500
// [Main]   li a1, 21600
// [Main]   blt a0, a1, .main9l1_1_4
// [Main] 
// [Main] .main9l1_1_3:
// [Main]   li a0, 337500
// [Main]   li a1, 21600
// [Main]   sub a1, a0, a1
// [Main]   li a0, 21600
// [Main]   call gcd1l0_0
// [Main] 
// [Main] .main9l1_1_5:
// [Main] 
// [Main] .main9l1_1_6:
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main9l1_1_1:
// [Main]   li a0, 337500
// [Main]   j .main9l1_1_6
// [Main] 
// [Main] .main9l1_1_4:
// [Main]   li a0, 21600
// [Main]   li a1, 337500
// [Main]   sub a1, a0, a1
// [Main]   li a0, 337500
// [Main]   call gcd1l0_0
// [Main]   j .main9l1_1_5
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function gcd1l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b18, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Lowering control Jump(target=b17, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%2), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b17, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Lowering control Jump(target=b16, args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%9), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%12)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%9), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Branch(cond=Insn(iref=%10), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b19, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b17, bpref=$b.0) -> $b17.$b.0
// [Wasm] Local BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function gcd1l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function main9l1_1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Return(args=[Insn(iref=%6)])
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=337500)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=337500), Int32(val=21600)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Int32(val=21600), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=21600), Int32(val=337500)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Int32(val=337500), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=21600), Int32(val=337500)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Int32(val=21600), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main9l1_1 to wasm
// [KnfOpt] freq: {gcd1: Many(3), main9: Once}
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(gcd1)
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(gcd1)
// [KnfOpt] Inline threshold 3 11
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(gcd1)
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Call(ty=Int32, f=f0, args=[Insn(iref=%2), Insn(iref=%7)])
// [CoreOpt] eliminated tail rec call %6: Call(ty=Int32, f=f0, args=[FnParam(fref=f0, fpref=$f.0), Insn(iref=%5)])
// [CoreOpt] eliminated tail rec call %13: Call(ty=Int32, f=f0, args=[FnParam(fref=f0, fpref=$f.1), Insn(iref=%12)])
// [CoreOpt] eliminated tail rec call %15: Call(ty=Int32, f=f0, args=[Insn(iref=%9), Insn(iref=%14)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
