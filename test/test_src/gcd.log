// [Knf] build_knf: LetRec({name: ("gcd", Int), args: [("m", Int), ("n", Int)], body: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("m"), Int(0)), Var("n"), If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))])))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: If(LE(Var("m"), Var("n")), App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))]), App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: App(Var("gcd"), [Var("m"), Prim(Var("n"), Var("m"), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("gcd")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Var("m"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: App(Var("gcd"), [Var("n"), Prim(Var("m"), Var("n"), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("gcd")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(Var("m"), Var("n"), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("gcd"), [Int(21600), Int(337500)])])
// [Knf] build_knf: App(Var("gcd"), [Int(21600), Int(337500)])
// [Knf] build_knf: Var("gcd")
// [Knf] build_knf: Int(21600)
// [Knf] build_knf: Int(337500)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function gcd1(m2_3, n4_5, k) {
// [Main]     const _6 = 0;
// [Main]     if (m2_3 === _6) {
// [Main]       return k(n4_5)
// [Main]     } else {
// [Main]       if (m2_3 <= n4_5) {
// [Main]         const _7 = n4_5 - m2_3;
// [Main]         return $thunk(() => gcd1(m2_3, _7, k))
// [Main]       } else {
// [Main]         const _8 = m2_3 - n4_5;
// [Main]         return $thunk(() => gcd1(n4_5, _8, k))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function main9(k) {
// [Main]     const _10 = 21600;
// [Main]     const _11 = 337500;
// [Main]     return $thunk(() => gcd1(_10, _11, function (_12) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_12))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main9(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
