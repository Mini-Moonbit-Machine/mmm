// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Self(fref=f0) -> v0, Insn(iref=%0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v3
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=123), Int32(val=0)])
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- v9
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- v8
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.18") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.18") clobbered_f: @hashset.of([])
// [Asm] subst   addi v4, v3, 123 ->   addi a0, a0, 123
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   li v9, 789 ->   li a0, 789
// [Asm] subst   j .main.18_3 ->   j .main.18_3
// [Asm] subst   li v8, 456 ->   li a0, 456
// [Asm] subst   li v10, 123 ->   li a0, 123
// [Asm] subst   blt zero, v10, .main.18_2 ->   blt zero, a0, .main.18_2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.18  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.18:
// [Asm] # block info: defs: [v10], uses: [v10, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.18_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   li v10, 123  # live: [v10, zero]
// [Asm]   blt zero, v10, .main.18_2  # live: []
// [Asm] 
// [Asm] # block info: defs: [v3, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v3]
// [Asm] # block parameters: []
// [Asm] .main.18_1:
// [Asm] # control
// [Asm]   li v8, 456  # live: [v8]
// [Asm]   mv v3, v8  # live: [v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a0, v3], upward_exposed: [v3], params_defs: [v3]
// [Asm] # live_in: [v3], live_out: []
// [Asm] # block parameters: [v3]
// [Asm] .main.18_3:
// [Asm]   addi v4, v3, 123  # live: [v4]
// [Asm]   # save_ctx2  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v9, v3], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v3]
// [Asm] # block parameters: []
// [Asm] .main.18_2:
// [Asm] # control
// [Asm]   li v9, 789  # live: [v9]
// [Asm]   mv v3, v9  # live: [v3]
// [Asm]   j .main.18_3  # live: [v3]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.18
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.18
// [Main]   .type main.18, @function
// [Main] # leaf false
// [Main] main.18:
// [Main] .main.18_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 123
// [Main]   blt zero, a0, .main.18_2
// [Main] 
// [Main] .main.18_1:
// [Main]   li a0, 456
// [Main] 
// [Main] .main.18_3:
// [Main]   addi a0, a0, 123
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main.18_2:
// [Main]   li a0, 789
// [Main]   j .main.18_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("f", Int), args: [("u", Unit)], body: Int(123)}, LetRec({tyvars: [], name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({tyvars: [], name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit))))
// [Typer] resolve: Int(123)
// [Typer] resolve: LetRec({tyvars: [], name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({tyvars: [], name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit)))
// [Typer] resolve: Int(456)
// [Typer] resolve: LetRec({tyvars: [], name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit))
// [Typer] resolve: Int(789)
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit)
// [Typer] resolve: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))
// [Typer] resolve: App(Var("f"), targs=None, [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("f")
// [Typer] resolve: App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)])
// [Typer] resolve: Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)
// [Typer] resolve: If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit]))
// [Typer] resolve: LE(Var("x"), Int(0))
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(0)
// [Typer] resolve: App(Var("g"), targs=None, [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("g")
// [Typer] resolve: App(Var("h"), targs=None, [Unit])
// [Typer] resolve: Unit
// [Typer] resolve: Var("h")
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("u", Unit)], body: Int(123)}, LetRec({tyvars: [], name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({tyvars: [], name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(123) against Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({tyvars: [], name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(456) against Int
// [Typer] check: LetRec({tyvars: [], name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Int(789) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("x", Var(None)), App(Var("f"), targs=None, [Unit]), App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)]))
// [Typer] infer: App(Var("f"), targs=None, [Unit])
// [Typer] inst: TypeScheme(([], (Unit) -> Int))
// [Typer] inst result: (Unit) -> Int
// [Typer] check: Unit against Unit
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: App(Var("print_int"), targs=None, [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Prim(If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])), Var("x"), Add, kind=None) against Int
// [Typer] check: If(LE(Var("x"), Int(0)), App(Var("g"), targs=None, [Unit]), App(Var("h"), targs=None, [Unit])) against Int
// [Typer] check: LE(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: App(Var("g"), targs=None, [Unit]) against Int
// [Typer] infer: Unit
// [Typer] inst: TypeScheme(([], (Unit) -> Int))
// [Typer] inst result: (Unit) -> Int
// [Typer] unify: (Unit) -> Int and (Unit) -> Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Int and Int
// [Typer] check: App(Var("h"), targs=None, [Unit]) against Int
// [Typer] infer: Unit
// [Typer] inst: TypeScheme(([], (Unit) -> Int))
// [Typer] inst result: (Unit) -> Int
// [Typer] unify: (Unit) -> Int and (Unit) -> Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {f.1: Once, g.4: Once, h.7: Once, main.10: Once}
// [KnfOpt] Knf inline Some(f)
// [KnfOpt] Knf inline Some(g)
// [KnfOpt] Knf inline Some(h)
// [KnfOpt] freq: {main.10: Once}
// [KnfOpt] freq: {main.10: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_17: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.18 false true true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.18 false true true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.18 false true true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true false true
