// [Knf] build_knf: LetRec({name: ("f", Int), args: [("u", Unit)], body: Int(123)}, LetRec({name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))]))}, App(Var("main"), [])))))
// [Knf] build_knf: Int(123)
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))]))}, App(Var("main"), []))))
// [Knf] build_knf: Int(456)
// [Knf] build_knf: LetRec({name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))]))}, App(Var("main"), [])))
// [Knf] build_knf: Int(789)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("f"), [Unit])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("print_int"), [Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit])), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: If(LE(Var("x"), Int(0)), App(Var("g"), [Unit]), App(Var("h"), [Unit]))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Unit])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("h"), [Unit])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f1(u2_3, k) {
// [Main]     return k(123)
// [Main]   }
// [Main]   function g4(u5_6, k) {
// [Main]     return k(456)
// [Main]   }
// [Main]   function h7(u8_9, k) {
// [Main]     return k(789)
// [Main]   }
// [Main]   function main10(k) {
// [Main]     const _11 = null;
// [Main]     return $thunk(() => f1(_11, function (x_12) {
// [Main]       const _13 = 0;
// [Main]       const _16 = (() => {
// [Main]         if (x_12 <= _13) {
// [Main]           const _14 = null;
// [Main]           return $thunk(() => g4(_14, k))
// [Main]         } else {
// [Main]           const _15 = null;
// [Main]           return $thunk(() => h7(_15, k))
// [Main]         }
// [Main]       })();
// [Main]       const _17 = _16 + x_12;
// [Main]       return $thunk(() => k(minimbt_print_int($force(_17))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main10(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
