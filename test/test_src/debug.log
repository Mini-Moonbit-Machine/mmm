// [Knf] build_knf: LetRec({name: ("useless", Int), args: [("x", Int)], body: Let(("y", Var({val: Some(Int)})), Var("x"), Prim(Int(10), Int(1), Sub, kind=Some(Int)))}, LetRec({name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Var("x"), Prim(Int(10), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Int(10), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), []))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)]))
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: App(Var("f"), [Int(1)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Int(2)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), []))
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function useless1(x2_3, k) {
// [Main]     const _4 = 10;
// [Main]     const _5 = 1;
// [Main]     return k(_4 - _5)
// [Main]   }
// [Main]   function dummy6(x7_8, k) {
// [Main]     return k(x7_8)
// [Main]   }
// [Main]   function f9(x10_11, k) {
// [Main]     function g12(y13_14, k) {
// [Main]       return k(x10_11)
// [Main]     }
// [Main]     const _15 = 1;
// [Main]     const _18 = 1;
// [Main]     if (_15 === _18) {
// [Main]       const _16 = 1;
// [Main]       return $thunk(() => f9(_16, k))
// [Main]     } else {
// [Main]       const _17 = 2;
// [Main]       return $thunk(() => g12(_17, k))
// [Main]     }
// [Main]   }
// [Main]   function main19(k) {
// [Main]     return k(null)
// [Main]   }
// [Main]   return $thunk(() => main19(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
