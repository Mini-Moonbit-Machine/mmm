// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main19.55") clobbered_x: @hashset.of([])
// [Asm] Label("main19.55") clobbered_f: @hashset.of([])
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] main19.55:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main19.55_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main19.55  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("useless", Int), args: [("x", Int)], body: Let(("y", Var({val: Some(Int)})), Var("x"), Prim(Int(10), Int(1), Sub, kind=Some(Int)))}, LetRec({name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Var("x"), Prim(Int(10), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Int(10), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), []))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)]))
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: App(Var("f"), [Int(1)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Int(2)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), []))
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main19.55
// [Main]   .type main19.55, @function
// [Main] # leaf true
// [Main] main19.55:
// [Main] .main19.55_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main19.55
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main19.55
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowered function main19.55 to wasm
// [KnfOpt] freq: {useless1: Zero, dummy6: Zero, f9: Once, g12: Once, main19: Once}
// [KnfOpt] Knf inline Some(f9)
// [KnfOpt] Knf inline Some(g12)
// [KnfOpt] freq: {f9: Once, g12.19: Once, main19: Once}
// [KnfOpt] Knf inline Some(f9)
// [KnfOpt] Knf inline Some(g12)
// [KnfOpt] freq: {f9: Once, g12.28: Once, main19: Once}
// [KnfOpt] Knf inline Some(f9)
// [KnfOpt] Knf inline Some(g12)
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %8: Call(ty=Int32, f=f1, args=[Int32(val=1)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f1: Never, f2: Once})
// [CoreOpt] allow_inline: false %0 main19.55 false true true true true
// [CoreOpt] allow_inline: true %9 g12.54 true true true true true
// [CoreOpt] allow_inline: false %0 main19.55 false true true true true
// [CoreOpt] allow_inline: true %9 g12.54 true true true true true
// [CoreOpt] f9.53 is inlining Call(ty=Int32, f=f0, args=[Int32(val=2), Int32(val=1)])
// [CoreOpt] shifted callee .fn g12.54 #f0 : fn(int32, int32) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b27 {
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     return $f1
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f0
// [CoreOpt] Remove dead function: f1
