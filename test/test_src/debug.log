// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, Self(fref=f1) -> v0
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dummy6_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dummy6_1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main19_3 ->   call main19_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v6, Insn(iref=%3) -> v7, Mem(fref=f2, mref=m0) -> v3, BlockParam(bref=b0, bpref=$b.0) -> v4, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Int32(val=1), Int32(val=1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11]
// [Asm] move_origin: [v9]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v10, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v17, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [s11, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, s11, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f9_2"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v7 ← a0", color=green];
// [Asm]   r23 [label="v15 ← a1", color=green];
// [Asm]   r3 [label="v4 ← a0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v14 ← a1", color=green];
// [Asm]   r6 [label="v10 ← a1", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r1 [label="v9 ← a0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="v11 ← a0", color=green];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v2 ← a0", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v3 ← a2", color=green];
// [Asm]   r24 [label="v17 ← a1", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r21 [label="v8 ← a0", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r2 -- r25;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r2 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r10;
// [Asm]   r25 -- r26;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r3 -- r24;
// [Asm]   r0 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r23;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:a0-> 6:v10-> 7:v11-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 1:v9-> 2:s11-> 3:v4-> 24:v17-> 5:v3-> 25:v13-> 26:v14-> 22:v2-> 23:v15-> 4:s10-> 20:v7-> 21:v8"
// [Asm]   comment = "v7<-a0;v15<-a1;v4<-a0;v14<-a1;v10<-a1;v9<-a0;v11<-a0;v2<-a0;v3<-a2;v17<-a1;v13<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f9_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   li v9, 1 ->   li a0, 1
// [Asm] subst   j .f9_2_0 ->   j .f9_2_0
// [Asm] subst   mv s10, v3 ->   mv s10, a2
// [Asm] subst   ld v10, 0(v3) ->   ld a1, 0(a2)
// [Asm] subst   li v11, 2 ->   li a0, 2
// [Asm] subst   jalr v10 ->   jalr a1
// [Asm] subst   addi v15, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v3, v15, -8 ->   andi a2, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a2
// [Asm] subst   la v17, g12_7 ->   la a1, g12_7
// [Asm] subst   sd v17, 0(v3) ->   sd a1, 0(a2)
// [Asm] subst   sd v4, 8(v3) ->   sd a0, 8(a2)
// [Asm] subst   li v13, 1 ->   li a0, 1
// [Asm] subst   li v14, 1 ->   li a1, 1
// [Asm] subst   beq v13, v14, .f9_2_1 ->   beq a0, a1, .f9_2_1
// [Asm] pre_assigned_registers: Self(fref=f3) -> v0
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main19_3"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   comment = "0:a0"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main19_3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^1) -> v3, Self(fref=f7) -> v0, FnParam(fref=f7, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g12_7"];
// [Asm]   r0 [label="v0 ← a1", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r3 [label="v3 ← a0", color=green];
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v0-> 1:a0-> 2:v2-> 3:v3"
// [Asm]   comment = "v0<-a1;v2<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g12_7"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw a0, 8(a1)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: []
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of useless1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a0", color=green];
// [Asm]   r1 [label="v4 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:v4-> 2:v3-> 3:a0"
// [Asm]   comment = "v2<-a0;v3<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of useless1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v4, 10 ->   li a0, 10
// [Asm] subst   addi v3, v4, -1 ->   addi a0, a0, -1
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] g12_7:
// [Asm] # block info: defs: [v3, v0, a0, v2], uses: [v0, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .g12_7_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0]
// [Asm]   lw v3, 8(v0)  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] useless1_0:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v4, a0, v3], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .useless1_0_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: []
// [Asm]   li v4, 10  # live: [v4]
// [Asm]   addi v3, v4, -1  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] main19_3:
// [Asm] # block info: defs: [a0], uses: [zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main19_3_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main19_3  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] f9_2:
// [Asm] # block info: defs: [v4, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [s11, a0], live_out: [v4, s11]
// [Asm] # block parameters: []
// [Asm] .f9_2_4:
// [Asm]   # save_ctx1  # live: [s11, a0]
// [Asm]   mv v2, a0  # live: [s11, v2]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, s11]
// [Asm] 
// [Asm] # block info: defs: [v17, v14, s11, v15, v13, v3], uses: [v14, v13, v4, v17, s11, v15, v3], upward_exposed: [v4, s11], params_defs: [v4]
// [Asm] # live_in: [v4, s11], live_out: [s11, v3]
// [Asm] # block parameters: [v4]
// [Asm] .f9_2_0:
// [Asm]   addi v15, s11, -16  # live: [v4, v15]
// [Asm]   andi v3, v15, -8  # live: [v4, v3]
// [Asm]   mv s11, v3  # live: [v4, s11, v3]
// [Asm]   la v17, g12_7  # live: [v4, v17, s11, v3]
// [Asm]   sd v17, 0(v3)  # live: [v4, s11, v3]
// [Asm]   sd v4, 8(v3)  # live: [s11, v3]
// [Asm] # control
// [Asm]   li v13, 1  # live: [s11, v13, v3]
// [Asm]   li v14, 1  # live: [v14, s11, v13, v3]
// [Asm]   beq v13, v14, .f9_2_1  # live: [s11, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v7, v11, v10, a0, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .f9_2_2:
// [Asm]   mv s10, v3  # live: [v3]
// [Asm]   ld v10, 0(v3)  # live: [v10]
// [Asm]   # save_ctx2  # live: [v10]
// [Asm]   li v11, 2  # live: [v11, v10]
// [Asm]   mv a0, v11  # live: [v10, a0]
// [Asm]   jalr v10  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .f9_2_3:
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v4, v9], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [s11], live_out: [v4, s11]
// [Asm] # block parameters: []
// [Asm] .f9_2_1:
// [Asm] # control
// [Asm]   li v9, 1  # live: [s11, v9]
// [Asm]   mv v4, v9  # live: [v4, s11]
// [Asm]   j .f9_2_0  # live: [v4, s11]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dummy6_1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dummy6_1_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("useless", Int), args: [("x", Int)], body: Let(("y", Var({val: Some(Int)})), Var("x"), Prim(Int(10), Int(1), Sub, kind=Some(Int)))}, LetRec({name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Var("x"), Prim(Int(10), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Int(10), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), []))))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("f", Int), args: [("x", Int)], body: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)]))
// [Knf] build_knf: Bool(true)
// [Knf] build_knf: App(Var("f"), [Int(1)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("g"), [Int(2)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Unit}, App(Var("main"), []))
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g12_7
// [Main]   .type g12_7, @function
// [Main] # leaf true
// [Main] g12_7:
// [Main] .g12_7_0:
// [Main]   mv a1, s10
// [Main]   lw a0, 8(a1)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl useless1_0
// [Main]   .type useless1_0, @function
// [Main] # leaf true
// [Main] useless1_0:
// [Main] .useless1_0_0:
// [Main]   li a0, 10
// [Main]   addi a0, a0, -1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main19_3
// [Main]   .type main19_3, @function
// [Main] # leaf true
// [Main] main19_3:
// [Main] .main19_3_0:
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main19_3
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f9_2
// [Main]   .type f9_2, @function
// [Main] # leaf false
// [Main] f9_2:
// [Main] .f9_2_4:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main] 
// [Main] .f9_2_0:
// [Main]   addi a1, s11, -16
// [Main]   andi a2, a1, -8
// [Main]   mv s11, a2
// [Main]   la a1, g12_7
// [Main]   sd a1, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   li a0, 1
// [Main]   li a1, 1
// [Main]   beq a0, a1, .f9_2_1
// [Main] 
// [Main] .f9_2_2:
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   li a0, 2
// [Main]   jalr a1
// [Main] 
// [Main] .f9_2_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .f9_2_1:
// [Main]   li a0, 1
// [Main]   j .f9_2_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dummy6_1
// [Main]   .type dummy6_1, @function
// [Main] # leaf true
// [Main] dummy6_1:
// [Main] .dummy6_1_0:
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %2: Call(ty=Int32, f=f2, args=[Int32(val=1)])
