// [Main] function thunk_main(k) {
// [Main]   function useless_1(x_3, k) {
// [Main]     const _4 = 10;
// [Main]     const _5 = 1;
// [Main]     return $thunk(() => k(_4 - _5))
// [Main]   }
// [Main]   function dummy_6(x_8, k) {
// [Main]     return $thunk(() => k(x_8))
// [Main]   }
// [Main]   function f_9(x_11, k) {
// [Main]     function g_12(y_14, k) {
// [Main]       return $thunk(() => k(x_11))
// [Main]     }
// [Main]     const _15 = true;
// [Main]     const _18 = true;
// [Main]     if (_15 === _18) {
// [Main]       const _16 = 1;
// [Main]       return $thunk(() => f_9(_16, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       const _17 = 2;
// [Main]       return $thunk(() => g_12(_17, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_19(k) {
// [Main]     return $thunk(() => k(null))
// [Main]   }
// [Main]   return $thunk(() => main_19(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("useless", Int), args: [("x", Int)], body: Let(("y", Var(None)), Var("x"), Prim(Int(10), Int(1), Sub, kind=None))}, LetRec({tyvars: [], name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({tyvars: [], name: ("f", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Unit}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("y", Var(None)), Var("x"), Prim(Int(10), Int(1), Sub, kind=None)) against Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Prim(Int(10), Int(1), Sub, kind=None) against Int
// [Typer] check: Int(10) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("dummy", Int), args: [("x", Int)], body: Var("x")}, LetRec({tyvars: [], name: ("f", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Unit}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Unit}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Var("x")}, If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)]))) against Int
// [Typer] typevars: []
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(Bool(true), App(Var("f"), [Int(1)]), App(Var("g"), [Int(2)])) against Int
// [Typer] check: Bool(true) against Bool
// [Typer] check: App(Var("f"), [Int(1)]) against Int
// [Typer] infer: Int(1)
// [Typer] check: Var("f") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("g"), [Int(2)]) against Int
// [Typer] infer: Int(2)
// [Typer] check: Var("g") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Unit}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
