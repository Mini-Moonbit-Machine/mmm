let rec s.1: ((Z) -> Y) -> (Z) -> X = (x.3: (Z) -> (Y) -> X) {
  let rec f.4: (Z) -> X = (y.6: (Z) -> Y) {
    let rec g.7: X = (z.9: Z) {
      let _10: (Y) -> X = Apply(x.3, [z.9, ])
      let _11: Y = Apply(y.6, [z.9, ])
      Apply(_10, [_11, ])
    }
    Var(g.7)
  }
  Var(f.4)
}
let rec k.12: (Y) -> X = (x.14: X) {
  let rec f.15: X = (y.17: Y) {
    Var(x.14)
  }
  Var(f.15)
}
let rec i.18: X = (x.20: X) {
  Var(x.20)
}
let rec main.21: Unit = () {
  let _22: ((Z) -> Y) -> (Z) -> X = Apply(s.1, [i.18, ])
  let _23: (Y) -> X = Apply(k.12, [_22, ])
  let _24: ((Z) -> Y) -> (Z) -> X = Apply(s.1, [_23, ])
  let rev_apply.25: (Z) -> X = Apply(_24, [k.12, ])
  let rec printi.26: Unit = (x.28: Int) {
    ExtApply(minimbt_print_int, [x.28, ])
  }
  let _29: Int = Int(2)
  let _30: ((Int) -> Unit) -> Unit = Apply(rev_apply.25, [_29, ])
  Apply(_30, [printi.26, ])
}
Apply(main.21, [])
