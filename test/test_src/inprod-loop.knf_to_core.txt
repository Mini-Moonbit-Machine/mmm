# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main17.31 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(3)> <- [..] = 1.23
    let _ = alloc <m1: array[double] heap(3)> <- [..] = 4.56
    let %2: double = call f0(f1.m0, f1.m1, 0, 2)
    let %3: double = mul(1000000, %2)
    let %4: int32 = conv.d2i.rtz(%3)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn inprod1.30 #f0 : fn(array[double], array[double], double, int32) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f3)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = load double offset($f0, $f3 * @64)
    let %2: double = load double offset($f1, $f3 * @64)
    let %3: double = mul(%1, %2)
    let %4: double = add($f2, %3)
    let %5: int32 = sub($f3, 1)
    let %6: double = call f0($f0, $f1, %4, %5)
    jump b3(%6)
  }
  .bb #b2 () {
    jump b3($f2)
  }
  .bb #b3 (double) {
    return $b3.0
  }
}
.thunk ::0 start

