// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.440 ->   call main.440
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%12) -> fv23, BlockParam(bref=b12, bpref=$b.0) -> v14, BlockParam(bref=b2, bpref=$b.0) -> v8, Insn(iref=%15) -> v26, FnParam(fref=f2, fpref=$f.4) -> v6, Insn(iref=%9) -> fv20, Self(fref=f2) -> v0, Insn(iref=%8) -> v19, Insn(iref=%10) -> v21, Insn(iref=%14) -> v25, Insn(iref=%5) -> v17, Insn(iref=%0) -> v9, Insn(iref=%4) -> v13, FnParam(fref=f2, fpref=$f.5) -> v7, Insn(iref=%3) -> v16, Insn(iref=%13) -> fv24, Insn(iref=%7) -> fv18, BlockParam(bref=b5, bpref=$b.0) -> v10, BlockParam(bref=b6, bpref=$b.0) -> v15, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v11, Insn(iref=%11) -> fv22, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b9, bpref=$b.0) -> v12, FnParam(fref=f2, fpref=$f.2) -> v4, FnParam(fref=f2, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%9), Insn(iref=%11)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b9, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v5, v46, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v5, zero, v7, v8, v4, v47, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v7, v8, v4, v17, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v5, zero, v7, v8, v4, v17, v6, v43, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, zero, v7, v8, v4, v17, v6, v12, v44, v3]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [v5, zero, v7, v8, v4, v17, v6, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v5, zero, v7, v8, v4, v17, v6, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v5, zero, v7, v8, v4, v41, v17, v6, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v7, v8, v19, v4, v6, v17, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v3, v5, zero, v7, v8, v19, v4, v37, v6, v17, v12, fv18]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, zero, v7, v8, v4, v38, v6, v17, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v5, zero, v7, v8, fv20, v4, v17, v6, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v3, v5, zero, v7, v8, fv20, v4, v17, v6, v12, fv18, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v3, v5, zero, v7, v8, fv20, v35, v4, v17, v6, v12, fv18]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v7, v8, fv20, v4, v6, v17, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v3, v5, v21, zero, v7, v8, fv20, v4, v6, v17, v12, fv18, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v3, v5, zero, v7, v8, fv20, v4, v32, v6, v17, v12, fv18]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, v5, zero, v7, v8, fv20, v4, v17, v6, v12, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv24, v5, zero, v7, v8, v4, v6, v17, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v28]
// [Asm] live_set: [fv24, v5, zero, v7, v8, v4, v6, v17, v12, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [fv24, v5, zero, v29, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v5, zero, v26, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v26]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop2.442"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r33 [label="v14 ← a0", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r26 [label="v21 ← t0", color=green];
// [Asm]   r6 [label="v6 ← a4", color=green];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="v8 ← a3", color=green];
// [Asm]   r29 [label="v28 ← t0", color=green];
// [Asm]   r35 [label="v15 ← a0", color=green];
// [Asm]   r7 [label="v3 ← a7", color=green];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r8 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a6", color=green];
// [Asm]   r36 [label="v16 ← a0", color=green];
// [Asm]   r32 [label="a0", color=blue];
// [Asm]   r24 [label="v34 ← t0", color=green];
// [Asm]   r15 [label="v47 ← a5", color=green];
// [Asm]   r31 [label="v26 ← a0", color=green];
// [Asm]   r17 [label="v43 ← t0", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r37 [label="v10 ← a0", color=green];
// [Asm]   r20 [label="v41 ← t0", color=green];
// [Asm]   r23 [label="v38 ← t0", color=green];
// [Asm]   r3 [label="v7 ← a2", color=green];
// [Asm]   r27 [label="v31 ← t1", color=green];
// [Asm]   r1 [label="v5 ← a1", color=green];
// [Asm]   r28 [label="v32 ← t0", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r34 [label="v11 ← a0", color=green];
// [Asm]   r22 [label="v37 ← t1", color=green];
// [Asm]   r14 [label="v46 ← a5", color=green];
// [Asm]   r30 [label="v29 ← a5", color=green];
// [Asm]   r25 [label="v35 ← t0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v17 ← a5", color=green];
// [Asm]   r18 [label="v44 ← t0", color=green];
// [Asm]   r19 [label="v40 ← t0", color=green];
// [Asm]   r21 [label="v19 ← t0", color=green];
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r16 -- r20;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r28;
// [Asm]   r5 -- r29;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r0 -- r16;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r16 -- r29;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r2 -- r36;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r16 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r30;
// [Asm]   r0 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r6 -- r29;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r16 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r7;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r16 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r16 -- r26;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r31;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v12-> 1:v5-> 2:zero-> 3:v7-> 4:v8-> 5:v4-> 6:v6-> 7:v3-> 14:v46-> 15:v47-> 16:v17-> 17:v43-> 18:v44-> 19:v40-> 20:v41-> 21:v19-> 22:v37-> 23:v38-> 24:v34-> 25:v35-> 26:v21-> 27:v31-> 28:v32-> 29:v28-> 30:v29-> 31:v26-> 34:v11-> 35:v15-> 8:v2-> 33:v14-> 36:v16-> 9:a5-> 10:a4-> 13:a3-> 11:a2-> 12:a1-> 32:a0-> 37:v10"
// [Asm]   comment = "v12<-a0;v14<-a0;v21<-t0;v6<-a4;v8<-a3;v28<-t0;v15<-a0;v3<-a7;v2<-a0;v4<-a6;v16<-a0;v34<-t0;v47<-a5;v26<-a0;v43<-t0;v10<-a0;v41<-t0;v38<-t0;v7<-a2;v31<-t1;v5<-a1;v32<-t0;v11<-a0;v37<-t1;v46<-a5;v29<-a5;v35<-t0;v17<-a5;v44<-t0;v40<-t0;v19<-t0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop2.442"];
// [Asm]   r0 [label="fv18 ← fa0", color=green];
// [Asm]   r2 [label="fv22 ← fa2", color=green];
// [Asm]   r1 [label="fv20 ← fa1", color=green];
// [Asm]   r3 [label="fv24 ← fa0", color=green];
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv18-> 1:fv20-> 2:fv22-> 3:fv24"
// [Asm]   comment = "fv18<-fa0;fv22<-fa2;fv20<-fa1;fv24<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a7, a1
// [Asm] subst   mv v4, a2 ->   mv a6, a2
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v7, a5 ->   mv a2, a5
// [Asm] subst   mv v8, v2 ->   mv a3, a0
// [Asm] subst   blt v12, zero, .loop2.442_11 ->   blt a0, zero, .loop2.442_11
// [Asm] subst   slliw v46, v7, 3 ->   slliw a5, a2, 3
// [Asm] subst   add v47, v6, v46 ->   add a5, a4, a5
// [Asm] subst   ld v17, 0(v47) ->   ld a5, 0(a5)
// [Asm] subst   slliw v43, v8, 3 ->   slliw t0, a3, 3
// [Asm] subst   add v44, v17, v43 ->   add t0, a5, t0
// [Asm] subst   fld fv18, 0(v44) ->   fld fa0, 0(t0)
// [Asm] subst   slliw v40, v7, 3 ->   slliw t0, a2, 3
// [Asm] subst   add v41, v4, v40 ->   add t0, a6, t0
// [Asm] subst   ld v19, 0(v41) ->   ld t0, 0(t0)
// [Asm] subst   slliw v37, v12, 3 ->   slliw t1, a0, 3
// [Asm] subst   add v38, v19, v37 ->   add t0, t0, t1
// [Asm] subst   fld fv20, 0(v38) ->   fld fa1, 0(t0)
// [Asm] subst   slliw v34, v12, 3 ->   slliw t0, a0, 3
// [Asm] subst   add v35, v5, v34 ->   add t0, a1, t0
// [Asm] subst   ld v21, 0(v35) ->   ld t0, 0(t0)
// [Asm] subst   slliw v31, v8, 3 ->   slliw t1, a3, 3
// [Asm] subst   add v32, v21, v31 ->   add t0, t0, t1
// [Asm] subst   fld fv22, 0(v32) ->   fld fa2, 0(t0)
// [Asm] subst   fmadd.d fv24, fv20, fv22, fv18 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v28, v8, 3 ->   slliw t0, a3, 3
// [Asm] subst   add v29, v17, v28 ->   add a5, a5, t0
// [Asm] subst   fsd fv24, 0(v29) ->   fsd fa0, 0(a5)
// [Asm] subst   addi v26, v12, -1 ->   addi a0, a0, -1
// [Asm] subst   j .loop2.442_9 ->   j .loop2.442_9
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] subst   addi v11, v3, -1 ->   addi a0, a7, -1
// [Asm] subst   addi v16, v8, -1 ->   addi a0, a3, -1
// [Asm] subst   mv v8, v16 ->   mv a3, a0
// [Asm] subst   j .loop2.442_2 ->   j .loop2.442_2
// [Asm] subst   blt v8, zero, .loop2.442_4 ->   blt a3, zero, .loop2.442_4
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v32, Insn(iref=%15) -> v18, Insn(iref=%41) -> v42, Insn(iref=%33) -> v34, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%50) -> v51, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%39) -> fv40, Insn(iref=%51) -> v52, Self(fref=f3) -> v0, Insn(iref=%4) -> v7, Insn(iref=%49) -> fv50, Insn(iref=%42) -> v43, Insn(iref=%44) -> fv45, Insn(iref=%32) -> v56, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%35) -> v36, Insn(iref=%31) -> v55, Mem(fref=f3, mref=m0) -> v2, Insn(iref=%28) -> v31, Insn(iref=%38) -> v39, Insn(iref=%46) -> v47, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%37) -> v38, Insn(iref=%45) -> v46, Insn(iref=%29) -> v33, Insn(iref=%5) -> v8, Insn(iref=%47) -> v48, Insn(iref=%19) -> v22, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Insn(iref=%7) -> v10, BlockParam(bref=b5, bpref=$b.0) -> v53, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%48) -> v49, Insn(iref=%2) -> v5, Insn(iref=%20) -> v23, Insn(iref=%43) -> v44, Insn(iref=%30) -> v54, Insn(iref=%21) -> v24, Insn(iref=%34) -> fv35, Insn(iref=%36) -> v37, Insn(iref=%40) -> v41, Insn(iref=%12) -> v15
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v124]
// [Asm] live_set: [v124, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v124 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [v124]
// [Asm] defined: a0 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v2, zero, a0, v125]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v125]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v121]
// [Asm] live_set: [v4, v121, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v121 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: [v121]
// [Asm] defined: a0 is X
// [Asm] defs: [v122]
// [Asm] live_set: [v2, v4, zero, a0, v122]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0, v2]
// [Asm] move_origin: [v122]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v119]
// [Asm] live_set: [v4, v5, zero, v119, v2]
// [Asm] move_origin: []
// [Asm] defined: v119 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, v5, zero, a0, v119]
// [Asm] move_origin: [v119]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v5, zero, a0, v2]
// [Asm] move_origin: [v119]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, v5, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v116, v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: [fv117]
// [Asm] live_set: [v4, v6, v5, fv117, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv117 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v6, v5, zero, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v4, v6, v5, zero, v9, v113]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: [fv114]
// [Asm] live_set: [v4, v6, v5, zero, v9, fv114]
// [Asm] move_origin: []
// [Asm] defined: fv114 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v4, v6, v5, zero, v110]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: [fv111]
// [Asm] live_set: [fv111, v11, v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: fv111 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v5, v6, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v107, v4, v5, v6, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [fv108]
// [Asm] live_set: [v4, fv108, v5, v6, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: fv108 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v6, v5, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v104, v4, v6, v5, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [fv105]
// [Asm] live_set: [v4, fv105, v6, v5, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: fv105 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v5, v6, v17, zero]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v4, v5, v6, v17, zero, v101]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [fv102]
// [Asm] live_set: [v4, v5, v6, v17, fv102, zero]
// [Asm] move_origin: []
// [Asm] defined: fv102 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v19, v4, v5, v6, zero, v98]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [fv99]
// [Asm] live_set: [v19, v4, v5, v6, fv99, zero]
// [Asm] move_origin: []
// [Asm] defined: fv99 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v4, v5, v6, v21, zero]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v95, v4, v5, v6, v21, zero]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [fv96]
// [Asm] live_set: [v4, v5, v6, v21, zero, fv96]
// [Asm] move_origin: []
// [Asm] defined: fv96 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v4, v5, v6, zero, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v92, v4, v5, v6, zero, v23]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [fv93]
// [Asm] live_set: [v4, v5, v6, zero, v23, fv93]
// [Asm] move_origin: []
// [Asm] defined: fv93 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v25, v4, v5, v6, zero, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [fv90]
// [Asm] live_set: [fv90, v25, v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: fv90 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v4, v6, v5, zero, v27]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v4, v6, v5, v86, zero, v27]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [fv87]
// [Asm] live_set: [fv87, v4, v6, v5, zero, v27]
// [Asm] move_origin: []
// [Asm] defined: fv87 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v4, v6, v5, zero, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v4, v6, v5, v83, zero, v29]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [fv84]
// [Asm] live_set: [v4, fv84, v6, v5, zero, v29]
// [Asm] move_origin: []
// [Asm] defined: fv84 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [v4, v81, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v4, v6, v5, v31, zero]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v4, v6, v5, zero]
// [Asm] move_origin: [v31]
// [Asm] defined: v32 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v5, zero, v4, v32, v6, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v5, zero, v4, v32, v6, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v32, v6, v54]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v32, v6]
// [Asm] move_origin: [v54]
// [Asm] defined: a0 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, zero, a0, v4, v32, v6]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, v32, a1, v6]
// [Asm] move_origin: [v58]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, v32, a2, a1, v6]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, v4, v32, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v5, zero, a0, a4, v4, v32, a2, a1, v6, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v5, a5, zero, a0, a4, v4, v32, a2, a1, v6, a3]
// [Asm] move_origin: [v32]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v32, v5, v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v55]
// [Asm] live_set: [v4, v32, v5, v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v32, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v4, v6, v5, v56, zero]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v4, v6, v5, zero]
// [Asm] move_origin: [v56]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v32, v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v6, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [fv35]
// [Asm] live_set: [v6, fv35, zero]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v6, zero, v36]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v36]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v36]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [fv40]
// [Asm] live_set: [v6, zero, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v41, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v41, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v41]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v6, v44, zero]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv45]
// [Asm] live_set: [v6, fv45, zero]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, v46, zero]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v46, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v46]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v48]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v49, zero]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [fv50]
// [Asm] live_set: [fv50, zero]
// [Asm] move_origin: []
// [Asm] defined: fv50 is F
// [Asm] defs: [v51]
// [Asm] live_set: [zero, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v51]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v51]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v52]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v53]
// [Asm] move_origin: [zero]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v32, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v53]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.440"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r46 [label="v29 ← a0", color=green];
// [Asm]   r33 [label="v104 ← a1", color=green];
// [Asm]   r59 [label="v38 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r44 [label="v27 ← a0", color=green];
// [Asm]   r53 [label="v58 ← a1", color=green];
// [Asm]   r56 [label="v34 ← a0", color=green];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r5 [label="v125 ← a1", color=green];
// [Asm]   r54 [label="v55 ← a0", color=green];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r43 [label="v89 ← a1", color=green];
// [Asm]   r31 [label="v107 ← a1", color=green];
// [Asm]   r39 [label="v95 ← a1", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r52 [label="v54 ← a0", color=green];
// [Asm]   r65 [label="v46 ← a0", color=green];
// [Asm]   r20 [label="v122 ← a1", color=green];
// [Asm]   r61 [label="v41 ← a0", color=green];
// [Asm]   r23 [label="v6 ← s0", color=green];
// [Asm]   r3 [label="v124 ← a0", color=green];
// [Asm]   r67 [label="v48 ← a0", color=green];
// [Asm]   r27 [label="v113 ← a1", color=green];
// [Asm]   r62 [label="v42 ← a0", color=green];
// [Asm]   r40 [label="v23 ← a0", color=green];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r58 [label="v37 ← a0", color=green];
// [Asm]   r34 [label="v17 ← a0", color=green];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r51 [label="v60 ← a0", color=green];
// [Asm]   r55 [label="v56 ← a0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r21 [label="v5 ← s2", color=green];
// [Asm]   r60 [label="v39 ← a0", color=green];
// [Asm]   r38 [label="v21 ← a0", color=green];
// [Asm]   r47 [label="v83 ← a1", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r42 [label="v25 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v110 ← a1", color=green];
// [Asm]   r35 [label="v101 ← a1", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r64 [label="v44 ← a0", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r36 [label="v19 ← a0", color=green];
// [Asm]   r66 [label="v47 ← a0", color=green];
// [Asm]   r32 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r49 [label="v31 ← a0", color=green];
// [Asm]   r57 [label="v36 ← a0", color=green];
// [Asm]   r68 [label="v49 ← a0", color=green];
// [Asm]   r70 [label="v52 ← a0", color=green];
// [Asm]   r48 [label="v81 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r37 [label="v98 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r41 [label="v92 ← a1", color=green];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r71 [label="v53 ← a0", color=green];
// [Asm]   r69 [label="v51 ← a0", color=green];
// [Asm]   r22 [label="v119 ← a0", color=green];
// [Asm]   r50 [label="v32 ← s3", color=green];
// [Asm]   r30 [label="v13 ← a0", color=green];
// [Asm]   r45 [label="v86 ← a1", color=green];
// [Asm]   r25 [label="v116 ← a1", color=green];
// [Asm]   r63 [label="v43 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r18 [label="v4 ← s1", color=green];
// [Asm]   r19 [label="v121 ← a0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r23 -- r36;
// [Asm]   r18 -- r49;
// [Asm]   r1 -- r26;
// [Asm]   r15 -- r50;
// [Asm]   r1 -- r30;
// [Asm]   r23 -- r46;
// [Asm]   r23 -- r51;
// [Asm]   r1 -- r57;
// [Asm]   r21 -- r38;
// [Asm]   r18 -- r42;
// [Asm]   r23 -- r56;
// [Asm]   r1 -- r45;
// [Asm]   r23 -- r35;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r45;
// [Asm]   r0 -- r16;
// [Asm]   r18 -- r44;
// [Asm]   r18 -- r34;
// [Asm]   r1 -- r68;
// [Asm]   r1 -- r50;
// [Asm]   r23 -- r53;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r21 -- r33;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r10 -- r18;
// [Asm]   r21 -- r48;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r1 -- r40;
// [Asm]   r18 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r18 -- r46;
// [Asm]   r23 -- r54;
// [Asm]   r23 -- r58;
// [Asm]   r1 -- r2;
// [Asm]   r21 -- r50;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r33;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r6 -- r50;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r23 -- r55;
// [Asm]   r18 -- r37;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r39;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r23 -- r37;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r21 -- r46;
// [Asm]   r18 -- r43;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r23 -- r67;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r23 -- r50;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r18 -- r40;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r50 -- r54;
// [Asm]   r21 -- r34;
// [Asm]   r16 -- r50;
// [Asm]   r4 -- r18;
// [Asm]   r23 -- r39;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r12 -- r50;
// [Asm]   r23 -- r45;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r23;
// [Asm]   r18 -- r39;
// [Asm]   r18 -- r51;
// [Asm]   r23 -- r26;
// [Asm]   r14 -- r50;
// [Asm]   r18 -- r53;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r32 -- r33;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r23 -- r30;
// [Asm]   r13 -- r23;
// [Asm]   r50 -- r53;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r8 -- r18;
// [Asm]   r23 -- r42;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r18 -- r47;
// [Asm]   r23 -- r40;
// [Asm]   r23 -- r59;
// [Asm]   r7 -- r18;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r17 -- r50;
// [Asm]   r0 -- r20;
// [Asm]   r1 -- r54;
// [Asm]   r8 -- r50;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r42;
// [Asm]   r18 -- r23;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r43;
// [Asm]   r23 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r21 -- r35;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r37;
// [Asm]   r21 -- r53;
// [Asm]   r18 -- r55;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r63;
// [Asm]   r30 -- r31;
// [Asm]   r1 -- r69;
// [Asm]   r18 -- r27;
// [Asm]   r23 -- r52;
// [Asm]   r13 -- r50;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r23 -- r65;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r42 -- r43;
// [Asm]   r21 -- r54;
// [Asm]   r1 -- r62;
// [Asm]   r1 -- r67;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r46;
// [Asm]   r18 -- r50;
// [Asm]   r23 -- r64;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r15 -- r18;
// [Asm]   r18 -- r26;
// [Asm]   r50 -- r51;
// [Asm]   r18 -- r52;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r18 -- r30;
// [Asm]   r23 -- r32;
// [Asm]   r50 -- r52;
// [Asm]   r23 -- r41;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r23 -- r38;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r44;
// [Asm]   r21 -- r22;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r21 -- r37;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r23 -- r33;
// [Asm]   r17 -- r18;
// [Asm]   r23 -- r57;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r16;
// [Asm]   r23 -- r63;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r23 -- r49;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r21 -- r40;
// [Asm]   r18 -- r29;
// [Asm]   r23 -- r60;
// [Asm]   r14 -- r23;
// [Asm]   r46 -- r47;
// [Asm]   r1 -- r32;
// [Asm]   r23 -- r62;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r23 -- r34;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r1 -- r65;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r21 -- r47;
// [Asm]   r7 -- r9;
// [Asm]   r1 -- r66;
// [Asm]   r21 -- r44;
// [Asm]   r18 -- r36;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r21 -- r52;
// [Asm]   r18 -- r32;
// [Asm]   r10 -- r50;
// [Asm]   r23 -- r47;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r59;
// [Asm]   r23 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r61;
// [Asm]   r10 -- r23;
// [Asm]   r11 -- r50;
// [Asm]   r21 -- r42;
// [Asm]   r18 -- r48;
// [Asm]   r18 -- r41;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r51;
// [Asm]   r21 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r21 -- r41;
// [Asm]   r0 -- r12;
// [Asm]   r23 -- r66;
// [Asm]   r18 -- r38;
// [Asm]   r4 -- r17;
// [Asm]   r23 -- r43;
// [Asm]   r23 -- r44;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r50;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r21 -- r55;
// [Asm]   r1 -- r3;
// [Asm]   r23 -- r48;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r53;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v124-> 4:a0-> 5:v125-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 18:v4-> 21:v5-> 23:v6-> 50:v32-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 53:v58-> 51:v60-> 52:v54-> 54:v55-> 20:v122-> 22:v119-> 24:v7-> 25:v116-> 26:v9-> 27:v113-> 28:v11-> 29:v110-> 30:v13-> 31:v107-> 32:v15-> 33:v104-> 34:v17-> 35:v101-> 36:v19-> 37:v98-> 38:v21-> 39:v95-> 40:v23-> 41:v92-> 42:v25-> 43:v89-> 44:v27-> 45:v86-> 46:v29-> 47:v83-> 48:v81-> 49:v31-> 55:v56-> 19:v121-> 56:v34-> 57:v36-> 58:v37-> 59:v38-> 60:v39-> 61:v41-> 62:v42-> 63:v43-> 64:v44-> 65:v46-> 66:v47-> 67:v48-> 68:v49-> 69:v51-> 70:v52-> 71:v53"
// [Asm]   comment = "v2<-s0;v29<-a0;v104<-a1;v38<-a0;v9<-a0;v27<-a0;v58<-a1;v34<-a0;v125<-a1;v55<-a0;v7<-a0;v89<-a1;v107<-a1;v95<-a1;v54<-a0;v46<-a0;v122<-a1;v41<-a0;v6<-s0;v124<-a0;v48<-a0;v113<-a1;v42<-a0;v23<-a0;v37<-a0;v17<-a0;v60<-a0;v56<-a0;v5<-s2;v39<-a0;v21<-a0;v83<-a1;v25<-a0;v110<-a1;v101<-a1;v44<-a0;v19<-a0;v47<-a0;v15<-a0;v31<-a0;v36<-a0;v49<-a0;v52<-a0;v81<-a0;v98<-a1;v92<-a1;v11<-a0;v53<-a0;v51<-a0;v119<-a0;v32<-s3;v13<-a0;v86<-a1;v116<-a1;v43<-a0;v4<-s1;v121<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.440"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv45 ← fa0", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv96 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv87 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r24 [label="fv102 ← fa0", color=green];
// [Asm]   r32 [label="fv40 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r31 [label="fv35 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv114 ← fa0", color=green];
// [Asm]   r23 [label="fv105 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv93 ← fa0", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv90 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv50 ← fa0", color=green];
// [Asm]   r22 [label="fv108 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv84 ← fa0", color=green];
// [Asm]   r25 [label="fv99 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv117 ← fa0", color=green];
// [Asm]   r21 [label="fv111 ← fa0", color=green];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv117-> 20:fv114-> 21:fv111-> 22:fv108-> 23:fv105-> 24:fv102-> 25:fv99-> 26:fv96-> 27:fv93-> 28:fv90-> 29:fv87-> 30:fv84-> 31:fv35-> 32:fv40-> 33:fv45-> 34:fv50"
// [Asm]   comment = "fv45<-fa0;fv96<-fa0;fv87<-fa0;fv102<-fa0;fv40<-fa0;fv35<-fa0;fv114<-fa0;fv105<-fa0;fv93<-fa0;fv90<-fa0;fv50<-fa0;fv108<-fa0;fv84<-fa0;fv99<-fa0;fv117<-fa0;fv111<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v124, 2 ->   li a0, 2
// [Asm] subst   li v125, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.441 ->   call gen_arr.441
// [Asm] subst   mv v4, a0 ->   mv s1, a0
// [Asm] subst   li v121, 3 ->   li a0, 3
// [Asm] subst   li v122, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.441 ->   call gen_arr.441
// [Asm] subst   mv v5, a0 ->   mv s2, a0
// [Asm] subst   li v119, 2 ->   li a0, 2
// [Asm] subst   mv a1, v119 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.441 ->   call gen_arr.441
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v116, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv117, v116 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv117, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v113, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv114, v113 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv114, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v110, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv111, v110 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv111, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v107, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv108, v107 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv108, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v104, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv105, v104 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv105, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v101, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv102, v101 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv102, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v98, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv99, v98 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv99, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v95, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv96, v95 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv96, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v92, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv93, v92 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv93, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v89, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv90, v89 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv90, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v86, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv87, v86 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv87, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v83, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv84, v83 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv84, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v81, 2 ->   li a0, 2
// [Asm] subst   addi v31, v81, -1 ->   addi a0, a0, -1
// [Asm] subst   mv v32, v31 ->   mv s3, a0
// [Asm] subst   li v60, 2 ->   li a0, 2
// [Asm] subst   addi v54, v60, -1 ->   addi a0, a0, -1
// [Asm] subst   li v58, 3 ->   li a1, 3
// [Asm] subst   mv a2, v4 ->   mv a2, s1
// [Asm] subst   mv a3, v5 ->   mv a3, s2
// [Asm] subst   mv a4, v6 ->   mv a4, s0
// [Asm] subst   mv a5, v32 ->   mv a5, s3
// [Asm] subst   call loop2.442 ->   call loop2.442
// [Asm] subst   addi v56, v32, -1 ->   addi a0, s3, -1
// [Asm] subst   mv v32, v56 ->   mv s3, a0
// [Asm] subst   j .main.440_2 ->   j .main.440_2
// [Asm] subst   ld v34, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv35, 0(v34) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v36, fv35, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v39, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv40, 8(v39) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v41, fv40, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v44, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv45, 0(v44) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v46, fv45, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v49, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv50, 8(v49) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v51, fv50, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv v53, zero ->   mv a0, zero
// [Asm] subst   bge v32, zero, .main.440_3 ->   bge s3, zero, .main.440_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v12, FnParam(fref=f0, fpref=$f.1) -> v3, BlockParam(bref=b2, bpref=$b.0) -> v9, FnParam(fref=f0, fpref=$f.2) -> v4, Mem(fref=f0, mref=m1) -> v6, BlockParam(bref=b5, bpref=$b.0) -> v11, Self(fref=f0) -> v0, Mem(fref=f0, mref=m0) -> v5, Insn(iref=%2) -> v10, Insn(iref=%1) -> v8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v14, Insn(iref=%0) -> v7, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v6, s11, v9, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v6, v17, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v21, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, zero, v4, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gen_arr.441"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v17 ← a1", color=green];
// [Asm]   r26 [label="v8 ← a0", color=green];
// [Asm]   r27 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v6 ← a0", color=green];
// [Asm]   r13 [label="v4 ← a2", color=green];
// [Asm]   r4 [label="v9 ← a2", color=green];
// [Asm]   r1 [label="v5 ← s0", color=green];
// [Asm]   r11 [label="v2 ← s2", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v14 ← a0", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v21 ← a0", color=green];
// [Asm]   r8 [label="v16 ← a1", color=green];
// [Asm]   r5 [label="v3 ← s1", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="a0", color=blue];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r15;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r11 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r12 -- r15;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v18-> 1:v5-> 2:zero-> 3:s11-> 4:v9-> 5:v3-> 6:v6-> 7:a1-> 8:v16-> 9:v17-> 11:v2-> 12:a2-> 15:a0-> 13:v4-> 14:v21-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 10:v14-> 26:v8-> 27:v11"
// [Asm]   comment = "v18<-a0;v17<-a1;v8<-a0;v11<-a0;v6<-a0;v4<-a2;v9<-a2;v5<-s0;v2<-s2;v14<-a0;v21<-a0;v16<-a1;v3<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gen_arr.441"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v18, v3, 3 ->   slliw a0, s1, 3
// [Asm] subst   sub v6, s11, v18 ->   sub a0, s11, a0
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   slliw v16, v9, 3 ->   slliw a1, a2, 3
// [Asm] subst   add v17, v5, v16 ->   add a1, s0, a1
// [Asm] subst   sd v6, 0(v17) ->   sd a0, 0(a1)
// [Asm] subst   addi v14, v9, -1 ->   addi a0, a2, -1
// [Asm] subst   mv v9, v14 ->   mv a2, a0
// [Asm] subst   j .gen_arr.441_2 ->   j .gen_arr.441_2
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   slliw v21, v2, 3 ->   slliw a0, s2, 3
// [Asm] subst   sub v5, s11, v21 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s2
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v8, v2, -1 ->   addi a0, s2, -1
// [Asm] subst   mv v9, v8 ->   mv a2, a0
// [Asm] subst   blt v9, zero, .gen_arr.441_4 ->   blt a2, zero, .gen_arr.441_4
// [Asm] subst   mv v11, v5 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] loop2.442:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v3], uses: [a5, a0, a4, a2, a1, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .loop2.442_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v8]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: [v8]
// [Asm] .loop2.442_2:
// [Asm] # control
// [Asm]   blt v8, zero, .loop2.442_4  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v11, v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .loop2.442_3:
// [Asm]   addi v11, v3, -1  # live: [v11, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop2.442_7:
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v12, zero], upward_exposed: [v12, zero], params_defs: [v12]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v12, v3], live_out: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: [v12]
// [Asm] .loop2.442_9:
// [Asm] # control
// [Asm]   blt v12, zero, .loop2.442_11  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [fv24, v46, v21, v26, fv20, v41, v37, v32, v17, v43, v12, v44, v28, v31, fv22, v29, v35, v19, v47, v38, fv18, v34, v40], uses: [fv24, v26, v7, fv20, v41, v32, v12, v44, v28, fv22, v29, v8, v19, v47, v4, v6, v34, v46, v5, v21, v37, v17, v43, v31, v35, v38, fv18, v40], upward_exposed: [v5, v8, v7, v4, v6, v12], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v12, v3], live_out: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop2.442_10:
// [Asm]   slliw v46, v7, 3  # live: [v5, v46, zero, v7, v8, v4, v6, v12, v3]
// [Asm]   add v47, v6, v46  # live: [v5, zero, v7, v8, v4, v47, v6, v12, v3]
// [Asm]   ld v17, 0(v47)  # live: [v5, zero, v7, v8, v4, v17, v6, v12, v3]
// [Asm]   slliw v43, v8, 3  # live: [v5, zero, v7, v8, v4, v17, v6, v43, v12, v3]
// [Asm]   add v44, v17, v43  # live: [v5, zero, v7, v8, v4, v17, v6, v12, v44, v3]
// [Asm]   fld fv18, 0(v44)  # live: [v5, zero, v7, v8, v4, v17, v6, v12, fv18, v3]
// [Asm]   slliw v40, v7, 3  # live: [v40, v5, zero, v7, v8, v4, v17, v6, v12, fv18, v3]
// [Asm]   add v41, v4, v40  # live: [v5, zero, v7, v8, v4, v41, v17, v6, v12, fv18, v3]
// [Asm]   ld v19, 0(v41)  # live: [v5, zero, v7, v8, v19, v4, v6, v17, v12, fv18, v3]
// [Asm]   slliw v37, v12, 3  # live: [v3, v5, zero, v7, v8, v19, v4, v37, v6, v17, v12, fv18]
// [Asm]   add v38, v19, v37  # live: [v5, zero, v7, v8, v4, v38, v6, v17, v12, fv18, v3]
// [Asm]   fld fv20, 0(v38)  # live: [v5, zero, v7, v8, fv20, v4, v17, v6, v12, fv18, v3]
// [Asm]   slliw v34, v12, 3  # live: [v3, v5, zero, v7, v8, fv20, v4, v17, v6, v12, fv18, v34]
// [Asm]   add v35, v5, v34  # live: [v3, v5, zero, v7, v8, fv20, v35, v4, v17, v6, v12, fv18]
// [Asm]   ld v21, 0(v35)  # live: [v5, v21, zero, v7, v8, fv20, v4, v6, v17, v12, fv18, v3]
// [Asm]   slliw v31, v8, 3  # live: [v3, v5, v21, zero, v7, v8, fv20, v4, v6, v17, v12, fv18, v31]
// [Asm]   add v32, v21, v31  # live: [v3, v5, zero, v7, v8, fv20, v4, v32, v6, v17, v12, fv18]
// [Asm]   fld fv22, 0(v32)  # live: [fv22, v5, zero, v7, v8, fv20, v4, v17, v6, v12, fv18, v3]
// [Asm]   fmadd.d fv24, fv20, fv22, fv18  # live: [fv24, v5, zero, v7, v8, v4, v6, v17, v12, v3]
// [Asm]   slliw v28, v8, 3  # live: [fv24, v5, zero, v7, v8, v4, v6, v17, v12, v28, v3]
// [Asm]   add v29, v17, v28  # live: [fv24, v5, zero, v29, v7, v8, v4, v6, v12, v3]
// [Asm]   fsd fv24, 0(v29)  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm]   addi v26, v12, -1  # live: [v5, zero, v26, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v12, v26  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm]   j .loop2.442_9  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .loop2.442_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .loop2.442_5:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v14, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .loop2.442_11:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v14], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14, v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v14]
// [Asm] .loop2.442_12:
// [Asm] # control
// [Asm]   mv v15, v14  # live: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v8], uses: [v16, v8], upward_exposed: [v8], params_defs: [v15]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v15, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: [v15]
// [Asm] .loop2.442_6:
// [Asm]   addi v16, v8, -1  # live: [v5, v16, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v16  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   j .loop2.442_2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] main.440:
// [Asm] # block info: defs: [v2, v95, fv84, a1, s11, fa1, fa2, fv99, ft6, fa6, a4, v27, fv96, a6, ft10, ft5, v6, v116, ft4, v5, ft9, fa4, v119, v110, ft2, v92, v17, a3, v31, v113, v101, fa7, a7, fv108, fa3, ft3, v104, t2, fv111, v25, fv105, t1, v13, v7, v107, ft0, ft1, v32, v86, v98, fv93, v29, v19, v4, v81, v89, v122, ft7, v11, v121, v21, a5, v125, a0, a2, v9, ft8, t3, t0, fa5, v124, v23, fa0, fv90, fv87, t4, v15, v83, fv102, fv117, fv114], uses: [v2, fv111, v25, fv105, v13, v7, v107, v95, fv84, a1, s11, v86, v98, fv93, fv99, v29, v27, fv96, v19, v4, v81, v89, v122, v116, v11, v5, v121, v21, a0, v125, v119, v110, v92, a2, v17, v31, v9, v113, v101, fv108, v124, v23, v104, fv90, fv87, v15, v83, fv102, fv117, fv114], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v32, v4, v6, v5, zero]
// [Asm] # block parameters: []
// [Asm] .main.440_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v124, 2  # live: [v124, zero, v2]
// [Asm]   mv a0, v124  # live: [zero, a0, v2]
// [Asm]   li v125, 3  # live: [v2, zero, a0, v125]
// [Asm]   mv a1, v125  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [a2, a1, zero, a0, v2]
// [Asm]   call gen_arr.441  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, zero, v2]
// [Asm]   li v121, 3  # live: [v4, v121, zero, v2]
// [Asm]   mv a0, v121  # live: [v4, zero, a0, v2]
// [Asm]   li v122, 2  # live: [v2, v4, zero, a0, v122]
// [Asm]   mv a1, v122  # live: [v4, a1, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [v4, a2, a1, zero, a0, v2]
// [Asm]   call gen_arr.441  # live: [v4, zero, a0, v2]
// [Asm]   mv v5, a0  # live: [v4, v5, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, v5, zero, v2]
// [Asm]   li v119, 2  # live: [v4, v5, zero, v119, v2]
// [Asm]   mv a0, v119  # live: [v2, v4, v5, zero, a0, v119]
// [Asm]   mv a1, v119  # live: [v4, a1, v5, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [v4, a2, a1, v5, zero, a0]
// [Asm]   call gen_arr.441  # live: [v4, v5, zero, a0]
// [Asm]   mv v6, a0  # live: [v4, v6, v5, zero]
// [Asm]   # restore_ctx2  # live: [v4, v6, v5, zero]
// [Asm]   ld v7, 0(v4)  # live: [v4, v6, v5, zero, v7]
// [Asm]   li v116, 4607182418800017408  # live: [v116, v4, v6, v5, zero, v7]
// [Asm]   fmv.d.x fv117, v116  # live: [v4, v6, v5, fv117, zero, v7]
// [Asm]   fsd fv117, 0(v7)  # live: [v4, v6, v5, zero]
// [Asm]   ld v9, 0(v4)  # live: [v4, v6, v5, zero, v9]
// [Asm]   li v113, 4611686018427387904  # live: [v4, v6, v5, zero, v9, v113]
// [Asm]   fmv.d.x fv114, v113  # live: [v4, v6, v5, zero, v9, fv114]
// [Asm]   fsd fv114, 8(v9)  # live: [v4, v6, v5, zero]
// [Asm]   ld v11, 0(v4)  # live: [v11, v4, v6, v5, zero]
// [Asm]   li v110, 4613937818241073152  # live: [v11, v4, v6, v5, zero, v110]
// [Asm]   fmv.d.x fv111, v110  # live: [fv111, v11, v4, v6, v5, zero]
// [Asm]   fsd fv111, 16(v11)  # live: [v4, v5, v6, zero]
// [Asm]   ld v13, 8(v4)  # live: [v4, v5, v6, zero, v13]
// [Asm]   li v107, 4616189618054758400  # live: [v107, v4, v5, v6, zero, v13]
// [Asm]   fmv.d.x fv108, v107  # live: [v4, fv108, v5, v6, zero, v13]
// [Asm]   fsd fv108, 0(v13)  # live: [v4, v6, v5, zero]
// [Asm]   ld v15, 8(v4)  # live: [v4, v6, v5, v15, zero]
// [Asm]   li v104, 4617315517961601024  # live: [v104, v4, v6, v5, v15, zero]
// [Asm]   fmv.d.x fv105, v104  # live: [v4, fv105, v6, v5, v15, zero]
// [Asm]   fsd fv105, 8(v15)  # live: [v4, v5, v6, zero]
// [Asm]   ld v17, 8(v4)  # live: [v4, v5, v6, v17, zero]
// [Asm]   li v101, 4618441417868443648  # live: [v4, v5, v6, v17, zero, v101]
// [Asm]   fmv.d.x fv102, v101  # live: [v4, v5, v6, v17, fv102, zero]
// [Asm]   fsd fv102, 16(v17)  # live: [v4, v5, v6, zero]
// [Asm]   ld v19, 0(v5)  # live: [v19, v4, v5, v6, zero]
// [Asm]   li v98, 4619567317775286272  # live: [v19, v4, v5, v6, zero, v98]
// [Asm]   fmv.d.x fv99, v98  # live: [v19, v4, v5, v6, fv99, zero]
// [Asm]   fsd fv99, 0(v19)  # live: [v4, v5, v6, zero]
// [Asm]   ld v21, 0(v5)  # live: [v4, v5, v6, v21, zero]
// [Asm]   li v95, 4620693217682128896  # live: [v95, v4, v5, v6, v21, zero]
// [Asm]   fmv.d.x fv96, v95  # live: [v4, v5, v6, v21, zero, fv96]
// [Asm]   fsd fv96, 8(v21)  # live: [v4, v5, v6, zero]
// [Asm]   ld v23, 8(v5)  # live: [v4, v5, v6, zero, v23]
// [Asm]   li v92, 4621256167635550208  # live: [v92, v4, v5, v6, zero, v23]
// [Asm]   fmv.d.x fv93, v92  # live: [v4, v5, v6, zero, v23, fv93]
// [Asm]   fsd fv93, 0(v23)  # live: [v4, v5, v6, zero]
// [Asm]   ld v25, 8(v5)  # live: [v25, v4, v5, v6, zero]
// [Asm]   li v89, 4621819117588971520  # live: [v25, v4, v5, v6, zero, v89]
// [Asm]   fmv.d.x fv90, v89  # live: [fv90, v25, v4, v5, v6, zero]
// [Asm]   fsd fv90, 8(v25)  # live: [v4, v6, v5, zero]
// [Asm]   ld v27, 16(v5)  # live: [v4, v6, v5, zero, v27]
// [Asm]   li v86, 4622382067542392832  # live: [v4, v6, v5, v86, zero, v27]
// [Asm]   fmv.d.x fv87, v86  # live: [fv87, v4, v6, v5, zero, v27]
// [Asm]   fsd fv87, 0(v27)  # live: [v4, v6, v5, zero]
// [Asm]   ld v29, 16(v5)  # live: [v4, v6, v5, zero, v29]
// [Asm]   li v83, 4622945017495814144  # live: [v4, v6, v5, v83, zero, v29]
// [Asm]   fmv.d.x fv84, v83  # live: [v4, fv84, v6, v5, zero, v29]
// [Asm]   fsd fv84, 8(v29)  # live: [v4, v5, v6, zero]
// [Asm]   li v81, 2  # live: [v4, v81, v5, v6, zero]
// [Asm]   addi v31, v81, -1  # live: [v4, v6, v5, v31, zero]
// [Asm] # control
// [Asm]   mv v32, v31  # live: [v32, v4, v6, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v32, zero], upward_exposed: [v32, zero], params_defs: [v32]
// [Asm] # live_in: [v32, v4, v6, v5, zero], live_out: [v4, v32, v6, v5, zero]
// [Asm] # block parameters: [v32]
// [Asm] .main.440_2:
// [Asm] # control
// [Asm]   bge v32, zero, .main.440_3  # live: [v4, v32, v6, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, v41, a1, fv35, v44, fa1, fv40, v51, fa2, ft6, a4, fa6, a6, ft5, ft10, v47, v34, ft7, ft4, fv45, v46, ft9, v49, v53, a5, fa4, a0, v36, ft2, v37, a2, v43, v52, a3, v39, ft8, a7, fv50, t3, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, v38, t2], uses: [fv45, v46, v49, a0, v36, v41, fv35, v44, v39, fv40, v51, fv50, zero, v6, v34], upward_exposed: [v6, zero], params_defs: []
// [Asm] # live_in: [v6, zero], live_out: [v53]
// [Asm] # block parameters: []
// [Asm] .main.440_4:
// [Asm]   ld v34, 0(v6)  # live: [v6, zero, v34]
// [Asm]   fld fv35, 0(v34)  # live: [v6, fv35, zero]
// [Asm]   fcvt.w.d v36, fv35, rtz  # live: [v6, zero, v36]
// [Asm]   # save_ctx2  # live: [v6, zero, v36]
// [Asm]   mv a0, v36  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v37, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v38, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v39, 0(v6)  # live: [v6, zero, v39]
// [Asm]   fld fv40, 8(v39)  # live: [v6, zero, fv40]
// [Asm]   fcvt.w.d v41, fv40, rtz  # live: [v41, v6, zero]
// [Asm]   # save_ctx2  # live: [v41, v6, zero]
// [Asm]   mv a0, v41  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v42, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v43, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v44, 8(v6)  # live: [v6, v44, zero]
// [Asm]   fld fv45, 0(v44)  # live: [v6, fv45, zero]
// [Asm]   fcvt.w.d v46, fv45, rtz  # live: [v6, v46, zero]
// [Asm]   # save_ctx2  # live: [v6, v46, zero]
// [Asm]   mv a0, v46  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v47, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v48, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v49, 8(v6)  # live: [v49, zero]
// [Asm]   fld fv50, 8(v49)  # live: [fv50, zero]
// [Asm]   fcvt.w.d v51, fv50, rtz  # live: [zero, v51]
// [Asm]   # save_ctx2  # live: [zero, v51]
// [Asm]   mv a0, v51  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v52, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v53, zero  # live: [v53]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v53, a0], upward_exposed: [v53], params_defs: [v53]
// [Asm] # live_in: [v53], live_out: []
// [Asm] # block parameters: [v53]
// [Asm] .main.440_5:
// [Asm] # control
// [Asm]   mv a0, v53  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v58, ft0, ft1, v32, a1, fa1, v60, fa2, ft6, a4, fa6, a6, ft5, ft10, v54, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v56, fa3, ft3, fa0, t4, t2, v55], uses: [v58, v5, a5, a0, v32, a2, a1, a3, v60, v56, a4, v4, v6, v54], upward_exposed: [v4, v32, v6, v5], params_defs: []
// [Asm] # live_in: [v4, v32, v6, v5, zero], live_out: [v32, v4, v6, v5, zero]
// [Asm] # block parameters: []
// [Asm] .main.440_3:
// [Asm]   li v60, 2  # live: [v5, zero, v4, v32, v6, v60]
// [Asm]   addi v54, v60, -1  # live: [v5, zero, v4, v32, v6, v54]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v32, v6, v54]
// [Asm]   mv a0, v54  # live: [v5, zero, a0, v4, v32, v6]
// [Asm]   li v58, 3  # live: [v5, v58, zero, a0, v4, v32, v6]
// [Asm]   mv a1, v58  # live: [v5, zero, a0, v4, v32, a1, v6]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, v4, v32, a2, a1, v6]
// [Asm]   mv a3, v5  # live: [v5, zero, a0, v4, v32, a2, a1, v6, a3]
// [Asm]   mv a4, v6  # live: [v5, zero, a0, a4, v4, v32, a2, a1, v6, a3]
// [Asm]   mv a5, v32  # live: [v5, a5, zero, a0, a4, v4, v32, a2, a1, v6, a3]
// [Asm]   call loop2.442  # live: [v4, v32, v5, v6, zero, a0]
// [Asm]   mv v55, a0  # live: [v4, v32, v5, v6, zero]
// [Asm]   # restore_ctx2  # live: [v4, v32, v5, v6, zero]
// [Asm]   addi v56, v32, -1  # live: [v4, v6, v5, v56, zero]
// [Asm] # control
// [Asm]   mv v32, v56  # live: [v32, v4, v6, v5, zero]
// [Asm]   j .main.440_2  # live: [v32, v4, v6, v5, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] gen_arr.441:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, v5, v21, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v5, v21, a0, v8, a2, v4, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v5, s11, v9, zero, v3]
// [Asm] # block parameters: []
// [Asm] .gen_arr.441_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, v2]
// [Asm]   slliw v21, v2, 3  # live: [v3, v21, zero, v4, s11, v2]
// [Asm]   sub v5, s11, v21  # live: [v3, v5, zero, v4, v2]
// [Asm]   andi s11, v5, -8  # live: [v3, v5, zero, v4, s11, v2]
// [Asm]   mv a1, v2  # live: [v3, v5, zero, v4, a1, s11, v2]
// [Asm]   mv a0, v5  # live: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, v4  # live: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti64  # live: [v2, v5, s11, zero, v3]
// [Asm]   addi v8, v2, -1  # live: [v8, v5, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v5, s11, v9, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [v9]
// [Asm] # live_in: [v5, s11, v9, zero, v3], live_out: [v5, s11, v9, zero, v3]
// [Asm] # block parameters: [v9]
// [Asm] .gen_arr.441_2:
// [Asm] # control
// [Asm]   blt v9, zero, .gen_arr.441_4  # live: [v5, s11, v9, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v14, v18, v6, a1, v17, s11, v9], uses: [v5, v16, v14, v18, v6, v17, s11, v9, v3], upward_exposed: [v5, s11, v9, v3], params_defs: []
// [Asm] # live_in: [v5, s11, v9, zero, v3], live_out: [v5, s11, v9, zero, v3]
// [Asm] # block parameters: []
// [Asm] .gen_arr.441_3:
// [Asm]   slliw v18, v3, 3  # live: [v5, v18, zero, s11, v9, v3]
// [Asm]   sub v6, s11, v18  # live: [v5, zero, v6, v9, v3]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v6, s11, v9, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, v6, s11, v9, v3]
// [Asm]   slliw v16, v9, 3  # live: [v5, v16, zero, v6, s11, v9, v3]
// [Asm]   add v17, v5, v16  # live: [v5, zero, v6, v17, s11, v9, v3]
// [Asm]   sd v6, 0(v17)  # live: [v5, s11, zero, v9, v3]
// [Asm]   addi v14, v9, -1  # live: [v5, v14, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v9, v14  # live: [v5, s11, v9, zero, v3]
// [Asm]   j .gen_arr.441_2  # live: [v5, s11, v9, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v5], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .gen_arr.441_4:
// [Asm] # control
// [Asm]   mv v11, v5  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .gen_arr.441_5:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.440  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("matmul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: LetRec({name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))), Unit)}, App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int))]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))), Unit)}, App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Int(0), Var("i")), LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat")))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("gen_arr"), [Int(2), Int(3)])
// [Knf] build_knf: Var("gen_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("gen_arr"), [Int(3), Int(2)])
// [Knf] build_knf: Var("gen_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("gen_arr"), [Int(2), Int(2)])
// [Knf] build_knf: Var("gen_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("matmul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%5)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Mem(fref=f0, mref=m0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Insn(iref=%1)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%11)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%3)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%32)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%29), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Insn(iref=%28)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop2.442
// [Main]   .type loop2.442, @function
// [Main] # leaf true
// [Main] loop2.442:
// [Main] .loop2.442_0:
// [Main]   mv a7, a1
// [Main]   mv a6, a2
// [Main]   mv a1, a3
// [Main]   mv a2, a5
// [Main]   mv a3, a0
// [Main] 
// [Main] .loop2.442_2:
// [Main]   blt a3, zero, .loop2.442_4
// [Main] 
// [Main] .loop2.442_3:
// [Main]   addi a0, a7, -1
// [Main] 
// [Main] .loop2.442_7:
// [Main] 
// [Main] .loop2.442_9:
// [Main]   blt a0, zero, .loop2.442_11
// [Main] 
// [Main] .loop2.442_10:
// [Main]   slliw a5, a2, 3
// [Main]   add a5, a4, a5
// [Main]   ld a5, 0(a5)
// [Main]   slliw t0, a3, 3
// [Main]   add t0, a5, t0
// [Main]   fld fa0, 0(t0)
// [Main]   slliw t0, a2, 3
// [Main]   add t0, a6, t0
// [Main]   ld t0, 0(t0)
// [Main]   slliw t1, a0, 3
// [Main]   add t0, t0, t1
// [Main]   fld fa1, 0(t0)
// [Main]   slliw t0, a0, 3
// [Main]   add t0, a1, t0
// [Main]   ld t0, 0(t0)
// [Main]   slliw t1, a3, 3
// [Main]   add t0, t0, t1
// [Main]   fld fa2, 0(t0)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw t0, a3, 3
// [Main]   add a5, a5, t0
// [Main]   fsd fa0, 0(a5)
// [Main]   addi a0, a0, -1
// [Main]   j .loop2.442_9
// [Main] 
// [Main] .loop2.442_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop2.442_5:
// [Main]   ret
// [Main] 
// [Main] .loop2.442_11:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop2.442_12:
// [Main] 
// [Main] .loop2.442_6:
// [Main]   addi a0, a3, -1
// [Main]   mv a3, a0
// [Main]   j .loop2.442_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.440
// [Main]   .type main.440, @function
// [Main] # leaf false
// [Main] main.440:
// [Main] .main.440_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   call gen_arr.441
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   call gen_arr.441
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   call gen_arr.441
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   mv s3, a0
// [Main] 
// [Main] .main.440_2:
// [Main]   bge s3, zero, .main.440_3
// [Main] 
// [Main] .main.440_4:
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.440_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main.440_3:
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   li a1, 3
// [Main]   mv a2, s1
// [Main]   mv a3, s2
// [Main]   mv a4, s0
// [Main]   mv a5, s3
// [Main]   call loop2.442
// [Main]   addi a0, s3, -1
// [Main]   mv s3, a0
// [Main]   j .main.440_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gen_arr.441
// [Main]   .type gen_arr.441, @function
// [Main] # leaf false
// [Main] gen_arr.441:
// [Main] .gen_arr.441_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   slliw a0, s2, 3
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s2
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   addi a0, s2, -1
// [Main]   mv a2, a0
// [Main] 
// [Main] .gen_arr.441_2:
// [Main]   blt a2, zero, .gen_arr.441_4
// [Main] 
// [Main] .gen_arr.441_3:
// [Main]   slliw a0, s1, 3
// [Main]   sub a0, s11, a0
// [Main]   andi s11, a0, -8
// [Main]   mv a1, s1
// [Main]   slliw a1, a2, 3
// [Main]   add a1, s0, a1
// [Main]   sd a0, 0(a1)
// [Main]   addi a0, a2, -1
// [Main]   mv a2, a0
// [Main]   j .gen_arr.441_2
// [Main] 
// [Main] .gen_arr.441_4:
// [Main]   mv a0, s0
// [Main] 
// [Main] .gen_arr.441_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.440
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function loop2.442
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=FnParam(fref=f2, fpref=$f.4), offset=FnParam(fref=f2, fpref=$f.5), width=@ptr))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%5), offset=BlockParam(bref=b2, bpref=$b.0), width=@64))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=FnParam(fref=f2, fpref=$f.2), offset=FnParam(fref=f2, fpref=$f.5), width=@ptr))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%8), offset=BlockParam(bref=b9, bpref=$b.0), width=@64))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=FnParam(fref=f2, fpref=$f.3), offset=BlockParam(bref=b9, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%10), offset=BlockParam(bref=b2, bpref=$b.0), width=@64))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%9), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%7), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%5), offset=BlockParam(bref=b2, bpref=$b.0), width=@64), val=Insn(iref=%13))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b9, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f2, fpref=$f.1), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function loop2.442 to wasm
// [Wasm] Lowering function main.440
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Insn(iref=%30), Int32(val=3), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%33), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%34)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%35)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%38), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%39)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%43), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%44)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%45)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%48), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%49)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%50)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Branch(cond=Insn(iref=%29), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f0, args=[Int32(val=2), Int32(val=3), Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f0, args=[Int32(val=3), Int32(val=2), Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f0, args=[Int32(val=2), Int32(val=2), Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%4), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%6), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%8), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.440 to wasm
// [Wasm] Lowering function gen_arr.441
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=Mem(fref=f0, mref=m0), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr), val=Mem(fref=f0, mref=m1))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f0, mref=m0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m0, fills=[Init(val=FnParam(fref=f0, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowered function gen_arr.441 to wasm
// [KnfOpt] func_tre: matmul.1 false
// [KnfOpt] func_tre: loop1.8 true
// [KnfOpt] func_tre: loop2.11 true
// [KnfOpt] func_tre: loop3.14 true
// [KnfOpt] func_tre: main.41 false
// [KnfOpt] func_tre: gen_arr.45 false
// [KnfOpt] func_tre: init_arr.49 true
// [KnfOpt] freq: {matmul.1: Once, loop1.8: Once, loop1.200: Many(2), loop2.203: Once, loop2.205: Many(2), loop3.208: Once, loop3.210: Many(2), main.41: Once, gen_arr.45: Many(3), init_arr.49: Once, init_arr.235: Many(2)}
// [KnfOpt] Knf inline Some(loop3) let _227: Unit = Unit
// [KnfOpt] let _228: Int = Int(1)
// [KnfOpt] let _229: Int = Sub(j.206, _228)
// [KnfOpt] Jump(loop2.205, [_229, ])
// [KnfOpt] Knf inline Some(loop2) let _232: Unit = Unit
// [KnfOpt] let _233: Int = Int(1)
// [KnfOpt] let _234: Int = Sub(i.201, _233)
// [KnfOpt] Jump(loop1.200, [_234, ])
// [KnfOpt] Knf inline Some(loop1) Unit
// [KnfOpt] Knf inline Some(init_arr) let _59: Unit = Unit
// [KnfOpt] Var(mat.48)
// [KnfOpt] Inline threshold 3 27
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 3 27
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 3 27
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Knf inline Some(matmul) let _132: Unit = Unit
// [KnfOpt] let _133: Int = Int(0)
// [KnfOpt] let _134: Array(Double) = Get c.68[_133]
// [KnfOpt] let _135: Int = Int(0)
// [KnfOpt] let _136: Double = Get _134[_135]
// [KnfOpt] let _137: Int = ExtApply(minimbt_truncate, [_136, ])
// [KnfOpt] let _138: Unit = ExtApply(minimbt_print_int, [_137, ])
// [KnfOpt] let _139: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _140: Int = Int(0)
// [KnfOpt] let _141: Array(Double) = Get c.68[_140]
// [KnfOpt] let _142: Int = Int(1)
// [KnfOpt] let _143: Double = Get _141[_142]
// [KnfOpt] let _144: Int = ExtApply(minimbt_truncate, [_143, ])
// [KnfOpt] let _145: Unit = ExtApply(minimbt_print_int, [_144, ])
// [KnfOpt] let _146: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _147: Int = Int(1)
// [KnfOpt] let _148: Array(Double) = Get c.68[_147]
// [KnfOpt] let _149: Int = Int(0)
// [KnfOpt] let _150: Double = Get _148[_149]
// [KnfOpt] let _151: Int = ExtApply(minimbt_truncate, [_150, ])
// [KnfOpt] let _152: Unit = ExtApply(minimbt_print_int, [_151, ])
// [KnfOpt] let _153: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _154: Int = Int(1)
// [KnfOpt] let _155: Array(Double) = Get c.68[_154]
// [KnfOpt] let _156: Int = Int(1)
// [KnfOpt] let _157: Double = Get _155[_156]
// [KnfOpt] let _158: Int = ExtApply(minimbt_truncate, [_157, ])
// [KnfOpt] let _159: Unit = ExtApply(minimbt_print_int, [_158, ])
// [KnfOpt] Unit
// [KnfOpt] freq: {main.41: Once, gen_arr.45: Many(3), init_arr.318: Many(2), loop1.326: Once, loop1.328: Many(2), loop2.331: Once, loop2.333: Many(2), loop3.336: Once, loop3.338: Many(2)}
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Knf inline Some(loop3) let _355: Unit = Unit
// [KnfOpt] let _356: Int = Int(1)
// [KnfOpt] let _357: Int = Sub(j.334, _356)
// [KnfOpt] Jump(loop2.333, [_357, ])
// [KnfOpt] Knf inline Some(loop2) let _360: Unit = Unit
// [KnfOpt] let _361: Int = Int(1)
// [KnfOpt] let _362: Int = Sub(i.329, _361)
// [KnfOpt] Jump(loop1.328, [_362, ])
// [KnfOpt] Knf inline Some(loop1) let _132: Unit = Unit
// [KnfOpt] let _133: Int = Int(0)
// [KnfOpt] let _134: Array(Double) = Get c.68[_133]
// [KnfOpt] let _135: Int = Int(0)
// [KnfOpt] let _136: Double = Get _134[_135]
// [KnfOpt] let _137: Int = ExtApply(minimbt_truncate, [_136, ])
// [KnfOpt] let _138: Unit = ExtApply(minimbt_print_int, [_137, ])
// [KnfOpt] let _139: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _140: Int = Int(0)
// [KnfOpt] let _141: Array(Double) = Get c.68[_140]
// [KnfOpt] let _142: Int = Int(1)
// [KnfOpt] let _143: Double = Get _141[_142]
// [KnfOpt] let _144: Int = ExtApply(minimbt_truncate, [_143, ])
// [KnfOpt] let _145: Unit = ExtApply(minimbt_print_int, [_144, ])
// [KnfOpt] let _146: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _147: Int = Int(1)
// [KnfOpt] let _148: Array(Double) = Get c.68[_147]
// [KnfOpt] let _149: Int = Int(0)
// [KnfOpt] let _150: Double = Get _148[_149]
// [KnfOpt] let _151: Int = ExtApply(minimbt_truncate, [_150, ])
// [KnfOpt] let _152: Unit = ExtApply(minimbt_print_int, [_151, ])
// [KnfOpt] let _153: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _154: Int = Int(1)
// [KnfOpt] let _155: Array(Double) = Get c.68[_154]
// [KnfOpt] let _156: Int = Int(1)
// [KnfOpt] let _157: Double = Get _155[_156]
// [KnfOpt] let _158: Int = ExtApply(minimbt_truncate, [_157, ])
// [KnfOpt] let _159: Unit = ExtApply(minimbt_print_int, [_158, ])
// [KnfOpt] Unit
// [KnfOpt] Numbers of let rec: 4 4 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f1: Once, f8: Once, f2: Once, f3: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] loop2.442 is inlining Call(ty=Unit, f=f1, args=[Insn(iref=%1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5), BlockParam(bref=b2, bpref=$b.0)])
// [CoreOpt] shifted callee .fn loop3.443 #f1 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     jump b8($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b8 pre #Some(b7) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (int32) {
// [CoreOpt]     let %4: bool = le(0, $b9.0)
// [CoreOpt]     br %4 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %5: array[double] = load array[double] offset($f3, $f4 * @ptr)
// [CoreOpt]     let %6: array[double] = load array[double] offset($f3, $f4 * @ptr)
// [CoreOpt]     let %7: double = load double offset(%6, $f5 * @64)
// [CoreOpt]     let %8: array[double] = load array[double] offset($f1, $f4 * @ptr)
// [CoreOpt]     let %9: double = load double offset(%8, $b9.0 * @64)
// [CoreOpt]     let %10: array[double] = load array[double] offset($f2, $b9.0 * @ptr)
// [CoreOpt]     let %11: double = load double offset(%10, $f5 * @64)
// [CoreOpt]     let %12: double = mul(%9, %11)
// [CoreOpt]     let %13: double = add(%7, %12)
// [CoreOpt]     let _ = store double offset(%5, $f5 * @64) <- %13
// [CoreOpt]     let %15: int32 = sub($b9.0, 1)
// [CoreOpt]     jump b9(%15)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (any) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] LVN subst Insn(iref=%6) with Insn(iref=%5)
