// [Main] function thunk_main(k) {
// [Main]   function matmul_1(l_3, m_5, n_7, a_9, b_11, c_13, k) {
// [Main]     function loop1_14(i_16, k) {
// [Main]       const _17 = 0;
// [Main]       if (_17 <= i_16) {
// [Main]         function loop2_18(j_20, k) {
// [Main]           const _21 = 0;
// [Main]           if (_21 <= j_20) {
// [Main]             function loop3_22(k_24, k) {
// [Main]               const _25 = 0;
// [Main]               if (_25 <= k_24) {
// [Main]                 const _26 = c_13[i_16];
// [Main]                 const _27 = c_13[i_16];
// [Main]                 const _28 = _27[j_20];
// [Main]                 const _29 = a_9[i_16];
// [Main]                 const _30 = _29[k_24];
// [Main]                 const _31 = b_11[k_24];
// [Main]                 const _32 = _31[j_20];
// [Main]                 const _33 = _30 * _32;
// [Main]                 const _34 = _28 + _33;
// [Main]                 const _36 = _26[j_20] = _34;
// [Main]                 const _37 = 1;
// [Main]                 const _38 = k_24 - _37;
// [Main]                 return $thunk(() => loop3_22(_38, k))
// [Main]               } else {
// [Main]                 return k(null)
// [Main]               }
// [Main]             }
// [Main]             const _39 = 1;
// [Main]             const _40 = m_5 - _39;
// [Main]             return $thunk(() => loop3_22(_40, function (_42) {
// [Main]               const _43 = 1;
// [Main]               const _44 = j_20 - _43;
// [Main]               return $thunk(() => loop2_18(_44, k))
// [Main]             }
// [Main]             ))
// [Main]           } else {
// [Main]             return k(null)
// [Main]           }
// [Main]         }
// [Main]         const _45 = 1;
// [Main]         const _46 = n_7 - _45;
// [Main]         return $thunk(() => loop2_18(_46, function (_48) {
// [Main]           const _49 = 1;
// [Main]           const _50 = i_16 - _49;
// [Main]           return $thunk(() => loop1_14(_50, k))
// [Main]         }
// [Main]         ))
// [Main]       } else {
// [Main]         return k(null)
// [Main]       }
// [Main]     }
// [Main]     const _51 = 1;
// [Main]     const _52 = l_3 - _51;
// [Main]     return $thunk(() => loop1_14(_52, k))
// [Main]   }
// [Main]   function main_53(k) {
// [Main]     const _54 = 0;
// [Main]     const _55 = 0;
// [Main]     const dummy_56 = minimbt_create_float_array($force(_54), $force(_55));
// [Main]     function gen_arr_57(m_59, n_61, k) {
// [Main]       const mat_62 = minimbt_create_ptr_array($force(m_59), $force(dummy_56));
// [Main]       function init_arr_63(i_65, k) {
// [Main]         const _66 = 0;
// [Main]         if (_66 <= i_65) {
// [Main]           const _67 = 0;
// [Main]           const _68 = minimbt_create_float_array($force(n_61), $force(_67));
// [Main]           const _70 = mat_62[i_65] = _68;
// [Main]           const _71 = 1;
// [Main]           const _72 = i_65 - _71;
// [Main]           return $thunk(() => init_arr_63(_72, k))
// [Main]         } else {
// [Main]           return k(null)
// [Main]         }
// [Main]       }
// [Main]       const _73 = 1;
// [Main]       const _74 = m_59 - _73;
// [Main]       return $thunk(() => init_arr_63(_74, function (_76) {
// [Main]         return $thunk(() => k(mat_62))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     const _77 = 2;
// [Main]     const _78 = 3;
// [Main]     return $thunk(() => gen_arr_57(_77, _78, function (a_79) {
// [Main]       const _80 = 3;
// [Main]       const _81 = 2;
// [Main]       return $thunk(() => gen_arr_57(_80, _81, function (b_82) {
// [Main]         const _83 = 2;
// [Main]         const _84 = 2;
// [Main]         return $thunk(() => gen_arr_57(_83, _84, function (c_85) {
// [Main]           const _86 = 0;
// [Main]           const _87 = a_79[_86];
// [Main]           const _88 = 0;
// [Main]           const _89 = 1;
// [Main]           const _91 = _87[_88] = _89;
// [Main]           const _92 = 0;
// [Main]           const _93 = a_79[_92];
// [Main]           const _94 = 1;
// [Main]           const _95 = 2;
// [Main]           const _97 = _93[_94] = _95;
// [Main]           const _98 = 0;
// [Main]           const _99 = a_79[_98];
// [Main]           const _100 = 2;
// [Main]           const _101 = 3;
// [Main]           const _103 = _99[_100] = _101;
// [Main]           const _104 = 1;
// [Main]           const _105 = a_79[_104];
// [Main]           const _106 = 0;
// [Main]           const _107 = 4;
// [Main]           const _109 = _105[_106] = _107;
// [Main]           const _110 = 1;
// [Main]           const _111 = a_79[_110];
// [Main]           const _112 = 1;
// [Main]           const _113 = 5;
// [Main]           const _115 = _111[_112] = _113;
// [Main]           const _116 = 1;
// [Main]           const _117 = a_79[_116];
// [Main]           const _118 = 2;
// [Main]           const _119 = 6;
// [Main]           const _121 = _117[_118] = _119;
// [Main]           const _122 = 0;
// [Main]           const _123 = b_82[_122];
// [Main]           const _124 = 0;
// [Main]           const _125 = 7;
// [Main]           const _127 = _123[_124] = _125;
// [Main]           const _128 = 0;
// [Main]           const _129 = b_82[_128];
// [Main]           const _130 = 1;
// [Main]           const _131 = 8;
// [Main]           const _133 = _129[_130] = _131;
// [Main]           const _134 = 1;
// [Main]           const _135 = b_82[_134];
// [Main]           const _136 = 0;
// [Main]           const _137 = 9;
// [Main]           const _139 = _135[_136] = _137;
// [Main]           const _140 = 1;
// [Main]           const _141 = b_82[_140];
// [Main]           const _142 = 1;
// [Main]           const _143 = 10;
// [Main]           const _145 = _141[_142] = _143;
// [Main]           const _146 = 2;
// [Main]           const _147 = b_82[_146];
// [Main]           const _148 = 0;
// [Main]           const _149 = 11;
// [Main]           const _151 = _147[_148] = _149;
// [Main]           const _152 = 2;
// [Main]           const _153 = b_82[_152];
// [Main]           const _154 = 1;
// [Main]           const _155 = 12;
// [Main]           const _157 = _153[_154] = _155;
// [Main]           const _158 = 2;
// [Main]           const _159 = 3;
// [Main]           const _160 = 2;
// [Main]           return $thunk(() => matmul_1(_158, _159, _160, a_79, b_82, c_85, function (_162) {
// [Main]             const _163 = 0;
// [Main]             const _164 = c_85[_163];
// [Main]             const _165 = 0;
// [Main]             const _166 = _164[_165];
// [Main]             const _167 = minimbt_truncate($force(_166));
// [Main]             const _169 = minimbt_print_int($force(_167));
// [Main]             const _171 = minimbt_print_endline();
// [Main]             const _172 = 0;
// [Main]             const _173 = c_85[_172];
// [Main]             const _174 = 1;
// [Main]             const _175 = _173[_174];
// [Main]             const _176 = minimbt_truncate($force(_175));
// [Main]             const _178 = minimbt_print_int($force(_176));
// [Main]             const _180 = minimbt_print_endline();
// [Main]             const _181 = 1;
// [Main]             const _182 = c_85[_181];
// [Main]             const _183 = 0;
// [Main]             const _184 = _182[_183];
// [Main]             const _185 = minimbt_truncate($force(_184));
// [Main]             const _187 = minimbt_print_int($force(_185));
// [Main]             const _189 = minimbt_print_endline();
// [Main]             const _190 = 1;
// [Main]             const _191 = c_85[_190];
// [Main]             const _192 = 1;
// [Main]             const _193 = _191[_192];
// [Main]             const _194 = minimbt_truncate($force(_193));
// [Main]             const _196 = minimbt_print_int($force(_194));
// [Main]             return $thunk(() => $thunk(() => $thunk(() => $thunk(() => k(null)))))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_53(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("matmul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)}, App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None)]))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: None})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)}, App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None)])) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Int(0), Var("j")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("k")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None))
// [Typer] infer: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)
// [Typer] infer: Get(Get(Var("c"), Var("i")), Var("j"))
// [Typer] infer: Get(Var("c"), Var("i"))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None)
// [Typer] infer: Get(Get(Var("a"), Var("i")), Var("k"))
// [Typer] infer: Get(Var("a"), Var("i"))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Get(Get(Var("b"), Var("k")), Var("j"))
// [Typer] infer: Get(Var("b"), Var("k"))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Get(Var("c"), Var("i")) against Array(Double)
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("k"), Int(1), Sub, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("loop3") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var({val: None})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=None)])
// [Typer] infer: Var("loop3")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("j"), Int(1), Sub, kind=None)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("loop2") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var({val: None})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] infer: Var("loop2")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(Var("n"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("loop1") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("l"), Int(1), Sub, kind=None)
// [Typer] infer: Var("l")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("loop1") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: None})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: None})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Typer] infer: Array(Int(0), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Array(Double)
// [Typer] union: Var({val: None}) and Array(Double)
// [Typer] infer: LetRec({tyvars: [], name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: None})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Typer] typevars: []
// [Typer] check: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat")))) against Array(Array(Double))
// [Typer] infer: Array(Var("m"), Var("dummy"))
// [Typer] infer: Var("dummy")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Double))})))
// [Typer] inst result: Array(Double)
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] check: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))) against Array(Array(Double))
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Typer] infer: Array(Var("n"), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("mat") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("init_arr") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat")) against Array(Array(Double))
// [Typer] infer: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None)])
// [Typer] infer: Var("init_arr")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Var("mat") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] infer: Let(("a", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: None})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Typer] infer: App(Var("gen_arr"), [Int(2), Int(3)])
// [Typer] infer: Var("gen_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Array(Array(Double)))))
// [Typer] inst result: Fun([Int, Int], Array(Array(Double)))
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] infer: Let(("b", Var({val: None})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Typer] infer: App(Var("gen_arr"), [Int(3), Int(2)])
// [Typer] infer: Var("gen_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Array(Array(Double)))))
// [Typer] inst result: Fun([Int, Int], Array(Array(Double)))
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] infer: Let(("c", Var({val: None})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Typer] infer: App(Var("gen_arr"), [Int(2), Int(2)])
// [Typer] infer: Var("gen_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Array(Array(Double)))))
// [Typer] inst result: Fun([Int, Int], Array(Array(Double)))
// [Typer] check: Int(2) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Typer] infer: Double(1)
// [Typer] check: Get(Var("a"), Int(0)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Typer] infer: Double(2)
// [Typer] check: Get(Var("a"), Int(0)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Typer] infer: Double(3)
// [Typer] check: Get(Var("a"), Int(0)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Typer] infer: Double(4)
// [Typer] check: Get(Var("a"), Int(1)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Typer] infer: Double(5)
// [Typer] check: Get(Var("a"), Int(1)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Typer] infer: Double(6)
// [Typer] check: Get(Var("a"), Int(1)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Typer] infer: Double(7)
// [Typer] check: Get(Var("b"), Int(0)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Typer] infer: Double(8)
// [Typer] check: Get(Var("b"), Int(0)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Typer] infer: Double(9)
// [Typer] check: Get(Var("b"), Int(1)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Typer] infer: Double(10)
// [Typer] check: Get(Var("b"), Int(1)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Typer] infer: Double(11)
// [Typer] check: Get(Var("b"), Int(2)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Typer] infer: Double(12)
// [Typer] check: Get(Var("b"), Int(2)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Typer] infer: App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Typer] infer: Var("matmul")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(0))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(1))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(0))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(1))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
