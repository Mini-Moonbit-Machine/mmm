// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.255 ->   call main.255
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, Insn(iref=%3) -> v12, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b2, bpref=$b.0) -> v9, BlockParam(bref=b5, bpref=$b.0) -> v11, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v10, Insn(iref=%1) -> v8, Mem(fref=f4, mref=m1) -> v6, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v5, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v14, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v6, s11, v9, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v6, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v6, v17, s11, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v21, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, zero, v4, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, v9, zero, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: v9 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gen_arr.256"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v16 ← a1", color=green];
// [Asm]   r26 [label="v8 ← a0", color=green];
// [Asm]   r27 [label="v11 ← a0", color=green];
// [Asm]   r6 [label="v3 ← s1", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="s11", color=blue];
// [Asm]   r1 [label="v18 ← a1", color=green];
// [Asm]   r11 [label="v14 ← a0", color=green];
// [Asm]   r7 [label="v6 ← a2", color=green];
// [Asm]   r10 [label="v17 ← a1", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v4 ← a2", color=green];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v9 ← a0", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="v21 ← a0", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v2 ← s2", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r0 -- r13;
// [Asm]   r3 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r0 -- r14;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 2:v5-> 3:zero-> 4:s11-> 6:v3-> 8:a1-> 12:v2-> 13:a2-> 14:v4-> 5:v9-> 7:v6-> 9:v16-> 10:v17-> 1:v18-> 15:v21-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 11:v14-> 26:v8-> 27:v11"
// [Asm]   comment = "v16<-a1;v8<-a0;v11<-a0;v3<-s1;v18<-a1;v14<-a0;v6<-a2;v17<-a1;v4<-a2;v9<-a0;v21<-a0;v5<-s0;v2<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gen_arr.256"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   blt v9, zero, .gen_arr.256_4 ->   blt a0, zero, .gen_arr.256_4
// [Asm] subst   slliw v18, v3, 3 ->   slliw a1, s1, 3
// [Asm] subst   sub v6, s11, v18 ->   sub a2, s11, a1
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a2, -8
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   slliw v16, v9, 3 ->   slliw a1, a0, 3
// [Asm] subst   add v17, v5, v16 ->   add a1, s0, a1
// [Asm] subst   sd v6, 0(v17) ->   sd a2, 0(a1)
// [Asm] subst   addi v14, v9, -1 ->   addi a0, a0, -1
// [Asm] subst   j .gen_arr.256_2 ->   j .gen_arr.256_2
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   slliw v21, v2, 3 ->   slliw a0, s2, 3
// [Asm] subst   sub v5, s11, v21 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s2
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v8, v2, -1 ->   addi a0, s2, -1
// [Asm] subst   mv v11, v5 ->   mv a0, s0
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%41) -> v44, Insn(iref=%33) -> v36, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%39) -> v42, Insn(iref=%4) -> v7, Insn(iref=%42) -> v45, Self(fref=f5) -> v0, Insn(iref=%44) -> v47, Insn(iref=%32) -> v35, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%31) -> v34, Insn(iref=%35) -> fv38, Insn(iref=%28) -> v31, Insn(iref=%38) -> v41, Insn(iref=%46) -> v49, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%37) -> v40, Insn(iref=%45) -> fv48, Insn(iref=%29) -> v32, Insn(iref=%5) -> v8, Insn(iref=%47) -> v50, Insn(iref=%19) -> v22, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Mem(fref=f5, mref=m0) -> v2, Insn(iref=%7) -> v10, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%2) -> v5, Insn(iref=%20) -> v23, Insn(iref=%43) -> v46, Insn(iref=%30) -> fv33, Insn(iref=%21) -> v24, Insn(iref=%34) -> v37, Insn(iref=%36) -> v39, Insn(iref=%40) -> fv43, Insn(iref=%12) -> v15
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v114]
// [Asm] live_set: [zero, v114, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [v114]
// [Asm] defined: a0 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v115, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, v2]
// [Asm] move_origin: [v115]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v111]
// [Asm] live_set: [zero, v4, v111, v2]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: [v111]
// [Asm] defined: a0 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v112, zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v4, a1, v2]
// [Asm] move_origin: [v112]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v109, v5, zero, a0, v4, v2]
// [Asm] move_origin: [v109]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v2]
// [Asm] move_origin: [v109]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [fv107]
// [Asm] live_set: [v5, zero, v7, v4, v6, fv107]
// [Asm] move_origin: []
// [Asm] defined: fv107 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v5, zero, v103, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [fv104]
// [Asm] live_set: [v5, zero, v4, v6, fv104, v9]
// [Asm] move_origin: []
// [Asm] defined: fv104 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v11, v5, zero, v4, v6, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [fv101]
// [Asm] live_set: [v11, v5, zero, v4, fv101, v6]
// [Asm] move_origin: []
// [Asm] defined: fv101 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v5, zero, v13, v97, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [fv98]
// [Asm] live_set: [fv98, v5, zero, v13, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv98 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [fv95]
// [Asm] live_set: [v5, zero, v4, v6, v15, fv95]
// [Asm] move_origin: []
// [Asm] defined: fv95 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v5, v91, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [fv92]
// [Asm] live_set: [v5, fv92, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: fv92 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v5, zero, v19, v88, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [fv89]
// [Asm] live_set: [v5, zero, fv89, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv89 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v5, v21, zero, v85, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [fv86]
// [Asm] live_set: [fv86, v5, v21, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv86 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v5, v82, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [fv83]
// [Asm] live_set: [v5, zero, v23, v4, v6, fv83]
// [Asm] move_origin: []
// [Asm] defined: fv83 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v25, v5, zero, v79, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [fv80]
// [Asm] live_set: [v25, v5, zero, v4, v6, fv80]
// [Asm] move_origin: []
// [Asm] defined: fv80 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v5, zero, v27, v4, v6, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [fv77]
// [Asm] live_set: [v5, zero, v27, v4, v6, fv77]
// [Asm] move_origin: []
// [Asm] defined: fv77 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v5, zero, v29, v4, v6, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [fv74]
// [Asm] live_set: [v5, zero, v29, v4, v6, fv74]
// [Asm] move_origin: []
// [Asm] defined: fv74 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v70]
// [Asm] live_set: [v5, zero, v4, v6, v70]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v6, v70]
// [Asm] move_origin: [v70]
// [Asm] defined: a0 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, a0, v4, v6, v70]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v6, v70]
// [Asm] move_origin: [v71]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, v4, a1, v6]
// [Asm] move_origin: [v70]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, v6, a1, a3]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, v6, a1, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [v6, zero, fv33]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v6, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v34]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [v6, zero, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v39]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero, v42]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v6, zero, fv43]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v6, v44, zero]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v44, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v44]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v47, zero]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [fv48, zero]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v49, zero]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v49, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v49]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.255"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r46 [label="v29 ← a0", color=green];
// [Asm]   r33 [label="v94 ← a1", color=green];
// [Asm]   r59 [label="v42 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r44 [label="v27 ← a0", color=green];
// [Asm]   r53 [label="v35 ← a0", color=green];
// [Asm]   r56 [label="v39 ← a0", color=green];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r5 [label="v115 ← a1", color=green];
// [Asm]   r54 [label="v36 ← a0", color=green];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r43 [label="v79 ← a1", color=green];
// [Asm]   r31 [label="v97 ← a1", color=green];
// [Asm]   r39 [label="v85 ← a1", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r65 [label="v50 ← a0", color=green];
// [Asm]   r52 [label="v34 ← a0", color=green];
// [Asm]   r20 [label="v112 ← a1", color=green];
// [Asm]   r61 [label="v45 ← a0", color=green];
// [Asm]   r23 [label="v6 ← s0", color=green];
// [Asm]   r3 [label="v114 ← a0", color=green];
// [Asm]   r27 [label="v103 ← a1", color=green];
// [Asm]   r62 [label="v46 ← a0", color=green];
// [Asm]   r40 [label="v23 ← a0", color=green];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r58 [label="v41 ← a0", color=green];
// [Asm]   r34 [label="v17 ← a0", color=green];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r51 [label="v32 ← a0", color=green];
// [Asm]   r55 [label="v37 ← a0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r21 [label="v5 ← s2", color=green];
// [Asm]   r60 [label="v44 ← a0", color=green];
// [Asm]   r38 [label="v21 ← a0", color=green];
// [Asm]   r47 [label="v73 ← a1", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r42 [label="v25 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v100 ← a1", color=green];
// [Asm]   r35 [label="v91 ← a1", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r64 [label="v49 ← a0", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r36 [label="v19 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r32 [label="v15 ← a0", color=green];
// [Asm]   r49 [label="v71 ← a1", color=green];
// [Asm]   r57 [label="v40 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r48 [label="v70 ← a0", color=green];
// [Asm]   r37 [label="v88 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r41 [label="v82 ← a1", color=green];
// [Asm]   r22 [label="v109 ← a0", color=green];
// [Asm]   r50 [label="v31 ← a0", color=green];
// [Asm]   r30 [label="v13 ← a0", color=green];
// [Asm]   r45 [label="v76 ← a1", color=green];
// [Asm]   r25 [label="v106 ← a1", color=green];
// [Asm]   r63 [label="v47 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r18 [label="v4 ← s1", color=green];
// [Asm]   r19 [label="v111 ← a0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r23 -- r36;
// [Asm]   r18 -- r49;
// [Asm]   r6 -- r48;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r30;
// [Asm]   r23 -- r46;
// [Asm]   r23 -- r51;
// [Asm]   r1 -- r57;
// [Asm]   r21 -- r38;
// [Asm]   r18 -- r42;
// [Asm]   r23 -- r56;
// [Asm]   r1 -- r45;
// [Asm]   r23 -- r35;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r45;
// [Asm]   r0 -- r16;
// [Asm]   r18 -- r44;
// [Asm]   r18 -- r34;
// [Asm]   r1 -- r50;
// [Asm]   r23 -- r53;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r21 -- r33;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r10 -- r18;
// [Asm]   r21 -- r48;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r1 -- r40;
// [Asm]   r8 -- r23;
// [Asm]   r18 -- r46;
// [Asm]   r23 -- r54;
// [Asm]   r23 -- r58;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r33;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r23 -- r55;
// [Asm]   r18 -- r37;
// [Asm]   r16 -- r21;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r39;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r23 -- r37;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r21 -- r46;
// [Asm]   r18 -- r43;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r1 -- r43;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r23 -- r50;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r18 -- r40;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r21 -- r34;
// [Asm]   r4 -- r18;
// [Asm]   r23 -- r39;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r23 -- r45;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r23;
// [Asm]   r18 -- r39;
// [Asm]   r23 -- r26;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r32 -- r33;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r23 -- r30;
// [Asm]   r13 -- r23;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r48 -- r49;
// [Asm]   r8 -- r18;
// [Asm]   r23 -- r42;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r18 -- r47;
// [Asm]   r23 -- r40;
// [Asm]   r23 -- r59;
// [Asm]   r7 -- r18;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r20;
// [Asm]   r1 -- r54;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r42;
// [Asm]   r18 -- r23;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r43;
// [Asm]   r23 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r21 -- r35;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r63;
// [Asm]   r30 -- r31;
// [Asm]   r18 -- r27;
// [Asm]   r23 -- r52;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r42 -- r43;
// [Asm]   r1 -- r62;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r15 -- r18;
// [Asm]   r18 -- r26;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r18 -- r30;
// [Asm]   r23 -- r32;
// [Asm]   r23 -- r41;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r23 -- r38;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r44;
// [Asm]   r21 -- r22;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r21 -- r37;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r23 -- r33;
// [Asm]   r17 -- r18;
// [Asm]   r23 -- r57;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r23 -- r49;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r21 -- r40;
// [Asm]   r18 -- r29;
// [Asm]   r23 -- r60;
// [Asm]   r14 -- r23;
// [Asm]   r46 -- r47;
// [Asm]   r1 -- r32;
// [Asm]   r23 -- r62;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r23 -- r34;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r1 -- r65;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r21 -- r47;
// [Asm]   r7 -- r9;
// [Asm]   r21 -- r44;
// [Asm]   r18 -- r36;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r18 -- r32;
// [Asm]   r23 -- r47;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r59;
// [Asm]   r23 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r61;
// [Asm]   r10 -- r23;
// [Asm]   r21 -- r42;
// [Asm]   r18 -- r48;
// [Asm]   r18 -- r41;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r21 -- r41;
// [Asm]   r0 -- r12;
// [Asm]   r18 -- r38;
// [Asm]   r4 -- r17;
// [Asm]   r23 -- r43;
// [Asm]   r23 -- r44;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r23 -- r48;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v114-> 4:a0-> 5:v115-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 18:v4-> 21:v5-> 23:v6-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 48:v70-> 49:v71-> 20:v112-> 22:v109-> 24:v7-> 25:v106-> 26:v9-> 27:v103-> 28:v11-> 29:v100-> 30:v13-> 31:v97-> 32:v15-> 33:v94-> 34:v17-> 35:v91-> 36:v19-> 37:v88-> 38:v21-> 39:v85-> 40:v23-> 41:v82-> 42:v25-> 43:v79-> 44:v27-> 45:v76-> 46:v29-> 47:v73-> 19:v111-> 50:v31-> 51:v32-> 52:v34-> 53:v35-> 54:v36-> 55:v37-> 56:v39-> 57:v40-> 58:v41-> 59:v42-> 60:v44-> 61:v45-> 62:v46-> 63:v47-> 64:v49-> 65:v50"
// [Asm]   comment = "v2<-s0;v29<-a0;v94<-a1;v42<-a0;v9<-a0;v27<-a0;v35<-a0;v39<-a0;v115<-a1;v36<-a0;v7<-a0;v79<-a1;v97<-a1;v85<-a1;v50<-a0;v34<-a0;v112<-a1;v45<-a0;v6<-s0;v114<-a0;v103<-a1;v46<-a0;v23<-a0;v41<-a0;v17<-a0;v32<-a0;v37<-a0;v5<-s2;v44<-a0;v21<-a0;v73<-a1;v25<-a0;v100<-a1;v91<-a1;v49<-a0;v19<-a0;v15<-a0;v71<-a1;v40<-a0;v70<-a0;v88<-a1;v11<-a0;v82<-a1;v109<-a0;v31<-a0;v13<-a0;v76<-a1;v106<-a1;v47<-a0;v4<-s1;v111<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.255"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv43 ← fa0", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv86 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv77 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r32 [label="fv38 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r24 [label="fv92 ← fa0", color=green];
// [Asm]   r31 [label="fv33 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv104 ← fa0", color=green];
// [Asm]   r23 [label="fv95 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv83 ← fa0", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv80 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv48 ← fa0", color=green];
// [Asm]   r22 [label="fv98 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv74 ← fa0", color=green];
// [Asm]   r25 [label="fv89 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv107 ← fa0", color=green];
// [Asm]   r21 [label="fv101 ← fa0", color=green];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv107-> 20:fv104-> 21:fv101-> 22:fv98-> 23:fv95-> 24:fv92-> 25:fv89-> 26:fv86-> 27:fv83-> 28:fv80-> 29:fv77-> 30:fv74-> 31:fv33-> 32:fv38-> 33:fv43-> 34:fv48"
// [Asm]   comment = "fv43<-fa0;fv86<-fa0;fv77<-fa0;fv38<-fa0;fv92<-fa0;fv33<-fa0;fv104<-fa0;fv95<-fa0;fv83<-fa0;fv80<-fa0;fv48<-fa0;fv98<-fa0;fv74<-fa0;fv89<-fa0;fv107<-fa0;fv101<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v114, 2 ->   li a0, 2
// [Asm] subst   li v115, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.256 ->   call gen_arr.256
// [Asm] subst   mv v4, a0 ->   mv s1, a0
// [Asm] subst   li v111, 3 ->   li a0, 3
// [Asm] subst   li v112, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.256 ->   call gen_arr.256
// [Asm] subst   mv v5, a0 ->   mv s2, a0
// [Asm] subst   li v109, 2 ->   li a0, 2
// [Asm] subst   mv a1, v109 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.256 ->   call gen_arr.256
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v106, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv107, v106 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv107, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v103, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv104, v103 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv104, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v100, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv101, v100 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv101, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v97, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv98, v97 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv98, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v94, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv95, v94 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv95, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v91, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv92, v91 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv92, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v88, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv89, v88 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv89, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v85, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv86, v85 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv86, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v82, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv83, v82 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv83, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v79, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv80, v79 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv80, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v76, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv77, v76 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv77, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v73, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv74, v73 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv74, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v70, 2 ->   li a0, 2
// [Asm] subst   li v71, 3 ->   li a1, 3
// [Asm] subst   mv a2, v70 ->   mv a2, a0
// [Asm] subst   mv a3, v4 ->   mv a3, s1
// [Asm] subst   mv a4, v5 ->   mv a4, s2
// [Asm] subst   mv a5, v6 ->   mv a5, s0
// [Asm] subst   call matmul.251 ->   call matmul.251
// [Asm] subst   ld v32, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv33, 0(v32) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v34, fv33, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v37, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv38, 8(v37) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v39, fv38, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v42, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv43, 0(v42) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v44, fv43, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v47, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv48, 8(v47) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v49, fv48, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%12) -> v25, BlockParam(bref=b12, bpref=$b.0) -> v14, BlockParam(bref=b2, bpref=$b.0) -> v8, Insn(iref=%15) -> fv28, BlockParam(bref=b19, bpref=$b.0) -> v20, FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b16, bpref=$b.0) -> v18, Insn(iref=%9) -> v23, Insn(iref=%16) -> fv29, Insn(iref=%8) -> v19, Self(fref=f2) -> v0, Insn(iref=%14) -> v27, Insn(iref=%5) -> v17, Insn(iref=%0) -> v9, Insn(iref=%19) -> v32, BlockParam(bref=b13, bpref=$b.0) -> v21, Insn(iref=%4) -> v13, FnParam(fref=f2, fpref=$f.5) -> v7, Insn(iref=%3) -> v16, Insn(iref=%18) -> v31, Insn(iref=%13) -> fv26, Insn(iref=%7) -> v22, BlockParam(bref=b5, bpref=$b.0) -> v10, BlockParam(bref=b6, bpref=$b.0) -> v15, Insn(iref=%17) -> fv30, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v11, Insn(iref=%11) -> fv24, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b9, bpref=$b.0) -> v12, FnParam(fref=f2, fpref=$f.2) -> v4, FnParam(fref=f2, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b16, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b9, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v17]
// [Asm] defined: v18 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v16]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: v15 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v7, v8, v4, v17, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v22]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v5, v7, v12, v52, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v53, v7, v12, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v5, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v49, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v5, v7, v12, v18, zero, v23, v50, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [fv24]
// [Asm] live_set: [fv24, v5, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v46]
// [Asm] live_set: [fv24, v5, v46, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [fv24, v5, v7, v12, v18, zero, v23, v8, v4, v47, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, fv24, v5, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v25, fv24, v5, v7, v43, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [fv24, v5, v7, v12, v44, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv26]
// [Asm] live_set: [fv24, v5, v7, v12, fv26, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v40, fv24, v5, v7, v12, fv26, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [fv24, v5, v7, v41, v12, fv26, v18, zero, v23, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v27]
// [Asm] live_set: [fv24, v5, v7, v12, fv26, v18, zero, v23, v27, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v37]
// [Asm] live_set: [fv24, v5, v7, v37, v12, fv26, v18, zero, v23, v27, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [fv24, v5, v18, zero, v23, v7, v8, v4, v38, v6, v12, fv26, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [fv28]
// [Asm] live_set: [fv24, v5, fv28, v18, zero, v23, v7, v8, v4, v6, v12, fv26, v3]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v5, v18, zero, v23, v7, v8, fv30, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v18, zero, v23, v7, v8, fv30, v4, v6, v12, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v18, zero, v7, v8, fv30, v35, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v7, v8, v4, v32, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [v32]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v7, v8, v4, v6, v12, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v20 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop1.252"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r38 [label="v34 ← t1", color=green];
// [Asm]   r33 [label="v40 ← t1", color=green];
// [Asm]   r9 [label="v5 ← a3", color=green];
// [Asm]   r26 [label="v49 ← t1", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="v18 ← a6", color=green];
// [Asm]   r42 [label="v11 ← a6", color=green];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r29 [label="v47 ← t1", color=green];
// [Asm]   r35 [label="v27 ← t1", color=green];
// [Asm]   r7 [label="v3 ← a1", color=green];
// [Asm]   r10 [label="v6 ← a4", color=green];
// [Asm]   r8 [label="v4 ← a2", color=green];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r36 [label="v37 ← t2", color=green];
// [Asm]   r24 [label="v53 ← t0", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r32 [label="v44 ← t1", color=green];
// [Asm]   r31 [label="v43 ← t2", color=green];
// [Asm]   r39 [label="v35 ← t0", color=green];
// [Asm]   r17 [label="v15 ← a6", color=green];
// [Asm]   r12 [label="v8 ← a0", color=green];
// [Asm]   r37 [label="v38 ← t1", color=green];
// [Asm]   r20 [label="v17 ← a6", color=green];
// [Asm]   r23 [label="v52 ← t0", color=green];
// [Asm]   r3 [label="a4", color=blue];
// [Asm]   r27 [label="v50 ← t1", color=green];
// [Asm]   r1 [label="a5", color=blue];
// [Asm]   r40 [label="v32 ← a6", color=green];
// [Asm]   r28 [label="v46 ← t1", color=green];
// [Asm]   r41 [label="v20 ← a6", color=green];
// [Asm]   r11 [label="v7 ← a5", color=green];
// [Asm]   r34 [label="v41 ← t1", color=green];
// [Asm]   r22 [label="a0", color=blue];
// [Asm]   r14 [label="v12 ← a7", color=green];
// [Asm]   r30 [label="v25 ← t1", color=green];
// [Asm]   r25 [label="v23 ← t0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v16 ← a0", color=green];
// [Asm]   r18 [label="v14 ← a6", color=green];
// [Asm]   r19 [label="v21 ← a6", color=green];
// [Asm]   r21 [label="v22 ← a6", color=green];
// [Asm]   r8 -- r31;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r12 -- r32;
// [Asm]   r11 -- r35;
// [Asm]   r8 -- r36;
// [Asm]   r13 -- r32;
// [Asm]   r11 -- r14;
// [Asm]   r13 -- r36;
// [Asm]   r7 -- r25;
// [Asm]   r14 -- r40;
// [Asm]   r3 -- r9;
// [Asm]   r13 -- r31;
// [Asm]   r9 -- r26;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r10 -- r40;
// [Asm]   r7 -- r27;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r11 -- r19;
// [Asm]   r14 -- r34;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r34;
// [Asm]   r13 -- r38;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r13 -- r30;
// [Asm]   r25 -- r29;
// [Asm]   r13 -- r33;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r18;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r25 -- r32;
// [Asm]   r10 -- r33;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r38;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r10 -- r31;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r2 -- r36;
// [Asm]   r14 -- r36;
// [Asm]   r13 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r8 -- r32;
// [Asm]   r25 -- r37;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r42;
// [Asm]   r11 -- r36;
// [Asm]   r9 -- r39;
// [Asm]   r14 -- r37;
// [Asm]   r8 -- r30;
// [Asm]   r14 -- r32;
// [Asm]   r7 -- r29;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r14 -- r26;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r12 -- r34;
// [Asm]   r9 -- r40;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r11 -- r23;
// [Asm]   r10 -- r29;
// [Asm]   r9 -- r30;
// [Asm]   r14 -- r41;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r42;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r37;
// [Asm]   r10 -- r16;
// [Asm]   r7 -- r17;
// [Asm]   r14 -- r35;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r40;
// [Asm]   r12 -- r20;
// [Asm]   r14 -- r33;
// [Asm]   r9 -- r11;
// [Asm]   r12 -- r41;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r25 -- r35;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r3;
// [Asm]   r14 -- r25;
// [Asm]   r9 -- r24;
// [Asm]   r13 -- r14;
// [Asm]   r25 -- r34;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r10 -- r11;
// [Asm]   r9 -- r36;
// [Asm]   r11 -- r41;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r8 -- r26;
// [Asm]   r10 -- r36;
// [Asm]   r12 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r13 -- r39;
// [Asm]   r10 -- r32;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r11 -- r28;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r39;
// [Asm]   r12 -- r35;
// [Asm]   r25 -- r28;
// [Asm]   r9 -- r25;
// [Asm]   r14 -- r20;
// [Asm]   r7 -- r21;
// [Asm]   r14 -- r27;
// [Asm]   r14 -- r38;
// [Asm]   r9 -- r27;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r11 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r9 -- r41;
// [Asm]   r14 -- r39;
// [Asm]   r12 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r13 -- r37;
// [Asm]   r14 -- r30;
// [Asm]   r12 -- r24;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r25 -- r38;
// [Asm]   r10 -- r37;
// [Asm]   r8 -- r17;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r8 -- r37;
// [Asm]   r7 -- r10;
// [Asm]   r12 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r39;
// [Asm]   r8 -- r29;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r14 -- r31;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r10 -- r25;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r30;
// [Asm]   r10 -- r35;
// [Asm]   r13 -- r29;
// [Asm]   r2 -- r23;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r25 -- r33;
// [Asm]   r13 -- r24;
// [Asm]   r25 -- r36;
// [Asm]   r11 -- r40;
// [Asm]   r11 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r12 -- r38;
// [Asm]   r9 -- r29;
// [Asm]   r12 -- r36;
// [Asm]   r8 -- r19;
// [Asm]   r14 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r13 -- r26;
// [Asm]   r7 -- r26;
// [Asm]   r7 -- r13;
// [Asm]   r25 -- r30;
// [Asm]   r9 -- r42;
// [Asm]   r25 -- r26;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r38;
// [Asm]   r10 -- r41;
// [Asm]   r10 -- r27;
// [Asm]   r14 -- r29;
// [Asm]   r8 -- r33;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r13 -- r25;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r2 -- r28;
// [Asm]   r12 -- r42;
// [Asm]   r2 -- r29;
// [Asm]   r11 -- r42;
// [Asm]   r7 -- r37;
// [Asm]   r11 -- r33;
// [Asm]   r10 -- r28;
// [Asm]   r13 -- r34;
// [Asm]   r9 -- r34;
// [Asm]   r9 -- r38;
// [Asm]   r8 -- r13;
// [Asm]   r12 -- r31;
// [Asm]   r9 -- r33;
// [Asm]   r7 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r11 -- r39;
// [Asm]   r8 -- r40;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r39;
// [Asm]   r7 -- r11;
// [Asm]   r9 -- r37;
// [Asm]   r2 -- r21;
// [Asm]   r12 -- r39;
// [Asm]   r7 -- r39;
// [Asm]   r12 -- r30;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r11 -- r38;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r13 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r12 -- r26;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v2-> 1:a5-> 7:v3-> 8:v4-> 9:v5-> 10:v6-> 2:zero-> 11:v7-> 12:v8-> 13:v18-> 14:v12-> 23:v52-> 24:v53-> 25:v23-> 26:v49-> 27:v50-> 28:v46-> 29:v47-> 30:v25-> 31:v43-> 32:v44-> 33:v40-> 34:v41-> 35:v27-> 36:v37-> 37:v38-> 38:v34-> 39:v35-> 19:v21-> 20:v17-> 40:v32-> 17:v15-> 21:v22-> 41:v20-> 42:v11-> 16:v16-> 18:v14-> 3:a4-> 6:a3-> 4:a2-> 5:a1-> 15:v10-> 22:a0"
// [Asm]   comment = "v2<-a0;v34<-t1;v40<-t1;v5<-a3;v49<-t1;v18<-a6;v11<-a6;v47<-t1;v27<-t1;v3<-a1;v6<-a4;v4<-a2;v37<-t2;v53<-t0;v10<-a0;v44<-t1;v43<-t2;v35<-t0;v15<-a6;v8<-a0;v38<-t1;v17<-a6;v52<-t0;v50<-t1;v32<-a6;v46<-t1;v20<-a6;v7<-a5;v41<-t1;v12<-a7;v25<-t1;v23<-t0;v16<-a0;v14<-a6;v21<-a6;v22<-a6;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop1.252"];
// [Asm]   r0 [label="fv24 ← fa0", color=green];
// [Asm]   r2 [label="fv28 ← fa2", color=green];
// [Asm]   r1 [label="fv26 ← fa1", color=green];
// [Asm]   r3 [label="fv30 ← fa0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv24-> 1:fv26-> 2:fv28-> 3:fv30"
// [Asm]   comment = "fv24<-fa0;fv28<-fa2;fv26<-fa1;fv30<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   blt v8, zero, .loop1.252_4 ->   blt a0, zero, .loop1.252_4
// [Asm] subst   addi v16, v8, -1 ->   addi a0, a0, -1
// [Asm] subst   j .loop1.252_2 ->   j .loop1.252_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v12, v11 ->   mv a7, a6
// [Asm] subst   blt v18, zero, .loop1.252_18 ->   blt a6, zero, .loop1.252_18
// [Asm] subst   mv v14, zero ->   mv a6, zero
// [Asm] subst   blt v12, zero, .loop1.252_11 ->   blt a7, zero, .loop1.252_11
// [Asm] subst   addi v17, v6, -1 ->   addi a6, a4, -1
// [Asm] subst   addi v22, v12, -1 ->   addi a6, a7, -1
// [Asm] subst   mv v12, v22 ->   mv a7, a6
// [Asm] subst   j .loop1.252_9 ->   j .loop1.252_9
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v52, v8, 3 ->   slliw t0, a0, 3
// [Asm] subst   add v53, v5, v52 ->   add t0, a3, t0
// [Asm] subst   ld v23, 0(v53) ->   ld t0, 0(t0)
// [Asm] subst   slliw v49, v12, 3 ->   slliw t1, a7, 3
// [Asm] subst   add v50, v23, v49 ->   add t1, t0, t1
// [Asm] subst   fld fv24, 0(v50) ->   fld fa0, 0(t1)
// [Asm] subst   slliw v46, v8, 3 ->   slliw t1, a0, 3
// [Asm] subst   add v47, v3, v46 ->   add t1, a1, t1
// [Asm] subst   ld v25, 0(v47) ->   ld t1, 0(t1)
// [Asm] subst   slliw v43, v18, 3 ->   slliw t2, a6, 3
// [Asm] subst   add v44, v25, v43 ->   add t1, t1, t2
// [Asm] subst   fld fv26, 0(v44) ->   fld fa1, 0(t1)
// [Asm] subst   slliw v40, v18, 3 ->   slliw t1, a6, 3
// [Asm] subst   add v41, v4, v40 ->   add t1, a2, t1
// [Asm] subst   ld v27, 0(v41) ->   ld t1, 0(t1)
// [Asm] subst   slliw v37, v12, 3 ->   slliw t2, a7, 3
// [Asm] subst   add v38, v27, v37 ->   add t1, t1, t2
// [Asm] subst   fld fv28, 0(v38) ->   fld fa2, 0(t1)
// [Asm] subst   fmadd.d fv30, fv26, fv28, fv24 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v34, v12, 3 ->   slliw t1, a7, 3
// [Asm] subst   add v35, v23, v34 ->   add t0, t0, t1
// [Asm] subst   fsd fv30, 0(v35) ->   fsd fa0, 0(t0)
// [Asm] subst   addi v32, v18, -1 ->   addi a6, a6, -1
// [Asm] subst   j .loop1.252_16 ->   j .loop1.252_16
// [Asm] subst   mv v20, zero ->   mv a6, zero
// [Asm] subst   addi v11, v7, -1 ->   addi a6, a5, -1
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, FnParam(fref=f3, fpref=$f.4) -> v6, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%1) -> v9, FnParam(fref=f3, fpref=$f.3) -> v5, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%0) -> v8
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, a5, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, a5, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, a5, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, a5, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, a5, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, a5, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2, v4, v6, v5, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v8, v4, v5, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v8, v4, v5, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, v4, v6, v5, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v7, v4, a1, v6, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v7, a2, v4, a1, a0, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, v4, a1, a3, a0, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, v4, a1, a3, a0, a4]
// [Asm] move_origin: [v3]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a2, a1, a3, a5, a0, a4]
// [Asm] move_origin: [v4]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of matmul.251"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r9 [label="v6 ← a2", color=green];
// [Asm]   r6 [label="v3 ← a6", color=green];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="a5", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v8 ← a0", color=green];
// [Asm]   r7 [label="v4 ← a7", color=green];
// [Asm]   r10 [label="v7 ← a3", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="v5 ← a1", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r17;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 3:a3-> 4:a5-> 5:a4-> 6:v3-> 7:v4-> 12:a0-> 8:v5-> 9:v6-> 10:v7-> 11:v8-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:v9"
// [Asm]   comment = "v2<-a0;v9<-a0;v6<-a2;v3<-a6;v8<-a0;v4<-a7;v7<-a3;v5<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of matmul.251"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a6, a1
// [Asm] subst   mv v4, a2 ->   mv a7, a2
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, a4 ->   mv a2, a4
// [Asm] subst   mv v7, a5 ->   mv a3, a5
// [Asm] subst   addi v8, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   mv a4, v3 ->   mv a4, a6
// [Asm] subst   mv a5, v4 ->   mv a5, a7
// [Asm] subst   call loop1.252 ->   call loop1.252
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.255:
// [Asm] # block info: defs: [v76, fv86, v91, v79, fv89, a1, s11, v44, fa1, fv80, fv74, fv95, fv38, v73, v82, fv92, fa2, ft6, fa6, v27, a4, v50, a6, ft5, ft10, v6, fv83, fv77, ft4, v5, ft9, v49, fa4, ft2, v37, v17, fv104, a3, v31, fa7, a7, fa3, ft3, fv43, v45, t2, v40, v25, t1, v13, v42, v7, ft0, ft1, v32, v41, fv107, v115, v109, v106, fv98, v97, v29, v103, v19, v4, v47, v34, ft7, v11, v71, v46, v21, a5, a0, v36, v88, fv48, a2, fv101, v114, v111, v9, v39, ft8, t3, t0, v94, v112, fa5, v23, fa0, v85, fv33, v35, t4, v70, v15, v100, v2], uses: [v2, fv86, v91, v79, fv89, a1, s11, v44, fv80, fv74, fv95, fv38, v73, v82, fv92, v27, a4, v6, fv83, fv77, v5, v49, v37, v17, fv104, a3, fv43, v25, v13, v42, v7, v32, fv107, v106, fv98, v115, v109, v97, v29, zero, v103, v19, v4, v47, v34, v11, v71, v21, a5, a0, v88, fv48, a2, fv101, v114, v111, v9, v39, v94, v112, v23, v85, fv33, v70, v15, v100, v76], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.255_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v114, 2  # live: [zero, v114, v2]
// [Asm]   mv a0, v114  # live: [zero, a0, v2]
// [Asm]   li v115, 3  # live: [v115, zero, a0, v2]
// [Asm]   mv a1, v115  # live: [zero, a0, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, a2, a1, v2]
// [Asm]   call gen_arr.256  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [zero, v4, v2]
// [Asm]   # save_ctx2  # live: [zero, v4, v2]
// [Asm]   li v111, 3  # live: [zero, v4, v111, v2]
// [Asm]   mv a0, v111  # live: [zero, a0, v4, v2]
// [Asm]   li v112, 2  # live: [v112, zero, a0, v4, v2]
// [Asm]   mv a1, v112  # live: [zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v4, a2, a1, v2]
// [Asm]   call gen_arr.256  # live: [zero, a0, v4, v2]
// [Asm]   mv v5, a0  # live: [v5, zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   li v109, 2  # live: [v109, v5, zero, v4, v2]
// [Asm]   mv a0, v109  # live: [v109, v5, zero, a0, v4, v2]
// [Asm]   mv a1, v109  # live: [v5, zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, v4, a2, a1]
// [Asm]   call gen_arr.256  # live: [v5, zero, a0, v4]
// [Asm]   mv v6, a0  # live: [v5, zero, v4, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   ld v7, 0(v4)  # live: [v5, zero, v7, v4, v6]
// [Asm]   li v106, 4607182418800017408  # live: [v106, v5, zero, v7, v4, v6]
// [Asm]   fmv.d.x fv107, v106  # live: [v5, zero, v7, v4, v6, fv107]
// [Asm]   fsd fv107, 0(v7)  # live: [v5, zero, v4, v6]
// [Asm]   ld v9, 0(v4)  # live: [v5, zero, v4, v6, v9]
// [Asm]   li v103, 4611686018427387904  # live: [v5, zero, v103, v4, v6, v9]
// [Asm]   fmv.d.x fv104, v103  # live: [v5, zero, v4, v6, fv104, v9]
// [Asm]   fsd fv104, 8(v9)  # live: [v5, zero, v4, v6]
// [Asm]   ld v11, 0(v4)  # live: [v11, v5, zero, v4, v6]
// [Asm]   li v100, 4613937818241073152  # live: [v11, v5, zero, v4, v6, v100]
// [Asm]   fmv.d.x fv101, v100  # live: [v11, v5, zero, v4, fv101, v6]
// [Asm]   fsd fv101, 16(v11)  # live: [v5, zero, v4, v6]
// [Asm]   ld v13, 8(v4)  # live: [v5, zero, v13, v4, v6]
// [Asm]   li v97, 4616189618054758400  # live: [v5, zero, v13, v97, v4, v6]
// [Asm]   fmv.d.x fv98, v97  # live: [fv98, v5, zero, v13, v4, v6]
// [Asm]   fsd fv98, 0(v13)  # live: [v5, zero, v4, v6]
// [Asm]   ld v15, 8(v4)  # live: [v5, zero, v4, v6, v15]
// [Asm]   li v94, 4617315517961601024  # live: [v94, v5, zero, v4, v6, v15]
// [Asm]   fmv.d.x fv95, v94  # live: [v5, zero, v4, v6, v15, fv95]
// [Asm]   fsd fv95, 8(v15)  # live: [v5, zero, v4, v6]
// [Asm]   ld v17, 8(v4)  # live: [v5, zero, v4, v6, v17]
// [Asm]   li v91, 4618441417868443648  # live: [v5, v91, zero, v4, v6, v17]
// [Asm]   fmv.d.x fv92, v91  # live: [v5, fv92, zero, v4, v6, v17]
// [Asm]   fsd fv92, 16(v17)  # live: [v5, zero, v4, v6]
// [Asm]   ld v19, 0(v5)  # live: [v5, zero, v19, v4, v6]
// [Asm]   li v88, 4619567317775286272  # live: [v5, zero, v19, v88, v4, v6]
// [Asm]   fmv.d.x fv89, v88  # live: [v5, zero, fv89, v19, v4, v6]
// [Asm]   fsd fv89, 0(v19)  # live: [v5, zero, v4, v6]
// [Asm]   ld v21, 0(v5)  # live: [v5, v21, zero, v4, v6]
// [Asm]   li v85, 4620693217682128896  # live: [v5, v21, zero, v85, v4, v6]
// [Asm]   fmv.d.x fv86, v85  # live: [fv86, v5, v21, zero, v4, v6]
// [Asm]   fsd fv86, 8(v21)  # live: [v5, zero, v4, v6]
// [Asm]   ld v23, 8(v5)  # live: [v5, zero, v23, v4, v6]
// [Asm]   li v82, 4621256167635550208  # live: [v5, v82, zero, v23, v4, v6]
// [Asm]   fmv.d.x fv83, v82  # live: [v5, zero, v23, v4, v6, fv83]
// [Asm]   fsd fv83, 0(v23)  # live: [v5, zero, v4, v6]
// [Asm]   ld v25, 8(v5)  # live: [v25, v5, zero, v4, v6]
// [Asm]   li v79, 4621819117588971520  # live: [v25, v5, zero, v79, v4, v6]
// [Asm]   fmv.d.x fv80, v79  # live: [v25, v5, zero, v4, v6, fv80]
// [Asm]   fsd fv80, 8(v25)  # live: [v5, zero, v4, v6]
// [Asm]   ld v27, 16(v5)  # live: [v5, zero, v27, v4, v6]
// [Asm]   li v76, 4622382067542392832  # live: [v5, zero, v27, v4, v6, v76]
// [Asm]   fmv.d.x fv77, v76  # live: [v5, zero, v27, v4, v6, fv77]
// [Asm]   fsd fv77, 0(v27)  # live: [v5, zero, v4, v6]
// [Asm]   ld v29, 16(v5)  # live: [v5, zero, v29, v4, v6]
// [Asm]   li v73, 4622945017495814144  # live: [v5, zero, v29, v4, v6, v73]
// [Asm]   fmv.d.x fv74, v73  # live: [v5, zero, v29, v4, v6, fv74]
// [Asm]   fsd fv74, 8(v29)  # live: [v5, zero, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   li v70, 2  # live: [v5, zero, v4, v6, v70]
// [Asm]   mv a0, v70  # live: [v5, zero, a0, v4, v6, v70]
// [Asm]   li v71, 3  # live: [v5, v71, zero, a0, v4, v6, v70]
// [Asm]   mv a1, v71  # live: [v5, zero, a0, v4, a1, v6, v70]
// [Asm]   mv a2, v70  # live: [v5, zero, a0, a2, v4, a1, v6]
// [Asm]   mv a3, v4  # live: [v5, zero, a0, a2, v6, a1, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, v6, a1, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm]   call matmul.251  # live: [v6, zero, a0]
// [Asm]   mv v31, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v32, 0(v6)  # live: [v32, v6, zero]
// [Asm]   fld fv33, 0(v32)  # live: [v6, zero, fv33]
// [Asm]   fcvt.w.d v34, fv33, rtz  # live: [v6, zero, v34]
// [Asm]   # save_ctx2  # live: [v6, zero, v34]
// [Asm]   mv a0, v34  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v35, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v36, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v37, 0(v6)  # live: [v37, v6, zero]
// [Asm]   fld fv38, 8(v37)  # live: [v6, zero, fv38]
// [Asm]   fcvt.w.d v39, fv38, rtz  # live: [v6, zero, v39]
// [Asm]   # save_ctx2  # live: [v6, zero, v39]
// [Asm]   mv a0, v39  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v40, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v41, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v42, 8(v6)  # live: [v6, zero, v42]
// [Asm]   fld fv43, 0(v42)  # live: [v6, zero, fv43]
// [Asm]   fcvt.w.d v44, fv43, rtz  # live: [v6, v44, zero]
// [Asm]   # save_ctx2  # live: [v6, v44, zero]
// [Asm]   mv a0, v44  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v45, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v46, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v47, 8(v6)  # live: [v47, zero]
// [Asm]   fld fv48, 8(v47)  # live: [fv48, zero]
// [Asm]   fcvt.w.d v49, fv48, rtz  # live: [v49, zero]
// [Asm]   # save_ctx2  # live: [v49, zero]
// [Asm]   mv a0, v49  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v50, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] loop1.252:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v3], uses: [a5, a0, a4, a2, a1, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v8]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: [v8]
// [Asm] .loop1.252_2:
// [Asm] # control
// [Asm]   blt v8, zero, .loop1.252_4  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v11, v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_3:
// [Asm]   addi v11, v7, -1  # live: [v11, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v11], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_7:
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v12, zero], upward_exposed: [v12, zero], params_defs: [v12]
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v12, v3], live_out: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: [v12]
// [Asm] .loop1.252_9:
// [Asm] # control
// [Asm]   blt v12, zero, .loop1.252_11  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v6], upward_exposed: [v6], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v12, v3], live_out: [v5, zero, v8, v7, v4, v17, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_10:
// [Asm]   addi v17, v6, -1  # live: [v5, zero, v7, v8, v4, v17, v6, v12, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v18], uses: [v17], upward_exposed: [v17], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v17, v6, v12, v3], live_out: [v5, v18, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_14:
// [Asm] # control
// [Asm]   mv v18, v17  # live: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v18, zero], upward_exposed: [v18, zero], params_defs: [v18]
// [Asm] # live_in: [v5, v18, zero, v8, v7, v4, v6, v12, v3], live_out: [v5, v18, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: [v18]
// [Asm] .loop1.252_16:
// [Asm] # control
// [Asm]   blt v18, zero, .loop1.252_18  # live: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, fv24, v46, v53, v49, fv30, v41, v37, v32, v43, v52, v44, fv26, fv28, v18, v23, v50, v27, v35, v38, v47, v34, v40], uses: [v3, v25, fv24, fv30, v41, v32, v12, v44, v50, v27, v8, v4, v47, v34, v46, v5, v53, v49, v37, v43, v52, fv26, fv28, v18, v23, v35, v38, v40], upward_exposed: [v5, v18, v8, v4, v12, v3], params_defs: []
// [Asm] # live_in: [v5, v18, zero, v8, v7, v4, v6, v12, v3], live_out: [v5, v18, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_17:
// [Asm]   slliw v52, v8, 3  # live: [v5, v7, v12, v52, v18, zero, v8, v4, v6, v3]
// [Asm]   add v53, v5, v52  # live: [v5, v53, v7, v12, v18, zero, v8, v4, v6, v3]
// [Asm]   ld v23, 0(v53)  # live: [v5, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   slliw v49, v12, 3  # live: [v5, v49, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   add v50, v23, v49  # live: [v5, v7, v12, v18, zero, v23, v50, v8, v4, v6, v3]
// [Asm]   fld fv24, 0(v50)  # live: [fv24, v5, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   slliw v46, v8, 3  # live: [fv24, v5, v46, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   add v47, v3, v46  # live: [fv24, v5, v7, v12, v18, zero, v23, v8, v4, v47, v6, v3]
// [Asm]   ld v25, 0(v47)  # live: [v25, fv24, v5, v7, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   slliw v43, v18, 3  # live: [v25, fv24, v5, v7, v43, v12, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   add v44, v25, v43  # live: [fv24, v5, v7, v12, v44, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   fld fv26, 0(v44)  # live: [fv24, v5, v7, v12, fv26, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   slliw v40, v18, 3  # live: [v40, fv24, v5, v7, v12, fv26, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   add v41, v4, v40  # live: [fv24, v5, v7, v41, v12, fv26, v18, zero, v23, v8, v4, v6, v3]
// [Asm]   ld v27, 0(v41)  # live: [fv24, v5, v7, v12, fv26, v18, zero, v23, v27, v8, v4, v6, v3]
// [Asm]   slliw v37, v12, 3  # live: [fv24, v5, v7, v37, v12, fv26, v18, zero, v23, v27, v8, v4, v6, v3]
// [Asm]   add v38, v27, v37  # live: [fv24, v5, v18, zero, v23, v7, v8, v4, v38, v6, v12, fv26, v3]
// [Asm]   fld fv28, 0(v38)  # live: [fv24, v5, fv28, v18, zero, v23, v7, v8, v4, v6, v12, fv26, v3]
// [Asm]   fmadd.d fv30, fv26, fv28, fv24  # live: [v5, v18, zero, v23, v7, v8, fv30, v4, v6, v12, v3]
// [Asm]   slliw v34, v12, 3  # live: [v5, v18, zero, v23, v7, v8, fv30, v4, v6, v12, v34, v3]
// [Asm]   add v35, v23, v34  # live: [v5, v18, zero, v7, v8, fv30, v35, v4, v6, v12, v3]
// [Asm]   fsd fv30, 0(v35)  # live: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm]   addi v32, v18, -1  # live: [v5, zero, v7, v8, v4, v32, v6, v12, v3]
// [Asm] # control
// [Asm]   mv v18, v32  # live: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm]   j .loop1.252_16  # live: [v5, v18, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .loop1.252_4:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .loop1.252_5:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v14, v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_11:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14, v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v14], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14, v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v14]
// [Asm] .loop1.252_12:
// [Asm] # control
// [Asm]   mv v15, v14  # live: [v5, zero, v8, v7, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v8], uses: [v16, v8], upward_exposed: [v8], params_defs: [v15]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v15, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: [v15]
// [Asm] .loop1.252_6:
// [Asm]   addi v16, v8, -1  # live: [v5, v16, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v16  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   j .loop1.252_2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v12, v3], live_out: [v5, zero, v20, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: []
// [Asm] .loop1.252_18:
// [Asm] # control
// [Asm]   mv v20, zero  # live: [v5, zero, v20, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v5, zero, v20, v8, v7, v4, v6, v12, v3], live_out: [v5, v21, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: [v20]
// [Asm] .loop1.252_19:
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v5, v21, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # block info: defs: [v12, v22], uses: [v12, v22], upward_exposed: [v12], params_defs: [v21]
// [Asm] # live_in: [v5, v21, zero, v8, v7, v4, v6, v12, v3], live_out: [v5, zero, v8, v7, v4, v6, v12, v3]
// [Asm] # block parameters: [v21]
// [Asm] .loop1.252_13:
// [Asm]   addi v22, v12, -1  # live: [v5, zero, v22, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v12, v22  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm]   j .loop1.252_9  # live: [v5, zero, v7, v8, v4, v6, v12, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.255  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] gen_arr.256:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, v5, v21, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v5, v21, a0, v8, a2, v4, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v5, s11, v9, zero, v3]
// [Asm] # block parameters: []
// [Asm] .gen_arr.256_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, v2]
// [Asm]   slliw v21, v2, 3  # live: [v3, v21, zero, v4, s11, v2]
// [Asm]   sub v5, s11, v21  # live: [v3, v5, zero, v4, v2]
// [Asm]   andi s11, v5, -8  # live: [v3, v5, zero, v4, s11, v2]
// [Asm]   mv a1, v2  # live: [v3, v5, zero, v4, a1, s11, v2]
// [Asm]   mv a0, v5  # live: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, v4  # live: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti64  # live: [v2, v5, s11, zero, v3]
// [Asm]   addi v8, v2, -1  # live: [v8, v5, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v5, s11, v9, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [v9]
// [Asm] # live_in: [v5, s11, v9, zero, v3], live_out: [v5, s11, v9, zero, v3]
// [Asm] # block parameters: [v9]
// [Asm] .gen_arr.256_2:
// [Asm] # control
// [Asm]   blt v9, zero, .gen_arr.256_4  # live: [v5, s11, v9, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v16, v14, v18, v6, a1, v17, s11, v9], uses: [v5, v16, v14, v18, v6, v17, s11, v9, v3], upward_exposed: [v5, s11, v9, v3], params_defs: []
// [Asm] # live_in: [v5, s11, v9, zero, v3], live_out: [v5, s11, v9, zero, v3]
// [Asm] # block parameters: []
// [Asm] .gen_arr.256_3:
// [Asm]   slliw v18, v3, 3  # live: [v5, v18, zero, s11, v9, v3]
// [Asm]   sub v6, s11, v18  # live: [v5, zero, v6, v9, v3]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v6, s11, v9, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, v6, s11, v9, v3]
// [Asm]   slliw v16, v9, 3  # live: [v5, v16, zero, v6, s11, v9, v3]
// [Asm]   add v17, v5, v16  # live: [v5, zero, v6, v17, s11, v9, v3]
// [Asm]   sd v6, 0(v17)  # live: [v5, s11, zero, v9, v3]
// [Asm]   addi v14, v9, -1  # live: [v5, v14, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v9, v14  # live: [v5, s11, v9, zero, v3]
// [Asm]   j .gen_arr.256_2  # live: [v5, s11, v9, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v5], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .gen_arr.256_4:
// [Asm] # control
// [Asm]   mv v11, v5  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .gen_arr.256_5:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] matmul.251:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a5, a0, v7, a2, a1, a3, v9, a4, v8, v4, v6, v3], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, a4, a2, a1, a3], live_out: []
// [Asm] # block parameters: []
// [Asm] .matmul.251_0:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, a5, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, a5, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, a5, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, a5, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, a5, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, a5, v3]
// [Asm]   mv v7, a5  # live: [v7, v2, v4, v6, v5, v3]
// [Asm]   addi v8, v2, -1  # live: [v7, v8, v4, v5, v6, v3]
// [Asm]   # save_ctx2  # live: [v7, v8, v4, v5, v6, v3]
// [Asm]   mv a0, v8  # live: [v7, v4, v6, v5, a0, v3]
// [Asm]   mv a1, v5  # live: [v7, v4, a1, v6, a0, v3]
// [Asm]   mv a2, v6  # live: [v7, a2, v4, a1, a0, v3]
// [Asm]   mv a3, v7  # live: [a2, v4, a1, a3, a0, v3]
// [Asm]   mv a4, v3  # live: [a2, v4, a1, a3, a0, a4]
// [Asm]   mv a5, v4  # live: [a2, a1, a3, a5, a0, a4]
// [Asm]   call loop1.252  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("matmul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: LetRec({name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))), Unit)}, App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int))]))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))), Unit)}, App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Int(0), Var("i")), LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Int(0), Var("j")), LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Prim(Var("k"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("loop3"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("loop2"), [Prim(Var("j"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("loop2"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("gen_arr", Array(Array(Double))), args: [("m", Int), ("n", Int)], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat")))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(3)]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("gen_arr"), [Int(2), Int(3)])
// [Knf] build_knf: Var("gen_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(3), Int(2)]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("gen_arr"), [Int(3), Int(2)])
// [Knf] build_knf: Var("gen_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("gen_arr"), [Int(2), Int(2)]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("gen_arr"), [Int(2), Int(2)])
// [Knf] build_knf: Var("gen_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("matmul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("matmul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%11)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f0, fpref=$f.0)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%3)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%3)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%5)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Mem(fref=f4, mref=m0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Insn(iref=%1)]) already set
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.255
// [Main]   .type main.255, @function
// [Main] # leaf false
// [Main] main.255:
// [Main] .main.255_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   call gen_arr.256
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   call gen_arr.256
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   call gen_arr.256
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, a0
// [Main]   mv a3, s1
// [Main]   mv a4, s2
// [Main]   mv a5, s0
// [Main]   call matmul.251
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop1.252
// [Main]   .type loop1.252, @function
// [Main] # leaf true
// [Main] loop1.252:
// [Main] .loop1.252_0:
// [Main] 
// [Main] .loop1.252_2:
// [Main]   blt a0, zero, .loop1.252_4
// [Main] 
// [Main] .loop1.252_3:
// [Main]   addi a6, a5, -1
// [Main] 
// [Main] .loop1.252_7:
// [Main]   mv a7, a6
// [Main] 
// [Main] .loop1.252_9:
// [Main]   blt a7, zero, .loop1.252_11
// [Main] 
// [Main] .loop1.252_10:
// [Main]   addi a6, a4, -1
// [Main] 
// [Main] .loop1.252_14:
// [Main] 
// [Main] .loop1.252_16:
// [Main]   blt a6, zero, .loop1.252_18
// [Main] 
// [Main] .loop1.252_17:
// [Main]   slliw t0, a0, 3
// [Main]   add t0, a3, t0
// [Main]   ld t0, 0(t0)
// [Main]   slliw t1, a7, 3
// [Main]   add t1, t0, t1
// [Main]   fld fa0, 0(t1)
// [Main]   slliw t1, a0, 3
// [Main]   add t1, a1, t1
// [Main]   ld t1, 0(t1)
// [Main]   slliw t2, a6, 3
// [Main]   add t1, t1, t2
// [Main]   fld fa1, 0(t1)
// [Main]   slliw t1, a6, 3
// [Main]   add t1, a2, t1
// [Main]   ld t1, 0(t1)
// [Main]   slliw t2, a7, 3
// [Main]   add t1, t1, t2
// [Main]   fld fa2, 0(t1)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw t1, a7, 3
// [Main]   add t0, t0, t1
// [Main]   fsd fa0, 0(t0)
// [Main]   addi a6, a6, -1
// [Main]   j .loop1.252_16
// [Main] 
// [Main] .loop1.252_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.252_5:
// [Main]   ret
// [Main] 
// [Main] .loop1.252_11:
// [Main]   mv a6, zero
// [Main] 
// [Main] .loop1.252_12:
// [Main] 
// [Main] .loop1.252_6:
// [Main]   addi a0, a0, -1
// [Main]   j .loop1.252_2
// [Main] 
// [Main] .loop1.252_18:
// [Main]   mv a6, zero
// [Main] 
// [Main] .loop1.252_19:
// [Main] 
// [Main] .loop1.252_13:
// [Main]   addi a6, a7, -1
// [Main]   mv a7, a6
// [Main]   j .loop1.252_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.255
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gen_arr.256
// [Main]   .type gen_arr.256, @function
// [Main] # leaf false
// [Main] gen_arr.256:
// [Main] .gen_arr.256_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   slliw a0, s2, 3
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s2
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   addi a0, s2, -1
// [Main] 
// [Main] .gen_arr.256_2:
// [Main]   blt a0, zero, .gen_arr.256_4
// [Main] 
// [Main] .gen_arr.256_3:
// [Main]   slliw a1, s1, 3
// [Main]   sub a2, s11, a1
// [Main]   andi s11, a2, -8
// [Main]   mv a1, s1
// [Main]   slliw a1, a0, 3
// [Main]   add a1, s0, a1
// [Main]   sd a2, 0(a1)
// [Main]   addi a0, a0, -1
// [Main]   j .gen_arr.256_2
// [Main] 
// [Main] .gen_arr.256_4:
// [Main]   mv a0, s0
// [Main] 
// [Main] .gen_arr.256_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl matmul.251
// [Main]   .type matmul.251, @function
// [Main] # leaf false
// [Main] matmul.251:
// [Main] .matmul.251_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a6, a1
// [Main]   mv a7, a2
// [Main]   mv a1, a3
// [Main]   mv a2, a4
// [Main]   mv a3, a5
// [Main]   addi a0, a0, -1
// [Main]   mv a4, a6
// [Main]   mv a5, a7
// [Main]   call loop1.252
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function gen_arr.256
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=Mem(fref=f4, mref=m0), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr), val=Mem(fref=f4, mref=m1))
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m0, fills=[Init(val=FnParam(fref=f4, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function gen_arr.256 to wasm
// [Wasm] Lowering function main.255
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f4, args=[Int32(val=2), Int32(val=3), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f4, args=[Int32(val=3), Int32(val=2), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f4, args=[Int32(val=2), Int32(val=2), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%4), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%6), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%8), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=2), Int32(val=3), Int32(val=2), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%29), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%34), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%35)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%36)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%39), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%41)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%44), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%45)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%46)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.255 to wasm
// [Wasm] Lowering function loop1.252
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=FnParam(fref=f2, fpref=$f.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%9), offset=BlockParam(bref=b9, bpref=$b.0), width=@64))
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=FnParam(fref=f2, fpref=$f.1), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%12), offset=BlockParam(bref=b16, bpref=$b.0), width=@64))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=FnParam(fref=f2, fpref=$f.2), offset=BlockParam(bref=b16, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%14), offset=BlockParam(bref=b9, bpref=$b.0), width=@64))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%11), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%9), offset=BlockParam(bref=b9, bpref=$b.0), width=@64), val=Insn(iref=%17))
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b16, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b16, args=[Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b9, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b16, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b15, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f2, fpref=$f.4), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b14, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f2, fpref=$f.5), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b12, bpref=$b.0) -> $b12.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b19, bpref=$b.0) -> $b19.$b.0
// [Wasm] Local BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function loop1.252 to wasm
// [Wasm] Lowering function matmul.251
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Insn(iref=%0), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function matmul.251 to wasm
// [KnfOpt] func_tre: matmul.1 false
// [KnfOpt] func_tre: loop1.8 true
// [KnfOpt] func_tre: loop2.11 true
// [KnfOpt] func_tre: loop3.14 true
// [KnfOpt] func_tre: main.41 false
// [KnfOpt] func_tre: gen_arr.45 false
// [KnfOpt] func_tre: init_arr.49 true
// [KnfOpt] freq: {matmul.1: Once, loop1.8: Once, loop1.200: Many(2), loop2.203: Once, loop2.205: Many(2), loop3.208: Once, loop3.210: Many(2), main.41: Once, gen_arr.45: Many(3), init_arr.49: Once, init_arr.235: Many(2)}
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision loop3.208 rejected
// [KnfOpt] Inline threshold 49
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision loop2.203 rejected
// [KnfOpt] Inline threshold 67
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision loop1.8 rejected
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision init_arr.49 accepted
// [KnfOpt] Knf inline Some(init_arr) let _59: Unit = Unit
// [KnfOpt] Var(mat.48)
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 27
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 73
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision matmul.1 rejected
// [KnfOpt] freq: {matmul.1: Once, loop1.8: Once, loop1.200: Many(2), loop2.203: Once, loop2.205: Many(2), loop3.208: Once, loop3.210: Many(2), main.41: Once, gen_arr.45: Many(3), init_arr.243: Many(2)}
// [KnfOpt] Inline threshold 31
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision loop3.208 rejected
// [KnfOpt] Inline threshold 49
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision loop2.203 rejected
// [KnfOpt] Inline threshold 67
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision loop1.8 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision gen_arr.45 rejected
// [KnfOpt] Inline threshold 73
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision matmul.1 rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Multiple, f1: Once, f5: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] loop2.253 is inlining Call(ty=Unit, f=f0, args=[Insn(iref=%1), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), BlockParam(bref=b2, bpref=$b.0)])
// [CoreOpt] shifted callee .fn loop3.254 #f0 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     jump b8($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b8 pre #Some(b7) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (int32) {
// [CoreOpt]     let %4: bool = le(0, $b9.0)
// [CoreOpt]     br %4 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %5: array[double] = load array[double] offset($f3, $f4 * @ptr)
// [CoreOpt]     let %6: array[double] = load array[double] offset($f3, $f4 * @ptr)
// [CoreOpt]     let %7: double = load double offset(%6, $f5 * @64)
// [CoreOpt]     let %8: array[double] = load array[double] offset($f1, $f4 * @ptr)
// [CoreOpt]     let %9: double = load double offset(%8, $b9.0 * @64)
// [CoreOpt]     let %10: array[double] = load array[double] offset($f2, $b9.0 * @ptr)
// [CoreOpt]     let %11: double = load double offset(%10, $f5 * @64)
// [CoreOpt]     let %12: double = mul(%9, %11)
// [CoreOpt]     let %13: double = add(%7, %12)
// [CoreOpt]     let _ = store double offset(%5, $f5 * @64) <- %13
// [CoreOpt]     let %15: int32 = sub($b9.0, 1)
// [CoreOpt]     jump b9(%15)
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (any) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] loop1.252 is inlining Call(ty=Unit, f=f1, args=[Insn(iref=%1), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f2, fpref=$f.4)])
// [CoreOpt] shifted callee .fn loop2.253 #f1 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     jump b8($f0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b8 pre #Some(b7) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (int32) {
// [CoreOpt]     let %4: bool = le(0, $b9.0)
// [CoreOpt]     br %4 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %5: int32 = sub($f5, 1)
// [CoreOpt]     jump b14()
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (any) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %7: int32 = sub($b9.0, 1)
// [CoreOpt]     jump b9(%7)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b15(%5)
// [CoreOpt]   }
// [CoreOpt]   .loop #b15 pre #Some(b14) header #b16 {
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b19
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (int32) {
// [CoreOpt]     let %8: bool = le(0, $b16.0)
// [CoreOpt]     br %8 b17() b18()
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %9: array[double] = load array[double] offset($f3, $f4 * @ptr)
// [CoreOpt]     let %10: array[double] = load array[double] offset($f3, $f4 * @ptr)
// [CoreOpt]     let %11: double = load double offset(%10, $b9.0 * @64)
// [CoreOpt]     let %12: array[double] = load array[double] offset($f1, $f4 * @ptr)
// [CoreOpt]     let %13: double = load double offset(%12, $b16.0 * @64)
// [CoreOpt]     let %14: array[double] = load array[double] offset($f2, $b16.0 * @ptr)
// [CoreOpt]     let %15: double = load double offset(%14, $b9.0 * @64)
// [CoreOpt]     let %16: double = mul(%13, %15)
// [CoreOpt]     let %17: double = add(%11, %16)
// [CoreOpt]     let _ = store double offset(%9, $b9.0 * @64) <- %17
// [CoreOpt]     let %19: int32 = sub($b16.0, 1)
// [CoreOpt]     jump b16(%19)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     jump b19(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (any) {
// [CoreOpt]     jump b13($b19.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
// [CoreOpt] LVN subst Insn(iref=%10) with Insn(iref=%9)
