// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [5, 0, 2, 3, 1, 12, 7, 9, 10, 6, 8, 19, 14, 16, 17, 13, 15]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [12], [11], [8, 9], [10], [6], [0], [19], [18], [15, 16], [17], [13], [7], [14]]
// [Asm] LoweringOrder: HashMap::of([(b8, 0), (b9, 3), (b16, 1), (b19, 0), (b13, 1), (b15, 0), (b1, 0), (b2, 5), (b6, 3), (b12, 0), (b17, 1), (b0, 0), (b10, 3), (b5, 0), (b14, 0), (b3, 5), (b7, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b12, b7, b8, b19, b14, b15, b16, b17, b13, b9, b10, b6, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b8, 5), (b9, 0), (b16, 0), (b19, 6), (b13, 2), (b15, 8), (b1, 2), (b2, 0), (b6, 2), (b12, 3), (b17, 1), (b0, 1), (b10, 1), (b5, 0), (b14, 7), (b3, 1), (b7, 4)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv47, BlockParam(bref=b7, bpref=$b.1) -> v16, BlockParam(bref=b7, bpref=$b.0) -> v15, BlockParam(bref=b14, bpref=$b.8) -> v35, BlockParam(bref=b10, bpref=$b.0) -> v24, Insn(iref=%8) -> v39, Insn(iref=%10) -> fv41, BlockParam(bref=b0, bpref=$b.3) -> v9, Insn(iref=%14) -> fv46, BlockParam(bref=b14, bpref=$b.0) -> v27, Insn(iref=%32) -> v40, BlockParam(bref=b7, bpref=$b.6) -> v21, BlockParam(bref=b14, bpref=$b.7) -> v34, BlockParam(bref=b14, bpref=$b.3) -> v30, BlockParam(bref=b7, bpref=$b.3) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v25, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%1) -> v13, Insn(iref=%11) -> fv43, Insn(iref=%6) -> v23, Insn(iref=%35) -> v12, BlockParam(bref=b14, bpref=$b.1) -> v28, Insn(iref=%31) -> v42, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b7, bpref=$b.2) -> v17, BlockParam(bref=b17, bpref=$b.0) -> v37, BlockParam(bref=b3, bpref=$b.0) -> v11, FnParam(fref=f4, fpref=$f.3) -> v5, BlockParam(bref=b14, bpref=$b.6) -> v33, Insn(iref=%9) -> v36, Insn(iref=%16) -> v48, BlockParam(bref=b7, bpref=$b.5) -> v20, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b14, bpref=$b.4) -> v31, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, BlockParam(bref=b14, bpref=$b.2) -> v29, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v26, Insn(iref=%0) -> v10, BlockParam(bref=b13, bpref=$b.0) -> v38, Insn(iref=%3) -> v14, Insn(iref=%13) -> fv45, Insn(iref=%17) -> v49, BlockParam(bref=b7, bpref=$b.7) -> v22, BlockParam(bref=b14, bpref=$b.5) -> v32, BlockParam(bref=b7, bpref=$b.4) -> v19, Self(fref=f4) -> v0, Insn(iref=%12) -> v44
// [Asm] succs: [14]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%11), Insn(iref=%13)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b14, bpref=$b.0), width=@64))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b14, bpref=$b.5), width=@64))
// [Asm] succs: [7]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] succs: [13]
// [Asm] critical edges for b17: []
// [Asm] critical color seq for b17: []
// [Asm] succs: [17]
// [Asm] critical edges for b16: []
// [Asm] critical color seq for b16: []
// [Asm] succs: [15, 16]
// [Asm] critical edges for b14: []
// [Asm] critical color seq for b14: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b14, bpref=$b.0)])
// [Asm] succs: [18]
// [Asm] critical edges for b19: []
// [Asm] critical color seq for b19: []
// [Asm] succs: [19]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [0]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] succs: [10]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [8, 9]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b7, bpref=$b.0)])
// [Asm] succs: [11]
// [Asm] critical edges for b12: []
// [Asm] critical color seq for b12: []
// [Asm] succs: [12]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@64))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move: v6 <- v2
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move: v7 <- v3
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move: v8 <- v4
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move: v9 <- v5
// [Asm] defined: v9 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v14, zero, v13, v7, v8, v59, v6, v9]
// [Asm] defined: v59 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v14, zero, v13, v7, v8, v6, v15, v9]
// [Asm] move: v15 <- v59
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v14, zero, v13, v7, v8, v6, v15, v9]
// [Asm] move: v16 <- v7
// [Asm] defined: v16 is X
// [Asm] skip edge 18 -> 11
// [Asm] defs: [v17]
// [Asm] live_set: [v16, v14, zero, v13, v7, v8, v17, v6, v15, v9]
// [Asm] move: v17 <- v8
// [Asm] defined: v17 is X
// [Asm] skip edge 19 -> 12
// [Asm] defs: [v18]
// [Asm] live_set: [v16, v14, v18, zero, v13, v7, v8, v17, v6, v15, v9]
// [Asm] move: v18 <- v9
// [Asm] defined: v18 is X
// [Asm] skip edge 20 -> 13
// [Asm] defs: [v19]
// [Asm] live_set: [v16, v14, v18, zero, v13, v7, v8, v19, v17, v6, v15, v9]
// [Asm] move: v19 <- v6
// [Asm] defined: v19 is X
// [Asm] skip edge 21 -> 10
// [Asm] defs: [v20]
// [Asm] live_set: [v16, v14, v18, zero, v13, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] move: v20 <- v13
// [Asm] defined: v20 is X
// [Asm] skip edge 22 -> 16
// [Asm] defs: [v21]
// [Asm] live_set: [v16, v14, v18, v21, zero, v20, v8, v7, v19, v6, v17, v15, v9]
// [Asm] move: v21 <- v13
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] move: v22 <- v14
// [Asm] defined: v22 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero, v7, v8, v6, v9]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v13, zero, v7, v8, v6, v9]
// [Asm] defined: v14 is X
// [Asm] defs: [fv41]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v9, v33, v18, v29, zero, v20, v27, fv41, v8, v35, v19, v6, v15, v34]
// [Asm] defined: fv41 is F
// [Asm] defs: [fv43]
// [Asm] live_set: [v34, v16, v21, v30, v22, v7, v32, v17, v28, v31, v9, v33, v18, v29, zero, v20, v27, fv43, fv41, v8, v35, v19, v6, v15]
// [Asm] defined: fv43 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v34, v16, v21, v30, v22, v7, v32, v17, v28, v31, v44, v9, v33, v18, v29, zero, v20, v27, fv43, fv41, v8, v35, v19, v6, v15]
// [Asm] defined: v44 is X
// [Asm] defs: [fv45]
// [Asm] live_set: [v34, v16, fv45, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v20, v27, fv43, fv41, v8, v35, v19, v6, v15]
// [Asm] defined: fv45 is F
// [Asm] defs: [fv47]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, fv47, v28, v31, v33, v9, v18, v29, zero, v20, v27, v8, v35, v19, v6, v15, v34]
// [Asm] defined: fv47 is F
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v20, v27, v8, v35, v19, v6, v15, v34]
// [Asm] defs: [v49]
// [Asm] live_set: [v16, v21, v49, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v20, v35, v8, v19, v6, v15, v34]
// [Asm] defined: v49 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v27 <- v49
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v28 <- v28
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v29 <- v29
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v30 <- v30
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v31 <- v31
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v32 <- v32
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v33 <- v33
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v34 <- v34
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v35 <- v35
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v11
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v38]
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v38, v6, v15]
// [Asm] move: v38 <- v37
// [Asm] defined: v38 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v16, v21, v22, v7, v37, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v37 <- zero
// [Asm] defined: v37 is X
// [Asm] skip edge 36 -> 1
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] defs: [v24]
// [Asm] live_set: [v7, v6, v24, zero, v9, v8]
// [Asm] move: v24 <- zero
// [Asm] defined: v24 is X
// [Asm] skip edge 38 -> 1
// [Asm] defs: [v57]
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15, v57]
// [Asm] defined: v57 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v27 <- v57
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v16, v21, v22, v7, v17, v28, v9, v18, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v28 <- v16
// [Asm] defined: v28 is X
// [Asm] skip edge 28 -> 18
// [Asm] defs: [v29]
// [Asm] live_set: [v16, v21, v22, v7, v17, v28, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v29 <- v17
// [Asm] defined: v29 is X
// [Asm] skip edge 31 -> 19
// [Asm] defs: [v30]
// [Asm] live_set: [v16, v21, v30, v22, v7, v17, v28, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v30 <- v18
// [Asm] defined: v30 is X
// [Asm] skip edge 27 -> 20
// [Asm] defs: [v31]
// [Asm] live_set: [v16, v21, v30, v22, v7, v17, v28, v31, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v31 <- v19
// [Asm] defined: v31 is X
// [Asm] skip edge 29 -> 21
// [Asm] defs: [v32]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v32 <- v15
// [Asm] defined: v32 is X
// [Asm] skip edge 26 -> 17
// [Asm] defs: [v33]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm] move: v33 <- v20
// [Asm] defined: v33 is X
// [Asm] skip edge 30 -> 22
// [Asm] defs: [v34]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15, v34]
// [Asm] move: v34 <- v21
// [Asm] defined: v34 is X
// [Asm] skip edge 25 -> 23
// [Asm] defs: [v35]
// [Asm] live_set: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] move: v35 <- v22
// [Asm] defined: v35 is X
// [Asm] skip edge 32 -> 24
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] defs: [v25]
// [Asm] live_set: [v7, v25, v6, zero, v9, v8]
// [Asm] move: v25 <- v24
// [Asm] defined: v25 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v39, v18, zero, v20, v8, v19, v6]
// [Asm] defined: v39 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v15 <- v39
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v16 <- v16
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v17 <- v17
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v18 <- v18
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v19 <- v19
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v20 <- v20
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] move: v21 <- v21
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] move: v22 <- v22
// [Asm] defs: []
// [Asm] live_set: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] defs: [v26]
// [Asm] live_set: [v8, v7, v9, zero, v26]
// [Asm] defined: v26 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v6 <- v26
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v7 <- v7
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v8 <- v8
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move: v11 <- zero
// [Asm] defined: v11 is X
// [Asm] Label("loop1.233") clobbered_x: @hashset.of([t1, a5, a0, a2, a1, a3, t3, a7, t0, a4, a6, t4, s0, t2])
// [Asm] Label("loop1.233") clobbered_f: @hashset.of([fa2, fa1, fa0])
// [Asm] subst   blt v27, zero, .loop1.233_16 ->   blt a0, zero, .loop1.233_16
// [Asm] subst   mv v2, a0 ->   mv a6, a0
// [Asm] subst   mv v3, a1 ->   mv a5, a1
// [Asm] subst   mv v4, a2 ->   mv a4, a2
// [Asm] subst   mv v5, a3 ->   mv a0, a3
// [Asm] subst   mv v6, v2 ->   mv a1, a6
// [Asm] subst   mv v7, v3 ->   mv a2, a5
// [Asm] subst   mv v8, v4 ->   mv a3, a4
// [Asm] subst   mv v9, v5 ->   mv a4, a0
// [Asm] subst   li v59, 1 ->   li a5, 1
// [Asm] subst   mv v21, v13 ->   mv a7, a6
// [Asm] subst   mv v22, v14 ->   mv t0, a0
// [Asm] subst   th.lurd v13, v9, v6, 3 ->   th.lurd a6, a4, a1, 3
// [Asm] subst   th.lurd v14, v7, v6, 3 ->   th.lurd a0, a2, a1, 3
// [Asm] subst   th.flurd fv41, v34, v32, 3 ->   th.flurd fa0, a7, a5, 3
// [Asm] subst   th.flurd fv43, v35, v27, 3 ->   th.flurd fa1, t0, a0, 3
// [Asm] subst   th.lurd v44, v29, v27, 3 ->   th.lurd s0, t4, a0, 3
// [Asm] subst   th.flurd fv45, v44, v32, 3 ->   th.flurd fa2, s0, a5, 3
// [Asm] subst   fmadd.d fv47, fv43, fv45, fv41 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   th.fsurd fv47, v33, v32, 3 ->   th.fsurd fa0, a6, a5, 3
// [Asm] subst   addi v49, v27, -1 ->   addi a0, a0, -1
// [Asm] subst   j .loop1.233_14 ->   j .loop1.233_14
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v37, zero ->   mv a0, zero
// [Asm] subst   blt v6, zero, .loop1.233_2 ->   blt a1, zero, .loop1.233_2
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   li v57, 2 ->   li a0, 2
// [Asm] subst   mv v28, v16 ->   mv t2, a2
// [Asm] subst   mv v29, v17 ->   mv t4, a3
// [Asm] subst   mv v30, v18 ->   mv t1, a4
// [Asm] subst   mv v31, v19 ->   mv t3, a1
// [Asm] subst   blt v15, zero, .loop1.233_9 ->   blt a5, zero, .loop1.233_9
// [Asm] subst   addi v39, v15, -1 ->   addi a0, a5, -1
// [Asm] subst   mv v15, v39 ->   mv a5, a0
// [Asm] subst   j .loop1.233_7 ->   j .loop1.233_7
// [Asm] subst   addi v26, v6, -1 ->   addi a0, a1, -1
// [Asm] subst   mv v6, v26 ->   mv a1, a0
// [Asm] subst   j .loop1.233_0 ->   j .loop1.233_0
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] LoweringOrder: [0, 8, 3, 5, 6, 1, 4]
// [Asm] LoweringOrder: [[8], [7], [4, 5], [6], [1], [], [3]]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 0), (b1, 1), (b8, 0), (b5, 1), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b8, b3, b4, b5, b6, b1]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 3), (b1, 2), (b8, 1), (b5, 0), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: BlockParam(bref=b1, bpref=$b.0) -> v14, FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v9, BlockParam(bref=b3, bpref=$b.1) -> v10, Mem(fref=f1, mref=m0) -> v5, Insn(iref=%5) -> v17, Insn(iref=%0) -> v7, Insn(iref=%4) -> v15, Insn(iref=%3) -> v12, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> v16, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b6, bpref=$b.0) -> v13, Insn(iref=%1) -> v8, BlockParam(bref=b3, bpref=$b.2) -> v11, Self(fref=f1) -> v0, Insn(iref=%6) -> v18, Mem(fref=f1, mref=m3) -> v6
// [Asm] succs: [3]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b3, bpref=$b.0), width=@64))
// [Asm] succs: []
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [1]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [4, 5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b3, bpref=$b.0)])
// [Asm] succs: [7]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [8]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, zero, v23, v4, s11, v2]
// [Asm] defined: v23 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v4, s11, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, zero, v4, a1, s11, v2]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] skip edge 6 -> 4
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm] move: a2 <- v4
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, s11, zero, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, s11, zero, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5]
// [Asm] move: v14 <- v13
// [Asm] defined: v14 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v13]
// [Asm] move: v13 <- zero
// [Asm] defined: v13 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v10, zero, v20, s11, v9]
// [Asm] defined: v20 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v5, v10, zero, v6, v9]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, zero, v6, s11, v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v10, v18, zero, s11]
// [Asm] defined: v18 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move: v9 <- v18
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, zero, v9, v3]
// [Asm] move: v9 <- v8
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, s11, zero, v9]
// [Asm] move: v10 <- v3
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move: v11 <- v5
// [Asm] defined: v11 is X
// [Asm] skip edge 26 -> 0
// [Asm] Label("gen_arr.231") clobbered_x: @hashset.of([a0, s1, s2, a2, s0, a1, a3])
// [Asm] Label("gen_arr.231") clobbered_f: @hashset.of([])
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] subst   blt v9, zero, .gen_arr.231_5 ->   blt a0, zero, .gen_arr.231_5
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   mv v3, a1 ->   mv s2, a1
// [Asm] subst   slliw v23, v2, 3 ->   slliw a0, s1, 3
// [Asm] subst   sub v5, s11, v23 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s1
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v8, v2, -1 ->   addi a0, s1, -1
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   slliw v20, v10, 3 ->   slliw a2, a1, 3
// [Asm] subst   sub v6, s11, v20 ->   sub a2, s11, a2
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a2, -8
// [Asm] subst   th.surd v6, v11, v9, 3 ->   th.surd a2, a3, a0, 3
// [Asm] subst   addi v18, v9, -1 ->   addi a0, a0, -1
// [Asm] subst   j .gen_arr.231_3 ->   j .gen_arr.231_3
// [Asm] subst   mv v10, v3 ->   mv a1, s2
// [Asm] subst   mv v11, v5 ->   mv a3, s0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%41) -> v44, Insn(iref=%33) -> v36, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%39) -> v42, Insn(iref=%4) -> v7, Insn(iref=%42) -> v45, Self(fref=f5) -> v0, Insn(iref=%44) -> v47, Insn(iref=%32) -> v35, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%31) -> v34, Insn(iref=%35) -> fv38, Insn(iref=%28) -> v31, Insn(iref=%38) -> v41, Insn(iref=%46) -> v49, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%37) -> v40, Insn(iref=%45) -> fv48, Insn(iref=%29) -> v32, Insn(iref=%5) -> v8, Insn(iref=%47) -> v50, Insn(iref=%19) -> v22, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Mem(fref=f5, mref=m0) -> v2, Insn(iref=%7) -> v10, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%2) -> v5, Insn(iref=%20) -> v23, Insn(iref=%43) -> v46, Insn(iref=%30) -> fv33, Insn(iref=%21) -> v24, Insn(iref=%34) -> v37, Insn(iref=%36) -> v39, Insn(iref=%40) -> fv43, Insn(iref=%12) -> v15
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [v113]
// [Asm] live_set: [zero, v113, v2]
// [Asm] defined: v113 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v113
// [Asm] defined: a0 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v114, zero, a0, v2]
// [Asm] defined: v114 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move: a1 <- v114
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v2]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] defs: [v110]
// [Asm] live_set: [v4, zero, v110, v2]
// [Asm] defined: v110 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] move: a0 <- v110
// [Asm] defined: a0 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v4, v111, zero, a0, v2]
// [Asm] defined: v111 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, zero, a0, v2]
// [Asm] move: a1 <- v111
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, zero, a0, v2]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] defs: [v108]
// [Asm] live_set: [v4, v5, v108, zero, v2]
// [Asm] defined: v108 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, v108, zero, a0, v2]
// [Asm] move: a0 <- v108
// [Asm] defined: a0 is X
// [Asm] skip edge 4 -> 22
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v5, zero, a0, v2]
// [Asm] move: a1 <- v108
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, v5, zero, a0]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v105, v4, v6, v5, zero, v7]
// [Asm] defined: v105 is X
// [Asm] defs: [fv106]
// [Asm] live_set: [v4, v6, v5, fv106, zero, v7]
// [Asm] defined: fv106 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v6, v5, zero, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v4, v6, v5, v102, zero, v9]
// [Asm] defined: v102 is X
// [Asm] defs: [fv103]
// [Asm] live_set: [v4, v6, v5, fv103, zero, v9]
// [Asm] defined: fv103 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v6, v5, zero]
// [Asm] defined: v11 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v11, v4, v6, v5, v99, zero]
// [Asm] defined: v99 is X
// [Asm] defs: [fv100]
// [Asm] live_set: [fv100, v11, v4, v6, v5, zero]
// [Asm] defined: fv100 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v5, v6, zero, v13]
// [Asm] defined: v13 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v4, v5, v6, v96, zero, v13]
// [Asm] defined: v96 is X
// [Asm] defs: [fv97]
// [Asm] live_set: [v4, v5, v6, fv97, zero, v13]
// [Asm] defined: fv97 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v6, v15, zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v4, v5, v6, v15, zero, v93]
// [Asm] defined: v93 is X
// [Asm] defs: [fv94]
// [Asm] live_set: [v4, v5, v6, v15, fv94, zero]
// [Asm] defined: fv94 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v5, v17, v6, zero]
// [Asm] defined: v17 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v4, v90, v5, v17, v6, zero]
// [Asm] defined: v90 is X
// [Asm] defs: [fv91]
// [Asm] live_set: [v4, fv91, v6, v5, v17, zero]
// [Asm] defined: fv91 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v4, v5, v6, zero]
// [Asm] defined: v19 is X
// [Asm] defs: [v87]
// [Asm] live_set: [v19, v4, v5, v6, v87, zero]
// [Asm] defined: v87 is X
// [Asm] defs: [fv88]
// [Asm] live_set: [v19, v4, v5, v6, zero, fv88]
// [Asm] defined: fv88 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v21]
// [Asm] live_set: [v4, v5, v6, v21, zero]
// [Asm] defined: v21 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v84, v4, v5, v6, v21, zero]
// [Asm] defined: v84 is X
// [Asm] defs: [fv85]
// [Asm] live_set: [fv85, v4, v5, v6, v21, zero]
// [Asm] defined: fv85 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v23]
// [Asm] live_set: [v4, v5, v6, zero, v23]
// [Asm] defined: v23 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v4, v81, v5, v6, zero, v23]
// [Asm] defined: v81 is X
// [Asm] defs: [fv82]
// [Asm] live_set: [v4, v6, v5, fv82, zero, v23]
// [Asm] defined: fv82 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v4, v6, v5, zero]
// [Asm] defined: v25 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v25, v4, v6, v5, zero, v78]
// [Asm] defined: v78 is X
// [Asm] defs: [fv79]
// [Asm] live_set: [v25, v4, fv79, v6, v5, zero]
// [Asm] defined: fv79 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v27]
// [Asm] live_set: [v4, v5, v6, zero, v27]
// [Asm] defined: v27 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v4, v5, v6, v75, zero, v27]
// [Asm] defined: v75 is X
// [Asm] defs: [fv76]
// [Asm] live_set: [v4, v5, v6, fv76, zero, v27]
// [Asm] defined: fv76 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] defs: [v29]
// [Asm] live_set: [v4, v5, v6, zero, v29]
// [Asm] defined: v29 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v4, v72, v5, v6, zero, v29]
// [Asm] defined: v72 is X
// [Asm] defs: [fv73]
// [Asm] live_set: [v4, v6, v5, zero, v29, fv73]
// [Asm] defined: fv73 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] defs: [v70]
// [Asm] live_set: [v4, v6, v5, v70, zero]
// [Asm] defined: v70 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v6, v5, zero, a0]
// [Asm] move: a0 <- v70
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v6, a1, v5, zero, a0]
// [Asm] move: a1 <- v4
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v6, a1, zero, a0]
// [Asm] move: a2 <- v5
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, v6, a1, a3, zero, a0]
// [Asm] move: a3 <- v6
// [Asm] defined: a3 is X
// [Asm] skip edge 13 -> 23
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v6, zero]
// [Asm] move: v31 <- a0
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v6, zero]
// [Asm] defined: v32 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [v6, zero, fv33]
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v6, zero, v34]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move: a0 <- v34
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v6, zero]
// [Asm] move: v35 <- a0
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v6, zero]
// [Asm] move: v36 <- a0
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v6, zero]
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [v6, zero, fv38]
// [Asm] defined: fv38 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v6, zero, v39]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v39]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move: a0 <- v39
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v6, zero]
// [Asm] move: v40 <- a0
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v6, zero]
// [Asm] move: v41 <- a0
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero, v42]
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v6, zero, fv43]
// [Asm] defined: fv43 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v6, v44, zero]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v44, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move: a0 <- v44
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v6, zero]
// [Asm] move: v45 <- a0
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, zero]
// [Asm] move: v46 <- a0
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v47]
// [Asm] live_set: [v47, zero]
// [Asm] defined: v47 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [fv48, zero]
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v49, zero]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v49, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v49
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [zero]
// [Asm] move: v50 <- a0
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.230") clobbered_x: @hashset.of([s2, s0, a1, a0, s1])
// [Asm] Label("main.230") clobbered_f: @hashset.of([fa0])
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v113, 2 ->   li a0, 2
// [Asm] subst   li v114, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.231 ->   call gen_arr.231
// [Asm] subst   mv v4, a0 ->   mv s1, a0
// [Asm] subst   li v110, 3 ->   li a0, 3
// [Asm] subst   li v111, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.231 ->   call gen_arr.231
// [Asm] subst   mv v5, a0 ->   mv s2, a0
// [Asm] subst   li v108, 2 ->   li a0, 2
// [Asm] subst   mv a1, v108 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call gen_arr.231 ->   call gen_arr.231
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v105, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv106, v105 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv106, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v102, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv103, v102 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv103, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v99, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv100, v99 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv100, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v96, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv97, v96 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv97, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v93, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv94, v93 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv94, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v90, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv91, v90 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv91, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v87, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv88, v87 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv88, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v84, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv85, v84 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv85, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v81, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv82, v81 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv82, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v78, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv79, v78 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv79, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v75, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv76, v75 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv76, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v72, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv73, v72 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv73, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v70, 1 ->   li a0, 1
// [Asm] subst   mv a1, v4 ->   mv a1, s1
// [Asm] subst   mv a2, v5 ->   mv a2, s2
// [Asm] subst   mv a3, v6 ->   mv a3, s0
// [Asm] subst   call loop1.233 ->   call loop1.233
// [Asm] subst   ld v32, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv33, 0(v32) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v34, fv33, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v37, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv38, 8(v37) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v39, fv38, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v42, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv43, 0(v42) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v44, fv43, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v47, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv48, 8(v47) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v49, fv48, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.230  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] loop1.233:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .loop1.233_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, zero], upward_exposed: [v6, zero], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .loop1.233_0:
// [Asm] # control
// [Asm]   blt v6, zero, .loop1.233_2  # live: [v8, v6, v9, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v13], uses: [v6, v9, v7], upward_exposed: [v6, v9, v7], params_defs: []
// [Asm] # live_in: [v8, v6, v9, zero, v7], live_out: [v14, v13, zero, v8, v7, v6, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.233_1:
// [Asm]   th.lurd v13, v9, v6, 3  # live: [v13, zero, v7, v8, v6, v9]
// [Asm]   th.lurd v14, v7, v6, 3  # live: [v14, v13, zero, v7, v8, v6, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v16, v18, v21, v20, v22, v19, v59, v17, v15], uses: [v14, v13, v8, v7, v59, v6, v9], upward_exposed: [v8, v6, v14, v9, v13, v7], params_defs: []
// [Asm] # live_in: [v14, v13, zero, v7, v8, v6, v9], live_out: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] # block parameters: []
// [Asm] .loop1.233_12:
// [Asm] # control
// [Asm]   li v59, 1  # live: [v14, zero, v13, v7, v8, v59, v6, v9]
// [Asm]   mv v15, v59  # live: [v14, zero, v13, v7, v8, v6, v15, v9]
// [Asm]   mv v16, v7  # live: [v16, v14, zero, v13, v7, v8, v6, v15, v9]
// [Asm]   mv v17, v8  # live: [v16, v14, zero, v13, v7, v8, v17, v6, v15, v9]
// [Asm]   mv v18, v9  # live: [v16, v14, v18, zero, v13, v7, v8, v17, v6, v15, v9]
// [Asm]   mv v19, v6  # live: [v16, v14, v18, zero, v13, v7, v8, v19, v17, v6, v15, v9]
// [Asm]   mv v20, v13  # live: [v16, v14, v18, zero, v13, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm]   mv v21, v13  # live: [v16, v14, v18, v21, zero, v20, v8, v7, v19, v6, v17, v15, v9]
// [Asm]   mv v22, v14  # live: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v15, zero], upward_exposed: [v15, zero], params_defs: [v16, v18, v21, v20, v22, v19, v17, v15]
// [Asm] # live_in: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15], live_out: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] # block parameters: [v15, v16, v17, v18, v19, v20, v21, v22]
// [Asm] .loop1.233_7:
// [Asm] # control
// [Asm]   blt v15, zero, .loop1.233_9  # live: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15], live_out: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] # block parameters: []
// [Asm] .loop1.233_8:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v29, v27, v30, v35, v32, v57, v28, v31, v33, v34], uses: [v16, v18, v21, v20, v22, v19, v17, v57, v15], upward_exposed: [v16, v18, v21, v20, v22, v19, v17, v15], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15], live_out: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] # block parameters: []
// [Asm] .loop1.233_19:
// [Asm] # control
// [Asm]   li v57, 2  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15, v57]
// [Asm]   mv v27, v57  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v28, v16  # live: [v16, v21, v22, v7, v17, v28, v9, v18, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v29, v17  # live: [v16, v21, v22, v7, v17, v28, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v30, v18  # live: [v16, v21, v30, v22, v7, v17, v28, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v31, v19  # live: [v16, v21, v30, v22, v7, v17, v28, v31, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v32, v15  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v33, v20  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15]
// [Asm]   mv v34, v21  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v8, v19, v6, v15, v34]
// [Asm]   mv v35, v22  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v27], upward_exposed: [zero, v27], params_defs: [v29, v27, v30, v35, v32, v28, v31, v33, v34]
// [Asm] # live_in: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34], live_out: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] # block parameters: [v27, v28, v29, v30, v31, v32, v33, v34, v35]
// [Asm] .loop1.233_14:
// [Asm] # control
// [Asm]   blt v27, zero, .loop1.233_16  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] 
// [Asm] # block info: defs: [fv45, v49, fv41, fv43, v27, fv47, v44], uses: [fv45, v49, v30, v32, fv47, v44, v28, v31, v33, v29, v27, fv43, fv41, v35, v34], upward_exposed: [v29, v27, v30, v35, v32, v28, v31, v33, v34], params_defs: []
// [Asm] # live_in: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34], live_out: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] # block parameters: []
// [Asm] .loop1.233_15:
// [Asm]   th.flurd fv41, v34, v32, 3  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v9, v33, v18, v29, zero, v20, v27, fv41, v8, v35, v19, v6, v15, v34]
// [Asm]   th.flurd fv43, v35, v27, 3  # live: [v34, v16, v21, v30, v22, v7, v32, v17, v28, v31, v9, v33, v18, v29, zero, v20, v27, fv43, fv41, v8, v35, v19, v6, v15]
// [Asm]   th.lurd v44, v29, v27, 3  # live: [v34, v16, v21, v30, v22, v7, v32, v17, v28, v31, v44, v9, v33, v18, v29, zero, v20, v27, fv43, fv41, v8, v35, v19, v6, v15]
// [Asm]   th.flurd fv45, v44, v32, 3  # live: [v34, v16, fv45, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v20, v27, fv43, fv41, v8, v35, v19, v6, v15]
// [Asm]   fmadd.d fv47, fv43, fv45, fv41  # live: [v16, v21, v30, v22, v7, v32, v17, fv47, v28, v31, v33, v9, v18, v29, zero, v20, v27, v8, v35, v19, v6, v15, v34]
// [Asm]   th.fsurd fv47, v33, v32, 3  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v20, v27, v8, v35, v19, v6, v15, v34]
// [Asm]   addi v49, v27, -1  # live: [v16, v21, v49, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v20, v35, v8, v19, v6, v15, v34]
// [Asm] # control
// [Asm]   mv v27, v49  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v28, v28  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v29, v29  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v30, v30  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v31, v31  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v32, v32  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v33, v33  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v34, v34  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   mv v35, v35  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm]   j .loop1.233_14  # live: [v16, v21, v30, v22, v7, v32, v17, v28, v31, v33, v9, v18, v29, zero, v27, v20, v35, v8, v19, v6, v15, v34]
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15], live_out: [v16, v21, v22, v7, v37, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] # block parameters: []
// [Asm] .loop1.233_16:
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v16, v21, v22, v7, v37, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [v37], upward_exposed: [v37], params_defs: [v37]
// [Asm] # live_in: [v16, v21, v22, v7, v37, v17, v9, v18, zero, v20, v8, v19, v6, v15], live_out: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v38, v6, v15]
// [Asm] # block parameters: [v37]
// [Asm] .loop1.233_17:
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v38, v6, v15]
// [Asm] 
// [Asm] # block info: defs: [v15, v39], uses: [v16, v18, v21, v20, v22, v19, v17, v15, v39], upward_exposed: [v16, v18, v21, v20, v22, v19, v17, v15], params_defs: [v38]
// [Asm] # live_in: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v38, v6, v15], live_out: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm] # block parameters: [v38]
// [Asm] .loop1.233_13:
// [Asm]   addi v39, v15, -1  # live: [v16, v21, v22, v7, v17, v9, v39, v18, zero, v20, v8, v19, v6]
// [Asm] # control
// [Asm]   mv v15, v39  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v16, v16  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v17, v17  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v18, v18  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v19, v19  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v20, v20  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v21, v21  # live: [v16, v21, v22, v7, v17, v9, v18, zero, v20, v8, v19, v6, v15]
// [Asm]   mv v22, v22  # live: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm]   j .loop1.233_7  # live: [v16, v21, v18, zero, v22, v20, v7, v8, v19, v17, v6, v15, v9]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v7, v6, zero, v9, v8], live_out: [zero, v8, v7, v6, v24, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.233_9:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v7, v6, v24, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [zero, v7, v8, v6, v24, v9], live_out: [v25, zero, v8, v7, v6, v9]
// [Asm] # block parameters: [v24]
// [Asm] .loop1.233_10:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v7, v25, v6, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v6, v26], uses: [v8, v6, v26, v9, v7], upward_exposed: [v8, v6, v9, v7], params_defs: [v25]
// [Asm] # live_in: [v25, zero, v7, v8, v6, v9], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: [v25]
// [Asm] .loop1.233_6:
// [Asm]   addi v26, v6, -1  # live: [v8, v7, v9, zero, v26]
// [Asm] # control
// [Asm]   mv v6, v26  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v7, v7  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v8, v8  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v9, v9  # live: [v8, v6, v9, zero, v7]
// [Asm]   j .loop1.233_0  # live: [v8, v6, v9, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .loop1.233_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .loop1.233_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] gen_arr.231:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2, v3], uses: [v5, a0, v23, a2, v4, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v3, v5, s11, zero, v8]
// [Asm] # block parameters: []
// [Asm] .gen_arr.231_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, v2]
// [Asm]   slliw v23, v2, 3  # live: [v3, zero, v23, v4, s11, v2]
// [Asm]   sub v5, s11, v23  # live: [v3, v5, zero, v4, v2]
// [Asm]   andi s11, v5, -8  # live: [v3, v5, zero, v4, s11, v2]
// [Asm]   mv a1, v2  # live: [v3, v5, zero, v4, a1, s11, v2]
// [Asm]   mv a0, v5  # live: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, v4  # live: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti64  # live: [v2, v5, s11, zero, v3]
// [Asm]   addi v8, v2, -1  # live: [v8, v5, s11, zero, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v11, v10, v9], uses: [v3, v5, v8], upward_exposed: [v3, v5, v8], params_defs: []
// [Asm] # live_in: [v8, v5, s11, zero, v3], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: []
// [Asm] .gen_arr.231_8:
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v5, s11, zero, v9, v3]
// [Asm]   mv v10, v3  # live: [v5, v10, s11, zero, v9]
// [Asm]   mv v11, v5  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [v11, v10, v9]
// [Asm] # live_in: [v11, v5, v10, zero, s11, v9], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: [v9, v10, v11]
// [Asm] .gen_arr.231_3:
// [Asm] # control
// [Asm]   blt v9, zero, .gen_arr.231_5  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v6, s11, v18, v9, v20], uses: [v11, v10, v18, v20, v6, s11, v9], upward_exposed: [v11, v10, s11, v9], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, s11, v9], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: []
// [Asm] .gen_arr.231_4:
// [Asm]   slliw v20, v10, 3  # live: [v11, v5, v10, zero, v20, s11, v9]
// [Asm]   sub v6, s11, v20  # live: [v11, v5, v10, zero, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [v11, v5, v10, zero, v6, s11, v9]
// [Asm]   th.surd v6, v11, v9, 3  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   addi v18, v9, -1  # live: [v11, v5, v10, v18, zero, s11]
// [Asm] # control
// [Asm]   mv v9, v18  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   mv v10, v10  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   mv v11, v11  # live: [v11, v5, v10, s11, zero, v9]
// [Asm]   j .gen_arr.231_3  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero], live_out: [v5, v13]
// [Asm] # block parameters: []
// [Asm] .gen_arr.231_5:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v5, v13]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v13], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v5, v13], live_out: [v14, v5]
// [Asm] # block parameters: [v13]
// [Asm] .gen_arr.231_6:
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v14]
// [Asm] # live_in: [v14, v5], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .gen_arr.231_1:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.230:
// [Asm] # block info: defs: [v2, fv97, a1, s11, v44, fa1, fv38, fa2, v99, ft6, fa6, a4, v27, v50, a6, fv100, ft5, ft10, v6, v102, ft4, v5, v87, ft9, v49, fa4, v110, ft2, v37, v17, a3, v31, v113, fa7, a7, v75, fv76, v96, fa3, ft3, fv43, fv73, v45, t2, fv106, fv88, v40, v25, t1, v13, v42, v7, fv85, ft0, ft1, v32, v41, v108, v93, fv94, v29, v105, v19, v90, v4, v81, v47, v34, ft7, v11, fv91, fv79, v46, v21, a5, a0, v78, v36, fv48, a2, v114, v111, v9, v39, ft8, t3, t0, v72, fa5, v23, fa0, fv33, v35, v84, t4, fv82, v70, v15, fv103], uses: [fv97, a1, s11, v44, fv38, v99, v27, fv100, v6, v102, v87, v5, v49, v110, v37, v17, a3, v113, v75, fv76, v96, fv43, fv73, fv106, fv88, v25, v13, v42, v7, fv85, v32, v108, v93, fv94, v29, zero, v105, v19, v90, v4, v81, v47, v34, v11, fv91, fv79, v21, a0, v78, fv48, v114, a2, v111, v9, v39, v72, v23, fv33, v84, fv82, v70, v15, fv103, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.230_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v113, 2  # live: [zero, v113, v2]
// [Asm]   mv a0, v113  # live: [zero, a0, v2]
// [Asm]   li v114, 3  # live: [v114, zero, a0, v2]
// [Asm]   mv a1, v114  # live: [a1, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [a2, a1, zero, a0, v2]
// [Asm]   call gen_arr.231  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [v4, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, zero, v2]
// [Asm]   li v110, 3  # live: [v4, zero, v110, v2]
// [Asm]   mv a0, v110  # live: [v4, zero, a0, v2]
// [Asm]   li v111, 2  # live: [v4, v111, zero, a0, v2]
// [Asm]   mv a1, v111  # live: [v4, a1, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [v4, a2, a1, zero, a0, v2]
// [Asm]   call gen_arr.231  # live: [v4, zero, a0, v2]
// [Asm]   mv v5, a0  # live: [v4, v5, zero, v2]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero, v2]
// [Asm]   # save_ctx2  # live: [v4, v5, zero, v2]
// [Asm]   li v108, 2  # live: [v4, v5, v108, zero, v2]
// [Asm]   mv a0, v108  # live: [v4, v5, v108, zero, a0, v2]
// [Asm]   mv a1, v108  # live: [v4, a1, v5, zero, a0, v2]
// [Asm]   mv a2, v2  # live: [v4, a2, a1, v5, zero, a0]
// [Asm]   call gen_arr.231  # live: [v4, v5, zero, a0]
// [Asm]   mv v6, a0  # live: [v4, v6, v5, zero]
// [Asm]   # restore_ctx2  # live: [v4, v6, v5, zero]
// [Asm]   ld v7, 0(v4)  # live: [v4, v6, v5, zero, v7]
// [Asm]   li v105, 4607182418800017408  # live: [v105, v4, v6, v5, zero, v7]
// [Asm]   fmv.d.x fv106, v105  # live: [v4, v6, v5, fv106, zero, v7]
// [Asm]   fsd fv106, 0(v7)  # live: [v4, v6, v5, zero]
// [Asm]   ld v9, 0(v4)  # live: [v4, v6, v5, zero, v9]
// [Asm]   li v102, 4611686018427387904  # live: [v4, v6, v5, v102, zero, v9]
// [Asm]   fmv.d.x fv103, v102  # live: [v4, v6, v5, fv103, zero, v9]
// [Asm]   fsd fv103, 8(v9)  # live: [v4, v6, v5, zero]
// [Asm]   ld v11, 0(v4)  # live: [v11, v4, v6, v5, zero]
// [Asm]   li v99, 4613937818241073152  # live: [v11, v4, v6, v5, v99, zero]
// [Asm]   fmv.d.x fv100, v99  # live: [fv100, v11, v4, v6, v5, zero]
// [Asm]   fsd fv100, 16(v11)  # live: [v4, v5, v6, zero]
// [Asm]   ld v13, 8(v4)  # live: [v4, v5, v6, zero, v13]
// [Asm]   li v96, 4616189618054758400  # live: [v4, v5, v6, v96, zero, v13]
// [Asm]   fmv.d.x fv97, v96  # live: [v4, v5, v6, fv97, zero, v13]
// [Asm]   fsd fv97, 0(v13)  # live: [v4, v5, v6, zero]
// [Asm]   ld v15, 8(v4)  # live: [v4, v5, v6, v15, zero]
// [Asm]   li v93, 4617315517961601024  # live: [v4, v5, v6, v15, zero, v93]
// [Asm]   fmv.d.x fv94, v93  # live: [v4, v5, v6, v15, fv94, zero]
// [Asm]   fsd fv94, 8(v15)  # live: [v4, v5, v6, zero]
// [Asm]   ld v17, 8(v4)  # live: [v4, v5, v17, v6, zero]
// [Asm]   li v90, 4618441417868443648  # live: [v4, v90, v5, v17, v6, zero]
// [Asm]   fmv.d.x fv91, v90  # live: [v4, fv91, v6, v5, v17, zero]
// [Asm]   fsd fv91, 16(v17)  # live: [v4, v5, v6, zero]
// [Asm]   ld v19, 0(v5)  # live: [v19, v4, v5, v6, zero]
// [Asm]   li v87, 4619567317775286272  # live: [v19, v4, v5, v6, v87, zero]
// [Asm]   fmv.d.x fv88, v87  # live: [v19, v4, v5, v6, zero, fv88]
// [Asm]   fsd fv88, 0(v19)  # live: [v4, v5, v6, zero]
// [Asm]   ld v21, 0(v5)  # live: [v4, v5, v6, v21, zero]
// [Asm]   li v84, 4620693217682128896  # live: [v84, v4, v5, v6, v21, zero]
// [Asm]   fmv.d.x fv85, v84  # live: [fv85, v4, v5, v6, v21, zero]
// [Asm]   fsd fv85, 8(v21)  # live: [v4, v5, v6, zero]
// [Asm]   ld v23, 8(v5)  # live: [v4, v5, v6, zero, v23]
// [Asm]   li v81, 4621256167635550208  # live: [v4, v81, v5, v6, zero, v23]
// [Asm]   fmv.d.x fv82, v81  # live: [v4, v6, v5, fv82, zero, v23]
// [Asm]   fsd fv82, 0(v23)  # live: [v4, v6, v5, zero]
// [Asm]   ld v25, 8(v5)  # live: [v25, v4, v6, v5, zero]
// [Asm]   li v78, 4621819117588971520  # live: [v25, v4, v6, v5, zero, v78]
// [Asm]   fmv.d.x fv79, v78  # live: [v25, v4, fv79, v6, v5, zero]
// [Asm]   fsd fv79, 8(v25)  # live: [v4, v5, v6, zero]
// [Asm]   ld v27, 16(v5)  # live: [v4, v5, v6, zero, v27]
// [Asm]   li v75, 4622382067542392832  # live: [v4, v5, v6, v75, zero, v27]
// [Asm]   fmv.d.x fv76, v75  # live: [v4, v5, v6, fv76, zero, v27]
// [Asm]   fsd fv76, 0(v27)  # live: [v4, v5, v6, zero]
// [Asm]   ld v29, 16(v5)  # live: [v4, v5, v6, zero, v29]
// [Asm]   li v72, 4622945017495814144  # live: [v4, v72, v5, v6, zero, v29]
// [Asm]   fmv.d.x fv73, v72  # live: [v4, v6, v5, zero, v29, fv73]
// [Asm]   fsd fv73, 8(v29)  # live: [v4, v6, v5, zero]
// [Asm]   # save_ctx2  # live: [v4, v6, v5, zero]
// [Asm]   li v70, 1  # live: [v4, v6, v5, v70, zero]
// [Asm]   mv a0, v70  # live: [v4, v6, v5, zero, a0]
// [Asm]   mv a1, v4  # live: [v6, a1, v5, zero, a0]
// [Asm]   mv a2, v5  # live: [a2, v6, a1, zero, a0]
// [Asm]   mv a3, v6  # live: [a2, v6, a1, a3, zero, a0]
// [Asm]   call loop1.233  # live: [v6, zero, a0]
// [Asm]   mv v31, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v32, 0(v6)  # live: [v32, v6, zero]
// [Asm]   fld fv33, 0(v32)  # live: [v6, zero, fv33]
// [Asm]   fcvt.w.d v34, fv33, rtz  # live: [v6, zero, v34]
// [Asm]   # save_ctx2  # live: [v6, zero, v34]
// [Asm]   mv a0, v34  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v35, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v36, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v37, 0(v6)  # live: [v37, v6, zero]
// [Asm]   fld fv38, 8(v37)  # live: [v6, zero, fv38]
// [Asm]   fcvt.w.d v39, fv38, rtz  # live: [v6, zero, v39]
// [Asm]   # save_ctx2  # live: [v6, zero, v39]
// [Asm]   mv a0, v39  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v40, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v41, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v42, 8(v6)  # live: [v6, zero, v42]
// [Asm]   fld fv43, 0(v42)  # live: [v6, zero, fv43]
// [Asm]   fcvt.w.d v44, fv43, rtz  # live: [v6, v44, zero]
// [Asm]   # save_ctx2  # live: [v6, v44, zero]
// [Asm]   mv a0, v44  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v45, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v46, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v47, 8(v6)  # live: [v47, zero]
// [Asm]   fld fv48, 8(v47)  # live: [fv48, zero]
// [Asm]   fcvt.w.d v49, fv48, rtz  # live: [v49, zero]
// [Asm]   # save_ctx2  # live: [v49, zero]
// [Asm]   mv a0, v49  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v50, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.230
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop1.233
// [Main]   .type loop1.233, @function
// [Main] # leaf true
// [Main] loop1.233:
// [Main] .loop1.233_5:
// [Main]   addi sp, sp, -16
// [Main]   sd s0, 0(sp)
// [Main]   mv a6, a0
// [Main]   mv a5, a1
// [Main]   mv a4, a2
// [Main]   mv a0, a3
// [Main]   mv a1, a6
// [Main]   mv a2, a5
// [Main]   mv a3, a4
// [Main]   mv a4, a0
// [Main] 
// [Main] .loop1.233_0:
// [Main]   blt a1, zero, .loop1.233_2
// [Main] 
// [Main] .loop1.233_1:
// [Main]   th.lurd a6, a4, a1, 3
// [Main]   th.lurd a0, a2, a1, 3
// [Main] 
// [Main] .loop1.233_12:
// [Main]   li a5, 1
// [Main]   mv a7, a6
// [Main]   mv t0, a0
// [Main] 
// [Main] .loop1.233_7:
// [Main]   blt a5, zero, .loop1.233_9
// [Main] 
// [Main] .loop1.233_8:
// [Main] 
// [Main] .loop1.233_19:
// [Main]   li a0, 2
// [Main]   mv t2, a2
// [Main]   mv t4, a3
// [Main]   mv t1, a4
// [Main]   mv t3, a1
// [Main] 
// [Main] .loop1.233_14:
// [Main]   blt a0, zero, .loop1.233_16
// [Main] 
// [Main] .loop1.233_15:
// [Main]   th.flurd fa0, a7, a5, 3
// [Main]   th.flurd fa1, t0, a0, 3
// [Main]   th.lurd s0, t4, a0, 3
// [Main]   th.flurd fa2, s0, a5, 3
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   th.fsurd fa0, a6, a5, 3
// [Main]   addi a0, a0, -1
// [Main]   j .loop1.233_14
// [Main] 
// [Main] .loop1.233_16:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.233_17:
// [Main] 
// [Main] .loop1.233_13:
// [Main]   addi a5, a5, -1
// [Main]   j .loop1.233_7
// [Main] 
// [Main] .loop1.233_9:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.233_10:
// [Main] 
// [Main] .loop1.233_6:
// [Main]   addi a1, a1, -1
// [Main]   j .loop1.233_0
// [Main] 
// [Main] .loop1.233_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.233_3:
// [Main]   ld s0, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gen_arr.231
// [Main]   .type gen_arr.231, @function
// [Main] # leaf false
// [Main] gen_arr.231:
// [Main] .gen_arr.231_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   mv s2, a1
// [Main]   slliw a0, s1, 3
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s1
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   addi a0, s1, -1
// [Main] 
// [Main] .gen_arr.231_8:
// [Main]   mv a1, s2
// [Main]   mv a3, s0
// [Main] 
// [Main] .gen_arr.231_3:
// [Main]   blt a0, zero, .gen_arr.231_5
// [Main] 
// [Main] .gen_arr.231_4:
// [Main]   slliw a2, a1, 3
// [Main]   sub a2, s11, a2
// [Main]   andi s11, a2, -8
// [Main]   th.surd a2, a3, a0, 3
// [Main]   addi a0, a0, -1
// [Main]   j .gen_arr.231_3
// [Main] 
// [Main] .gen_arr.231_5:
// [Main]   mv a0, zero
// [Main] 
// [Main] .gen_arr.231_6:
// [Main] 
// [Main] .gen_arr.231_1:
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.230
// [Main]   .type main.230, @function
// [Main] # leaf false
// [Main] main.230:
// [Main] .main.230_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   call gen_arr.231
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   call gen_arr.231
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   call gen_arr.231
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 1
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   mv a3, s0
// [Main]   call loop1.233
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("matmul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)}, App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)}, App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None)]))
// [Typer] resolve: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)
// [Typer] resolve: LE(Int(0), Var("i"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("i")
// [Typer] resolve: LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])))
// [Typer] resolve: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)
// [Typer] resolve: LE(Int(0), Var("j"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("j")
// [Typer] resolve: LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)])))
// [Typer] resolve: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)
// [Typer] resolve: LE(Int(0), Var("k"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("k")
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)]))
// [Typer] resolve: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None))
// [Typer] resolve: Get(Var("c"), Var("i"))
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)
// [Typer] resolve: Get(Get(Var("c"), Var("i")), Var("j"))
// [Typer] resolve: Get(Var("c"), Var("i"))
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None)
// [Typer] resolve: Get(Get(Var("a"), Var("i")), Var("k"))
// [Typer] resolve: Get(Var("a"), Var("i"))
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("k")
// [Typer] resolve: Get(Get(Var("b"), Var("k")), Var("j"))
// [Typer] resolve: Get(Var("b"), Var("k"))
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("j")
// [Typer] resolve: App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("k"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("loop3")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))
// [Typer] resolve: App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("m"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("m")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("loop3")
// [Typer] resolve: App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("j"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("j")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("loop2")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))
// [Typer] resolve: App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("loop2")
// [Typer] resolve: App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("loop1")
// [Typer] resolve: Unit
// [Typer] resolve: App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("l"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("l")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("loop1")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit)
// [Typer] resolve: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Typer] resolve: Array(Int(0), Double(0))
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Typer] resolve: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))
// [Typer] resolve: Array(Var("m"), Var("dummy"))
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("dummy")
// [Typer] resolve: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat")))
// [Typer] resolve: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)
// [Typer] resolve: LE(Int(0), Var("i"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))
// [Typer] resolve: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Typer] resolve: Var("mat")
// [Typer] resolve: Var("i")
// [Typer] resolve: Array(Var("n"), Double(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Double(0)
// [Typer] resolve: App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("init_arr")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))
// [Typer] resolve: App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("m"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("m")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("init_arr")
// [Typer] resolve: Var("mat")
// [Typer] resolve: Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Typer] resolve: App(Var("gen_arr"), targs=None, [Int(2), Int(3)])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Var("gen_arr")
// [Typer] resolve: Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Typer] resolve: App(Var("gen_arr"), targs=None, [Int(3), Int(2)])
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("gen_arr")
// [Typer] resolve: Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Typer] resolve: App(Var("gen_arr"), targs=None, [Int(2), Int(2)])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("gen_arr")
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(2)
// [Typer] resolve: Double(3)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Typer] resolve: Get(Var("a"), Int(1))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(4)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Typer] resolve: Get(Var("a"), Int(1))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(5)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Typer] resolve: Get(Var("a"), Int(1))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(2)
// [Typer] resolve: Double(6)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Typer] resolve: Get(Var("b"), Int(0))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(7)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Typer] resolve: Get(Var("b"), Int(0))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(8)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Typer] resolve: Get(Var("b"), Int(1))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(9)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Typer] resolve: Get(Var("b"), Int(1))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(10)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Typer] resolve: Get(Var("b"), Int(2))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(11)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Typer] resolve: Get(Var("b"), Int(2))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(12)
// [Typer] resolve: Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Typer] resolve: App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("matmul")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])
// [Typer] resolve: Get(Get(Var("c"), Int(0)), Int(0))
// [Typer] resolve: Get(Var("c"), Int(0))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Typer] resolve: App(Var("print_endline"), targs=None, [])
// [Typer] resolve: Var("print_endline")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])
// [Typer] resolve: Get(Get(Var("c"), Int(0)), Int(1))
// [Typer] resolve: Get(Var("c"), Int(0))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Typer] resolve: App(Var("print_endline"), targs=None, [])
// [Typer] resolve: Var("print_endline")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])
// [Typer] resolve: Get(Get(Var("c"), Int(1)), Int(0))
// [Typer] resolve: Get(Var("c"), Int(1))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Typer] resolve: App(Var("print_endline"), targs=None, [])
// [Typer] resolve: Var("print_endline")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])
// [Typer] resolve: Get(Get(Var("c"), Int(1)), Int(1))
// [Typer] resolve: Get(Var("c"), Int(1))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("matmul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)}, App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit)}, App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None)])) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("loop2", Unit), args: [("j", Int)], body: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("j")), LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Int(0), Var("j")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("loop3", Unit), args: [("k", Int)], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("k")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None))
// [Typer] infer: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)
// [Typer] infer: Get(Get(Var("c"), Var("i")), Var("j"))
// [Typer] infer: Get(Var("c"), Var("i"))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None)
// [Typer] infer: Get(Get(Var("a"), Var("i")), Var("k"))
// [Typer] infer: Get(Var("a"), Var("i"))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Get(Get(Var("b"), Var("k")), Var("j"))
// [Typer] infer: Get(Var("b"), Var("k"))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Get(Var("c"), Var("i")) against Array[Double]
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("loop3"), targs=None, [Prim(Var("k"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("k"), Int(1), Sub, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: App(Var("loop3"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("loop2"), targs=None, [Prim(Var("j"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("j"), Int(1), Sub, kind=None)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: App(Var("loop2"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Prim(Var("n"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("l"), Int(1), Sub, kind=None)
// [Typer] infer: Var("l")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Typer] infer: Array(Int(0), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Array[Double]
// [Typer] union: Var(None) and Array[Double]
// [Typer] infer: LetRec({tyvars: [], name: ("gen_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int)], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))))}, Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Typer] typevars: []
// [Typer] check: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat")))) against Array[Array[Double]]
// [Typer] infer: Array(Var("m"), Var("dummy"))
// [Typer] infer: Var("dummy")
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] check: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int)], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit)}, Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat"))) against Array[Array[Double]]
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Typer] infer: Array(Var("n"), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("mat") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)]), Var("mat")) against Array[Array[Double]]
// [Typer] infer: App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("mat") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] infer: Let(("a", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(3)]), Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Typer] infer: App(Var("gen_arr"), targs=None, [Int(2), Int(3)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Array[Array[Double]]))
// [Typer] inst result: (Int, Int) -> Array[Array[Double]]
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] infer: Let(("b", Var(None)), App(Var("gen_arr"), targs=None, [Int(3), Int(2)]), Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Typer] infer: App(Var("gen_arr"), targs=None, [Int(3), Int(2)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Array[Array[Double]]))
// [Typer] inst result: (Int, Int) -> Array[Array[Double]]
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] infer: Let(("c", Var(None)), App(Var("gen_arr"), targs=None, [Int(2), Int(2)]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Typer] infer: App(Var("gen_arr"), targs=None, [Int(2), Int(2)])
// [Typer] inst: TypeScheme(([], (Int, Int) -> Array[Array[Double]]))
// [Typer] inst result: (Int, Int) -> Array[Array[Double]]
// [Typer] check: Int(2) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Typer] infer: Double(1)
// [Typer] check: Get(Var("a"), Int(0)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Typer] infer: Double(2)
// [Typer] check: Get(Var("a"), Int(0)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Typer] infer: Double(3)
// [Typer] check: Get(Var("a"), Int(0)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Typer] infer: Double(4)
// [Typer] check: Get(Var("a"), Int(1)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Typer] infer: Double(5)
// [Typer] check: Get(Var("a"), Int(1)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Typer] infer: Double(6)
// [Typer] check: Get(Var("a"), Int(1)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Typer] infer: Double(7)
// [Typer] check: Get(Var("b"), Int(0)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Typer] infer: Double(8)
// [Typer] check: Get(Var("b"), Int(0)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Typer] infer: Double(9)
// [Typer] check: Get(Var("b"), Int(1)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Typer] infer: Double(10)
// [Typer] check: Get(Var("b"), Int(1)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Typer] infer: Double(11)
// [Typer] check: Get(Var("b"), Int(2)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Typer] infer: Double(12)
// [Typer] check: Get(Var("b"), Int(2)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Typer] infer: App(Var("matmul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(0))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Typer] infer: App(Var("print_endline"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(1))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Typer] infer: App(Var("print_endline"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(0))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Typer] infer: App(Var("print_endline"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(1))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {matmul.1: Once, loop1.14: Many(2), loop2.18: Many(2), loop3.22: Many(2), main.53: Once, gen_arr.57: Many(3), init_arr.63: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 45
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 45
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 61
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 61
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(matmul)
// [KnfOpt] freq: {main.53: Once, gen_arr.57: Many(3), init_arr.63: Many(2), loop1.197: Many(2), loop2.200: Many(2), loop3.203: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 45
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 45
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 61
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 61
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main.53: Once, gen_arr.57: Many(3), init_arr.63: Many(2), loop1.197: Many(2), loop2.200: Many(2), loop3.203: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 45
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 45
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 61
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 61
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [KnfOpt] hoist: _206
// [KnfOpt] hoist: _207
// [KnfOpt] hoist: _209
// [KnfOpt] hoist: _239
// [KnfOpt] hoist: _240
// [KnfOpt] hoist: _241
// [KnfOpt] Tuple freq: {n.61: MayEscape, _67: MayEscape, _68: MayEscape, _72: MayEscape, mat.62: MayEscape, m.59: MayEscape, dummy.56: MayEscape, _74: MayEscape, _214: MayEscape, _217: MayEscape, a.79: MayEscape, b.82: MayEscape, c.85: MayEscape, i.198: MayEscape, j.201: MayEscape, _206: MayEscape, _207: MayEscape, _209: MayEscape, _219: MayEscape, _239: MayEscape, _240: MayEscape, _241: MayEscape, _222: MayEscape, _224: MayEscape, _245: MayEscape, _246: MayEscape, _247: MayEscape, _227: MayEscape, _54: MayEscape, _55: MayEscape, _77: MayEscape, _78: MayEscape, _80: MayEscape, _81: MayEscape, _83: MayEscape, _84: MayEscape, _89: MayEscape, _95: MayEscape, _101: MayEscape, _107: MayEscape, _113: MayEscape, _119: MayEscape, _125: MayEscape, _131: MayEscape, _137: MayEscape, _143: MayEscape, _149: MayEscape, _155: MayEscape, _229: MayEscape, _166: MayEscape, _167: MayEscape, _175: MayEscape, _176: MayEscape, _184: MayEscape, _185: MayEscape, _193: MayEscape, _194: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f4, args=[Insn(iref=%5), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2), FnParam(fref=f4, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f2, args=[Insn(iref=%8), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5), FnParam(fref=f2, fpref=$f.6), FnParam(fref=f2, fpref=$f.7), FnParam(fref=f2, fpref=$f.8)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f3, args=[Insn(iref=%2), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5), FnParam(fref=f3, fpref=$f.6), FnParam(fref=f3, fpref=$f.7)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f0, args=[Insn(iref=%3), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Multiple, f5: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] allow_inline: false %0 main.230 false true true false true
// [CoreOpt] allow_inline: true %4 loop2.234 true true true false true
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%4) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %4 loop2.234 true true false false true
// [CoreOpt] allow_inline: true %2 init_arr.232 true true true false true
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] allow_inline: false %2 init_arr.232 true true false false true
// [CoreOpt] allow_inline: false %1 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %2 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %3 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.233 false true true false true
// [CoreOpt] allow_inline: true %1 loop3.235 true true true false true
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %1 loop3.235 true true false false true
// [CoreOpt] allow_inline: false %0 main.230 false true true false true
// [CoreOpt] allow_inline: true %4 loop2.234 true true true false true
// [CoreOpt] loop1.233 is inlining Call(ty=Unit, f=f3, args=[Int32(val=1), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [CoreOpt] shifted callee .fn loop2.234 #f3 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, array[array[double]], array[array[double]], array[array[double]], int32, array[double], array[double], array[double]) {
// [CoreOpt]     let %6: bool = le(0, $b7.0)
// [CoreOpt]     br %6 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %7: unit = call f2(2, $b7.1, $b7.2, $b7.3, $b7.4, $b7.0, $b7.5, $b7.6, $b7.7)
// [CoreOpt]     jump b13(%7)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %8: int32 = sub($b7.0, 1)
// [CoreOpt]     jump b7(%8, $b7.1, $b7.2, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %7 loop3.235 true true true false true
// [CoreOpt] allow_inline: true %2 init_arr.232 true true true false true
// [CoreOpt] gen_arr.231 is inlining Call(ty=Unit, f=f0, args=[Insn(iref=%1), FnParam(fref=f1, fpref=$f.1), Mem(fref=f1, mref=m0)])
// [CoreOpt] shifted callee .fn init_arr.232 #f0 : fn(int32, int32, array[array[double]]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b8 {
// [CoreOpt]   .bb #b3 (int32, int32, array[array[double]]) {
// [CoreOpt]     let %3: bool = le(0, $b3.0)
// [CoreOpt]     br %3 b4() b5()
// [CoreOpt]   }
// [CoreOpt]   .bb #b4 () {
// [CoreOpt]     let _ = alloc <m3: array[double] heap($b3.1)> <- [..] = 0
// [CoreOpt]     let _ = store array[double] offset($b3.2, $b3.0 * @ptr) <- f0.m3
// [CoreOpt]     let %6: int32 = sub($b3.0, 1)
// [CoreOpt]     jump b3(%6, $b3.1, $b3.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b5 () {
// [CoreOpt]     jump b6(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b6 (unit) {
// [CoreOpt]     return $b6.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b7 pre #Some(b8) header #b3 {
// [CoreOpt]     .block #b4
// [CoreOpt]     .block #b5
// [CoreOpt]     .block #b6
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     jump b7($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %1 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %2 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %3 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.233 false true true false true
// [CoreOpt] allow_inline: true %1 loop3.235 true true true false true
// [CoreOpt] loop2.234 is inlining Call(ty=Unit, f=f2, args=[Int32(val=2), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7)])
// [CoreOpt] shifted callee .fn loop3.235 #f2 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32, array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, array[array[double]], array[array[double]], array[array[double]], int32, int32, array[double], array[double], array[double]) {
// [CoreOpt]     let %3: bool = le(0, $b7.0)
// [CoreOpt]     br %3 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %4: double = load double offset($b7.7, $b7.5 * @64)
// [CoreOpt]     let %5: double = load double offset($b7.8, $b7.0 * @64)
// [CoreOpt]     let %6: array[double] = load array[double] offset($b7.2, $b7.0 * @ptr)
// [CoreOpt]     let %7: double = load double offset(%6, $b7.5 * @64)
// [CoreOpt]     let %8: double = mul(%5, %7)
// [CoreOpt]     let %9: double = add(%4, %8)
// [CoreOpt]     let _ = store double offset($b7.6, $b7.5 * @64) <- %9
// [CoreOpt]     let %11: int32 = sub($b7.0, 1)
// [CoreOpt]     jump b7(%11, $b7.1, $b7.2, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f3
// [CoreOpt] Remove dead function: f0
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Multiple, f5: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.230 false true true false true
// [CoreOpt] allow_inline: true %7 loop3.235 true true true false true
// [CoreOpt] allow_inline: false %1 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %2 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %3 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.233 false true true false true
// [CoreOpt] allow_inline: false %0 main.230 false true true false true
// [CoreOpt] allow_inline: true %7 loop3.235 true true true false true
// [CoreOpt] loop1.233 is inlining Call(ty=Unit, f=f2, args=[Int32(val=2), BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.2), BlockParam(bref=b7, bpref=$b.3), BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.0), BlockParam(bref=b7, bpref=$b.5), BlockParam(bref=b7, bpref=$b.6), BlockParam(bref=b7, bpref=$b.7)])
// [CoreOpt] shifted callee .fn loop3.235 #f2 : fn(int32, array[array[double]], array[array[double]], array[array[double]], int32, int32, array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b19 {
// [CoreOpt]   .bb #b14 (int32, array[array[double]], array[array[double]], array[array[double]], int32, int32, array[double], array[double], array[double]) {
// [CoreOpt]     let %9: bool = le(0, $b14.0)
// [CoreOpt]     br %9 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %10: double = load double offset($b14.7, $b14.5 * @64)
// [CoreOpt]     let %11: double = load double offset($b14.8, $b14.0 * @64)
// [CoreOpt]     let %12: array[double] = load array[double] offset($b14.2, $b14.0 * @ptr)
// [CoreOpt]     let %13: double = load double offset(%12, $b14.5 * @64)
// [CoreOpt]     let %14: double = mul(%11, %13)
// [CoreOpt]     let %15: double = add(%10, %14)
// [CoreOpt]     let _ = store double offset($b14.6, $b14.5 * @64) <- %15
// [CoreOpt]     let %17: int32 = sub($b14.0, 1)
// [CoreOpt]     jump b14(%17, $b14.1, $b14.2, $b14.3, $b14.4, $b14.5, $b14.6, $b14.7, $b14.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b17(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (unit) {
// [CoreOpt]     return $b17.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b18 pre #Some(b19) header #b14 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b18($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %1 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %2 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %3 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.233 false true true false true
// [CoreOpt] Remove dead function: f2
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Once, f1: Multiple, f5: Once})
// [CoreOpt] allow_inline: false %0 main.230 false true true false true
// [CoreOpt] allow_inline: false %1 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %2 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %3 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.233 false true true false true
// [CoreOpt] allow_inline: false %0 main.230 false true true false true
// [CoreOpt] allow_inline: false %1 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %2 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %3 gen_arr.231 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.233 false true true false true
// [CoreOpt] LVN subst Insn(iref=%2) with Insn(iref=%1)
// [CoreOpt2] LVN subst Insn(iref=%29) with Insn(iref=%31)
// [CoreOpt2] LVN subst Insn(iref=%26) with Insn(iref=%32)
// [CoreOpt2] LVN subst Insn(iref=%22) with Insn(iref=%32)
// [CoreOpt2] LVN subst Insn(iref=%34) with Insn(iref=%35)
