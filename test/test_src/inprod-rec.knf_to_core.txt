# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main15l1_1 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(3)> <- [..] = 1.23
    let _ = alloc <m1: array[double] heap(3)> <- [..] = 4.56
    let %2: bool = le(0, 2)
    br %2 b1() b2()
  }
  .bb #b1 () {
    let %3: double = load double offset(f1.m0, 2 * @64)
    let %4: double = load double offset(f1.m1, 2 * @64)
    let %5: double = mul(%3, %4)
    let %6: int32 = sub(2, 1)
    let %7: double = call f0(f1.m0, f1.m1, %6)
    let %8: double = add(%5, %7)
    jump b3(%8)
  }
  .bb #b2 () {
    jump b3(0)
  }
  .bb #b3 (double) {
    let %9: double = mul(1000000, $b3.0)
    let %10: int32 = conv.d2i.rtz(%9)
    let %11: unit = ext_call minimbt_print_int(%10)
    return %11
  }
}
.fn T$start_4 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn inprod1l0_0 #f0 : fn(array[double], array[double], int32) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = load double offset($f0, $f2 * @64)
    let %2: double = load double offset($f1, $f2 * @64)
    let %3: double = mul(%1, %2)
    let %4: int32 = sub($f2, 1)
    let %5: bool = le(0, %4)
    br %5 b3() b4()
  }
  .bb #b2 () {
    jump b6(0)
  }
  .bb #b3 () {
    let %6: double = load double offset($f0, %4 * @64)
    let %7: double = load double offset($f1, %4 * @64)
    let %8: double = mul(%6, %7)
    let %9: int32 = sub(%4, 1)
    let %10: double = call f0($f0, $f1, %9)
    let %11: double = add(%8, %10)
    jump b5(%11)
  }
  .bb #b4 () {
    jump b5(0)
  }
  .bb #b5 (double) {
    let %12: double = add(%3, $b5.0)
    jump b6(%12)
  }
  .bb #b6 (double) {
    return $b6.0
  }
}
.thunk ::0 start
