let rec f.7: Int = (x.8: Int) {
  let _11: Bool = Bool(true)
  let _14: Bool = Bool(true)
  if (_11 == _14) then {
    let _12: Int = Int(1)
    let rec g.16: Int = (y.17: Int) {
      Var(_12)
    }
    let _18: Bool = Bool(true)
    let _19: Bool = Bool(true)
    if (_18 == _19) then {
      let _20: Int = Int(1)
      Apply(f.7, [_20, ])
    } else {
      let _21: Int = Int(2)
      Apply(g.16, [_21, ])
    }
  } else {
    let _13: Int = Int(2)
    Var(x.8)
  }
}
let rec main.15: Var({val: Some(Unit)}) = () {
  Unit
}
Apply(main.15, [])let rec f.7: Int = (x.8: Int) {
  let _11: Bool = Bool(true)
  let _14: Bool = Bool(true)
  if (_11 == _14) then {
    let _12: Int = Int(1)
    let _18: Bool = Bool(true)
    let _19: Bool = Bool(true)
    if (_18 == _19) then {
      let _20: Int = Int(1)
      let _22: Bool = Bool(true)
      let _23: Bool = Bool(true)
      if (_22 == _23) then {
        let _24: Int = Int(1)
        let rec g.25: Int = (y.26: Int) {
          Var(_24)
        }
        let _27: Bool = Bool(true)
        let _28: Bool = Bool(true)
        if (_27 == _28) then {
          let _29: Int = Int(1)
          Apply(f.7, [_29, ])
        } else {
          let _30: Int = Int(2)
          Apply(g.25, [_30, ])
        }
      } else {
        let _31: Int = Int(2)
        Var(_20)
      }
    } else {
      let _21: Int = Int(2)
      Var(_12)
    }
  } else {
    let _13: Int = Int(2)
    Var(x.8)
  }
}
let rec main.15: Var({val: Some(Unit)}) = () {
  Unit
}
Apply(main.15, [])