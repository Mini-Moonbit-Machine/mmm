let t.1: Int = Int(123)
let f.2: Int = Int(456)
let rec even.3: Int = (x.4: Int) {
  let rec odd.5: Int = (x.6: Int) {
    let _7: Int = Int(0)
    if (_7 <= x.6) then {
      let _8: Int = Int(0)
      if (x.6 == _8) then {
        Var(f.2)
      } else {
        let _9: Int = Int(1)
        let _10: Int = Sub(x.6, _9)
        Apply(even.3, [_10, ])
      }
    } else {
      let _11: Int = Int(1)
      let _12: Int = Add(x.6, _11)
      Apply(even.3, [_12, ])
    }
  }
  let _13: Int = Int(0)
  if (_13 <= x.4) then {
    let _14: Int = Int(0)
    if (x.4 == _14) then {
      Var(t.1)
    } else {
      let _15: Int = Int(1)
      let _16: Int = Sub(x.4, _15)
      Apply(odd.5, [_16, ])
    }
  } else {
    let _17: Int = Int(1)
    let _18: Int = Add(x.4, _17)
    Apply(odd.5, [_18, ])
  }
}
let rec main.19: Var({val: Some(Unit)}) = () {
  let _20: Int = Int(789)
  let _21: Int = Apply(even.3, [_20, ])
  ExtApply(minimbt_print_int, [_21, ])
}
Apply(main.19, [])let t.1: Int = Int(123)
let f.2: Int = Int(456)
let rec even.3: Int = (x.4: Int) {
  let rec odd.5: Int = (x.6: Int) {
    let _7: Int = Int(0)
    if (_7 <= x.6) then {
      let _8: Int = Int(0)
      if (x.6 == _8) then {
        Var(f.2)
      } else {
        let _9: Int = Int(1)
        let _10: Int = Sub(x.6, _9)
        Apply(even.3, [_10, ])
      }
    } else {
      let _11: Int = Int(1)
      let _12: Int = Add(x.6, _11)
      Apply(even.3, [_12, ])
    }
  }
  let _13: Int = Int(0)
  if (_13 <= x.4) then {
    let _14: Int = Int(0)
    if (x.4 == _14) then {
      Var(t.1)
    } else {
      let _15: Int = Int(1)
      let _16: Int = Sub(x.4, _15)
      Apply(odd.5, [_16, ])
    }
  } else {
    let _17: Int = Int(1)
    let _18: Int = Add(x.4, _17)
    Apply(odd.5, [_18, ])
  }
}
let rec main.19: Var({val: Some(Unit)}) = () {
  let _20: Int = Int(789)
  let _21: Int = Apply(even.3, [_20, ])
  ExtApply(minimbt_print_int, [_21, ])
}
Apply(main.19, [])