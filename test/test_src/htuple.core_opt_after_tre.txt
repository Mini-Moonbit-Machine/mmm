# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn return_i_d1l0_0 #f0 : fn() -> (int32, double)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, double) heap(2)> <- [0] = 1, [1] = 2
    return f0.m0
  }
}
.fn main16l4_4 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: (int32, double) = call f0()
    let %1: int32 = load int32 field(%0, 0 * @(@32, @(@64, @32)))
    let %2: double = load double field(%0, 1 * @(@32, @(@64, @32)))
    let %3: unit = ext_call minimbt_print_int(%1)
    let %4: int32 = conv.d2i.rtz(%2)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %6: (int32, double, int32) = call f1()
    let %7: int32 = load int32 field(%6, 0 * @(@32, @(@64, @(@32, @32))))
    let %8: double = load double field(%6, 1 * @(@32, @(@64, @(@32, @32))))
    let %9: int32 = load int32 field(%6, 2 * @(@32, @(@64, @(@32, @32))))
    let %10: unit = ext_call minimbt_print_int(%7)
    let %11: int32 = conv.d2i.rtz(%8)
    let %12: unit = ext_call minimbt_print_int(%11)
    let %13: unit = ext_call minimbt_print_int(%9)
    let %14: (double, int32, int32) = call f2()
    let %15: double = load double field(%14, 0 * @(@64, @(@32, @(@32, @32))))
    let %16: int32 = load int32 field(%14, 1 * @(@64, @(@32, @(@32, @32))))
    let %17: int32 = load int32 field(%14, 2 * @(@64, @(@32, @(@32, @32))))
    let %18: int32 = conv.d2i.rtz(%15)
    let %19: unit = ext_call minimbt_print_int(%18)
    let %20: unit = ext_call minimbt_print_int(%16)
    let %21: unit = ext_call minimbt_print_int(%17)
    let %22: (int32, int32, int32) = call f3()
    let %23: int32 = load int32 field(%22, 0 * @(@32, @(@32, @(@32, @32))))
    let %24: int32 = load int32 field(%22, 1 * @(@32, @(@32, @(@32, @32))))
    let %25: int32 = load int32 field(%22, 2 * @(@32, @(@32, @(@32, @32))))
    let %26: unit = ext_call minimbt_print_int(%23)
    let %27: unit = ext_call minimbt_print_int(%24)
    let %28: unit = ext_call minimbt_print_int(%25)
    return ()
  }
}
.fn T$start_10 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn return_i_d_i4l1_1 #f1 : fn() -> (int32, double, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, double, int32) heap(3)> <- [0] = 1, [1] = 2, [2] = 3
    return f1.m0
  }
}
.fn return_i_i_i12l3_3 #f3 : fn() -> (int32, int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32) heap(3)> <- [0] = 1, [1] = 2, [2] = 3
    return f3.m0
  }
}
.fn return_d_i_i8l2_2 #f2 : fn() -> (double, int32, int32)
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (double, int32, int32) heap(3)> <- [0] = 2, [1] = 3, [2] = 4
    return f2.m0
  }
}
.thunk ::0 start
