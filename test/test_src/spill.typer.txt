let rec f: (a: Int, b: Int, c: Int, d: Int) -> Int {
  let e: Var(Int) = Var("a") + Var("b")
  let f: Var(Int) = Var("a") + Var("c")
  let g: Var(Int) = Var("a") + Var("d")
  let h: Var(Int) = Var("b") + Var("c")
  let i: Var(Int) = Var("b") + Var("d")
  let j: Var(Int) = Var("c") + Var("d")
  let k: Var(Int) = Var("e") + Var("f")
  let l: Var(Int) = Var("e") + Var("g")
  let m: Var(Int) = Var("e") + Var("h")
  let n: Var(Int) = Var("e") + Var("i")
  let o: Var(Int) = Var("e") + Var("j")
  let p: Var(Int) = Var("f") + Var("g")
  let q: Var(Int) = Var("f") + Var("h")
  let r: Var(Int) = Var("f") + Var("i")
  let s: Var(Int) = Var("f") + Var("j")
  let t: Var(Int) = Var("g") + Var("h")
  let u: Var(Int) = Var("g") + Var("i")
  let v: Var(Int) = Var("g") + Var("j")
  let w: Var(Int) = Var("h") + Var("i")
  let x: Var(Int) = Var("h") + Var("j")
  let y: Var(Int) = Var("i") + Var("j")
  let aa: Var(Int) = Var("k") + Var("l")
  let ab: Var(Int) = Var("k") + Var("m")
  let ac: Var(Int) = Var("k") + Var("n")
  let ad: Var(Int) = Var("k") + Var("o")
  let ae: Var(Int) = Var("k") + Var("p")
  let af: Var(Int) = Var("k") + Var("q")
  let ag: Var(Int) = Var("k") + Var("r")
  let ah: Var(Int) = Var("k") + Var("s")
  let ai: Var(Int) = Var("k") + Var("t")
  let aj: Var(Int) = Var("k") + Var("u")
  let ak: Var(Int) = Var("k") + Var("v")
  let al: Var(Int) = Var("k") + Var("w")
  let am: Var(Int) = Var("k") + Var("x")
  let an: Var(Int) = Var("k") + Var("y")
  let z: Var(Int) = Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)) + Var("an")
  Neg(Var("z"))
}
let rec main: () -> Var(Unit) {
  Apply(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)]), ])
}
Unit
