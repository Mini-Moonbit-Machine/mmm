// [Asm] pre_assigned_registers: FnParam(fref=f6, fpref=$f.0) -> v2, Insn(iref=%9) -> v17, FreeVar(fvref=^1) -> v3, Insn(iref=%8) -> v15, FreeVar(fvref=^2) -> v4, Insn(iref=%10) -> v18, FreeVar(fvref=^4) -> v6, Self(fref=f6) -> v0, Insn(iref=%5) -> v12, Insn(iref=%0) -> v7, Insn(iref=%4) -> v11, Insn(iref=%3) -> v10, Insn(iref=%7) -> v14, BlockParam(bref=b5, bpref=$b.0) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v19, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%2), FreeVar(fvref=^3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f6, fpref=$f.0), Insn(iref=%0)])
// [Asm] defs: [v16]
// [Asm] live_set: [v0, v16, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v16, v2]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [zero]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, zero, v0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v0, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v17]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v17, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v17, v20]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v20]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v0, v11, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v0, v4, v6, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v0, v4, v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v14, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, v14, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v0, a1, a0, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v0, a2, a1, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v0, v15, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v0, v16, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v0, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v0, v4, v6, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v0, v4, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of l26_6"];
// [Asm]   r0 [label="v16 ← a0", color=green];
// [Asm]   r33 [label="v9 ← a0", color=green];
// [Asm]   r9 [label="v6 ← a3", color=green];
// [Asm]   r26 [label="v18 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a0", color=green];
// [Asm]   r13 [label="v20 ← a1", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v14 ← a2", color=green];
// [Asm]   r7 [label="v4 ← a1", color=green];
// [Asm]   r10 [label="v7 ← a0", color=green];
// [Asm]   r8 [label="v5 ← a2", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r32 [label="v28 ← a0", color=green];
// [Asm]   r24 [label="a6", color=blue];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r31 [label="v27 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="s10", color=blue];
// [Asm]   r20 [label="a2", color=blue];
// [Asm]   r23 [label="a5", color=blue];
// [Asm]   r3 [label="v19 ← a0", color=green];
// [Asm]   r27 [label="v11 ← a0", color=green];
// [Asm]   r1 [label="v0 ← s0", color=green];
// [Asm]   r28 [label="v12 ← a0", color=green];
// [Asm]   r11 [label="v17 ← a0", color=green];
// [Asm]   r22 [label="a4", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r30 [label="v15 ← a0", color=green];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r2 [label="v2 ← s1", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a1", color=blue];
// [Asm]   r21 [label="a3", color=blue];
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r8 -- r31;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r29;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r32;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r5 -- r29;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r8 -- r33;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r4 -- r31;
// [Asm]   r6 -- r8;
// [Asm]   r1 -- r31;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r24;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r1 -- r29;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r27;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r30;
// [Asm]   r9 -- r10;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r25;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r27;
// [Asm]   r2 -- r23;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v16-> 1:v0-> 2:v2-> 4:zero-> 6:v3-> 7:v4-> 8:v5-> 9:v6-> 10:v7-> 31:v27-> 32:v28-> 33:v9-> 27:v11-> 28:v12-> 29:v14-> 5:a0-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a1-> 20:a2-> 21:a3-> 22:a4-> 23:a5-> 24:a6-> 25:a7-> 30:v15-> 11:v17-> 13:v20-> 12:s10-> 3:v19-> 26:v18"
// [Asm]   comment = "v16<-a0;v9<-a0;v6<-a3;v18<-a0;v3<-a0;v20<-a1;v14<-a2;v4<-a1;v7<-a0;v5<-a2;v28<-a0;v27<-a0;v19<-a0;v11<-a0;v0<-s0;v12<-a0;v17<-a0;v15<-a0;v2<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of l26_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   j .l26_6_5 ->   j .l26_6_5
// [Asm] subst   mv v19, zero ->   mv a0, zero
// [Asm] subst   j .l26_6_6 ->   j .l26_6_6
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   lw v3, 8(v0) ->   lw a0, 8(s0)
// [Asm] subst   ld v4, 16(v0) ->   ld a1, 16(s0)
// [Asm] subst   lw v5, 24(v0) ->   lw a2, 24(s0)
// [Asm] subst   ld v6, 32(v0) ->   ld a3, 32(s0)
// [Asm] subst   addi v7, v3, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v7, v2, .l26_6_2 ->   blt a0, s1, .l26_6_2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v17, v2, 1 ->   addi a0, s1, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v20, 0(v0) ->   ld a1, 0(s0)
// [Asm] subst   jalr v20 ->   jalr a1
// [Asm] subst   lw v11, 0(v6) ->   lw a0, 0(a3)
// [Asm] subst   addi v12, v11, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v12, 0(v6) ->   sw a0, 0(a3)
// [Asm] subst   lw v14, 0(v6) ->   lw a2, 0(a3)
// [Asm] subst   mv a0, v4 ->   mv a0, a1
// [Asm] subst   mv a1, v14 ->   mv a1, a2
// [Asm] subst   mv a2, v2 ->   mv a2, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   slliw v27, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v28, v4, v27 ->   add a0, a1, a0
// [Asm] subst   lw v9, 0(v28) ->   lw a0, 0(a0)
// [Asm] subst   blt v5, v9, .l26_6_4 ->   blt a2, a0, .l26_6_4
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, Self(fref=f12) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v6, Insn(iref=%6) -> v11, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f12, fpref=$f.0), Insn(iref=%0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v0, v4, v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v0, v19, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v0, v10]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v10]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v10, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v0, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of output97_12"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v13 ← a1", color=green];
// [Asm]   r3 [label="v2 ← s1", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="zero", color=blue];
// [Asm]   r27 [label="v3 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v19 ← a0", color=green];
// [Asm]   r1 [label="v0 ← s0", color=green];
// [Asm]   r28 [label="v5 ← a0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="v7 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r25 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a1", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v8 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r2 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r28;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r28;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r27;
// [Asm]   comment = "0:v18-> 1:v0-> 2:v4-> 3:v2-> 26:zero-> 27:v3-> 28:v5-> 4:v19-> 5:v7-> 6:a0-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v8-> 20:v9-> 21:v10-> 23:v13-> 22:s10-> 24:v11-> 25:v12"
// [Asm]   comment = "v18<-a0;v9<-a0;v13<-a1;v2<-s1;v3<-a0;v19<-a0;v0<-s0;v5<-a0;v7<-a0;v11<-a0;v12<-a0;v4<-a1;v8<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of output97_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v18, v2, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v19, v4, v18 ->   add a0, a1, a0
// [Asm] subst   lw v7, 0(v19) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   addi v10, v2, 1 ->   addi a0, s1, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v13, 0(v0) ->   ld a1, 0(s0)
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   lw v3, 8(v0) ->   lw a0, 8(s0)
// [Asm] subst   ld v4, 16(v0) ->   ld a1, 16(s0)
// [Asm] subst   addi v5, v3, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v5, v2, .output97_12_2 ->   blt a0, s1, .output97_12_2
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .output97_12_3 ->   j .output97_12_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%9) -> v16, Insn(iref=%8) -> v15, Insn(iref=%10) -> v17, Mem(fref=f1, mref=m0) -> v5, Insn(iref=%5) -> v12, Insn(iref=%0) -> v7, Insn(iref=%4) -> v11, Insn(iref=%3) -> v10, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> v14, FnParam(fref=f1, fpref=$f.2) -> v4, Insn(iref=%2) -> v9, Insn(iref=%1) -> v8, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v6, Insn(iref=%6) -> v13
// [Asm] defs: []
// [Asm] live_set: [a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v2, v4, s11, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v2, v4, v32, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v7, v8, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v2, v7, v8, v4, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v7, v8, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v7, v8, v4, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v2, v25, v5, v7, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v7, v4, v6, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v5, v27, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v4, v5, v6, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v4, v5, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, v23, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, a0, v23, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v4, v5, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, v15, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, v5, a1, a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of partition14_1"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r33 [label="v17 ← a0", color=green];
// [Asm]   r9 [label="v8 ← a2", color=green];
// [Asm]   r26 [label="a6", color=blue];
// [Asm]   r6 [label="v31 ← a1", color=green];
// [Asm]   r13 [label="v6 ← a2", color=green];
// [Asm]   r4 [label="v3 ← a0", color=green];
// [Asm]   r29 [label="v12 ← a0", color=green];
// [Asm]   r7 [label="v32 ← a1", color=green];
// [Asm]   r10 [label="v28 ← a3", color=green];
// [Asm]   r8 [label="v7 ← a1", color=green];
// [Asm]   r5 [label="v4 ← s1", color=green];
// [Asm]   r24 [label="a4", color=blue];
// [Asm]   r32 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="s10", color=blue];
// [Asm]   r31 [label="v15 ← a1", color=green];
// [Asm]   r17 [label="a0", color=blue];
// [Asm]   r12 [label="v25 ← a2", color=green];
// [Asm]   r20 [label="t2", color=blue];
// [Asm]   r23 [label="a3", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="a7", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r11 [label="v5 ← s2", color=green];
// [Asm]   r22 [label="t4", color=blue];
// [Asm]   r14 [label="v27 ← a3", color=green];
// [Asm]   r30 [label="v13 ← a0", color=green];
// [Asm]   r25 [label="a5", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v23 ← a1", color=green];
// [Asm]   r18 [label="t0", color=blue];
// [Asm]   r19 [label="t1", color=blue];
// [Asm]   r21 [label="t3", color=blue];
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r17 -- r21;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r28;
// [Asm]   r0 -- r25;
// [Asm]   r11 -- r31;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r5 -- r29;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r9;
// [Asm]   r17 -- r22;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r17 -- r31;
// [Asm]   r8 -- r14;
// [Asm]   r17 -- r27;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r0 -- r24;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r17 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r11 -- r23;
// [Asm]   r17 -- r24;
// [Asm]   r11 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r31;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r13 -- r14;
// [Asm]   r0 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r30;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r0 -- r27;
// [Asm]   r0 -- r20;
// [Asm]   r11 -- r28;
// [Asm]   r11 -- r21;
// [Asm]   r11 -- r29;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 5:v4-> 11:v5-> 17:a0-> 4:v3-> 16:v23-> 3:s11-> 8:v7-> 9:v8-> 10:v28-> 12:v25-> 13:v6-> 14:v27-> 6:v31-> 7:v32-> 15:s10-> 18:t0-> 19:t1-> 20:t2-> 21:t3-> 22:t4-> 23:a3-> 24:a4-> 25:a5-> 26:a6-> 27:a7-> 31:v15-> 28:v11-> 29:v12-> 30:v13-> 32:v16-> 33:v17"
// [Asm]   comment = "v2<-s0;v17<-a0;v8<-a2;v31<-a1;v6<-a2;v3<-a0;v12<-a0;v32<-a1;v28<-a3;v7<-a1;v4<-s1;v16<-a0;v15<-a1;v25<-a2;v11<-a0;v5<-s2;v27<-a3;v13<-a0;v23<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of partition14_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   mv v4, a2 ->   mv s1, a2
// [Asm] subst   slliw v31, v4, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v32, v2, v31 ->   add a1, s0, a1
// [Asm] subst   lw v7, 0(v32) ->   lw a1, 0(a1)
// [Asm] subst   addi v8, v3, -1 ->   addi a2, a0, -1
// [Asm] subst   addi v28, s11, -4 ->   addi a3, s11, -4
// [Asm] subst   andi v5, v28, -8 ->   andi s2, a3, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s2
// [Asm] subst   sw v8, 0(v5) ->   sw a2, 0(s2)
// [Asm] subst   addi v25, s11, -40 ->   addi a2, s11, -40
// [Asm] subst   andi v6, v25, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a2
// [Asm] subst   la v27, l26_6 ->   la a3, l26_6
// [Asm] subst   sd v27, 0(v6) ->   sd a3, 0(a2)
// [Asm] subst   sd v4, 8(v6) ->   sd s1, 8(a2)
// [Asm] subst   sd v2, 16(v6) ->   sd s0, 16(a2)
// [Asm] subst   sd v7, 24(v6) ->   sd a1, 24(a2)
// [Asm] subst   sd v5, 32(v6) ->   sd s2, 32(a2)
// [Asm] subst   mv s10, v6 ->   mv s10, a2
// [Asm] subst   ld v23, 0(v6) ->   ld a1, 0(a2)
// [Asm] subst   jalr v23 ->   jalr a1
// [Asm] subst   lw v12, 0(v5) ->   lw a0, 0(s2)
// [Asm] subst   addi v13, v12, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v13, 0(v5) ->   sw a0, 0(s2)
// [Asm] subst   lw v15, 0(v5) ->   lw a1, 0(s2)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, v4 ->   mv a2, s1
// [Asm] subst   call swap1_0 ->   call swap1_0
// [Asm] subst   lw v17, 0(v5) ->   lw a0, 0(s2)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f10, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v7, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v6, Self(fref=f10) -> v0, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f10, fpref=$f.0), Insn(iref=%0)])
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, v4, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v0, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v0, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v7, v0, v4, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v7, v0, v16, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v0, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v9]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v12, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v0, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, zero, v2]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of input79_10"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r23 [label="v10 ← a0", color=green];
// [Asm]   r3 [label="v0 ← s0", color=green];
// [Asm]   r9 [label="t4", color=blue];
// [Asm]   r26 [label="v5 ← a0", color=green];
// [Asm]   r6 [label="t1", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v4 ← s1", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="t2", color=blue];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v12 ← a1", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t3", color=blue];
// [Asm]   r5 [label="v2 ← s2", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r24 [label="zero", color=blue];
// [Asm]   r25 [label="v3 ← a0", color=green];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v15 ← a1", color=green];
// [Asm]   r19 [label="v16 ← a1", color=green];
// [Asm]   r17 [label="v7 ← a0", color=green];
// [Asm]   r21 [label="s10", color=blue];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r24 -- r26;
// [Asm]   r17 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v11-> 1:a0-> 2:t0-> 3:v0-> 4:v4-> 5:v2-> 6:t1-> 7:t2-> 8:t3-> 9:t4-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v7-> 18:v15-> 19:v16-> 24:zero-> 25:v3-> 26:v5-> 20:v9-> 22:v12-> 21:s10-> 23:v10"
// [Asm]   comment = "v11<-a0;v9<-a0;v10<-a0;v0<-s0;v5<-a0;v4<-s1;v12<-a1;v2<-s2;v3<-a0;v15<-a1;v16<-a1;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of input79_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   j .input79_10_3 ->   j .input79_10_3
// [Asm] subst   ret ->   ret
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   slliw v15, v2, 2 ->   slliw a1, s2, 2
// [Asm] subst   add v16, v4, v15 ->   add a1, s1, a1
// [Asm] subst   sw v7, 0(v16) ->   sw a0, 0(a1)
// [Asm] subst   addi v9, v2, 1 ->   addi a0, s2, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v12, 0(v0) ->   ld a1, 0(s0)
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   lw v3, 8(v0) ->   lw a0, 8(s0)
// [Asm] subst   ld v4, 16(v0) ->   ld s1, 16(s0)
// [Asm] subst   addi v5, v3, -1 ->   addi a0, a0, -1
// [Asm] subst   blt v5, v2, .input79_10_2 ->   blt a0, s2, .input79_10_2
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v6, Self(fref=f2) -> v0, Insn(iref=%6) -> v11, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%5) -> v10, FnParam(fref=f2, fpref=$f.2) -> v4, Insn(iref=%0) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), Insn(iref=%0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v4, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v4, a1, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v4, a2, a1, a0, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v3, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v8, v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v8, v3, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, v8, v3, v4, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v7, v8, v4, a1, a0, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v7, v4, a2, a1, a0, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, v4, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v10, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v10, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of quicksort59_2"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v11 ← a0", color=green];
// [Asm]   r23 [label="v5 ← a0", color=green];
// [Asm]   r3 [label="v2 ← s2", color=green];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="v3 ← s0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r22 [label="zero", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="v4 ← s1", color=green];
// [Asm]   r16 [label="v7 ← s3", color=green];
// [Asm]   r18 [label="v9 ← a0", color=green];
// [Asm]   r19 [label="v10 ← a1", color=green];
// [Asm]   r21 [label="v12 ← a0", color=green];
// [Asm]   r17 [label="v8 ← a2", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r13 -- r16;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r18;
// [Asm]   r16 -- r17;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   comment = "0:a0-> 1:v3-> 2:v4-> 3:v2-> 4:a1-> 5:a2-> 16:v7-> 17:v8-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 18:v9-> 19:v10-> 22:zero-> 23:v5-> 20:v11-> 21:v12"
// [Asm]   comment = "v11<-a0;v5<-a0;v2<-s2;v3<-s0;v4<-s1;v7<-s3;v9<-a0;v10<-a1;v12<-a0;v8<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of quicksort59_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .quicksort59_2_3 ->   j .quicksort59_2_3
// [Asm] subst   mv a0, v2 ->   mv a0, s2
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a2, v4 ->   mv a2, s1
// [Asm] subst   call partition14_1 ->   call partition14_1
// [Asm] subst   mv v7, a0 ->   mv s3, a0
// [Asm] subst   addi v8, v7, -1 ->   addi a2, s3, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s2
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   call quicksort59_2 ->   call quicksort59_2
// [Asm] subst   addi v10, v7, 1 ->   addi a1, s3, 1
// [Asm] subst   mv a0, v2 ->   mv a0, s2
// [Asm] subst   mv a2, v4 ->   mv a2, s1
// [Asm] subst   call quicksort59_2 ->   call quicksort59_2
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   mv v3, a1 ->   mv s0, a1
// [Asm] subst   mv v4, a2 ->   mv s1, a2
// [Asm] subst   addi v5, v4, -1 ->   addi a0, s1, -1
// [Asm] subst   blt v5, v3, .quicksort59_2_2 ->   blt a0, s0, .quicksort59_2_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v9, Insn(iref=%3) -> v8, Mem(fref=f3, mref=m0) -> v2, Insn(iref=%7) -> v12, Mem(fref=f3, mref=m1) -> v3, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Insn(iref=%6) -> v11, Mem(fref=f3, mref=m2) -> v4, Insn(iref=%5) -> v10, Self(fref=f3) -> v0, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, s11]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v5, zero, v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a1, s11, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, a1, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v5, zero, s11, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v3, v5, zero, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v20, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v20, s11, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, s11, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, s11, v9, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, a1, s11, v9, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, a1, s11, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, s11, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v5, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v4, v5, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main75_3"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r20 [label="v3 ← a1", color=green];
// [Asm]   r23 [label="v20 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v10 ← a0", color=green];
// [Asm]   r27 [label="v15 ← a0", color=green];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r29 [label="v17 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v4 ← a0", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r30 [label="v13 ← a1", color=green];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v5 ← s0", color=green];
// [Asm]   r24 [label="v8 ← a0", color=green];
// [Asm]   r25 [label="v9 ← a2", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v25 ← a0", color=green];
// [Asm]   r18 [label="v2 ← s1", color=green];
// [Asm]   r19 [label="v22 ← a0", color=green];
// [Asm]   r31 [label="v12 ← a0", color=green];
// [Asm]   r21 [label="v24 ← a0", color=green];
// [Asm]   r17 [label="v26 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r27;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r18 -- r28;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r15 -- r28;
// [Asm]   r14 -- r15;
// [Asm]   r2 -- r23;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r15 -- r26;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r18 -- r29;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r8 -- r25;
// [Asm]   r15 -- r27;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r18 -- r19;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r1 -- r25;
// [Asm]   r3 -- r14;
// [Asm]   r15 -- r24;
// [Asm]   r2 -- r30;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r18 -- r23;
// [Asm]   comment = "0:t0-> 1:zero-> 2:a0-> 3:s11-> 15:v5-> 18:v2-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 25:v9-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 23:v20-> 21:v24-> 20:v3-> 22:s10-> 24:v8-> 26:v10-> 16:v25-> 19:v22-> 27:v15-> 28:v4-> 29:v17-> 17:v26-> 30:v13-> 31:v12"
// [Asm]   comment = "v3<-a1;v20<-a1;v10<-a0;v15<-a0;v17<-a1;v4<-a0;v13<-a1;v5<-s0;v8<-a0;v9<-a2;v25<-a0;v2<-s1;v22<-a0;v12<-a0;v24<-a0;v26<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main75_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_int ->   call minimbt_read_int
// [Asm] subst   mv v5, a0 ->   mv s0, a0
// [Asm] subst   slliw v25, v5, 2 ->   slliw a0, s0, 2
// [Asm] subst   sub v26, s11, v25 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v26, -8 ->   andi s1, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s1
// [Asm] subst   mv a1, v5 ->   mv a1, s0
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v22, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v3, v22, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v24, input79_10 ->   la a0, input79_10
// [Asm] subst   sd v24, 0(v3) ->   sd a0, 0(a1)
// [Asm] subst   sd v5, 8(v3) ->   sd s0, 8(a1)
// [Asm] subst   sd v2, 16(v3) ->   sd s1, 16(a1)
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v20, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v20 ->   jalr a1
// [Asm] subst   addi v9, v5, -1 ->   addi a2, s0, -1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   call quicksort59_2 ->   call quicksort59_2
// [Asm] subst   addi v15, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v4, v15, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a0
// [Asm] subst   la v17, output97_12 ->   la a1, output97_12
// [Asm] subst   sd v17, 0(v4) ->   sd a1, 0(a0)
// [Asm] subst   sd v5, 8(v4) ->   sd s0, 8(a0)
// [Asm] subst   sd v2, 16(v4) ->   sd s1, 16(a0)
// [Asm] subst   mv s10, v4 ->   mv s10, a0
// [Asm] subst   ld v13, 0(v4) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main75_3 ->   call main75_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Insn(iref=%3) -> v8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%2) -> v7
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v4, v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v4, v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v4, v5, zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v4, v5, v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, v5, v6, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v4, v5, v6, v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of swap1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="v13 ← a4", color=green];
// [Asm]   r6 [label="v16 ← a3", color=green];
// [Asm]   r13 [label="v12 ← a1", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v6 ← a4", color=green];
// [Asm]   r7 [label="v17 ← a3", color=green];
// [Asm]   r10 [label="v14 ← a4", color=green];
// [Asm]   r14 [label="v9 ← a1", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v11 ← a1", color=green];
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r5 -- r10;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r14;
// [Asm]   r0 -- r7;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v4-> 6:v16-> 7:v17-> 8:v5-> 9:v13-> 10:v14-> 11:v6-> 12:v11-> 13:v12-> 14:v9-> 15:v10-> 2:a1-> 16:a0"
// [Asm]   comment = "v2<-a0;v13<-a4;v16<-a3;v12<-a1;v3<-a1;v6<-a4;v17<-a3;v14<-a4;v9<-a1;v5<-a3;v4<-a2;v10<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of swap1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v16, v3, 2 ->   slliw a3, a1, 2
// [Asm] subst   add v17, v2, v16 ->   add a3, a0, a3
// [Asm] subst   lw v5, 0(v17) ->   lw a3, 0(a3)
// [Asm] subst   slliw v13, v4, 2 ->   slliw a4, a2, 2
// [Asm] subst   add v14, v2, v13 ->   add a4, a0, a4
// [Asm] subst   lw v6, 0(v14) ->   lw a4, 0(a4)
// [Asm] subst   slliw v11, v3, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v12, v2, v11 ->   add a1, a0, a1
// [Asm] subst   sw v6, 0(v12) ->   sw a4, 0(a1)
// [Asm] subst   slliw v9, v4, 2 ->   slliw a1, a2, 2
// [Asm] subst   add v10, v2, v9 ->   add a0, a0, a1
// [Asm] subst   sw v5, 0(v10) ->   sw a3, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] output97_12:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v2, v0, v5, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v0, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .output97_12_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, v0, zero, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, v0, v4, zero, v2]
// [Asm]   addi v5, v3, -1  # live: [v0, v4, v5, zero, v2]
// [Asm] # control
// [Asm]   blt v5, v2, .output97_12_2  # live: [v0, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v18, v10, a0, v13, v7, v19, v0, v4, v2], upward_exposed: [v0, v4, v2], params_defs: []
// [Asm] # live_in: [v0, v4, v2], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .output97_12_1:
// [Asm]   slliw v18, v2, 2  # live: [v0, v4, v18, v2]
// [Asm]   add v19, v4, v18  # live: [v0, v19, v2]
// [Asm]   lw v7, 0(v19)  # live: [v7, v0, v2]
// [Asm]   # save_ctx2  # live: [v7, v0, v2]
// [Asm]   mv a0, v7  # live: [v0, a0, v2]
// [Asm]   call minimbt_print_int  # live: [v0, a0, v2]
// [Asm]   mv v8, a0  # live: [v0, v2]
// [Asm]   # restore_ctx2  # live: [v0, v2]
// [Asm]   # save_ctx2  # live: [v0, v2]
// [Asm]   call minimbt_print_endline  # live: [v0, a0, v2]
// [Asm]   mv v9, a0  # live: [v0, v2]
// [Asm]   # restore_ctx2  # live: [v0, v2]
// [Asm]   addi v10, v2, 1  # live: [v0, v10]
// [Asm]   mv s10, v0  # live: [v0, v10]
// [Asm]   ld v13, 0(v0)  # live: [v10, v13]
// [Asm]   # save_ctx2  # live: [v10, v13]
// [Asm]   mv a0, v10  # live: [a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .output97_12_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .output97_12_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .output97_12_3  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] quicksort59_2:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [a2, v4, a1, v5, a0, v3], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .quicksort59_2_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm]   addi v5, v4, -1  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   blt v5, v3, .quicksort59_2_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v10, a0, v7, v8, v4, a2, a1, v3], upward_exposed: [v3, v4, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .quicksort59_2_1:
// [Asm]   # save_ctx2  # live: [v3, v4, v2]
// [Asm]   mv a0, v2  # live: [v3, v4, a0, v2]
// [Asm]   mv a1, v3  # live: [v3, v4, a1, a0, v2]
// [Asm]   mv a2, v4  # live: [v3, v4, a2, a1, a0, v2]
// [Asm]   call partition14_1  # live: [v3, v4, a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v3, v4, v2]
// [Asm]   # restore_ctx2  # live: [v7, v3, v4, v2]
// [Asm]   addi v8, v7, -1  # live: [v7, v8, v3, v4, v2]
// [Asm]   # save_ctx2  # live: [v7, v8, v3, v4, v2]
// [Asm]   mv a0, v2  # live: [v7, v8, v3, v4, a0, v2]
// [Asm]   mv a1, v3  # live: [v7, v8, v4, a1, a0, v2]
// [Asm]   mv a2, v8  # live: [v7, v4, a2, a1, a0, v2]
// [Asm]   call quicksort59_2  # live: [v7, v4, a0, v2]
// [Asm]   mv v9, a0  # live: [v7, v4, v2]
// [Asm]   # restore_ctx2  # live: [v7, v4, v2]
// [Asm]   addi v10, v7, 1  # live: [v4, v10, v2]
// [Asm]   # save_ctx2  # live: [v4, v10, v2]
// [Asm]   mv a0, v2  # live: [v4, v10, a0]
// [Asm]   mv a1, v10  # live: [v4, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, a1, a0]
// [Asm]   call quicksort59_2  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .quicksort59_2_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .quicksort59_2_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .quicksort59_2_3  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] input79_10:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v2, v0, v5, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v0, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .input79_10_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, v0, zero, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, v0, v4, zero, v2]
// [Asm]   addi v5, v3, -1  # live: [v0, v4, v5, zero, v2]
// [Asm] # control
// [Asm]   blt v5, v2, .input79_10_2  # live: [v0, v4, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v16, v10, a0, v7, v0, v4, v15, v12, v9, v2], upward_exposed: [v0, v4, v2], params_defs: []
// [Asm] # live_in: [v0, v4, v2], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .input79_10_1:
// [Asm]   # save_ctx2  # live: [v0, v4, v2]
// [Asm]   call minimbt_read_int  # live: [v0, v4, a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v0, v4, v2]
// [Asm]   # restore_ctx2  # live: [v7, v0, v4, v2]
// [Asm]   slliw v15, v2, 2  # live: [v7, v0, v4, v15, v2]
// [Asm]   add v16, v4, v15  # live: [v7, v0, v16, v2]
// [Asm]   sw v7, 0(v16)  # live: [v0, v2]
// [Asm]   addi v9, v2, 1  # live: [v0, v9]
// [Asm]   mv s10, v0  # live: [v0, v9]
// [Asm]   ld v12, 0(v0)  # live: [v12, v9]
// [Asm]   # save_ctx2  # live: [v12, v9]
// [Asm]   mv a0, v9  # live: [v12, a0]
// [Asm]   jalr v12  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .input79_10_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .input79_10_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm]   j .input79_10_3  # live: [v11]
// [Asm] 
// [Asm] # leaf false
// [Asm] main75_3:
// [Asm] # block info: defs: [v3, v25, t1, v26, v13, v22, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v20, v8, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, v24, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v2, v25, v5, a0, v26, v13, v22, a2, a1, v17, s11, v24, v12, v9, zero, v20, v4, v15, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main75_3_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   # save_ctx2  # live: [zero, s11]
// [Asm]   call minimbt_read_int  # live: [zero, a0, s11]
// [Asm]   mv v5, a0  # live: [v5, zero, s11]
// [Asm]   # restore_ctx2  # live: [v5, zero, s11]
// [Asm]   slliw v25, v5, 2  # live: [v25, v5, zero, s11]
// [Asm]   sub v26, s11, v25  # live: [v5, zero, v26]
// [Asm]   andi v2, v26, -8  # live: [v5, zero, v2]
// [Asm]   mv s11, v2  # live: [v5, zero, s11, v2]
// [Asm]   mv a1, v5  # live: [v5, zero, a1, s11, v2]
// [Asm]   mv a0, v2  # live: [v5, zero, a0, a1, s11, v2]
// [Asm]   mv a2, zero  # live: [v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti32  # live: [v5, zero, s11, v2]
// [Asm]   addi v22, s11, -24  # live: [v5, zero, v22, v2]
// [Asm]   andi v3, v22, -8  # live: [v3, v5, zero, v2]
// [Asm]   mv s11, v3  # live: [v3, v5, zero, s11, v2]
// [Asm]   la v24, input79_10  # live: [v3, v5, zero, s11, v24, v2]
// [Asm]   sd v24, 0(v3)  # live: [v3, v5, zero, s11, v2]
// [Asm]   sd v5, 8(v3)  # live: [v3, v5, zero, s11, v2]
// [Asm]   sd v2, 16(v3)  # live: [v3, v5, zero, s11, v2]
// [Asm]   mv s10, v3  # live: [v3, v5, zero, s11, v2]
// [Asm]   ld v20, 0(v3)  # live: [v5, zero, v20, s11, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v20, s11, v2]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v20, s11, v2]
// [Asm]   jalr v20  # live: [v5, zero, a0, s11, v2]
// [Asm]   mv v8, a0  # live: [v5, zero, s11, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, s11, v2]
// [Asm]   addi v9, v5, -1  # live: [v5, zero, s11, v9, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, s11, v9, v2]
// [Asm]   mv a0, v2  # live: [v5, zero, a0, s11, v9, v2]
// [Asm]   mv a1, zero  # live: [v5, zero, a0, a1, s11, v9, v2]
// [Asm]   mv a2, v9  # live: [v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call quicksort59_2  # live: [v5, s11, zero, a0, v2]
// [Asm]   mv v10, a0  # live: [v5, s11, zero, v2]
// [Asm]   # restore_ctx2  # live: [v5, s11, zero, v2]
// [Asm]   addi v15, s11, -24  # live: [v5, v15, zero, v2]
// [Asm]   andi v4, v15, -8  # live: [v4, v5, zero, v2]
// [Asm]   mv s11, v4  # live: [v4, v5, zero, v2]
// [Asm]   la v17, output97_12  # live: [v4, v5, v17, zero, v2]
// [Asm]   sd v17, 0(v4)  # live: [v4, v5, zero, v2]
// [Asm]   sd v5, 8(v4)  # live: [v4, zero, v2]
// [Asm]   sd v2, 16(v4)  # live: [v4, zero]
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v13, 0(v4)  # live: [v13, zero]
// [Asm]   # save_ctx2  # live: [v13, zero]
// [Asm]   mv a0, zero  # live: [a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v12, a0  # live: [v12]
// [Asm]   # restore_ctx2  # live: [v12]
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main75_3  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] partition14_1:
// [Asm] # block info: defs: [a1, s11, v28, fa1, fa2, ft6, v27, a4, fa6, a6, ft5, ft10, v6, ft4, v5, ft9, fa4, ft2, v17, a3, v31, a7, fa7, fa3, ft3, t2, v3, v25, t1, v16, v13, v7, v32, ft0, ft1, v12, v8, v4, ft7, v11, a5, a0, a2, s10, ft8, t3, t0, fa5, v23, fa0, t4, v15, v2], uses: [v2, v25, v5, a0, v13, v7, a2, v32, a1, v17, v12, s11, v31, v28, v27, v23, v8, v4, v6, v15, v3], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .partition14_1_0:
// [Asm]   # save_ctx1  # live: [a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, v3]
// [Asm]   slliw v31, v4, 2  # live: [v2, v4, s11, v31, v3]
// [Asm]   add v32, v2, v31  # live: [v2, v4, v32, s11, v3]
// [Asm]   lw v7, 0(v32)  # live: [v2, v7, v4, s11, v3]
// [Asm]   addi v8, v3, -1  # live: [v2, v7, v8, v4, s11, v3]
// [Asm]   addi v28, s11, -4  # live: [v2, v7, v8, v4, v28, v3]
// [Asm]   andi v5, v28, -8  # live: [v2, v5, v7, v8, v4, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, v7, v8, v4, s11, v3]
// [Asm]   sw v8, 0(v5)  # live: [v2, v5, v7, v4, s11, v3]
// [Asm]   addi v25, s11, -40  # live: [v2, v25, v5, v7, v4, v3]
// [Asm]   andi v6, v25, -8  # live: [v2, v5, v7, v4, v6, v3]
// [Asm]   mv s11, v6  # live: [v2, v5, v7, v4, v6, v3]
// [Asm]   la v27, l26_6  # live: [v2, v5, v27, v7, v4, v6, v3]
// [Asm]   sd v27, 0(v6)  # live: [v2, v5, v7, v4, v6, v3]
// [Asm]   sd v4, 8(v6)  # live: [v2, v5, v7, v4, v6, v3]
// [Asm]   sd v2, 16(v6)  # live: [v2, v5, v7, v4, v6, v3]
// [Asm]   sd v7, 24(v6)  # live: [v3, v4, v5, v6, v2]
// [Asm]   sd v5, 32(v6)  # live: [v3, v4, v5, v6, v2]
// [Asm]   mv s10, v6  # live: [v3, v4, v5, v6, v2]
// [Asm]   ld v23, 0(v6)  # live: [v3, v4, v5, v23, v2]
// [Asm]   # save_ctx2  # live: [v3, v4, v5, v23, v2]
// [Asm]   mv a0, v3  # live: [v4, v5, a0, v23, v2]
// [Asm]   jalr v23  # live: [v4, v5, a0, v2]
// [Asm]   mv v11, a0  # live: [v4, v5, v2]
// [Asm]   # restore_ctx2  # live: [v4, v5, v2]
// [Asm]   lw v12, 0(v5)  # live: [v4, v5, v12, v2]
// [Asm]   addi v13, v12, 1  # live: [v4, v5, v13, v2]
// [Asm]   sw v13, 0(v5)  # live: [v4, v5, v2]
// [Asm]   lw v15, 0(v5)  # live: [v4, v5, v15, v2]
// [Asm]   # save_ctx2  # live: [v4, v5, v15, v2]
// [Asm]   mv a0, v2  # live: [v4, v5, v15, a0]
// [Asm]   mv a1, v15  # live: [v4, v5, a1, a0]
// [Asm]   mv a2, v4  # live: [a2, v5, a1, a0]
// [Asm]   call swap1_0  # live: [v5, a0]
// [Asm]   mv v16, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm]   lw v17, 0(v5)  # live: [v17]
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] swap1_0:
// [Asm] # block info: defs: [v3, v11, v16, v5, v14, v10, v13, a0, v17, v12, v9, v4, v6, v2], uses: [v2, v11, v16, v14, v5, v10, v13, a0, a2, v17, a1, v12, v9, zero, v4, v6, v3], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .swap1_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, zero, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, zero, v2]
// [Asm]   slliw v16, v3, 2  # live: [v3, v4, v16, zero, v2]
// [Asm]   add v17, v2, v16  # live: [v3, v4, v17, zero, v2]
// [Asm]   lw v5, 0(v17)  # live: [v3, v4, v5, zero, v2]
// [Asm]   slliw v13, v4, 2  # live: [v3, v4, v5, zero, v13, v2]
// [Asm]   add v14, v2, v13  # live: [v3, v4, v5, v14, zero, v2]
// [Asm]   lw v6, 0(v14)  # live: [v3, v4, v5, v6, zero, v2]
// [Asm]   slliw v11, v3, 2  # live: [v11, v4, v5, v6, zero, v2]
// [Asm]   add v12, v2, v11  # live: [v4, v5, v6, v12, zero, v2]
// [Asm]   sw v6, 0(v12)  # live: [v4, v5, zero, v2]
// [Asm]   slliw v9, v4, 2  # live: [v5, zero, v9, v2]
// [Asm]   add v10, v2, v9  # live: [v5, v10, zero]
// [Asm]   sw v5, 0(v10)  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] l26_6:
// [Asm] # block info: defs: [v2, v5, v7, v0, v4, v6, v3], uses: [v7, v2, v0, s10, a0, v3], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v5, zero, v0, v4, v6, v2]
// [Asm] # block parameters: []
// [Asm] .l26_6_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0]
// [Asm]   mv v2, a0  # live: [zero, v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, zero, v0, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, zero, v0, v4, v2]
// [Asm]   lw v5, 24(v0)  # live: [v3, v5, zero, v0, v4, v2]
// [Asm]   ld v6, 32(v0)  # live: [v3, v5, zero, v0, v4, v6, v2]
// [Asm]   addi v7, v3, -1  # live: [v5, zero, v7, v0, v4, v6, v2]
// [Asm] # control
// [Asm]   blt v7, v2, .l26_6_2  # live: [v0, v4, v5, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v28, v9, v27], uses: [v4, v5, v28, v9, v27, v2], upward_exposed: [v4, v5, v2], params_defs: []
// [Asm] # live_in: [v5, zero, v0, v4, v6, v2], live_out: [v0, v4, v6, zero, v2]
// [Asm] # block parameters: []
// [Asm] .l26_6_1:
// [Asm]   slliw v27, v2, 2  # live: [v5, zero, v27, v0, v4, v6, v2]
// [Asm]   add v28, v4, v27  # live: [v5, zero, v0, v4, v6, v28, v2]
// [Asm]   lw v9, 0(v28)  # live: [v5, zero, v0, v4, v6, v9, v2]
// [Asm] # control
// [Asm]   blt v5, v9, .l26_6_4  # live: [v0, v4, v6, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v14, a0, v4, a2, a1, v6, v12, v15, v2], upward_exposed: [v4, v6, v2], params_defs: []
// [Asm] # live_in: [v0, v4, v6, v2], live_out: [v0, v16, v2]
// [Asm] # block parameters: []
// [Asm] .l26_6_3:
// [Asm]   lw v11, 0(v6)  # live: [v0, v11, v4, v6, v2]
// [Asm]   addi v12, v11, 1  # live: [v0, v4, v6, v12, v2]
// [Asm]   sw v12, 0(v6)  # live: [v0, v4, v6, v2]
// [Asm]   lw v14, 0(v6)  # live: [v0, v4, v14, v2]
// [Asm]   # save_ctx2  # live: [v0, v4, v14, v2]
// [Asm]   mv a0, v4  # live: [v0, v14, a0, v2]
// [Asm]   mv a1, v14  # live: [v0, a1, a0, v2]
// [Asm]   mv a2, v2  # live: [v0, a2, a1, a0, v2]
// [Asm]   call swap1_0  # live: [v0, a0, v2]
// [Asm]   mv v15, a0  # live: [v0, v15, v2]
// [Asm]   # restore_ctx2  # live: [v0, v15, v2]
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v0, v16, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v20, a4, fa6, a6, v19, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v0, v17, v18, a0, v20, v2], upward_exposed: [v0, v2], params_defs: [v16]
// [Asm] # live_in: [v0, v16, v2], live_out: [v19]
// [Asm] # block parameters: [v16]
// [Asm] .l26_6_5:
// [Asm]   addi v17, v2, 1  # live: [v0, v17]
// [Asm]   mv s10, v0  # live: [v0, v17]
// [Asm]   ld v20, 0(v0)  # live: [v17, v20]
// [Asm]   # save_ctx2  # live: [v17, v20]
// [Asm]   mv a0, v17  # live: [a0, v20]
// [Asm]   jalr v20  # live: [a0]
// [Asm]   mv v18, a0  # live: [v18]
// [Asm]   # restore_ctx2  # live: [v18]
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v19, a0], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: []
// [Asm] # block parameters: [v19]
// [Asm] .l26_6_6:
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .l26_6_2:
// [Asm] # control
// [Asm]   mv v19, zero  # live: [v19]
// [Asm]   j .l26_6_6  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v0, zero, v2], live_out: [v0, v16, v2]
// [Asm] # block parameters: []
// [Asm] .l26_6_4:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v0, v16, v2]
// [Asm]   j .l26_6_5  # live: [v0, v16, v2]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("swap", Unit), args: [("arr", Array(Int)), ("i", Int), ("j", Int)], body: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))}, LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Let(("tmp", Var({val: Some(Int)})), Get(Var("arr"), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)))
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j"))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit))
// [Knf] build_knf: Put(Var("arr"), Var("i"), Get(Var("arr"), Var("j")))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("j"), Var("tmp")), Unit)
// [Knf] build_knf: Put(Var("arr"), Var("j"), Var("tmp"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("tmp")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("partition", Int), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))}, LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("pivot", Var({val: Some(Int)})), Get(Var("arr"), Var("high")), Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))))
// [Knf] build_knf: Get(Var("arr"), Var("high"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("i", Var({val: Some(Array(Int))})), Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int))), LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))))
// [Knf] build_knf: Array(Int(1), Prim(Var("low"), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("low"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("l", Var({val: Some(Unit)})), args: [("j", Var({val: Some(Int)}))], body: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))))
// [Knf] build_knf: If(LE(Var("j"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit), App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: If(LE(Get(Var("arr"), Var("j")), Var("pivot")), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])), Unit)
// [Knf] build_knf: Get(Var("arr"), Var("j"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("pivot")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")]))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("j")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("l"), [Prim(Var("j"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Prim(Var("j"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("l"), [Var("low")]), Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))))
// [Knf] build_knf: App(Var("l"), [Var("low")])
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0))))
// [Knf] build_knf: Put(Var("i"), Int(0), Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("i"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")]), Get(Var("i"), Int(0)))
// [Knf] build_knf: App(Var("swap"), [Var("arr"), Get(Var("i"), Int(0)), Var("high")])
// [Knf] build_knf: Var("swap")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Get(Var("i"), Int(0))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("quicksort", Unit), args: [("arr", Array(Int)), ("low", Int), ("high", Int)], body: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("low"), Prim(Var("high"), Int(1), Sub, kind=Some(Int))), Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))), Unit)
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("high"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("pi", Var({val: Some(Int)})), App(Var("partition"), [Var("arr"), Var("low"), Var("high")]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])))
// [Knf] build_knf: App(Var("partition"), [Var("arr"), Var("low"), Var("high")])
// [Knf] build_knf: Var("partition")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))]), App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")]))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Var("low"), Prim(Var("pi"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("low")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Prim(Var("pi"), Int(1), Add, kind=Some(Int)), Var("high")])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Prim(Var("pi"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pi")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("high")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), App(Var("read_int"), []), Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))))
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("input", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("arr"), Var("i"), App(Var("read_int"), [])), App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("arr"), Var("i"), App(Var("read_int"), []))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("read_int"), [])
// [Knf] build_knf: App(Var("input"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("input"), [Int(0)]), Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))))
// [Knf] build_knf: App(Var("input"), [Int(0)])
// [Knf] build_knf: Var("input")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))]), LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)])))
// [Knf] build_knf: App(Var("quicksort"), [Var("arr"), Int(0), Prim(Var("len"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("quicksort")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("output", Var({val: Some(Unit)})), args: [("i", Int)], body: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)}, App(Var("output"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("i"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Get(Var("arr"), Var("i"))]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("print_int"), [Get(Var("arr"), Var("i"))])
// [Knf] build_knf: Get(Var("arr"), Var("i"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: App(Var("output"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("output"), [Int(0)])
// [Knf] build_knf: Var("output")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl output97_12
// [Main]   .type output97_12, @function
// [Main] # leaf false
// [Main] output97_12:
// [Main] .output97_12_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, s10
// [Main]   mv s1, a0
// [Main]   lw a0, 8(s0)
// [Main]   ld a1, 16(s0)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, s1, .output97_12_2
// [Main] 
// [Main] .output97_12_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   addi a0, s1, 1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .output97_12_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .output97_12_2:
// [Main]   mv a0, zero
// [Main]   j .output97_12_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl quicksort59_2
// [Main]   .type quicksort59_2, @function
// [Main] # leaf false
// [Main] quicksort59_2:
// [Main] .quicksort59_2_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s2, a0
// [Main]   mv s0, a1
// [Main]   mv s1, a2
// [Main]   addi a0, s1, -1
// [Main]   blt a0, s0, .quicksort59_2_2
// [Main] 
// [Main] .quicksort59_2_1:
// [Main]   mv a0, s2
// [Main]   mv a1, s0
// [Main]   mv a2, s1
// [Main]   call partition14_1
// [Main]   mv s3, a0
// [Main]   addi a2, s3, -1
// [Main]   mv a0, s2
// [Main]   mv a1, s0
// [Main]   call quicksort59_2
// [Main]   addi a1, s3, 1
// [Main]   mv a0, s2
// [Main]   mv a2, s1
// [Main]   call quicksort59_2
// [Main] 
// [Main] .quicksort59_2_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .quicksort59_2_2:
// [Main]   mv a0, zero
// [Main]   j .quicksort59_2_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl input79_10
// [Main]   .type input79_10, @function
// [Main] # leaf false
// [Main] input79_10:
// [Main] .input79_10_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, s10
// [Main]   mv s2, a0
// [Main]   lw a0, 8(s0)
// [Main]   ld s1, 16(s0)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, s2, .input79_10_2
// [Main] 
// [Main] .input79_10_1:
// [Main]   call minimbt_read_int
// [Main]   slliw a1, s2, 2
// [Main]   add a1, s1, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s2, 1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .input79_10_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .input79_10_2:
// [Main]   mv a0, zero
// [Main]   j .input79_10_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75_3
// [Main]   .type main75_3, @function
// [Main] # leaf false
// [Main] main75_3:
// [Main] .main75_3_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   call minimbt_read_int
// [Main]   mv s0, a0
// [Main]   slliw a0, s0, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s1, a0, -8
// [Main]   mv s11, s1
// [Main]   mv a1, s0
// [Main]   mv a0, s1
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -24
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, input79_10
// [Main]   sd a0, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd s1, 16(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   addi a2, s0, -1
// [Main]   mv a0, s1
// [Main]   mv a1, zero
// [Main]   call quicksort59_2
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, output97_12
// [Main]   sd a1, 0(a0)
// [Main]   sd s0, 8(a0)
// [Main]   sd s1, 16(a0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main75_3
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl partition14_1
// [Main]   .type partition14_1, @function
// [Main] # leaf false
// [Main] partition14_1:
// [Main] .partition14_1_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv a0, a1
// [Main]   mv s1, a2
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s0, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a2, a0, -1
// [Main]   addi a3, s11, -4
// [Main]   andi s2, a3, -8
// [Main]   mv s11, s2
// [Main]   sw a2, 0(s2)
// [Main]   addi a2, s11, -40
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, l26_6
// [Main]   sd a3, 0(a2)
// [Main]   sd s1, 8(a2)
// [Main]   sd s0, 16(a2)
// [Main]   sd a1, 24(a2)
// [Main]   sd s2, 32(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   jalr a1
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s2)
// [Main]   lw a1, 0(s2)
// [Main]   mv a0, s0
// [Main]   mv a2, s1
// [Main]   call swap1_0
// [Main]   lw a0, 0(s2)
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl swap1_0
// [Main]   .type swap1_0, @function
// [Main] # leaf true
// [Main] swap1_0:
// [Main] .swap1_0_0:
// [Main]   slliw a3, a1, 2
// [Main]   add a3, a0, a3
// [Main]   lw a3, 0(a3)
// [Main]   slliw a4, a2, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, a0, a1
// [Main]   sw a4, 0(a1)
// [Main]   slliw a1, a2, 2
// [Main]   add a0, a0, a1
// [Main]   sw a3, 0(a0)
// [Main]   mv a0, zero
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl l26_6
// [Main]   .type l26_6, @function
// [Main] # leaf false
// [Main] l26_6:
// [Main] .l26_6_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, s10
// [Main]   mv s1, a0
// [Main]   lw a0, 8(s0)
// [Main]   ld a1, 16(s0)
// [Main]   lw a2, 24(s0)
// [Main]   ld a3, 32(s0)
// [Main]   addi a0, a0, -1
// [Main]   blt a0, s1, .l26_6_2
// [Main] 
// [Main] .l26_6_1:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   blt a2, a0, .l26_6_4
// [Main] 
// [Main] .l26_6_3:
// [Main]   lw a0, 0(a3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a3)
// [Main]   lw a2, 0(a3)
// [Main]   mv a0, a1
// [Main]   mv a1, a2
// [Main]   mv a2, s1
// [Main]   call swap1_0
// [Main] 
// [Main] .l26_6_5:
// [Main]   addi a0, s1, 1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .l26_6_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .l26_6_2:
// [Main]   mv a0, zero
// [Main]   j .l26_6_6
// [Main] 
// [Main] .l26_6_4:
// [Main]   mv a0, zero
// [Main]   j .l26_6_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
