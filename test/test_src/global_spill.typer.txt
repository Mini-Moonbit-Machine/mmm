let x_1: Int = Int(1)
let x_2: Int = Var("x_1") + Int(1)
let x_3: Int = Var("x_2") + Int(1)
let x_4: Int = Var("x_3") + Int(1)
let x_5: Int = Var("x_4") + Int(1)
let x_6: Int = Var("x_5") + Int(1)
let x_7: Int = Var("x_6") + Int(1)
let x_8: Int = Var("x_7") + Int(1)
let x_9: Int = Var("x_8") + Int(1)
let x_10: Int = Var("x_9") + Int(1)
let x_11: Int = Var("x_10") + Int(1)
let x_12: Int = Var("x_11") + Int(1)
let x_13: Int = Var("x_12") + Int(1)
let x_14: Int = Var("x_13") + Int(1)
let x_15: Int = Var("x_14") + Int(1)
let dummy: Array[Int] = Array::make(Int(1), Int(0))
let rec do_nothing: () -> () -> Unit {
  let rec placeholder: () -> Unit {
    let _: Var(Unit) = Put Var("dummy")[Int(0)] = Int(0)
    Unit
  }
  Var(placeholder)
}
let rec print: (n: Int) -> Unit {
  if (Eq(Var("n"), Int(0))) then {
    Unit
  } else {
    let _: Var(Unit) = Apply(App(Var("do_nothing"), []), [])
    let _: Var(Unit) = Apply(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int)), ])
    Apply(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int)), ])
  }
}
let rec main: () -> Var(Unit) {
  Apply(Var("print"), [Int(10), ])
}
Unit
