let rec main.90: Var({val: Some(Unit)}) = () {
  let _67: Int = Int(1)
  let _68: Double = Double(2)
  let _17: Tuple([Int, Double]) = Tuple([_67, _68, ])
  let (i.18: Var({val: Some(Int)}), d.19: Var({val: Some(Double)})) = _17
  let _20: Unit = ExtApply(minimbt_print_int, [i.18, ])
  let _21: Int = ExtApply(minimbt_int_of_float, [d.19, ])
  let _22: Unit = ExtApply(minimbt_print_int, [_21, ])
  let _78: Int = Int(1)
  let _79: Double = Double(2)
  let _80: Int = Int(3)
  let _23: Tuple([Int, Double, Int]) = Tuple([_78, _79, _80, ])
  let (i.24: Var({val: Some(Int)}), d.25: Var({val: Some(Double)}), i2.26: Var({val: Some(Int)})) = _23
  let _27: Unit = ExtApply(minimbt_print_int, [i.24, ])
  let _28: Int = ExtApply(minimbt_int_of_float, [d.25, ])
  let _29: Unit = ExtApply(minimbt_print_int, [_28, ])
  let _30: Unit = ExtApply(minimbt_print_int, [i2.26, ])
  let _84: Double = Double(2)
  let _85: Int = Int(3)
  let _86: Int = Int(4)
  let _31: Tuple([Double, Int, Int]) = Tuple([_84, _85, _86, ])
  let (d.32: Var({val: Some(Double)}), i.33: Var({val: Some(Int)}), i2.34: Var({val: Some(Int)})) = _31
  let _35: Int = ExtApply(minimbt_int_of_float, [d.32, ])
  let _36: Unit = ExtApply(minimbt_print_int, [_35, ])
  let _37: Unit = ExtApply(minimbt_print_int, [i.33, ])
  let _38: Unit = ExtApply(minimbt_print_int, [i2.34, ])
  let _87: Int = Int(1)
  let _88: Int = Int(2)
  let _89: Int = Int(3)
  let _39: Tuple([Int, Int, Int]) = Tuple([_87, _88, _89, ])
  let (i.40: Var({val: Some(Int)}), i2.41: Var({val: Some(Int)}), i3.42: Var({val: Some(Int)})) = _39
  let _43: Unit = ExtApply(minimbt_print_int, [i.40, ])
  let _44: Unit = ExtApply(minimbt_print_int, [i2.41, ])
  let _45: Unit = ExtApply(minimbt_print_int, [i3.42, ])
  Unit
}
Apply(main.90, [])