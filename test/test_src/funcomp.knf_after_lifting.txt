let rec composed.21: Int = (x.5: Int, f.2: Fun([Int], Int), g.3: Fun([Int], Int)) {
  let _6: Int = Apply(f.2, [x.5, ])
  Apply(g.3, [_6, ])
}
let rec compose.20: Fun([Int], Int) = (f.2: Fun([Int], Int), g.3: Fun([Int], Int)) {
  let rec composed.22: Int = (x.5: Int) {
    Apply(composed.21, [x.5, f.2, g.3, ])
  }
  Var(composed.22)
}
let rec dbl.23: Int = (x.8: Int) {
  Add(x.8, x.8)
}
let rec inc.24: Int = (x.10: Int) {
  let _11: Int = Int(1)
  Add(x.10, _11)
}
let rec dec.25: Int = (x.13: Int) {
  let _14: Int = Int(1)
  Sub(x.13, _14)
}
let rec main.26: Var({val: Some(Unit)}) = () {
  let rec dbl.27: Int = (x.8: Int) {
    Apply(dbl.23, [x.8, ])
  }
  let rec dec.28: Int = (x.13: Int) {
    Apply(dec.25, [x.13, ])
  }
  let _16: Fun([Int], Int) = Apply(compose.20, [dbl.27, dec.28, ])
  let rec inc.29: Int = (x.10: Int) {
    Apply(inc.24, [x.10, ])
  }
  let h.17: Fun([Int], Int) = Apply(compose.20, [inc.29, _16, ])
  let _18: Int = Int(123)
  let _19: Int = Apply(h.17, [_18, ])
  ExtApply(minimbt_print_int, [_19, ])
}
Apply(main.26, [])