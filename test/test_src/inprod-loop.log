// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%9) -> fv21, Insn(iref=%8) -> fv20, Insn(iref=%10) -> fv22, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> fv8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v15, Insn(iref=%0) -> v10, Insn(iref=%4) -> fv14, Insn(iref=%3) -> fv13, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> fv4, Insn(iref=%7) -> fv19, BlockParam(bref=b5, bpref=$b.0) -> fv17, BlockParam(bref=b6, bpref=$b.0) -> fv18, Insn(iref=%2) -> fv12, Insn(iref=%1) -> fv11, Insn(iref=%11) -> v23, Insn(iref=%6) -> v16
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%7), Insn(iref=%8)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%5)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.3)])
// [Asm] defs: [v29]
// [Asm] live_set: [zero, v29, v7, v6, v15, fv14]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [zero, v30, v7, v6, v15, fv14]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [zero, v7, fv19, v6, v15, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v26]
// [Asm] live_set: [zero, v26, v7, fv19, v6, v15, fv14]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v27, v7, fv19, v6, v15, fv14]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [zero, fv20, v7, fv19, v6, v15, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, v6, v15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [v23]
// [Asm] live_set: [fv22, v6, zero, v23, v7]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, v6, zero, v23, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [fv22, v6, zero, v23, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, v6, zero, v23, fv8]
// [Asm] move_origin: [fv22]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: [v23]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [fv18]
// [Asm] live_set: [fv18]
// [Asm] move_origin: [fv17]
// [Asm] defined: fv18 is F
// [Asm] defs: []
// [Asm] live_set: [fv18]
// [Asm] move_origin: []
// [Asm] defs: [fv17]
// [Asm] live_set: [fv17]
// [Asm] move_origin: [fv14]
// [Asm] defined: fv17 is F
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0, fa0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa0, a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, fa0, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, a2, fv4, zero, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv4 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, fv4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v5, fv4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v6, v5, fv4, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, v6, v5, zero, fv8]
// [Asm] move_origin: [fv4]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [fv18]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv18 is F
// [Asm] defs: [v37]
// [Asm] live_set: [zero, v7, fv8, v37, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [zero, v7, fv8, v38, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11, v7, fv8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [v34]
// [Asm] live_set: [zero, fv11, v7, fv8, v6, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [zero, fv11, v7, fv8, v35, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, fv8, fv12, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v6, fv14, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v15, fv14, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v15, fv14, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv18]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inprod1l0_0"];
// [Asm]   r0 [label="v29 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a2", color=green];
// [Asm]   r9 [label="v9 ← a0", color=green];
// [Asm]   r6 [label="v26 ← a0", color=green];
// [Asm]   r13 [label="v3 ← a1", color=green];
// [Asm]   r4 [label="v15 ← a3", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="v27 ← a0", color=green];
// [Asm]   r10 [label="v2 ← a3", color=green];
// [Asm]   r14 [label="v5 ← a0", color=green];
// [Asm]   r8 [label="v23 ← a0", color=green];
// [Asm]   r5 [label="v30 ← a0", color=green];
// [Asm]   r15 [label="v37 ← a3", color=green];
// [Asm]   r2 [label="v7 ← a1", color=green];
// [Asm]   r16 [label="v38 ← a3", color=green];
// [Asm]   r18 [label="v35 ← a3", color=green];
// [Asm]   r17 [label="v34 ← a3", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r11;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r9 -- r16;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v29-> 1:zero-> 2:v7-> 3:v6-> 4:v15-> 5:v30-> 6:v26-> 7:v27-> 8:v23-> 9:v9-> 15:v37-> 16:v38-> 17:v34-> 18:v35-> 14:v5-> 13:v3-> 10:v2-> 11:a2-> 12:a1"
// [Asm]   comment = "v29<-a0;v6<-a2;v9<-a0;v26<-a0;v3<-a1;v15<-a3;v27<-a0;v2<-a3;v5<-a0;v23<-a0;v30<-a0;v37<-a3;v7<-a1;v38<-a3;v35<-a3;v34<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inprod1l0_0"];
// [Asm]   r0 [label="fv14 ← fa0", color=green];
// [Asm]   r5 [label="fv18 ← fa0", color=green];
// [Asm]   r3 [label="fv22 ← fa0", color=green];
// [Asm]   r2 [label="fv20 ← fa2", color=green];
// [Asm]   r9 [label="fv11 ← fa1", color=green];
// [Asm]   r6 [label="fv17 ← fa0", color=green];
// [Asm]   r4 [label="fv8 ← fa0", color=green];
// [Asm]   r1 [label="fv19 ← fa1", color=green];
// [Asm]   r7 [label="fa0", color=blue];
// [Asm]   r10 [label="fv12 ← fa2", color=green];
// [Asm]   r8 [label="fv4 ← fa0", color=green];
// [Asm]   r0 -- r2;
// [Asm]   r4 -- r9;
// [Asm]   r9 -- r10;
// [Asm]   r4 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv14-> 1:fv19-> 2:fv20-> 3:fv22-> 4:fv8-> 9:fv11-> 10:fv12-> 5:fv18-> 6:fv17-> 7:fa0-> 8:fv4"
// [Asm]   comment = "fv14<-fa0;fv18<-fa0;fv22<-fa0;fv20<-fa2;fv11<-fa1;fv17<-fa0;fv8<-fa0;fv19<-fa1;fv12<-fa2;fv4<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v29, v15, 3 ->   slliw a0, a3, 3
// [Asm] subst   add v30, v6, v29 ->   add a0, a2, a0
// [Asm] subst   fld fv19, 0(v30) ->   fld fa1, 0(a0)
// [Asm] subst   slliw v26, v15, 3 ->   slliw a0, a3, 3
// [Asm] subst   add v27, v7, v26 ->   add a0, a1, a0
// [Asm] subst   fld fv20, 0(v27) ->   fld fa2, 0(a0)
// [Asm] subst   fmadd.d fv22, fv19, fv20, fv14 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   addi v23, v15, -1 ->   addi a0, a3, -1
// [Asm] subst   j .inprod1l0_0_0 ->   j .inprod1l0_0_0
// [Asm] subst   j .inprod1l0_0_6 ->   j .inprod1l0_0_6
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v5, a2 ->   mv a0, a2
// [Asm] subst   mv v6, v2 ->   mv a2, a3
// [Asm] subst   slliw v37, v9, 3 ->   slliw a3, a0, 3
// [Asm] subst   add v38, v6, v37 ->   add a3, a2, a3
// [Asm] subst   fld fv11, 0(v38) ->   fld fa1, 0(a3)
// [Asm] subst   slliw v34, v9, 3 ->   slliw a3, a0, 3
// [Asm] subst   add v35, v7, v34 ->   add a3, a1, a3
// [Asm] subst   fld fv12, 0(v35) ->   fld fa2, 0(a3)
// [Asm] subst   fmadd.d fv14, fv11, fv12, fv8 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   addi v15, v9, -1 ->   addi a3, a0, -1
// [Asm] subst   blt v15, zero, .inprod1l0_0_4 ->   blt a3, zero, .inprod1l0_0_4
// [Asm] subst   blt v9, zero, .inprod1l0_0_2 ->   blt a0, zero, .inprod1l0_0_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main17l1_1 ->   call main17l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, Insn(iref=%7) -> v11, BlockParam(bref=b3, bpref=$b.0) -> fv13, Insn(iref=%2) -> v6, Insn(iref=%9) -> fv14, Insn(iref=%8) -> fv12, Insn(iref=%1) -> v5, Insn(iref=%10) -> v15, Insn(iref=%11) -> v16, Mem(fref=f1, mref=m0) -> v2, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%6) -> fv10, Insn(iref=%5) -> fv9, Insn(iref=%0) -> v4, Insn(iref=%4) -> fv8
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Int32(val=2)])
// [Asm] defs: [v19]
// [Asm] live_set: [v19, fv13]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [fv13, fv20]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv29]
// [Asm] live_set: [fv29]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv13]
// [Asm] move_origin: [fv29]
// [Asm] defined: fv13 is F
// [Asm] defs: []
// [Asm] live_set: [fv13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v35, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [fv36]
// [Asm] live_set: [s11, zero, fv36, v2]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv36, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv36, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v2, v32, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [v2, fv33, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv33, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv33, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v2, zero, v30, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, zero, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, fv8, zero, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v2, fv8, fv25, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, fv10, v3]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v2, fv10, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, fv10, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, fv10, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, fv10, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, fv10, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [v11, a1, a0, fa0]
// [Asm] move_origin: [fv10]
// [Asm] defined: fa0 is F
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, fa0]
// [Asm] move_origin: [v11]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv12]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv12 is F
// [Asm] defs: []
// [Asm] live_set: [fv12]
// [Asm] move_origin: []
// [Asm] defs: [fv13]
// [Asm] live_set: [fv13]
// [Asm] move_origin: [fv12]
// [Asm] defined: fv13 is F
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main17l1_1"];
// [Asm]   r0 [label="v19 ← a0", color=green];
// [Asm]   r20 [label="v3 ← a1", color=green];
// [Asm]   r23 [label="v23 ← a2", color=green];
// [Asm]   r3 [label="t0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="v15 ← a0", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v30 ← a2", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v16 ← a0", color=green];
// [Asm]   r24 [label="v11 ← a2", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v2 ← a0", color=green];
// [Asm]   r18 [label="s11", color=blue];
// [Asm]   r19 [label="v35 ← a1", color=green];
// [Asm]   r21 [label="v32 ← a2", color=green];
// [Asm]   r17 [label="zero", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r2 -- r6;
// [Asm]   r17 -- r18;
// [Asm]   r20 -- r22;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r20 -- r24;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r4;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r9;
// [Asm]   r16 -- r19;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r18 -- r20;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r16 -- r24;
// [Asm]   r2 -- r3;
// [Asm]   r16 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r16 -- r18;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r16 -- r22;
// [Asm]   r17 -- r20;
// [Asm]   r20 -- r23;
// [Asm]   r8 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v19-> 1:v15-> 2:a0-> 3:t0-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 24:v11-> 20:v3-> 16:v2-> 17:zero-> 18:s11-> 19:v35-> 21:v32-> 22:v30-> 23:v23-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:v16"
// [Asm]   comment = "v19<-a0;v3<-a1;v23<-a2;v15<-a0;v30<-a2;v16<-a0;v11<-a2;v2<-a0;v35<-a1;v32<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main17l1_1"];
// [Asm]   r0 [label="fv13 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r23 [label="fv36 ← fa0", color=green];
// [Asm]   r3 [label="ft0", color=blue];
// [Asm]   r9 [label="ft6", color=blue];
// [Asm]   r26 [label="fv8 ← fa1", color=green];
// [Asm]   r27 [label="fv25 ← fa2", color=green];
// [Asm]   r6 [label="ft3", color=blue];
// [Asm]   r13 [label="ft10", color=blue];
// [Asm]   r4 [label="ft1", color=blue];
// [Asm]   r29 [label="fv12 ← fa0", color=green];
// [Asm]   r1 [label="fv20 ← fa1", color=green];
// [Asm]   r28 [label="fv10 ← fa0", color=green];
// [Asm]   r11 [label="ft8", color=blue];
// [Asm]   r7 [label="ft4", color=blue];
// [Asm]   r10 [label="ft7", color=blue];
// [Asm]   r22 [label="fv29 ← fa0", color=green];
// [Asm]   r14 [label="fa0", color=blue];
// [Asm]   r8 [label="ft5", color=blue];
// [Asm]   r5 [label="ft2", color=blue];
// [Asm]   r24 [label="fv33 ← fa0", color=green];
// [Asm]   r15 [label="fa1", color=blue];
// [Asm]   r25 [label="fv7 ← fa0", color=green];
// [Asm]   r2 [label="fv14 ← fa0", color=green];
// [Asm]   r16 [label="fa2", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft9", color=blue];
// [Asm]   r14 -- r19;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r26 -- r27;
// [Asm]   r25 -- r26;
// [Asm]   r14 -- r20;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r14;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r14 -- r16;
// [Asm]   r8 -- r14;
// [Asm]   r6 -- r14;
// [Asm]   r11 -- r14;
// [Asm]   r14 -- r21;
// [Asm]   r4 -- r14;
// [Asm]   r13 -- r14;
// [Asm]   r7 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r25 -- r27;
// [Asm]   r9 -- r14;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:fv13-> 1:fv20-> 2:fv14-> 3:ft0-> 14:fa0-> 4:ft1-> 5:ft2-> 6:ft3-> 7:ft4-> 8:ft5-> 9:ft6-> 10:ft7-> 11:ft8-> 12:ft9-> 13:ft10-> 15:fa1-> 16:fa2-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7-> 22:fv29-> 23:fv36-> 24:fv33-> 25:fv7-> 26:fv8-> 27:fv25-> 28:fv10-> 29:fv12"
// [Asm]   comment = "fv13<-fa0;fv36<-fa0;fv8<-fa1;fv25<-fa2;fv12<-fa0;fv20<-fa1;fv10<-fa0;fv29<-fa0;fv33<-fa0;fv7<-fa0;fv14<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v19, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv20, v19 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv14, fv20, fv13 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v15, fv14, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   fmv.d.x fv29, zero ->   fmv.d.x fa0, zero
// [Asm] subst   j .main17l1_1_3 ->   j .main17l1_1_3
// [Asm] subst   addi v2, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v35, 4608218246714312622 ->   li a1, 4608218246714312622
// [Asm] subst   fmv.d.x fv36, v35 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv36, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv36, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   fsd fv36, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   li v32, 4616820122002590269 ->   li a2, 4616820122002590269
// [Asm] subst   fmv.d.x fv33, v32 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv33, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   fsd fv33, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   fsd fv33, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   li v30, 2 ->   li a2, 2
// [Asm] subst   blt v30, zero, .main17l1_1_2 ->   blt a2, zero, .main17l1_1_2
// [Asm] subst   fld fv7, 16(v2) ->   fld fa0, 16(a0)
// [Asm] subst   fld fv8, 16(v3) ->   fld fa1, 16(a1)
// [Asm] subst   fmv.d.x fv25, zero ->   fmv.d.x fa2, zero
// [Asm] subst   fmadd.d fv10, fv7, fv8, fv25 ->   fmadd.d fa0, fa0, fa1, fa2
// [Asm] subst   li v23, 2 ->   li a2, 2
// [Asm] subst   addi v11, v23, -1 ->   addi a2, a2, -1
// [Asm] subst   call inprod1l0_0 ->   call inprod1l0_0
// [Asm] before colored: # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main17l1_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] inprod1l0_0:
// [Asm] # block info: defs: [v2, v5, v7, fv8, fv4, v6, v9, v3], uses: [v3, v5, a0, fa0, a2, a1, fv4, v2], upward_exposed: [a2, a1, a0, fa0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero, fa0], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_8:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0, fa0]
// [Asm]   mv v2, a0  # live: [fa0, a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, fa0, a2, zero, v3]
// [Asm]   fmv.d fv4, fa0  # live: [v2, a2, fv4, zero, v3]
// [Asm]   mv v5, a2  # live: [v2, v5, fv4, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v6, v5, fv4, zero, v3]
// [Asm]   mv v7, v3  # live: [v6, v5, fv4, zero, v7]
// [Asm]   fmv.d fv8, fv4  # live: [v7, v6, v5, zero, fv8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [fv8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, fv8], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, fv8, v9]
// [Asm] .inprod1l0_0_0:
// [Asm] # control
// [Asm]   blt v9, zero, .inprod1l0_0_2  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [fv11, v35, v37, v38, fv12, fv14, v15, v34], uses: [v34, fv11, zero, v7, v35, fv8, v38, fv12, v37, v6, v15, v9], upward_exposed: [fv8, v6, v9, zero, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, fv8], live_out: [v6, v15, fv14, zero, v7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_1:
// [Asm]   slliw v37, v9, 3  # live: [zero, v7, fv8, v37, v6, v9]
// [Asm]   add v38, v6, v37  # live: [zero, v7, fv8, v38, v6, v9]
// [Asm]   fld fv11, 0(v38)  # live: [zero, fv11, v7, fv8, v6, v9]
// [Asm]   slliw v34, v9, 3  # live: [zero, fv11, v7, fv8, v6, v9, v34]
// [Asm]   add v35, v7, v34  # live: [zero, fv11, v7, fv8, v35, v6, v9]
// [Asm]   fld fv12, 0(v35)  # live: [zero, fv11, v7, fv8, fv12, v6, v9]
// [Asm]   fmadd.d fv14, fv11, fv12, fv8  # live: [v6, fv14, zero, v9, v7]
// [Asm]   addi v15, v9, -1  # live: [v6, v15, fv14, zero, v7]
// [Asm] # control
// [Asm]   blt v15, zero, .inprod1l0_0_4  # live: [v6, v15, fv14, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [fv22, v29, v26, v27, v30, v23, fv20, fv8, fv19, v9], uses: [fv22, v29, v26, v30, v27, v23, fv20, v7, fv19, v6, fv14, v15], upward_exposed: [v6, v15, fv14, v7], params_defs: []
// [Asm] # live_in: [v6, v15, fv14, zero, v7], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_3:
// [Asm]   slliw v29, v15, 3  # live: [zero, v29, v7, v6, v15, fv14]
// [Asm]   add v30, v6, v29  # live: [zero, v30, v7, v6, v15, fv14]
// [Asm]   fld fv19, 0(v30)  # live: [zero, v7, fv19, v6, v15, fv14]
// [Asm]   slliw v26, v15, 3  # live: [zero, v26, v7, fv19, v6, v15, fv14]
// [Asm]   add v27, v7, v26  # live: [zero, v27, v7, fv19, v6, v15, fv14]
// [Asm]   fld fv20, 0(v27)  # live: [zero, fv20, v7, fv19, v6, v15, fv14]
// [Asm]   fmadd.d fv22, fv19, fv20, fv14  # live: [fv22, v6, v15, zero, v7]
// [Asm]   addi v23, v15, -1  # live: [fv22, v6, zero, v23, v7]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [fv22, v6, zero, v23, v7]
// [Asm]   mv v7, v7  # live: [fv22, v6, zero, v23, v7]
// [Asm]   fmv.d fv8, fv22  # live: [v7, v6, zero, v23, fv8]
// [Asm]   mv v9, v23  # live: [v7, v6, v9, zero, fv8]
// [Asm]   j .inprod1l0_0_0  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [fv18], uses: [fv8], upward_exposed: [fv8], params_defs: []
// [Asm] # live_in: [fv8], live_out: [fv18]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_2:
// [Asm] # control
// [Asm]   fmv.d fv18, fv8  # live: [fv18]
// [Asm] 
// [Asm] # block info: defs: [fa0], uses: [fv18, fa0], upward_exposed: [fv18], params_defs: [fv18]
// [Asm] # live_in: [fv18], live_out: []
// [Asm] # block parameters: [fv18]
// [Asm] .inprod1l0_0_6:
// [Asm] # control
// [Asm]   fmv.d fa0, fv18  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv17], uses: [fv14], upward_exposed: [fv14], params_defs: []
// [Asm] # live_in: [fv14], live_out: [fv17]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_4:
// [Asm] # control
// [Asm]   fmv.d fv17, fv14  # live: [fv17]
// [Asm] 
// [Asm] # block info: defs: [fv18], uses: [fv17], upward_exposed: [fv17], params_defs: [fv17]
// [Asm] # live_in: [fv17], live_out: [fv18]
// [Asm] # block parameters: [fv17]
// [Asm] .inprod1l0_0_5:
// [Asm] # control
// [Asm]   fmv.d fv18, fv17  # live: [fv18]
// [Asm]   j .inprod1l0_0_6  # live: [fv18]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main17l1_1:
// [Asm] # block info: defs: [v2, fv36, v30, v35, fv33, v32, s11, v3], uses: [v2, fv36, zero, v30, fv33, v35, v32, s11, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main17l1_1_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -24  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v35, 4608218246714312622  # live: [v35, s11, zero, v2]
// [Asm]   fmv.d.x fv36, v35  # live: [s11, zero, fv36, v2]
// [Asm]   fsd fv36, 0(v2)  # live: [s11, zero, fv36, v2]
// [Asm]   fsd fv36, 8(v2)  # live: [s11, zero, fv36, v2]
// [Asm]   fsd fv36, 16(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   li v32, 4616820122002590269  # live: [v2, v32, zero, v3]
// [Asm]   fmv.d.x fv33, v32  # live: [v2, fv33, zero, v3]
// [Asm]   fsd fv33, 0(v3)  # live: [v2, fv33, zero, v3]
// [Asm]   fsd fv33, 8(v3)  # live: [v2, fv33, zero, v3]
// [Asm]   fsd fv33, 16(v3)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   li v30, 2  # live: [v2, zero, v30, v3]
// [Asm]   blt v30, zero, .main17l1_1_2  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [fv10, t1, ft0, ft1, fv12, a1, fa1, fa2, fv25, ft6, a4, fa6, a6, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, fv8, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, fv13, t4, t2, fv7], uses: [v3, v11, fv10, a0, fv8, a2, fv12, a1, zero, fv25, v23, fa0, fv7, v2], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v2, zero, v3], live_out: [fv13]
// [Asm] # block parameters: []
// [Asm] .main17l1_1_1:
// [Asm]   fld fv7, 16(v2)  # live: [v2, zero, fv7, v3]
// [Asm]   fld fv8, 16(v3)  # live: [v2, fv8, zero, fv7, v3]
// [Asm]   fmv.d.x fv25, zero  # live: [v2, fv8, fv25, fv7, v3]
// [Asm]   fmadd.d fv10, fv7, fv8, fv25  # live: [v2, fv10, v3]
// [Asm]   li v23, 2  # live: [v2, fv10, v23, v3]
// [Asm]   addi v11, v23, -1  # live: [v2, v11, fv10, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, fv10, v3]
// [Asm]   mv a0, v2  # live: [v11, fv10, a0, v3]
// [Asm]   mv a1, v3  # live: [v11, fv10, a1, a0]
// [Asm]   fmv.d fa0, fv10  # live: [v11, a1, a0, fa0]
// [Asm]   mv a2, v11  # live: [a2, a1, a0, fa0]
// [Asm]   call inprod1l0_0  # live: [fa0]
// [Asm]   fmv.d fv12, fa0  # live: [fv12]
// [Asm]   # restore_ctx2  # live: [fv12]
// [Asm] # control
// [Asm]   fmv.d fv13, fv12  # live: [fv13]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, fv20, ft0, ft1, a1, fv14, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v16, a0, fv13, fv20, v19, fv14, v15], upward_exposed: [fv13], params_defs: [fv13]
// [Asm] # live_in: [fv13], live_out: []
// [Asm] # block parameters: [fv13]
// [Asm] .main17l1_1_3:
// [Asm]   li v19, 4696837146684686336  # live: [v19, fv13]
// [Asm]   fmv.d.x fv20, v19  # live: [fv13, fv20]
// [Asm]   fmul.d fv14, fv20, fv13  # live: [fv14]
// [Asm]   fcvt.w.d v15, fv14, rtz  # live: [v15]
// [Asm]   # save_ctx2  # live: [v15]
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v16, a0  # live: [v16]
// [Asm]   # restore_ctx2  # live: [v16]
// [Asm] # control
// [Asm]   mv a0, v16  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv29, fv13], uses: [fv29, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [fv13]
// [Asm] # block parameters: []
// [Asm] .main17l1_1_2:
// [Asm] # control
// [Asm]   fmv.d.x fv29, zero  # live: [fv29]
// [Asm]   fmv.d fv13, fv29  # live: [fv13]
// [Asm]   j .main17l1_1_3  # live: [fv13]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("acc", Double), ("i", Int)], body: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Var("acc"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Var("acc"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Var("v1"), Var("i"))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("v2"), Var("i"))
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))
// [Knf] build_knf: Array(Int(3), Double(1.23))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])]))
// [Knf] build_knf: Array(Int(3), Double(4.56))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main17l1_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inprod1l0_0
// [Main]   .type inprod1l0_0, @function
// [Main] # leaf true
// [Main] inprod1l0_0:
// [Main] .inprod1l0_0_8:
// [Main]   mv a3, a0
// [Main]   mv a0, a2
// [Main]   mv a2, a3
// [Main] 
// [Main] .inprod1l0_0_0:
// [Main]   blt a0, zero, .inprod1l0_0_2
// [Main] 
// [Main] .inprod1l0_0_1:
// [Main]   slliw a3, a0, 3
// [Main]   add a3, a2, a3
// [Main]   fld fa1, 0(a3)
// [Main]   slliw a3, a0, 3
// [Main]   add a3, a1, a3
// [Main]   fld fa2, 0(a3)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   addi a3, a0, -1
// [Main]   blt a3, zero, .inprod1l0_0_4
// [Main] 
// [Main] .inprod1l0_0_3:
// [Main]   slliw a0, a3, 3
// [Main]   add a0, a2, a0
// [Main]   fld fa1, 0(a0)
// [Main]   slliw a0, a3, 3
// [Main]   add a0, a1, a0
// [Main]   fld fa2, 0(a0)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   addi a0, a3, -1
// [Main]   j .inprod1l0_0_0
// [Main] 
// [Main] .inprod1l0_0_2:
// [Main] 
// [Main] .inprod1l0_0_6:
// [Main]   ret
// [Main] 
// [Main] .inprod1l0_0_4:
// [Main] 
// [Main] .inprod1l0_0_5:
// [Main]   j .inprod1l0_0_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main17l1_1
// [Main]   .type main17l1_1, @function
// [Main] # leaf false
// [Main] main17l1_1:
// [Main] .main17l1_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4608218246714312622
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa0, 8(a0)
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   li a2, 4616820122002590269
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   fsd fa0, 8(a1)
// [Main]   fsd fa0, 16(a1)
// [Main]   li a2, 2
// [Main]   blt a2, zero, .main17l1_1_2
// [Main] 
// [Main] .main17l1_1_1:
// [Main]   fld fa0, 16(a0)
// [Main]   fld fa1, 16(a1)
// [Main]   fmv.d.x fa2, zero
// [Main]   fmadd.d fa0, fa0, fa1, fa2
// [Main]   li a2, 2
// [Main]   addi a2, a2, -1
// [Main]   call inprod1l0_0
// [Main] 
// [Main] .main17l1_1_3:
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main17l1_1_2:
// [Main]   fmv.d.x fa0, zero
// [Main]   j .main17l1_1_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function inprod1l0_0
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b0, bpref=$b.0), offset=Insn(iref=%5), width=@64))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b0, bpref=$b.1), offset=Insn(iref=%5), width=@64))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%7), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%4), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%5), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%10), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.3), width=@64))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.3), width=@64))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Branch(cond=Insn(iref=%6), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function inprod1l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function main17l1_1
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Return(args=[Insn(iref=%11)])
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f1, mref=m0), index=2, width=@64))
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f1, mref=m1), index=2, width=@64))
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Double(val=0), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Mem(fref=f1, mref=m0), Mem(fref=f1, mref=m1), Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Double(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=1.23))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Init(val=Double(val=4.56))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main17l1_1 to wasm
// [KnfOpt] freq: {inprod1: Many(2), main17: Once}
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Knf inline Some(inprod1)
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Knf inline Some(inprod1)
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %12: Call(ty=Double, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%10), Insn(iref=%11)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
