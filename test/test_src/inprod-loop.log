// [Main] function thunk_main(k) {
// [Main]   function inprod_1(v1_3, v2_5, acc_7, i_9, k) {
// [Main]     const _10 = 0;
// [Main]     if (_10 <= i_9) {
// [Main]       const _11 = v1_3[i_9];
// [Main]       const _12 = v2_5[i_9];
// [Main]       const _13 = _11 * _12;
// [Main]       const _14 = acc_7 + _13;
// [Main]       const _15 = 1;
// [Main]       const _16 = i_9 - _15;
// [Main]       return $thunk(() => inprod_1(v1_3, v2_5, _14, _16, k))
// [Main]     } else {
// [Main]       return k(acc_7)
// [Main]     }
// [Main]   }
// [Main]   function main_17(k) {
// [Main]     const _18 = 3;
// [Main]     const _19 = 1.23;
// [Main]     const v1_20 = minimbt_create_float_array($force(_18), $force(_19));
// [Main]     const _21 = 3;
// [Main]     const _22 = 4.56;
// [Main]     const v2_23 = minimbt_create_float_array($force(_21), $force(_22));
// [Main]     const _24 = 1000000;
// [Main]     const _25 = 0;
// [Main]     const _26 = 2;
// [Main]     return $thunk(() => inprod_1(v1_20, v2_23, _25, _26, function (_27) {
// [Main]       const _28 = _24 * _27;
// [Main]       const _29 = minimbt_truncate($force(_28));
// [Main]       return $thunk(() => k(minimbt_print_int($force(_29))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_17(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("acc", Double), ("i", Int)], body: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), Add, kind=None), Prim(Var("i"), Int(1), Sub, kind=None)]), Var("acc"))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("v1", Var({val: None})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: None})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)])])))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), Add, kind=None), Prim(Var("i"), Int(1), Sub, kind=None)]), Var("acc")) against Double
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), Add, kind=None), Prim(Var("i"), Int(1), Sub, kind=None)]) against Double
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], Array(Double)))
// [Typer] inst result: Array(Double)
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], Array(Double)))
// [Typer] inst result: Array(Double)
// [Typer] infer: Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), Add, kind=None)
// [Typer] infer: Var("acc")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] infer: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None)
// [Typer] infer: Get(Var("v1"), Var("i"))
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], Array(Double)))
// [Typer] inst result: Array(Double)
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Get(Var("v2"), Var("i"))
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], Array(Double)))
// [Typer] inst result: Array(Double)
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("inprod") against Fun([Array(Double), Array(Double), Double, Int], Double)
// [Typer] inst: TypeScheme(([], Fun([Array(Double), Array(Double), Double, Int], Double)))
// [Typer] inst result: Fun([Array(Double), Array(Double), Double, Int], Double)
// [Typer] unify: Fun([Array(Double), Array(Double), Double, Int], Double) and Fun([Array(Double), Array(Double), Double, Int], Double)
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: Var("acc") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("v1", Var({val: None})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: None})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)])])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("v1", Var({val: None})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: None})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)])])))
// [Typer] infer: Array(Int(3), Double(1.23))
// [Typer] infer: Double(1.23)
// [Typer] check: Int(3) against Int
// [Typer] unify: Var({val: None}) and Array(Double)
// [Typer] union: Var({val: None}) and Array(Double)
// [Typer] infer: Let(("v2", Var({val: None})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)])]))
// [Typer] infer: Array(Int(3), Double(4.56))
// [Typer] infer: Double(4.56)
// [Typer] check: Int(3) against Int
// [Typer] unify: Var({val: None}) and Array(Double)
// [Typer] union: Var({val: None}) and Array(Double)
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)]) against Int
// [Typer] infer: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=None)
// [Typer] infer: Double(1000000)
// [Typer] infer: App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)])
// [Typer] infer: Var("inprod")
// [Typer] inst: TypeScheme(([], Fun([Array(Double), Array(Double), Double, Int], Double)))
// [Typer] inst result: Fun([Array(Double), Array(Double), Double, Int], Double)
// [Typer] check: Var("v1") against Array(Double)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Double))})))
// [Typer] inst result: Array(Double)
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("v2") against Array(Double)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Double))})))
// [Typer] inst result: Array(Double)
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Double(0) against Double
// [Typer] check: Int(2) against Int
// [Typer] unify: Double and Double
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
