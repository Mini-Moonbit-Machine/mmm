// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v6, Self(fref=f0) -> v0, Insn(iref=%9) -> v12, Insn(iref=%8) -> fv11, BlockParam(bref=b2, bpref=$b.1) -> v7, Insn(iref=%10) -> v13, BlockParam(bref=b2, bpref=$b.2) -> fv8, Insn(iref=%5) -> fv18, Insn(iref=%0) -> v4, Insn(iref=%4) -> fv17, Insn(iref=%3) -> fv16, Insn(iref=%13) -> v15, Insn(iref=%7) -> v20, Mem(fref=f0, mref=m1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v14, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%2) -> v10, Insn(iref=%1) -> v5, BlockParam(bref=b2, bpref=$b.3) -> v9, Insn(iref=%6) -> fv19
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.3)])
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v39]
// [Asm] live_set: [s11, zero, v39, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [fv40]
// [Asm] live_set: [s11, zero, fv40, v2]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv40, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv40, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v36, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [fv37]
// [Asm] live_set: [v2, fv37, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv37, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv37, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v6, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [fv33, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, v6, zero, fv8]
// [Asm] move_origin: [fv33]
// [Asm] defined: fv8 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v7, v6, zero, v34, fv8]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: [v34]
// [Asm] defined: v9 is X
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v7, fv8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero, v7, fv8, v6, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [fv16]
// [Asm] live_set: [zero, v7, fv8, v6, v15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23, v7, fv8, v6, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [fv17]
// [Asm] live_set: [zero, v7, fv8, v6, fv16, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv19, v6, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [fv19, v6, zero, v20, v7]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [fv19, v6, zero, v20, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [fv19, v6, zero, v20, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, v6, zero, v20, fv8]
// [Asm] move_origin: [fv19]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: [v20]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30, fv8]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [fv31]
// [Asm] live_set: [fv31, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv11]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.50"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v34 ← a2", color=green];
// [Asm]   r26 [label="t2", color=blue];
// [Asm]   r27 [label="t3", color=blue];
// [Asm]   r6 [label="v36 ← a2", color=green];
// [Asm]   r13 [label="v23 ← a3", color=green];
// [Asm]   r4 [label="v39 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r29 [label="v13 ← a0", color=green];
// [Asm]   r28 [label="t4", color=blue];
// [Asm]   r11 [label="v15 ← a3", color=green];
// [Asm]   r7 [label="v6 ← a0", color=green];
// [Asm]   r10 [label="v9 ← a2", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="v20 ← a2", color=green];
// [Asm]   r8 [label="v7 ← a1", color=green];
// [Asm]   r30 [label="v14 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="v30 ← a0", color=green];
// [Asm]   r24 [label="t0", color=blue];
// [Asm]   r25 [label="t1", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v12 ← a0", color=green];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r17 [label="a1", color=blue];
// [Asm]   r12 [label="v25 ← a4", color=green];
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r4;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r0 -- r17;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r28;
// [Asm]   r1 -- r2;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r12;
// [Asm]   r0 -- r21;
// [Asm]   r2 -- r13;
// [Asm]   r8 -- r10;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r9;
// [Asm]   r2 -- r9;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r27;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r7 -- r14;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:a0-> 17:a1-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:t0-> 25:t1-> 26:t2-> 27:t3-> 28:t4-> 1:v2-> 2:zero-> 3:s11-> 4:v39-> 5:v3-> 6:v36-> 7:v6-> 8:v7-> 9:v34-> 10:v9-> 11:v15-> 12:v25-> 13:v23-> 14:v20-> 15:v30-> 16:v12-> 29:v13-> 30:v14"
// [Asm]   comment = "v34<-a2;v36<-a2;v23<-a3;v39<-a1;v2<-a0;v13<-a0;v15<-a3;v6<-a0;v9<-a2;v20<-a2;v7<-a1;v14<-a0;v3<-a1;v30<-a0;v12<-a0;v25<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.50"];
// [Asm]   r0 [label="fv40 ← fa0", color=green];
// [Asm]   r20 [label="fa0", color=blue];
// [Asm]   r23 [label="fa3", color=blue];
// [Asm]   r3 [label="fv8 ← fa0", color=green];
// [Asm]   r9 [label="ft0", color=blue];
// [Asm]   r26 [label="fa6", color=blue];
// [Asm]   r27 [label="fa7", color=blue];
// [Asm]   r6 [label="fv19 ← fa0", color=green];
// [Asm]   r13 [label="ft4", color=blue];
// [Asm]   r4 [label="fv16 ← fa1", color=green];
// [Asm]   r1 [label="fv37 ← fa0", color=green];
// [Asm]   r11 [label="ft2", color=blue];
// [Asm]   r7 [label="fv31 ← fa1", color=green];
// [Asm]   r10 [label="ft1", color=blue];
// [Asm]   r22 [label="fa2", color=blue];
// [Asm]   r14 [label="ft5", color=blue];
// [Asm]   r8 [label="fv11 ← fa0", color=green];
// [Asm]   r5 [label="fv17 ← fa2", color=green];
// [Asm]   r15 [label="ft6", color=blue];
// [Asm]   r24 [label="fa4", color=blue];
// [Asm]   r25 [label="fa5", color=blue];
// [Asm]   r2 [label="fv33 ← fa0", color=green];
// [Asm]   r16 [label="ft7", color=blue];
// [Asm]   r18 [label="ft9", color=blue];
// [Asm]   r19 [label="ft10", color=blue];
// [Asm]   r17 [label="ft8", color=blue];
// [Asm]   r21 [label="fa1", color=blue];
// [Asm]   r12 [label="ft3", color=blue];
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r7;
// [Asm]   comment = "0:fv40-> 1:fv37-> 2:fv33-> 3:fv8-> 4:fv16-> 5:fv17-> 7:fv31-> 6:fv19-> 8:fv11-> 9:ft0-> 10:ft1-> 11:ft2-> 12:ft3-> 13:ft4-> 14:ft5-> 15:ft6-> 16:ft7-> 17:ft8-> 18:ft9-> 19:ft10-> 20:fa0-> 21:fa1-> 22:fa2-> 23:fa3-> 24:fa4-> 25:fa5-> 26:fa6-> 27:fa7"
// [Asm]   comment = "fv40<-fa0;fv8<-fa0;fv19<-fa0;fv16<-fa1;fv37<-fa0;fv31<-fa1;fv11<-fa0;fv17<-fa2;fv33<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   blt v9, zero, .main.50_4 ->   blt a2, zero, .main.50_4
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v2, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v39, 4608218246714312622 ->   li a1, 4608218246714312622
// [Asm] subst   fmv.d.x fv40, v39 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv40, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv40, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   fsd fv40, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   li v36, 4616820122002590269 ->   li a2, 4616820122002590269
// [Asm] subst   fmv.d.x fv37, v36 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv37, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   fsd fv37, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   fsd fv37, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   fmv.d.x fv33, zero ->   fmv.d.x fa0, zero
// [Asm] subst   li v34, 2 ->   li a2, 2
// [Asm] subst   slliw v15, v9, 3 ->   slliw a3, a2, 3
// [Asm] subst   add v25, v6, v15 ->   add a4, a0, a3
// [Asm] subst   fld fv16, 0(v25) ->   fld fa1, 0(a4)
// [Asm] subst   add v23, v7, v15 ->   add a3, a1, a3
// [Asm] subst   fld fv17, 0(v23) ->   fld fa2, 0(a3)
// [Asm] subst   fmadd.d fv19, fv16, fv17, fv8 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   addi v20, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   j .main.50_2 ->   j .main.50_2
// [Asm] subst   li v30, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv31, v30 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv11, fv31, fv8 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v12, fv11, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.50 ->   call main.50
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.50:
// [Asm] # block info: defs: [v39, v2, v3, fv37, v36, v7, fv33, fv8, v6, s11, v34, v9, fv40], uses: [v3, v2, fv37, zero, v36, fv33, s11, v34, v39, fv40], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .main.50_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -24  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v39, 4608218246714312622  # live: [s11, zero, v39, v2]
// [Asm]   fmv.d.x fv40, v39  # live: [s11, zero, fv40, v2]
// [Asm]   fsd fv40, 0(v2)  # live: [s11, zero, fv40, v2]
// [Asm]   fsd fv40, 8(v2)  # live: [s11, zero, fv40, v2]
// [Asm]   fsd fv40, 16(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   li v36, 4616820122002590269  # live: [v2, v36, zero, v3]
// [Asm]   fmv.d.x fv37, v36  # live: [v2, fv37, zero, v3]
// [Asm]   fsd fv37, 0(v3)  # live: [v2, fv37, zero, v3]
// [Asm]   fsd fv37, 8(v3)  # live: [v2, fv37, zero, v3]
// [Asm]   fsd fv37, 16(v3)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v6, zero, v3]
// [Asm]   mv v7, v3  # live: [v6, zero, v7]
// [Asm]   fmv.d.x fv33, zero  # live: [fv33, v6, zero, v7]
// [Asm]   fmv.d fv8, fv33  # live: [v7, v6, zero, fv8]
// [Asm]   li v34, 2  # live: [v7, v6, zero, v34, fv8]
// [Asm]   mv v9, v34  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [fv8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, fv8], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, fv8, v9]
// [Asm] .main.50_2:
// [Asm] # control
// [Asm]   blt v9, zero, .main.50_4  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [v25, v23, v20, fv8, fv19, v15, fv16, fv17, v9], uses: [v25, v23, v20, fv8, v7, fv19, v6, v15, fv16, fv17, v9], upward_exposed: [fv8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, fv8], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .main.50_3:
// [Asm]   slliw v15, v9, 3  # live: [zero, v7, fv8, v6, v15, v9]
// [Asm]   add v25, v6, v15  # live: [v25, zero, v7, fv8, v6, v15, v9]
// [Asm]   fld fv16, 0(v25)  # live: [zero, v7, fv8, v6, v15, fv16, v9]
// [Asm]   add v23, v7, v15  # live: [zero, v23, v7, fv8, v6, fv16, v9]
// [Asm]   fld fv17, 0(v23)  # live: [zero, v7, fv8, v6, fv16, v9, fv17]
// [Asm]   fmadd.d fv19, fv16, fv17, fv8  # live: [fv19, v6, zero, v9, v7]
// [Asm]   addi v20, v9, -1  # live: [fv19, v6, zero, v20, v7]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [fv19, v6, zero, v20, v7]
// [Asm]   mv v7, v7  # live: [fv19, v6, zero, v20, v7]
// [Asm]   fmv.d fv8, fv19  # live: [v7, v6, zero, v20, fv8]
// [Asm]   mv v9, v20  # live: [v7, v6, v9, zero, fv8]
// [Asm]   j .main.50_2  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, fv31, fv11, ft3, fa0, t4, t2], uses: [fv31, fv11, a0, v13, v30, fv8, v12], upward_exposed: [fv8], params_defs: []
// [Asm] # live_in: [fv8], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .main.50_4:
// [Asm]   li v30, 4696837146684686336  # live: [v30, fv8]
// [Asm]   fmv.d.x fv31, v30  # live: [fv31, fv8]
// [Asm]   fmul.d fv11, fv31, fv8  # live: [fv11]
// [Asm]   fcvt.w.d v12, fv11, rtz  # live: [v12]
// [Asm]   # save_ctx2  # live: [v12]
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v13, a0  # live: [v13]
// [Asm]   # restore_ctx2  # live: [v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .main.50_5:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.50  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("acc", Double), ("i", Int)], body: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Var("acc"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Var("acc"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Var("v1"), Var("i"))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("v2"), Var("i"))
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))
// [Knf] build_knf: Array(Int(3), Double(1.23))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])]))
// [Knf] build_knf: Array(Int(3), Double(4.56))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%6), Insn(iref=%7)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%10)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Mem(fref=f0, mref=m0), Mem(fref=f0, mref=m1), Double(val=0), Int32(val=2)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _23 = acc.41
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.50
// [Main]   .type main.50, @function
// [Main] # leaf false
// [Main] main.50:
// [Main] .main.50_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4608218246714312622
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa0, 8(a0)
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   li a2, 4616820122002590269
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   fsd fa0, 8(a1)
// [Main]   fsd fa0, 16(a1)
// [Main]   fmv.d.x fa0, zero
// [Main]   li a2, 2
// [Main] 
// [Main] .main.50_2:
// [Main]   blt a2, zero, .main.50_4
// [Main] 
// [Main] .main.50_3:
// [Main]   slliw a3, a2, 3
// [Main]   add a4, a0, a3
// [Main]   fld fa1, 0(a4)
// [Main]   add a3, a1, a3
// [Main]   fld fa2, 0(a3)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   addi a2, a2, -1
// [Main]   j .main.50_2
// [Main] 
// [Main] .main.50_4:
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.50_5:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.50
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.50
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b2, bpref=$b.0), offset=BlockParam(bref=b2, bpref=$b.3), width=@64))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b2, bpref=$b.1), offset=BlockParam(bref=b2, bpref=$b.3), width=@64))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[BlockParam(bref=b2, bpref=$b.2), Insn(iref=%5)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%10)])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=1.23))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Init(val=Double(val=4.56))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering control Jump(target=b1, args=[Mem(fref=f0, mref=m0), Mem(fref=f0, mref=m1), Double(val=0), Int32(val=2)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.50 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: inprod.1 true
// [KnfOpt] func_tre: main.13 false
// [KnfOpt] freq: {inprod.1: Once, inprod.26: Many(2), main.13: Once}
// [KnfOpt] Inline threshold 19
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision inprod.1 accepted
// [KnfOpt] Knf inline Some(inprod) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_20, _23)
// [KnfOpt] let _25: Int = ExtApply(minimbt_truncate, [_24, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_25, ])
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt2] LVN subst Insn(iref=%12) with Insn(iref=%13)
