// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv14, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> fv4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> fv11, Insn(iref=%2) -> fv13, Insn(iref=%1) -> fv12, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> fv8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v16, Insn(iref=%0) -> v10, Insn(iref=%4) -> fv15
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.3)])
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0, fa0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa0, a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, fa0, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, a2, fv4, zero, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv4 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, fv4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v5, fv4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v6, v5, fv4, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, v6, v5, zero, fv8]
// [Asm] move_origin: [fv4]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [fv11]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv11 is F
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v7, fv8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23, v7, fv8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, v7, fv8, fv12, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v19]
// [Asm] live_set: [zero, v7, fv8, v19, fv12, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20, v7, fv8, fv12, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [zero, fv13, v7, fv8, fv12, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v6, fv15, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v6, v16, fv15, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v16, fv15, zero, v7]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v6, v16, fv15, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, v6, v16, zero, fv8]
// [Asm] move_origin: [fv15]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: [v16]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, fv8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inprod1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="v5 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="v22 ← a3", color=green];
// [Asm]   r6 [label="v6 ← a0", color=green];
// [Asm]   r13 [label="v16 ← a2", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v19 ← a3", color=green];
// [Asm]   r7 [label="v7 ← a1", color=green];
// [Asm]   r10 [label="v23 ← a3", color=green];
// [Asm]   r12 [label="v20 ← a3", color=green];
// [Asm]   r8 [label="v9 ← a2", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:a2-> 4:v3-> 3:zero-> 5:v5-> 6:v6-> 7:v7-> 8:v9-> 9:v22-> 10:v23-> 11:v19-> 12:v20-> 13:v16-> 2:a1"
// [Asm]   comment = "v2<-a0;v5<-a2;v22<-a3;v6<-a0;v16<-a2;v3<-a1;v19<-a3;v7<-a1;v23<-a3;v20<-a3;v9<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inprod1l0_0"];
// [Asm]   r0 [label="fa0", color=blue];
// [Asm]   r6 [label="fv15 ← fa0", color=green];
// [Asm]   r5 [label="fv13 ← fa2", color=green];
// [Asm]   r4 [label="fv12 ← fa1", color=green];
// [Asm]   r1 [label="fv4 ← fa0", color=green];
// [Asm]   r3 [label="fv11 ← fa0", color=green];
// [Asm]   r2 [label="fv8 ← fa0", color=green];
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r5;
// [Asm]   r4 -- r5;
// [Asm]   comment = "0:fa0-> 1:fv4-> 2:fv8-> 4:fv12-> 5:fv13-> 3:fv11-> 6:fv15"
// [Asm]   comment = "fv15<-fa0;fv13<-fa2;fv12<-fa1;fv4<-fa0;fv11<-fa0;fv8<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v22, v9, 3 ->   slliw a3, a2, 3
// [Asm] subst   add v23, v6, v22 ->   add a3, a0, a3
// [Asm] subst   fld fv12, 0(v23) ->   fld fa1, 0(a3)
// [Asm] subst   slliw v19, v9, 3 ->   slliw a3, a2, 3
// [Asm] subst   add v20, v7, v19 ->   add a3, a1, a3
// [Asm] subst   fld fv13, 0(v20) ->   fld fa2, 0(a3)
// [Asm] subst   fmadd.d fv15, fv12, fv13, fv8 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   addi v16, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   j .inprod1l0_0_0 ->   j .inprod1l0_0_0
// [Asm] subst   blt v9, zero, .inprod1l0_0_2 ->   blt a2, zero, .inprod1l0_0_2
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main17l1_1 ->   call main17l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, Insn(iref=%2) -> fv6, Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v2, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v24]
// [Asm] live_set: [s11, v24, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [fv25]
// [Asm] live_set: [s11, zero, fv25, v2]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv25, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv25, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, zero, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [v2, zero, fv21, v3]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [v2, zero, fv21, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, fv21, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [a1, fv15, a0]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [a1, a0, fa0]
// [Asm] move_origin: [fv15]
// [Asm] defined: fa0 is F
// [Asm] defs: [v16]
// [Asm] live_set: [a1, v16, a0, fa0]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, fa0]
// [Asm] move_origin: [v16]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv6]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [fv6]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, fv6]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [fv6, fv13]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main17l1_1"];
// [Asm]   r0 [label="v22 ← a0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v24 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="v20 ← a2", color=green];
// [Asm]   r10 [label="v16 ← a2", color=green];
// [Asm]   r22 [label="v12 ← a0", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v18 ← a1", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r8 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r14;
// [Asm]   r8 -- r20;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   comment = "0:v22-> 1:zero-> 2:v2-> 3:s11-> 4:v24-> 5:v18-> 6:v3-> 7:v20-> 8:a0-> 9:a1-> 10:v16-> 11:a2-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 22:v12-> 23:v8-> 24:v9"
// [Asm]   comment = "v22<-a0;v8<-a0;v3<-a1;v24<-a1;v20<-a2;v16<-a2;v12<-a0;v18<-a1;v9<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main17l1_1"];
// [Asm]   r0 [label="fv25 ← fa0", color=green];
// [Asm]   r20 [label="fa6", color=blue];
// [Asm]   r23 [label="fv13 ← fa1", color=green];
// [Asm]   r3 [label="fa0", color=blue];
// [Asm]   r9 [label="ft5", color=blue];
// [Asm]   r6 [label="ft2", color=blue];
// [Asm]   r13 [label="ft9", color=blue];
// [Asm]   r4 [label="ft0", color=blue];
// [Asm]   r1 [label="fv21 ← fa0", color=green];
// [Asm]   r11 [label="ft7", color=blue];
// [Asm]   r7 [label="ft3", color=blue];
// [Asm]   r10 [label="ft6", color=blue];
// [Asm]   r22 [label="fv6 ← fa0", color=green];
// [Asm]   r14 [label="ft10", color=blue];
// [Asm]   r8 [label="ft4", color=blue];
// [Asm]   r5 [label="ft1", color=blue];
// [Asm]   r15 [label="fa1", color=blue];
// [Asm]   r24 [label="fv7 ← fa0", color=green];
// [Asm]   r2 [label="fv15 ← fa0", color=green];
// [Asm]   r16 [label="fa2", color=blue];
// [Asm]   r18 [label="fa4", color=blue];
// [Asm]   r19 [label="fa5", color=blue];
// [Asm]   r21 [label="fa7", color=blue];
// [Asm]   r17 [label="fa3", color=blue];
// [Asm]   r12 [label="ft8", color=blue];
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r7;
// [Asm]   r3 -- r21;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:fv25-> 1:fv21-> 2:fv15-> 3:fa0-> 4:ft0-> 5:ft1-> 6:ft2-> 7:ft3-> 8:ft4-> 9:ft5-> 10:ft6-> 11:ft7-> 12:ft8-> 13:ft9-> 14:ft10-> 15:fa1-> 16:fa2-> 17:fa3-> 18:fa4-> 19:fa5-> 20:fa6-> 21:fa7-> 22:fv6-> 23:fv13-> 24:fv7"
// [Asm]   comment = "fv25<-fa0;fv13<-fa1;fv21<-fa0;fv6<-fa0;fv7<-fa0;fv15<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v22, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v2, v22, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v24, 4608218246714312622 ->   li a1, 4608218246714312622
// [Asm] subst   fmv.d.x fv25, v24 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv25, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv25, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   fsd fv25, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v18, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v3, v18, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   li v20, 4616820122002590269 ->   li a2, 4616820122002590269
// [Asm] subst   fmv.d.x fv21, v20 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv21, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   fsd fv21, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   fsd fv21, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   fmv.d.x fv15, zero ->   fmv.d.x fa0, zero
// [Asm] subst   li v16, 2 ->   li a2, 2
// [Asm] subst   call inprod1l0_0 ->   call inprod1l0_0
// [Asm] subst   li v12, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv13, v12 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv7, fv13, fv6 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v8, fv7, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main17l1_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] inprod1l0_0:
// [Asm] # block info: defs: [v2, v5, v7, fv8, fv4, v6, v9, v3], uses: [v3, v5, a0, fa0, a2, a1, fv4, v2], upward_exposed: [a2, a1, a0, fa0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero, fa0], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_5:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0, fa0]
// [Asm]   mv v2, a0  # live: [fa0, a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, fa0, a2, zero, v3]
// [Asm]   fmv.d fv4, fa0  # live: [v2, a2, fv4, zero, v3]
// [Asm]   mv v5, a2  # live: [v2, v5, fv4, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v6, v5, fv4, zero, v3]
// [Asm]   mv v7, v3  # live: [v6, v5, fv4, zero, v7]
// [Asm]   fmv.d fv8, fv4  # live: [v7, v6, v5, zero, fv8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [fv8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, fv8], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: [v6, v7, fv8, v9]
// [Asm] .inprod1l0_0_0:
// [Asm] # control
// [Asm]   blt v9, zero, .inprod1l0_0_2  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [v16, v20, v22, v23, fv13, fv8, v19, fv12, fv15, v9], uses: [v9, v16, v22, v23, v20, v7, fv13, fv8, v19, fv12, v6, fv15], upward_exposed: [fv8, v6, v9, v7], params_defs: []
// [Asm] # live_in: [v7, v6, v9, zero, fv8], live_out: [fv8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_1:
// [Asm]   slliw v22, v9, 3  # live: [zero, v22, v7, fv8, v6, v9]
// [Asm]   add v23, v6, v22  # live: [zero, v23, v7, fv8, v6, v9]
// [Asm]   fld fv12, 0(v23)  # live: [zero, v7, fv8, fv12, v6, v9]
// [Asm]   slliw v19, v9, 3  # live: [zero, v7, fv8, v19, fv12, v6, v9]
// [Asm]   add v20, v7, v19  # live: [zero, v20, v7, fv8, fv12, v6, v9]
// [Asm]   fld fv13, 0(v20)  # live: [zero, fv13, v7, fv8, fv12, v6, v9]
// [Asm]   fmadd.d fv15, fv12, fv13, fv8  # live: [v6, fv15, zero, v9, v7]
// [Asm]   addi v16, v9, -1  # live: [v6, v16, fv15, zero, v7]
// [Asm] # control
// [Asm]   mv v6, v6  # live: [v6, v16, fv15, zero, v7]
// [Asm]   mv v7, v7  # live: [v6, v16, fv15, zero, v7]
// [Asm]   fmv.d fv8, fv15  # live: [v7, v6, v16, zero, fv8]
// [Asm]   mv v9, v16  # live: [v7, v6, v9, zero, fv8]
// [Asm]   j .inprod1l0_0_0  # live: [v7, v6, v9, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [fv11], uses: [fv8], upward_exposed: [fv8], params_defs: []
// [Asm] # live_in: [fv8], live_out: [fv11]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_2:
// [Asm] # control
// [Asm]   fmv.d fv11, fv8  # live: [fv11]
// [Asm] 
// [Asm] # block info: defs: [fa0], uses: [fv11, fa0], upward_exposed: [fv11], params_defs: [fv11]
// [Asm] # live_in: [fv11], live_out: []
// [Asm] # block parameters: [fv11]
// [Asm] .inprod1l0_0_3:
// [Asm] # control
// [Asm]   fmv.d fa0, fv11  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main17l1_1:
// [Asm] # block info: defs: [v3, t1, v16, v22, ft0, ft1, a1, s11, v12, fv15, fa1, fa2, fv25, ft6, a4, v20, fa6, v8, a6, ft5, ft10, fv21, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, fv6, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, fv13, t4, t2, fv7, v2], uses: [v2, v3, v16, a0, v22, a2, a1, s11, v24, v12, fv15, fv6, v9, v18, fv25, zero, v20, fa0, fv13, v8, fv21, fv7], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main17l1_1_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v22, s11, -24  # live: [zero, v22]
// [Asm]   andi v2, v22, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [s11, zero, v2]
// [Asm]   li v24, 4608218246714312622  # live: [s11, v24, zero, v2]
// [Asm]   fmv.d.x fv25, v24  # live: [s11, zero, fv25, v2]
// [Asm]   fsd fv25, 0(v2)  # live: [s11, zero, fv25, v2]
// [Asm]   fsd fv25, 8(v2)  # live: [s11, zero, fv25, v2]
// [Asm]   fsd fv25, 16(v2)  # live: [s11, zero, v2]
// [Asm]   addi v18, s11, -24  # live: [v18, zero, v2]
// [Asm]   andi v3, v18, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v3  # live: [v2, zero, v3]
// [Asm]   li v20, 4616820122002590269  # live: [v2, zero, v20, v3]
// [Asm]   fmv.d.x fv21, v20  # live: [v2, zero, fv21, v3]
// [Asm]   fsd fv21, 0(v3)  # live: [v2, zero, fv21, v3]
// [Asm]   fsd fv21, 8(v3)  # live: [v2, zero, fv21, v3]
// [Asm]   fsd fv21, 16(v3)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, v2  # live: [a0, zero, v3]
// [Asm]   mv a1, v3  # live: [a1, a0, zero]
// [Asm]   fmv.d.x fv15, zero  # live: [a1, fv15, a0]
// [Asm]   fmv.d fa0, fv15  # live: [a1, a0, fa0]
// [Asm]   li v16, 2  # live: [a1, v16, a0, fa0]
// [Asm]   mv a2, v16  # live: [a2, a1, a0, fa0]
// [Asm]   call inprod1l0_0  # live: [fa0]
// [Asm]   fmv.d fv6, fa0  # live: [fv6]
// [Asm]   # restore_ctx2  # live: [fv6]
// [Asm]   li v12, 4696837146684686336  # live: [v12, fv6]
// [Asm]   fmv.d.x fv13, v12  # live: [fv6, fv13]
// [Asm]   fmul.d fv7, fv13, fv6  # live: [fv7]
// [Asm]   fcvt.w.d v8, fv7, rtz  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("acc", Double), ("i", Int)], body: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Var("acc"))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(0), Var("i")), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Var("acc"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(Var("acc"), Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Var("v1"), Var("i"))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("v2"), Var("i"))
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])))
// [Knf] build_knf: Array(Int(3), Double(1.23))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])]))
// [Knf] build_knf: Array(Int(3), Double(4.56))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Double(0), Int(2)])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main17l1_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inprod1l0_0
// [Main]   .type inprod1l0_0, @function
// [Main] # leaf true
// [Main] inprod1l0_0:
// [Main] .inprod1l0_0_5:
// [Main] 
// [Main] .inprod1l0_0_0:
// [Main]   blt a2, zero, .inprod1l0_0_2
// [Main] 
// [Main] .inprod1l0_0_1:
// [Main]   slliw a3, a2, 3
// [Main]   add a3, a0, a3
// [Main]   fld fa1, 0(a3)
// [Main]   slliw a3, a2, 3
// [Main]   add a3, a1, a3
// [Main]   fld fa2, 0(a3)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   addi a2, a2, -1
// [Main]   j .inprod1l0_0_0
// [Main] 
// [Main] .inprod1l0_0_2:
// [Main] 
// [Main] .inprod1l0_0_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main17l1_1
// [Main]   .type main17l1_1, @function
// [Main] # leaf false
// [Main] main17l1_1:
// [Main] .main17l1_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 4608218246714312622
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa0, 8(a0)
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   li a2, 4616820122002590269
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   fsd fa0, 8(a1)
// [Main]   fsd fa0, 16(a1)
// [Main]   fmv.d.x fa0, zero
// [Main]   li a2, 2
// [Main]   call inprod1l0_0
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function inprod1l0_0
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b0, bpref=$b.0), offset=BlockParam(bref=b0, bpref=$b.3), width=@64))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.3), width=@64))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[BlockParam(bref=b0, bpref=$b.2), Insn(iref=%3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function inprod1l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function main17l1_1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=1.23))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Init(val=Double(val=4.56))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Mem(fref=f1, mref=m0), Mem(fref=f1, mref=m1), Double(val=0), Int32(val=2)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main17l1_1 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Double, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%4), Insn(iref=%5)])
