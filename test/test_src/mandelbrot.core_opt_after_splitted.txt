# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn iloop29.137 #f0 : fn(int32, double, double, double, double, double, double) -> unit
.freevars ()
.entry b8 {
  .bb #b0 (int32, double, double, double, double, double, double) {
    let %0: bool = eq($b0.0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_int(1)
    jump b6(%1)
  }
  .bb #b2 () {
    let %2: double = sub($b0.3, $b0.4)
    let %3: double = add(%2, $b0.5)
    let %4: double = add($b0.1, $b0.1)
    let %5: double = mul(%4, $b0.2)
    let %6: double = add(%5, $b0.6)
    let %7: double = mul(%3, %3)
    let %8: double = mul(%6, %6)
    let %9: double = mul(2, 2)
    let %10: double = add(%7, %8)
    let %11: bool = le(%9, %10)
    br %11 b3() b4()
  }
  .bb #b3 () {
    let %12: unit = ext_call minimbt_print_int(0)
    jump b5(%12)
  }
  .bb #b4 () {
    let %13: int32 = sub($b0.0, 1)
    jump b0(%13, %3, %6, %7, %8, $b0.5, $b0.6)
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1, $f2, $f3, $f4, $f5, $f6)
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn yloop7.135 #f2 : fn(int32, int32, double, double) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, double, double) {
    let %0: bool = le($b0.1, $b0.0)
    br %0 b3(()) b2()
  }
  .bb #b2 () {
    let %1: double = conv.i2d($b0.0)
    let %2: unit = call f1(0, $b0.0, $b0.1, $b0.2, %1, $b0.3)
    jump b6(%2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
  .bb #b6 (unit) {
    let %3: int32 = add($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2, $b0.3)
  }
}
.fn main75.134 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = conv.i2d(40)
    let %1: double = conv.i2d(40)
    let %2: unit = call f2(0, 40, %0, %1)
    return %2
  }
}
.fn xloop10.136 #f1 : fn(int32, int32, int32, double, double, double) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, double, double, double) {
    let %0: bool = le($b0.2, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: unit = ext_call minimbt_print_endline()
    jump b3(())
  }
  .bb #b2 () {
    let %2: double = conv.i2d($b0.0)
    let %3: double = add(%2, %2)
    let %4: double = div(%3, $b0.3)
    let %5: double = sub(%4, 1.5)
    let %6: double = add($b0.4, $b0.4)
    let %7: double = div(%6, $b0.5)
    let %8: double = sub(%7, 1)
    let %9: unit = call f0(1000, 0, 0, 0, 0, %5, %8)
    jump b6(%9)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3, $f4, $f5)
  }
  .bb #b6 (unit) {
    let %10: int32 = add($b0.0, 1)
    jump b0(%10, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
}
.thunk ::0 start

