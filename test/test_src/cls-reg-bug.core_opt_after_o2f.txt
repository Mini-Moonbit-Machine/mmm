# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn h.41 #f1 : fn((int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %1: int32 = load int32 field($f0, 1 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %2: int32 = load int32 field($f0, 2 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %3: int32 = load int32 field($f0, 3 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %4: int32 = load int32 field($f0, 4 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %5: int32 = load int32 field($f0, 5 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %6: int32 = load int32 field($f0, 6 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %7: int32 = load int32 field($f0, 7 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %8: int32 = load int32 field($f0, 8 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %9: int32 = load int32 field($f0, 9 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %10: int32 = call f0(1, %0, %1, %2, %3, %4, %5, %6, %7, %8, %9)
    return %10
  }
}
.fn main.43 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32) heap(10)> <- [0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9, [9] = 10
    let %1: int32 = call f1(f2.m0)
    let %2: unit = ext_call minimbt_print_int(%1)
    return ()
  }
}
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn g.42 #f0 : fn(int32, int32, int32, int32, int32, int32, int32, int32, int32, int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f1, $f2)
    let %1: int32 = add(%0, $f3)
    let %2: int32 = add(%1, $f4)
    let %3: int32 = add(%2, $f5)
    let %4: int32 = add(%3, $f6)
    let %5: int32 = add(%4, $f7)
    let %6: int32 = add(%5, $f8)
    let %7: int32 = add(%6, $f9)
    let %8: int32 = add(%7, $f10)
    let %9: bool = le($f0, 0)
    br %9 b1() b2()
  }
  .bb #b1 () {
    let %10: int32 = neg($f0)
    let %11: int32 = call f0(%10, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10)
    jump b3(%11)
  }
  .bb #b2 () {
    jump b3(%8)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.thunk ::0 start
