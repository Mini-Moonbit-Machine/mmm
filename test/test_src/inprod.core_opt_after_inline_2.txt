# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.102 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: #(double, double, double) = pack 1, 2, 3
    let %1: #(double, double, double) = pack 4, 5, 6
    let %2: double = extract %0 0
    let %3: double = extract %0 1
    let %4: double = extract %0 2
    let %5: double = extract %1 0
    let %6: double = extract %1 1
    let %7: double = extract %1 2
    let %8: double = mul(%2, %5)
    let %9: double = extract %0 0
    let %10: double = extract %0 1
    let %11: double = extract %0 2
    let %12: double = extract %1 0
    let %13: double = extract %1 1
    let %14: double = extract %1 2
    let %15: double = mul(%10, %13)
    let %16: double = add(%8, %15)
    let %17: double = extract %0 0
    let %18: double = extract %0 1
    let %19: double = extract %0 2
    let %20: double = extract %1 0
    let %21: double = extract %1 1
    let %22: double = extract %1 2
    let %23: double = mul(%19, %22)
    let %24: double = add(%16, %23)
    let %25: double = mul(1000000, %24)
    let %26: int32 = conv.d2i.rtz(%25)
    let %27: unit = ext_call minimbt_print_int(%26)
    return %27
  }
}
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.thunk ::0 start

