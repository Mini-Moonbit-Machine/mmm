let rec aux.1: Unit = (x.3: Enum IntOpt { None(), Some(Int) }) {
  let _4: Int = Int(0)
  let (_5: Int, _6: ()) = x.3
  let _21: Unit = if (_5 == _4) then {
    let () = _6
    let _7: String = String("None")
    ExtApply(minimbt_print_string, [_7, ])
  } else {
    let _8: Int = Int(1)
    let (_9: Int, _10: (Int)) = x.3
    if (_9 == _8) then {
      let (_11: Int) = _10
      let _12: String = String("Some(")
      let _14: Unit = ExtApply(minimbt_print_string, [_12, ])
      let _16: Unit = ExtApply(minimbt_print_int, [_11, ])
      let _17: String = String(")")
      let _19: Unit = ExtApply(minimbt_print_string, [_17, ])
      Unit
    } else {
      ExtApply(minimbt_panic, [])
    }
  }
  Unit
}
let D$Print.22: ((Enum IntOpt { None(), Some(Int) }) -> Unit) = Tuple([aux.1, ])
let rec println.24: Unit = (dict.23: ((T) -> Unit), x.26: X) {
  let (_27: (T) -> Unit) = dict.23
  let _29: Unit = Apply(_27, [x.26, ])
  let _30: String = String("\n")
  let _32: Unit = ExtApply(minimbt_print_string, [_30, ])
  Unit
}
let rec main.33: Unit = () {
  let _34: Int = Int(3)
  let _35: Int = Int(0)
  let _36: () = Tuple([])
  let _37: Enum IntOpt { None(), Some(Int) } = Tuple([_35, _36, ])
  let _array.38: Array[Enum IntOpt { None(), Some(Int) }] = ExtApply(minimbt_create_ptr_array, [_34, _37, ])
  let _39: Int = Int(1)
  let _40: Int = Int(1)
  let _41: Int = Int(1)
  let _42: (Int) = Tuple([_41, ])
  let _43: Enum IntOpt { None(), Some(Int) } = Tuple([_40, _42, ])
  let _45: Unit = Put _array.38[_39] = _43
  let _46: Int = Int(2)
  let _47: Int = Int(1)
  let _48: Int = Int(2)
  let _49: (Int) = Tuple([_48, ])
  let _50: Enum IntOpt { None(), Some(Int) } = Tuple([_47, _49, ])
  let _52: Unit = Put _array.38[_46] = _50
  let _53: Int = Int(0)
  let _54: Enum IntOpt { None(), Some(Int) } = Get _array.38[_53]
  let _56: Unit = Apply(println.24, [D$Print.22, _54, ])
  let _57: Int = Int(1)
  let _58: Enum IntOpt { None(), Some(Int) } = Get _array.38[_57]
  let _60: Unit = Apply(println.24, [D$Print.22, _58, ])
  let _61: Int = Int(2)
  let _62: Enum IntOpt { None(), Some(Int) } = Get _array.38[_61]
  let _64: Unit = Apply(println.24, [D$Print.22, _62, ])
  Unit
}
Apply(main.33, [])
