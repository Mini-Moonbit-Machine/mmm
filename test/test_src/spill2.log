// [Main] function thunk_main(k) {
// [Main]   function f_1(k) {
// [Main]     return $thunk(() => k(12345))
// [Main]   }
// [Main]   function g_2(y_4, k) {
// [Main]     const _5 = 1;
// [Main]     return $thunk(() => k(y_4 + _5))
// [Main]   }
// [Main]   function main_6(k) {
// [Main]     const _7 = 10;
// [Main]     const _8 = 1;
// [Main]     return $thunk(() => $external(minimbt_create_array, function (z_9) {
// [Main]       return $thunk(() => f_1(function (x_10) {
// [Main]         const y_11 = 67890;
// [Main]         const _12 = 0;
// [Main]         const z0_13 = z_9[_12];
// [Main]         const z1_14 = z0_13 + z0_13;
// [Main]         const z2_15 = z1_14 + z1_14;
// [Main]         const z3_16 = z2_15 + z2_15;
// [Main]         const z4_17 = z3_16 + z3_16;
// [Main]         const z5_18 = z4_17 + z4_17;
// [Main]         const z6_19 = z5_18 + z5_18;
// [Main]         const z7_20 = z6_19 + z6_19;
// [Main]         const z8_21 = z7_20 + z7_20;
// [Main]         const z9_22 = z8_21 + z8_21;
// [Main]         const z10_23 = z9_22 + z9_22;
// [Main]         const z11_24 = z10_23 + z10_23;
// [Main]         const z12_25 = z11_24 + z11_24;
// [Main]         const z13_26 = z12_25 + z12_25;
// [Main]         const z14_27 = z13_26 + z13_26;
// [Main]         const z15_28 = z14_27 + z14_27;
// [Main]         const _29 = 1;
// [Main]         const _30 = z_9[_29];
// [Main]         const _31 = 0;
// [Main]         function j0(_47) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           , _47))
// [Main]         }
// [Main]         if (_30 === _31) {
// [Main]           return $thunk(() => g_2(y_11, function (x) {
// [Main]             return $thunk(() => j0(x))
// [Main]           }
// [Main]           ))
// [Main]         } else {
// [Main]           const _32 = z0_13 + z1_14;
// [Main]           const _33 = _32 + z2_15;
// [Main]           const _34 = _33 + z3_16;
// [Main]           const _35 = _34 + z4_17;
// [Main]           const _36 = _35 + z5_18;
// [Main]           const _37 = _36 + z6_19;
// [Main]           const _38 = _37 + z7_20;
// [Main]           const _39 = _38 + z8_21;
// [Main]           const _40 = _39 + z9_22;
// [Main]           const _41 = _40 + z10_23;
// [Main]           const _42 = _41 + z11_24;
// [Main]           const _43 = _42 + z12_25;
// [Main]           const _44 = _43 + z13_26;
// [Main]           const _45 = _44 + z14_27;
// [Main]           const _46 = _45 + z15_28;
// [Main]           return $thunk(() => j0(_46 + x_10))
// [Main]         }
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     , _7, _8))
// [Main]   }
// [Main]   return $thunk(() => main_6(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [], body: Int(12345)}, LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(12345) against Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("y"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))
// [Typer] infer: Array(Int(10), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))))))))
// [Typer] infer: App(Var("f"), [])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))
// [Typer] infer: Int(67890)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))))))
// [Typer] infer: Get(Var("z"), Int(0))
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))
// [Typer] infer: Prim(Var("z0"), Var("z0"), Add, kind=None)
// [Typer] infer: Var("z0")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z0")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))))
// [Typer] infer: Prim(Var("z1"), Var("z1"), Add, kind=None)
// [Typer] infer: Var("z1")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z1")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))
// [Typer] infer: Prim(Var("z2"), Var("z2"), Add, kind=None)
// [Typer] infer: Var("z2")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z2")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))
// [Typer] infer: Prim(Var("z3"), Var("z3"), Add, kind=None)
// [Typer] infer: Var("z3")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z3")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))
// [Typer] infer: Prim(Var("z4"), Var("z4"), Add, kind=None)
// [Typer] infer: Var("z4")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z4")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))
// [Typer] infer: Prim(Var("z5"), Var("z5"), Add, kind=None)
// [Typer] infer: Var("z5")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z5")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))
// [Typer] infer: Prim(Var("z6"), Var("z6"), Add, kind=None)
// [Typer] infer: Var("z6")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z6")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))
// [Typer] infer: Prim(Var("z7"), Var("z7"), Add, kind=None)
// [Typer] infer: Var("z7")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z7")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))
// [Typer] infer: Prim(Var("z8"), Var("z8"), Add, kind=None)
// [Typer] infer: Var("z8")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z8")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))
// [Typer] infer: Prim(Var("z9"), Var("z9"), Add, kind=None)
// [Typer] infer: Var("z9")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z9")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))
// [Typer] infer: Prim(Var("z10"), Var("z10"), Add, kind=None)
// [Typer] infer: Var("z10")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z10")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))
// [Typer] infer: Prim(Var("z11"), Var("z11"), Add, kind=None)
// [Typer] infer: Var("z11")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z11")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))
// [Typer] infer: Prim(Var("z12"), Var("z12"), Add, kind=None)
// [Typer] infer: Var("z12")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z12")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))
// [Typer] infer: Prim(Var("z13"), Var("z13"), Add, kind=None)
// [Typer] infer: Var("z13")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z13")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))
// [Typer] infer: Prim(Var("z14"), Var("z14"), Add, kind=None)
// [Typer] infer: Var("z14")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z14")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None)) against Int
// [Typer] check: Eq(Get(Var("z"), Int(1)), Int(0)) against Bool
// [Typer] infer: Get(Var("z"), Int(1))
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(1) against Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: App(Var("g"), [Var("y")]) against Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] check: Var("g") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None) against Int
// [Typer] check: Prim(Var("z0"), Var("z1"), Add, kind=None) against Int
// [Typer] check: Var("z0") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z1") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z2") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z3") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z4") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z5") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z6") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z7") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z8") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z9") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z10") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z11") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z12") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z13") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z14") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z15") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
