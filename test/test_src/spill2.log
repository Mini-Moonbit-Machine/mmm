// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 0)])
// [Asm] LoweringOrder: [b0, b2, b3, b1]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%33) -> v36, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%4) -> v7, Insn(iref=%32) -> v35, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%31) -> v34, Insn(iref=%35) -> v39, Self(fref=f0) -> v0, Insn(iref=%28) -> v31, BlockParam(bref=b3, bpref=$b.0) -> v38, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%29) -> v32, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%19) -> v22, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Insn(iref=%7) -> v10, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%2) -> v5, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%20) -> v23, Insn(iref=%30) -> v33, Insn(iref=%21) -> v24, Insn(iref=%34) -> v37, Insn(iref=%12) -> v15
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%17), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [v38]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v38
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move: v39 <- a0
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v39]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v39
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v16, v14, v10, v13, v22, v7, v17, v12, v9, v18, v8, v19, v6, v15]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, v23, v8, v19, v15]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v16, v14, v18, v10, v13, v8, v19, v17, v15, v12, v24, v9]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v16, v14, v18, v10, v13, v19, v17, v15, v12, v9]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v16, v14, v18, v10, v26, v13, v19, v17, v15, v12]
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v16, v14, v18, v13, v27, v19, v17, v15, v12]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v16, v14, v18, v13, v19, v17, v15, v12, v28]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v16, v14, v18, v29, v13, v19, v17, v15]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v16, v14, v18, v30, v19, v17, v15]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v19, v17, v16, v18, v15, v31]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v19, v32, v17, v16, v18]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v19, v17, v18, v33]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v19, v18, v34]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v19, v35]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] defined: v36 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v42, v36]
// [Asm] defined: v42 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move: v38 <- v37
// [Asm] defined: v38 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v41]
// [Asm] defined: v41 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move: v38 <- v41
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v38]
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v77]
// [Asm] live_set: [zero, v77, v2]
// [Asm] defined: v77 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v77, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6, v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v7, zero, v4, v6, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, v7, zero, v8, v4, v6, v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v7, v9, zero, v8, v4, v6, v2]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v2]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v19, v4, v6, v15, v2]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15]
// [Asm] Label("main.49") clobbered_x: @hashset.of([t1, a5, a0, s1, s2, a2, a1, s3, a3, t3, a7, t0, a4, a6, t4, s0, t2])
// [Asm] Label("main.49") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   add v22, v4, v5 ->   add a0, a0, a1
// [Asm] subst   add v23, v22, v6 ->   add a0, a0, s1
// [Asm] subst   add v24, v23, v7 ->   add a0, a0, a7
// [Asm] subst   add v25, v24, v8 ->   add a0, a0, t4
// [Asm] subst   add v26, v25, v9 ->   add a0, a0, t2
// [Asm] subst   add v27, v26, v10 ->   add a0, a0, a5
// [Asm] subst   add v28, v27, v11 ->   add a0, a0, a2
// [Asm] subst   add v29, v28, v12 ->   add a0, a0, t1
// [Asm] subst   add v30, v29, v13 ->   add a0, a0, a6
// [Asm] subst   add v31, v30, v14 ->   add a0, a0, a4
// [Asm] subst   add v32, v31, v15 ->   add a0, a0, s2
// [Asm] subst   add v33, v32, v16 ->   add a0, a0, a3
// [Asm] subst   add v34, v33, v17 ->   add a0, a0, t0
// [Asm] subst   add v35, v34, v18 ->   add a0, a0, t3
// [Asm] subst   add v36, v35, v19 ->   add a0, a0, s0
// [Asm] subst   li v42, 12345 ->   li a1, 12345
// [Asm] subst   add v37, v36, v42 ->   add a0, a0, a1
// [Asm] subst   li v41, 67891 ->   li a0, 67891
// [Asm] subst   j .main.49_3 ->   j .main.49_3
// [Asm] subst   addi v2, s11, -40 ->   addi s3, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s3, -8
// [Asm] subst   li v77, 1 ->   li a0, 1
// [Asm] subst   sw v77, 0(v2) ->   sw a0, 0(s3)
// [Asm] subst   sw v77, 4(v2) ->   sw a0, 4(s3)
// [Asm] subst   sw v77, 8(v2) ->   sw a0, 8(s3)
// [Asm] subst   sw v77, 12(v2) ->   sw a0, 12(s3)
// [Asm] subst   sw v77, 16(v2) ->   sw a0, 16(s3)
// [Asm] subst   sw v77, 20(v2) ->   sw a0, 20(s3)
// [Asm] subst   sw v77, 24(v2) ->   sw a0, 24(s3)
// [Asm] subst   sw v77, 28(v2) ->   sw a0, 28(s3)
// [Asm] subst   sw v77, 32(v2) ->   sw a0, 32(s3)
// [Asm] subst   sw v77, 36(v2) ->   sw a0, 36(s3)
// [Asm] subst   lw v4, 0(v2) ->   lw a0, 0(s3)
// [Asm] subst   add v5, v4, v4 ->   add a1, a0, a0
// [Asm] subst   add v6, v5, v5 ->   add s1, a1, a1
// [Asm] subst   add v7, v6, v6 ->   add a7, s1, s1
// [Asm] subst   add v8, v7, v7 ->   add t4, a7, a7
// [Asm] subst   add v9, v8, v8 ->   add t2, t4, t4
// [Asm] subst   add v10, v9, v9 ->   add a5, t2, t2
// [Asm] subst   add v11, v10, v10 ->   add a2, a5, a5
// [Asm] subst   add v12, v11, v11 ->   add t1, a2, a2
// [Asm] subst   add v13, v12, v12 ->   add a6, t1, t1
// [Asm] subst   add v14, v13, v13 ->   add a4, a6, a6
// [Asm] subst   add v15, v14, v14 ->   add s2, a4, a4
// [Asm] subst   add v16, v15, v15 ->   add a3, s2, s2
// [Asm] subst   add v17, v16, v16 ->   add t0, a3, a3
// [Asm] subst   add v18, v17, v17 ->   add t3, t0, t0
// [Asm] subst   add v19, v18, v18 ->   add s0, t3, t3
// [Asm] subst   lw v20, 4(v2) ->   lw s3, 4(s3)
// [Asm] subst   beq v20, zero, .main.49_1 ->   beq s3, zero, .main.49_1
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main.49:
// [Asm] # block info: defs: [v11, v5, v14, v16, v10, v13, v7, v17, s11, v12, v9, v18, v77, v20, v8, v19, v4, v6, v15, v2], uses: [v11, v5, v14, v16, v10, v13, v7, v17, s11, v12, v9, v18, zero, v77, v20, v8, v4, v6, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15]
// [Asm] # block parameters: []
// [Asm] .main.49_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v77, 1  # live: [zero, v77, v2]
// [Asm]   sw v77, 0(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 4(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 8(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 12(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 16(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 20(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 24(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 28(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 32(v2)  # live: [zero, v77, v2]
// [Asm]   sw v77, 36(v2)  # live: [zero, v2]
// [Asm]   lw v4, 0(v2)  # live: [zero, v4, v2]
// [Asm]   add v5, v4, v4  # live: [v5, zero, v4, v2]
// [Asm]   add v6, v5, v5  # live: [v5, zero, v4, v6, v2]
// [Asm]   add v7, v6, v6  # live: [v5, v7, zero, v4, v6, v2]
// [Asm]   add v8, v7, v7  # live: [v5, v7, zero, v8, v4, v6, v2]
// [Asm]   add v9, v8, v8  # live: [v5, v7, v9, zero, v8, v4, v6, v2]
// [Asm]   add v10, v9, v9  # live: [v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm]   add v11, v10, v10  # live: [v11, v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm]   add v12, v11, v11  # live: [v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm]   add v13, v12, v12  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm]   add v14, v13, v13  # live: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm]   add v15, v14, v14  # live: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm]   add v16, v15, v15  # live: [v11, v5, v14, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm]   add v17, v16, v16  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm]   add v18, v17, v17  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v2]
// [Asm]   add v19, v18, v18  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v19, v4, v6, v15, v2]
// [Asm]   lw v20, 4(v2)  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
// [Asm] # control
// [Asm]   beq v20, zero, .main.49_1  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15]
// [Asm] 
// [Asm] # block info: defs: [v25, v26, v42, v30, v22, v36, v32, v37, v24, v28, v31, v33, v29, v23, v27, v35, v38, v34], uses: [v25, v14, v16, v13, v26, v42, v22, v7, v32, v12, v28, v33, v29, v27, v8, v19, v4, v6, v34, v11, v5, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v15], upward_exposed: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15], params_defs: []
// [Asm] # live_in: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15], live_out: [v38]
// [Asm] # block parameters: []
// [Asm] .main.49_2:
// [Asm]   add v22, v4, v5  # live: [v11, v16, v14, v10, v13, v22, v7, v17, v12, v9, v18, v8, v19, v6, v15]
// [Asm]   add v23, v22, v6  # live: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, v23, v8, v19, v15]
// [Asm]   add v24, v23, v7  # live: [v11, v16, v14, v18, v10, v13, v8, v19, v17, v15, v12, v24, v9]
// [Asm]   add v25, v24, v8  # live: [v11, v25, v16, v14, v18, v10, v13, v19, v17, v15, v12, v9]
// [Asm]   add v26, v25, v9  # live: [v11, v16, v14, v18, v10, v26, v13, v19, v17, v15, v12]
// [Asm]   add v27, v26, v10  # live: [v11, v16, v14, v18, v13, v27, v19, v17, v15, v12]
// [Asm]   add v28, v27, v11  # live: [v16, v14, v18, v13, v19, v17, v15, v12, v28]
// [Asm]   add v29, v28, v12  # live: [v16, v14, v18, v29, v13, v19, v17, v15]
// [Asm]   add v30, v29, v13  # live: [v16, v14, v18, v30, v19, v17, v15]
// [Asm]   add v31, v30, v14  # live: [v19, v17, v16, v18, v15, v31]
// [Asm]   add v32, v31, v15  # live: [v19, v32, v17, v16, v18]
// [Asm]   add v33, v32, v16  # live: [v19, v17, v18, v33]
// [Asm]   add v34, v33, v17  # live: [v19, v18, v34]
// [Asm]   add v35, v34, v18  # live: [v19, v35]
// [Asm]   add v36, v35, v19  # live: [v36]
// [Asm]   li v42, 12345  # live: [v42, v36]
// [Asm]   add v37, v36, v42  # live: [v37]
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v38]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v38, a0, v39], upward_exposed: [v38], params_defs: [v38]
// [Asm] # live_in: [v38], live_out: []
// [Asm] # block parameters: [v38]
// [Asm] .main.49_3:
// [Asm]   # save_ctx2  # live: [v38]
// [Asm]   mv a0, v38  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v39, a0  # live: [v39]
// [Asm]   # restore_ctx2  # live: [v39]
// [Asm] # control
// [Asm]   mv a0, v39  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v41, v38], uses: [v41], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v38]
// [Asm] # block parameters: []
// [Asm] .main.49_1:
// [Asm] # control
// [Asm]   li v41, 67891  # live: [v41]
// [Asm]   mv v38, v41  # live: [v38]
// [Asm]   j .main.49_3  # live: [v38]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.49  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.49
// [Main]   .type main.49, @function
// [Main] # leaf false
// [Main] main.49:
// [Main] .main.49_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   addi s3, s11, -40
// [Main]   andi s11, s3, -8
// [Main]   li a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   sw a0, 4(s3)
// [Main]   sw a0, 8(s3)
// [Main]   sw a0, 12(s3)
// [Main]   sw a0, 16(s3)
// [Main]   sw a0, 20(s3)
// [Main]   sw a0, 24(s3)
// [Main]   sw a0, 28(s3)
// [Main]   sw a0, 32(s3)
// [Main]   sw a0, 36(s3)
// [Main]   lw a0, 0(s3)
// [Main]   add a1, a0, a0
// [Main]   add s1, a1, a1
// [Main]   add a7, s1, s1
// [Main]   add t4, a7, a7
// [Main]   add t2, t4, t4
// [Main]   add a5, t2, t2
// [Main]   add a2, a5, a5
// [Main]   add t1, a2, a2
// [Main]   add a6, t1, t1
// [Main]   add a4, a6, a6
// [Main]   add s2, a4, a4
// [Main]   add a3, s2, s2
// [Main]   add t0, a3, a3
// [Main]   add t3, t0, t0
// [Main]   add s0, t3, t3
// [Main]   lw s3, 4(s3)
// [Main]   beq s3, zero, .main.49_1
// [Main] 
// [Main] .main.49_2:
// [Main]   add a0, a0, a1
// [Main]   add a0, a0, s1
// [Main]   add a0, a0, a7
// [Main]   add a0, a0, t4
// [Main]   add a0, a0, t2
// [Main]   add a0, a0, a5
// [Main]   add a0, a0, a2
// [Main]   add a0, a0, t1
// [Main]   add a0, a0, a6
// [Main]   add a0, a0, a4
// [Main]   add a0, a0, s2
// [Main]   add a0, a0, a3
// [Main]   add a0, a0, t0
// [Main]   add a0, a0, t3
// [Main]   add a0, a0, s0
// [Main]   li a1, 12345
// [Main]   add a0, a0, a1
// [Main] 
// [Main] .main.49_3:
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main.49_1:
// [Main]   li a0, 67891
// [Main]   j .main.49_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.49
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [], body: Int(12345)}, LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(12345) against Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("y"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("z", Var(None)), Array(Int(10), Int(1)), Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))))
// [Typer] infer: Array(Int(10), Int(1))
// [Typer] infer: Int(1)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: Let(("x", Var(None)), App(Var("f"), []), Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))))))))
// [Typer] infer: App(Var("f"), [])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("y", Var(None)), Int(67890), Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))))
// [Typer] infer: Int(67890)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z0", Var(None)), Get(Var("z"), Int(0)), Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))))))
// [Typer] infer: Get(Var("z"), Int(0))
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z1", Var(None)), Prim(Var("z0"), Var("z0"), Add, kind=None), Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))))
// [Typer] infer: Prim(Var("z0"), Var("z0"), Add, kind=None)
// [Typer] infer: Var("z0")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z0")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z2", Var(None)), Prim(Var("z1"), Var("z1"), Add, kind=None), Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))))
// [Typer] infer: Prim(Var("z1"), Var("z1"), Add, kind=None)
// [Typer] infer: Var("z1")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z1")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z3", Var(None)), Prim(Var("z2"), Var("z2"), Add, kind=None), Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))))
// [Typer] infer: Prim(Var("z2"), Var("z2"), Add, kind=None)
// [Typer] infer: Var("z2")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z2")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z4", Var(None)), Prim(Var("z3"), Var("z3"), Add, kind=None), Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))))
// [Typer] infer: Prim(Var("z3"), Var("z3"), Add, kind=None)
// [Typer] infer: Var("z3")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z3")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z5", Var(None)), Prim(Var("z4"), Var("z4"), Add, kind=None), Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))))
// [Typer] infer: Prim(Var("z4"), Var("z4"), Add, kind=None)
// [Typer] infer: Var("z4")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z4")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z6", Var(None)), Prim(Var("z5"), Var("z5"), Add, kind=None), Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))))
// [Typer] infer: Prim(Var("z5"), Var("z5"), Add, kind=None)
// [Typer] infer: Var("z5")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z5")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z7", Var(None)), Prim(Var("z6"), Var("z6"), Add, kind=None), Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))))
// [Typer] infer: Prim(Var("z6"), Var("z6"), Add, kind=None)
// [Typer] infer: Var("z6")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z6")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z8", Var(None)), Prim(Var("z7"), Var("z7"), Add, kind=None), Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))))
// [Typer] infer: Prim(Var("z7"), Var("z7"), Add, kind=None)
// [Typer] infer: Var("z7")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z7")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z9", Var(None)), Prim(Var("z8"), Var("z8"), Add, kind=None), Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))))
// [Typer] infer: Prim(Var("z8"), Var("z8"), Add, kind=None)
// [Typer] infer: Var("z8")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z8")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z10", Var(None)), Prim(Var("z9"), Var("z9"), Add, kind=None), Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))))
// [Typer] infer: Prim(Var("z9"), Var("z9"), Add, kind=None)
// [Typer] infer: Var("z9")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z9")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z11", Var(None)), Prim(Var("z10"), Var("z10"), Add, kind=None), Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))))
// [Typer] infer: Prim(Var("z10"), Var("z10"), Add, kind=None)
// [Typer] infer: Var("z10")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z10")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z12", Var(None)), Prim(Var("z11"), Var("z11"), Add, kind=None), Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))))
// [Typer] infer: Prim(Var("z11"), Var("z11"), Add, kind=None)
// [Typer] infer: Var("z11")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z11")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z13", Var(None)), Prim(Var("z12"), Var("z12"), Add, kind=None), Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))))
// [Typer] infer: Prim(Var("z12"), Var("z12"), Add, kind=None)
// [Typer] infer: Var("z12")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z12")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z14", Var(None)), Prim(Var("z13"), Var("z13"), Add, kind=None), Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])))
// [Typer] infer: Prim(Var("z13"), Var("z13"), Add, kind=None)
// [Typer] infer: Var("z13")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z13")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("z15", Var(None)), Prim(Var("z14"), Var("z14"), Add, kind=None), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))]))
// [Typer] infer: Prim(Var("z14"), Var("z14"), Add, kind=None)
// [Typer] infer: Var("z14")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("z14")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None)) against Int
// [Typer] check: Eq(Get(Var("z"), Int(1)), Int(0)) against Bool
// [Typer] infer: Get(Var("z"), Int(1))
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] check: Int(1) against Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: App(Var("g"), [Var("y")]) against Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] check: Var("g") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None) against Int
// [Typer] check: Prim(Var("z0"), Var("z1"), Add, kind=None) against Int
// [Typer] check: Var("z0") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z1") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z2") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z3") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z4") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z5") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z6") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z7") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z8") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z9") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z10") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z11") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z12") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z13") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z14") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("z15") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {f.1: Once, g.2: Once, main.6: Once}
// [KnfOpt] Knf inline Some(f)
// [KnfOpt] Knf inline Some(g)
// [KnfOpt] freq: {main.6: Once}
// [KnfOpt] freq: {main.6: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_7: MayEscape, _8: MayEscape, _47: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.49 false true true false true
