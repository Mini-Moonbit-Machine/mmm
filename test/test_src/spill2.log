// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%33) -> v34, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v28, Insn(iref=%14) -> v17, Insn(iref=%25) -> v26, Insn(iref=%4) -> v7, Insn(iref=%32) -> v33, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v27, Insn(iref=%6) -> v9, Insn(iref=%31) -> v32, Insn(iref=%35) -> v36, Self(fref=f0) -> v0, Insn(iref=%28) -> v29, BlockParam(bref=b3, bpref=$b.0) -> v41, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v25, Insn(iref=%37) -> v38, Insn(iref=%29) -> v30, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%19) -> v39, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Insn(iref=%7) -> v10, Insn(iref=%22) -> v23, Insn(iref=%17) -> v20, Insn(iref=%23) -> v24, Insn(iref=%2) -> v5, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%20) -> v40, Insn(iref=%30) -> v31, Insn(iref=%21) -> v22, Insn(iref=%34) -> v35, Insn(iref=%36) -> v37, Insn(iref=%12) -> v15
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%17), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v41]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v16, v14, v10, v13, v22, v7, v17, v12, v9, v18, v8, v19, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, v23, v8, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v16, v14, v18, v10, v13, v8, v19, v17, v15, v12, v24, v9]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v16, v14, v18, v10, v13, v19, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v16, v14, v18, v10, v26, v13, v19, v17, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v16, v14, v18, v13, v27, v19, v17, v15, v12]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v16, v14, v18, v13, v19, v17, v15, v12, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v16, v14, v18, v29, v13, v19, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v16, v14, v18, v30, v19, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v19, v17, v16, v18, v15, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v19, v32, v17, v16, v18]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v19, v17, v18, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v19, v18, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v19, v35]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v36]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v37]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v37]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move_origin: [a0]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v38]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41]
// [Asm] move_origin: [v38]
// [Asm] defined: v41 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v43]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v39]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v39]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v40]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v40]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41]
// [Asm] move_origin: [v40]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v41]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v81]
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v81, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v7, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, v7, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v7, v9, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v19, v4, v6, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.49"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r46 [label="v43 ← a0", color=green];
// [Asm]   r38 [label="a7", color=blue];
// [Asm]   r33 [label="a2", color=blue];
// [Asm]   r9 [label="v12 ← t0", color=green];
// [Asm]   r26 [label="v33 ← a0", color=green];
// [Asm]   r47 [label="v39 ← a0", color=green];
// [Asm]   r6 [label="v13 ← a5", color=green];
// [Asm]   r44 [label="v38 ← a0", color=green];
// [Asm]   r13 [label="v19 ← t4", color=green];
// [Asm]   r42 [label="t3", color=blue];
// [Asm]   r53 [label="v4 ← s2", color=green];
// [Asm]   r4 [label="v14 ← a3", color=green];
// [Asm]   r29 [label="v36 ← a0", color=green];
// [Asm]   r35 [label="a4", color=blue];
// [Asm]   r7 [label="v7 ← a6", color=green];
// [Asm]   r10 [label="v9 ← t1", color=green];
// [Asm]   r8 [label="v17 ← a7", color=green];
// [Asm]   r5 [label="v10 ← a4", color=green];
// [Asm]   r36 [label="a5", color=blue];
// [Asm]   r54 [label="v5 ← s3", color=green];
// [Asm]   r15 [label="v15 ← s1", color=green];
// [Asm]   r24 [label="v31 ← a0", color=green];
// [Asm]   r32 [label="a1", color=blue];
// [Asm]   r49 [label="v2 ← a0", color=green];
// [Asm]   r43 [label="t4", color=blue];
// [Asm]   r31 [label="v37 ← a0", color=green];
// [Asm]   r39 [label="t0", color=blue];
// [Asm]   r17 [label="v24 ← a0", color=green];
// [Asm]   r52 [label="v81 ← a1", color=green];
// [Asm]   r12 [label="v8 ← t3", color=green];
// [Asm]   r48 [label="v40 ← a0", color=green];
// [Asm]   r37 [label="a6", color=blue];
// [Asm]   r20 [label="v27 ← a0", color=green];
// [Asm]   r23 [label="v30 ← a0", color=green];
// [Asm]   r3 [label="v16 ← a2", color=green];
// [Asm]   r27 [label="v34 ← a0", color=green];
// [Asm]   r1 [label="v22 ← a0", color=green];
// [Asm]   r40 [label="t1", color=blue];
// [Asm]   r28 [label="v35 ← a0", color=green];
// [Asm]   r41 [label="t2", color=blue];
// [Asm]   r11 [label="v18 ← t2", color=green];
// [Asm]   r34 [label="a3", color=blue];
// [Asm]   r22 [label="v29 ← a0", color=green];
// [Asm]   r14 [label="v6 ← s0", color=green];
// [Asm]   r50 [label="zero", color=blue];
// [Asm]   r30 [label="v46 ← a1", color=green];
// [Asm]   r51 [label="s11", color=blue];
// [Asm]   r45 [label="v41 ← a0", color=green];
// [Asm]   r25 [label="v32 ← a0", color=green];
// [Asm]   r2 [label="v11 ← a1", color=green];
// [Asm]   r55 [label="v20 ← a0", color=green];
// [Asm]   r16 [label="v23 ← a0", color=green];
// [Asm]   r18 [label="v25 ← a0", color=green];
// [Asm]   r19 [label="v26 ← a0", color=green];
// [Asm]   r21 [label="v28 ← a0", color=green];
// [Asm]   r0 -- r36;
// [Asm]   r10 -- r53;
// [Asm]   r9 -- r53;
// [Asm]   r0 -- r32;
// [Asm]   r15 -- r50;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r53;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r49;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r11 -- r55;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r50 -- r55;
// [Asm]   r9 -- r14;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r14 -- r53;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r13 -- r55;
// [Asm]   r10 -- r12;
// [Asm]   r9 -- r12;
// [Asm]   r12 -- r54;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r54;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r15 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r50;
// [Asm]   r6 -- r55;
// [Asm]   r1 -- r5;
// [Asm]   r14 -- r54;
// [Asm]   r4 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r49 -- r54;
// [Asm]   r14 -- r49;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r53 -- r54;
// [Asm]   r3 -- r25;
// [Asm]   r13 -- r15;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r29 -- r30;
// [Asm]   r0 -- r34;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r13 -- r16;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r6 -- r53;
// [Asm]   r50 -- r54;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r12 -- r50;
// [Asm]   r6 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r14 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r49 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r55;
// [Asm]   r15 -- r54;
// [Asm]   r12 -- r55;
// [Asm]   r0 -- r42;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r49 -- r52;
// [Asm]   r8 -- r15;
// [Asm]   r50 -- r53;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r39;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r37;
// [Asm]   r3 -- r20;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r8 -- r26;
// [Asm]   r12 -- r16;
// [Asm]   r10 -- r54;
// [Asm]   r7 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r8 -- r50;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r14 -- r55;
// [Asm]   r4 -- r54;
// [Asm]   r13 -- r49;
// [Asm]   r10 -- r13;
// [Asm]   r7 -- r53;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r49;
// [Asm]   r6 -- r54;
// [Asm]   r13 -- r50;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r13 -- r28;
// [Asm]   r15 -- r53;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r11 -- r53;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r10 -- r49;
// [Asm]   r2 -- r54;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r55;
// [Asm]   r0 -- r40;
// [Asm]   r50 -- r51;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r5 -- r53;
// [Asm]   r13 -- r54;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r11 -- r54;
// [Asm]   r50 -- r52;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r5 -- r50;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r8 -- r14;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r10 -- r55;
// [Asm]   r7 -- r54;
// [Asm]   r12 -- r53;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r53;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r53 -- r55;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r15 -- r49;
// [Asm]   r6 -- r49;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r14;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r19;
// [Asm]   r12 -- r15;
// [Asm]   r11 -- r49;
// [Asm]   r0 -- r41;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r0 -- r43;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r8 -- r55;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r55;
// [Asm]   r0 -- r35;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r8 -- r49;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r54;
// [Asm]   r10 -- r50;
// [Asm]   r4 -- r11;
// [Asm]   r0 -- r33;
// [Asm]   r15 -- r17;
// [Asm]   r8 -- r13;
// [Asm]   r15 -- r21;
// [Asm]   r49 -- r51;
// [Asm]   r12 -- r49;
// [Asm]   r15 -- r55;
// [Asm]   r11 -- r50;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r11;
// [Asm]   r13 -- r53;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r11 -- r26;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r9 -- r54;
// [Asm]   r49 -- r50;
// [Asm]   r13 -- r27;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   r4 -- r53;
// [Asm]   comment = "0:a0-> 32:a1-> 33:a2-> 34:a3-> 35:a4-> 36:a5-> 37:a6-> 38:a7-> 39:t0-> 40:t1-> 41:t2-> 42:t3-> 43:t4-> 1:v22-> 2:v11-> 3:v16-> 4:v14-> 5:v10-> 6:v13-> 7:v7-> 8:v17-> 9:v12-> 10:v9-> 11:v18-> 12:v8-> 13:v19-> 14:v6-> 15:v15-> 49:v2-> 50:zero-> 53:v4-> 54:v5-> 55:v20-> 16:v23-> 17:v24-> 18:v25-> 19:v26-> 20:v27-> 21:v28-> 22:v29-> 23:v30-> 24:v31-> 25:v32-> 26:v33-> 27:v34-> 51:s11-> 52:v81-> 28:v35-> 29:v36-> 30:v46-> 31:v37-> 44:v38-> 45:v41-> 46:v43-> 47:v39-> 48:v40"
// [Asm]   comment = "v43<-a0;v12<-t0;v33<-a0;v39<-a0;v13<-a5;v38<-a0;v19<-t4;v4<-s2;v14<-a3;v36<-a0;v7<-a6;v9<-t1;v17<-a7;v10<-a4;v5<-s3;v15<-s1;v31<-a0;v2<-a0;v37<-a0;v24<-a0;v81<-a1;v8<-t3;v40<-a0;v27<-a0;v30<-a0;v16<-a2;v34<-a0;v22<-a0;v35<-a0;v18<-t2;v29<-a0;v6<-s0;v46<-a1;v41<-a0;v32<-a0;v11<-a1;v20<-a0;v23<-a0;v25<-a0;v26<-a0;v28<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.49"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   add v22, v4, v5 ->   add a0, s2, s3
// [Asm] subst   add v23, v22, v6 ->   add a0, a0, s0
// [Asm] subst   add v24, v23, v7 ->   add a0, a0, a6
// [Asm] subst   add v25, v24, v8 ->   add a0, a0, t3
// [Asm] subst   add v26, v25, v9 ->   add a0, a0, t1
// [Asm] subst   add v27, v26, v10 ->   add a0, a0, a4
// [Asm] subst   add v28, v27, v11 ->   add a0, a0, a1
// [Asm] subst   add v29, v28, v12 ->   add a0, a0, t0
// [Asm] subst   add v30, v29, v13 ->   add a0, a0, a5
// [Asm] subst   add v31, v30, v14 ->   add a0, a0, a3
// [Asm] subst   add v32, v31, v15 ->   add a0, a0, s1
// [Asm] subst   add v33, v32, v16 ->   add a0, a0, a2
// [Asm] subst   add v34, v33, v17 ->   add a0, a0, a7
// [Asm] subst   add v35, v34, v18 ->   add a0, a0, t2
// [Asm] subst   add v36, v35, v19 ->   add a0, a0, t4
// [Asm] subst   li v46, 12345 ->   li a1, 12345
// [Asm] subst   add v37, v36, v46 ->   add a0, a0, a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v43, 67890 ->   li a0, 67890
// [Asm] subst   addi v39, v43, 1 ->   addi a0, a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.49_3 ->   j .main.49_3
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v81, 1 ->   li a1, 1
// [Asm] subst   sw v81, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v81, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v81, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v81, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v81, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   sw v81, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   sw v81, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   sw v81, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   sw v81, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   sw v81, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   lw v4, 0(v2) ->   lw s2, 0(a0)
// [Asm] subst   add v5, v4, v4 ->   add s3, s2, s2
// [Asm] subst   add v6, v5, v5 ->   add s0, s3, s3
// [Asm] subst   add v7, v6, v6 ->   add a6, s0, s0
// [Asm] subst   add v8, v7, v7 ->   add t3, a6, a6
// [Asm] subst   add v9, v8, v8 ->   add t1, t3, t3
// [Asm] subst   add v10, v9, v9 ->   add a4, t1, t1
// [Asm] subst   add v11, v10, v10 ->   add a1, a4, a4
// [Asm] subst   add v12, v11, v11 ->   add t0, a1, a1
// [Asm] subst   add v13, v12, v12 ->   add a5, t0, t0
// [Asm] subst   add v14, v13, v13 ->   add a3, a5, a5
// [Asm] subst   add v15, v14, v14 ->   add s1, a3, a3
// [Asm] subst   add v16, v15, v15 ->   add a2, s1, s1
// [Asm] subst   add v17, v16, v16 ->   add a7, a2, a2
// [Asm] subst   add v18, v17, v17 ->   add t2, a7, a7
// [Asm] subst   add v19, v18, v18 ->   add t4, t2, t2
// [Asm] subst   lw v20, 4(v2) ->   lw a0, 4(a0)
// [Asm] subst   beq v20, zero, .main.49_1 ->   beq a0, zero, .main.49_1
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.49 ->   call main.49
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.49:
// [Asm] # block info: defs: [v11, v5, v14, v16, v10, v13, v7, v17, s11, v12, v9, v18, v20, v8, v19, v81, v4, v6, v15, v2], uses: [v11, v5, v14, v16, v10, v13, v7, v17, s11, v12, v9, v18, zero, v20, v8, v81, v4, v6, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15]
// [Asm] # block parameters: []
// [Asm] .main.49_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v81, 1  # live: [zero, v81, v2]
// [Asm]   sw v81, 0(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 4(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 8(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 12(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 16(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 20(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 24(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 28(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 32(v2)  # live: [zero, v81, v2]
// [Asm]   sw v81, 36(v2)  # live: [zero, v2]
// [Asm]   lw v4, 0(v2)  # live: [zero, v4, v2]
// [Asm]   add v5, v4, v4  # live: [v5, zero, v4, v2]
// [Asm]   add v6, v5, v5  # live: [v5, zero, v4, v6, v2]
// [Asm]   add v7, v6, v6  # live: [v5, v7, zero, v4, v6, v2]
// [Asm]   add v8, v7, v7  # live: [v5, v7, zero, v8, v4, v6, v2]
// [Asm]   add v9, v8, v8  # live: [v5, v7, v9, zero, v8, v4, v6, v2]
// [Asm]   add v10, v9, v9  # live: [v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm]   add v11, v10, v10  # live: [v11, v5, v10, v7, v9, zero, v8, v4, v6, v2]
// [Asm]   add v12, v11, v11  # live: [v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm]   add v13, v12, v12  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm]   add v14, v13, v13  # live: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v2]
// [Asm]   add v15, v14, v14  # live: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm]   add v16, v15, v15  # live: [v11, v5, v14, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm]   add v17, v16, v16  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15, v2]
// [Asm]   add v18, v17, v17  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v2]
// [Asm]   add v19, v18, v18  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v19, v4, v6, v15, v2]
// [Asm]   lw v20, 4(v2)  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15]
// [Asm] # control
// [Asm]   beq v20, zero, .main.49_1  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, v22, v32, ft0, ft1, v41, a1, v28, fa1, v33, fa2, v29, ft6, a4, v27, fa6, a6, ft10, ft5, v34, ft7, ft4, v46, ft9, a5, a0, fa4, v30, v36, ft2, a2, v37, a3, v24, v31, ft8, a7, t3, fa7, t0, fa5, fa3, v23, ft3, v35, fa0, t4, v38, t2], uses: [v25, v14, v16, v13, v26, v22, v7, v32, v12, v28, v33, v29, v27, v8, v19, v4, v6, v34, v11, v5, v46, v10, a0, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15], upward_exposed: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15], params_defs: []
// [Asm] # live_in: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v19, v4, v6, v15], live_out: [v41]
// [Asm] # block parameters: []
// [Asm] .main.49_2:
// [Asm]   add v22, v4, v5  # live: [v11, v16, v14, v10, v13, v22, v7, v17, v12, v9, v18, v8, v19, v6, v15]
// [Asm]   add v23, v22, v6  # live: [v11, v16, v14, v10, v13, v7, v17, v12, v9, v18, v23, v8, v19, v15]
// [Asm]   add v24, v23, v7  # live: [v11, v16, v14, v18, v10, v13, v8, v19, v17, v15, v12, v24, v9]
// [Asm]   add v25, v24, v8  # live: [v11, v25, v16, v14, v18, v10, v13, v19, v17, v15, v12, v9]
// [Asm]   add v26, v25, v9  # live: [v11, v16, v14, v18, v10, v26, v13, v19, v17, v15, v12]
// [Asm]   add v27, v26, v10  # live: [v11, v16, v14, v18, v13, v27, v19, v17, v15, v12]
// [Asm]   add v28, v27, v11  # live: [v16, v14, v18, v13, v19, v17, v15, v12, v28]
// [Asm]   add v29, v28, v12  # live: [v16, v14, v18, v29, v13, v19, v17, v15]
// [Asm]   add v30, v29, v13  # live: [v16, v14, v18, v30, v19, v17, v15]
// [Asm]   add v31, v30, v14  # live: [v19, v17, v16, v18, v15, v31]
// [Asm]   add v32, v31, v15  # live: [v19, v32, v17, v16, v18]
// [Asm]   add v33, v32, v16  # live: [v19, v17, v18, v33]
// [Asm]   add v34, v33, v17  # live: [v19, v18, v34]
// [Asm]   add v35, v34, v18  # live: [v19, v35]
// [Asm]   add v36, v35, v19  # live: [v36]
// [Asm]   li v46, 12345  # live: [v46, v36]
// [Asm]   add v37, v36, v46  # live: [v37]
// [Asm]   # save_ctx2  # live: [v37]
// [Asm]   mv a0, v37  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v38, a0  # live: [v38]
// [Asm]   # restore_ctx2  # live: [v38]
// [Asm] # control
// [Asm]   mv v41, v38  # live: [v41]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v41, a0], upward_exposed: [v41], params_defs: [v41]
// [Asm] # live_in: [v41], live_out: []
// [Asm] # block parameters: [v41]
// [Asm] .main.49_3:
// [Asm] # control
// [Asm]   mv a0, v41  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v41, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v43, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [v43, a0, v39, v40], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v41]
// [Asm] # block parameters: []
// [Asm] .main.49_1:
// [Asm]   li v43, 67890  # live: [v43]
// [Asm]   addi v39, v43, 1  # live: [v39]
// [Asm]   # save_ctx2  # live: [v39]
// [Asm]   mv a0, v39  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v40, a0  # live: [v40]
// [Asm]   # restore_ctx2  # live: [v40]
// [Asm] # control
// [Asm]   mv v41, v40  # live: [v41]
// [Asm]   j .main.49_3  # live: [v41]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.49  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("f", Int), args: [], body: Int(12345)}, LetRec({name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))
// [Knf] build_knf: Array(Int(10), Int(1))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))))))))
// [Knf] build_knf: App(Var("f"), [])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))
// [Knf] build_knf: Int(67890)
// [Knf] build_knf: Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))))))
// [Knf] build_knf: Get(Var("z"), Int(0))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))
// [Knf] build_knf: Prim(Var("z0"), Var("z0"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z0")
// [Knf] build_knf: Var("z0")
// [Knf] build_knf: Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))))
// [Knf] build_knf: Prim(Var("z1"), Var("z1"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z1")
// [Knf] build_knf: Var("z1")
// [Knf] build_knf: Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))
// [Knf] build_knf: Prim(Var("z2"), Var("z2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z2")
// [Knf] build_knf: Var("z2")
// [Knf] build_knf: Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))
// [Knf] build_knf: Prim(Var("z3"), Var("z3"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z3")
// [Knf] build_knf: Var("z3")
// [Knf] build_knf: Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))
// [Knf] build_knf: Prim(Var("z4"), Var("z4"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z4")
// [Knf] build_knf: Var("z4")
// [Knf] build_knf: Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))
// [Knf] build_knf: Prim(Var("z5"), Var("z5"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z5")
// [Knf] build_knf: Var("z5")
// [Knf] build_knf: Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))
// [Knf] build_knf: Prim(Var("z6"), Var("z6"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z6")
// [Knf] build_knf: Var("z6")
// [Knf] build_knf: Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))
// [Knf] build_knf: Prim(Var("z7"), Var("z7"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z7")
// [Knf] build_knf: Var("z7")
// [Knf] build_knf: Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))
// [Knf] build_knf: Prim(Var("z8"), Var("z8"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z8")
// [Knf] build_knf: Var("z8")
// [Knf] build_knf: Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))
// [Knf] build_knf: Prim(Var("z9"), Var("z9"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z9")
// [Knf] build_knf: Var("z9")
// [Knf] build_knf: Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))
// [Knf] build_knf: Prim(Var("z10"), Var("z10"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z10")
// [Knf] build_knf: Var("z10")
// [Knf] build_knf: Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))
// [Knf] build_knf: Prim(Var("z11"), Var("z11"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z11")
// [Knf] build_knf: Var("z11")
// [Knf] build_knf: Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))
// [Knf] build_knf: Prim(Var("z12"), Var("z12"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z12")
// [Knf] build_knf: Var("z12")
// [Knf] build_knf: Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))
// [Knf] build_knf: Prim(Var("z13"), Var("z13"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z13")
// [Knf] build_knf: Var("z13")
// [Knf] build_knf: Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))
// [Knf] build_knf: Prim(Var("z14"), Var("z14"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z14")
// [Knf] build_knf: Var("z14")
// [Knf] build_knf: App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])
// [Knf] build_knf: If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Get(Var("z"), Int(1))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Var("y")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("z0"), Var("z1"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z0")
// [Knf] build_knf: Var("z1")
// [Knf] build_knf: Var("z2")
// [Knf] build_knf: Var("z3")
// [Knf] build_knf: Var("z4")
// [Knf] build_knf: Var("z5")
// [Knf] build_knf: Var("z6")
// [Knf] build_knf: Var("z7")
// [Knf] build_knf: Var("z8")
// [Knf] build_knf: Var("z9")
// [Knf] build_knf: Var("z10")
// [Knf] build_knf: Var("z11")
// [Knf] build_knf: Var("z12")
// [Knf] build_knf: Var("z13")
// [Knf] build_knf: Var("z14")
// [Knf] build_knf: Var("z15")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%20)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%37)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%18), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.49
// [Main]   .type main.49, @function
// [Main] # leaf false
// [Main] main.49:
// [Main] .main.49_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   sw a1, 20(a0)
// [Main]   sw a1, 24(a0)
// [Main]   sw a1, 28(a0)
// [Main]   sw a1, 32(a0)
// [Main]   sw a1, 36(a0)
// [Main]   lw s2, 0(a0)
// [Main]   add s3, s2, s2
// [Main]   add s0, s3, s3
// [Main]   add a6, s0, s0
// [Main]   add t3, a6, a6
// [Main]   add t1, t3, t3
// [Main]   add a4, t1, t1
// [Main]   add a1, a4, a4
// [Main]   add t0, a1, a1
// [Main]   add a5, t0, t0
// [Main]   add a3, a5, a5
// [Main]   add s1, a3, a3
// [Main]   add a2, s1, s1
// [Main]   add a7, a2, a2
// [Main]   add t2, a7, a7
// [Main]   add t4, t2, t2
// [Main]   lw a0, 4(a0)
// [Main]   beq a0, zero, .main.49_1
// [Main] 
// [Main] .main.49_2:
// [Main]   add a0, s2, s3
// [Main]   add a0, a0, s0
// [Main]   add a0, a0, a6
// [Main]   add a0, a0, t3
// [Main]   add a0, a0, t1
// [Main]   add a0, a0, a4
// [Main]   add a0, a0, a1
// [Main]   add a0, a0, t0
// [Main]   add a0, a0, a5
// [Main]   add a0, a0, a3
// [Main]   add a0, a0, s1
// [Main]   add a0, a0, a2
// [Main]   add a0, a0, a7
// [Main]   add a0, a0, t2
// [Main]   add a0, a0, t4
// [Main]   li a1, 12345
// [Main]   add a0, a0, a1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.49_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .main.49_1:
// [Main]   li a0, 67890
// [Main]   addi a0, a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .main.49_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.49
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.49
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=67890), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%20)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%21), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%22), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%23), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%24), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%25), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%26), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%27), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%28), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%29), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%30), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%31), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%32), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%33), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%34), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%35), Int32(val=12345)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%36)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%37)])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=1))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%9), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%10), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%12), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%14), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=1, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%17), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Branch(cond=Insn(iref=%18), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.49 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: f.1 false
// [KnfOpt] func_tre: g.2 false
// [KnfOpt] func_tre: main.5 false
// [KnfOpt] freq: {f.1: Once, g.2: Once, main.5: Once}
// [KnfOpt] Knf inline Some(g) let _46: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_46, ])
// [KnfOpt] Knf inline Some(f) let x.9: Int = Unit
// [KnfOpt] let y.10: Int = Int(67890)
// [KnfOpt] let _11: Int = Int(0)
// [KnfOpt] let z0.12: Int = Get z.8[_11]
// [KnfOpt] let z1.13: Int = Add(z0.12, z0.12)
// [KnfOpt] let z2.14: Int = Add(z1.13, z1.13)
// [KnfOpt] let z3.15: Int = Add(z2.14, z2.14)
// [KnfOpt] let z4.16: Int = Add(z3.15, z3.15)
// [KnfOpt] let z5.17: Int = Add(z4.16, z4.16)
// [KnfOpt] let z6.18: Int = Add(z5.17, z5.17)
// [KnfOpt] let z7.19: Int = Add(z6.18, z6.18)
// [KnfOpt] let z8.20: Int = Add(z7.19, z7.19)
// [KnfOpt] let z9.21: Int = Add(z8.20, z8.20)
// [KnfOpt] let z10.22: Int = Add(z9.21, z9.21)
// [KnfOpt] let z11.23: Int = Add(z10.22, z10.22)
// [KnfOpt] let z12.24: Int = Add(z11.23, z11.23)
// [KnfOpt] let z13.25: Int = Add(z12.24, z12.24)
// [KnfOpt] let z14.26: Int = Add(z13.25, z13.25)
// [KnfOpt] let z15.27: Int = Add(z14.26, z14.26)
// [KnfOpt] let _28: Int = Int(1)
// [KnfOpt] let _29: Int = Get z.8[_28]
// [KnfOpt] let _30: Int = Int(0)
// [KnfOpt] if (_29 == _30) then {
// [KnfOpt]   let _47: Int = Int(1)
// [KnfOpt]   let _46: Int = Add(y.10, _47)
// [KnfOpt]   ExtApply(minimbt_print_int, [_46, ])
// [KnfOpt] } else {
// [KnfOpt]   let _31: Int = Add(z0.12, z1.13)
// [KnfOpt]   let _32: Int = Add(_31, z2.14)
// [KnfOpt]   let _33: Int = Add(_32, z3.15)
// [KnfOpt]   let _34: Int = Add(_33, z4.16)
// [KnfOpt]   let _35: Int = Add(_34, z5.17)
// [KnfOpt]   let _36: Int = Add(_35, z6.18)
// [KnfOpt]   let _37: Int = Add(_36, z7.19)
// [KnfOpt]   let _38: Int = Add(_37, z8.20)
// [KnfOpt]   let _39: Int = Add(_38, z9.21)
// [KnfOpt]   let _40: Int = Add(_39, z10.22)
// [KnfOpt]   let _41: Int = Add(_40, z11.23)
// [KnfOpt]   let _42: Int = Add(_41, z12.24)
// [KnfOpt]   let _43: Int = Add(_42, z13.25)
// [KnfOpt]   let _44: Int = Add(_43, z14.26)
// [KnfOpt]   let _45: Int = Add(_44, z15.27)
// [KnfOpt]   let _46: Int = Add(_45, x.9)
// [KnfOpt]   ExtApply(minimbt_print_int, [_46, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(g) let _46: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_46, ])
// [KnfOpt] freq: {main.5: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
