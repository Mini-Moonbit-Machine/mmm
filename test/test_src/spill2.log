// [Knf] build_knf: LetRec({name: ("f", Int), args: [], body: Int(12345)}, LetRec({name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: Int(12345)
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("y", Int)], body: Prim(Var("y"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("z", Var({val: Some(Array(Int))})), Array(Int(10), Int(1)), Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))))
// [Knf] build_knf: Array(Int(10), Int(1))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("f"), []), Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))))))))
// [Knf] build_knf: App(Var("f"), [])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Int(67890), Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))))
// [Knf] build_knf: Int(67890)
// [Knf] build_knf: Let(("z0", Var({val: Some(Int)})), Get(Var("z"), Int(0)), Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))))))
// [Knf] build_knf: Get(Var("z"), Int(0))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("z1", Var({val: Some(Int)})), Prim(Var("z0"), Var("z0"), Add, kind=Some(Int)), Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))))
// [Knf] build_knf: Prim(Var("z0"), Var("z0"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z0")
// [Knf] build_knf: Var("z0")
// [Knf] build_knf: Let(("z2", Var({val: Some(Int)})), Prim(Var("z1"), Var("z1"), Add, kind=Some(Int)), Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))))
// [Knf] build_knf: Prim(Var("z1"), Var("z1"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z1")
// [Knf] build_knf: Var("z1")
// [Knf] build_knf: Let(("z3", Var({val: Some(Int)})), Prim(Var("z2"), Var("z2"), Add, kind=Some(Int)), Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))))
// [Knf] build_knf: Prim(Var("z2"), Var("z2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z2")
// [Knf] build_knf: Var("z2")
// [Knf] build_knf: Let(("z4", Var({val: Some(Int)})), Prim(Var("z3"), Var("z3"), Add, kind=Some(Int)), Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))))
// [Knf] build_knf: Prim(Var("z3"), Var("z3"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z3")
// [Knf] build_knf: Var("z3")
// [Knf] build_knf: Let(("z5", Var({val: Some(Int)})), Prim(Var("z4"), Var("z4"), Add, kind=Some(Int)), Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))))
// [Knf] build_knf: Prim(Var("z4"), Var("z4"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z4")
// [Knf] build_knf: Var("z4")
// [Knf] build_knf: Let(("z6", Var({val: Some(Int)})), Prim(Var("z5"), Var("z5"), Add, kind=Some(Int)), Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))))
// [Knf] build_knf: Prim(Var("z5"), Var("z5"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z5")
// [Knf] build_knf: Var("z5")
// [Knf] build_knf: Let(("z7", Var({val: Some(Int)})), Prim(Var("z6"), Var("z6"), Add, kind=Some(Int)), Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))))
// [Knf] build_knf: Prim(Var("z6"), Var("z6"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z6")
// [Knf] build_knf: Var("z6")
// [Knf] build_knf: Let(("z8", Var({val: Some(Int)})), Prim(Var("z7"), Var("z7"), Add, kind=Some(Int)), Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))))
// [Knf] build_knf: Prim(Var("z7"), Var("z7"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z7")
// [Knf] build_knf: Var("z7")
// [Knf] build_knf: Let(("z9", Var({val: Some(Int)})), Prim(Var("z8"), Var("z8"), Add, kind=Some(Int)), Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))))
// [Knf] build_knf: Prim(Var("z8"), Var("z8"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z8")
// [Knf] build_knf: Var("z8")
// [Knf] build_knf: Let(("z10", Var({val: Some(Int)})), Prim(Var("z9"), Var("z9"), Add, kind=Some(Int)), Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))))
// [Knf] build_knf: Prim(Var("z9"), Var("z9"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z9")
// [Knf] build_knf: Var("z9")
// [Knf] build_knf: Let(("z11", Var({val: Some(Int)})), Prim(Var("z10"), Var("z10"), Add, kind=Some(Int)), Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))))
// [Knf] build_knf: Prim(Var("z10"), Var("z10"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z10")
// [Knf] build_knf: Var("z10")
// [Knf] build_knf: Let(("z12", Var({val: Some(Int)})), Prim(Var("z11"), Var("z11"), Add, kind=Some(Int)), Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))))
// [Knf] build_knf: Prim(Var("z11"), Var("z11"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z11")
// [Knf] build_knf: Var("z11")
// [Knf] build_knf: Let(("z13", Var({val: Some(Int)})), Prim(Var("z12"), Var("z12"), Add, kind=Some(Int)), Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))))
// [Knf] build_knf: Prim(Var("z12"), Var("z12"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z12")
// [Knf] build_knf: Var("z12")
// [Knf] build_knf: Let(("z14", Var({val: Some(Int)})), Prim(Var("z13"), Var("z13"), Add, kind=Some(Int)), Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])))
// [Knf] build_knf: Prim(Var("z13"), Var("z13"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z13")
// [Knf] build_knf: Var("z13")
// [Knf] build_knf: Let(("z15", Var({val: Some(Int)})), Prim(Var("z14"), Var("z14"), Add, kind=Some(Int)), App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))
// [Knf] build_knf: Prim(Var("z14"), Var("z14"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z14")
// [Knf] build_knf: Var("z14")
// [Knf] build_knf: App(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])
// [Knf] build_knf: If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Get(Var("z"), Int(1))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Var("y")])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int)), Var("z15"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int)), Var("z14"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int)), Var("z13"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int)), Var("z12"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int)), Var("z11"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int)), Var("z10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int)), Var("z9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int)), Var("z8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int)), Var("z7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int)), Var("z6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int)), Var("z5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int)), Var("z4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int)), Var("z3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("z0"), Var("z1"), Add, kind=Some(Int)), Var("z2"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("z0"), Var("z1"), Add, kind=Some(Int))
// [Knf] build_knf: Var("z0")
// [Knf] build_knf: Var("z1")
// [Knf] build_knf: Var("z2")
// [Knf] build_knf: Var("z3")
// [Knf] build_knf: Var("z4")
// [Knf] build_knf: Var("z5")
// [Knf] build_knf: Var("z6")
// [Knf] build_knf: Var("z7")
// [Knf] build_knf: Var("z8")
// [Knf] build_knf: Var("z9")
// [Knf] build_knf: Var("z10")
// [Knf] build_knf: Var("z11")
// [Knf] build_knf: Var("z12")
// [Knf] build_knf: Var("z13")
// [Knf] build_knf: Var("z14")
// [Knf] build_knf: Var("z15")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f1(k) {
// [Main]     return k(12345)
// [Main]   }
// [Main]   function g2(y3_4, k) {
// [Main]     const _5 = 1;
// [Main]     return k(y3_4 + _5)
// [Main]   }
// [Main]   function main6(k) {
// [Main]     const _7 = 10;
// [Main]     const _8 = 1;
// [Main]     const z_9 = minimbt_create_array($force(_7), $force(_8));
// [Main]     return $thunk(() => f1(function (x_10) {
// [Main]       const y_11 = 67890;
// [Main]       const _12 = 0;
// [Main]       const z0_13 = z_9[_12];
// [Main]       const z1_14 = z0_13 + z0_13;
// [Main]       const z2_15 = z1_14 + z1_14;
// [Main]       const z3_16 = z2_15 + z2_15;
// [Main]       const z4_17 = z3_16 + z3_16;
// [Main]       const z5_18 = z4_17 + z4_17;
// [Main]       const z6_19 = z5_18 + z5_18;
// [Main]       const z7_20 = z6_19 + z6_19;
// [Main]       const z8_21 = z7_20 + z7_20;
// [Main]       const z9_22 = z8_21 + z8_21;
// [Main]       const z10_23 = z9_22 + z9_22;
// [Main]       const z11_24 = z10_23 + z10_23;
// [Main]       const z12_25 = z11_24 + z11_24;
// [Main]       const z13_26 = z12_25 + z12_25;
// [Main]       const z14_27 = z13_26 + z13_26;
// [Main]       const z15_28 = z14_27 + z14_27;
// [Main]       const _29 = 1;
// [Main]       const _30 = z_9[_29];
// [Main]       const _31 = 0;
// [Main]       const _47 = (() => {
// [Main]         if (_30 === _31) {
// [Main]           return $thunk(() => g2(y_11, k))
// [Main]         } else {
// [Main]           const _32 = z0_13 + z1_14;
// [Main]           const _33 = _32 + z2_15;
// [Main]           const _34 = _33 + z3_16;
// [Main]           const _35 = _34 + z4_17;
// [Main]           const _36 = _35 + z5_18;
// [Main]           const _37 = _36 + z6_19;
// [Main]           const _38 = _37 + z7_20;
// [Main]           const _39 = _38 + z8_21;
// [Main]           const _40 = _39 + z9_22;
// [Main]           const _41 = _40 + z10_23;
// [Main]           const _42 = _41 + z11_24;
// [Main]           const _43 = _42 + z12_25;
// [Main]           const _44 = _43 + z13_26;
// [Main]           const _45 = _44 + z14_27;
// [Main]           const _46 = _45 + z15_28;
// [Main]           return _46 + x_10;
// [Main]         }
// [Main]       })();
// [Main]       return $thunk(() => k(minimbt_print_int($force(_47))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main6(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
