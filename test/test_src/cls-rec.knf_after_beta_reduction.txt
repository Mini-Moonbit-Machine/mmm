let x.1: Int = Int(10)
let rec f.2: Int = (y.3: Int) {
  let _4: Int = Int(0)
  if (y.3 == _4) then {
    Int(0)
  } else {
    let _5: Int = Int(1)
    let _6: Int = Sub(y.3, _5)
    let _7: Int = Apply(f.2, [_6, ])
    Add(x.1, _7)
  }
}
let rec main.8: Var({val: Some(Unit)}) = () {
  let _9: Int = Int(12)
  let _10: Int = Apply(f.2, [_9, ])
  ExtApply(minimbt_print_int, [_10, ])
}
Apply(main.8, [])let x.1: Int = Int(10)
let rec f.2: Int = (y.3: Int) {
  let _4: Int = Int(0)
  if (y.3 == _4) then {
    Int(0)
  } else {
    let _5: Int = Int(1)
    let _6: Int = Sub(y.3, _5)
    let _7: Int = Apply(f.2, [_6, ])
    Add(x.1, _7)
  }
}
let rec main.8: Var({val: Some(Unit)}) = () {
  let _9: Int = Int(12)
  let _10: Int = Apply(f.2, [_9, ])
  ExtApply(minimbt_print_int, [_10, ])
}
Apply(main.8, [])