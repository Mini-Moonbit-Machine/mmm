# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn matmul1_0 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f3, [1] = $f5, [2] = $f3, [3] = $f4, [4] = $f1, [5] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: unit = apply f0.m0(%1)
    return %2
  }
}
.fn init_arr63_12 #f12 : closure(int32) -> unit
.freevars (int32, array[array[double]])
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap(^1)> <- [..] = 0
    let _ = store array[double] offset(^2, $b0.0 * @ptr) <- f12.m0
    let %3: int32 = sub($b0.0, 1)
    jump b0(%3)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn loop218_5 #f5 : closure(int32) -> unit
.freevars (array[array[double]], int32, array[array[double]], array[array[double]], int32)
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f7, [1] = ^1, [2] = ^2, [3] = $b0.0, [4] = ^3, [5] = ^4
    let %2: int32 = sub(^5, 1)
    let %3: unit = apply f5.m0(%2)
    let %4: int32 = sub($b0.0, 1)
    jump b0(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn loop322_7 #f7 : closure(int32) -> unit
.freevars (array[array[double]], int32, int32, array[array[double]], array[array[double]])
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: array[double] = load array[double] offset(^1, ^2 * @ptr)
    let %2: array[double] = load array[double] offset(^1, ^2 * @ptr)
    let %3: double = load double offset(%2, ^3 * @64)
    let %4: array[double] = load array[double] offset(^4, ^2 * @ptr)
    let %5: double = load double offset(%4, $b0.0 * @64)
    let %6: array[double] = load array[double] offset(^5, $b0.0 * @ptr)
    let %7: double = load double offset(%6, ^3 * @64)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, ^3 * @64) <- %9
    let %11: int32 = sub($b0.0, 1)
    jump b0(%11)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn gen_arr57_10 #f10 : closure(int32, int32) -> array[array[double]]
.freevars (array[double])
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = ^1
    let _ = alloc <m1: closure(int32) -> unit heap(3)> <- [0] = f12, [1] = $f1, [2] = f10.m0
    let %2: int32 = sub($f0, 1)
    let %3: unit = apply f10.m1(%2)
    return f10.m0
  }
}
.fn main53_1 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let _ = alloc <m1: closure(int32, int32) -> array[array[double]] heap(2)> <- [0] = f10, [1] = f1.m0
    let %2: array[array[double]] = apply f1.m1(2, 3)
    let %3: array[array[double]] = apply f1.m1(3, 2)
    let %4: array[array[double]] = apply f1.m1(2, 2)
    let %5: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%5, 0 * @64) <- 1
    let %7: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%7, 1 * @64) <- 2
    let %9: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%9, 2 * @64) <- 3
    let %11: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%11, 0 * @64) <- 4
    let %13: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%13, 1 * @64) <- 5
    let %15: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%15, 2 * @64) <- 6
    let %17: array[double] = load array[double] field(%3, 0 * @ptr)
    let _ = store double field(%17, 0 * @64) <- 7
    let %19: array[double] = load array[double] field(%3, 0 * @ptr)
    let _ = store double field(%19, 1 * @64) <- 8
    let %21: array[double] = load array[double] field(%3, 1 * @ptr)
    let _ = store double field(%21, 0 * @64) <- 9
    let %23: array[double] = load array[double] field(%3, 1 * @ptr)
    let _ = store double field(%23, 1 * @64) <- 10
    let %25: array[double] = load array[double] field(%3, 2 * @ptr)
    let _ = store double field(%25, 0 * @64) <- 11
    let %27: array[double] = load array[double] field(%3, 2 * @ptr)
    let _ = store double field(%27, 1 * @64) <- 12
    let %29: unit = call f0(2, 3, 2, %2, %3, %4)
    let %30: array[double] = load array[double] field(%4, 0 * @ptr)
    let %31: double = load double field(%30, 0 * @64)
    let %32: int32 = conv.d2i.rtz(%31)
    let %33: unit = ext_call minimbt_print_int(%32)
    let %34: unit = ext_call minimbt_print_endline()
    let %35: array[double] = load array[double] field(%4, 0 * @ptr)
    let %36: double = load double field(%35, 1 * @64)
    let %37: int32 = conv.d2i.rtz(%36)
    let %38: unit = ext_call minimbt_print_int(%37)
    let %39: unit = ext_call minimbt_print_endline()
    let %40: array[double] = load array[double] field(%4, 1 * @ptr)
    let %41: double = load double field(%40, 0 * @64)
    let %42: int32 = conv.d2i.rtz(%41)
    let %43: unit = ext_call minimbt_print_int(%42)
    let %44: unit = ext_call minimbt_print_endline()
    let %45: array[double] = load array[double] field(%4, 1 * @ptr)
    let %46: double = load double field(%45, 1 * @64)
    let %47: int32 = conv.d2i.rtz(%46)
    let %48: unit = ext_call minimbt_print_int(%47)
    return ()
  }
}
.fn loop114_3 #f3 : closure(int32) -> unit
.freevars (array[array[double]], array[array[double]], array[array[double]], int32, int32)
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f5, [1] = ^1, [2] = $b0.0, [3] = ^2, [4] = ^3, [5] = ^4
    let %2: int32 = sub(^5, 1)
    let %3: unit = apply f3.m0(%2)
    let %4: int32 = sub($b0.0, 1)
    jump b0(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn T$start_14 #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.thunk ::0 start
