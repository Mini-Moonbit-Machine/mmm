// [Main] function thunk_main(k) {
// [Main]   function f_1(k) {
// [Main]     const _2 = 6;
// [Main]     const _3 = 0;
// [Main]     if (_2 <= _3) {
// [Main]       return $thunk(() => k(1))
// [Main]     } else {
// [Main]       const _4 = 6;
// [Main]       const _5 = 10;
// [Main]       if (_4 <= _5) {
// [Main]         return $thunk(() => k(2))
// [Main]       } else {
// [Main]         return $thunk(() => k(3))
// [Main]       }
// [Main]     }
// [Main]   }
// [Main]   function main_6(k) {
// [Main]     return $thunk(() => f_1(function (_7) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       , _7))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_6(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [], body: If(LE(Int(6), Int(0)), Int(1), If(LE(Int(6), Int(10)), Int(2), Int(3)))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(6), Int(0)), Int(1), If(LE(Int(6), Int(10)), Int(2), Int(3))) against Int
// [Typer] check: LE(Int(6), Int(0)) against Bool
// [Typer] infer: Int(6)
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: If(LE(Int(6), Int(10)), Int(2), Int(3)) against Int
// [Typer] check: LE(Int(6), Int(10)) against Bool
// [Typer] infer: Int(6)
// [Typer] infer: Int(10)
// [Typer] unify: Int and Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("f"), [])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), []) against Int
// [Typer] check: Var("f") against () -> Int
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: () -> Int and () -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
