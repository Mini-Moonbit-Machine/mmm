// [Asm] LoweringOrder: [0, 0 -> 6 (0), 2, 2 -> 5 (0), 2 -> 5 (1), 5, 6]
// [Asm] LoweringOrder: [[0 -> 6 (0), 2], [6], [2 -> 5 (0), 2 -> 5 (1)], [5], [5], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b0, 0), (b5, 2), (b2, 0)])
// [Asm] LoweringOrder: [b0, b2, b6, b5]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b0, 0), (b5, 0), (b2, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v5, Insn(iref=%0) -> v2, Insn(iref=%2) -> v6
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [2 -> 5 (0), 2 -> 5 (1)]
// [Asm] critical edges for b2: [(b2, b5, 0), (b2, b5, 1)]
// [Asm] critical color seq for b2: [{color: 2, seq: 0, critical: []}, {color: 2, seq: 0, critical: []}]
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=6), Int32(val=10)])
// [Asm] succs: [0 -> 6 (0), 2]
// [Asm] critical edges for b0: [(b0, b6, 0)]
// [Asm] critical color seq for b0: [{color: 1, seq: 0, critical: []}]
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=6), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v4
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move: v4 <- v8
// [Asm] defined: v4 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v4, v10, v9]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] defined: v11 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move: v4 <- v11
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] defined: v12 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move: v5 <- v12
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] Label("main6.12") clobbered_x: @hashset.of([a2, a1, a0])
// [Asm] Label("main6.12") clobbered_f: @hashset.of([])
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   j .main6.12_6 ->   j .main6.12_6
// [Asm] subst   li v8, 2 ->   li a0, 2
// [Asm] subst   li v9, 10 ->   li a1, 10
// [Asm] subst   li v10, 6 ->   li a2, 6
// [Asm] subst   bge v9, v10, .main6.12_5 ->   bge a1, a2, .main6.12_5
// [Asm] subst   li v11, 3 ->   li a0, 3
// [Asm] subst   j .main6.12_5 ->   j .main6.12_5
// [Asm] subst   li v12, 1 ->   li a0, 1
// [Asm] subst   li v13, 6 ->   li a1, 6
// [Asm] subst   bge zero, v13, .main6.12_6 ->   bge zero, a1, .main6.12_6
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main6.12 ->   call main6.12
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main6.12:
// [Asm] # block info: defs: [v5, v12, v13], uses: [v12, zero, v13], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .main6.12_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   li v12, 1  # live: [v12, zero]
// [Asm]   mv v5, v12  # live: [v5, zero]
// [Asm]   li v13, 6  # live: [v5, zero, v13]
// [Asm]   bge zero, v13, .main6.12_6  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v11, v4, v10, v9, v8], uses: [v11, v10, v9, v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v4]
// [Asm] # block parameters: []
// [Asm] .main6.12_2:
// [Asm] # control
// [Asm]   li v8, 2  # live: [v8]
// [Asm]   mv v4, v8  # live: [v4]
// [Asm]   li v9, 10  # live: [v4, v9]
// [Asm]   li v10, 6  # live: [v4, v10, v9]
// [Asm]   bge v9, v10, .main6.12_5  # live: [v4]
// [Asm]   li v11, 3  # live: [v11]
// [Asm]   mv v4, v11  # live: [v4]
// [Asm]   j .main6.12_5  # live: [v4]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v6, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .main6.12_6:
// [Asm]   # save_ctx2  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v4], upward_exposed: [v4], params_defs: [v4]
// [Asm] # live_in: [v4], live_out: [v5]
// [Asm] # block parameters: [v4]
// [Asm] .main6.12_5:
// [Asm] # control
// [Asm]   mv v5, v4  # live: [v5]
// [Asm]   j .main6.12_6  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main6.12  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("f", Int), args: [], body: If(LE(Int(6), Int(0)), Int(1), If(LE(Int(6), Int(10)), Int(2), Int(3)))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [])])}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(6), Int(0)), Int(1), If(LE(Int(6), Int(10)), Int(2), Int(3)))
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(LE(Int(6), Int(10)), Int(2), Int(3))
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("f"), [])])
// [Knf] build_knf: App(Var("f"), [])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main6.12
// [Main]   .type main6.12, @function
// [Main] # leaf false
// [Main] main6.12:
// [Main] .main6.12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 1
// [Main]   li a1, 6
// [Main]   bge zero, a1, .main6.12_6
// [Main] 
// [Main] .main6.12_2:
// [Main]   li a0, 2
// [Main]   li a1, 10
// [Main]   li a2, 6
// [Main]   bge a1, a2, .main6.12_5
// [Main]   li a0, 3
// [Main]   j .main6.12_5
// [Main] 
// [Main] .main6.12_6:
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main6.12_5:
// [Main]   j .main6.12_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main6.12
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0, 0 -> 6 (0), 2, 2 -> 5 (0), 2 -> 5 (1), 5, 6]
// [Wasm] LoweringOrder: [[0 -> 6 (0), 2], [6], [2 -> 5 (0), 2 -> 5 (1)], [5], [5], [6], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 1), (b0, 0), (b5, 2), (b2, 0)])
// [Wasm] LoweringOrder: [b0, b2, b6, b5]
// [Wasm] LoweringOrder: HashMap::of([(b6, 0), (b0, 0), (b5, 0), (b2, 1)])
// [Wasm] Lowering function main6.12
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=6), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b5, t_args=[Int32(val=2)], f=b5, f_args=[Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=6), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b6, t_args=[Int32(val=1)], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main6.12 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {f1: Once, main6: Once}
// [KnfOpt] Knf inline Some(f1)
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
