let rec loop3.1: Unit = (i.2: Int, j.3: Int, k.4: Int, a.5: Array(Array(Double)), b.6: Array(Array(Double)), c.7: Array(Array(Double)), _9: Array(Double), _10: Array(Double), _12: Array(Double)) {
  let join loop3.185: Unit = (i.186: Int, j.187: Int, k.188: Int, a.189: Array(Array(Double)), b.190: Array(Array(Double)), c.191: Array(Array(Double)), _192: Array(Double), _193: Array(Double), _194: Array(Double)) {
    let _195: Int = Int(0)
    if (_195 <= k.188) then {
      let _196: Double = Get _193[j.187]
      let _197: Double = Get _194[k.188]
      let _198: Array(Double) = Get b.190[k.188]
      let _199: Double = Get _198[j.187]
      let _200: Double = FMul(_197, _199)
      let _201: Double = FAdd(_196, _200)
      let _202: Unit = Put _192[j.187] = _201
      let _203: Int = Int(1)
      let _204: Int = Sub(k.188, _203)
      Jump(loop3.185, [i.186, j.187, _204, a.189, b.190, c.191, _192, _193, _194, ])
    } else {
      Unit
    }
  }
  Jump(loop3.185, [i.2, j.3, k.4, a.5, b.6, c.7, _9, _10, _12, ])
}
let rec loop2.21: Unit = (i.22: Int, m.23: Int, j.24: Int, a.25: Array(Array(Double)), b.26: Array(Array(Double)), c.27: Array(Array(Double))) {
  let join loop2.205: Unit = (i.206: Int, m.207: Int, j.208: Int, a.209: Array(Array(Double)), b.210: Array(Array(Double)), c.211: Array(Array(Double))) {
    let _212: Int = Int(0)
    if (_212 <= j.208) then {
      let _213: Int = Int(1)
      let _214: Int = Sub(m.207, _213)
      let _215: Array(Double) = Get c.211[i.206]
      let _216: Array(Double) = Get c.211[i.206]
      let _217: Array(Double) = Get a.209[i.206]
      let _218: Unit = Apply(loop3.1, [i.206, j.208, _214, a.209, b.210, c.211, _215, _216, _217, ])
      let _219: Int = Int(1)
      let _220: Int = Sub(j.208, _219)
      Jump(loop2.205, [i.206, m.207, _220, a.209, b.210, c.211, ])
    } else {
      Unit
    }
  }
  Jump(loop2.205, [i.22, m.23, j.24, a.25, b.26, c.27, ])
}
let rec loop1.34: Unit = (i.35: Int, m.36: Int, n.37: Int, a.38: Array(Array(Double)), b.39: Array(Array(Double)), c.40: Array(Array(Double))) {
  let join loop1.221: Unit = (i.222: Int, m.223: Int, n.224: Int, a.225: Array(Array(Double)), b.226: Array(Array(Double)), c.227: Array(Array(Double))) {
    let _228: Int = Int(0)
    if (_228 <= i.222) then {
      let _229: Int = Int(1)
      let _230: Int = Sub(n.224, _229)
      let _231: Unit = Apply(loop2.21, [i.222, m.223, _230, a.225, b.226, c.227, ])
      let _232: Int = Int(1)
      let _233: Int = Sub(i.222, _232)
      Jump(loop1.221, [_233, m.223, n.224, a.225, b.226, c.227, ])
    } else {
      Unit
    }
  }
  Jump(loop1.221, [i.35, m.36, n.37, a.38, b.39, c.40, ])
}
let rec mul.47: Unit = (l.48: Int, m.49: Int, n.50: Int, a.51: Array(Array(Double)), b.52: Array(Array(Double)), c.53: Array(Array(Double))) {
  let _54: Int = Int(1)
  let _55: Int = Sub(l.48, _54)
  let _56: Unit = Apply(loop1.34, [_55, m.49, n.50, a.51, b.52, c.53, ])
  Unit
}
let rec main.57: Var({val: Some(Unit)}) = () {
  let _58: Int = Int(0)
  let _59: Double = Double(0)
  let dummy.60: Array(Double) = ExtApply(minimbt_create_float_array, [_58, _59, ])
  let rec init_arr.61: Unit = (i.62: Int, n.63: Int, mat.64: Array(Array(Double))) {
    let join init_arr.234: Unit = (i.235: Int, n.236: Int, mat.237: Array(Array(Double))) {
      let _238: Int = Int(0)
      if (_238 <= i.235) then {
        let _239: Double = Double(0)
        let _240: Array(Double) = ExtApply(minimbt_create_float_array, [n.236, _239, ])
        let _241: Unit = Put mat.237[i.235] = _240
        let _242: Int = Int(1)
        let _243: Int = Sub(i.235, _242)
        Jump(init_arr.234, [_243, n.236, mat.237, ])
      } else {
        Unit
      }
    }
    Jump(init_arr.234, [i.62, n.63, mat.64, ])
  }
  let rec make_arr.71: Array(Array(Double)) = (m.72: Int, n.73: Int, dummy.74: Array(Double)) {
    let mat.75: Array(Array(Double)) = ExtApply(minimbt_create_ptr_array, [m.72, dummy.74, ])
    let _76: Int = Int(1)
    let _77: Int = Sub(m.72, _76)
    let _78: Unit = Apply(init_arr.61, [_77, n.73, mat.75, ])
    Var(mat.75)
  }
  let _79: Int = Int(2)
  let _80: Int = Int(3)
  let a.81: Array(Array(Double)) = Apply(make_arr.71, [_79, _80, dummy.60, ])
  let _82: Int = Int(3)
  let _83: Int = Int(2)
  let b.84: Array(Array(Double)) = Apply(make_arr.71, [_82, _83, dummy.60, ])
  let _85: Int = Int(2)
  let _86: Int = Int(2)
  let c.87: Array(Array(Double)) = Apply(make_arr.71, [_85, _86, dummy.60, ])
  let _88: Int = Int(0)
  let _89: Array(Double) = Get a.81[_88]
  let _90: Int = Int(0)
  let _91: Double = Double(1)
  let _92: Unit = Put _89[_90] = _91
  let _93: Int = Int(0)
  let _94: Array(Double) = Get a.81[_93]
  let _95: Int = Int(1)
  let _96: Double = Double(2)
  let _97: Unit = Put _94[_95] = _96
  let _98: Int = Int(0)
  let _99: Array(Double) = Get a.81[_98]
  let _100: Int = Int(2)
  let _101: Double = Double(3)
  let _102: Unit = Put _99[_100] = _101
  let _103: Int = Int(1)
  let _104: Array(Double) = Get a.81[_103]
  let _105: Int = Int(0)
  let _106: Double = Double(4)
  let _107: Unit = Put _104[_105] = _106
  let _108: Int = Int(1)
  let _109: Array(Double) = Get a.81[_108]
  let _110: Int = Int(1)
  let _111: Double = Double(5)
  let _112: Unit = Put _109[_110] = _111
  let _113: Int = Int(1)
  let _114: Array(Double) = Get a.81[_113]
  let _115: Int = Int(2)
  let _116: Double = Double(6)
  let _117: Unit = Put _114[_115] = _116
  let _118: Int = Int(0)
  let _119: Array(Double) = Get b.84[_118]
  let _120: Int = Int(0)
  let _121: Double = Double(7)
  let _122: Unit = Put _119[_120] = _121
  let _123: Int = Int(0)
  let _124: Array(Double) = Get b.84[_123]
  let _125: Int = Int(1)
  let _126: Double = Double(8)
  let _127: Unit = Put _124[_125] = _126
  let _128: Int = Int(1)
  let _129: Array(Double) = Get b.84[_128]
  let _130: Int = Int(0)
  let _131: Double = Double(9)
  let _132: Unit = Put _129[_130] = _131
  let _133: Int = Int(1)
  let _134: Array(Double) = Get b.84[_133]
  let _135: Int = Int(1)
  let _136: Double = Double(10)
  let _137: Unit = Put _134[_135] = _136
  let _138: Int = Int(2)
  let _139: Array(Double) = Get b.84[_138]
  let _140: Int = Int(0)
  let _141: Double = Double(11)
  let _142: Unit = Put _139[_140] = _141
  let _143: Int = Int(2)
  let _144: Array(Double) = Get b.84[_143]
  let _145: Int = Int(1)
  let _146: Double = Double(12)
  let _147: Unit = Put _144[_145] = _146
  let _148: Int = Int(2)
  let _149: Int = Int(3)
  let _150: Int = Int(2)
  let _151: Unit = Apply(mul.47, [_148, _149, _150, a.81, b.84, c.87, ])
  let _152: Int = Int(0)
  let _153: Array(Double) = Get c.87[_152]
  let _154: Int = Int(0)
  let _155: Double = Get _153[_154]
  let _156: Int = ExtApply(minimbt_truncate, [_155, ])
  let _157: Unit = ExtApply(minimbt_print_int, [_156, ])
  let _158: Unit = ExtApply(minimbt_print_endline, [])
  let _159: Int = Int(0)
  let _160: Array(Double) = Get c.87[_159]
  let _161: Int = Int(1)
  let _162: Double = Get _160[_161]
  let _163: Int = ExtApply(minimbt_truncate, [_162, ])
  let _164: Unit = ExtApply(minimbt_print_int, [_163, ])
  let _165: Unit = ExtApply(minimbt_print_endline, [])
  let _166: Int = Int(1)
  let _167: Array(Double) = Get c.87[_166]
  let _168: Int = Int(0)
  let _169: Double = Get _167[_168]
  let _170: Int = ExtApply(minimbt_truncate, [_169, ])
  let _171: Unit = ExtApply(minimbt_print_int, [_170, ])
  let _172: Unit = ExtApply(minimbt_print_endline, [])
  let _173: Int = Int(1)
  let _174: Array(Double) = Get c.87[_173]
  let _175: Int = Int(1)
  let _176: Double = Get _174[_175]
  let _177: Int = ExtApply(minimbt_truncate, [_176, ])
  let _178: Unit = ExtApply(minimbt_print_int, [_177, ])
  Unit
}
Apply(main.57, [])