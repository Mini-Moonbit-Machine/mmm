let rec loop3.1: Unit = (i.2: Int, j.3: Int, k.4: Int, a.5: Array(Array(Double)), b.6: Array(Array(Double)), c.7: Array(Array(Double))) {
  let join loop3.179: Unit = (i.180: Int, j.181: Int, k.182: Int, a.183: Array(Array(Double)), b.184: Array(Array(Double)), c.185: Array(Array(Double))) {
    let _186: Int = Int(0)
    if (_186 <= k.182) then {
      let _187: Array(Double) = Get c.185[i.180]
      let _188: Array(Double) = Get c.185[i.180]
      let _189: Double = Get _188[j.181]
      let _190: Array(Double) = Get a.183[i.180]
      let _191: Double = Get _190[k.182]
      let _192: Array(Double) = Get b.184[k.182]
      let _193: Double = Get _192[j.181]
      let _194: Double = FMul(_191, _193)
      let _195: Double = FAdd(_189, _194)
      let _196: Unit = Put _187[j.181] = _195
      let _197: Int = Int(1)
      let _198: Int = Sub(k.182, _197)
      Jump(loop3.179, [i.180, j.181, _198, a.183, b.184, c.185, ])
    } else {
      Unit
    }
  }
  Jump(loop3.179, [i.2, j.3, k.4, a.5, b.6, c.7, ])
}
let rec loop2.21: Unit = (i.22: Int, m.23: Int, j.24: Int, a.25: Array(Array(Double)), b.26: Array(Array(Double)), c.27: Array(Array(Double))) {
  let join loop2.199: Unit = (i.200: Int, m.201: Int, j.202: Int, a.203: Array(Array(Double)), b.204: Array(Array(Double)), c.205: Array(Array(Double))) {
    let _206: Int = Int(0)
    if (_206 <= j.202) then {
      let _207: Int = Int(1)
      let _208: Int = Sub(m.201, _207)
      let _209: Unit = Apply(loop3.1, [i.200, j.202, _208, a.203, b.204, c.205, ])
      let _210: Int = Int(1)
      let _211: Int = Sub(j.202, _210)
      Jump(loop2.199, [i.200, m.201, _211, a.203, b.204, c.205, ])
    } else {
      Unit
    }
  }
  Jump(loop2.199, [i.22, m.23, j.24, a.25, b.26, c.27, ])
}
let rec loop1.34: Unit = (i.35: Int, m.36: Int, n.37: Int, a.38: Array(Array(Double)), b.39: Array(Array(Double)), c.40: Array(Array(Double))) {
  let join loop1.212: Unit = (i.213: Int, m.214: Int, n.215: Int, a.216: Array(Array(Double)), b.217: Array(Array(Double)), c.218: Array(Array(Double))) {
    let _219: Int = Int(0)
    if (_219 <= i.213) then {
      let _220: Int = Int(1)
      let _221: Int = Sub(n.215, _220)
      let _222: Unit = Apply(loop2.21, [i.213, m.214, _221, a.216, b.217, c.218, ])
      let _223: Int = Int(1)
      let _224: Int = Sub(i.213, _223)
      Jump(loop1.212, [_224, m.214, n.215, a.216, b.217, c.218, ])
    } else {
      Unit
    }
  }
  Jump(loop1.212, [i.35, m.36, n.37, a.38, b.39, c.40, ])
}
let rec mul.47: Unit = (l.48: Int, m.49: Int, n.50: Int, a.51: Array(Array(Double)), b.52: Array(Array(Double)), c.53: Array(Array(Double))) {
  let _54: Int = Int(1)
  let _55: Int = Sub(l.48, _54)
  let _56: Unit = Apply(loop1.34, [_55, m.49, n.50, a.51, b.52, c.53, ])
  Unit
}
let rec main.57: Var({val: Some(Unit)}) = () {
  let _58: Int = Int(0)
  let _59: Double = Double(0)
  let dummy.60: Array(Double) = ExtApply(minimbt_create_float_array, [_58, _59, ])
  let rec init_arr.61: Unit = (i.62: Int, n.63: Int, mat.64: Array(Array(Double))) {
    let join init_arr.225: Unit = (i.226: Int, n.227: Int, mat.228: Array(Array(Double))) {
      let _229: Int = Int(0)
      if (_229 <= i.226) then {
        let _230: Double = Double(0)
        let _231: Array(Double) = ExtApply(minimbt_create_float_array, [n.227, _230, ])
        let _232: Unit = Put mat.228[i.226] = _231
        let _233: Int = Int(1)
        let _234: Int = Sub(i.226, _233)
        Jump(init_arr.225, [_234, n.227, mat.228, ])
      } else {
        Unit
      }
    }
    Jump(init_arr.225, [i.62, n.63, mat.64, ])
  }
  let rec make_arr.71: Array(Array(Double)) = (m.72: Int, n.73: Int, dummy.74: Array(Double)) {
    let mat.75: Array(Array(Double)) = ExtApply(minimbt_create_ptr_array, [m.72, dummy.74, ])
    let _76: Int = Int(1)
    let _77: Int = Sub(m.72, _76)
    let _78: Unit = Apply(init_arr.61, [_77, n.73, mat.75, ])
    Var(mat.75)
  }
  let _79: Int = Int(2)
  let _80: Int = Int(3)
  let a.81: Array(Array(Double)) = Apply(make_arr.71, [_79, _80, dummy.60, ])
  let _82: Int = Int(3)
  let _83: Int = Int(2)
  let b.84: Array(Array(Double)) = Apply(make_arr.71, [_82, _83, dummy.60, ])
  let _85: Int = Int(2)
  let _86: Int = Int(2)
  let c.87: Array(Array(Double)) = Apply(make_arr.71, [_85, _86, dummy.60, ])
  let _88: Int = Int(0)
  let _89: Array(Double) = Get a.81[_88]
  let _90: Int = Int(0)
  let _91: Double = Double(1)
  let _92: Unit = Put _89[_90] = _91
  let _93: Int = Int(0)
  let _94: Array(Double) = Get a.81[_93]
  let _95: Int = Int(1)
  let _96: Double = Double(2)
  let _97: Unit = Put _94[_95] = _96
  let _98: Int = Int(0)
  let _99: Array(Double) = Get a.81[_98]
  let _100: Int = Int(2)
  let _101: Double = Double(3)
  let _102: Unit = Put _99[_100] = _101
  let _103: Int = Int(1)
  let _104: Array(Double) = Get a.81[_103]
  let _105: Int = Int(0)
  let _106: Double = Double(4)
  let _107: Unit = Put _104[_105] = _106
  let _108: Int = Int(1)
  let _109: Array(Double) = Get a.81[_108]
  let _110: Int = Int(1)
  let _111: Double = Double(5)
  let _112: Unit = Put _109[_110] = _111
  let _113: Int = Int(1)
  let _114: Array(Double) = Get a.81[_113]
  let _115: Int = Int(2)
  let _116: Double = Double(6)
  let _117: Unit = Put _114[_115] = _116
  let _118: Int = Int(0)
  let _119: Array(Double) = Get b.84[_118]
  let _120: Int = Int(0)
  let _121: Double = Double(7)
  let _122: Unit = Put _119[_120] = _121
  let _123: Int = Int(0)
  let _124: Array(Double) = Get b.84[_123]
  let _125: Int = Int(1)
  let _126: Double = Double(8)
  let _127: Unit = Put _124[_125] = _126
  let _128: Int = Int(1)
  let _129: Array(Double) = Get b.84[_128]
  let _130: Int = Int(0)
  let _131: Double = Double(9)
  let _132: Unit = Put _129[_130] = _131
  let _133: Int = Int(1)
  let _134: Array(Double) = Get b.84[_133]
  let _135: Int = Int(1)
  let _136: Double = Double(10)
  let _137: Unit = Put _134[_135] = _136
  let _138: Int = Int(2)
  let _139: Array(Double) = Get b.84[_138]
  let _140: Int = Int(0)
  let _141: Double = Double(11)
  let _142: Unit = Put _139[_140] = _141
  let _143: Int = Int(2)
  let _144: Array(Double) = Get b.84[_143]
  let _145: Int = Int(1)
  let _146: Double = Double(12)
  let _147: Unit = Put _144[_145] = _146
  let _148: Int = Int(2)
  let _149: Int = Int(3)
  let _150: Int = Int(2)
  let _151: Unit = Apply(mul.47, [_148, _149, _150, a.81, b.84, c.87, ])
  let _152: Int = Int(0)
  let _153: Array(Double) = Get c.87[_152]
  let _154: Int = Int(0)
  let _155: Double = Get _153[_154]
  let _156: Int = ExtApply(minimbt_truncate, [_155, ])
  let _157: Unit = ExtApply(minimbt_print_int, [_156, ])
  let _158: Unit = ExtApply(minimbt_print_endline, [])
  let _159: Int = Int(0)
  let _160: Array(Double) = Get c.87[_159]
  let _161: Int = Int(1)
  let _162: Double = Get _160[_161]
  let _163: Int = ExtApply(minimbt_truncate, [_162, ])
  let _164: Unit = ExtApply(minimbt_print_int, [_163, ])
  let _165: Unit = ExtApply(minimbt_print_endline, [])
  let _166: Int = Int(1)
  let _167: Array(Double) = Get c.87[_166]
  let _168: Int = Int(0)
  let _169: Double = Get _167[_168]
  let _170: Int = ExtApply(minimbt_truncate, [_169, ])
  let _171: Unit = ExtApply(minimbt_print_int, [_170, ])
  let _172: Unit = ExtApply(minimbt_print_endline, [])
  let _173: Int = Int(1)
  let _174: Array(Double) = Get c.87[_173]
  let _175: Int = Int(1)
  let _176: Double = Get _174[_175]
  let _177: Int = ExtApply(minimbt_truncate, [_176, ])
  let _178: Unit = ExtApply(minimbt_print_int, [_177, ])
  Unit
}
Apply(main.57, [])