let rec h.1: Int = (p.2: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])) {
  let (v1.3: Var({val: Some(Int)}), v2.4: Var({val: Some(Int)}), v3.5: Var({val: Some(Int)}), v4.6: Var({val: Some(Int)}), v5.7: Var({val: Some(Int)}), v6.8: Var({val: Some(Int)}), v7.9: Var({val: Some(Int)}), v8.10: Var({val: Some(Int)}), v9.11: Var({val: Some(Int)}), v10.12: Var({val: Some(Int)})) = p.2
  let rec g.13: Int = (z.14: Int) {
    let join g.41: Int = (z.42: Int) {
      let _43: Int = Add(v1.3, v2.4)
      let _44: Int = Add(_43, v3.5)
      let _45: Int = Add(_44, v4.6)
      let _46: Int = Add(_45, v5.7)
      let _47: Int = Add(_46, v6.8)
      let _48: Int = Add(_47, v7.9)
      let _49: Int = Add(_48, v8.10)
      let _50: Int = Add(_49, v9.11)
      let r.51: Int = Add(_50, v10.12)
      let _52: Int = Int(0)
      if (z.42 <= _52) then {
        let _53: Int = Neg(z.42)
        Jump(g.41, [_53, ])
      } else {
        Var(r.51)
      }
    }
    Jump(g.41, [z.14, ])
  }
  let _26: Int = Int(1)
  Apply(g.13, [_26, ])
}
let rec main.27: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let _39: Int = Apply(h.1, [_38, ])
  let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
  Unit
}
Apply(main.27, [])