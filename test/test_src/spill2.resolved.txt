let rec f: () -> Int {
  Int(12345)
}
let rec g: (y: Int) -> Int {
  Var("y") + Int(1)
}
let rec main: () -> Var(None) {
  let z: Var(None) = Array::make(Int(10), Int(1))
  let x: Var(None) = Apply(Var("f"), [])
  let y: Var(None) = Int(67890)
  let z0: Var(None) = Get Var("z")[Int(0)]
  let z1: Var(None) = Var("z0") + Var("z0")
  let z2: Var(None) = Var("z1") + Var("z1")
  let z3: Var(None) = Var("z2") + Var("z2")
  let z4: Var(None) = Var("z3") + Var("z3")
  let z5: Var(None) = Var("z4") + Var("z4")
  let z6: Var(None) = Var("z5") + Var("z5")
  let z7: Var(None) = Var("z6") + Var("z6")
  let z8: Var(None) = Var("z7") + Var("z7")
  let z9: Var(None) = Var("z8") + Var("z8")
  let z10: Var(None) = Var("z9") + Var("z9")
  let z11: Var(None) = Var("z10") + Var("z10")
  let z12: Var(None) = Var("z11") + Var("z11")
  let z13: Var(None) = Var("z12") + Var("z12")
  let z14: Var(None) = Var("z13") + Var("z13")
  let z15: Var(None) = Var("z14") + Var("z14")
  Apply(Var("print_int"), [If(Eq(Get(Var("z"), Int(1)), Int(0)), App(Var("g"), targs=None, [Var("y")]), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("z0"), Var("z1"), Add, kind=None), Var("z2"), Add, kind=None), Var("z3"), Add, kind=None), Var("z4"), Add, kind=None), Var("z5"), Add, kind=None), Var("z6"), Add, kind=None), Var("z7"), Add, kind=None), Var("z8"), Add, kind=None), Var("z9"), Add, kind=None), Var("z10"), Add, kind=None), Var("z11"), Add, kind=None), Var("z12"), Add, kind=None), Var("z13"), Add, kind=None), Var("z14"), Add, kind=None), Var("z15"), Add, kind=None), Var("x"), Add, kind=None)), ])
}
Unit
