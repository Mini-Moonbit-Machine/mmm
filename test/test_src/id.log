// [Knf] build_knf: LetRec({name: ("f", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1000)])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1000)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("f"), [Int(1000)])])
// [Knf] build_knf: App(Var("f"), [Int(1000)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f1(x2_3, k) {
// [Main]     const _4 = 1;
// [Main]     return k(x2_3 + _4)
// [Main]   }
// [Main]   function main5(k) {
// [Main]     const _6 = 1000;
// [Main]     return $thunk(() => f1(_6, function (_7) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_7))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main5(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
