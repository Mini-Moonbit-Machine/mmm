// [Main] function thunk_main(k) {
// [Main]   function f_1(x_3, k) {
// [Main]     return $thunk(() => k(x_3))
// [Main]   }
// [Main]   function main_4(k) {
// [Main]     const _5 = 1000;
// [Main]     return $thunk(() => f_1(_5, function (_6) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (_8) {
// [Main]         const _9 = 1000;
// [Main]         return $thunk(() => f_1(_9, function (_10) {
// [Main]           return $thunk(() => $external(minimbt_int_of_float, function (_11) {
// [Main]             return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]               return $thunk(() => k(x))
// [Main]             }
// [Main]             , _11))
// [Main]           }
// [Main]           , _10))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       , _6))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_4(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] resolve: LetRec({tyvars: [("T", None)], name: ("f", T), args: [("x", T)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])]), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])]))}, Unit))
// [Typer] resolve: Var("x")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])]), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])]))}, Unit)
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])]), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])]))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])])
// [Typer] resolve: App(Var("f"), targs=None, [Int(1000)])
// [Typer] resolve: Int(1000)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])])
// [Typer] resolve: App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])
// [Typer] resolve: App(Var("f"), targs=None, [Double(1000)])
// [Typer] resolve: Double(1000)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [("T", None)], name: ("f", T), args: [("x", T)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])]), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])]))}, Unit)) against Unit
// [Typer] typevars: [("T", None)]
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], T))
// [Typer] inst result: T
// [Typer] unify: T and T
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])]), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])]), App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])]))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1000)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), targs=None, [Int(1000)]) against Int
// [Typer] infer: Int(1000)
// [Typer] inst: TypeScheme((["T"], (T) -> T))
// [Typer] inst result: (Var(None)) -> Var(None)
// [Typer] unify: (Var(None)) -> Var(None) and (Int) -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), targs=None, [App(Var("f"), targs=None, [Double(1000)])]) against Int
// [Typer] infer: App(Var("f"), targs=None, [Double(1000)])
// [Typer] inst: TypeScheme((["T"], (T) -> T))
// [Typer] inst result: (Var(None)) -> Var(None)
// [Typer] infer: Double(1000)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: ["extension"]
