// [Main] function thunk_main(k) {
// [Main]   function f_1(x_3, k) {
// [Main]     return k(x_3)
// [Main]   }
// [Main]   function main_4(k) {
// [Main]     const _5 = 1000;
// [Main]     return $thunk(() => f_1(_5, function (_6) {
// [Main]       const _8 = minimbt_print_int($force(_6));
// [Main]       const _9 = 1000;
// [Main]       return $thunk(() => f_1(_9, function (_10) {
// [Main]         const _11 = minimbt_int_of_float($force(_10));
// [Main]         return $thunk(() => $thunk(() => k(minimbt_print_int($force(_11)))))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_4(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: ["T"], name: ("f", Named("T")), args: [("x", Named("T"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("f"), [Int(1000)])]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("f"), [Double(1000)])])]))}, Unit)) against Unit
// [Typer] typevars: ["T"]
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Named("T")))
// [Typer] inst result: Named("T")
// [Typer] unify: Named("T") and Named("T")
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("f"), [Int(1000)])]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("f"), [Double(1000)])])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("f"), [Int(1000)])]), App(Var("print_int"), [App(Var("int_of_float"), [App(Var("f"), [Double(1000)])])]))
// [Typer] infer: App(Var("print_int"), [App(Var("f"), [Int(1000)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("f"), [Int(1000)]) against Int
// [Typer] infer: Int(1000)
// [Typer] check: Var("f") against Fun([Int], Int)
// [Typer] inst: TypeScheme((["T"], Fun([Named("T")], Named("T"))))
// [Typer] inst result: Fun([Var({val: None})], Var({val: None}))
// [Typer] unify: Fun([Var({val: None})], Var({val: None})) and Fun([Int], Int)
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: Some(Int)}) and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [App(Var("f"), [Double(1000)])])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("int_of_float"), [App(Var("f"), [Double(1000)])]) against Int
// [Typer] infer: App(Var("f"), [Double(1000)])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme((["T"], Fun([Named("T")], Named("T"))))
// [Typer] inst result: Fun([Var({val: None})], Var({val: None}))
// [Typer] infer: Double(1000)
// [Typer] unify: Var({val: None}) and Double
// [Typer] union: Var({val: None}) and Double
// [Typer] check: Var("int_of_float") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
