let rec main.1: Unit = () {
  let _2: Int = Int(1)
  let _3: String = String("Moonbit")
  let _4: (String) = Tuple([_3, ])
  let r.5: Var(Enum StrOpt { None(), Some(String) }) = Tuple([_2, _4, ])
  let _6: Int = Int(0)
  let (_7: Int, _8: ()) = r.5
  let t.25: Var(Enum StrOpt { None(), Some(String) }) = if (_7 == _6) then {
    let () = _8
    let _9: Int = Int(0)
    let _10: () = Tuple([])
    Tuple([_9, _10, ])
  } else {
    let _11: Int = Int(1)
    let (_12: Int, _13: (String)) = r.5
    if (_12 == _11) then {
      let (_14: String) = _13
      let _15: String = String("OCaml")
      if (_14 == _15) then {
        let _16: Int = Int(1)
        let _17: String = String("Hello ")
        let _18: (String) = Tuple([_17, ])
        Tuple([_16, _18, ])
      } else {
        let _19: String = String("Moonbit")
        if (_14 == _19) then {
          let _20: Int = Int(1)
          let _21: String = String("Hello 月兔")
          let _22: (String) = Tuple([_21, ])
          Tuple([_20, _22, ])
        } else {
          let _23: Int = Int(0)
          let _24: () = Tuple([])
          Tuple([_23, _24, ])
        }
      }
    } else {
      ExtApply(minimbt_panic, [])
    }
  }
  let _26: Int = Int(1)
  let (_27: Int, _28: (String)) = t.25
  let w.34: Int = if (_27 == _26) then {
    let (_29: String) = _28
    let _30: String = String("Hello 月兔")
    if (_29 == _30) then {
      Int(1)
    } else {
      Int(3)
    }
  } else {
    let _31: Int = Int(0)
    let (_32: Int, _33: ()) = t.25
    if (_32 == _31) then {
      let () = _33
      Int(2)
    } else {
      Int(3)
    }
  }
  let _36: Unit = ExtApply(minimbt_print_int, [w.34, ])
  let greet.37: String = String(" Hello 月兔  A 0 0 α ")
  let _39: Unit = ExtApply(minimbt_print_string, [greet.37, ])
  Unit
}
Apply(main.1, [])
