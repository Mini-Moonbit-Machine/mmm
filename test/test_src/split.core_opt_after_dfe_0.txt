# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn small1.30 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn main21.32 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0()
    let %1: int32 = call f0()
    let %2: int32 = call f0()
    let %3: int32 = call f0()
    let %4: int32 = call f0()
    let %5: unit = call f1(0)
    return %5
  }
}
.fn rec2.31 #f1 : fn(int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = eq($b0.0, 42)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b7()
  }
  .bb #b2 () {
    let %2: int32 = add($b0.0, 1)
    jump b0(%2)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
  .bb #b6 (int32) {
    jump b3(())
  }
  .bb #b7 () {
    jump b6(5)
  }
}
.thunk ::0 start

