// [Asm] pre_assigned_registers: Insn(iref=%2) -> v3, Insn(iref=%4) -> v7, Insn(iref=%1) -> v5, Insn(iref=%3) -> v4, Self(fref=f0) -> v0, Insn(iref=%0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=123), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move: v6 <- v5
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] defined: v12 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move: v6 <- v4
// [Asm] defined: v6 is X
// [Asm] Label("main10.20") clobbered_x: @hashset.of([a0])
// [Asm] Label("main10.20") clobbered_f: @hashset.of([])
// [Asm] subst   li v14, 123 ->   li a0, 123
// [Asm] subst   bge zero, v14, .main10.20_1 ->   bge zero, a0, .main10.20_1
// [Asm] subst   li v9, 123 ->   li a0, 123
// [Asm] subst   addi v5, v9, 456 ->   addi a0, a0, 456
// [Asm] subst   j .main10.20_3 ->   j .main10.20_3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   li v12, 789 ->   li a0, 789
// [Asm] subst   addi v3, v12, -123 ->   addi a0, a0, -123
// [Asm] subst   addi v4, v3, 123 ->   addi a0, a0, 123
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$start") clobbered_x: @hashset.of([a0])
// [Asm] Label("T$start") clobbered_f: @hashset.of([])
// [Asm] subst   call main10.20 ->   call main10.20
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main10.20:
// [Asm] # block info: defs: [v14], uses: [v14, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main10.20_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   li v14, 123  # live: [v14, zero]
// [Asm]   bge zero, v14, .main10.20_1  # live: []
// [Asm] 
// [Asm] # block info: defs: [v4, v6, v12, v3], uses: [v4, v12, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .main10.20_2:
// [Asm]   li v12, 789  # live: [v12]
// [Asm]   addi v3, v12, -123  # live: [v3]
// [Asm]   addi v4, v3, 123  # live: [v4]
// [Asm] # control
// [Asm]   mv v6, v4  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v6, a0, v7], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .main10.20_3:
// [Asm]   # save_ctx2  # live: [v6]
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v6, v9], uses: [v5, v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .main10.20_1:
// [Asm]   li v9, 123  # live: [v9]
// [Asm]   addi v5, v9, 456  # live: [v5]
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm]   j .main10.20_3  # live: [v6]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main10.20  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("f", Int), args: [("u", Unit)], body: Int(123)}, LetRec({name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), [])))))
// [Knf] build_knf: Int(123)
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), []))))
// [Knf] build_knf: Int(456)
// [Knf] build_knf: LetRec({name: ("h", Int), args: [("u", Unit)], body: Int(789)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), [])))
// [Knf] build_knf: Int(789)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))]))
// [Knf] build_knf: App(Var("f"), [Unit])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))])
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("g"), [Unit])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(App(Var("h"), [Unit]), Var("x"), Sub, kind=Some(Int))
// [Knf] build_knf: App(Var("h"), [Unit])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main10.20
// [Main]   .type main10.20, @function
// [Main] # leaf false
// [Main] main10.20:
// [Main] .main10.20_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 123
// [Main]   bge zero, a0, .main10.20_1
// [Main] 
// [Main] .main10.20_2:
// [Main]   li a0, 789
// [Main]   addi a0, a0, -123
// [Main]   addi a0, a0, 123
// [Main] 
// [Main] .main10.20_3:
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main10.20_1:
// [Main]   li a0, 123
// [Main]   addi a0, a0, 456
// [Main]   j .main10.20_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main10.20
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] Lowering function main10.20
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=456), Int32(val=123)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=789), Int32(val=123)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Int32(val=123)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=123), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main10.20 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {f1: Once, g4: Once, h7: Once, main10: Once}
// [KnfOpt] Knf inline Some(f1)
// [KnfOpt] Knf inline Some(g4)
// [KnfOpt] Knf inline Some(h7)
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
