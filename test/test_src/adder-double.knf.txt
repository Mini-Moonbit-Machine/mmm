let rec make_adder.1: (Int) -> Double = (x.3: Double) {
  let rec adder.4: Double = (y.6: Int) {
    let _7: Double = ExtApply(minimbt_float_of_int, [y.6, ])
    FAdd(x.3, _7)
  }
  Var(adder.4)
}
let rec main.8: Unit = () {
  let _9: Double = Double(2.14)
  let add.10: (Int) -> Double = Apply(make_adder.1, [_9, ])
  let _11: Int = Int(1)
  let _12: Double = Apply(add.10, [_11, ])
  let _13: Int = ExtApply(minimbt_int_of_float, [_12, ])
  ExtApply(minimbt_print_int, [_13, ])
}
Apply(main.8, [])
