let rec sum_prefix.1: Array(Int) = (arr.2: Array(Int), len.3: Int) {
  let _4: Int = Int(0)
  let res.5: Array(Int) = ExtApply(minimbt_create_array, [len.3, _4, ])
  let _16: Int = Int(0)
  let _17: Int = Int(0)
  let join sum_nested.37: Unit = (acc.38: Int, x.39: Int) {
    let _40: Int = Int(1)
    let _41: Int = Sub(len.3, _40)
    if (x.39 <= _41) then {
      let _42: Int = Get arr.2[x.39]
      let s.43: Int = Add(acc.38, _42)
      let _44: Unit = Put res.5[x.39] = s.43
      let _45: Int = Int(1)
      let _46: Int = Add(x.39, _45)
      Jump(sum_nested.37, [s.43, _46, ])
    } else {
      let _18: Unit = Unit
      Var(res.5)
    }
  }
  Jump(sum_nested.37, [_16, _17, ])
}
let rec main.19: Var({val: Some(Unit)}) = () {
  let _20: Int = Int(10)
  let _21: Int = Int(4)
  let arr.22: Array(Int) = ExtApply(minimbt_create_array, [_20, _21, ])
  let _23: Int = Int(10)
  let _24: Array(Int) = Apply(sum_prefix.1, [arr.22, _23, ])
  let _25: Int = Int(0)
  let _26: Int = Get _24[_25]
  ExtApply(minimbt_print_int, [_26, ])
}
Apply(main.19, [])