let rec sum_prefix.1: Array(Int) = (arr.2: Array(Int), len.3: Int) {
  let _4: Int = Int(0)
  let res.5: Array(Int) = ExtApply(minimbt_create_array, [len.3, _4, ])
  let rec sum_nested.6: Unit = (acc.7: Int, x.8: Int) {
    let _9: Int = Int(1)
    let _10: Int = Sub(len.3, _9)
    if (x.8 <= _10) then {
      let _11: Int = Get arr.2[x.8]
      let s.12: Int = Add(acc.7, _11)
      let _13: Unit = Put res.5[x.8] = s.12
      let _14: Int = Int(1)
      let _15: Int = Add(x.8, _14)
      Apply(sum_nested.6, [s.12, _15, ])
    } else {
      Unit
    }
  }
  let _16: Int = Int(0)
  let _17: Int = Int(0)
  let _18: Unit = Apply(sum_nested.6, [_16, _17, ])
  Var(res.5)
}
let rec main.19: Var({val: Some(Unit)}) = () {
  let _20: Int = Int(10)
  let _21: Int = Int(4)
  let arr.22: Array(Int) = ExtApply(minimbt_create_array, [_20, _21, ])
  let _23: Int = Int(10)
  let _24: Array(Int) = Apply(sum_prefix.1, [arr.22, _23, ])
  let _25: Int = Int(0)
  let _26: Int = Get _24[_25]
  ExtApply(minimbt_print_int, [_26, ])
}
Apply(main.19, [])