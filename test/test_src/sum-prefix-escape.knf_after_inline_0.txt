let rec main.19: Var({val: Some(Unit)}) = () {
  let _20: Int = Int(10)
  let _21: Int = Int(4)
  let arr.22: Array(Int) = ExtApply(minimbt_create_array, [_20, _21, ])
  let _23: Int = Int(10)
  let _27: Int = Int(0)
  let res.28: Array(Int) = ExtApply(minimbt_create_array, [_23, _27, ])
  let rec sum_nested.29: Unit = (acc.30: Int, x.31: Int) {
    let _32: Int = Int(1)
    let _33: Int = Sub(_23, _32)
    if (x.31 <= _33) then {
      let _34: Int = Get arr.22[x.31]
      let s.35: Int = Add(acc.30, _34)
      let _36: Unit = Put res.28[x.31] = s.35
      let _37: Int = Int(1)
      let _38: Int = Add(x.31, _37)
      Apply(sum_nested.29, [s.35, _38, ])
    } else {
      Unit
    }
  }
  let _39: Int = Int(0)
  let _40: Int = Int(0)
  let _41: Unit = Apply(sum_nested.29, [_39, _40, ])
  let _24: Array(Int) = Var(res.28)
  let _25: Int = Int(0)
  let _26: Int = Get _24[_25]
  ExtApply(minimbt_print_int, [_26, ])
}
Apply(main.19, [])