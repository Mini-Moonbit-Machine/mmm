let rec main25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(10)
  let _27: Int = Int(4)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(10)
  let _30: Array(Int) = 
    let _33: Int = Int(0)
    let res.34: Array(Int) = ExtApply(minimbt_create_array, [_29, _33, ])
    let rec sum_nested8.35: Unit = (acc9.36: Int, x11.37: Int) {
      let _38: Int = Int(1)
      let _39: Int = Sub(_29, _38)
      if (x11.37 <= _39) then {
        let _40: Int = Get arr.28[x11.37]
        let s.41: Int = Add(acc9.36, _40)
        let _42: Unit = Put res.34[x11.37] = s.41
        let _43: Int = Int(1)
        let _44: Int = Add(x11.37, _43)
        Apply(sum_nested8.35, [s.41, _44, ])
      } else {
        Unit
      }
    }
    let _45: Int = Int(0)
    let _46: Int = Int(0)
    let _47: Unit = Apply(sum_nested8.35, [_45, _46, ])
    Var(res.34)
  let _31: Int = Int(0)
  let _32: Int = Get _30[_31]
  ExtApply(minimbt_print_int, [_32, ])
}
Apply(main25, [])