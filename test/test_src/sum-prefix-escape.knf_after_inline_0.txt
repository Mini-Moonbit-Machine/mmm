let rec main25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(10)
  let _27: Int = Int(4)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(10)
  let _30: Array(Int) = 
    let _47: Int = Int(0)
    let res.48: Array(Int) = ExtApply(minimbt_create_array, [_29, _47, ])
    let rec sum_nested8.49: Unit = (acc9.50: Int, x11.51: Int) {
      let _52: Int = Int(1)
      let _53: Int = Sub(_29, _52)
      if (x11.51 <= _53) then {
        let _54: Int = Get arr.28[x11.51]
        let s.55: Int = Add(acc9.50, _54)
        let _56: Unit = Put res.48[x11.51] = s.55
        let _57: Int = Int(1)
        let _58: Int = Add(x11.51, _57)
        Apply(sum_nested8.49, [s.55, _58, ])
      } else {
        Unit
      }
    }
    let _59: Int = Int(0)
    let _60: Int = Int(0)
    let _61: Unit = Apply(sum_nested8.49, [_59, _60, ])
    Var(res.48)
  let _31: Int = Int(0)
  let _32: Int = Get _30[_31]
  ExtApply(minimbt_print_int, [_32, ])
}
Apply(main25, [])