let rec fib.1: Int = (n.2: Int) {
  let _3: Int = Int(1)
  if (n.2 <= _3) then {
    Var(n.2)
  } else {
    let _4: Int = Int(1)
    let _5: Int = Sub(n.2, _4)
    let _6: Int = Apply(fib.1, [_5, ])
    let _7: Int = Int(2)
    let _8: Int = Sub(n.2, _7)
    let _9: Int = Apply(fib.1, [_8, ])
    Add(_6, _9)
  }
}
let rec main.10: Var({val: Some(Unit)}) = () {
  let _11: Int = Int(30)
  let _12: Int = Apply(fib.1, [_11, ])
  ExtApply(minimbt_print_int, [_12, ])
}
Apply(main.10, [])let rec fib.1: Int = (n.2: Int) {
  let _3: Int = Int(1)
  if (n.2 <= _3) then {
    Var(n.2)
  } else {
    let _4: Int = Int(1)
    let _5: Int = Sub(n.2, _4)
    let _6: Int = Apply(fib.1, [_5, ])
    let _7: Int = Int(2)
    let _8: Int = Sub(n.2, _7)
    let _9: Int = Apply(fib.1, [_8, ])
    Add(_6, _9)
  }
}
let rec main.10: Var({val: Some(Unit)}) = () {
  let _11: Int = Int(30)
  let _12: Int = Apply(fib.1, [_11, ])
  ExtApply(minimbt_print_int, [_12, ])
}
Apply(main.10, [])