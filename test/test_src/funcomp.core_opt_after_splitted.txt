# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main21l3_5 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f4(123)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.fn T$start_12 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn dec17l2_2 #f2 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = sub($f0, 1)
    return %0
  }
}
.fn composed6.29l5_4 #f4 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f1($f0)
    jump b1(%0)
  }
  .bb #b1 (int32) {
    let %1: int32 = call f3($b1.0)
    return %1
  }
}
.fn dbl10l0_0 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f0)
    return %0
  }
}
.fn inc13l1_1 #f1 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, 1)
    return %0
  }
}
.fn composed6.26l4_3 #f3 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0($f0)
    jump b1(%0)
  }
  .bb #b1 (int32) {
    let %1: int32 = call f2($b1.0)
    return %1
  }
}
.thunk ::0 start
