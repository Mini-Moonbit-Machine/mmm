# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main.17 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = conv.d2i.rtz(1.23)
    let %1: int32 = conv.d2i.rtz(4.56)
    let %2: double = neg(7.89)
    let %3: int32 = conv.d2i.rtz(%2)
    let %4: bool = le(0, %3)
    br %4 b1() b2()
  }
  .bb #b1 () {
    let %5: bool = le(%0, 0)
    br %5 b3() b4()
  }
  .bb #b2 () {
    let %18: bool = le(%0, 0)
    br %18 b12() b13()
  }
  .bb #b3 () {
    let %6: int32 = add(%0, %1)
    let %7: bool = le(0, %1)
    br %7 b5() b6()
  }
  .bb #b4 () {
    let %12: int32 = add(%0, %3)
    let %13: bool = le(0, %1)
    br %13 b8() b9()
  }
  .bb #b5 () {
    let %8: int32 = add(%6, %3)
    let %9: unit = ext_call minimbt_print_int(%8)
    jump b7(%9)
  }
  .bb #b6 () {
    let %10: int32 = add(%6, %0)
    let %11: unit = ext_call minimbt_print_int(%10)
    jump b7(%11)
  }
  .bb #b7 (unit) {
    jump b11($b7.0)
  }
  .bb #b8 () {
    let %14: int32 = add(%12, %3)
    let %15: unit = ext_call minimbt_print_int(%14)
    jump b10(%15)
  }
  .bb #b9 () {
    let %16: int32 = add(%12, %0)
    let %17: unit = ext_call minimbt_print_int(%16)
    jump b10(%17)
  }
  .bb #b10 (unit) {
    jump b11($b10.0)
  }
  .bb #b11 (unit) {
    jump b21($b11.0)
  }
  .bb #b12 () {
    let %19: int32 = add(%1, %1)
    let %20: bool = le(0, %1)
    br %20 b14() b15()
  }
  .bb #b13 () {
    let %25: int32 = add(%1, %3)
    let %26: bool = le(0, %1)
    br %26 b17() b18()
  }
  .bb #b14 () {
    let %21: int32 = add(%19, %3)
    let %22: unit = ext_call minimbt_print_int(%21)
    jump b16(%22)
  }
  .bb #b15 () {
    let %23: int32 = add(%19, %0)
    let %24: unit = ext_call minimbt_print_int(%23)
    jump b16(%24)
  }
  .bb #b16 (unit) {
    jump b20($b16.0)
  }
  .bb #b17 () {
    let %27: int32 = add(%25, %3)
    let %28: unit = ext_call minimbt_print_int(%27)
    jump b19(%28)
  }
  .bb #b18 () {
    let %29: int32 = add(%25, %0)
    let %30: unit = ext_call minimbt_print_int(%29)
    jump b19(%30)
  }
  .bb #b19 (unit) {
    jump b20($b19.0)
  }
  .bb #b20 (unit) {
    jump b21($b20.0)
  }
  .bb #b21 (unit) {
    return $b21.0
  }
}
.thunk ::0 start
