let rec dummy1: Int = (i2.3: Int) {
  Var(i2.3)
}
let rec g18: Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))}) = (f19.20: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let rec h21: Var({val: Some(Int)}) = (x22.23: Var({val: Some(Int)})) {
    let _24: Int = Int(0)
    if (x22.23 == _24) then {
      Int(1)
    } else {
      let _25: Int = Int(1)
      let _26: Int = Sub(x22.23, _25)
      let _27: Var({val: Some(Int)}) = Apply(f19.20, [_26, ])
      Mul(x22.23, _27)
    }
  }
  Var(h21)
}
let arr.47: Array(Fun([Int], Int)) = 
  let _57: Int = Int(1)
  ExtApply(minimbt_create_ptr_array, [_57, dummy1, ])
let rec aux9.48: Var({val: Some(Int)}) = (x10.49: Var({val: Some(Int)})) {
  let _50: Int = Int(0)
  let _51: Fun([Int], Int) = Get arr.47[_50]
  Apply(_51, [x10.49, ])
}
let fixedpoint.52: Fun([Int], Int) = Apply(g18, [aux9.48, ])
let _54: Unit = 
  let _58: Int = Int(0)
  Put arr.47[_58] = fixedpoint.52
let a.33: Int = 
  let _59: Int = Int(5)
  Apply(fixedpoint.52, [_59, ])
let rec main37: Var({val: Some(Unit)}) = () {
  let _55: Int = Int(5)
  let _56: Int = Apply(fixedpoint.52, [_55, ])
  let _39: Unit = ExtApply(minimbt_print_int, [_56, ])
  let _40: Int = Int(10)
  let _41: Int = Add(_40, a.33)
  let _43: Unit = ExtApply(minimbt_print_int, [_41, ])
  let _44: Int = Int(31)
  let _45: Int = Add(_44, a.33)
  ExtApply(minimbt_print_int, [_45, ])
}
Apply(main37, [])
