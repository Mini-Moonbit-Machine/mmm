let rec dummy.1: Int = (i.2: Int) {
  Var(i.2)
}
let rec g.14: Var({val: Some(Fun([Var({val: Some(Int)})], Var({val: Some(Int)})))}) = (f.15: Var({val: Some(Fun([Int], Var({val: Some(Int)})))})) {
  let rec h.16: Var({val: Some(Int)}) = (x.17: Var({val: Some(Int)})) {
    let _18: Int = Int(0)
    if (x.17 == _18) then {
      Int(1)
    } else {
      let _19: Int = Int(1)
      let _20: Int = Sub(x.17, _19)
      let _21: Var({val: Some(Int)}) = Apply(f.15, [_20, ])
      Mul(x.17, _21)
    }
  }
  Var(h.16)
}
let _39: Int = Int(1)
let arr.40: Array(Fun([Int], Int)) = ExtApply(minimbt_create_ptr_array, [_39, dummy.1, ])
let rec aux.41: Var({val: Some(Int)}) = (x.42: Var({val: Some(Int)})) {
  let _43: Int = Int(0)
  let _44: Fun([Int], Int) = Get arr.40[_43]
  Apply(_44, [x.42, ])
}
let fixedpoint.45: Fun([Int], Int) = Apply(g.14, [aux.41, ])
let _46: Int = Int(0)
let _47: Unit = Put arr.40[_46] = fixedpoint.45
let factorial.22: Fun([Int], Int) = Var(fixedpoint.45)
let _26: Int = Int(5)
let a.27: Int = Apply(factorial.22, [_26, ])
let rec main.30: Var({val: Some(Unit)}) = () {
  let _48: Int = Int(5)
  let _49: Int = Apply(factorial.22, [_48, ])
  let _31: Unit = ExtApply(minimbt_print_int, [_49, ])
  let _32: Int = Int(10)
  let _33: Int = Add(_32, a.27)
  let _34: Unit = ExtApply(minimbt_print_int, [_33, ])
  let _35: Int = Int(31)
  let _36: Int = Add(_35, a.27)
  ExtApply(minimbt_print_int, [_36, ])
}
Apply(main.30, [])