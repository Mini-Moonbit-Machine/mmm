let rec dummy.1: Int = (i.3: Int) {
  Var(i.3)
}
let rec g.18: Fun([Int], Int) = (f.20: Fun([Int], Int)) {
  let rec h.21: Int = (x.23: Int) {
    let _24: Int = Int(0)
    if (x.23 == _24) then {
      Int(1)
    } else {
      let _25: Int = Int(1)
      let _26: Int = Sub(x.23, _25)
      let _27: Int = Apply(f.20, [_26, ])
      Mul(x.23, _27)
    }
  }
  Var(h.21)
}
let arr.47: Array(Fun([Int], Int)) = 
  let _57: Int = Int(1)
  ExtApply(minimbt_create_ptr_array, [_57, dummy.1, ])
let rec aux.48: Int = (x.49: Int) {
  let _50: Int = Int(0)
  let _51: Fun([Int], Int) = Get arr.47[_50]
  Apply(_51, [x.49, ])
}
let fixedpoint.52: Fun([Int], Int) = Apply(g.18, [aux.48, ])
let _54: Unit = 
  let _58: Int = Int(0)
  Put arr.47[_58] = fixedpoint.52
let a.33: Int = 
  let _59: Int = Int(5)
  Apply(fixedpoint.52, [_59, ])
let rec main.37: Unit = () {
  let _55: Int = Int(5)
  let _56: Int = Apply(fixedpoint.52, [_55, ])
  let _39: Unit = ExtApply(minimbt_print_int, [_56, ])
  let _40: Int = Int(10)
  let _41: Int = Add(_40, a.33)
  let _43: Unit = ExtApply(minimbt_print_int, [_41, ])
  let _44: Int = Int(31)
  let _45: Int = Add(_44, a.33)
  ExtApply(minimbt_print_int, [_45, ])
}
Apply(main.37, [])
