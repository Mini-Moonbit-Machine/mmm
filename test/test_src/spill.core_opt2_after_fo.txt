# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.86 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(1, 2, 3, 4)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn f.85 #f0 : fn(int32, int32, int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add($f0, $f1)
    let %1: int32 = add($f0, $f2)
    let %2: int32 = add($f0, $f3)
    let %3: int32 = add($f1, $f2)
    let %4: int32 = add($f1, $f3)
    let %5: int32 = add($f2, $f3)
    let %6: int32 = add(%0, %1)
    let %7: int32 = add(%0, %2)
    let %8: int32 = add(%0, %3)
    let %9: int32 = add(%0, %4)
    let %10: int32 = add(%0, %5)
    let %11: int32 = add(%1, %2)
    let %12: int32 = add(%1, %3)
    let %13: int32 = add(%1, %4)
    let %14: int32 = add(%1, %5)
    let %15: int32 = add(%2, %3)
    let %16: int32 = add(%2, %4)
    let %17: int32 = add(%2, %5)
    let %18: int32 = add(%3, %4)
    let %19: int32 = add(%3, %5)
    let %20: int32 = add(%4, %5)
    let %21: int32 = add(%6, %7)
    let %22: int32 = add(%6, %8)
    let %23: int32 = add(%6, %9)
    let %24: int32 = add(%6, %10)
    let %25: int32 = add(%6, %11)
    let %26: int32 = add(%6, %12)
    let %27: int32 = add(%6, %13)
    let %28: int32 = add(%6, %14)
    let %29: int32 = add(%6, %15)
    let %30: int32 = add(%6, %16)
    let %31: int32 = add(%6, %17)
    let %32: int32 = add(%6, %18)
    let %33: int32 = add(%6, %19)
    let %34: int32 = add(%6, %20)
    let %36: int32 = add(%0, $f2)
    let %37: int32 = add(%36, $f3)
    let %38: int32 = add(%37, %0)
    let %39: int32 = add(%38, %1)
    let %40: int32 = add(%39, %2)
    let %41: int32 = add(%40, %3)
    let %42: int32 = add(%41, %4)
    let %43: int32 = add(%42, %5)
    let %44: int32 = add(%43, %6)
    let %45: int32 = add(%44, %7)
    let %46: int32 = add(%45, %8)
    let %47: int32 = add(%46, %9)
    let %48: int32 = add(%47, %10)
    let %49: int32 = add(%48, %11)
    let %50: int32 = add(%49, %12)
    let %51: int32 = add(%50, %13)
    let %52: int32 = add(%51, %14)
    let %53: int32 = add(%52, %15)
    let %54: int32 = add(%53, %16)
    let %55: int32 = add(%54, %17)
    let %56: int32 = add(%55, %18)
    let %57: int32 = add(%56, %19)
    let %58: int32 = add(%57, %20)
    let %59: int32 = add(%58, %21)
    let %60: int32 = add(%59, %22)
    let %61: int32 = add(%60, %23)
    let %62: int32 = add(%61, %24)
    let %63: int32 = add(%62, %25)
    let %64: int32 = add(%63, %26)
    let %65: int32 = add(%64, %27)
    let %66: int32 = add(%65, %28)
    let %67: int32 = add(%66, %29)
    let %68: int32 = add(%67, %30)
    let %69: int32 = add(%68, %31)
    let %70: int32 = add(%69, %32)
    let %71: int32 = add(%70, %33)
    let %72: int32 = add(%71, %34)
    let %73: int32 = neg(%72)
    return %73
  }
}
.thunk ::0 start
