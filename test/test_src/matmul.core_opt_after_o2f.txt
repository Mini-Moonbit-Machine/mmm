# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn matmul1_0 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f5, [1] = $f5, [2] = $f3, [3] = $f4, [4] = $f1, [5] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: unit = apply f0.m0(%1)
    return %2
  }
}
.fn loop322_9 #f9 : closure(int32) -> unit
.freevars (array[array[double]], int32, int32, array[array[double]], array[array[double]])
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: array[double] = load array[double] offset(^1, ^2)
    let %2: array[double] = load array[double] offset(^1, ^2)
    let %3: double = load double offset(%2, ^3)
    let %4: array[double] = load array[double] offset(^4, ^2)
    let %5: double = load double offset(%4, $f0)
    let %6: array[double] = load array[double] offset(^5, $f0)
    let %7: double = load double offset(%6, ^3)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, ^3) <- %9
    let %11: int32 = sub($f0, 1)
    let %12: unit = apply self(%11)
    jump b3(%12)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop218_7 #f7 : closure(int32) -> unit
.freevars (array[array[double]], int32, array[array[double]], array[array[double]], int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f9, [1] = ^1, [2] = ^2, [3] = $f0, [4] = ^3, [5] = ^4
    let %2: int32 = sub(^5, 1)
    let %3: unit = apply f7.m0(%2)
    let %4: int32 = sub($f0, 1)
    let %5: unit = apply self(%4)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop114_5 #f5 : closure(int32) -> unit
.freevars (array[array[double]], array[array[double]], array[array[double]], int32, int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: closure(int32) -> unit heap(6)> <- [0] = f7, [1] = ^1, [2] = $f0, [3] = ^2, [4] = ^3, [5] = ^4
    let %2: int32 = sub(^5, 1)
    let %3: unit = apply f5.m0(%2)
    let %4: int32 = sub($f0, 1)
    let %5: unit = apply self(%4)
    jump b3(%5)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn main53l0_3 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let %1: array[array[double]] = call f2(2, 3, f3.m0)
    let %2: array[array[double]] = call f2(3, 2, f3.m0)
    let %3: array[array[double]] = call f2(2, 2, f3.m0)
    let %4: array[double] = load array[double] field(%1, 0)
    let _ = store double field(%4, 0) <- 1
    let %6: array[double] = load array[double] field(%1, 0)
    let _ = store double field(%6, 1) <- 2
    let %8: array[double] = load array[double] field(%1, 0)
    let _ = store double field(%8, 2) <- 3
    let %10: array[double] = load array[double] field(%1, 1)
    let _ = store double field(%10, 0) <- 4
    let %12: array[double] = load array[double] field(%1, 1)
    let _ = store double field(%12, 1) <- 5
    let %14: array[double] = load array[double] field(%1, 1)
    let _ = store double field(%14, 2) <- 6
    let %16: array[double] = load array[double] field(%2, 0)
    let _ = store double field(%16, 0) <- 7
    let %18: array[double] = load array[double] field(%2, 0)
    let _ = store double field(%18, 1) <- 8
    let %20: array[double] = load array[double] field(%2, 1)
    let _ = store double field(%20, 0) <- 9
    let %22: array[double] = load array[double] field(%2, 1)
    let _ = store double field(%22, 1) <- 10
    let %24: array[double] = load array[double] field(%2, 2)
    let _ = store double field(%24, 0) <- 11
    let %26: array[double] = load array[double] field(%2, 2)
    let _ = store double field(%26, 1) <- 12
    let %28: unit = call f0(2, 3, 2, %1, %2, %3)
    let %29: array[double] = load array[double] field(%3, 0)
    let %30: double = load double field(%29, 0)
    let %31: int32 = conv.d2i.rtz(%30)
    let %32: unit = ext_call minimbt_print_int(%31)
    let %33: unit = ext_call minimbt_print_endline()
    let %34: array[double] = load array[double] field(%3, 0)
    let %35: double = load double field(%34, 1)
    let %36: int32 = conv.d2i.rtz(%35)
    let %37: unit = ext_call minimbt_print_int(%36)
    let %38: unit = ext_call minimbt_print_endline()
    let %39: array[double] = load array[double] field(%3, 1)
    let %40: double = load double field(%39, 0)
    let %41: int32 = conv.d2i.rtz(%40)
    let %42: unit = ext_call minimbt_print_int(%41)
    let %43: unit = ext_call minimbt_print_endline()
    let %44: array[double] = load array[double] field(%3, 1)
    let %45: double = load double field(%44, 1)
    let %46: int32 = conv.d2i.rtz(%45)
    let %47: unit = ext_call minimbt_print_int(%46)
    return ()
  }
}
.fn init_arr63l2_1 #f1 : fn(int32, array[array[double]], int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap($f2)> <- [..] = 0
    let _ = store array[double] offset($f1, $f0) <- f1.m0
    let %3: int32 = sub($f0, 1)
    let %4: unit = call f1(%3, $f1, $f2)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn gen_arr57l1_2 #f2 : fn(int32, int32, array[double]) -> array[array[double]]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: unit = call f1(%1, f2.m0, $f1)
    return f2.m0
  }
}
.fn T$start_14 #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.thunk ::0 start
