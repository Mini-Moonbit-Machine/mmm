# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main.48 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(10)> <- [..] = 4
    let %1: array[int32] = call f0(f1.m0, 10)
    let %2: int32 = load int32 field(%1, 0 * @32)
    let %3: unit = ext_call minimbt_print_int(%2)
    return %3
  }
}
.fn sum_prefix.47 #f0 : fn(array[int32], int32) -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap($f1)> <- [..] = 0
    jump b1(0, 0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32, int32) {
    let %1: int32 = sub($f1, 1)
    let %2: bool = le($b2.1, %1)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = load int32 offset($f0, $b2.1 * @32)
    let %4: int32 = add($b2.0, %3)
    let _ = store int32 offset(f0.m0, $b2.1 * @32) <- %4
    let %6: int32 = add($b2.1, 1)
    jump b2(%4, %6)
  }
  .bb #b4 () {
    jump b5(f0.m0)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.thunk ::0 start
