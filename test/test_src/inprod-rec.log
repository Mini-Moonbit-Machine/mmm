// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("i", Int)], body: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double)), Double(0))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double)), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Var("v1"), Var("i"))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("v2"), Var("i"))
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))
// [Knf] build_knf: Array(Int(3), Double(1.23))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])]))
// [Knf] build_knf: Array(Int(3), Double(4.56))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function inprod1(v12_3, v24_5, i6_7, k) {
// [Main]     const _8 = 0;
// [Main]     if (_8 <= i6_7) {
// [Main]       const _9 = v12_3[i6_7];
// [Main]       const _10 = v24_5[i6_7];
// [Main]       const _11 = _9 * _10;
// [Main]       const _12 = 1;
// [Main]       const _13 = i6_7 - _12;
// [Main]       return $thunk(() => inprod1(v12_3, v24_5, _13, function (_14) {
// [Main]         return $thunk(() => k(_11 + _14))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       return k(0)
// [Main]     }
// [Main]   }
// [Main]   function main15(k) {
// [Main]     const _16 = 3;
// [Main]     const _17 = 1.23;
// [Main]     const v1_18 = minimbt_create_float_array($force(_16), $force(_17));
// [Main]     const _19 = 3;
// [Main]     const _20 = 4.56;
// [Main]     const v2_21 = minimbt_create_float_array($force(_19), $force(_20));
// [Main]     const _22 = 1000000;
// [Main]     const _23 = 2;
// [Main]     return $thunk(() => inprod1(v1_18, v2_21, _23, function (_24) {
// [Main]       const _25 = _22 * _24;
// [Main]       const _26 = minimbt_truncate($force(_25));
// [Main]       return $thunk(() => k(minimbt_print_int($force(_26))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main15(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
