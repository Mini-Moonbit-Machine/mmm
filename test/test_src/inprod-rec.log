// [Main] function thunk_main(k) {
// [Main]   function inprod_1(v1_3, v2_5, i_7, k) {
// [Main]     const _8 = 0;
// [Main]     if (_8 <= i_7) {
// [Main]       const _9 = v1_3[i_7];
// [Main]       const _10 = v2_5[i_7];
// [Main]       const _11 = _9 * _10;
// [Main]       const _12 = 1;
// [Main]       const _13 = i_7 - _12;
// [Main]       return $thunk(() => inprod_1(v1_3, v2_5, _13, function (_14) {
// [Main]         return $thunk(() => k(_11 + _14))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       return $thunk(() => k(0))
// [Main]     }
// [Main]   }
// [Main]   function main_15(k) {
// [Main]     const _16 = 3;
// [Main]     const _17 = 1.23;
// [Main]     return $thunk(() => $external(minimbt_create_float_array, function (v1_18) {
// [Main]       const _19 = 3;
// [Main]       const _20 = 4.56;
// [Main]       return $thunk(() => $external(minimbt_create_float_array, function (v2_21) {
// [Main]         const _22 = 1000000;
// [Main]         const _23 = 2;
// [Main]         return $thunk(() => inprod_1(v1_18, v2_21, _23, function (_24) {
// [Main]           const _25 = _22 * _24;
// [Main]           return $thunk(() => $external(minimbt_truncate, function (_26) {
// [Main]             return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]               return $thunk(() => k(x))
// [Main]             }
// [Main]             , _26))
// [Main]           }
// [Main]           , _25))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       , _19, _20))
// [Main]     }
// [Main]     , _16, _17))
// [Main]   }
// [Main]   return $thunk(() => main_15(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("inprod", Double), args: [("v1", Array[Double]), ("v2", Array[Double]), ("i", Int)], body: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=None)]), Add, kind=None), Double(0))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("v1", Var(None)), Array(Int(3), Double(1.23)), Let(("v2", Var(None)), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)])])))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=None)]), Add, kind=None), Double(0)) against Double
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=None)]), Add, kind=None) against Double
// [Typer] check: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=None) against Double
// [Typer] check: Get(Var("v1"), Var("i")) against Double
// [Typer] check: Var("v1") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Get(Var("v2"), Var("i")) against Double
// [Typer] check: Var("v2") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=None)]) against Double
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("inprod") against (Array[Double], Array[Double], Int) -> Double
// [Typer] inst: TypeScheme(([], (Array[Double], Array[Double], Int) -> Double))
// [Typer] inst result: (Array[Double], Array[Double], Int) -> Double
// [Typer] unify: (Array[Double], Array[Double], Int) -> Double and (Array[Double], Array[Double], Int) -> Double
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] check: Double(0) against Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("v1", Var(None)), Array(Int(3), Double(1.23)), Let(("v2", Var(None)), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)])])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("v1", Var(None)), Array(Int(3), Double(1.23)), Let(("v2", Var(None)), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)])])))
// [Typer] infer: Array(Int(3), Double(1.23))
// [Typer] infer: Double(1.23)
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Array[Double]
// [Typer] union: Var(None) and Array[Double]
// [Typer] infer: Let(("v2", Var(None)), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)])]))
// [Typer] infer: Array(Int(3), Double(4.56))
// [Typer] infer: Double(4.56)
// [Typer] check: Int(3) against Int
// [Typer] unify: Var(None) and Array[Double]
// [Typer] union: Var(None) and Array[Double]
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)]) against Int
// [Typer] infer: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=None)
// [Typer] infer: Double(1000000)
// [Typer] infer: App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)])
// [Typer] infer: Var("inprod")
// [Typer] inst: TypeScheme(([], (Array[Double], Array[Double], Int) -> Double))
// [Typer] inst result: (Array[Double], Array[Double], Int) -> Double
// [Typer] check: Var("v1") against Array[Double]
// [Typer] inst: TypeScheme(([], Var(Array[Double])))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("v2") against Array[Double]
// [Typer] inst: TypeScheme(([], Var(Array[Double])))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] unify: Double and Double
// [Typer] check: Var("truncate") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
