// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> fv12, Insn(iref=%2) -> fv7, Insn(iref=%1) -> fv6, Insn(iref=%6) -> fv11, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> fv10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f0, fpref=$f.2)])
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv12]
// [Asm] move_origin: [fv22]
// [Asm] defined: fv12 is F
// [Asm] defs: []
// [Asm] live_set: [fv12]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v4, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [fv6]
// [Asm] live_set: [v2, v4, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv6 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v4, v16, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v4, v17, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, v4, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, fv6, v9, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, v9, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, fv6, a0, v9, fv7]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, fv6, a0, v9, fv7]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, fv6, a0, fv7]
// [Asm] move_origin: [v9]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv6, fv7, fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv10, fv6, fv7]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv10 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, fv6, fv7]
// [Asm] move_origin: []
// [Asm] defs: [fv11]
// [Asm] live_set: [fv11]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv12]
// [Asm] move_origin: [fv11]
// [Asm] defined: fv12 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv12]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inprod1_0"];
// [Asm]   r0 [label="v19 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r3 [label="v3 ← a4", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="v17 ← a0", color=green];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="v20 ← a0", color=green];
// [Asm]   r1 [label="v2 ← a3", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="v9 ← a2", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="v4 ← a1", color=green];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="zero", color=blue];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v19-> 1:v2-> 2:v4-> 3:v3-> 4:v20-> 5:v16-> 6:v17-> 21:zero-> 7:v9-> 8:a0-> 9:a1-> 10:a2-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7"
// [Asm]   comment = "v19<-a0;v3<-a4;v17<-a0;v20<-a0;v2<-a3;v9<-a2;v16<-a0;v4<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inprod1_0"];
// [Asm]   r0 [label="fv22 ← fa0", color=green];
// [Asm]   r20 [label="fa5", color=blue];
// [Asm]   r23 [label="fv10 ← fa0", color=green];
// [Asm]   r3 [label="fv7 ← fs1", color=green];
// [Asm]   r9 [label="ft4", color=blue];
// [Asm]   r6 [label="ft1", color=blue];
// [Asm]   r13 [label="ft8", color=blue];
// [Asm]   r4 [label="fa0", color=blue];
// [Asm]   r1 [label="fv12 ← fa0", color=green];
// [Asm]   r11 [label="ft6", color=blue];
// [Asm]   r7 [label="ft2", color=blue];
// [Asm]   r10 [label="ft5", color=blue];
// [Asm]   r22 [label="fa7", color=blue];
// [Asm]   r14 [label="ft9", color=blue];
// [Asm]   r8 [label="ft3", color=blue];
// [Asm]   r5 [label="ft0", color=blue];
// [Asm]   r24 [label="fv11 ← fa0", color=green];
// [Asm]   r15 [label="ft10", color=blue];
// [Asm]   r2 [label="fv6 ← fs0", color=green];
// [Asm]   r16 [label="fa1", color=blue];
// [Asm]   r18 [label="fa3", color=blue];
// [Asm]   r19 [label="fa4", color=blue];
// [Asm]   r21 [label="fa6", color=blue];
// [Asm]   r17 [label="fa2", color=blue];
// [Asm]   r12 [label="ft7", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r12;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:fv22-> 1:fv12-> 2:fv6-> 3:fv7-> 4:fa0-> 5:ft0-> 6:ft1-> 7:ft2-> 8:ft3-> 9:ft4-> 10:ft5-> 11:ft6-> 12:ft7-> 13:ft8-> 14:ft9-> 15:ft10-> 16:fa1-> 17:fa2-> 18:fa3-> 19:fa4-> 20:fa5-> 21:fa6-> 22:fa7-> 23:fv10-> 24:fv11"
// [Asm]   comment = "fv22<-fa0;fv10<-fa0;fv7<-fs1;fv12<-fa0;fv11<-fa0;fv6<-fs0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fmv.d.x fv22, zero ->   fmv.d.x fa0, zero
// [Asm] subst   j .inprod1_0_3 ->   j .inprod1_0_3
// [Asm] subst   slliw v19, v4, 3 ->   slliw a0, a1, 3
// [Asm] subst   add v20, v2, v19 ->   add a0, a3, a0
// [Asm] subst   fld fv6, 0(v20) ->   fld fs0, 0(a0)
// [Asm] subst   slliw v16, v4, 3 ->   slliw a0, a1, 3
// [Asm] subst   add v17, v3, v16 ->   add a0, a4, a0
// [Asm] subst   fld fv7, 0(v17) ->   fld fs1, 0(a0)
// [Asm] subst   addi v9, v4, -1 ->   addi a2, a1, -1
// [Asm] subst   mv a0, v2 ->   mv a0, a3
// [Asm] subst   mv a1, v3 ->   mv a1, a4
// [Asm] subst   call inprod1_0 ->   call inprod1_0
// [Asm] subst   fmadd.d fv11, fv6, fv7, fv10 ->   fmadd.d fa0, fs0, fs1, fa0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v3, a1 ->   mv a4, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   blt v4, zero, .inprod1_0_2 ->   blt a1, zero, .inprod1_0_2
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main15_1 ->   call main15_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, Insn(iref=%2) -> fv6, Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v2, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [s11, v23, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [fv24]
// [Asm] live_set: [fv24, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: []
// [Asm] live_set: [fv24, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv24, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v2, fv20, v3]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv20, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv20, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [v15]
// [Asm] live_set: [a1, v15, a0]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv6]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [fv6]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, fv6]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [fv6, fv13]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main15_1"];
// [Asm]   r0 [label="v21 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="v23 ← a1", color=green];
// [Asm]   r9 [label="v15 ← a2", color=green];
// [Asm]   r6 [label="v19 ← a2", color=green];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="v17 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v12 ← a0", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r8 -- r10;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r7 -- r19;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r7 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r17;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v21-> 1:v2-> 2:s11-> 3:v23-> 4:v17-> 5:v3-> 6:v19-> 7:a0-> 8:a1-> 9:v15-> 10:a2-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:v12-> 22:v8-> 23:v9"
// [Asm]   comment = "v21<-a0;v9<-a0;v23<-a1;v15<-a2;v19<-a2;v17<-a1;v2<-a0;v8<-a0;v3<-a1;v12<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main15_1"];
// [Asm]   r0 [label="fv24 ← fa0", color=green];
// [Asm]   r20 [label="fa7", color=blue];
// [Asm]   r23 [label="fv7 ← fa0", color=green];
// [Asm]   r3 [label="ft0", color=blue];
// [Asm]   r9 [label="ft6", color=blue];
// [Asm]   r6 [label="ft3", color=blue];
// [Asm]   r13 [label="ft10", color=blue];
// [Asm]   r4 [label="ft1", color=blue];
// [Asm]   r1 [label="fv20 ← fa0", color=green];
// [Asm]   r11 [label="ft8", color=blue];
// [Asm]   r7 [label="ft4", color=blue];
// [Asm]   r10 [label="ft7", color=blue];
// [Asm]   r22 [label="fv13 ← fa1", color=green];
// [Asm]   r14 [label="fa1", color=blue];
// [Asm]   r8 [label="ft5", color=blue];
// [Asm]   r5 [label="ft2", color=blue];
// [Asm]   r15 [label="fa2", color=blue];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r16 [label="fa3", color=blue];
// [Asm]   r18 [label="fa5", color=blue];
// [Asm]   r19 [label="fa6", color=blue];
// [Asm]   r17 [label="fa4", color=blue];
// [Asm]   r21 [label="fv6 ← fa0", color=green];
// [Asm]   r12 [label="ft9", color=blue];
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r2 -- r6;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r18;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:fv24-> 1:fv20-> 2:fa0-> 3:ft0-> 4:ft1-> 5:ft2-> 6:ft3-> 7:ft4-> 8:ft5-> 9:ft6-> 10:ft7-> 11:ft8-> 12:ft9-> 13:ft10-> 14:fa1-> 15:fa2-> 16:fa3-> 17:fa4-> 18:fa5-> 19:fa6-> 20:fa7-> 21:fv6-> 22:fv13-> 23:fv7"
// [Asm]   comment = "fv24<-fa0;fv7<-fa0;fv20<-fa0;fv13<-fa1;fv6<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v21, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v2, v21, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v23, 4608218246714312622 ->   li a1, 4608218246714312622
// [Asm] subst   fmv.d.x fv24, v23 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv24, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv24, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   fsd fv24, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v17, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v3, v17, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   li v19, 4616820122002590269 ->   li a2, 4616820122002590269
// [Asm] subst   fmv.d.x fv20, v19 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv20, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   fsd fv20, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   fsd fv20, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   li v15, 2 ->   li a2, 2
// [Asm] subst   call inprod1_0 ->   call inprod1_0
// [Asm] subst   li v12, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv13, v12 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv7, fv13, fv6 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v8, fv7, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] inprod1_0:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a2, v4, a1, a0, zero], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .inprod1_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   blt v4, zero, .inprod1_0_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, fv10, v16, ft0, ft1, fv12, a1, fa1, fa2, ft6, v20, a4, fa6, v19, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, fv6, v9, ft8, a7, t3, fa7, t0, fa5, fa3, fv11, ft3, fa0, t4, t2, fv7], uses: [v3, fv10, v16, a0, a2, a1, v17, fv6, v9, fv11, v20, fa0, v19, v4, fv7, v2], upward_exposed: [v3, v4, v2], params_defs: []
// [Asm] # live_in: [v2, v4, v3], live_out: [fv12]
// [Asm] # block parameters: []
// [Asm] .inprod1_0_1:
// [Asm]   slliw v19, v4, 3  # live: [v2, v19, v4, v3]
// [Asm]   add v20, v2, v19  # live: [v2, v4, v20, v3]
// [Asm]   fld fv6, 0(v20)  # live: [v2, v4, fv6, v3]
// [Asm]   slliw v16, v4, 3  # live: [v2, v4, v16, fv6, v3]
// [Asm]   add v17, v3, v16  # live: [v2, v4, v17, fv6, v3]
// [Asm]   fld fv7, 0(v17)  # live: [v2, v4, fv6, fv7, v3]
// [Asm]   addi v9, v4, -1  # live: [v2, fv6, v9, fv7, v3]
// [Asm]   # save_ctx2  # live: [v2, fv6, v9, fv7, v3]
// [Asm]   mv a0, v2  # live: [v3, fv6, a0, v9, fv7]
// [Asm]   mv a1, v3  # live: [a1, fv6, a0, v9, fv7]
// [Asm]   mv a2, v9  # live: [a2, a1, fv6, a0, fv7]
// [Asm]   call inprod1_0  # live: [fv6, fv7, fa0]
// [Asm]   fmv.d fv10, fa0  # live: [fv10, fv6, fv7]
// [Asm]   # restore_ctx2  # live: [fv10, fv6, fv7]
// [Asm]   fmadd.d fv11, fv6, fv7, fv10  # live: [fv11]
// [Asm] # control
// [Asm]   fmv.d fv12, fv11  # live: [fv12]
// [Asm] 
// [Asm] # block info: defs: [fa0], uses: [fv12, fa0], upward_exposed: [fv12], params_defs: [fv12]
// [Asm] # live_in: [fv12], live_out: []
// [Asm] # block parameters: [fv12]
// [Asm] .inprod1_0_3:
// [Asm] # control
// [Asm]   fmv.d fa0, fv12  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv22, fv12], uses: [fv22, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [fv12]
// [Asm] # block parameters: []
// [Asm] .inprod1_0_2:
// [Asm] # control
// [Asm]   fmv.d.x fv22, zero  # live: [fv22]
// [Asm]   fmv.d fv12, fv22  # live: [fv12]
// [Asm]   j .inprod1_0_3  # live: [fv12]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main15_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main15_1:
// [Asm] # block info: defs: [v3, fv24, t1, fv20, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, v19, ft10, ft5, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, v17, a3, fv6, v9, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, fv13, t4, t2, v15, fv7, v2], uses: [v2, fv24, v21, a0, fv20, a2, v17, a1, s11, v12, fv6, v9, v23, fa0, fv13, v8, v19, v15, fv7, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main15_1_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v21, s11, -24  # live: [v21]
// [Asm]   andi v2, v21, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [s11, v2]
// [Asm]   li v23, 4608218246714312622  # live: [s11, v23, v2]
// [Asm]   fmv.d.x fv24, v23  # live: [fv24, s11, v2]
// [Asm]   fsd fv24, 0(v2)  # live: [fv24, s11, v2]
// [Asm]   fsd fv24, 8(v2)  # live: [fv24, s11, v2]
// [Asm]   fsd fv24, 16(v2)  # live: [s11, v2]
// [Asm]   addi v17, s11, -24  # live: [v17, v2]
// [Asm]   andi v3, v17, -8  # live: [v2, v3]
// [Asm]   mv s11, v3  # live: [v2, v3]
// [Asm]   li v19, 4616820122002590269  # live: [v2, v19, v3]
// [Asm]   fmv.d.x fv20, v19  # live: [v2, fv20, v3]
// [Asm]   fsd fv20, 0(v3)  # live: [v2, fv20, v3]
// [Asm]   fsd fv20, 8(v3)  # live: [v2, fv20, v3]
// [Asm]   fsd fv20, 16(v3)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   li v15, 2  # live: [a1, v15, a0]
// [Asm]   mv a2, v15  # live: [a2, a1, a0]
// [Asm]   call inprod1_0  # live: [fa0]
// [Asm]   fmv.d fv6, fa0  # live: [fv6]
// [Asm]   # restore_ctx2  # live: [fv6]
// [Asm]   li v12, 4696837146684686336  # live: [v12, fv6]
// [Asm]   fmv.d.x fv13, v12  # live: [fv6, fv13]
// [Asm]   fmul.d fv7, fv13, fv6  # live: [fv7]
// [Asm]   fcvt.w.d v8, fv7, rtz  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("i", Int)], body: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double)), Double(0))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double)), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Var("v1"), Var("i"))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("v2"), Var("i"))
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))
// [Knf] build_knf: Array(Int(3), Double(1.23))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])]))
// [Knf] build_knf: Array(Int(3), Double(4.56))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inprod1_0
// [Main]   .type inprod1_0, @function
// [Main] # leaf false
// [Main] inprod1_0:
// [Main] .inprod1_0_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   fsd fs0, 8(sp)
// [Main]   fsd fs1, 16(sp)
// [Main]   mv a3, a0
// [Main]   mv a4, a1
// [Main]   mv a1, a2
// [Main]   blt a1, zero, .inprod1_0_2
// [Main] 
// [Main] .inprod1_0_1:
// [Main]   slliw a0, a1, 3
// [Main]   add a0, a3, a0
// [Main]   fld fs0, 0(a0)
// [Main]   slliw a0, a1, 3
// [Main]   add a0, a4, a0
// [Main]   fld fs1, 0(a0)
// [Main]   addi a2, a1, -1
// [Main]   mv a0, a3
// [Main]   mv a1, a4
// [Main]   call inprod1_0
// [Main]   fmadd.d fa0, fs0, fs1, fa0
// [Main] 
// [Main] .inprod1_0_3:
// [Main]   ld ra, 0(sp)
// [Main]   fld fs0, 8(sp)
// [Main]   fld fs1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .inprod1_0_2:
// [Main]   fmv.d.x fa0, zero
// [Main]   j .inprod1_0_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main15_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main15_1
// [Main]   .type main15_1, @function
// [Main] # leaf false
// [Main] main15_1:
// [Main] .main15_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 4608218246714312622
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa0, 8(a0)
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   li a2, 4616820122002590269
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   fsd fa0, 8(a1)
// [Main]   fsd fa0, 16(a1)
// [Main]   li a2, 2
// [Main]   call inprod1_0
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
