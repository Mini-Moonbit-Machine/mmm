// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%9) -> v14, Insn(iref=%8) -> fv13, Insn(iref=%10) -> fv15, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9, Insn(iref=%3) -> fv8, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> fv12, BlockParam(bref=b5, bpref=$b.0) -> fv17, BlockParam(bref=b6, bpref=$b.0) -> fv19, Insn(iref=%2) -> fv7, Insn(iref=%1) -> fv6, Insn(iref=%11) -> fv16, Insn(iref=%6) -> fv11, Insn(iref=%12) -> fv18
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%6), Insn(iref=%7)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%4)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f0, fpref=$f.2)])
// [Asm] defs: [fv18]
// [Asm] live_set: [fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv19]
// [Asm] move_origin: [fv18]
// [Asm] defined: fv19 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v3, v27, fv6, v9, fv7, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v2, v3, fv6, v28, v9, fv7]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [v2, fv11, fv6, v9, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v2, fv11, v24, fv6, v9, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v2, v25, fv11, fv6, v9, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [v2, fv11, fv12, fv6, v9, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, fv11, fv12, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v14, fv11, fv12, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, fv11, a0, fv12, fv6, fv7, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v14, fv11, a0, fv12, a1, fv6, fv7]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [fv11, a0, fv12, a2, a1, fv6, fv7]
// [Asm] move_origin: [v14]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv12, fv6, fv11, fv7, fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [fv12, fv6, fv15, fv11, fv7]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv15 is F
// [Asm] defs: []
// [Asm] live_set: [fv12, fv6, fv15, fv11, fv7]
// [Asm] move_origin: []
// [Asm] defs: [fv16]
// [Asm] live_set: [fv6, fv16, fv7]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [fv6, fv17, fv7]
// [Asm] move_origin: [fv16]
// [Asm] defined: fv17 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [fv6, fv7, fv30]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [fv6, fv17, fv7]
// [Asm] move_origin: [fv30]
// [Asm] defined: fv17 is F
// [Asm] defs: []
// [Asm] live_set: [fv6, fv17, fv7]
// [Asm] move_origin: []
// [Asm] defs: [fv38]
// [Asm] live_set: [fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv19]
// [Asm] move_origin: [fv38]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [fv19]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v3, zero, v35, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v3, zero, v36, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [fv6]
// [Asm] live_set: [v3, zero, v4, fv6, v2]
// [Asm] move_origin: []
// [Asm] defined: fv6 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v3, zero, v4, v32, fv6, v2]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v3, zero, v4, fv6, v33, v2]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [v3, zero, v4, fv6, fv7, v2]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v3, zero, fv6, v9, fv7, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3, fv6, zero, v9, fv7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv19]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inprod1l0_0"];
// [Asm]   r0 [label="v27 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v4 ← a2", color=green];
// [Asm]   r3 [label="v2 ← a3", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v33 ← a0", color=green];
// [Asm]   r6 [label="v25 ← a0", color=green];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="v28 ← a0", color=green];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="v14 ← a2", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="zero", color=blue];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v24 ← a0", color=green];
// [Asm]   r24 [label="v36 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r25 [label="v32 ← a0", color=green];
// [Asm]   r2 [label="v9 ← a2", color=green];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v35 ← a0", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r21;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r7;
// [Asm]   r22 -- r23;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r8 -- r10;
// [Asm]   r22 -- r26;
// [Asm]   r23 -- r24;
// [Asm]   r9 -- r10;
// [Asm]   r3 -- r24;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r9;
// [Asm]   r21 -- r22;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r3 -- r23;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r1 -- r24;
// [Asm]   r23 -- r26;
// [Asm]   comment = "0:v27-> 1:v3-> 2:v9-> 3:v2-> 4:v28-> 5:v24-> 6:v25-> 22:zero-> 21:v35-> 23:v4-> 24:v36-> 25:v32-> 26:v33-> 7:v14-> 8:a0-> 9:a1-> 10:a2-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7"
// [Asm]   comment = "v27<-a0;v4<-a2;v2<-a3;v33<-a0;v25<-a0;v28<-a0;v3<-a1;v14<-a2;v24<-a0;v36<-a0;v32<-a0;v9<-a2;v35<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inprod1l0_0"];
// [Asm]   r0 [label="fv18 ← fa0", color=green];
// [Asm]   r20 [label="fa3", color=blue];
// [Asm]   r23 [label="fa6", color=blue];
// [Asm]   r3 [label="fv7 ← fs1", color=green];
// [Asm]   r9 [label="ft2", color=blue];
// [Asm]   r26 [label="fv16 ← fa0", color=green];
// [Asm]   r27 [label="fv17 ← fa0", color=green];
// [Asm]   r6 [label="fa0", color=blue];
// [Asm]   r13 [label="ft6", color=blue];
// [Asm]   r4 [label="fv11 ← fs2", color=green];
// [Asm]   r1 [label="fv19 ← fa0", color=green];
// [Asm]   r29 [label="fv38 ← fa0", color=green];
// [Asm]   r28 [label="fv30 ← fa0", color=green];
// [Asm]   r11 [label="ft4", color=blue];
// [Asm]   r7 [label="ft0", color=blue];
// [Asm]   r10 [label="ft3", color=blue];
// [Asm]   r22 [label="fa5", color=blue];
// [Asm]   r14 [label="ft7", color=blue];
// [Asm]   r8 [label="ft1", color=blue];
// [Asm]   r5 [label="fv12 ← fs3", color=green];
// [Asm]   r15 [label="ft8", color=blue];
// [Asm]   r24 [label="fa7", color=blue];
// [Asm]   r25 [label="fv15 ← fa0", color=green];
// [Asm]   r2 [label="fv6 ← fs0", color=green];
// [Asm]   r16 [label="ft9", color=blue];
// [Asm]   r18 [label="fa1", color=blue];
// [Asm]   r19 [label="fa2", color=blue];
// [Asm]   r21 [label="fa4", color=blue];
// [Asm]   r17 [label="ft10", color=blue];
// [Asm]   r12 [label="ft5", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r28;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:fv18-> 1:fv19-> 2:fv6-> 3:fv7-> 4:fv11-> 5:fv12-> 6:fa0-> 7:ft0-> 8:ft1-> 9:ft2-> 10:ft3-> 11:ft4-> 12:ft5-> 13:ft6-> 14:ft7-> 15:ft8-> 16:ft9-> 17:ft10-> 18:fa1-> 19:fa2-> 20:fa3-> 21:fa4-> 22:fa5-> 23:fa6-> 24:fa7-> 25:fv15-> 26:fv16-> 27:fv17-> 28:fv30-> 29:fv38"
// [Asm]   comment = "fv18<-fa0;fv7<-fs1;fv16<-fa0;fv17<-fa0;fv11<-fs2;fv19<-fa0;fv38<-fa0;fv30<-fa0;fv12<-fs3;fv15<-fa0;fv6<-fs0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fmadd.d fv18, fv6, fv7, fv17 ->   fmadd.d fa0, fs0, fs1, fa0
// [Asm] subst   slliw v27, v9, 3 ->   slliw a0, a2, 3
// [Asm] subst   add v28, v2, v27 ->   add a0, a3, a0
// [Asm] subst   fld fv11, 0(v28) ->   fld fs2, 0(a0)
// [Asm] subst   slliw v24, v9, 3 ->   slliw a0, a2, 3
// [Asm] subst   add v25, v3, v24 ->   add a0, a1, a0
// [Asm] subst   fld fv12, 0(v25) ->   fld fs3, 0(a0)
// [Asm] subst   addi v14, v9, -1 ->   addi a2, a2, -1
// [Asm] subst   mv a0, v2 ->   mv a0, a3
// [Asm] subst   call inprod1l0_0 ->   call inprod1l0_0
// [Asm] subst   fmadd.d fv16, fv11, fv12, fv15 ->   fmadd.d fa0, fs2, fs3, fa0
// [Asm] subst   fmv.d.x fv30, zero ->   fmv.d.x fa0, zero
// [Asm] subst   j .inprod1l0_0_5 ->   j .inprod1l0_0_5
// [Asm] subst   fmv.d.x fv38, zero ->   fmv.d.x fa0, zero
// [Asm] subst   j .inprod1l0_0_6 ->   j .inprod1l0_0_6
// [Asm] subst   slliw v35, v4, 3 ->   slliw a0, a2, 3
// [Asm] subst   add v36, v2, v35 ->   add a0, a3, a0
// [Asm] subst   fld fv6, 0(v36) ->   fld fs0, 0(a0)
// [Asm] subst   slliw v32, v4, 3 ->   slliw a0, a2, 3
// [Asm] subst   add v33, v3, v32 ->   add a0, a1, a0
// [Asm] subst   fld fv7, 0(v33) ->   fld fs1, 0(a0)
// [Asm] subst   addi v9, v4, -1 ->   addi a2, a2, -1
// [Asm] subst   blt v9, zero, .inprod1l0_0_4 ->   blt a2, zero, .inprod1l0_0_4
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   blt v4, zero, .inprod1l0_0_2 ->   blt a2, zero, .inprod1l0_0_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main15l1_1 ->   call main15l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, Insn(iref=%7) -> fv11, BlockParam(bref=b3, bpref=$b.0) -> fv13, Insn(iref=%2) -> v6, Insn(iref=%9) -> fv14, Insn(iref=%8) -> fv12, Insn(iref=%1) -> v5, Insn(iref=%10) -> v15, Insn(iref=%11) -> v16, Mem(fref=f1, mref=m0) -> v2, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%6) -> v10, Insn(iref=%5) -> fv9, Insn(iref=%0) -> v4, Insn(iref=%4) -> fv8
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Int32(val=2)])
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v3, v2, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v2, v24, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v2, v10, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v2, v10, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v10, a0, fv7, fv8]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v10, a0, fv7, fv8]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, fv7, fv8]
// [Asm] move_origin: [v10]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv11, fv7, fv8]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv11 is F
// [Asm] defs: []
// [Asm] live_set: [fv11, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defs: [fv12]
// [Asm] live_set: [fv12]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv13]
// [Asm] move_origin: [fv12]
// [Asm] defined: fv13 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v34]
// [Asm] live_set: [s11, zero, v34, v2]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [fv35]
// [Asm] live_set: [s11, fv35, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: []
// [Asm] live_set: [s11, fv35, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, fv35, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v2, v31, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [fv32]
// [Asm] live_set: [v2, fv32, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv32, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv32, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v2, zero, v29, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, fv13]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [fv13, fv20]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv28]
// [Asm] live_set: [fv28]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv13]
// [Asm] move_origin: [fv28]
// [Asm] defined: fv13 is F
// [Asm] defs: []
// [Asm] live_set: [fv13]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main15l1_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v31 ← a2", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v10 ← a2", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="v19 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r24 [label="v16 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v24 ← a2", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="s11", color=blue];
// [Asm]   r19 [label="v34 ← a1", color=green];
// [Asm]   r21 [label="v29 ← a2", color=green];
// [Asm]   r17 [label="zero", color=blue];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r21;
// [Asm]   r18 -- r19;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r21;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r9;
// [Asm]   r17 -- r19;
// [Asm]   r17 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:v2-> 1:v3-> 2:v24-> 3:v10-> 4:a0-> 5:a1-> 6:a2-> 17:zero-> 18:s11-> 19:v34-> 20:v31-> 21:v29-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 22:v19-> 23:v15-> 24:v16"
// [Asm]   comment = "v2<-a0;v31<-a2;v15<-a0;v10<-a2;v3<-a1;v19<-a0;v16<-a0;v24<-a2;v34<-a1;v29<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main15l1_1"];
// [Asm]   r0 [label="fv7 ← fs0", color=green];
// [Asm]   r20 [label="fa7", color=blue];
// [Asm]   r23 [label="fv13 ← fa0", color=green];
// [Asm]   r3 [label="ft0", color=blue];
// [Asm]   r9 [label="ft6", color=blue];
// [Asm]   r26 [label="fv20 ← fa1", color=green];
// [Asm]   r27 [label="fv14 ← fa0", color=green];
// [Asm]   r6 [label="ft3", color=blue];
// [Asm]   r13 [label="ft10", color=blue];
// [Asm]   r4 [label="ft1", color=blue];
// [Asm]   r1 [label="fv8 ← fs1", color=green];
// [Asm]   r28 [label="fv28 ← fa0", color=green];
// [Asm]   r11 [label="ft8", color=blue];
// [Asm]   r7 [label="ft4", color=blue];
// [Asm]   r10 [label="ft7", color=blue];
// [Asm]   r22 [label="fv12 ← fa0", color=green];
// [Asm]   r14 [label="fa1", color=blue];
// [Asm]   r8 [label="ft5", color=blue];
// [Asm]   r5 [label="ft2", color=blue];
// [Asm]   r24 [label="fv35 ← fa0", color=green];
// [Asm]   r15 [label="fa2", color=blue];
// [Asm]   r25 [label="fv32 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r16 [label="fa3", color=blue];
// [Asm]   r18 [label="fa5", color=blue];
// [Asm]   r19 [label="fa6", color=blue];
// [Asm]   r21 [label="fv11 ← fa0", color=green];
// [Asm]   r17 [label="fa4", color=blue];
// [Asm]   r12 [label="ft9", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r23 -- r26;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:fv7-> 1:fv8-> 2:fa0-> 3:ft0-> 4:ft1-> 5:ft2-> 6:ft3-> 7:ft4-> 8:ft5-> 9:ft6-> 10:ft7-> 11:ft8-> 12:ft9-> 13:ft10-> 14:fa1-> 15:fa2-> 16:fa3-> 17:fa4-> 18:fa5-> 19:fa6-> 20:fa7-> 21:fv11-> 22:fv12-> 23:fv13-> 26:fv20-> 24:fv35-> 25:fv32-> 27:fv14-> 28:fv28"
// [Asm]   comment = "fv7<-fs0;fv13<-fa0;fv20<-fa1;fv14<-fa0;fv8<-fs1;fv28<-fa0;fv12<-fa0;fv35<-fa0;fv32<-fa0;fv11<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv7, 16(v2) ->   fld fs0, 16(a0)
// [Asm] subst   fld fv8, 16(v3) ->   fld fs1, 16(a1)
// [Asm] subst   li v24, 2 ->   li a2, 2
// [Asm] subst   addi v10, v24, -1 ->   addi a2, a2, -1
// [Asm] subst   call inprod1l0_0 ->   call inprod1l0_0
// [Asm] subst   fmadd.d fv12, fv7, fv8, fv11 ->   fmadd.d fa0, fs0, fs1, fa0
// [Asm] subst   addi v2, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v34, 4608218246714312622 ->   li a1, 4608218246714312622
// [Asm] subst   fmv.d.x fv35, v34 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv35, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   fsd fv35, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   fsd fv35, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   li v31, 4616820122002590269 ->   li a2, 4616820122002590269
// [Asm] subst   fmv.d.x fv32, v31 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv32, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   fsd fv32, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   fsd fv32, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   li v29, 2 ->   li a2, 2
// [Asm] subst   blt v29, zero, .main15l1_1_2 ->   blt a2, zero, .main15l1_1_2
// [Asm] subst   li v19, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv20, v19 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv14, fv20, fv13 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v15, fv14, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   fmv.d.x fv28, zero ->   fmv.d.x fa0, zero
// [Asm] subst   j .main15l1_1_3 ->   j .main15l1_1_3
// [Asm] before colored: # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main15l1_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main15l1_1:
// [Asm] # block info: defs: [v2, fv32, v29, s11, fv35, v31, v34, v3], uses: [v2, fv32, v29, zero, s11, fv35, v31, v34, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main15l1_1_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -24  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v34, 4608218246714312622  # live: [s11, zero, v34, v2]
// [Asm]   fmv.d.x fv35, v34  # live: [s11, fv35, zero, v2]
// [Asm]   fsd fv35, 0(v2)  # live: [s11, fv35, zero, v2]
// [Asm]   fsd fv35, 8(v2)  # live: [s11, fv35, zero, v2]
// [Asm]   fsd fv35, 16(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   li v31, 4616820122002590269  # live: [v2, v31, zero, v3]
// [Asm]   fmv.d.x fv32, v31  # live: [v2, fv32, zero, v3]
// [Asm]   fsd fv32, 0(v3)  # live: [v2, fv32, zero, v3]
// [Asm]   fsd fv32, 8(v3)  # live: [v2, fv32, zero, v3]
// [Asm]   fsd fv32, 16(v3)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   li v29, 2  # live: [v2, zero, v29, v3]
// [Asm]   blt v29, zero, .main15l1_1_2  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, fv12, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v10, ft9, a5, a0, fa4, fv8, ft2, a2, v24, a3, ft8, t3, a7, fa7, t0, fa5, fa3, fv11, ft3, fa0, fv13, t4, t2, fv7], uses: [v2, v10, a0, fv11, fa0, fv8, a2, fv12, a1, v24, fv7, v3], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [fv13]
// [Asm] # block parameters: []
// [Asm] .main15l1_1_1:
// [Asm]   fld fv7, 16(v2)  # live: [v2, fv7, v3]
// [Asm]   fld fv8, 16(v3)  # live: [v3, v2, fv7, fv8]
// [Asm]   li v24, 2  # live: [v3, v2, v24, fv7, fv8]
// [Asm]   addi v10, v24, -1  # live: [v3, v2, v10, fv7, fv8]
// [Asm]   # save_ctx2  # live: [v3, v2, v10, fv7, fv8]
// [Asm]   mv a0, v2  # live: [v3, v10, a0, fv7, fv8]
// [Asm]   mv a1, v3  # live: [a1, v10, a0, fv7, fv8]
// [Asm]   mv a2, v10  # live: [a2, a1, a0, fv7, fv8]
// [Asm]   call inprod1l0_0  # live: [fa0, fv7, fv8]
// [Asm]   fmv.d fv11, fa0  # live: [fv11, fv7, fv8]
// [Asm]   # restore_ctx2  # live: [fv11, fv7, fv8]
// [Asm]   fmadd.d fv12, fv7, fv8, fv11  # live: [fv12]
// [Asm] # control
// [Asm]   fmv.d fv13, fv12  # live: [fv13]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, fv20, ft0, ft1, a1, fv14, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v16, a0, fv13, fv20, v19, fv14, v15], upward_exposed: [fv13], params_defs: [fv13]
// [Asm] # live_in: [fv13], live_out: []
// [Asm] # block parameters: [fv13]
// [Asm] .main15l1_1_3:
// [Asm]   li v19, 4696837146684686336  # live: [v19, fv13]
// [Asm]   fmv.d.x fv20, v19  # live: [fv13, fv20]
// [Asm]   fmul.d fv14, fv20, fv13  # live: [fv14]
// [Asm]   fcvt.w.d v15, fv14, rtz  # live: [v15]
// [Asm]   # save_ctx2  # live: [v15]
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v16, a0  # live: [v16]
// [Asm]   # restore_ctx2  # live: [v16]
// [Asm] # control
// [Asm]   mv a0, v16  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv28, fv13], uses: [fv28, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [fv13]
// [Asm] # block parameters: []
// [Asm] .main15l1_1_2:
// [Asm] # control
// [Asm]   fmv.d.x fv28, zero  # live: [fv28]
// [Asm]   fmv.d fv13, fv28  # live: [fv13]
// [Asm]   j .main15l1_1_3  # live: [fv13]
// [Asm] 
// [Asm] # leaf false
// [Asm] inprod1l0_0:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a2, v4, a1, a0, zero], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v3, v4, zero, v2]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   blt v4, zero, .inprod1l0_0_2  # live: [v2, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v35, v32, fv6, v33, v9, fv7], uses: [v2, zero, v35, v36, v4, v32, v33, v9, v3], upward_exposed: [v3, v4, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v4, zero, v3], live_out: [v2, zero, fv6, v9, fv7, v3]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_1:
// [Asm]   slliw v35, v4, 3  # live: [v3, zero, v35, v4, v2]
// [Asm]   add v36, v2, v35  # live: [v3, zero, v36, v4, v2]
// [Asm]   fld fv6, 0(v36)  # live: [v3, zero, v4, fv6, v2]
// [Asm]   slliw v32, v4, 3  # live: [v3, zero, v4, v32, fv6, v2]
// [Asm]   add v33, v3, v32  # live: [v3, zero, v4, fv6, v33, v2]
// [Asm]   fld fv7, 0(v33)  # live: [v3, zero, v4, fv6, fv7, v2]
// [Asm]   addi v9, v4, -1  # live: [v3, zero, fv6, v9, fv7, v2]
// [Asm] # control
// [Asm]   blt v9, zero, .inprod1l0_0_4  # live: [v2, v3, fv6, zero, v9, fv7]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v14, fv12, ft0, ft1, a1, v28, fv15, fv16, fa1, fa2, ft6, v27, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, ft8, a7, t3, fa7, t0, fa5, fa3, fv11, ft3, fa0, t4, t2, fv17], uses: [v3, v25, v14, a0, a2, fv12, a1, v24, v28, fv15, fv16, v9, fv11, v27, fa0, v2], upward_exposed: [v3, v9, v2], params_defs: []
// [Asm] # live_in: [v2, fv6, v9, fv7, v3], live_out: [fv6, fv17, fv7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_3:
// [Asm]   slliw v27, v9, 3  # live: [v3, v27, fv6, v9, fv7, v2]
// [Asm]   add v28, v2, v27  # live: [v2, v3, fv6, v28, v9, fv7]
// [Asm]   fld fv11, 0(v28)  # live: [v2, fv11, fv6, v9, fv7, v3]
// [Asm]   slliw v24, v9, 3  # live: [v2, fv11, v24, fv6, v9, fv7, v3]
// [Asm]   add v25, v3, v24  # live: [v2, v25, fv11, fv6, v9, fv7, v3]
// [Asm]   fld fv12, 0(v25)  # live: [v2, fv11, fv12, fv6, v9, fv7, v3]
// [Asm]   addi v14, v9, -1  # live: [v2, v14, fv11, fv12, fv6, fv7, v3]
// [Asm]   # save_ctx2  # live: [v2, v14, fv11, fv12, fv6, fv7, v3]
// [Asm]   mv a0, v2  # live: [v14, fv11, a0, fv12, fv6, fv7, v3]
// [Asm]   mv a1, v3  # live: [v14, fv11, a0, fv12, a1, fv6, fv7]
// [Asm]   mv a2, v14  # live: [fv11, a0, fv12, a2, a1, fv6, fv7]
// [Asm]   call inprod1l0_0  # live: [fv12, fv6, fv11, fv7, fa0]
// [Asm]   fmv.d fv15, fa0  # live: [fv12, fv6, fv15, fv11, fv7]
// [Asm]   # restore_ctx2  # live: [fv12, fv6, fv15, fv11, fv7]
// [Asm]   fmadd.d fv16, fv11, fv12, fv15  # live: [fv6, fv16, fv7]
// [Asm] # control
// [Asm]   fmv.d fv17, fv16  # live: [fv6, fv17, fv7]
// [Asm] 
// [Asm] # block info: defs: [fv19, fv18], uses: [fv6, fv18, fv17, fv7], upward_exposed: [fv6, fv17, fv7], params_defs: [fv17]
// [Asm] # live_in: [fv6, fv17, fv7], live_out: [fv19]
// [Asm] # block parameters: [fv17]
// [Asm] .inprod1l0_0_5:
// [Asm]   fmadd.d fv18, fv6, fv7, fv17  # live: [fv18]
// [Asm] # control
// [Asm]   fmv.d fv19, fv18  # live: [fv19]
// [Asm] 
// [Asm] # block info: defs: [fa0], uses: [fv19, fa0], upward_exposed: [fv19], params_defs: [fv19]
// [Asm] # live_in: [fv19], live_out: []
// [Asm] # block parameters: [fv19]
// [Asm] .inprod1l0_0_6:
// [Asm] # control
// [Asm]   fmv.d fa0, fv19  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [fv19, fv38], uses: [zero, fv38], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [fv19]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_2:
// [Asm] # control
// [Asm]   fmv.d.x fv38, zero  # live: [fv38]
// [Asm]   fmv.d fv19, fv38  # live: [fv19]
// [Asm]   j .inprod1l0_0_6  # live: [fv19]
// [Asm] 
// [Asm] # block info: defs: [fv17, fv30], uses: [zero, fv30], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [fv6, zero, fv7], live_out: [fv6, fv17, fv7]
// [Asm] # block parameters: []
// [Asm] .inprod1l0_0_4:
// [Asm] # control
// [Asm]   fmv.d.x fv30, zero  # live: [fv6, fv7, fv30]
// [Asm]   fmv.d fv17, fv30  # live: [fv6, fv17, fv7]
// [Asm]   j .inprod1l0_0_5  # live: [fv6, fv17, fv7]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Array(Double)), ("v2", Array(Double)), ("i", Int)], body: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double)), Double(0))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double)), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Prim(Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double)), App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))]), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Get(Var("v1"), Var("i")), Get(Var("v2"), Var("i")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Var("v1"), Var("i"))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Get(Var("v2"), Var("i"))
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("v1", Var({val: Some(Array(Double))})), Array(Int(3), Double(1.23)), Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])))
// [Knf] build_knf: Array(Int(3), Double(1.23))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("v2", Var({val: Some(Array(Double))})), Array(Int(3), Double(4.56)), App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])]))
// [Knf] build_knf: Array(Int(3), Double(4.56))
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Var("v1"), Var("v2"), Int(2)])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main15l1_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main15l1_1
// [Main]   .type main15l1_1, @function
// [Main] # leaf false
// [Main] main15l1_1:
// [Main] .main15l1_1_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   fsd fs0, 8(sp)
// [Main]   fsd fs1, 16(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4608218246714312622
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   fsd fa0, 8(a0)
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   li a2, 4616820122002590269
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   fsd fa0, 8(a1)
// [Main]   fsd fa0, 16(a1)
// [Main]   li a2, 2
// [Main]   blt a2, zero, .main15l1_1_2
// [Main] 
// [Main] .main15l1_1_1:
// [Main]   fld fs0, 16(a0)
// [Main]   fld fs1, 16(a1)
// [Main]   li a2, 2
// [Main]   addi a2, a2, -1
// [Main]   call inprod1l0_0
// [Main]   fmadd.d fa0, fs0, fs1, fa0
// [Main] 
// [Main] .main15l1_1_3:
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   fld fs0, 8(sp)
// [Main]   fld fs1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .main15l1_1_2:
// [Main]   fmv.d.x fa0, zero
// [Main]   j .main15l1_1_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inprod1l0_0
// [Main]   .type inprod1l0_0, @function
// [Main] # leaf false
// [Main] inprod1l0_0:
// [Main] .inprod1l0_0_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   fsd fs0, 8(sp)
// [Main]   fsd fs1, 16(sp)
// [Main]   fsd fs2, 24(sp)
// [Main]   fsd fs3, 32(sp)
// [Main]   mv a3, a0
// [Main]   blt a2, zero, .inprod1l0_0_2
// [Main] 
// [Main] .inprod1l0_0_1:
// [Main]   slliw a0, a2, 3
// [Main]   add a0, a3, a0
// [Main]   fld fs0, 0(a0)
// [Main]   slliw a0, a2, 3
// [Main]   add a0, a1, a0
// [Main]   fld fs1, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   blt a2, zero, .inprod1l0_0_4
// [Main] 
// [Main] .inprod1l0_0_3:
// [Main]   slliw a0, a2, 3
// [Main]   add a0, a3, a0
// [Main]   fld fs2, 0(a0)
// [Main]   slliw a0, a2, 3
// [Main]   add a0, a1, a0
// [Main]   fld fs3, 0(a0)
// [Main]   addi a2, a2, -1
// [Main]   mv a0, a3
// [Main]   call inprod1l0_0
// [Main]   fmadd.d fa0, fs2, fs3, fa0
// [Main] 
// [Main] .inprod1l0_0_5:
// [Main]   fmadd.d fa0, fs0, fs1, fa0
// [Main] 
// [Main] .inprod1l0_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   fld fs0, 8(sp)
// [Main]   fld fs1, 16(sp)
// [Main]   fld fs2, 24(sp)
// [Main]   fld fs3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .inprod1l0_0_2:
// [Main]   fmv.d.x fa0, zero
// [Main]   j .inprod1l0_0_6
// [Main] 
// [Main] .inprod1l0_0_4:
// [Main]   fmv.d.x fa0, zero
// [Main]   j .inprod1l0_0_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function inprod1l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%3), BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=FnParam(fref=f0, fpref=$f.0), offset=Insn(iref=%4), width=@64))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=FnParam(fref=f0, fpref=$f.1), offset=Insn(iref=%4), width=@64))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%4), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%9)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%8), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Double(val=0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=FnParam(fref=f0, fpref=$f.0), offset=FnParam(fref=f0, fpref=$f.2), width=@64))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=FnParam(fref=f0, fpref=$f.1), offset=FnParam(fref=f0, fpref=$f.2), width=@64))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f0, fpref=$f.2), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b6, args=[Double(val=0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function inprod1l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function main15l1_1
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Return(args=[Insn(iref=%11)])
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f1, mref=m0), index=2, width=@64))
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f1, mref=m1), index=2, width=@64))
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Mem(fref=f1, mref=m0), Mem(fref=f1, mref=m1), Insn(iref=%6)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%5), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Double(val=0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=1.23))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Init(val=Double(val=4.56))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main15l1_1 to wasm
// [KnfOpt] freq: {inprod1: Many(2), main15: Once}
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Knf inline Some(inprod1)
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Knf inline Some(inprod1)
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
