// [Main] function thunk_main(k) {
// [Main]   function f_1(x0_3, k) {
// [Main]     const _4 = 1;
// [Main]     const x1_5 = x0_3 + _4;
// [Main]     const _6 = 1;
// [Main]     const x2_7 = x1_5 + _6;
// [Main]     const _8 = 1;
// [Main]     const x3_9 = x2_7 + _8;
// [Main]     const _10 = 1;
// [Main]     const x4_11 = x3_9 + _10;
// [Main]     const _12 = 1;
// [Main]     const x5_13 = x4_11 + _12;
// [Main]     const _14 = 1;
// [Main]     const x6_15 = x5_13 + _14;
// [Main]     const _16 = 1;
// [Main]     const x7_17 = x6_15 + _16;
// [Main]     const _18 = 1;
// [Main]     const x8_19 = x7_17 + _18;
// [Main]     const _20 = 1;
// [Main]     const x9_21 = x8_19 + _20;
// [Main]     const _22 = 1;
// [Main]     const x10_23 = x9_21 + _22;
// [Main]     const _24 = 1;
// [Main]     const x11_25 = x10_23 + _24;
// [Main]     const _26 = 1;
// [Main]     const x12_27 = x11_25 + _26;
// [Main]     const _28 = 1;
// [Main]     const x13_29 = x12_27 + _28;
// [Main]     const _30 = 1;
// [Main]     const x14_31 = x13_29 + _30;
// [Main]     const _32 = 1;
// [Main]     const x15_33 = x14_31 + _32;
// [Main]     const _34 = 1;
// [Main]     const x16_35 = x15_33 + _34;
// [Main]     const _36 = 1;
// [Main]     const x17_37 = x16_35 + _36;
// [Main]     const _38 = 1;
// [Main]     const x18_39 = x17_37 + _38;
// [Main]     const x19_40 = x18_39 + x1_5;
// [Main]     const x20_41 = x19_40 + x2_7;
// [Main]     const x21_42 = x20_41 + x3_9;
// [Main]     const x22_43 = x21_42 + x4_11;
// [Main]     const x23_44 = x22_43 + x5_13;
// [Main]     const x24_45 = x23_44 + x6_15;
// [Main]     const x25_46 = x24_45 + x7_17;
// [Main]     const x26_47 = x25_46 + x8_19;
// [Main]     const x27_48 = x26_47 + x9_21;
// [Main]     const x28_49 = x27_48 + x10_23;
// [Main]     const x29_50 = x28_49 + x11_25;
// [Main]     const x30_51 = x29_50 + x12_27;
// [Main]     const x31_52 = x30_51 + x13_29;
// [Main]     const x32_53 = x31_52 + x14_31;
// [Main]     const x33_54 = x32_53 + x15_33;
// [Main]     const x34_55 = x33_54 + x16_35;
// [Main]     const x35_56 = x34_55 + x17_37;
// [Main]     const x36_57 = x35_56 + x0_3;
// [Main]     const _58 = x1_5 + x2_7;
// [Main]     const _59 = _58 + x3_9;
// [Main]     const _60 = _59 + x4_11;
// [Main]     const _61 = _60 + x5_13;
// [Main]     const _62 = _61 + x6_15;
// [Main]     const _63 = _62 + x7_17;
// [Main]     const _64 = _63 + x8_19;
// [Main]     const _65 = _64 + x9_21;
// [Main]     const _66 = _65 + x10_23;
// [Main]     const _67 = _66 + x11_25;
// [Main]     const _68 = _67 + x12_27;
// [Main]     const _69 = _68 + x13_29;
// [Main]     const _70 = _69 + x14_31;
// [Main]     const _71 = _70 + x15_33;
// [Main]     const _72 = _71 + x16_35;
// [Main]     const _73 = _72 + x17_37;
// [Main]     const _74 = _73 + x18_39;
// [Main]     const _75 = _74 + x19_40;
// [Main]     const _76 = _75 + x20_41;
// [Main]     const _77 = _76 + x21_42;
// [Main]     const _78 = _77 + x22_43;
// [Main]     const _79 = _78 + x23_44;
// [Main]     const _80 = _79 + x24_45;
// [Main]     const _81 = _80 + x25_46;
// [Main]     const _82 = _81 + x26_47;
// [Main]     const _83 = _82 + x27_48;
// [Main]     const _84 = _83 + x28_49;
// [Main]     const _85 = _84 + x29_50;
// [Main]     const _86 = _85 + x30_51;
// [Main]     const _87 = _86 + x31_52;
// [Main]     const _88 = _87 + x32_53;
// [Main]     const _89 = _88 + x33_54;
// [Main]     const _90 = _89 + x34_55;
// [Main]     const _91 = _90 + x35_56;
// [Main]     const _92 = _91 + x36_57;
// [Main]     return k(_92 + x0_3)
// [Main]   }
// [Main]   function main_93(k) {
// [Main]     const _94 = 0;
// [Main]     return $thunk(() => f_1(_94, function (_95) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_95))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_93(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("x0", Int)], body: Let(("x1", Var({val: None})), Prim(Var("x0"), Int(1), Add, kind=None), Let(("x2", Var({val: None})), Prim(Var("x1"), Int(1), Add, kind=None), Let(("x3", Var({val: None})), Prim(Var("x2"), Int(1), Add, kind=None), Let(("x4", Var({val: None})), Prim(Var("x3"), Int(1), Add, kind=None), Let(("x5", Var({val: None})), Prim(Var("x4"), Int(1), Add, kind=None), Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))))))))))))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(0)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("x1", Var({val: None})), Prim(Var("x0"), Int(1), Add, kind=None), Let(("x2", Var({val: None})), Prim(Var("x1"), Int(1), Add, kind=None), Let(("x3", Var({val: None})), Prim(Var("x2"), Int(1), Add, kind=None), Let(("x4", Var({val: None})), Prim(Var("x3"), Int(1), Add, kind=None), Let(("x5", Var({val: None})), Prim(Var("x4"), Int(1), Add, kind=None), Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x0"), Int(1), Add, kind=None)
// [Typer] infer: Var("x0")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x2", Var({val: None})), Prim(Var("x1"), Int(1), Add, kind=None), Let(("x3", Var({val: None})), Prim(Var("x2"), Int(1), Add, kind=None), Let(("x4", Var({val: None})), Prim(Var("x3"), Int(1), Add, kind=None), Let(("x5", Var({val: None})), Prim(Var("x4"), Int(1), Add, kind=None), Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x1"), Int(1), Add, kind=None)
// [Typer] infer: Var("x1")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x3", Var({val: None})), Prim(Var("x2"), Int(1), Add, kind=None), Let(("x4", Var({val: None})), Prim(Var("x3"), Int(1), Add, kind=None), Let(("x5", Var({val: None})), Prim(Var("x4"), Int(1), Add, kind=None), Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x2"), Int(1), Add, kind=None)
// [Typer] infer: Var("x2")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x4", Var({val: None})), Prim(Var("x3"), Int(1), Add, kind=None), Let(("x5", Var({val: None})), Prim(Var("x4"), Int(1), Add, kind=None), Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x3"), Int(1), Add, kind=None)
// [Typer] infer: Var("x3")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x5", Var({val: None})), Prim(Var("x4"), Int(1), Add, kind=None), Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x4"), Int(1), Add, kind=None)
// [Typer] infer: Var("x4")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x6", Var({val: None})), Prim(Var("x5"), Int(1), Add, kind=None), Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x5"), Int(1), Add, kind=None)
// [Typer] infer: Var("x5")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x7", Var({val: None})), Prim(Var("x6"), Int(1), Add, kind=None), Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x6"), Int(1), Add, kind=None)
// [Typer] infer: Var("x6")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x8", Var({val: None})), Prim(Var("x7"), Int(1), Add, kind=None), Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x7"), Int(1), Add, kind=None)
// [Typer] infer: Var("x7")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x9", Var({val: None})), Prim(Var("x8"), Int(1), Add, kind=None), Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x8"), Int(1), Add, kind=None)
// [Typer] infer: Var("x8")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x10", Var({val: None})), Prim(Var("x9"), Int(1), Add, kind=None), Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x9"), Int(1), Add, kind=None)
// [Typer] infer: Var("x9")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x11", Var({val: None})), Prim(Var("x10"), Int(1), Add, kind=None), Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x10"), Int(1), Add, kind=None)
// [Typer] infer: Var("x10")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x12", Var({val: None})), Prim(Var("x11"), Int(1), Add, kind=None), Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x11"), Int(1), Add, kind=None)
// [Typer] infer: Var("x11")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x13", Var({val: None})), Prim(Var("x12"), Int(1), Add, kind=None), Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x12"), Int(1), Add, kind=None)
// [Typer] infer: Var("x12")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x14", Var({val: None})), Prim(Var("x13"), Int(1), Add, kind=None), Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x13"), Int(1), Add, kind=None)
// [Typer] infer: Var("x13")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x15", Var({val: None})), Prim(Var("x14"), Int(1), Add, kind=None), Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x14"), Int(1), Add, kind=None)
// [Typer] infer: Var("x14")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x16", Var({val: None})), Prim(Var("x15"), Int(1), Add, kind=None), Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x15"), Int(1), Add, kind=None)
// [Typer] infer: Var("x15")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x17", Var({val: None})), Prim(Var("x16"), Int(1), Add, kind=None), Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x16"), Int(1), Add, kind=None)
// [Typer] infer: Var("x16")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x18", Var({val: None})), Prim(Var("x17"), Int(1), Add, kind=None), Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x17"), Int(1), Add, kind=None)
// [Typer] infer: Var("x17")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x19", Var({val: None})), Prim(Var("x18"), Var("x1"), Add, kind=None), Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x18"), Var("x1"), Add, kind=None)
// [Typer] infer: Var("x18")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x1")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x20", Var({val: None})), Prim(Var("x19"), Var("x2"), Add, kind=None), Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x19"), Var("x2"), Add, kind=None)
// [Typer] infer: Var("x19")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x2")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x21", Var({val: None})), Prim(Var("x20"), Var("x3"), Add, kind=None), Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))))) against Int
// [Typer] infer: Prim(Var("x20"), Var("x3"), Add, kind=None)
// [Typer] infer: Var("x20")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x3")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x22", Var({val: None})), Prim(Var("x21"), Var("x4"), Add, kind=None), Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))))) against Int
// [Typer] infer: Prim(Var("x21"), Var("x4"), Add, kind=None)
// [Typer] infer: Var("x21")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x4")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x23", Var({val: None})), Prim(Var("x22"), Var("x5"), Add, kind=None), Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))))) against Int
// [Typer] infer: Prim(Var("x22"), Var("x5"), Add, kind=None)
// [Typer] infer: Var("x22")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x5")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x24", Var({val: None})), Prim(Var("x23"), Var("x6"), Add, kind=None), Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))))) against Int
// [Typer] infer: Prim(Var("x23"), Var("x6"), Add, kind=None)
// [Typer] infer: Var("x23")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x6")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x25", Var({val: None})), Prim(Var("x24"), Var("x7"), Add, kind=None), Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))))) against Int
// [Typer] infer: Prim(Var("x24"), Var("x7"), Add, kind=None)
// [Typer] infer: Var("x24")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x7")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x26", Var({val: None})), Prim(Var("x25"), Var("x8"), Add, kind=None), Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))))) against Int
// [Typer] infer: Prim(Var("x25"), Var("x8"), Add, kind=None)
// [Typer] infer: Var("x25")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x8")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x27", Var({val: None})), Prim(Var("x26"), Var("x9"), Add, kind=None), Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))))) against Int
// [Typer] infer: Prim(Var("x26"), Var("x9"), Add, kind=None)
// [Typer] infer: Var("x26")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x9")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x28", Var({val: None})), Prim(Var("x27"), Var("x10"), Add, kind=None), Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))))) against Int
// [Typer] infer: Prim(Var("x27"), Var("x10"), Add, kind=None)
// [Typer] infer: Var("x27")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x10")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x29", Var({val: None})), Prim(Var("x28"), Var("x11"), Add, kind=None), Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))))) against Int
// [Typer] infer: Prim(Var("x28"), Var("x11"), Add, kind=None)
// [Typer] infer: Var("x28")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x11")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x30", Var({val: None})), Prim(Var("x29"), Var("x12"), Add, kind=None), Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))))) against Int
// [Typer] infer: Prim(Var("x29"), Var("x12"), Add, kind=None)
// [Typer] infer: Var("x29")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x12")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x31", Var({val: None})), Prim(Var("x30"), Var("x13"), Add, kind=None), Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))))) against Int
// [Typer] infer: Prim(Var("x30"), Var("x13"), Add, kind=None)
// [Typer] infer: Var("x30")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x13")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x32", Var({val: None})), Prim(Var("x31"), Var("x14"), Add, kind=None), Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))))) against Int
// [Typer] infer: Prim(Var("x31"), Var("x14"), Add, kind=None)
// [Typer] infer: Var("x31")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x14")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x33", Var({val: None})), Prim(Var("x32"), Var("x15"), Add, kind=None), Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))))) against Int
// [Typer] infer: Prim(Var("x32"), Var("x15"), Add, kind=None)
// [Typer] infer: Var("x32")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x15")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x34", Var({val: None})), Prim(Var("x33"), Var("x16"), Add, kind=None), Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)))) against Int
// [Typer] infer: Prim(Var("x33"), Var("x16"), Add, kind=None)
// [Typer] infer: Var("x33")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x16")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x35", Var({val: None})), Prim(Var("x34"), Var("x17"), Add, kind=None), Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None))) against Int
// [Typer] infer: Prim(Var("x34"), Var("x17"), Add, kind=None)
// [Typer] infer: Var("x34")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x17")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("x36", Var({val: None})), Prim(Var("x35"), Var("x0"), Add, kind=None), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None)) against Int
// [Typer] infer: Prim(Var("x35"), Var("x0"), Add, kind=None)
// [Typer] infer: Var("x35")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Var("x0")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None), Var("x0"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None), Var("x36"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None), Var("x35"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None), Var("x34"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None), Var("x33"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None), Var("x32"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None), Var("x31"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None), Var("x30"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None), Var("x29"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None), Var("x28"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None), Var("x27"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None), Var("x26"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None), Var("x25"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None), Var("x24"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None), Var("x23"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None), Var("x22"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None), Var("x21"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None), Var("x20"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None), Var("x19"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None), Var("x18"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None), Var("x17"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None), Var("x16"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None), Var("x15"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None), Var("x14"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None), Var("x13"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None), Var("x12"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None), Var("x11"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None), Var("x10"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None), Var("x9"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None), Var("x8"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None), Var("x7"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None), Var("x6"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None), Var("x5"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None), Var("x4"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Var("x1"), Var("x2"), Add, kind=None), Var("x3"), Add, kind=None) against Int
// [Typer] check: Prim(Var("x1"), Var("x2"), Add, kind=None) against Int
// [Typer] check: Var("x1") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x2") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x3") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x4") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x5") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x6") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x7") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x8") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x9") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x10") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x11") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x12") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x13") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x14") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x15") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x16") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x17") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x18") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x19") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x20") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x21") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x22") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x23") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x24") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x25") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x26") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x27") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x28") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x29") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x30") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x31") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x32") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x33") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x34") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x35") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x36") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x0") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(0)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("f"), [Int(0)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("f"), [Int(0)]) against Int
// [Typer] infer: Int(0)
// [Typer] check: Var("f") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
