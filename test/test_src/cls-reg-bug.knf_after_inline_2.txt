let rec main.39: Unit = () {
  let _40: Int = Int(1)
  let _41: Int = Int(2)
  let _42: Int = Int(3)
  let _43: Int = Int(4)
  let _44: Int = Int(5)
  let _45: Int = Int(6)
  let _46: Int = Int(7)
  let _47: Int = Int(8)
  let _48: Int = Int(9)
  let _49: Int = Int(10)
  let _50: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) = Tuple([_40, _41, _42, _43, _44, _45, _46, _47, _48, _49, ])
  let (v1.53: Int, v2.54: Int, v3.55: Int, v4.56: Int, v5.57: Int, v6.58: Int, v7.59: Int, v8.60: Int, v9.61: Int, v10.62: Int) = _50
  let rec g.63: Int = (z.64: Int) {
    let _65: Int = Add(v1.53, v2.54)
    let _66: Int = Add(_65, v3.55)
    let _67: Int = Add(_66, v4.56)
    let _68: Int = Add(_67, v5.57)
    let _69: Int = Add(_68, v6.58)
    let _70: Int = Add(_69, v7.59)
    let _71: Int = Add(_70, v8.60)
    let _72: Int = Add(_71, v9.61)
    let r.73: Int = Add(_72, v10.62)
    let _74: Int = Int(0)
    if (z.64 <= _74) then {
      let _75: Int = Neg(z.64)
      Apply(g.63, [_75, ])
    } else {
      Var(r.73)
    }
  }
  let _76: Int = Int(1)
  let _51: Int = Apply(g.63, [_76, ])
  let t1.52: Unit = ExtApply(minimbt_print_int, [_51, ])
  Unit
}
Apply(main.39, [])
