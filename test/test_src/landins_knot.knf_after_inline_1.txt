let rec dummy.1: Int = (i.3: Int) {
  Var(i.3)
}
let arr.47: Array(Fun([Int], Int)) = 
  let _66: Int = Int(1)
  ExtApply(minimbt_create_ptr_array, [_66, dummy.1, ])
let rec aux.48: Var({val: Some(Int)}) = (x.49: Var({val: Some(Int)})) {
  let _50: Int = Int(0)
  let _51: Fun([Int], Int) = Get arr.47[_50]
  Apply(_51, [x.49, ])
}
let rec h.60: Var({val: Some(Int)}) = (x.61: Var({val: Some(Int)})) {
  let _62: Int = Int(0)
  if (x.61 == _62) then {
    Int(1)
  } else {
    let _63: Int = Int(1)
    let _64: Int = Sub(x.61, _63)
    let _65: Var({val: Some(Int)}) = Apply(aux.48, [_64, ])
    Mul(x.61, _65)
  }
}
let _54: Unit = 
  let _67: Int = Int(0)
  Put arr.47[_67] = h.60
let a.33: Int = 
  let _68: Int = Int(5)
  Apply(h.60, [_68, ])
let rec main.37: Var({val: Some(Unit)}) = () {
  let _55: Int = Int(5)
  let _56: Int = Apply(h.60, [_55, ])
  let _39: Unit = ExtApply(minimbt_print_int, [_56, ])
  let _40: Int = Int(10)
  let _41: Int = Add(_40, a.33)
  let _43: Unit = ExtApply(minimbt_print_int, [_41, ])
  let _44: Int = Int(31)
  let _45: Int = Add(_44, a.33)
  ExtApply(minimbt_print_int, [_45, ])
}
Apply(main.37, [])
