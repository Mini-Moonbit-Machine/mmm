let _1: Int = Int(1)
let _2: Int = Int(0)
let len.3: Array(Int) = ExtApply(minimbt_create_array, [_1, _2, ])
let _48: Int = Int(0)
let _49: Int = Int(1)
let _50: Unit = Put len.3[_48] = _49
let _8: Var({val: Some(Unit)}) = Unit
let _9: Int = Int(1)
let _10: Int = Int(0)
let len2.11: Array(Int) = ExtApply(minimbt_create_array, [_9, _10, ])
let _57: Int = Int(0)
let _58: Int = Int(2)
let _59: Unit = Put len2.11[_57] = _58
let _16: Var({val: Some(Unit)}) = Unit
let _60: Int = Int(0)
let _61: Int = Int(3)
let _62: Unit = Put len.3[_60] = _61
let _63: Int = Int(0)
let _64: Int = Int(4)
let _65: Unit = Put len2.11[_63] = _64
let _24: Var({val: Some(Unit)}) = Unit
let rec main.25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(0)
  let _27: Int = Get len.3[_26]
  let _28: Unit = ExtApply(minimbt_print_int, [_27, ])
  let _29: Unit = ExtApply(minimbt_print_endline, [])
  let _30: Int = Int(0)
  let _31: Int = Get len2.11[_30]
  let _32: Unit = ExtApply(minimbt_print_int, [_31, ])
  Unit
}
Apply(main.25, [])let _1: Int = Int(1)
let _2: Int = Int(0)
let len.3: Array(Int) = ExtApply(minimbt_create_array, [_1, _2, ])
let _48: Int = Int(0)
let _49: Int = Int(1)
let _50: Unit = Put len.3[_48] = _49
let _8: Var({val: Some(Unit)}) = Unit
let _9: Int = Int(1)
let _10: Int = Int(0)
let len2.11: Array(Int) = ExtApply(minimbt_create_array, [_9, _10, ])
let _57: Int = Int(0)
let _58: Int = Int(2)
let _59: Unit = Put len2.11[_57] = _58
let _16: Var({val: Some(Unit)}) = Unit
let _60: Int = Int(0)
let _61: Int = Int(3)
let _62: Unit = Put len.3[_60] = _61
let _63: Int = Int(0)
let _64: Int = Int(4)
let _65: Unit = Put len2.11[_63] = _64
let _24: Var({val: Some(Unit)}) = Unit
let rec main.25: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(0)
  let _27: Int = Get len.3[_26]
  let _28: Unit = ExtApply(minimbt_print_int, [_27, ])
  let _29: Unit = ExtApply(minimbt_print_endline, [])
  let _30: Int = Int(0)
  let _31: Int = Get len2.11[_30]
  let _32: Unit = ExtApply(minimbt_print_int, [_31, ])
  Unit
}
Apply(main.25, [])