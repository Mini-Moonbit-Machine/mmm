let rec h: (p: (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int)) -> Int {
  let (v1: Var(None), v2: Var(None), v3: Var(None), v4: Var(None), v5: Var(None), v6: Var(None), v7: Var(None), v8: Var(None), v9: Var(None), v10: Var(None)) = Var("p")
  let rec g: (z: Int) -> Int {
    let r: Var(None) = Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None) + Var("v10")
    if (Not(LE(Var("z"), Int(0)))) then {
      Var(r)
    } else {
      Apply(Var("g"), [Neg(Var("z"), kind=None), ])
    }
  }
  Apply(Var("g"), [Int(1), ])
}
let rec main: () -> Var(None) {
  let t1: Var(None) = Apply(Var("print_int"), [App(Var("h"), targs=None, [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])]), ])
  Unit
}
Unit
