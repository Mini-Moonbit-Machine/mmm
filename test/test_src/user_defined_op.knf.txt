let rec pow.1: Int = (x.3: Int, n.5: Int) {
  let _6: Int = Int(0)
  if (n.5 == _6) then {
    Int(1)
  } else {
    let _7: Int = Int(1)
    let _8: Int = Sub(n.5, _7)
    let _9: Int = Apply(pow.1, [x.3, _8, ])
    Mul(x.3, _9)
  }
}
let rec main.10: Unit = () {
  let _11: Int = Int(2)
  let _12: Int = Int(2)
  let _13: Int = Int(3)
  let _14: Int = Apply(pow.1, [_12, _13, ])
  let _15: Int = Apply(pow.1, [_11, _14, ])
  let _17: Unit = ExtApply(minimbt_print_int, [_15, ])
  let _18: Int = Int(10)
  let _20: Unit = ExtApply(minimbt_print_char, [_18, ])
  let _21: Int = Int(2)
  let _22: Int = Int(2)
  let _23: Int = Apply(pow.1, [_21, _22, ])
  let _24: Int = Int(3)
  let _25: Int = Apply(pow.1, [_23, _24, ])
  let _27: Unit = ExtApply(minimbt_print_int, [_25, ])
  Unit
}
Apply(main.10, [])
