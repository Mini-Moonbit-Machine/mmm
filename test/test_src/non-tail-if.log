// [Asm] pre_assigned_registers: Insn(iref=%15) -> v29, BlockParam(bref=b7, bpref=$b.0) -> v37, BlockParam(bref=b10, bpref=$b.0) -> v30, Insn(iref=%8) -> v35, Insn(iref=%10) -> v33, Insn(iref=%27) -> v12, Insn(iref=%25) -> v8, Insn(iref=%14) -> v28, Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%26) -> v9, Insn(iref=%11) -> v34, Insn(iref=%6) -> v31, BlockParam(bref=b19, bpref=$b.0) -> v14, Self(fref=f0) -> v0, BlockParam(bref=b16, bpref=$b.0) -> v21, Insn(iref=%28) -> v13, Insn(iref=%24) -> v18, Insn(iref=%16) -> v26, Insn(iref=%9) -> v36, Insn(iref=%29) -> v10, Insn(iref=%5) -> v23, Insn(iref=%0) -> v2, Insn(iref=%19) -> v15, Insn(iref=%3) -> v5, Insn(iref=%18) -> v7, Insn(iref=%13) -> v25, BlockParam(bref=b11, bpref=$b.0) -> v38, Insn(iref=%7) -> v32, Insn(iref=%22) -> v20, Insn(iref=%23) -> v17, Insn(iref=%17) -> v27, Insn(iref=%2) -> fv4, Insn(iref=%20) -> v16, Insn(iref=%30) -> v11, BlockParam(bref=b21, bpref=$b.0) -> v39, Insn(iref=%21) -> v19, BlockParam(bref=b20, bpref=$b.0) -> v22, Insn(iref=%12) -> v24
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%3)])
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move_origin: [v22]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v39]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [a0]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v29]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v5, v24, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v24, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v13]
// [Asm] defined: v14 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move_origin: [v30]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v38]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v3, v5, v31, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v31, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [zero, v67]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [fv68]
// [Asm] live_set: [fv68, zero]
// [Asm] move_origin: []
// [Asm] defined: fv68 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v64]
// [Asm] live_set: [zero, v64, v2]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [fv65]
// [Asm] live_set: [fv65, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: fv65 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v2, v61, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [fv62]
// [Asm] live_set: [v2, fv62, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv62 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, fv4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v5, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v15, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v3, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v5, v2]
// [Asm] move_origin: []
// [Asm] defs: [v35]
// [Asm] live_set: [v35]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v35]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v36]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37]
// [Asm] move_origin: [v36]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move_origin: [v37]
// [Asm] defined: v38 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [v11]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v33]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v34]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37]
// [Asm] move_origin: [v34]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v37]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move_origin: [v38]
// [Asm] defined: v39 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v18]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v14]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v26]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v27]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v30]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v39]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.17"];
// [Asm]   r0 [label="v39 ← a0", color=green];
// [Asm]   r46 [label="v27 ← a0", color=green];
// [Asm]   r38 [label="v21 ← a0", color=green];
// [Asm]   r33 [label="v35 ← a0", color=green];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r26 [label="v31 ← a0", color=green];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r44 [label="v18 ← a0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r42 [label="v34 ← a0", color=green];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r29 [label="v64 ← a0", color=green];
// [Asm]   r35 [label="v37 ← a0", color=green];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r36 [label="v19 ← a0", color=green];
// [Asm]   r32 [label="v8 ← a0", color=green];
// [Asm]   r24 [label="v14 ← a0", color=green];
// [Asm]   r15 [label="v29 ← a0", color=green];
// [Asm]   r43 [label="v17 ← a0", color=green];
// [Asm]   r31 [label="v15 ← a0", color=green];
// [Asm]   r39 [label="v10 ← a0", color=green];
// [Asm]   r17 [label="v24 ← a0", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r37 [label="v20 ← a0", color=green];
// [Asm]   r20 [label="zero", color=blue];
// [Asm]   r23 [label="v13 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r27 [label="v22 ← a0", color=green];
// [Asm]   r1 [label="v28 ← a0", color=green];
// [Asm]   r40 [label="v11 ← a0", color=green];
// [Asm]   r41 [label="v33 ← a0", color=green];
// [Asm]   r28 [label="v67 ← a0", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r34 [label="v36 ← a0", color=green];
// [Asm]   r22 [label="v12 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r30 [label="v61 ← a0", color=green];
// [Asm]   r45 [label="v26 ← a0", color=green];
// [Asm]   r25 [label="v38 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v30 ← a0", color=green];
// [Asm]   r18 [label="v3 ← a1", color=green];
// [Asm]   r19 [label="v5 ← a2", color=green];
// [Asm]   r21 [label="v2 ← a3", color=green];
// [Asm]   r18 -- r32;
// [Asm]   r2 -- r6;
// [Asm]   r17 -- r18;
// [Asm]   r18 -- r26;
// [Asm]   r17 -- r21;
// [Asm]   r19 -- r32;
// [Asm]   r18 -- r19;
// [Asm]   r20 -- r31;
// [Asm]   r21 -- r31;
// [Asm]   r2 -- r14;
// [Asm]   r21 -- r30;
// [Asm]   r2 -- r4;
// [Asm]   r20 -- r26;
// [Asm]   r20 -- r32;
// [Asm]   r21 -- r32;
// [Asm]   r2 -- r12;
// [Asm]   r18 -- r30;
// [Asm]   r21 -- r29;
// [Asm]   r2 -- r8;
// [Asm]   r20 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r21 -- r26;
// [Asm]   r19 -- r31;
// [Asm]   r18 -- r21;
// [Asm]   r18 -- r20;
// [Asm]   r20 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r31;
// [Asm]   r19 -- r21;
// [Asm]   r19 -- r26;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r3;
// [Asm]   r20 -- r21;
// [Asm]   r17 -- r19;
// [Asm]   r20 -- r30;
// [Asm]   r17 -- r20;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v39-> 1:v28-> 2:a0-> 3:a1-> 4:a2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:v29-> 16:v30-> 17:v24-> 18:v3-> 19:v5-> 20:zero-> 21:v2-> 26:v31-> 31:v15-> 32:v8-> 30:v61-> 29:v64-> 28:v67-> 22:v12-> 23:v13-> 24:v14-> 25:v38-> 27:v22-> 33:v35-> 34:v36-> 35:v37-> 36:v19-> 37:v20-> 38:v21-> 39:v10-> 40:v11-> 41:v33-> 42:v34-> 43:v17-> 44:v18-> 45:v26-> 46:v27"
// [Asm]   comment = "v39<-a0;v27<-a0;v21<-a0;v35<-a0;v31<-a0;v18<-a0;v34<-a0;v64<-a0;v37<-a0;v19<-a0;v8<-a0;v14<-a0;v29<-a0;v17<-a0;v15<-a0;v10<-a0;v24<-a0;v20<-a0;v13<-a0;v22<-a0;v28<-a0;v11<-a0;v33<-a0;v67<-a0;v36<-a0;v12<-a0;v61<-a0;v26<-a0;v38<-a0;v30<-a0;v3<-a1;v5<-a2;v2<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.17"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r20 [label="fv65 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r22 [label="fv4 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv68 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r21 [label="fv62 ← fa0", color=green];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv68-> 20:fv65-> 21:fv62-> 22:fv4"
// [Asm]   comment = "fv65<-fa0;fv4<-fa0;fv68<-fa0;fv62<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   j .main.17_21 ->   j .main.17_21
// [Asm] subst   add v28, v24, v5 ->   add a0, a0, a2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   add v24, v2, v5 ->   add a0, a3, a2
// [Asm] subst   blt v3, zero, .main.17_9 ->   blt a1, zero, .main.17_9
// [Asm] subst   add v12, v8, v5 ->   add a0, a0, a2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.17_11 ->   j .main.17_11
// [Asm] subst   add v31, v2, v3 ->   add a0, a3, a1
// [Asm] subst   blt v3, zero, .main.17_6 ->   blt a1, zero, .main.17_6
// [Asm] subst   blt zero, v2, .main.17_13 ->   blt zero, a3, .main.17_13
// [Asm] subst   li v67, 4608218246714312622 ->   li a0, 4608218246714312622
// [Asm] subst   fmv.d.x fv68, v67 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v2, fv68, rtz ->   fcvt.w.d a3, fa0, rtz
// [Asm] subst   li v64, 4616820122002590269 ->   li a0, 4616820122002590269
// [Asm] subst   fmv.d.x fv65, v64 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v3, fv65, rtz ->   fcvt.w.d a1, fa0, rtz
// [Asm] subst   li v61, 4620569368692376207 ->   li a0, 4620569368692376207
// [Asm] subst   fmv.d.x fv62, v61 ->   fmv.d.x fa0, a0
// [Asm] subst   fneg.d fv4, fv62 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.w.d v5, fv4, rtz ->   fcvt.w.d a2, fa0, rtz
// [Asm] subst   blt v5, zero, .main.17_2 ->   blt a2, zero, .main.17_2
// [Asm] subst   add v15, v3, v3 ->   add a0, a1, a1
// [Asm] subst   blt v3, zero, .main.17_15 ->   blt a1, zero, .main.17_15
// [Asm] subst   add v8, v3, v5 ->   add a0, a1, a2
// [Asm] subst   blt v3, zero, .main.17_18 ->   blt a1, zero, .main.17_18
// [Asm] subst   add v35, v31, v5 ->   add a0, a0, a2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   add v19, v15, v5 ->   add a0, a0, a2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   add v10, v8, v2 ->   add a0, a0, a3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.17_19 ->   j .main.17_19
// [Asm] subst   blt zero, v2, .main.17_4 ->   blt zero, a3, .main.17_4
// [Asm] subst   add v33, v31, v2 ->   add a0, a0, a3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.17_7 ->   j .main.17_7
// [Asm] subst   add v17, v15, v2 ->   add a0, a0, a3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.17_16 ->   j .main.17_16
// [Asm] subst   j .main.17_20 ->   j .main.17_20
// [Asm] subst   add v26, v24, v2 ->   add a0, a0, a3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.17_10 ->   j .main.17_10
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.17 ->   call main.17
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.17  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.17:
// [Asm] # block info: defs: [v2, fv68, v5, fv65, fv62, v67, fv4, v61, v64, v3], uses: [fv68, v5, fv65, fv62, zero, v67, fv4, v61, v64], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v3, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   li v67, 4608218246714312622  # live: [zero, v67]
// [Asm]   fmv.d.x fv68, v67  # live: [fv68, zero]
// [Asm]   fcvt.w.d v2, fv68, rtz  # live: [zero, v2]
// [Asm]   li v64, 4616820122002590269  # live: [zero, v64, v2]
// [Asm]   fmv.d.x fv65, v64  # live: [fv65, zero, v2]
// [Asm]   fcvt.w.d v3, fv65, rtz  # live: [v2, zero, v3]
// [Asm]   li v61, 4620569368692376207  # live: [v2, v61, zero, v3]
// [Asm]   fmv.d.x fv62, v61  # live: [v2, fv62, zero, v3]
// [Asm]   fneg.d fv4, fv62  # live: [v2, fv4, zero, v3]
// [Asm]   fcvt.w.d v5, fv4, rtz  # live: [v2, v5, zero, v3]
// [Asm] # control
// [Asm]   blt v5, zero, .main.17_2  # live: [v2, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v2], live_out: [v3, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_1:
// [Asm] # control
// [Asm]   blt zero, v2, .main.17_4  # live: [v2, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v3, zero, v2], upward_exposed: [v3, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v3], live_out: [v5, v31, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_3:
// [Asm]   add v31, v2, v3  # live: [v3, v5, v31, zero, v2]
// [Asm] # control
// [Asm]   blt v3, zero, .main.17_6  # live: [v5, v31, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, v35, fa0, t4, t2], uses: [v36, v5, v31, a0, v35], upward_exposed: [v5, v31], params_defs: []
// [Asm] # live_in: [v5, v31], live_out: [v37]
// [Asm] # block parameters: []
// [Asm] .main.17_5:
// [Asm]   add v35, v31, v5  # live: [v35]
// [Asm]   # save_ctx2  # live: [v35]
// [Asm]   mv a0, v35  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v36, a0  # live: [v36]
// [Asm]   # restore_ctx2  # live: [v36]
// [Asm] # control
// [Asm]   mv v37, v36  # live: [v37]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [v37], upward_exposed: [v37], params_defs: [v37]
// [Asm] # live_in: [v37], live_out: [v38]
// [Asm] # block parameters: [v37]
// [Asm] .main.17_7:
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v38]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [v38], upward_exposed: [v38], params_defs: [v38]
// [Asm] # live_in: [v38], live_out: [v39]
// [Asm] # block parameters: [v38]
// [Asm] .main.17_11:
// [Asm] # control
// [Asm]   mv v39, v38  # live: [v39]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v39], upward_exposed: [v39], params_defs: [v39]
// [Asm] # live_in: [v39], live_out: []
// [Asm] # block parameters: [v39]
// [Asm] .main.17_21:
// [Asm] # control
// [Asm]   mv a0, v39  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v2], live_out: [v2, v5, zero, v3]
// [Asm] # block parameters: []
// [Asm] .main.17_2:
// [Asm] # control
// [Asm]   blt zero, v2, .main.17_13  # live: [v3, v5, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero, v3], upward_exposed: [zero, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v3], live_out: [v5, v15, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_12:
// [Asm]   add v15, v3, v3  # live: [v3, v5, v15, zero, v2]
// [Asm] # control
// [Asm]   blt v3, zero, .main.17_15  # live: [v5, v15, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft10, ft5, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v19, v5, v15, a0, v20], upward_exposed: [v5, v15], params_defs: []
// [Asm] # live_in: [v5, v15], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .main.17_14:
// [Asm]   add v19, v15, v5  # live: [v19]
// [Asm]   # save_ctx2  # live: [v19]
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v20, a0  # live: [v20]
// [Asm]   # restore_ctx2  # live: [v20]
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: [v22]
// [Asm] # block parameters: [v21]
// [Asm] .main.17_16:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: [v39]
// [Asm] # block parameters: [v22]
// [Asm] .main.17_20:
// [Asm] # control
// [Asm]   mv v39, v22  # live: [v39]
// [Asm]   j .main.17_21  # live: [v39]
// [Asm] 
// [Asm] # block info: defs: [v8], uses: [v5, zero, v3], upward_exposed: [v5, zero, v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v3], live_out: [v2, v5, v8]
// [Asm] # block parameters: []
// [Asm] .main.17_13:
// [Asm]   add v8, v3, v5  # live: [v8, v3, v5, zero, v2]
// [Asm] # control
// [Asm]   blt v3, zero, .main.17_18  # live: [v8, v5, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v12, a0, v13, v8], upward_exposed: [v5, v8], params_defs: []
// [Asm] # live_in: [v5, v8], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .main.17_17:
// [Asm]   add v12, v8, v5  # live: [v12]
// [Asm]   # save_ctx2  # live: [v12]
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v13, a0  # live: [v13]
// [Asm]   # restore_ctx2  # live: [v13]
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v14], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: [v22]
// [Asm] # block parameters: [v14]
// [Asm] .main.17_19:
// [Asm] # control
// [Asm]   mv v22, v14  # live: [v22]
// [Asm]   j .main.17_20  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v10, a0, v8], upward_exposed: [v2, v8], params_defs: []
// [Asm] # live_in: [v8, v2], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .main.17_18:
// [Asm]   add v10, v8, v2  # live: [v10]
// [Asm]   # save_ctx2  # live: [v10]
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v14, v11  # live: [v14]
// [Asm]   j .main.17_19  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v17, v15, v18, a0, v2], upward_exposed: [v15, v2], params_defs: []
// [Asm] # live_in: [v15, v2], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .main.17_15:
// [Asm]   add v17, v15, v2  # live: [v17]
// [Asm]   # save_ctx2  # live: [v17]
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v18, a0  # live: [v18]
// [Asm]   # restore_ctx2  # live: [v18]
// [Asm] # control
// [Asm]   mv v21, v18  # live: [v21]
// [Asm]   j .main.17_16  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v3, v5, zero, v2], upward_exposed: [v3, v5, zero, v2], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v3], live_out: [v5, v24, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_4:
// [Asm]   add v24, v2, v5  # live: [v3, v5, v24, zero, v2]
// [Asm] # control
// [Asm]   blt v3, zero, .main.17_9  # live: [v5, v24, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, v24, v28, a0, v29], upward_exposed: [v5, v24], params_defs: []
// [Asm] # live_in: [v5, v24], live_out: [v30]
// [Asm] # block parameters: []
// [Asm] .main.17_8:
// [Asm]   add v28, v24, v5  # live: [v28]
// [Asm]   # save_ctx2  # live: [v28]
// [Asm]   mv a0, v28  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v29, a0  # live: [v29]
// [Asm]   # restore_ctx2  # live: [v29]
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [v38], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: [v38]
// [Asm] # block parameters: [v30]
// [Asm] .main.17_10:
// [Asm] # control
// [Asm]   mv v38, v30  # live: [v38]
// [Asm]   j .main.17_11  # live: [v38]
// [Asm] 
// [Asm] # block info: defs: [t1, v26, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v24, v26, a0, v27], upward_exposed: [v24, v2], params_defs: []
// [Asm] # live_in: [v24, v2], live_out: [v30]
// [Asm] # block parameters: []
// [Asm] .main.17_9:
// [Asm]   add v26, v24, v2  # live: [v26]
// [Asm]   # save_ctx2  # live: [v26]
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v27, a0  # live: [v27]
// [Asm]   # restore_ctx2  # live: [v27]
// [Asm] # control
// [Asm]   mv v30, v27  # live: [v30]
// [Asm]   j .main.17_10  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v33, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v31, v33, a0, v34], upward_exposed: [v31, v2], params_defs: []
// [Asm] # live_in: [v31, v2], live_out: [v37]
// [Asm] # block parameters: []
// [Asm] .main.17_6:
// [Asm]   add v33, v31, v2  # live: [v33]
// [Asm]   # save_ctx2  # live: [v33]
// [Asm]   mv a0, v33  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v34, a0  # live: [v34]
// [Asm]   # restore_ctx2  # live: [v34]
// [Asm] # control
// [Asm]   mv v37, v34  # live: [v37]
// [Asm]   j .main.17_7  # live: [v37]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("truncate"), [Double(1.23)]), Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("truncate"), [Double(1.23)]), Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("truncate"), [Double(1.23)])
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("truncate"), [Double(4.56)])
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))])
// [Knf] build_knf: Neg(Double(7.89), kind=Some(Double))
// [Knf] build_knf: Double(7.89)
// [Knf] build_knf: App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int))
// [Knf] build_knf: If(LE(Int(0), Var("z")), Var("x"), Var("y"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Var("y"), Var("z"))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: If(LE(Int(0), Var("y")), Var("z"), Var("x"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b5 control: Panic -> Jump(target=b7, args=[Insn(iref=%9)])
// [Core] b6 control: Panic -> Jump(target=b7, args=[Insn(iref=%11)])
// [Core] b3 control: Panic -> Branch(cond=Insn(iref=%7), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b8 control: Panic -> Jump(target=b10, args=[Insn(iref=%15)])
// [Core] b9 control: Panic -> Jump(target=b10, args=[Insn(iref=%17)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%13), t=b8, t_args=[], f=b9, f_args=[])
// [Core] b7 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b10 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%5), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b14 control: Panic -> Jump(target=b16, args=[Insn(iref=%22)])
// [Core] b15 control: Panic -> Jump(target=b16, args=[Insn(iref=%24)])
// [Core] b12 control: Panic -> Branch(cond=Insn(iref=%20), t=b14, t_args=[], f=b15, f_args=[])
// [Core] b17 control: Panic -> Jump(target=b19, args=[Insn(iref=%28)])
// [Core] b18 control: Panic -> Jump(target=b19, args=[Insn(iref=%30)])
// [Core] b13 control: Panic -> Branch(cond=Insn(iref=%26), t=b17, t_args=[], f=b18, f_args=[])
// [Core] b16 control: Panic -> Jump(target=b20, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Core] b19 control: Panic -> Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%18), t=b12, t_args=[], f=b13, f_args=[])
// [Core] b11 control: Panic -> Jump(target=b21, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b20 control: Panic -> Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%4), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b21 control: Panic -> Return(args=[BlockParam(bref=b21, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _10 = x.3
// [Main] beta reduce _12 = y.5
// [Main] beta reduce _15 = z.8
// [Main] beta reduce _15 = x.3
// [Main] beta reduce _12 = z.8
// [Main] beta reduce _15 = z.8
// [Main] beta reduce _15 = x.3
// [Main] beta reduce _10 = y.5
// [Main] beta reduce _12 = y.5
// [Main] beta reduce _15 = z.8
// [Main] beta reduce _15 = x.3
// [Main] beta reduce _12 = z.8
// [Main] beta reduce _15 = z.8
// [Main] beta reduce _15 = x.3
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.17
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.17
// [Main]   .type main.17, @function
// [Main] # leaf false
// [Main] main.17:
// [Main] .main.17_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4608218246714312622
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a3, fa0, rtz
// [Main]   li a0, 4616820122002590269
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a1, fa0, rtz
// [Main]   li a0, 4620569368692376207
// [Main]   fmv.d.x fa0, a0
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.w.d a2, fa0, rtz
// [Main]   blt a2, zero, .main.17_2
// [Main] 
// [Main] .main.17_1:
// [Main]   blt zero, a3, .main.17_4
// [Main] 
// [Main] .main.17_3:
// [Main]   add a0, a3, a1
// [Main]   blt a1, zero, .main.17_6
// [Main] 
// [Main] .main.17_5:
// [Main]   add a0, a0, a2
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.17_7:
// [Main] 
// [Main] .main.17_11:
// [Main] 
// [Main] .main.17_21:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main.17_2:
// [Main]   blt zero, a3, .main.17_13
// [Main] 
// [Main] .main.17_12:
// [Main]   add a0, a1, a1
// [Main]   blt a1, zero, .main.17_15
// [Main] 
// [Main] .main.17_14:
// [Main]   add a0, a0, a2
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.17_16:
// [Main] 
// [Main] .main.17_20:
// [Main]   j .main.17_21
// [Main] 
// [Main] .main.17_13:
// [Main]   add a0, a1, a2
// [Main]   blt a1, zero, .main.17_18
// [Main] 
// [Main] .main.17_17:
// [Main]   add a0, a0, a2
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.17_19:
// [Main]   j .main.17_20
// [Main] 
// [Main] .main.17_18:
// [Main]   add a0, a0, a3
// [Main]   call minimbt_print_int
// [Main]   j .main.17_19
// [Main] 
// [Main] .main.17_15:
// [Main]   add a0, a0, a3
// [Main]   call minimbt_print_int
// [Main]   j .main.17_16
// [Main] 
// [Main] .main.17_4:
// [Main]   add a0, a3, a2
// [Main]   blt a1, zero, .main.17_9
// [Main] 
// [Main] .main.17_8:
// [Main]   add a0, a0, a2
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.17_10:
// [Main]   j .main.17_11
// [Main] 
// [Main] .main.17_9:
// [Main]   add a0, a0, a3
// [Main]   call minimbt_print_int
// [Main]   j .main.17_10
// [Main] 
// [Main] .main.17_6:
// [Main]   add a0, a0, a3
// [Main]   call minimbt_print_int
// [Main]   j .main.17_7
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.17
// [Wasm] Lowering control Return(args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%11)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%12), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%15)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%12), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Jump(target=b10, args=[Insn(iref=%17)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Branch(cond=Insn(iref=%13), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b21, args=[BlockParam(bref=b20, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b16, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%19), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering control Jump(target=b16, args=[Insn(iref=%22)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%19), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b16, args=[Insn(iref=%24)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b14, t_args=[], f=b15, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Jump(target=b20, args=[BlockParam(bref=b19, bpref=$b.0)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%25), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Jump(target=b19, args=[Insn(iref=%28)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%25), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b19, args=[Insn(iref=%30)])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Branch(cond=Insn(iref=%18), t=b12, t_args=[], f=b13, f_args=[])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Double(val=1.23)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Double(val=4.56)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Double(val=7.89)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.17 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: main.1 false
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
