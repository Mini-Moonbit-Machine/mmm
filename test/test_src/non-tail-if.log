// [Asm] pre_assigned_registers: Insn(iref=%3) -> v5, Insn(iref=%7) -> v11, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v9, BlockParam(bref=b3, bpref=$b.0) -> v7, Insn(iref=%2) -> fv4, Insn(iref=%9) -> v14, Insn(iref=%8) -> v13, Insn(iref=%1) -> v3, Insn(iref=%6) -> v10, BlockParam(bref=b9, bpref=$b.0) -> v12, Insn(iref=%5) -> v8, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%3)])
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v10]
// [Asm] move_origin: [v2]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, v10]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v3, v5, zero, v9, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v3, v5, zero, v9, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v5, zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v10]
// [Asm] move_origin: [v5]
// [Asm] defined: v12 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v2, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v5, v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v2, v5, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v2, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [fv26]
// [Asm] live_set: [zero, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [fv23]
// [Asm] live_set: [fv23, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v2, fv20, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, fv4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.17"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r23 [label="v25 ← a0", color=green];
// [Asm]   r3 [label="v7 ← a4", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v3 ← a0", color=green];
// [Asm]   r1 [label="v10 ← a1", color=green];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="v2 ← a3", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="v13 ← a0", color=green];
// [Asm]   r5 [label="v5 ← a2", color=green];
// [Asm]   r24 [label="v22 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r25 [label="v19 ← a1", color=green];
// [Asm]   r2 [label="v9 ← a1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r2 -- r6;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r7 -- r24;
// [Asm]   r9 -- r12;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r9 -- r19;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r24;
// [Asm]   r9 -- r18;
// [Asm]   r9 -- r14;
// [Asm]   r9 -- r21;
// [Asm]   r6 -- r25;
// [Asm]   comment = "0:v12-> 1:v10-> 4:v3-> 5:v5-> 6:zero-> 7:v2-> 2:v9-> 3:v7-> 25:v19-> 24:v22-> 23:v25-> 8:v13-> 9:a0-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 22:v14"
// [Asm]   comment = "v12<-a0;v25<-a0;v7<-a4;v3<-a0;v10<-a1;v2<-a3;v14<-a0;v13<-a0;v5<-a2;v22<-a0;v19<-a1;v9<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.17"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r20 [label="fv23 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r22 [label="fv4 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv26 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r21 [label="fv20 ← fa0", color=green];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv26-> 20:fv23-> 21:fv20-> 22:fv4"
// [Asm]   comment = "fv23<-fa0;fv4<-fa0;fv26<-fa0;fv20<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v12, v2 ->   mv a0, a3
// [Asm] subst   j .main.17_9 ->   j .main.17_9
// [Asm] subst   mv v9, v3 ->   mv a1, a0
// [Asm] subst   mv v9, v5 ->   mv a1, a2
// [Asm] subst   j .main.17_6 ->   j .main.17_6
// [Asm] subst   mv v12, v5 ->   mv a0, a2
// [Asm] subst   mv v7, v2 ->   mv a4, a3
// [Asm] subst   blt zero, v2, .main.17_5 ->   blt zero, a3, .main.17_5
// [Asm] subst   add v10, v7, v9 ->   add a1, a4, a1
// [Asm] subst   blt v3, zero, .main.17_8 ->   blt a0, zero, .main.17_8
// [Asm] subst   mv v7, v3 ->   mv a4, a0
// [Asm] subst   j .main.17_3 ->   j .main.17_3
// [Asm] subst   add v13, v10, v12 ->   add a0, a1, a0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   li v25, 4608218246714312622 ->   li a0, 4608218246714312622
// [Asm] subst   fmv.d.x fv26, v25 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v2, fv26, rtz ->   fcvt.w.d a3, fa0, rtz
// [Asm] subst   li v22, 4616820122002590269 ->   li a0, 4616820122002590269
// [Asm] subst   fmv.d.x fv23, v22 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v3, fv23, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   li v19, 4620569368692376207 ->   li a1, 4620569368692376207
// [Asm] subst   fmv.d.x fv20, v19 ->   fmv.d.x fa0, a1
// [Asm] subst   fneg.d fv4, fv20 ->   fneg.d fa0, fa0
// [Asm] subst   fcvt.w.d v5, fv4, rtz ->   fcvt.w.d a2, fa0, rtz
// [Asm] subst   blt v5, zero, .main.17_2 ->   blt a2, zero, .main.17_2
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.17 ->   call main.17
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.17  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.17:
// [Asm] # block info: defs: [v2, v25, fv23, v5, v22, fv20, v19, fv4, fv26, v3], uses: [v25, fv23, v5, zero, v22, fv20, v19, fv4, fv26], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v3, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   li v25, 4608218246714312622  # live: [v25, zero]
// [Asm]   fmv.d.x fv26, v25  # live: [zero, fv26]
// [Asm]   fcvt.w.d v2, fv26, rtz  # live: [zero, v2]
// [Asm]   li v22, 4616820122002590269  # live: [zero, v22, v2]
// [Asm]   fmv.d.x fv23, v22  # live: [fv23, zero, v2]
// [Asm]   fcvt.w.d v3, fv23, rtz  # live: [v2, zero, v3]
// [Asm]   li v19, 4620569368692376207  # live: [v2, v19, zero, v3]
// [Asm]   fmv.d.x fv20, v19  # live: [v2, fv20, zero, v3]
// [Asm]   fneg.d fv4, fv20  # live: [v2, fv4, zero, v3]
// [Asm]   fcvt.w.d v5, fv4, rtz  # live: [v2, v5, zero, v3]
// [Asm] # control
// [Asm]   blt v5, zero, .main.17_2  # live: [v2, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v3, v5, zero, v2], live_out: [v7, v3, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_1:
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v2, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: [v7]
// [Asm] # live_in: [v2, v3, v5, zero, v7], live_out: [v7, v2, v5, zero, v3]
// [Asm] # block parameters: [v7]
// [Asm] .main.17_3:
// [Asm] # control
// [Asm]   blt zero, v2, .main.17_5  # live: [v2, v3, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v7, v2, v5, zero, v3], live_out: [v2, v5, zero, v7, v9, v3]
// [Asm] # block parameters: []
// [Asm] .main.17_4:
// [Asm] # control
// [Asm]   mv v9, v3  # live: [v7, v3, v5, zero, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v3, v9, zero, v7], upward_exposed: [v3, v9, zero, v7], params_defs: [v9]
// [Asm] # live_in: [v3, v5, zero, v7, v9, v2], live_out: [v5, v10, v2]
// [Asm] # block parameters: [v9]
// [Asm] .main.17_6:
// [Asm]   add v10, v7, v9  # live: [v3, v5, v10, zero, v2]
// [Asm] # control
// [Asm]   blt v3, zero, .main.17_8  # live: [v5, v10, v2]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v5, v10], live_out: [v12, v10]
// [Asm] # block parameters: []
// [Asm] .main.17_7:
// [Asm] # control
// [Asm]   mv v12, v5  # live: [v12, v10]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v14, v10, v12, v13, a0], upward_exposed: [v10, v12], params_defs: [v12]
// [Asm] # live_in: [v12, v10], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .main.17_9:
// [Asm]   add v13, v10, v12  # live: [v13]
// [Asm]   # save_ctx2  # live: [v13]
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v14, a0  # live: [v14]
// [Asm]   # restore_ctx2  # live: [v14]
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v2, v5, zero, v3], live_out: [v7, v3, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.17_2:
// [Asm] # control
// [Asm]   mv v7, v3  # live: [v3, v2, v5, zero, v7]
// [Asm]   j .main.17_3  # live: [v3, v2, v5, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v7, v2, v5, zero, v3], live_out: [v2, v5, zero, v7, v9, v3]
// [Asm] # block parameters: []
// [Asm] .main.17_5:
// [Asm] # control
// [Asm]   mv v9, v5  # live: [v7, v3, v5, zero, v9, v2]
// [Asm]   j .main.17_6  # live: [v7, v3, v5, zero, v9, v2]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v10, v2], live_out: [v12, v10]
// [Asm] # block parameters: []
// [Asm] .main.17_8:
// [Asm] # control
// [Asm]   mv v12, v2  # live: [v12, v10]
// [Asm]   j .main.17_9  # live: [v12, v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("truncate"), [Double(1.23)]), Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("truncate"), [Double(1.23)]), Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("truncate"), [Double(1.23)])
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("truncate"), [Double(4.56)])
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))])
// [Knf] build_knf: Neg(Double(7.89), kind=Some(Double))
// [Knf] build_knf: Double(7.89)
// [Knf] build_knf: App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int))
// [Knf] build_knf: If(LE(Int(0), Var("z")), Var("x"), Var("y"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Var("y"), Var("z"))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: If(LE(Int(0), Var("y")), Var("z"), Var("x"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.17
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.17
// [Main]   .type main.17, @function
// [Main] # leaf false
// [Main] main.17:
// [Main] .main.17_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4608218246714312622
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a3, fa0, rtz
// [Main]   li a0, 4616820122002590269
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   li a1, 4620569368692376207
// [Main]   fmv.d.x fa0, a1
// [Main]   fneg.d fa0, fa0
// [Main]   fcvt.w.d a2, fa0, rtz
// [Main]   blt a2, zero, .main.17_2
// [Main] 
// [Main] .main.17_1:
// [Main]   mv a4, a3
// [Main] 
// [Main] .main.17_3:
// [Main]   blt zero, a3, .main.17_5
// [Main] 
// [Main] .main.17_4:
// [Main]   mv a1, a0
// [Main] 
// [Main] .main.17_6:
// [Main]   add a1, a4, a1
// [Main]   blt a0, zero, .main.17_8
// [Main] 
// [Main] .main.17_7:
// [Main]   mv a0, a2
// [Main] 
// [Main] .main.17_9:
// [Main]   add a0, a1, a0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main.17_2:
// [Main]   mv a4, a0
// [Main]   j .main.17_3
// [Main] 
// [Main] .main.17_5:
// [Main]   mv a1, a2
// [Main]   j .main.17_6
// [Main] 
// [Main] .main.17_8:
// [Main]   mv a0, a3
// [Main]   j .main.17_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Return(args=[Insn(iref=%9)])
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b3, bpref=$b.0), BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%0), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Branch(cond=Insn(iref=%5), t=b4, t_args=[], f=b5, f_args=[])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Double(val=1.23)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Double(val=4.56)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Neg, args=[Double(val=7.89)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.17 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
