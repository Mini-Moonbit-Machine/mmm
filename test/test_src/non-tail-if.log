// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("truncate"), [Double(1.23)]), Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("truncate"), [Double(1.23)]), Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("truncate"), [Double(1.23)])
// [Knf] build_knf: Double(1.23)
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), App(Var("truncate"), [Double(4.56)]), Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))])))
// [Knf] build_knf: App(Var("truncate"), [Double(4.56)])
// [Knf] build_knf: Double(4.56)
// [Knf] build_knf: Let(("z", Var({val: Some(Int)})), App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))]), App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("truncate"), [Neg(Double(7.89), kind=Some(Double))])
// [Knf] build_knf: Neg(Double(7.89), kind=Some(Double))
// [Knf] build_knf: Double(7.89)
// [Knf] build_knf: App(Var("print_int"), [Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int)), If(LE(Int(0), Var("y")), Var("z"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Prim(If(LE(Int(0), Var("z")), Var("x"), Var("y")), If(LE(Var("x"), Int(0)), Var("y"), Var("z")), Add, kind=Some(Int))
// [Knf] build_knf: If(LE(Int(0), Var("z")), Var("x"), Var("y"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Var("y"), Var("z"))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: If(LE(Int(0), Var("y")), Var("z"), Var("x"))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function main1(k) {
// [Main]     const _2 = 1.23;
// [Main]     const x_3 = minimbt_truncate($force(_2));
// [Main]     const _4 = 4.56;
// [Main]     const y_5 = minimbt_truncate($force(_4));
// [Main]     const _6 = 7.89;
// [Main]     const _7 = -_6;
// [Main]     const z_8 = minimbt_truncate($force(_7));
// [Main]     const _9 = 0;
// [Main]     const _10 = (() => {
// [Main]       if (_9 <= z_8) {
// [Main]         return x_3
// [Main]       } else {
// [Main]         return y_5
// [Main]       }
// [Main]     })();
// [Main]     const _11 = 0;
// [Main]     const _12 = (() => {
// [Main]       if (x_3 <= _11) {
// [Main]         return y_5
// [Main]       } else {
// [Main]         return z_8
// [Main]       }
// [Main]     })();
// [Main]     const _13 = _10 + _12;
// [Main]     const _14 = 0;
// [Main]     const _15 = (() => {
// [Main]       if (_14 <= y_5) {
// [Main]         return z_8
// [Main]       } else {
// [Main]         return x_3
// [Main]       }
// [Main]     })();
// [Main]     const _16 = _13 + _15;
// [Main]     return k(minimbt_print_int($force(_16)))
// [Main]   }
// [Main]   return $thunk(() => main1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
