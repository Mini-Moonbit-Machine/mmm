let rec sum_prefix: (arr: Array[Int], len: Int) -> Array[Int] {
  let res: Var(None) = Array::make(Var("len"), Int(0))
  let rec sum_nested: (acc: Int, x: Int) -> Unit {
    if (LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None))) then {
      let s: Var(None) = Var("acc") + Get(Var("arr"), Var("x"))
      let _: Var(None) = Put Var("res")[Var("x")] = Var("s")
      Apply(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None), ])
    } else {
      Unit
    }
  }
  let _: Var(None) = Apply(Var("sum_nested"), [Int(0), Int(0), ])
  Var(res)
}
let rec main: () -> Var(None) {
  let arr: Var(None) = Array::make(Int(10), Int(4))
  Apply(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0)), ])
}
Unit
