let rec main39: Var({val: Some(Unit)}) = () {
  let _40: Int = Int(1)
  let _41: Int = Int(2)
  let _42: Int = Int(3)
  let _43: Int = Int(4)
  let _44: Int = Int(5)
  let _45: Int = Int(6)
  let _46: Int = Int(7)
  let _47: Int = Int(8)
  let _48: Int = Int(9)
  let _49: Int = Int(10)
  let _50: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_40, _41, _42, _43, _44, _45, _46, _47, _48, _49, ])
  let _51: Int = 
    let (v14.53: Var({val: Some(Int)}), v26.54: Var({val: Some(Int)}), v38.55: Var({val: Some(Int)}), v410.56: Var({val: Some(Int)}), v512.57: Var({val: Some(Int)}), v614.58: Var({val: Some(Int)}), v716.59: Var({val: Some(Int)}), v818.60: Var({val: Some(Int)}), v920.61: Var({val: Some(Int)}), v1022.62: Var({val: Some(Int)})) = _50let rec g24.63: Int = (z25.64: Int) {
      let _65: Int = Add(v14.53, v26.54)
      let _66: Int = Add(_65, v38.55)
      let _67: Int = Add(_66, v410.56)
      let _68: Int = Add(_67, v512.57)
      let _69: Int = Add(_68, v614.58)
      let _70: Int = Add(_69, v716.59)
      let _71: Int = Add(_70, v818.60)
      let _72: Int = Add(_71, v920.61)
      let r.73: Int = Add(_72, v1022.62)
      let _74: Int = Int(0)
      if (z25.64 <= _74) then {
        let _75: Int = Neg(z25.64)
        Apply(g24.63, [_75, ])
      } else {
        Var(r.73)
      }
    }
    let _76: Int = Int(1)
    Apply(g24.63, [_76, ])
  let t1.52: Unit = ExtApply(minimbt_print_int, [_51, ])
  Unit
}
Apply(main39, [])