let rec main.27: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let (v1.67: Var({val: Some(Int)}), v2.68: Var({val: Some(Int)}), v3.69: Var({val: Some(Int)}), v4.70: Var({val: Some(Int)}), v5.71: Var({val: Some(Int)}), v6.72: Var({val: Some(Int)}), v7.73: Var({val: Some(Int)}), v8.74: Var({val: Some(Int)}), v9.75: Var({val: Some(Int)}), v10.76: Var({val: Some(Int)})) = _38
  let rec g.77: Int = (z.78: Int) {
    let join g.79: Int = (z.80: Int) {
      let _81: Int = Add(v1.67, v2.68)
      let _82: Int = Add(_81, v3.69)
      let _83: Int = Add(_82, v4.70)
      let _84: Int = Add(_83, v5.71)
      let _85: Int = Add(_84, v6.72)
      let _86: Int = Add(_85, v7.73)
      let _87: Int = Add(_86, v8.74)
      let _88: Int = Add(_87, v9.75)
      let r.89: Int = Add(_88, v10.76)
      let _90: Int = Int(0)
      if (z.80 <= _90) then {
        let _91: Int = Neg(z.80)
        Jump(g.79, [_91, ])
      } else {
        Var(r.89)
      }
    }
    Jump(g.79, [z.78, ])
  }
  let _92: Int = Int(1)
  let _39: Int = Apply(g.77, [_92, ])
  let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
  Unit
}
Apply(main.27, [])