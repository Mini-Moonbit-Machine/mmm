// [Knf] build_knf: LetRec({name: ("f", Int), args: [("u", Unit)], body: Int(123)}, LetRec({name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Var("x"), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), []))))
// [Knf] build_knf: Int(123)
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("u", Unit)], body: Int(456)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Var("x"), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), [])))
// [Knf] build_knf: Int(456)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Var("x"), Var("x"), Add, kind=Some(Int)))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("f"), [Unit]), App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Var("x"), Var("x"), Add, kind=Some(Int)))]))
// [Knf] build_knf: App(Var("f"), [Unit])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("print_int"), [If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Var("x"), Var("x"), Add, kind=Some(Int)))])
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int)), Prim(Var("x"), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(App(Var("g"), [Unit]), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("g"), [Unit])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("x"), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f1(u2_3, k) {
// [Main]     return k(123)
// [Main]   }
// [Main]   function g4(u5_6, k) {
// [Main]     return k(456)
// [Main]   }
// [Main]   function main7(k) {
// [Main]     const _8 = null;
// [Main]     return $thunk(() => f1(_8, function (x_9) {
// [Main]       const _10 = 0;
// [Main]       const _13 = $force((() => {
// [Main]         if (x_9 <= _10) {
// [Main]           const _11 = null;
// [Main]           return $thunk(() => g4(_11, function (_12) {
// [Main]             return $thunk(() => _12 + x_9)
// [Main]           }
// [Main]           ))
// [Main]         } else {
// [Main]           return x_9 + x_9;
// [Main]         }
// [Main]       })());
// [Main]       return $thunk(() => k(minimbt_print_int($force(_13))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main7(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
