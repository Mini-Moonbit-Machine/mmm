let rec g.42: Int = (z.14: Int, v1.3: Var({val: Some(Int)}), v2.4: Var({val: Some(Int)}), v3.5: Var({val: Some(Int)}), v4.6: Var({val: Some(Int)}), v5.7: Var({val: Some(Int)}), v6.8: Var({val: Some(Int)}), v7.9: Var({val: Some(Int)}), v8.10: Var({val: Some(Int)}), v9.11: Var({val: Some(Int)}), v10.12: Var({val: Some(Int)})) {
  let _15: Int = Add(v1.3, v2.4)
  let _16: Int = Add(_15, v3.5)
  let _17: Int = Add(_16, v4.6)
  let _18: Int = Add(_17, v5.7)
  let _19: Int = Add(_18, v6.8)
  let _20: Int = Add(_19, v7.9)
  let _21: Int = Add(_20, v8.10)
  let _22: Int = Add(_21, v9.11)
  let r.23: Int = Add(_22, v10.12)
  let _24: Int = Int(0)
  if (z.14 <= _24) then {
    let _25: Int = Neg(z.14)
    Apply(g.42, [_25, v1.3, v2.4, v3.5, v4.6, v5.7, v6.8, v7.9, v8.10, v9.11, v10.12, ])
  } else {
    Var(r.23)
  }
}
let rec h.41: Int = (p.2: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])) {
  let (v1.3: Var({val: Some(Int)}), v2.4: Var({val: Some(Int)}), v3.5: Var({val: Some(Int)}), v4.6: Var({val: Some(Int)}), v5.7: Var({val: Some(Int)}), v6.8: Var({val: Some(Int)}), v7.9: Var({val: Some(Int)}), v8.10: Var({val: Some(Int)}), v9.11: Var({val: Some(Int)}), v10.12: Var({val: Some(Int)})) = p.2
  let _26: Int = Int(1)
  Apply(g.42, [_26, v1.3, v2.4, v3.5, v4.6, v5.7, v6.8, v7.9, v8.10, v9.11, v10.12, ])
}
let rec main.43: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let _39: Int = Apply(h.41, [_38, ])
  let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
  Unit
}
Apply(main.43, [])