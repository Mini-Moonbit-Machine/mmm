let rec h1l0: Int = (p2.3: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])) {
  let (, v14.5: Var({val: Some(Int)})v26.7: Var({val: Some(Int)})v38.9: Var({val: Some(Int)})v410.11: Var({val: Some(Int)})v512.13: Var({val: Some(Int)})v614.15: Var({val: Some(Int)})v716.17: Var({val: Some(Int)})v818.19: Var({val: Some(Int)})v920.21: Var({val: Some(Int)})v1022.23: Var({val: Some(Int)})) = p2.3let rec g24: Int = (z25.26: Int) {
    let _27: Int = Add(v14.5, v26.7)
    let _28: Int = Add(_27, v38.9)
    let _29: Int = Add(_28, v410.11)
    let _30: Int = Add(_29, v512.13)
    let _31: Int = Add(_30, v614.15)
    let _32: Int = Add(_31, v716.17)
    let _33: Int = Add(_32, v818.19)
    let _34: Int = Add(_33, v920.21)
    let r.35: Int = Add(_34, v1022.23)
    let _36: Int = Int(0)
    if (z25.26 <= _36) then {
      let _37: Int = Neg(z25.26)
      Apply(g24, [_37, ])
    } else {
      Var(r.35)
    }
  }
  let _38: Int = Int(1)
  Apply(g24, [_38, ])
}
let rec main39l1: Var({val: Some(Unit)}) = () {
  let _40: Int = Int(1)
  let _41: Int = Int(2)
  let _42: Int = Int(3)
  let _43: Int = Int(4)
  let _44: Int = Int(5)
  let _45: Int = Int(6)
  let _46: Int = Int(7)
  let _47: Int = Int(8)
  let _48: Int = Int(9)
  let _49: Int = Int(10)
  let _50: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_40, _41, _42, _43, _44, _45, _46, _47, _48, _49, ])
  let _51: Int = Apply(h1l0, [_50, ])
  let t1.52: Unit = ExtApply(minimbt_print_int, [_51, ])
  Unit
}
Apply(main39l1, [])