let rec g.66: Int = (z.52: Int, v1.41: Var({val: Some(Int)}), v2.42: Var({val: Some(Int)}), v3.43: Var({val: Some(Int)}), v4.44: Var({val: Some(Int)}), v5.45: Var({val: Some(Int)}), v6.46: Var({val: Some(Int)}), v7.47: Var({val: Some(Int)}), v8.48: Var({val: Some(Int)}), v9.49: Var({val: Some(Int)}), v10.50: Var({val: Some(Int)})) {
  let _53: Int = Add(v1.41, v2.42)
  let _54: Int = Add(_53, v3.43)
  let _55: Int = Add(_54, v4.44)
  let _56: Int = Add(_55, v5.45)
  let _57: Int = Add(_56, v6.46)
  let _58: Int = Add(_57, v7.47)
  let _59: Int = Add(_58, v8.48)
  let _60: Int = Add(_59, v9.49)
  let r.61: Int = Add(_60, v10.50)
  let _62: Int = Int(0)
  if (z.52 <= _62) then {
    let _63: Int = Neg(z.52)
    Apply(g.66, [_63, v1.41, v2.42, v3.43, v4.44, v5.45, v6.46, v7.47, v8.48, v9.49, v10.50, ])
  } else {
    Var(r.61)
  }
}
let rec main.65: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let (v1.41: Var({val: Some(Int)}), v2.42: Var({val: Some(Int)}), v3.43: Var({val: Some(Int)}), v4.44: Var({val: Some(Int)}), v5.45: Var({val: Some(Int)}), v6.46: Var({val: Some(Int)}), v7.47: Var({val: Some(Int)}), v8.48: Var({val: Some(Int)}), v9.49: Var({val: Some(Int)}), v10.50: Var({val: Some(Int)})) = _38
  let _64: Int = Int(1)
  let _39: Int = Apply(g.66, [_64, v1.41, v2.42, v3.43, v4.44, v5.45, v6.46, v7.47, v8.48, v9.49, v10.50, ])
  let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
  Unit
}
Apply(main.65, [])