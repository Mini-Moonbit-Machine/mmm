let rec f1l0: Int = () {
  Int(12345)
}
let rec g2l1: Int = (y3.4: Int) {
  let _5: Int = Int(1)
  Add(y3.4, _5)
}
let rec main6l2: Var({val: Some(Unit)}) = () {
  let _7: Int = Int(10)
  let _8: Int = Int(1)
  let z.9: Array(Int) = ExtApply(minimbt_create_array, [_7, _8, ])
  let x.10: Int = Apply(f1l0, [])
  let y.11: Int = Int(67890)
  let _12: Int = Int(0)
  let z0.13: Int = Get z.9[_12]
  let z1.14: Int = Add(z0.13, z0.13)
  let z2.15: Int = Add(z1.14, z1.14)
  let z3.16: Int = Add(z2.15, z2.15)
  let z4.17: Int = Add(z3.16, z3.16)
  let z5.18: Int = Add(z4.17, z4.17)
  let z6.19: Int = Add(z5.18, z5.18)
  let z7.20: Int = Add(z6.19, z6.19)
  let z8.21: Int = Add(z7.20, z7.20)
  let z9.22: Int = Add(z8.21, z8.21)
  let z10.23: Int = Add(z9.22, z9.22)
  let z11.24: Int = Add(z10.23, z10.23)
  let z12.25: Int = Add(z11.24, z11.24)
  let z13.26: Int = Add(z12.25, z12.25)
  let z14.27: Int = Add(z13.26, z13.26)
  let z15.28: Int = Add(z14.27, z14.27)
  let _29: Int = Int(1)
  let _30: Int = Get z.9[_29]
  let _31: Int = Int(0)
  let _47: Int = if (_30 == _31) then {
    Apply(g2l1, [y.11, ])
  } else {
    let _32: Int = Add(z0.13, z1.14)
    let _33: Int = Add(_32, z2.15)
    let _34: Int = Add(_33, z3.16)
    let _35: Int = Add(_34, z4.17)
    let _36: Int = Add(_35, z5.18)
    let _37: Int = Add(_36, z6.19)
    let _38: Int = Add(_37, z7.20)
    let _39: Int = Add(_38, z8.21)
    let _40: Int = Add(_39, z9.22)
    let _41: Int = Add(_40, z10.23)
    let _42: Int = Add(_41, z11.24)
    let _43: Int = Add(_42, z12.25)
    let _44: Int = Add(_43, z13.26)
    let _45: Int = Add(_44, z14.27)
    let _46: Int = Add(_45, z15.28)
    Add(_46, x.10)
  }
  ExtApply(minimbt_print_int, [_47, ])
}
Apply(main6l2, [])