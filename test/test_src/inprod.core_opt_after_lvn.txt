# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.102 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (double, double, double) heap(3)> <- [0] = 1, [1] = 2, [2] = 3
    let _ = alloc <m1: (double, double, double) heap(3)> <- [0] = 4, [1] = 5, [2] = 6
    let %2: double = load double field(f0.m0, 0 * @(@64, @(@64, @(@64, @32))))
    let %3: double = load double field(f0.m0, 1 * @(@64, @(@64, @(@64, @32))))
    let %4: double = load double field(f0.m0, 2 * @(@64, @(@64, @(@64, @32))))
    let %5: double = load double field(f0.m1, 0 * @(@64, @(@64, @(@64, @32))))
    let %6: double = load double field(f0.m1, 1 * @(@64, @(@64, @(@64, @32))))
    let %7: double = load double field(f0.m1, 2 * @(@64, @(@64, @(@64, @32))))
    let %8: double = mul(%2, %5)
    let %15: double = mul(%3, %6)
    let %16: double = add(%8, %15)
    let %23: double = mul(%4, %7)
    let %24: double = add(%16, %23)
    let %25: double = mul(1000000, %24)
    let %26: int32 = conv.d2i.rtz(%25)
    let %27: unit = ext_call minimbt_print_int(%26)
    return %27
  }
}
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.thunk ::0 start

