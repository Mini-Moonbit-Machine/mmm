let rec mandelbrot.1: Unit = (w.2: Int) {
  let rec yloop.5: Unit = (y.6: Int) {
    let join yloop.142: Unit = (y.143: Int) {
      if (w.2 <= y.143) then {
        Unit
      } else {
        let rec xloop.144: Unit = (x.145: Int, y.146: Int) {
          let join xloop.147: Unit = (x.148: Int, y.149: Int) {
            if (w.2 <= x.148) then {
              let _150: Unit = ExtApply(minimbt_print_endline, [])
              Unit
            } else {
              let _151: Double = ExtApply(minimbt_float_of_int, [x.148, ])
              let _152: Double = FAdd(_151, _151)
              let _153: Double = ExtApply(minimbt_float_of_int, [w.2, ])
              let _154: Double = FDiv(_152, _153)
              let _155: Double = Double(1.5)
              let cr.156: Double = FSub(_154, _155)
              let _157: Double = ExtApply(minimbt_float_of_int, [y.149, ])
              let _158: Double = FAdd(_157, _157)
              let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
              let _160: Double = FDiv(_158, _159)
              let _161: Double = Double(1)
              let ci.162: Double = FSub(_160, _161)
              let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
                let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
                  let _179: Int = Int(0)
                  if (i.172 == _179) then {
                    let _180: Int = Int(1)
                    ExtApply(minimbt_print_int, [_180, ])
                  } else {
                    let _181: Double = FSub(zr2.175, zi2.176)
                    let tr.182: Double = FAdd(_181, cr.177)
                    let _183: Double = FAdd(zr.173, zr.173)
                    let _184: Double = FMul(_183, zi.174)
                    let ti.185: Double = FAdd(_184, ci.178)
                    let zr2.186: Double = FMul(tr.182, tr.182)
                    let zi2.187: Double = FMul(ti.185, ti.185)
                    let _188: Double = Double(2)
                    let _189: Double = Double(2)
                    let _190: Double = FMul(_188, _189)
                    let _191: Double = FAdd(zr2.186, zi2.187)
                    if (_190 <= _191) then {
                      let _192: Int = Int(0)
                      ExtApply(minimbt_print_int, [_192, ])
                    } else {
                      let _193: Int = Int(1)
                      let _194: Int = Sub(i.172, _193)
                      Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
                    }
                  }
                }
                Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
              }
              let _195: Int = Int(1000)
              let _196: Double = Double(0)
              let _197: Double = Double(0)
              let _198: Double = Double(0)
              let _199: Double = Double(0)
              let _200: Unit = Apply(iloop.163, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
              let _201: Int = Int(1)
              let _202: Int = Add(x.148, _201)
              Jump(xloop.147, [_202, y.149, ])
            }
          }
          Jump(xloop.147, [x.145, y.146, ])
        }
        let _203: Int = Int(0)
        let _204: Unit = Apply(xloop.144, [_203, y.143, ])
        let _205: Int = Int(1)
        let _206: Int = Add(y.143, _205)
        Jump(yloop.142, [_206, ])
      }
    }
    Jump(yloop.142, [y.6, ])
  }
  let _59: Int = Int(0)
  Apply(yloop.5, [_59, ])
}
let rec main.60: Var({val: Some(Unit)}) = () {
  let _61: Int = Int(40)
  Apply(mandelbrot.1, [_61, ])
}
Apply(main.60, [])let rec mandelbrot.1: Unit = (w.2: Int) {
  let rec yloop.5: Unit = (y.6: Int) {
    let join yloop.142: Unit = (y.143: Int) {
      if (w.2 <= y.143) then {
        Unit
      } else {
        let rec xloop.144: Unit = (x.145: Int, y.146: Int) {
          let join xloop.147: Unit = (x.148: Int, y.149: Int) {
            if (w.2 <= x.148) then {
              let _150: Unit = ExtApply(minimbt_print_endline, [])
              Unit
            } else {
              let _151: Double = ExtApply(minimbt_float_of_int, [x.148, ])
              let _152: Double = FAdd(_151, _151)
              let _153: Double = ExtApply(minimbt_float_of_int, [w.2, ])
              let _154: Double = FDiv(_152, _153)
              let _155: Double = Double(1.5)
              let cr.156: Double = FSub(_154, _155)
              let _157: Double = ExtApply(minimbt_float_of_int, [y.149, ])
              let _158: Double = FAdd(_157, _157)
              let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
              let _160: Double = FDiv(_158, _159)
              let _161: Double = Double(1)
              let ci.162: Double = FSub(_160, _161)
              let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
                let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
                  let _179: Int = Int(0)
                  if (i.172 == _179) then {
                    let _180: Int = Int(1)
                    ExtApply(minimbt_print_int, [_180, ])
                  } else {
                    let _181: Double = FSub(zr2.175, zi2.176)
                    let tr.182: Double = FAdd(_181, cr.177)
                    let _183: Double = FAdd(zr.173, zr.173)
                    let _184: Double = FMul(_183, zi.174)
                    let ti.185: Double = FAdd(_184, ci.178)
                    let zr2.186: Double = FMul(tr.182, tr.182)
                    let zi2.187: Double = FMul(ti.185, ti.185)
                    let _188: Double = Double(2)
                    let _189: Double = Double(2)
                    let _190: Double = FMul(_188, _189)
                    let _191: Double = FAdd(zr2.186, zi2.187)
                    if (_190 <= _191) then {
                      let _192: Int = Int(0)
                      ExtApply(minimbt_print_int, [_192, ])
                    } else {
                      let _193: Int = Int(1)
                      let _194: Int = Sub(i.172, _193)
                      Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
                    }
                  }
                }
                Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
              }
              let _195: Int = Int(1000)
              let _196: Double = Double(0)
              let _197: Double = Double(0)
              let _198: Double = Double(0)
              let _199: Double = Double(0)
              let _200: Unit = Apply(iloop.163, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
              let _201: Int = Int(1)
              let _202: Int = Add(x.148, _201)
              Jump(xloop.147, [_202, y.149, ])
            }
          }
          Jump(xloop.147, [x.145, y.146, ])
        }
        let _203: Int = Int(0)
        let _204: Unit = Apply(xloop.144, [_203, y.143, ])
        let _205: Int = Int(1)
        let _206: Int = Add(y.143, _205)
        Jump(yloop.142, [_206, ])
      }
    }
    Jump(yloop.142, [y.6, ])
  }
  let _59: Int = Int(0)
  Apply(yloop.5, [_59, ])
}
let rec main.60: Var({val: Some(Unit)}) = () {
  let _61: Int = Int(40)
  Apply(mandelbrot.1, [_61, ])
}
Apply(main.60, [])