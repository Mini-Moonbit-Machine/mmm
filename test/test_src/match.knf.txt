let rec id.1: Named("X") = (x.3: Named("X")) {
  Var(x.3)
}
let _4: Int = Int(2)
let y.5: Named("X") = Apply(id.1, [_4, ])
let _6: Double = Double(2.1)
let z.7: Named("X") = Apply(id.1, [_6, ])
let _8: Int = Int(0)
let _9: Tuple([]) = Tuple([])
let p.10: Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])]) = Tuple([_8, _9, ])
let _11: Int = Int(1)
let _12: Int = Int(0)
let _13: Tuple([]) = Tuple([])
let _14: Enum("Option", [("None", []), ("Some", [Int])]) = Tuple([_12, _13, ])
let _15: Int = Int(0)
let _16: Tuple([]) = Tuple([])
let _17: Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])]) = Tuple([_15, _16, ])
let _18: Tuple([Enum("Option", [("None", []), ("Some", [Int])]), Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])])]) = Tuple([_14, _17, ])
let q.19: Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])]) = Tuple([_11, _18, ])
let _20: Int = Int(1)
let _21: Int = Int(1)
let _22: Int = Int(1)
let _23: Tuple([Int]) = Tuple([_22, ])
let _24: Enum("Option", [("None", []), ("Some", [Int])]) = Tuple([_21, _23, ])
let _25: Int = Int(0)
let _26: Tuple([]) = Tuple([])
let _27: Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])]) = Tuple([_25, _26, ])
let _28: Tuple([Enum("Option", [("None", []), ("Some", [Int])]), Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])])]) = Tuple([_24, _27, ])
let r.29: Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])]) = Tuple([_20, _28, ])
let _30: Int = Int(2)
let _31: Int = Int(1)
let _36: Enum("List", [("Nil", []), ("Cons", [Named("Option"), Named("List")])]) = if (_30 == _31) then {
  let _32: Int = Int(0)
  let _33: Tuple([]) = Tuple([])
  Tuple([_32, _33, ])
} else {
  let _34: Int = Int(2)
  if (_30 == _34) then {
    Var(q.19)
  } else {
    Unit
  }
}
let _37: Int = Int(0)
let (_38: Int, _39: Tuple([])) = r.29
let t.56: Int = if (_38 == _37) then {
  let () = _39
  Int(0)
} else {
  let _40: Int = Int(1)
  let (_41: Int, _42: Tuple([Named("Option"), Named("List")])) = r.29
  if (_41 == _40) then {
    let (_43: Named("Option"), _44: Named("List")) = _42
    let _45: Int = Int(0)
    let (_46: Int, _47: Tuple([])) = _44
    if (_46 == _45) then {
      let () = _47
      let _48: Int = Int(0)
      let (_49: Int, _50: Tuple([])) = _43
      if (_49 == _48) then {
        let () = _50
        Int(1)
      } else {
        let _51: Int = Int(1)
        let (_52: Int, _53: Tuple([Int])) = _43
        if (_52 == _51) then {
          let (_54: Int) = _53
          let _55: Int = Int(2)
          if (_54 == _55) then {
            Int(2)
          } else {
            Int(3)
          }
        } else {
          Int(3)
        }
      }
    } else {
      Int(3)
    }
  } else {
    Int(3)
  }
}
let _57: Int = Int(0)
let (_58: Int, _59: Tuple([])) = r.29
let w.69: Int = if (_58 == _57) then {
  let () = _59
  Int(0)
} else {
  let _60: Int = Int(1)
  let (_61: Int, _62: Tuple([Named("Option"), Named("List")])) = r.29
  if (_61 == _60) then {
    let (_63: Named("Option"), _64: Named("List")) = _62
    let _65: Int = Int(1)
    let (_66: Int, _67: Tuple([Int])) = _63
    if (_66 == _65) then {
      let (_68: Int) = _67
      Var(_68)
    } else {
      Int(3)
    }
  } else {
    Int(3)
  }
}
let rec main.70: Var({val: Some(Unit)}) = () {
  let _71: Int = Add(t.56, w.69)
  let _73: Unit = ExtApply(minimbt_print_int, [_71, ])
  Unit
}
Apply(main.70, [])
