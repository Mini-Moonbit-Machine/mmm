let rec main.1: Unit = () {
  let _2: Int = Int(0)
  let _3: () = Tuple([])
  let p.4: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) } = Tuple([_2, _3, ])
  let _5: Int = Int(1)
  let _6: Int = Int(0)
  let _7: () = Tuple([])
  let _8: Enum IntOpt { None(), Some(Int) } = Tuple([_6, _7, ])
  let _9: Int = Int(0)
  let _10: () = Tuple([])
  let _11: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) } = Tuple([_9, _10, ])
  let _12: (Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(~0, ~1) }) }) = Tuple([_8, _11, ])
  let q.13: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) } = Tuple([_5, _12, ])
  let _14: Int = Int(1)
  let _15: Int = Int(1)
  let _16: Int = Int(1)
  let _17: (Int) = Tuple([_16, ])
  let _18: Enum IntOpt { None(), Some(Int) } = Tuple([_15, _17, ])
  let _19: Int = Int(0)
  let _20: () = Tuple([])
  let _21: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) } = Tuple([_19, _20, ])
  let _22: (Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(~0, ~1) }) }) = Tuple([_18, _21, ])
  let r.23: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) } = Tuple([_14, _22, ])
  let _24: Int = Int(2)
  let _25: Int = Int(1)
  let _30: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) } = if (_24 == _25) then {
    let _26: Int = Int(0)
    let _27: () = Tuple([])
    Tuple([_26, _27, ])
  } else {
    let _28: Int = Int(2)
    if (_24 == _28) then {
      Var(q.13)
    } else {
      ExtApply(minimbt_panic, [])
    }
  }
  let _31: Int = Int(0)
  let (_32: Int, _33: ()) = r.23
  let t.50: Int = if (_32 == _31) then {
    let () = _33
    Int(0)
  } else {
    let _34: Int = Int(1)
    let (_35: Int, _36: (Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(~0, ~1) }) })) = r.23
    if (_35 == _34) then {
      let (_37: Enum IntOpt { None(), Some(Int) }, _38: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) }) = _36
      let _39: Int = Int(0)
      let (_40: Int, _41: ()) = _38
      if (_40 == _39) then {
        let () = _41
        let _42: Int = Int(0)
        let (_43: Int, _44: ()) = _37
        if (_43 == _42) then {
          let () = _44
          Int(1)
        } else {
          let _45: Int = Int(1)
          let (_46: Int, _47: (Int)) = _37
          if (_46 == _45) then {
            let (_48: Int) = _47
            let _49: Int = Int(2)
            if (_48 == _49) then {
              Int(2)
            } else {
              Int(3)
            }
          } else {
            Int(3)
          }
        }
      } else {
        Int(3)
      }
    } else {
      Int(3)
    }
  }
  let _51: Int = Int(0)
  let (_52: Int, _53: ()) = r.23
  let w.63: Int = if (_52 == _51) then {
    let () = _53
    Int(0)
  } else {
    let _54: Int = Int(1)
    let (_55: Int, _56: (Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, Enum IntOptList { Nil(), Cons(~0, ~1) }) })) = r.23
    if (_55 == _54) then {
      let (_57: Enum IntOpt { None(), Some(Int) }, _58: Enum IntOptList { Nil(), Cons(Enum IntOpt { None(), Some(Int) }, ~0) }) = _56
      let _59: Int = Int(1)
      let (_60: Int, _61: (Int)) = _57
      if (_60 == _59) then {
        let (_62: Int) = _61
        Var(_62)
      } else {
        Int(3)
      }
    } else {
      Int(3)
    }
  }
  let _64: Int = Add(t.50, w.63)
  let _66: Unit = ExtApply(minimbt_print_int, [_64, ])
  Unit
}
Apply(main.1, [])
