# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f9.53 #f1 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq(true, true)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: bool = eq(true, true)
    br %1 b3() b4()
  }
  .bb #b2 () {
    jump b24($f0)
  }
  .bb #b3 () {
    let %2: bool = eq(true, true)
    br %2 b5() b6()
  }
  .bb #b4 () {
    jump b23(1)
  }
  .bb #b5 () {
    let %3: bool = eq(true, true)
    br %3 b7() b8()
  }
  .bb #b6 () {
    jump b22(1)
  }
  .bb #b7 () {
    let %4: bool = eq(true, true)
    br %4 b9() b10()
  }
  .bb #b8 () {
    jump b21(1)
  }
  .bb #b9 () {
    let %5: bool = eq(true, true)
    br %5 b11() b12()
  }
  .bb #b10 () {
    jump b20(1)
  }
  .bb #b11 () {
    let %6: bool = eq(true, true)
    br %6 b13() b14()
  }
  .bb #b12 () {
    jump b19(1)
  }
  .bb #b13 () {
    let %7: bool = eq(true, true)
    br %7 b15() b16()
  }
  .bb #b14 () {
    jump b18(1)
  }
  .bb #b15 () {
    let %8: int32 = call f1(1)
    jump b17(%8)
  }
  .bb #b16 () {
    let %9: int32 = call f0(2)
    jump b17(%9)
  }
  .bb #b17 (int32) {
    jump b18($b17.0)
  }
  .bb #b18 (int32) {
    jump b19($b18.0)
  }
  .bb #b19 (int32) {
    jump b20($b19.0)
  }
  .bb #b20 (int32) {
    jump b21($b20.0)
  }
  .bb #b21 (int32) {
    jump b22($b21.0)
  }
  .bb #b22 (int32) {
    jump b23($b22.0)
  }
  .bb #b23 (int32) {
    jump b24($b23.0)
  }
  .bb #b24 (int32) {
    return $b24.0
  }
}
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn main19.55 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    return ()
  }
}
.fn g12.54 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.thunk ::0 start

