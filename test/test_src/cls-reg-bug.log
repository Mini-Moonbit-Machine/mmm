// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.43 ->   call main.43
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b0, bpref=$b.7) -> v20, BlockParam(bref=b0, bpref=$b.10) -> v23, FnParam(fref=f0, fpref=$f.9) -> v11, BlockParam(bref=b0, bpref=$b.9) -> v22, FnParam(fref=f0, fpref=$f.5) -> v7, BlockParam(bref=b0, bpref=$b.5) -> v18, Insn(iref=%8) -> v32, FnParam(fref=f0, fpref=$f.7) -> v9, Insn(iref=%10) -> v35, BlockParam(bref=b0, bpref=$b.4) -> v17, BlockParam(bref=b0, bpref=$b.3) -> v16, FnParam(fref=f0, fpref=$f.10) -> v12, Insn(iref=%4) -> v28, Insn(iref=%1) -> v25, BlockParam(bref=b0, bpref=$b.8) -> v21, BlockParam(bref=b0, bpref=$b.6) -> v19, Insn(iref=%6) -> v30, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v34, Insn(iref=%9) -> v33, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v13, BlockParam(bref=b0, bpref=$b.1) -> v14, BlockParam(bref=b0, bpref=$b.2) -> v15, FnParam(fref=f0, fpref=$f.0) -> v2, FnParam(fref=f0, fpref=$f.6) -> v8, Insn(iref=%5) -> v29, Insn(iref=%0) -> v24, Insn(iref=%3) -> v27, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> v31, Insn(iref=%2) -> v26, FnParam(fref=f0, fpref=$f.4) -> v6, FnParam(fref=f0, fpref=$f.8) -> v10
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v34]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: [v32]
// [Asm] defined: v34 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v14, v16, v21, v13, v22, v17, v24, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v14, v16, v21, v13, v22, v17, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v14, v16, v21, v13, v26, v22, v17, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v14, v16, v21, v13, v22, v17, v18, zero, v20, v23, v27, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v14, v16, v21, v13, v22, v17, v28, v18, zero, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v14, v16, v21, v13, v22, v17, v18, zero, v29, v20, v23, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v14, v16, v21, v13, v22, v30, v17, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v14, v16, v21, v13, v22, v17, v31, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v14, v16, v21, v13, v22, v32, v17, v18, zero, v23, v20, v19, v15]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v21, v18, v13, zero, v22, v23, v20, v19, v32, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a7, t0, t1, a5, zero, a0, a4, a6, a2, t2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a7, t0, t1, a5, zero, a4, a6, a2, t2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a7, t0, t1, a5, zero, a4, a6, a2, t2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a7, t0, t1, a5, zero, a4, a6, v4, t2, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, a7, t0, t1, v5, a5, zero, a4, a6, v4, t2, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, a7, t0, t1, v5, a5, zero, a6, v4, v6, t2, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, a7, t0, t1, v5, zero, v7, a6, v4, v6, t2, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, a7, t0, t1, v5, zero, v8, v7, v4, v6, t2, v3]
// [Asm] move_origin: [a6]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, t1, t0, v5, zero, v8, v7, v4, v6, t2, v9, v3]
// [Asm] move_origin: [a7]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, t1, v5, v10, zero, v8, v7, v4, v6, t2, v9, v3]
// [Asm] move_origin: [t0]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, zero, v8, v7, v4, v6, t2, v9, v3]
// [Asm] move_origin: [t1]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v5, v10, zero, v8, v7, v4, v6, v12, v9, v3]
// [Asm] move_origin: [t2]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, zero, v13, v8, v7, v4, v6, v12, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v5, v10, zero, v13, v8, v7, v4, v6, v12, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v14, v5, v10, zero, v13, v8, v7, v6, v15, v12, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v14, v16, v10, zero, v13, v8, v7, v6, v15, v12, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v14, v16, v10, zero, v13, v8, v7, v17, v15, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v14, v16, v18, v10, zero, v13, v8, v17, v15, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v14, v16, v18, v10, zero, v13, v19, v17, v15, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v14, v16, v18, v10, zero, v13, v20, v19, v17, v15, v12]
// [Asm] move_origin: [v9]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v14, v16, v18, v21, v13, zero, v20, v19, v17, v15, v12]
// [Asm] move_origin: [v10]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v20, v19, v17, v15, v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v12]
// [Asm] defined: v23 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v14, v16, v18, v21, zero, v22, v23, v20, v35, v19, v17, v15]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v35]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v15]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v16]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v18]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v19]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v22]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: [v23]
// [Asm] defs: []
// [Asm] live_set: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g.42"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v7 ← s1", color=green];
// [Asm]   r33 [label="a3", color=blue];
// [Asm]   r9 [label="v18 ← a7", color=green];
// [Asm]   r26 [label="t1", color=blue];
// [Asm]   r6 [label="v13 ← a4", color=green];
// [Asm]   r44 [label="v35 ← a0", color=green];
// [Asm]   r13 [label="v19 ← t2", color=green];
// [Asm]   r42 [label="v11 ← a5", color=green];
// [Asm]   r4 [label="v16 ← a2", color=green];
// [Asm]   r29 [label="a6", color=blue];
// [Asm]   r35 [label="v4 ← t3", color=green];
// [Asm]   r7 [label="v22 ← a5", color=green];
// [Asm]   r10 [label="zero", color=blue];
// [Asm]   r8 [label="v17 ← a6", color=green];
// [Asm]   r5 [label="v21 ← a3", color=green];
// [Asm]   r36 [label="v5 ← a2", color=green];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r15 [label="v25 ← a0", color=green];
// [Asm]   r32 [label="a1", color=blue];
// [Asm]   r43 [label="v12 ← a0", color=green];
// [Asm]   r31 [label="t2", color=blue];
// [Asm]   r39 [label="v8 ← s0", color=green];
// [Asm]   r17 [label="v27 ← a0", color=green];
// [Asm]   r12 [label="v23 ← t1", color=green];
// [Asm]   r37 [label="v6 ← s2", color=green];
// [Asm]   r20 [label="v30 ← a0", color=green];
// [Asm]   r23 [label="v2 ← s3", color=green];
// [Asm]   r3 [label="v14 ← a1", color=green];
// [Asm]   r27 [label="a5", color=blue];
// [Asm]   r40 [label="v9 ← t4", color=green];
// [Asm]   r1 [label="v34 ← a0", color=green];
// [Asm]   r28 [label="a4", color=blue];
// [Asm]   r41 [label="v10 ← a3", color=green];
// [Asm]   r11 [label="v20 ← t0", color=green];
// [Asm]   r34 [label="v3 ← a1", color=green];
// [Asm]   r22 [label="v32 ← a0", color=green];
// [Asm]   r14 [label="v15 ← t3", color=green];
// [Asm]   r30 [label="a2", color=blue];
// [Asm]   r25 [label="t0", color=blue];
// [Asm]   r2 [label="v24 ← a0", color=green];
// [Asm]   r16 [label="v26 ← a0", color=green];
// [Asm]   r18 [label="v28 ← a0", color=green];
// [Asm]   r19 [label="v29 ← a0", color=green];
// [Asm]   r21 [label="v31 ← a0", color=green];
// [Asm]   r37 -- r39;
// [Asm]   r23 -- r36;
// [Asm]   r5 -- r21;
// [Asm]   r26 -- r39;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r35;
// [Asm]   r14 -- r43;
// [Asm]   r3 -- r16;
// [Asm]   r39 -- r41;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r34 -- r40;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r27 -- r36;
// [Asm]   r5 -- r22;
// [Asm]   r38 -- r42;
// [Asm]   r35 -- r42;
// [Asm]   r5 -- r18;
// [Asm]   r4 -- r44;
// [Asm]   r14 -- r40;
// [Asm]   r23 -- r35;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r27 -- r34;
// [Asm]   r10 -- r40;
// [Asm]   r30 -- r34;
// [Asm]   r34 -- r42;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r31 -- r35;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r38;
// [Asm]   r11 -- r13;
// [Asm]   r3 -- r39;
// [Asm]   r10 -- r18;
// [Asm]   r10 -- r12;
// [Asm]   r35 -- r38;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r13 -- r41;
// [Asm]   r10 -- r22;
// [Asm]   r41 -- r42;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r10 -- r42;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r11 -- r43;
// [Asm]   r39 -- r40;
// [Asm]   r35 -- r37;
// [Asm]   r11 -- r15;
// [Asm]   r14 -- r36;
// [Asm]   r27 -- r35;
// [Asm]   r3 -- r35;
// [Asm]   r25 -- r37;
// [Asm]   r12 -- r21;
// [Asm]   r23 -- r37;
// [Asm]   r4 -- r14;
// [Asm]   r9 -- r39;
// [Asm]   r14 -- r37;
// [Asm]   r14 -- r15;
// [Asm]   r14 -- r44;
// [Asm]   r40 -- r42;
// [Asm]   r23 -- r29;
// [Asm]   r26 -- r34;
// [Asm]   r4 -- r13;
// [Asm]   r26 -- r38;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r44;
// [Asm]   r36 -- r40;
// [Asm]   r13 -- r15;
// [Asm]   r34 -- r41;
// [Asm]   r11 -- r20;
// [Asm]   r34 -- r35;
// [Asm]   r37 -- r43;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r3 -- r38;
// [Asm]   r9 -- r40;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r31 -- r41;
// [Asm]   r14 -- r41;
// [Asm]   r11 -- r22;
// [Asm]   r34 -- r39;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r31 -- r42;
// [Asm]   r28 -- r36;
// [Asm]   r8 -- r20;
// [Asm]   r23 -- r39;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r35 -- r41;
// [Asm]   r6 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r34 -- r38;
// [Asm]   r7 -- r17;
// [Asm]   r23 -- r26;
// [Asm]   r8 -- r41;
// [Asm]   r6 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r7 -- r22;
// [Asm]   r31 -- r40;
// [Asm]   r9 -- r11;
// [Asm]   r35 -- r43;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r31 -- r37;
// [Asm]   r38 -- r41;
// [Asm]   r2 -- r14;
// [Asm]   r10 -- r43;
// [Asm]   r25 -- r35;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r23 -- r30;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r38 -- r40;
// [Asm]   r14 -- r21;
// [Asm]   r24 -- r34;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r25 -- r34;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r11 -- r41;
// [Asm]   r3 -- r20;
// [Asm]   r23 -- r42;
// [Asm]   r13 -- r17;
// [Asm]   r41 -- r43;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r23 -- r40;
// [Asm]   r10 -- r36;
// [Asm]   r12 -- r16;
// [Asm]   r7 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r9 -- r21;
// [Asm]   r28 -- r34;
// [Asm]   r5 -- r12;
// [Asm]   r36 -- r38;
// [Asm]   r6 -- r21;
// [Asm]   r11 -- r44;
// [Asm]   r24 -- r39;
// [Asm]   r38 -- r43;
// [Asm]   r4 -- r38;
// [Asm]   r23 -- r31;
// [Asm]   r14 -- r20;
// [Asm]   r4 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r13 -- r44;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r38;
// [Asm]   r26 -- r40;
// [Asm]   r3 -- r43;
// [Asm]   r5 -- r8;
// [Asm]   r37 -- r38;
// [Asm]   r34 -- r43;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r31 -- r36;
// [Asm]   r39 -- r42;
// [Asm]   r5 -- r42;
// [Asm]   r42 -- r43;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r42;
// [Asm]   r9 -- r41;
// [Asm]   r14 -- r39;
// [Asm]   r29 -- r36;
// [Asm]   r31 -- r39;
// [Asm]   r12 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r37 -- r40;
// [Asm]   r37 -- r42;
// [Asm]   r13 -- r40;
// [Asm]   r4 -- r21;
// [Asm]   r29 -- r38;
// [Asm]   r35 -- r39;
// [Asm]   r6 -- r13;
// [Asm]   r26 -- r41;
// [Asm]   r25 -- r39;
// [Asm]   r14 -- r19;
// [Asm]   r12 -- r44;
// [Asm]   r10 -- r20;
// [Asm]   r25 -- r38;
// [Asm]   r10 -- r37;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r24 -- r36;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r13 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r23 -- r32;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r23 -- r41;
// [Asm]   r36 -- r42;
// [Asm]   r4 -- r12;
// [Asm]   r40 -- r43;
// [Asm]   r8 -- r44;
// [Asm]   r8 -- r39;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r23 -- r38;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r31 -- r34;
// [Asm]   r8 -- r14;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r37;
// [Asm]   r10 -- r35;
// [Asm]   r14 -- r22;
// [Asm]   r36 -- r41;
// [Asm]   r4 -- r9;
// [Asm]   r27 -- r37;
// [Asm]   r29 -- r35;
// [Asm]   r36 -- r37;
// [Asm]   r10 -- r17;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r23 -- r33;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r25 -- r36;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r13 -- r42;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r9 -- r15;
// [Asm]   r36 -- r39;
// [Asm]   r6 -- r14;
// [Asm]   r8 -- r19;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r42;
// [Asm]   r26 -- r36;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r39 -- r43;
// [Asm]   r8 -- r43;
// [Asm]   r23 -- r34;
// [Asm]   r9 -- r42;
// [Asm]   r4 -- r20;
// [Asm]   r5 -- r44;
// [Asm]   r31 -- r38;
// [Asm]   r6 -- r16;
// [Asm]   r8 -- r38;
// [Asm]   r10 -- r41;
// [Asm]   r23 -- r27;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r24 -- r38;
// [Asm]   r13 -- r20;
// [Asm]   r9 -- r44;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r11 -- r42;
// [Asm]   r26 -- r35;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r8 -- r13;
// [Asm]   r34 -- r37;
// [Asm]   r29 -- r37;
// [Asm]   r8 -- r40;
// [Asm]   r23 -- r28;
// [Asm]   r9 -- r43;
// [Asm]   r10 -- r44;
// [Asm]   r34 -- r36;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r39;
// [Asm]   r24 -- r35;
// [Asm]   r7 -- r11;
// [Asm]   r28 -- r35;
// [Asm]   r3 -- r41;
// [Asm]   r35 -- r40;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r43;
// [Asm]   r29 -- r34;
// [Asm]   r40 -- r41;
// [Asm]   r36 -- r43;
// [Asm]   r9 -- r16;
// [Asm]   r26 -- r37;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r23 -- r43;
// [Asm]   r4 -- r17;
// [Asm]   r38 -- r39;
// [Asm]   r5 -- r43;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r25 -- r40;
// [Asm]   r37 -- r41;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r3 -- r44;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:a0-> 1:v34-> 2:v24-> 3:v14-> 4:v16-> 5:v21-> 6:v13-> 7:v22-> 8:v17-> 9:v18-> 10:zero-> 11:v20-> 12:v23-> 13:v19-> 14:v15-> 15:v25-> 16:v26-> 17:v27-> 18:v28-> 19:v29-> 20:v30-> 21:v31-> 22:v32-> 43:v12-> 42:v11-> 41:v10-> 40:v9-> 39:v8-> 38:v7-> 37:v6-> 36:v5-> 35:v4-> 34:v3-> 23:v2-> 44:v35-> 31:t2-> 26:t1-> 25:t0-> 24:a7-> 29:a6-> 27:a5-> 28:a4-> 33:a3-> 30:a2-> 32:a1"
// [Asm]   comment = "v7<-s1;v18<-a7;v13<-a4;v35<-a0;v19<-t2;v11<-a5;v16<-a2;v4<-t3;v22<-a5;v17<-a6;v21<-a3;v5<-a2;v25<-a0;v12<-a0;v8<-s0;v27<-a0;v23<-t1;v6<-s2;v30<-a0;v2<-s3;v14<-a1;v9<-t4;v34<-a0;v10<-a3;v20<-t0;v3<-a1;v32<-a0;v15<-t3;v24<-a0;v26<-a0;v28<-a0;v29<-a0;v31<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g.42"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   add v24, v14, v15 ->   add a0, a1, t3
// [Asm] subst   add v25, v24, v16 ->   add a0, a0, a2
// [Asm] subst   add v26, v25, v17 ->   add a0, a0, a6
// [Asm] subst   add v27, v26, v18 ->   add a0, a0, a7
// [Asm] subst   add v28, v27, v19 ->   add a0, a0, t2
// [Asm] subst   add v29, v28, v20 ->   add a0, a0, t0
// [Asm] subst   add v30, v29, v21 ->   add a0, a0, a3
// [Asm] subst   add v31, v30, v22 ->   add a0, a0, a5
// [Asm] subst   add v32, v31, v23 ->   add a0, a0, t1
// [Asm] subst   blt zero, v13, .g.42_2 ->   blt zero, a4, .g.42_2
// [Asm] subst   mv v2, a0 ->   mv s3, a0
// [Asm] subst   mv v4, a2 ->   mv t3, a2
// [Asm] subst   mv v5, a3 ->   mv a2, a3
// [Asm] subst   mv v6, a4 ->   mv s2, a4
// [Asm] subst   mv v7, a5 ->   mv s1, a5
// [Asm] subst   mv v8, a6 ->   mv s0, a6
// [Asm] subst   mv v9, a7 ->   mv t4, a7
// [Asm] subst   mv v10, t0 ->   mv a3, t0
// [Asm] subst   mv v11, t1 ->   mv a5, t1
// [Asm] subst   mv v12, t2 ->   mv a0, t2
// [Asm] subst   mv v13, v2 ->   mv a4, s3
// [Asm] subst   mv v17, v6 ->   mv a6, s2
// [Asm] subst   mv v18, v7 ->   mv a7, s1
// [Asm] subst   mv v19, v8 ->   mv t2, s0
// [Asm] subst   mv v20, v9 ->   mv t0, t4
// [Asm] subst   mv v23, v12 ->   mv t1, a0
// [Asm] subst   neg v35, v13 ->   neg a0, a4
// [Asm] subst   mv v13, v35 ->   mv a4, a0
// [Asm] subst   j .g.42_0 ->   j .g.42_0
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, Insn(iref=%7) -> v10, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%2) -> v5, Insn(iref=%9) -> v12, Insn(iref=%8) -> v11, Insn(iref=%1) -> v4, Insn(iref=%10) -> v13, Self(fref=f1) -> v0, Insn(iref=%6) -> v9, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%4) -> v7
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, v8, v7, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v8, v7, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v8, v7, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, v10, v8, v7, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v5, v10, a0, v8, v7, v4, v6, v12, v9, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v5, v10, a0, v8, v7, v4, a1, v6, v12, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v5, v10, a0, v8, v7, a2, a1, v6, v12, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, a0, v8, v7, a2, a1, v6, v12, a3, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, a0, a4, v8, v7, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: a5 is X
// [Asm] defs: [a6]
// [Asm] live_set: [v11, v10, a5, a0, a4, a6, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a6 is X
// [Asm] defs: [a7]
// [Asm] live_set: [a7, v11, v10, a5, a0, a4, a6, a2, a1, a3, v12]
// [Asm] move_origin: [v9]
// [Asm] defined: a7 is X
// [Asm] defs: [t0]
// [Asm] live_set: [a7, v11, t0, a5, a0, a4, a6, a2, a1, a3, v12]
// [Asm] move_origin: [v10]
// [Asm] defined: t0 is X
// [Asm] defs: [t1]
// [Asm] live_set: [a7, t0, t1, a5, a0, a4, a6, a2, a1, a3, v12]
// [Asm] move_origin: [v11]
// [Asm] defined: t1 is X
// [Asm] defs: [t2]
// [Asm] live_set: [a7, t0, t1, a5, a0, a4, a6, a2, a1, t2, a3]
// [Asm] move_origin: [v12]
// [Asm] defined: t2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of h.41"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="v5 ← a3", color=green];
// [Asm]   r9 [label="v11 ← t1", color=green];
// [Asm]   r6 [label="v8 ← a6", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v6 ← a4", color=green];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r11 [label="v14 ← a0", color=green];
// [Asm]   r7 [label="v9 ← a7", color=green];
// [Asm]   r10 [label="v12 ← t2", color=green];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="v10 ← t0", color=green];
// [Asm]   r5 [label="v7 ← a5", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r25 [label="v13 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a2", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   r5 -- r12;
// [Asm]   r16 -- r20;
// [Asm]   r14 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r14 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r14 -- r19;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r5 -- r14;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r14 -- r22;
// [Asm]   r14 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r16 -- r22;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r14 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r6 -- r14;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r16 -- r19;
// [Asm]   r13 -- r16;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r15 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r9 -- r19;
// [Asm]   r12 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r10 -- r21;
// [Asm]   comment = "0:v2-> 1:v3-> 2:v4-> 3:v5-> 4:v6-> 5:v7-> 6:v8-> 7:v9-> 8:v10-> 9:v11-> 10:v12-> 11:v14-> 12:a0-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 25:v13"
// [Asm]   comment = "v2<-a0;v5<-a3;v11<-t1;v8<-a6;v6<-a4;v3<-a1;v14<-a0;v9<-a7;v12<-t2;v10<-t0;v7<-a5;v13<-a0;v4<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of h.41"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v3, 0(v2) ->   lw a1, 0(a0)
// [Asm] subst   lw v4, 4(v2) ->   lw a2, 4(a0)
// [Asm] subst   lw v5, 8(v2) ->   lw a3, 8(a0)
// [Asm] subst   lw v6, 12(v2) ->   lw a4, 12(a0)
// [Asm] subst   lw v7, 16(v2) ->   lw a5, 16(a0)
// [Asm] subst   lw v8, 20(v2) ->   lw a6, 20(a0)
// [Asm] subst   lw v9, 24(v2) ->   lw a7, 24(a0)
// [Asm] subst   lw v10, 28(v2) ->   lw t0, 28(a0)
// [Asm] subst   lw v11, 32(v2) ->   lw t1, 32(a0)
// [Asm] subst   lw v12, 36(v2) ->   lw t2, 36(a0)
// [Asm] subst   li v14, 1 ->   li a0, 1
// [Asm] subst   call g.42 ->   call g.42
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v4, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.43"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="v9 ← a1", color=green];
// [Asm]   r9 [label="v15 ← a1", color=green];
// [Asm]   r26 [label="v4 ← a0", color=green];
// [Asm]   r27 [label="v5 ← a0", color=green];
// [Asm]   r6 [label="v12 ← a1", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="v10 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v17 ← a1", color=green];
// [Asm]   r7 [label="v13 ← a1", color=green];
// [Asm]   r10 [label="v16 ← a1", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="a1", color=blue];
// [Asm]   r8 [label="v14 ← a1", color=green];
// [Asm]   r5 [label="v11 ← a1", color=green];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="a2", color=blue];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v18 ← a1", color=green];
// [Asm]   r1 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r13 -- r16;
// [Asm]   r0 -- r1;
// [Asm]   r13 -- r18;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r13 -- r21;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r13 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v9-> 4:v10-> 5:v11-> 6:v12-> 7:v13-> 8:v14-> 9:v15-> 10:v16-> 11:v17-> 12:v18-> 13:a0-> 14:a1-> 15:a2-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:v4-> 27:v5"
// [Asm]   comment = "v2<-a0;v9<-a1;v15<-a1;v4<-a0;v5<-a0;v12<-a1;v10<-a1;v17<-a1;v13<-a1;v16<-a1;v14<-a1;v11<-a1;v18<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.43"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v9, 1 ->   li a1, 1
// [Asm] subst   sw v9, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v10, 2 ->   li a1, 2
// [Asm] subst   sw v10, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v11, 3 ->   li a1, 3
// [Asm] subst   sw v11, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   li v12, 4 ->   li a1, 4
// [Asm] subst   sw v12, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   li v13, 5 ->   li a1, 5
// [Asm] subst   sw v13, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   li v14, 6 ->   li a1, 6
// [Asm] subst   sw v14, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   li v15, 7 ->   li a1, 7
// [Asm] subst   sw v15, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   li v16, 8 ->   li a1, 8
// [Asm] subst   sw v16, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   li v17, 9 ->   li a1, 9
// [Asm] subst   sw v17, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   li v18, 10 ->   li a1, 10
// [Asm] subst   sw v18, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   call h.41 ->   call h.41
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.43:
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, v11, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v11, v14, v16, v10, v13, a0, v17, s11, v12, v9, v18, zero, v4, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.43_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v9, 1  # live: [zero, v9, v2]
// [Asm]   sw v9, 0(v2)  # live: [zero, v2]
// [Asm]   li v10, 2  # live: [v10, zero, v2]
// [Asm]   sw v10, 4(v2)  # live: [zero, v2]
// [Asm]   li v11, 3  # live: [v11, zero, v2]
// [Asm]   sw v11, 8(v2)  # live: [zero, v2]
// [Asm]   li v12, 4  # live: [v12, zero, v2]
// [Asm]   sw v12, 12(v2)  # live: [zero, v2]
// [Asm]   li v13, 5  # live: [zero, v13, v2]
// [Asm]   sw v13, 16(v2)  # live: [zero, v2]
// [Asm]   li v14, 6  # live: [v14, zero, v2]
// [Asm]   sw v14, 20(v2)  # live: [zero, v2]
// [Asm]   li v15, 7  # live: [v15, zero, v2]
// [Asm]   sw v15, 24(v2)  # live: [zero, v2]
// [Asm]   li v16, 8  # live: [v16, zero, v2]
// [Asm]   sw v16, 28(v2)  # live: [zero, v2]
// [Asm]   li v17, 9  # live: [v17, zero, v2]
// [Asm]   sw v17, 32(v2)  # live: [zero, v2]
// [Asm]   li v18, 10  # live: [v18, zero, v2]
// [Asm]   sw v18, 36(v2)  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, v2  # live: [zero, a0]
// [Asm]   call h.41  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [v4, zero]
// [Asm]   # restore_ctx2  # live: [v4, zero]
// [Asm]   # save_ctx2  # live: [v4, zero]
// [Asm]   mv a0, v4  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] g.42:
// [Asm] # block info: defs: [v3, v11, v5, v14, v16, v10, v21, v13, v22, v7, v17, v12, v9, v18, v20, v23, v8, v19, v4, v6, v15, v2], uses: [v2, v11, t1, v5, v10, a5, a0, v7, a2, a1, a3, v12, v9, a7, t0, a4, v8, a6, v4, t2, v6, v3], upward_exposed: [a7, t0, t1, a5, a0, a4, a6, a2, a1, t2, a3], params_defs: []
// [Asm] # live_in: [a7, t0, t1, a5, a0, zero, a4, a6, a2, a1, t2, a3], live_out: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] # block parameters: []
// [Asm] .g.42_5:
// [Asm]   # save_ctx1  # live: [a7, t0, t1, a5, zero, a0, a4, a6, a2, t2, a1, a3]
// [Asm]   mv v2, a0  # live: [a7, t0, t1, a5, zero, a4, a6, a2, t2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a7, t0, t1, a5, zero, a4, a6, a2, t2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a7, t0, t1, a5, zero, a4, a6, v4, t2, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, a7, t0, t1, v5, a5, zero, a4, a6, v4, t2, v3]
// [Asm]   mv v6, a4  # live: [v2, a7, t0, t1, v5, a5, zero, a6, v4, v6, t2, v3]
// [Asm]   mv v7, a5  # live: [v2, a7, t0, t1, v5, zero, v7, a6, v4, v6, t2, v3]
// [Asm]   mv v8, a6  # live: [v2, a7, t0, t1, v5, zero, v8, v7, v4, v6, t2, v3]
// [Asm]   mv v9, a7  # live: [v2, t1, t0, v5, zero, v8, v7, v4, v6, t2, v9, v3]
// [Asm]   mv v10, t0  # live: [v2, t1, v5, v10, zero, v8, v7, v4, v6, t2, v9, v3]
// [Asm]   mv v11, t1  # live: [v2, v11, v5, v10, zero, v8, v7, v4, v6, t2, v9, v3]
// [Asm]   mv v12, t2  # live: [v2, v11, v5, v10, zero, v8, v7, v4, v6, v12, v9, v3]
// [Asm] # control
// [Asm]   mv v13, v2  # live: [v11, v5, v10, zero, v13, v8, v7, v4, v6, v12, v9, v3]
// [Asm]   mv v14, v3  # live: [v11, v14, v5, v10, zero, v13, v8, v7, v4, v6, v12, v9]
// [Asm]   mv v15, v4  # live: [v11, v14, v5, v10, zero, v13, v8, v7, v6, v15, v12, v9]
// [Asm]   mv v16, v5  # live: [v11, v14, v16, v10, zero, v13, v8, v7, v6, v15, v12, v9]
// [Asm]   mv v17, v6  # live: [v11, v14, v16, v10, zero, v13, v8, v7, v17, v15, v12, v9]
// [Asm]   mv v18, v7  # live: [v11, v14, v16, v18, v10, zero, v13, v8, v17, v15, v12, v9]
// [Asm]   mv v19, v8  # live: [v11, v14, v16, v18, v10, zero, v13, v19, v17, v15, v12, v9]
// [Asm]   mv v20, v9  # live: [v11, v14, v16, v18, v10, zero, v13, v20, v19, v17, v15, v12]
// [Asm]   mv v21, v10  # live: [v11, v14, v16, v18, v21, v13, zero, v20, v19, v17, v15, v12]
// [Asm]   mv v22, v11  # live: [v14, v16, v18, v21, v13, zero, v22, v20, v19, v17, v15, v12]
// [Asm]   mv v23, v12  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] 
// [Asm] # block info: defs: [v25, v26, v29, v27, v30, v32, v24, v28, v31], uses: [v25, v14, v16, v21, v26, v13, v22, v30, v17, v24, v28, v31, v18, v29, zero, v27, v23, v20, v19, v15], upward_exposed: [v14, v16, v18, v21, zero, v13, v23, v20, v22, v19, v17, v15], params_defs: [v14, v16, v18, v21, v13, v20, v22, v23, v19, v17, v15]
// [Asm] # live_in: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15], live_out: [v14, v16, v21, v13, v22, v32, v17, v18, zero, v23, v20, v19, v15]
// [Asm] # block parameters: [v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23]
// [Asm] .g.42_0:
// [Asm]   add v24, v14, v15  # live: [v14, v16, v21, v13, v22, v17, v24, v18, zero, v20, v23, v19, v15]
// [Asm]   add v25, v24, v16  # live: [v25, v14, v16, v21, v13, v22, v17, v18, zero, v20, v23, v19, v15]
// [Asm]   add v26, v25, v17  # live: [v14, v16, v21, v13, v26, v22, v17, v18, zero, v20, v23, v19, v15]
// [Asm]   add v27, v26, v18  # live: [v14, v16, v21, v13, v22, v17, v18, zero, v20, v23, v27, v19, v15]
// [Asm]   add v28, v27, v19  # live: [v14, v16, v21, v13, v22, v17, v28, v18, zero, v20, v23, v19, v15]
// [Asm]   add v29, v28, v20  # live: [v14, v16, v21, v13, v22, v17, v18, zero, v29, v20, v23, v19, v15]
// [Asm]   add v30, v29, v21  # live: [v14, v16, v21, v13, v22, v30, v17, v18, zero, v23, v20, v19, v15]
// [Asm]   add v31, v30, v22  # live: [v14, v16, v21, v13, v22, v17, v31, v18, zero, v23, v20, v19, v15]
// [Asm]   add v32, v31, v23  # live: [v14, v16, v21, v13, v22, v32, v17, v18, zero, v23, v20, v19, v15]
// [Asm] # control
// [Asm]   blt zero, v13, .g.42_2  # live: [v14, v16, v21, v18, v13, zero, v22, v23, v20, v19, v32, v17, v15]
// [Asm] 
// [Asm] # block info: defs: [v13, v35], uses: [v14, v16, v18, v21, v13, v20, v22, v23, v35, v19, v17, v15], upward_exposed: [v14, v16, v18, v21, v13, v20, v22, v23, v19, v17, v15], params_defs: []
// [Asm] # live_in: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15], live_out: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] # block parameters: []
// [Asm] .g.42_1:
// [Asm]   neg v35, v13  # live: [v14, v16, v18, v21, zero, v22, v23, v20, v35, v19, v17, v15]
// [Asm] # control
// [Asm]   mv v13, v35  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v14, v14  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v15, v15  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v16, v16  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v17, v17  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v18, v18  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v19, v19  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v20, v20  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v21, v21  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v22, v22  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   mv v23, v23  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm]   j .g.42_0  # live: [v14, v16, v18, v21, v13, zero, v22, v23, v20, v19, v17, v15]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v32], upward_exposed: [v32], params_defs: []
// [Asm] # live_in: [v32], live_out: [v34]
// [Asm] # block parameters: []
// [Asm] .g.42_2:
// [Asm] # control
// [Asm]   mv v34, v32  # live: [v34]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v34, a0], upward_exposed: [v34], params_defs: [v34]
// [Asm] # live_in: [v34], live_out: []
// [Asm] # block parameters: [v34]
// [Asm] .g.42_3:
// [Asm] # control
// [Asm]   mv a0, v34  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.43  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] h.41:
// [Asm] # block info: defs: [v2, t1, v14, v13, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, t1, v5, v14, v10, a5, a0, v13, v7, a2, a1, a3, v12, v9, a7, t0, a4, v8, a6, v4, v6, t2, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .h.41_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   lw v3, 0(v2)  # live: [v2, v3]
// [Asm]   lw v4, 4(v2)  # live: [v2, v4, v3]
// [Asm]   lw v5, 8(v2)  # live: [v2, v5, v4, v3]
// [Asm]   lw v6, 12(v2)  # live: [v2, v5, v4, v6, v3]
// [Asm]   lw v7, 16(v2)  # live: [v2, v5, v7, v4, v6, v3]
// [Asm]   lw v8, 20(v2)  # live: [v2, v5, v8, v7, v4, v6, v3]
// [Asm]   lw v9, 24(v2)  # live: [v2, v5, v8, v7, v4, v6, v9, v3]
// [Asm]   lw v10, 28(v2)  # live: [v2, v5, v10, v8, v7, v4, v6, v9, v3]
// [Asm]   lw v11, 32(v2)  # live: [v2, v11, v5, v10, v8, v7, v4, v6, v9, v3]
// [Asm]   lw v12, 36(v2)  # live: [v11, v5, v10, v8, v7, v4, v6, v12, v9, v3]
// [Asm]   # save_ctx2  # live: [v11, v5, v10, v8, v7, v4, v6, v12, v9, v3]
// [Asm]   li v14, 1  # live: [v11, v5, v14, v10, v8, v7, v4, v6, v12, v9, v3]
// [Asm]   mv a0, v14  # live: [v11, v5, v10, a0, v8, v7, v4, v6, v12, v9, v3]
// [Asm]   mv a1, v3  # live: [v11, v5, v10, a0, v8, v7, v4, a1, v6, v12, v9]
// [Asm]   mv a2, v4  # live: [v11, v5, v10, a0, v8, v7, a2, a1, v6, v12, v9]
// [Asm]   mv a3, v5  # live: [v11, v10, a0, v8, v7, a2, a1, v6, v12, a3, v9]
// [Asm]   mv a4, v6  # live: [v11, v10, a0, a4, v8, v7, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v7  # live: [v11, v10, a5, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a6, v8  # live: [v11, v10, a5, a0, a4, a6, a2, a1, a3, v12, v9]
// [Asm]   mv a7, v9  # live: [a7, v11, v10, a5, a0, a4, a6, a2, a1, a3, v12]
// [Asm]   mv t0, v10  # live: [a7, v11, t0, a5, a0, a4, a6, a2, a1, a3, v12]
// [Asm]   mv t1, v11  # live: [a7, t0, t1, a5, a0, a4, a6, a2, a1, a3, v12]
// [Asm]   mv t2, v12  # live: [a7, t0, t1, a5, a0, a4, a6, a2, a1, t2, a3]
// [Asm]   call g.42  # live: [a0]
// [Asm]   mv v13, a0  # live: [v13]
// [Asm]   # restore_ctx2  # live: [v13]
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("h", Int), args: [("p", Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]))], body: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), [])))
// [Knf] build_knf: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))
// [Knf] build_knf: Var("p")
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)]))
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("v1"), Var("v2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("v3")
// [Knf] build_knf: Var("v4")
// [Knf] build_knf: Var("v5")
// [Knf] build_knf: Var("v6")
// [Knf] build_knf: Var("v7")
// [Knf] build_knf: Var("v8")
// [Knf] build_knf: Var("v9")
// [Knf] build_knf: Var("v10")
// [Knf] build_knf: If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("z"), Int(0)), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]), Var("r"))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Neg(Var("z"), kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: App(Var("g"), [Int(1)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), []))
// [Knf] build_knf: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])])
// [Knf] build_knf: App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(7)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%11)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%8)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%9), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%10)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.43
// [Main]   .type main.43, @function
// [Main] # leaf false
// [Main] main.43:
// [Main] .main.43_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sw a1, 12(a0)
// [Main]   li a1, 5
// [Main]   sw a1, 16(a0)
// [Main]   li a1, 6
// [Main]   sw a1, 20(a0)
// [Main]   li a1, 7
// [Main]   sw a1, 24(a0)
// [Main]   li a1, 8
// [Main]   sw a1, 28(a0)
// [Main]   li a1, 9
// [Main]   sw a1, 32(a0)
// [Main]   li a1, 10
// [Main]   sw a1, 36(a0)
// [Main]   call h.41
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g.42
// [Main]   .type g.42, @function
// [Main] # leaf true
// [Main] g.42:
// [Main] .g.42_5:
// [Main]   addi sp, sp, -32
// [Main]   sd s0, 0(sp)
// [Main]   sd s1, 8(sp)
// [Main]   sd s2, 16(sp)
// [Main]   sd s3, 24(sp)
// [Main]   mv s3, a0
// [Main]   mv t3, a2
// [Main]   mv a2, a3
// [Main]   mv s2, a4
// [Main]   mv s1, a5
// [Main]   mv s0, a6
// [Main]   mv t4, a7
// [Main]   mv a3, t0
// [Main]   mv a5, t1
// [Main]   mv a0, t2
// [Main]   mv a4, s3
// [Main]   mv a6, s2
// [Main]   mv a7, s1
// [Main]   mv t2, s0
// [Main]   mv t0, t4
// [Main]   mv t1, a0
// [Main] 
// [Main] .g.42_0:
// [Main]   add a0, a1, t3
// [Main]   add a0, a0, a2
// [Main]   add a0, a0, a6
// [Main]   add a0, a0, a7
// [Main]   add a0, a0, t2
// [Main]   add a0, a0, t0
// [Main]   add a0, a0, a3
// [Main]   add a0, a0, a5
// [Main]   add a0, a0, t1
// [Main]   blt zero, a4, .g.42_2
// [Main] 
// [Main] .g.42_1:
// [Main]   neg a0, a4
// [Main]   mv a4, a0
// [Main]   j .g.42_0
// [Main] 
// [Main] .g.42_2:
// [Main] 
// [Main] .g.42_3:
// [Main]   ld s0, 0(sp)
// [Main]   ld s1, 8(sp)
// [Main]   ld s2, 16(sp)
// [Main]   ld s3, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.43
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl h.41
// [Main]   .type h.41, @function
// [Main] # leaf false
// [Main] h.41:
// [Main] .h.41_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a1, 0(a0)
// [Main]   lw a2, 4(a0)
// [Main]   lw a3, 8(a0)
// [Main]   lw a4, 12(a0)
// [Main]   lw a5, 16(a0)
// [Main]   lw a6, 20(a0)
// [Main]   lw a7, 24(a0)
// [Main]   lw t0, 28(a0)
// [Main]   lw t1, 32(a0)
// [Main]   lw t2, 36(a0)
// [Main]   li a0, 1
// [Main]   call g.42
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function g.42
// [Wasm] Lowering insn Op(ty=Int32, op=Neg, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%10), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7), BlockParam(bref=b0, bpref=$b.8), BlockParam(bref=b0, bpref=$b.9), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.7)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.8)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), BlockParam(bref=b0, bpref=$b.10)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Branch(cond=Insn(iref=%9), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6), FnParam(fref=f0, fpref=$f.7), FnParam(fref=f0, fpref=$f.8), FnParam(fref=f0, fpref=$f.9), FnParam(fref=f0, fpref=$f.10)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.9) -> $$f.9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.10) -> $$f.10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.7) -> $$f.7
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.8) -> $$f.8
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.9) -> $$f.9
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.10) -> $$f.10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.7) -> $b0.$b.7
// [Wasm] Local BlockParam(bref=b0, bpref=$b.10) -> $b0.$b.10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.9) -> $b0.$b.9
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.8) -> $b0.$b.8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function g.42 to wasm
// [Wasm] Lowering function h.41
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=1, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=2, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=3, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=4, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=5, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=6, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=7, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=8, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f1, fpref=$f.0), index=9, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Int32(val=1), Insn(iref=%0), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Return(args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function h.41 to wasm
// [Wasm] Lowering function main.43
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Int32(val=2)), Field(index=2, val=Int32(val=3)), Field(index=3, val=Int32(val=4)), Field(index=4, val=Int32(val=5)), Field(index=5, val=Int32(val=6)), Field(index=6, val=Int32(val=7)), Field(index=7, val=Int32(val=8)), Field(index=8, val=Int32(val=9)), Field(index=9, val=Int32(val=10))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Call(ty=Int32, f=f1, args=[Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowered function main.43 to wasm
// [KnfOpt] func_tre: h.1 false
// [KnfOpt] func_tre: g.13 true
// [KnfOpt] func_tre: main.27 false
// [KnfOpt] freq: {h.1: Once, g.13: Many(2), main.27: Once}
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision g.13 rejected
// [KnfOpt] Inline threshold 25
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision g.13 rejected
// [KnfOpt] Inline threshold 30
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision h.1 rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %11: Call(ty=Int32, f=f0, args=[Insn(iref=%10), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6), FnParam(fref=f0, fpref=$f.7), FnParam(fref=f0, fpref=$f.8), FnParam(fref=f0, fpref=$f.9), FnParam(fref=f0, fpref=$f.10)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f1: Once, f2: Once})
