// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%10) -> v14, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8, Insn(iref=%3) -> v7, Insn(iref=%13) -> v17, Insn(iref=%7) -> v11, Mem(fref=f0, mref=m1) -> v3, Insn(iref=%2) -> v6, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%1) -> v5, Insn(iref=%11) -> v15, Insn(iref=%6) -> v10, Insn(iref=%12) -> v16
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [s11, zero, v35, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v36, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [s11, zero, v38, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [s11, v39, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v40, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v42, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v43, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [s11, v44, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, s11, zero, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v7, s11, zero, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, v7, s11, zero, v8, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v7, s11, v9, zero, v8, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v5, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v7, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, v12, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, zero]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v19, zero, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v19, zero, a0]
// [Asm] move_origin: [v20]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main39l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r38 [label="a5", color=blue];
// [Asm]   r33 [label="t4", color=blue];
// [Asm]   r9 [label="v41 ← a1", color=green];
// [Asm]   r26 [label="v19 ← a1", color=green];
// [Asm]   r6 [label="v38 ← a1", color=green];
// [Asm]   r13 [label="v5 ← a1", color=green];
// [Asm]   r42 [label="v17 ← a0", color=green];
// [Asm]   r4 [label="v36 ← a1", color=green];
// [Asm]   r29 [label="t0", color=blue];
// [Asm]   r35 [label="a2", color=blue];
// [Asm]   r7 [label="v39 ← a1", color=green];
// [Asm]   r10 [label="v42 ← a1", color=green];
// [Asm]   r8 [label="v40 ← a1", color=green];
// [Asm]   r5 [label="v37 ← a1", color=green];
// [Asm]   r36 [label="a3", color=blue];
// [Asm]   r24 [label="v23 ← t3", color=green];
// [Asm]   r32 [label="t3", color=blue];
// [Asm]   r15 [label="v7 ← a3", color=green];
// [Asm]   r31 [label="t2", color=blue];
// [Asm]   r39 [label="a6", color=blue];
// [Asm]   r17 [label="v9 ← a5", color=green];
// [Asm]   r12 [label="v44 ← a1", color=green];
// [Asm]   r37 [label="a4", color=blue];
// [Asm]   r20 [label="v12 ← t0", color=green];
// [Asm]   r23 [label="v3 ← t2", color=green];
// [Asm]   r3 [label="v35 ← a1", color=green];
// [Asm]   r27 [label="v20 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r40 [label="a7", color=blue];
// [Asm]   r28 [label="a0", color=blue];
// [Asm]   r41 [label="v16 ← a0", color=green];
// [Asm]   r11 [label="v43 ← a1", color=green];
// [Asm]   r34 [label="a1", color=blue];
// [Asm]   r22 [label="v14 ← a0", color=green];
// [Asm]   r14 [label="v6 ← a2", color=green];
// [Asm]   r30 [label="t1", color=blue];
// [Asm]   r25 [label="s10", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v8 ← a4", color=green];
// [Asm]   r18 [label="v10 ← a6", color=green];
// [Asm]   r19 [label="v11 ← a7", color=green];
// [Asm]   r21 [label="v13 ← t1", color=green];
// [Asm]   r28 -- r34;
// [Asm]   r18 -- r23;
// [Asm]   r2 -- r20;
// [Asm]   r21 -- r24;
// [Asm]   r0 -- r13;
// [Asm]   r16 -- r20;
// [Asm]   r14 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r28 -- r30;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r0 -- r16;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r31;
// [Asm]   r28 -- r39;
// [Asm]   r1 -- r9;
// [Asm]   r14 -- r19;
// [Asm]   r26 -- r28;
// [Asm]   r15 -- r18;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r19 -- r22;
// [Asm]   r17 -- r22;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r13 -- r22;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r28 -- r38;
// [Asm]   r16 -- r24;
// [Asm]   r16 -- r23;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r16 -- r22;
// [Asm]   r17 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r13 -- r24;
// [Asm]   r28 -- r40;
// [Asm]   r0 -- r15;
// [Asm]   r17 -- r18;
// [Asm]   r20 -- r24;
// [Asm]   r13 -- r15;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r34;
// [Asm]   r28 -- r37;
// [Asm]   r1 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r14 -- r23;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r19 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r18 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r28 -- r36;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r13 -- r19;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r21 -- r23;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r19 -- r23;
// [Asm]   r15 -- r17;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r13 -- r14;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r28 -- r35;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r0 -- r12;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r20 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v35-> 4:v36-> 5:v37-> 6:v38-> 7:v39-> 8:v40-> 9:v41-> 10:v42-> 11:v43-> 12:v44-> 13:v5-> 14:v6-> 15:v7-> 16:v8-> 17:v9-> 18:v10-> 19:v11-> 20:v12-> 21:v13-> 22:v14-> 23:v3-> 24:v23-> 25:s10-> 26:v19-> 27:v20-> 28:a0-> 29:t0-> 30:t1-> 31:t2-> 32:t3-> 33:t4-> 34:a1-> 35:a2-> 36:a3-> 37:a4-> 38:a5-> 39:a6-> 40:a7-> 41:v16-> 42:v17"
// [Asm]   comment = "v2<-a0;v41<-a1;v19<-a1;v38<-a1;v5<-a1;v17<-a0;v36<-a1;v39<-a1;v42<-a1;v40<-a1;v37<-a1;v23<-t3;v7<-a3;v9<-a5;v44<-a1;v12<-t0;v3<-t2;v35<-a1;v20<-a0;v16<-a0;v43<-a1;v14<-a0;v6<-a2;v8<-a4;v10<-a6;v11<-a7;v13<-t1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main39l0_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v35, 1 ->   li a1, 1
// [Asm] subst   sw v35, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v36, 2 ->   li a1, 2
// [Asm] subst   sw v36, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v37, 3 ->   li a1, 3
// [Asm] subst   sw v37, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   li v38, 4 ->   li a1, 4
// [Asm] subst   sw v38, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   li v39, 5 ->   li a1, 5
// [Asm] subst   sw v39, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   li v40, 6 ->   li a1, 6
// [Asm] subst   sw v40, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   li v41, 7 ->   li a1, 7
// [Asm] subst   sw v41, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   li v42, 8 ->   li a1, 8
// [Asm] subst   sw v42, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   li v43, 9 ->   li a1, 9
// [Asm] subst   sw v43, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   li v44, 10 ->   li a1, 10
// [Asm] subst   sw v44, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   lw v5, 0(v2) ->   lw a1, 0(a0)
// [Asm] subst   lw v6, 4(v2) ->   lw a2, 4(a0)
// [Asm] subst   lw v7, 8(v2) ->   lw a3, 8(a0)
// [Asm] subst   lw v8, 12(v2) ->   lw a4, 12(a0)
// [Asm] subst   lw v9, 16(v2) ->   lw a5, 16(a0)
// [Asm] subst   lw v10, 20(v2) ->   lw a6, 20(a0)
// [Asm] subst   lw v11, 24(v2) ->   lw a7, 24(a0)
// [Asm] subst   lw v12, 28(v2) ->   lw t0, 28(a0)
// [Asm] subst   lw v13, 32(v2) ->   lw t1, 32(a0)
// [Asm] subst   lw v14, 36(v2) ->   lw a0, 36(a0)
// [Asm] subst   addi v3, s11, -88 ->   addi t2, s11, -88
// [Asm] subst   andi s11, v3, -8 ->   andi s11, t2, -8
// [Asm] subst   la v23, g24.63_2 ->   la t3, g24.63_2
// [Asm] subst   sd v23, 0(v3) ->   sd t3, 0(t2)
// [Asm] subst   sd v5, 8(v3) ->   sd a1, 8(t2)
// [Asm] subst   sd v6, 16(v3) ->   sd a2, 16(t2)
// [Asm] subst   sd v7, 24(v3) ->   sd a3, 24(t2)
// [Asm] subst   sd v8, 32(v3) ->   sd a4, 32(t2)
// [Asm] subst   sd v9, 40(v3) ->   sd a5, 40(t2)
// [Asm] subst   sd v10, 48(v3) ->   sd a6, 48(t2)
// [Asm] subst   sd v11, 56(v3) ->   sd a7, 56(t2)
// [Asm] subst   sd v12, 64(v3) ->   sd t0, 64(t2)
// [Asm] subst   sd v13, 72(v3) ->   sd t1, 72(t2)
// [Asm] subst   sd v14, 80(v3) ->   sd a0, 80(t2)
// [Asm] subst   mv s10, v3 ->   mv s10, t2
// [Asm] subst   ld v19, 0(v3) ->   ld a1, 0(t2)
// [Asm] subst   li v20, 1 ->   li a0, 1
// [Asm] subst   jalr v19 ->   jalr a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main39l0_0 ->   call main39l0_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FreeVar(fvref=^5) -> v7, BlockParam(bref=b3, bpref=$b.0) -> v24, Insn(iref=%9) -> v23, Self(fref=f2) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v22, Insn(iref=%10) -> v25, BlockParam(bref=b0, bpref=$b.0) -> v13, FreeVar(fvref=^4) -> v6, FreeVar(fvref=^10) -> v12, FreeVar(fvref=^7) -> v9, Insn(iref=%5) -> v19, Insn(iref=%0) -> v14, Insn(iref=%4) -> v18, FreeVar(fvref=^6) -> v8, Insn(iref=%3) -> v17, FreeVar(fvref=^8) -> v10, Insn(iref=%7) -> v21, Insn(iref=%2) -> v16, Insn(iref=%1) -> v15, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v20, FnParam(fref=f2, fpref=$f.0) -> v2, FreeVar(fvref=^9) -> v11
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move_origin: [v25]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v7, v8, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v5, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v19, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v20, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v5, v10, v21, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v22, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v22]
// [Asm] defined: v24 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v24]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of g24.63_2"];
// [Asm]   r0 [label="v25 ← a0", color=green];
// [Asm]   r20 [label="v18 ← t3", color=green];
// [Asm]   r23 [label="v21 ← t3", color=green];
// [Asm]   r3 [label="v10 ← a3", color=green];
// [Asm]   r9 [label="v12 ← t0", color=green];
// [Asm]   r6 [label="v8 ← a5", color=green];
// [Asm]   r13 [label="v0 ← t0", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v11 ← a1", color=green];
// [Asm]   r11 [label="v3 ← t2", color=green];
// [Asm]   r7 [label="v4 ← a6", color=green];
// [Asm]   r10 [label="v9 ← t1", color=green];
// [Asm]   r22 [label="v20 ← t3", color=green];
// [Asm]   r14 [label="a0", color=blue];
// [Asm]   r8 [label="v6 ← a7", color=green];
// [Asm]   r5 [label="v7 ← a4", color=green];
// [Asm]   r15 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="v22 ← t3", color=green];
// [Asm]   r25 [label="v24 ← a0", color=green];
// [Asm]   r2 [label="v5 ← a2", color=green];
// [Asm]   r16 [label="v14 ← t3", color=green];
// [Asm]   r18 [label="v16 ← t3", color=green];
// [Asm]   r19 [label="v17 ← t3", color=green];
// [Asm]   r17 [label="v15 ← t3", color=green];
// [Asm]   r21 [label="v19 ← t3", color=green];
// [Asm]   r12 [label="v13 ← a0", color=green];
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r12 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r9 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r23;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r12 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   comment = "0:v25-> 1:v11-> 2:v5-> 3:v10-> 4:zero-> 5:v7-> 6:v8-> 7:v4-> 8:v6-> 9:v12-> 10:v9-> 11:v3-> 12:v13-> 16:v14-> 17:v15-> 18:v16-> 19:v17-> 20:v18-> 21:v19-> 22:v20-> 23:v21-> 24:v22-> 15:v2-> 13:v0-> 14:a0-> 25:v24"
// [Asm]   comment = "v25<-a0;v18<-t3;v21<-t3;v10<-a3;v12<-t0;v8<-a5;v0<-t0;v11<-a1;v3<-t2;v4<-a6;v9<-t1;v20<-t3;v6<-a7;v7<-a4;v2<-a0;v22<-t3;v24<-a0;v5<-a2;v14<-t3;v16<-t3;v17<-t3;v15<-t3;v19<-t3;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of g24.63_2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   neg v25, v13 ->   neg a0, a0
// [Asm] subst   j .g24.63_2_0 ->   j .g24.63_2_0
// [Asm] subst   mv v0, s10 ->   mv t0, s10
// [Asm] subst   lw v3, 8(v0) ->   lw t2, 8(t0)
// [Asm] subst   lw v4, 16(v0) ->   lw a6, 16(t0)
// [Asm] subst   lw v5, 24(v0) ->   lw a2, 24(t0)
// [Asm] subst   lw v6, 32(v0) ->   lw a7, 32(t0)
// [Asm] subst   lw v7, 40(v0) ->   lw a4, 40(t0)
// [Asm] subst   lw v8, 48(v0) ->   lw a5, 48(t0)
// [Asm] subst   lw v9, 56(v0) ->   lw t1, 56(t0)
// [Asm] subst   lw v10, 64(v0) ->   lw a3, 64(t0)
// [Asm] subst   lw v11, 72(v0) ->   lw a1, 72(t0)
// [Asm] subst   lw v12, 80(v0) ->   lw t0, 80(t0)
// [Asm] subst   add v14, v3, v4 ->   add t3, t2, a6
// [Asm] subst   add v15, v14, v5 ->   add t3, t3, a2
// [Asm] subst   add v16, v15, v6 ->   add t3, t3, a7
// [Asm] subst   add v17, v16, v7 ->   add t3, t3, a4
// [Asm] subst   add v18, v17, v8 ->   add t3, t3, a5
// [Asm] subst   add v19, v18, v9 ->   add t3, t3, t1
// [Asm] subst   add v20, v19, v10 ->   add t3, t3, a3
// [Asm] subst   add v21, v20, v11 ->   add t3, t3, a1
// [Asm] subst   add v22, v21, v12 ->   add t3, t3, t0
// [Asm] subst   blt zero, v13, .g24.63_2_2 ->   blt zero, a0, .g24.63_2_2
// [Asm] subst   mv v24, v22 ->   mv a0, t3
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main39l0_0  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main39l0_0:
// [Asm] # block info: defs: [a1, s11, v44, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, v6, ft4, v5, v10, ft9, fa4, ft2, v37, v43, v17, a3, a7, fa7, fa3, ft3, t2, v3, v40, t1, v14, v16, v13, v42, v7, v41, ft0, ft1, v12, v8, v19, ft7, v11, a5, a0, v36, a2, v9, s10, v39, ft8, t3, t0, fa5, v23, v35, fa0, t4, v38, v2], uses: [v3, v40, v14, v16, v13, v42, v7, v41, s11, v12, v44, zero, v20, v8, v19, v6, v11, v5, v10, a0, v36, v37, v43, v9, v39, v23, v35, v38, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main39l0_0_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v35, 1  # live: [s11, zero, v35, v2]
// [Asm]   sw v35, 0(v2)  # live: [s11, zero, v2]
// [Asm]   li v36, 2  # live: [v36, s11, zero, v2]
// [Asm]   sw v36, 4(v2)  # live: [s11, zero, v2]
// [Asm]   li v37, 3  # live: [v37, s11, zero, v2]
// [Asm]   sw v37, 8(v2)  # live: [s11, zero, v2]
// [Asm]   li v38, 4  # live: [s11, zero, v38, v2]
// [Asm]   sw v38, 12(v2)  # live: [s11, zero, v2]
// [Asm]   li v39, 5  # live: [s11, v39, zero, v2]
// [Asm]   sw v39, 16(v2)  # live: [s11, zero, v2]
// [Asm]   li v40, 6  # live: [v40, s11, zero, v2]
// [Asm]   sw v40, 20(v2)  # live: [s11, zero, v2]
// [Asm]   li v41, 7  # live: [v41, s11, zero, v2]
// [Asm]   sw v41, 24(v2)  # live: [s11, zero, v2]
// [Asm]   li v42, 8  # live: [v42, s11, zero, v2]
// [Asm]   sw v42, 28(v2)  # live: [s11, zero, v2]
// [Asm]   li v43, 9  # live: [v43, s11, zero, v2]
// [Asm]   sw v43, 32(v2)  # live: [s11, zero, v2]
// [Asm]   li v44, 10  # live: [s11, v44, zero, v2]
// [Asm]   sw v44, 36(v2)  # live: [s11, zero, v2]
// [Asm]   lw v5, 0(v2)  # live: [v5, s11, zero, v2]
// [Asm]   lw v6, 4(v2)  # live: [v5, s11, zero, v6, v2]
// [Asm]   lw v7, 8(v2)  # live: [v5, v7, s11, zero, v6, v2]
// [Asm]   lw v8, 12(v2)  # live: [v5, v7, s11, zero, v8, v6, v2]
// [Asm]   lw v9, 16(v2)  # live: [v5, v7, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v10, 20(v2)  # live: [v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v11, 24(v2)  # live: [v11, v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v12, 28(v2)  # live: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v13, 32(v2)  # live: [v11, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v14, 36(v2)  # live: [v11, v14, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6]
// [Asm]   addi v3, s11, -88  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm]   andi s11, v3, -8  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm]   la v23, g24.63_2  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v6, v3]
// [Asm]   sd v23, 0(v3)  # live: [v11, v14, v5, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm]   sd v5, 8(v3)  # live: [v11, v14, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm]   sd v6, 16(v3)  # live: [v11, v14, v10, zero, v13, v8, v7, v12, v9, v3]
// [Asm]   sd v7, 24(v3)  # live: [v11, v14, v10, zero, v13, v8, v12, v9, v3]
// [Asm]   sd v8, 32(v3)  # live: [v11, v14, v10, zero, v13, v12, v9, v3]
// [Asm]   sd v9, 40(v3)  # live: [v11, v14, v10, zero, v13, v12, v3]
// [Asm]   sd v10, 48(v3)  # live: [v11, v14, zero, v13, v12, v3]
// [Asm]   sd v11, 56(v3)  # live: [v14, v12, zero, v13, v3]
// [Asm]   sd v12, 64(v3)  # live: [v14, zero, v13, v3]
// [Asm]   sd v13, 72(v3)  # live: [v14, zero, v3]
// [Asm]   sd v14, 80(v3)  # live: [zero, v3]
// [Asm]   mv s10, v3  # live: [zero, v3]
// [Asm]   ld v19, 0(v3)  # live: [v19, zero]
// [Asm]   # save_ctx2  # live: [v19, zero]
// [Asm]   li v20, 1  # live: [v19, zero, v20]
// [Asm]   mv a0, v20  # live: [v19, zero, a0]
// [Asm]   jalr v19  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [v16, zero]
// [Asm]   # restore_ctx2  # live: [v16, zero]
// [Asm]   # save_ctx2  # live: [v16, zero]
// [Asm]   mv a0, v16  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v17, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] g24.63_2:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v0, v4, v6, v12, v9, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # block parameters: []
// [Asm] .g24.63_2_5:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0]
// [Asm]   mv v2, a0  # live: [zero, v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, v3]
// [Asm]   lw v4, 16(v0)  # live: [v2, zero, v0, v4, v3]
// [Asm]   lw v5, 24(v0)  # live: [v2, v5, zero, v0, v4, v3]
// [Asm]   lw v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, v3]
// [Asm]   lw v7, 40(v0)  # live: [v2, v5, zero, v7, v0, v4, v6, v3]
// [Asm]   lw v8, 48(v0)  # live: [v2, v5, zero, v7, v8, v0, v4, v6, v3]
// [Asm]   lw v9, 56(v0)  # live: [v2, v5, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   lw v10, 64(v0)  # live: [v2, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   lw v11, 72(v0)  # live: [v2, v11, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   lw v12, 80(v0)  # live: [v2, v11, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # control
// [Asm]   mv v13, v2  # live: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v18, v21, v20, v22, v19, v17, v15], uses: [v11, v14, v5, v16, v10, v21, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15, v3], upward_exposed: [v11, v5, v10, zero, v13, v7, v8, v4, v6, v12, v9, v3], params_defs: [v13]
// [Asm] # live_in: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3], live_out: [v11, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] # block parameters: [v13]
// [Asm] .g24.63_2_0:
// [Asm]   add v14, v3, v4  # live: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v15, v14, v5  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   add v16, v15, v6  # live: [v11, v5, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v17, v16, v7  # live: [v11, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v18, v17, v8  # live: [v11, v5, v10, v13, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   add v19, v18, v9  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v19, v4, v6, v3]
// [Asm]   add v20, v19, v10  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v20, v8, v4, v6, v3]
// [Asm]   add v21, v20, v11  # live: [v11, v5, v10, v21, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v22, v21, v12  # live: [v11, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   blt zero, v13, .g24.63_2_2  # live: [v11, v5, v10, v13, zero, v22, v7, v8, v4, v6, v12, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v13], uses: [v25, v13], upward_exposed: [v13], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3], live_out: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # block parameters: []
// [Asm] .g24.63_2_1:
// [Asm]   neg v25, v13  # live: [v11, v25, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # control
// [Asm]   mv v13, v25  # live: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm]   j .g24.63_2_0  # live: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v22], upward_exposed: [v22], params_defs: []
// [Asm] # live_in: [v22], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .g24.63_2_2:
// [Asm] # control
// [Asm]   mv v24, v22  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v24, a0], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: []
// [Asm] # block parameters: [v24]
// [Asm] .g24.63_2_3:
// [Asm] # control
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("h", Int), args: [("p", Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]))], body: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), [])))
// [Knf] build_knf: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))
// [Knf] build_knf: Var("p")
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)]))
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("v1"), Var("v2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("v3")
// [Knf] build_knf: Var("v4")
// [Knf] build_knf: Var("v5")
// [Knf] build_knf: Var("v6")
// [Knf] build_knf: Var("v7")
// [Knf] build_knf: Var("v8")
// [Knf] build_knf: Var("v9")
// [Knf] build_knf: Var("v10")
// [Knf] build_knf: If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("z"), Int(0)), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]), Var("r"))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Neg(Var("z"), kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: App(Var("g"), [Int(1)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), []))
// [Knf] build_knf: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])])
// [Knf] build_knf: App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(7)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main39l0_0
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main39l0_0
// [Main]   .type main39l0_0, @function
// [Main] # leaf false
// [Main] main39l0_0:
// [Main] .main39l0_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sw a1, 12(a0)
// [Main]   li a1, 5
// [Main]   sw a1, 16(a0)
// [Main]   li a1, 6
// [Main]   sw a1, 20(a0)
// [Main]   li a1, 7
// [Main]   sw a1, 24(a0)
// [Main]   li a1, 8
// [Main]   sw a1, 28(a0)
// [Main]   li a1, 9
// [Main]   sw a1, 32(a0)
// [Main]   li a1, 10
// [Main]   sw a1, 36(a0)
// [Main]   lw a1, 0(a0)
// [Main]   lw a2, 4(a0)
// [Main]   lw a3, 8(a0)
// [Main]   lw a4, 12(a0)
// [Main]   lw a5, 16(a0)
// [Main]   lw a6, 20(a0)
// [Main]   lw a7, 24(a0)
// [Main]   lw t0, 28(a0)
// [Main]   lw t1, 32(a0)
// [Main]   lw a0, 36(a0)
// [Main]   addi t2, s11, -88
// [Main]   andi s11, t2, -8
// [Main]   la t3, g24.63_2
// [Main]   sd t3, 0(t2)
// [Main]   sd a1, 8(t2)
// [Main]   sd a2, 16(t2)
// [Main]   sd a3, 24(t2)
// [Main]   sd a4, 32(t2)
// [Main]   sd a5, 40(t2)
// [Main]   sd a6, 48(t2)
// [Main]   sd a7, 56(t2)
// [Main]   sd t0, 64(t2)
// [Main]   sd t1, 72(t2)
// [Main]   sd a0, 80(t2)
// [Main]   mv s10, t2
// [Main]   ld a1, 0(t2)
// [Main]   li a0, 1
// [Main]   jalr a1
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g24.63_2
// [Main]   .type g24.63_2, @function
// [Main] # leaf true
// [Main] g24.63_2:
// [Main] .g24.63_2_5:
// [Main]   mv t0, s10
// [Main]   lw t2, 8(t0)
// [Main]   lw a6, 16(t0)
// [Main]   lw a2, 24(t0)
// [Main]   lw a7, 32(t0)
// [Main]   lw a4, 40(t0)
// [Main]   lw a5, 48(t0)
// [Main]   lw t1, 56(t0)
// [Main]   lw a3, 64(t0)
// [Main]   lw a1, 72(t0)
// [Main]   lw t0, 80(t0)
// [Main] 
// [Main] .g24.63_2_0:
// [Main]   add t3, t2, a6
// [Main]   add t3, t3, a2
// [Main]   add t3, t3, a7
// [Main]   add t3, t3, a4
// [Main]   add t3, t3, a5
// [Main]   add t3, t3, t1
// [Main]   add t3, t3, a3
// [Main]   add t3, t3, a1
// [Main]   add t3, t3, t0
// [Main]   blt zero, a0, .g24.63_2_2
// [Main] 
// [Main] .g24.63_2_1:
// [Main]   neg a0, a0
// [Main]   j .g24.63_2_0
// [Main] 
// [Main] .g24.63_2_2:
// [Main]   mv a0, t3
// [Main] 
// [Main] .g24.63_2_3:
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main39l0_0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Int32(val=2)), Field(index=2, val=Int32(val=3)), Field(index=3, val=Int32(val=4)), Field(index=4, val=Int32(val=5)), Field(index=5, val=Int32(val=6)), Field(index=6, val=Int32(val=7)), Field(index=7, val=Int32(val=8)), Field(index=8, val=Int32(val=9)), Field(index=9, val=Int32(val=10))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=0, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=1, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=2, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=3, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=4, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=5, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=6, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=7, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=8, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=9, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Int32), mref=m1, fills=[Field(index=0, val=Fn(fref=f2)), Field(index=1, val=Insn(iref=%1)), Field(index=2, val=Insn(iref=%2)), Field(index=3, val=Insn(iref=%3)), Field(index=4, val=Insn(iref=%4)), Field(index=5, val=Insn(iref=%5)), Field(index=6, val=Insn(iref=%6)), Field(index=7, val=Insn(iref=%7)), Field(index=8, val=Insn(iref=%8)), Field(index=9, val=Insn(iref=%9)), Field(index=10, val=Insn(iref=%10))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Apply(ty=Int32, f=Mem(fref=f0, mref=m1), args=[Int32(val=1)])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main39l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function g24.63_2
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name FreeVar(fvref=^9) -> $^9
// [Wasm] Get Local name FreeVar(fvref=^10) -> $^10
// [Wasm] Lowering insn Op(ty=Int32, op=Neg, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FreeVar(fvref=^1), FreeVar(fvref=^2)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), FreeVar(fvref=^3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FreeVar(fvref=^3) -> $^3
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), FreeVar(fvref=^4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FreeVar(fvref=^4) -> $^4
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), FreeVar(fvref=^5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^5) -> $^5
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), FreeVar(fvref=^6)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name FreeVar(fvref=^6) -> $^6
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), FreeVar(fvref=^7)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name FreeVar(fvref=^7) -> $^7
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%5), FreeVar(fvref=^8)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name FreeVar(fvref=^8) -> $^8
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), FreeVar(fvref=^9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name FreeVar(fvref=^9) -> $^9
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%7), FreeVar(fvref=^10)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name FreeVar(fvref=^10) -> $^10
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Branch(cond=Insn(iref=%9), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^5) -> $^5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local FreeVar(fvref=^4) -> $^4
// [Wasm] Local FreeVar(fvref=^10) -> $^10
// [Wasm] Local FreeVar(fvref=^7) -> $^7
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local FreeVar(fvref=^6) -> $^6
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local FreeVar(fvref=^8) -> $^8
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local FreeVar(fvref=^3) -> $^3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local FreeVar(fvref=^9) -> $^9
// [Wasm] Lowered function g24.63_2 to wasm
// [KnfOpt] freq: {h1: Once, g24: Many(2), main39: Once}
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(h1)
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %11: Apply(ty=Int32, f=Self(fref=f2), args=[Insn(iref=%10)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f2: MaybeInClosure})
