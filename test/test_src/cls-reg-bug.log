// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v14, Insn(iref=%15) -> v19, Self(fref=f0) -> v0, Insn(iref=%9) -> v12, Insn(iref=%16) -> v20, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%14) -> v18, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%19) -> v23, Insn(iref=%4) -> v7, Insn(iref=%3) -> v6, Insn(iref=%18) -> v22, Insn(iref=%13) -> v17, Insn(iref=%7) -> v10, BlockParam(bref=b5, bpref=$b.0) -> v26, Insn(iref=%22) -> v25, Insn(iref=%17) -> v21, Insn(iref=%2) -> v5, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%1) -> v4, Insn(iref=%20) -> v24, Insn(iref=%11) -> v15, Insn(iref=%21) -> v27, Insn(iref=%6) -> v9, Insn(iref=%12) -> v16
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=0)])
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v51, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [zero, v52, v2]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v53, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [zero, v54, v2]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [zero, v55, v2]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v56, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [zero, v57, v2]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v58, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [zero, v59, v2]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v60]
// [Asm] live_set: [zero, v60, v2]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, zero, v8, v7, v4, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, zero, v8, v7, v4, v6, v12, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] move_origin: [v39]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v23]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [zero]
// [Asm] defined: v26 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v14, v5, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, v18, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v20, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v14, v5, v10, v21, v13, v7, v12, v9, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v14, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v5, v10, v13, zero, v23, v7, v8, v4, v6, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v5, v10, v13, zero, v27, v7, v8, v4, v6, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] move_origin: [v27]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.106"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r46 [label="v21 ← t3", color=green];
// [Asm]   r38 [label="v25 ← a0", color=green];
// [Asm]   r33 [label="t0", color=blue];
// [Asm]   r9 [label="v57 ← a1", color=green];
// [Asm]   r26 [label="a1", color=blue];
// [Asm]   r47 [label="v22 ← t3", color=green];
// [Asm]   r6 [label="v54 ← a1", color=green];
// [Asm]   r44 [label="v19 ← t3", color=green];
// [Asm]   r13 [label="v4 ← a1", color=green];
// [Asm]   r42 [label="v17 ← t3", color=green];
// [Asm]   r4 [label="v52 ← a1", color=green];
// [Asm]   r29 [label="a4", color=blue];
// [Asm]   r35 [label="t2", color=blue];
// [Asm]   r7 [label="v55 ← a1", color=green];
// [Asm]   r10 [label="v58 ← a1", color=green];
// [Asm]   r8 [label="v56 ← a1", color=green];
// [Asm]   r5 [label="v53 ← a1", color=green];
// [Asm]   r36 [label="t3", color=blue];
// [Asm]   r32 [label="a7", color=blue];
// [Asm]   r24 [label="v14 ← t2", color=green];
// [Asm]   r15 [label="v6 ← a3", color=green];
// [Asm]   r49 [label="v27 ← t2", color=green];
// [Asm]   r43 [label="v18 ← t3", color=green];
// [Asm]   r31 [label="a6", color=blue];
// [Asm]   r39 [label="v26 ← a0", color=green];
// [Asm]   r17 [label="v8 ← a5", color=green];
// [Asm]   r48 [label="v23 ← t3", color=green];
// [Asm]   r12 [label="v60 ← a1", color=green];
// [Asm]   r37 [label="t4", color=blue];
// [Asm]   r20 [label="v11 ← t0", color=green];
// [Asm]   r23 [label="v39 ← t2", color=green];
// [Asm]   r3 [label="v51 ← a1", color=green];
// [Asm]   r27 [label="a2", color=blue];
// [Asm]   r40 [label="v15 ← t3", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="a3", color=blue];
// [Asm]   r41 [label="v16 ← t3", color=green];
// [Asm]   r11 [label="v59 ← a1", color=green];
// [Asm]   r34 [label="t1", color=blue];
// [Asm]   r22 [label="v13 ← a0", color=green];
// [Asm]   r14 [label="v5 ← a2", color=green];
// [Asm]   r30 [label="a5", color=blue];
// [Asm]   r45 [label="v20 ← t3", color=green];
// [Asm]   r25 [label="a0", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="v7 ← a4", color=green];
// [Asm]   r18 [label="v9 ← a6", color=green];
// [Asm]   r19 [label="v10 ← a7", color=green];
// [Asm]   r21 [label="v12 ← t1", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r17 -- r42;
// [Asm]   r18 -- r49;
// [Asm]   r16 -- r20;
// [Asm]   r15 -- r43;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r30;
// [Asm]   r24 -- r40;
// [Asm]   r14 -- r43;
// [Asm]   r18 -- r42;
// [Asm]   r15 -- r45;
// [Asm]   r1 -- r45;
// [Asm]   r14 -- r40;
// [Asm]   r15 -- r42;
// [Asm]   r18 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r18 -- r45;
// [Asm]   r0 -- r16;
// [Asm]   r18 -- r44;
// [Asm]   r17 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r17 -- r44;
// [Asm]   r19 -- r45;
// [Asm]   r24 -- r45;
// [Asm]   r24 -- r41;
// [Asm]   r20 -- r22;
// [Asm]   r25 -- r29;
// [Asm]   r19 -- r41;
// [Asm]   r1 -- r48;
// [Asm]   r17 -- r49;
// [Asm]   r21 -- r48;
// [Asm]   r0 -- r9;
// [Asm]   r25 -- r32;
// [Asm]   r24 -- r42;
// [Asm]   r24 -- r44;
// [Asm]   r19 -- r22;
// [Asm]   r1 -- r40;
// [Asm]   r18 -- r46;
// [Asm]   r13 -- r41;
// [Asm]   r19 -- r47;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r16 -- r41;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r20 -- r40;
// [Asm]   r16 -- r21;
// [Asm]   r25 -- r37;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r20 -- r45;
// [Asm]   r16 -- r24;
// [Asm]   r22 -- r44;
// [Asm]   r24 -- r46;
// [Asm]   r15 -- r47;
// [Asm]   r21 -- r46;
// [Asm]   r14 -- r15;
// [Asm]   r18 -- r43;
// [Asm]   r14 -- r44;
// [Asm]   r22 -- r43;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r14 -- r49;
// [Asm]   r16 -- r47;
// [Asm]   r0 -- r15;
// [Asm]   r19 -- r40;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r48;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r22 -- r47;
// [Asm]   r1 -- r22;
// [Asm]   r19 -- r48;
// [Asm]   r16 -- r43;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r18 -- r40;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r14 -- r41;
// [Asm]   r13 -- r48;
// [Asm]   r0 -- r19;
// [Asm]   r14 -- r46;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r19;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r23;
// [Asm]   r20 -- r48;
// [Asm]   r25 -- r35;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r13 -- r14;
// [Asm]   r25 -- r34;
// [Asm]   r24 -- r43;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r19 -- r43;
// [Asm]   r15 -- r24;
// [Asm]   r18 -- r47;
// [Asm]   r16 -- r46;
// [Asm]   r15 -- r48;
// [Asm]   r13 -- r47;
// [Asm]   r20 -- r42;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r0 -- r20;
// [Asm]   r16 -- r49;
// [Asm]   r17 -- r46;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r18 -- r23;
// [Asm]   r21 -- r43;
// [Asm]   r25 -- r28;
// [Asm]   r0 -- r13;
// [Asm]   r15 -- r41;
// [Asm]   r19 -- r44;
// [Asm]   r17 -- r21;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r37;
// [Asm]   r22 -- r40;
// [Asm]   r13 -- r44;
// [Asm]   r14 -- r16;
// [Asm]   r17 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r13 -- r49;
// [Asm]   r17 -- r41;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r19 -- r21;
// [Asm]   r16 -- r17;
// [Asm]   r13 -- r40;
// [Asm]   r1 -- r46;
// [Asm]   r1 -- r31;
// [Asm]   r14 -- r19;
// [Asm]   r22 -- r41;
// [Asm]   r15 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r13 -- r43;
// [Asm]   r17 -- r22;
// [Asm]   r1 -- r27;
// [Asm]   r19 -- r42;
// [Asm]   r13 -- r18;
// [Asm]   r15 -- r44;
// [Asm]   r13 -- r22;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r6;
// [Asm]   r16 -- r42;
// [Asm]   r1 -- r44;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r16 -- r23;
// [Asm]   r22 -- r46;
// [Asm]   r14 -- r22;
// [Asm]   r16 -- r22;
// [Asm]   r17 -- r20;
// [Asm]   r25 -- r33;
// [Asm]   r13 -- r24;
// [Asm]   r17 -- r18;
// [Asm]   r15 -- r46;
// [Asm]   r20 -- r24;
// [Asm]   r24 -- r48;
// [Asm]   r25 -- r36;
// [Asm]   r17 -- r43;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r20 -- r43;
// [Asm]   r13 -- r42;
// [Asm]   r15 -- r49;
// [Asm]   r13 -- r46;
// [Asm]   r1 -- r23;
// [Asm]   r16 -- r45;
// [Asm]   r21 -- r40;
// [Asm]   r15 -- r22;
// [Asm]   r22 -- r42;
// [Asm]   r24 -- r47;
// [Asm]   r13 -- r45;
// [Asm]   r14 -- r42;
// [Asm]   r14 -- r23;
// [Asm]   r25 -- r27;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r25 -- r30;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r26;
// [Asm]   r19 -- r24;
// [Asm]   r16 -- r40;
// [Asm]   r18 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r21 -- r47;
// [Asm]   r19 -- r46;
// [Asm]   r21 -- r44;
// [Asm]   r20 -- r46;
// [Asm]   r22 -- r49;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r22 -- r45;
// [Asm]   r14 -- r47;
// [Asm]   r20 -- r41;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r19 -- r23;
// [Asm]   r15 -- r17;
// [Asm]   r19 -- r49;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r20 -- r47;
// [Asm]   r15 -- r40;
// [Asm]   r22 -- r23;
// [Asm]   r21 -- r42;
// [Asm]   r18 -- r48;
// [Asm]   r16 -- r44;
// [Asm]   r18 -- r41;
// [Asm]   r21 -- r49;
// [Asm]   r14 -- r45;
// [Asm]   r21 -- r41;
// [Asm]   r22 -- r48;
// [Asm]   r20 -- r49;
// [Asm]   r0 -- r12;
// [Asm]   r17 -- r45;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r20 -- r44;
// [Asm]   r15 -- r16;
// [Asm]   r16 -- r48;
// [Asm]   r14 -- r48;
// [Asm]   r19 -- r20;
// [Asm]   r17 -- r47;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v51-> 4:v52-> 5:v53-> 6:v54-> 7:v55-> 8:v56-> 9:v57-> 10:v58-> 11:v59-> 12:v60-> 13:v4-> 14:v5-> 15:v6-> 16:v7-> 17:v8-> 18:v9-> 19:v10-> 20:v11-> 21:v12-> 22:v13-> 23:v39-> 24:v14-> 40:v15-> 41:v16-> 42:v17-> 43:v18-> 44:v19-> 45:v20-> 46:v21-> 47:v22-> 48:v23-> 49:v27-> 25:a0-> 26:a1-> 27:a2-> 28:a3-> 29:a4-> 30:a5-> 31:a6-> 32:a7-> 33:t0-> 34:t1-> 35:t2-> 36:t3-> 37:t4-> 38:v25-> 39:v26"
// [Asm]   comment = "v2<-a0;v21<-t3;v25<-a0;v57<-a1;v22<-t3;v54<-a1;v19<-t3;v4<-a1;v17<-t3;v52<-a1;v55<-a1;v58<-a1;v56<-a1;v53<-a1;v14<-t2;v6<-a3;v27<-t2;v18<-t3;v26<-a0;v8<-a5;v23<-t3;v60<-a1;v11<-t0;v39<-t2;v51<-a1;v15<-t3;v16<-t3;v59<-a1;v13<-a0;v5<-a2;v20<-t3;v7<-a4;v9<-a6;v10<-a7;v12<-t1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.106"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v51, 1 ->   li a1, 1
// [Asm] subst   sw v51, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v52, 2 ->   li a1, 2
// [Asm] subst   sw v52, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v53, 3 ->   li a1, 3
// [Asm] subst   sw v53, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   li v54, 4 ->   li a1, 4
// [Asm] subst   sw v54, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   li v55, 5 ->   li a1, 5
// [Asm] subst   sw v55, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   li v56, 6 ->   li a1, 6
// [Asm] subst   sw v56, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   li v57, 7 ->   li a1, 7
// [Asm] subst   sw v57, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   li v58, 8 ->   li a1, 8
// [Asm] subst   sw v58, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   li v59, 9 ->   li a1, 9
// [Asm] subst   sw v59, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   li v60, 10 ->   li a1, 10
// [Asm] subst   sw v60, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   lw v4, 0(v2) ->   lw a1, 0(a0)
// [Asm] subst   lw v5, 4(v2) ->   lw a2, 4(a0)
// [Asm] subst   lw v6, 8(v2) ->   lw a3, 8(a0)
// [Asm] subst   lw v7, 12(v2) ->   lw a4, 12(a0)
// [Asm] subst   lw v8, 16(v2) ->   lw a5, 16(a0)
// [Asm] subst   lw v9, 20(v2) ->   lw a6, 20(a0)
// [Asm] subst   lw v10, 24(v2) ->   lw a7, 24(a0)
// [Asm] subst   lw v11, 28(v2) ->   lw t0, 28(a0)
// [Asm] subst   lw v12, 32(v2) ->   lw t1, 32(a0)
// [Asm] subst   lw v13, 36(v2) ->   lw a0, 36(a0)
// [Asm] subst   li v39, 1 ->   li t2, 1
// [Asm] subst   mv a0, v23 ->   mv a0, t3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv v26, zero ->   mv a0, zero
// [Asm] subst   add v15, v4, v5 ->   add t3, a1, a2
// [Asm] subst   add v16, v15, v6 ->   add t3, t3, a3
// [Asm] subst   add v17, v16, v7 ->   add t3, t3, a4
// [Asm] subst   add v18, v17, v8 ->   add t3, t3, a5
// [Asm] subst   add v19, v18, v9 ->   add t3, t3, a6
// [Asm] subst   add v20, v19, v10 ->   add t3, t3, a7
// [Asm] subst   add v21, v20, v11 ->   add t3, t3, t0
// [Asm] subst   add v22, v21, v12 ->   add t3, t3, t1
// [Asm] subst   add v23, v22, v13 ->   add t3, t3, a0
// [Asm] subst   blt zero, v14, .main.106_4 ->   blt zero, t2, .main.106_4
// [Asm] subst   neg v27, v14 ->   neg t2, t2
// [Asm] subst   j .main.106_2 ->   j .main.106_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.106 ->   call main.106
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.106  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.106:
// [Asm] # block info: defs: [v11, v58, v5, v14, v10, v53, v13, v7, s11, v52, v12, v9, v60, v39, v51, v56, v8, v59, v4, v6, v57, v55, v54, v2], uses: [v60, v39, v2, v51, v58, v53, v56, v59, s11, v52, v57, v55, v54], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] # block parameters: []
// [Asm] .main.106_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v51, 1  # live: [v51, zero, v2]
// [Asm]   sw v51, 0(v2)  # live: [zero, v2]
// [Asm]   li v52, 2  # live: [zero, v52, v2]
// [Asm]   sw v52, 4(v2)  # live: [zero, v2]
// [Asm]   li v53, 3  # live: [v53, zero, v2]
// [Asm]   sw v53, 8(v2)  # live: [zero, v2]
// [Asm]   li v54, 4  # live: [zero, v54, v2]
// [Asm]   sw v54, 12(v2)  # live: [zero, v2]
// [Asm]   li v55, 5  # live: [zero, v55, v2]
// [Asm]   sw v55, 16(v2)  # live: [zero, v2]
// [Asm]   li v56, 6  # live: [v56, zero, v2]
// [Asm]   sw v56, 20(v2)  # live: [zero, v2]
// [Asm]   li v57, 7  # live: [zero, v57, v2]
// [Asm]   sw v57, 24(v2)  # live: [zero, v2]
// [Asm]   li v58, 8  # live: [v58, zero, v2]
// [Asm]   sw v58, 28(v2)  # live: [zero, v2]
// [Asm]   li v59, 9  # live: [zero, v59, v2]
// [Asm]   sw v59, 32(v2)  # live: [zero, v2]
// [Asm]   li v60, 10  # live: [zero, v60, v2]
// [Asm]   sw v60, 36(v2)  # live: [zero, v2]
// [Asm]   lw v4, 0(v2)  # live: [zero, v4, v2]
// [Asm]   lw v5, 4(v2)  # live: [v5, zero, v4, v2]
// [Asm]   lw v6, 8(v2)  # live: [v5, zero, v4, v6, v2]
// [Asm]   lw v7, 12(v2)  # live: [v5, zero, v7, v4, v6, v2]
// [Asm]   lw v8, 16(v2)  # live: [v5, zero, v8, v7, v4, v6, v2]
// [Asm]   lw v9, 20(v2)  # live: [v5, zero, v8, v7, v4, v6, v9, v2]
// [Asm]   lw v10, 24(v2)  # live: [v5, v10, zero, v8, v7, v4, v6, v9, v2]
// [Asm]   lw v11, 28(v2)  # live: [v11, v5, v10, zero, v8, v7, v4, v6, v9, v2]
// [Asm]   lw v12, 32(v2)  # live: [v11, v5, v10, zero, v8, v7, v4, v6, v12, v9, v2]
// [Asm]   lw v13, 36(v2)  # live: [v11, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] # control
// [Asm]   li v39, 1  # live: [v11, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9, v39]
// [Asm]   mv v14, v39  # live: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v16, v18, v21, v20, v22, v23, v19, v17, v15], uses: [v11, v5, v16, v14, v21, v10, v13, v22, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15], upward_exposed: [v11, v5, v14, v10, v13, zero, v8, v7, v4, v6, v12, v9], params_defs: [v14]
// [Asm] # live_in: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9], live_out: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v4, v6]
// [Asm] # block parameters: [v14]
// [Asm] .main.106_2:
// [Asm]   add v15, v4, v5  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15]
// [Asm]   add v16, v15, v6  # live: [v11, v14, v5, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6]
// [Asm]   add v17, v16, v7  # live: [v11, v14, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6]
// [Asm]   add v18, v17, v8  # live: [v11, v14, v5, v10, v13, v7, v12, v9, v18, zero, v8, v4, v6]
// [Asm]   add v19, v18, v9  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v19, v4, v6]
// [Asm]   add v20, v19, v10  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v20, v8, v4, v6]
// [Asm]   add v21, v20, v11  # live: [v11, v14, v5, v10, v21, v13, v7, v12, v9, zero, v8, v4, v6]
// [Asm]   add v22, v21, v12  # live: [v11, v14, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6]
// [Asm]   add v23, v22, v13  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v4, v6]
// [Asm] # control
// [Asm]   blt zero, v14, .main.106_4  # live: [v11, v14, v5, v10, v13, zero, v23, v7, v8, v4, v6, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v14, v27], uses: [v14, v27], upward_exposed: [v14], params_defs: []
// [Asm] # live_in: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9], live_out: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] # block parameters: []
// [Asm] .main.106_3:
// [Asm]   neg v27, v14  # live: [v11, v5, v10, v13, zero, v27, v7, v8, v4, v6, v12, v9]
// [Asm] # control
// [Asm]   mv v14, v27  # live: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm]   j .main.106_2  # live: [v11, v14, v5, v10, v13, zero, v8, v7, v4, v6, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero, v23], upward_exposed: [zero, v23], params_defs: []
// [Asm] # live_in: [zero, v23], live_out: [v26]
// [Asm] # block parameters: []
// [Asm] .main.106_4:
// [Asm]   # save_ctx2  # live: [zero, v23]
// [Asm]   mv a0, v23  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v25, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v26, zero  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v26, a0], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: []
// [Asm] # block parameters: [v26]
// [Asm] .main.106_5:
// [Asm] # control
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("h", Int), args: [("p", Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]))], body: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), [])))
// [Knf] build_knf: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))
// [Knf] build_knf: Var("p")
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)]))
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("v1"), Var("v2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("v3")
// [Knf] build_knf: Var("v4")
// [Knf] build_knf: Var("v5")
// [Knf] build_knf: Var("v6")
// [Knf] build_knf: Var("v7")
// [Knf] build_knf: Var("v8")
// [Knf] build_knf: Var("v9")
// [Knf] build_knf: Var("v10")
// [Knf] build_knf: If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("z"), Int(0)), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]), Var("r"))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Neg(Var("z"), kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: App(Var("g"), [Int(1)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), []))
// [Knf] build_knf: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])])
// [Knf] build_knf: App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(7)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%21)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%20), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=1)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _39 = r.103
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.106
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.106
// [Main]   .type main.106, @function
// [Main] # leaf false
// [Main] main.106:
// [Main] .main.106_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sw a1, 12(a0)
// [Main]   li a1, 5
// [Main]   sw a1, 16(a0)
// [Main]   li a1, 6
// [Main]   sw a1, 20(a0)
// [Main]   li a1, 7
// [Main]   sw a1, 24(a0)
// [Main]   li a1, 8
// [Main]   sw a1, 28(a0)
// [Main]   li a1, 9
// [Main]   sw a1, 32(a0)
// [Main]   li a1, 10
// [Main]   sw a1, 36(a0)
// [Main]   lw a1, 0(a0)
// [Main]   lw a2, 4(a0)
// [Main]   lw a3, 8(a0)
// [Main]   lw a4, 12(a0)
// [Main]   lw a5, 16(a0)
// [Main]   lw a6, 20(a0)
// [Main]   lw a7, 24(a0)
// [Main]   lw t0, 28(a0)
// [Main]   lw t1, 32(a0)
// [Main]   lw a0, 36(a0)
// [Main]   li t2, 1
// [Main] 
// [Main] .main.106_2:
// [Main]   add t3, a1, a2
// [Main]   add t3, t3, a3
// [Main]   add t3, t3, a4
// [Main]   add t3, t3, a5
// [Main]   add t3, t3, a6
// [Main]   add t3, t3, a7
// [Main]   add t3, t3, t0
// [Main]   add t3, t3, t1
// [Main]   add t3, t3, a0
// [Main]   blt zero, t2, .main.106_4
// [Main] 
// [Main] .main.106_3:
// [Main]   neg t2, t2
// [Main]   j .main.106_2
// [Main] 
// [Main] .main.106_4:
// [Main]   mv a0, t3
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.106_5:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.106
// [Wasm] Lowering insn Op(ty=Int32, op=Neg, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%12), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%13), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%14), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%16), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%17), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%18), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering control Branch(cond=Insn(iref=%20), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Int32(val=2)), Field(index=2, val=Int32(val=3)), Field(index=3, val=Int32(val=4)), Field(index=4, val=Int32(val=5)), Field(index=5, val=Int32(val=6)), Field(index=6, val=Int32(val=7)), Field(index=7, val=Int32(val=8)), Field(index=8, val=Int32(val=9)), Field(index=9, val=Int32(val=10))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=0, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=1, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=2, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=3, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=4, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=5, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=6, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=7, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=8, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=9, width=@(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32))))))))))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.106 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: h.1 false
// [KnfOpt] func_tre: g.13 true
// [KnfOpt] func_tre: main.27 false
// [KnfOpt] freq: {h.1: Once, g.13: Once, g.41: Many(2), main.27: Once}
// [KnfOpt] Knf inline Some(g) Unit
// [KnfOpt] Knf inline Some(h) let _39: Int = Unit
// [KnfOpt] let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
// [KnfOpt] Unit
// [KnfOpt] freq: {main.27: Once, g.77: Once, g.79: Many(2)}
// [KnfOpt] Knf inline Some(g) let _39: Int = Unit
// [KnfOpt] let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
// [KnfOpt] Unit
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
