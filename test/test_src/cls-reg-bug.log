// [Knf] build_knf: LetRec({name: ("h", Int), args: [("p", Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]))], body: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), [])))
// [Knf] build_knf: LetTuple([("v1", Var({val: Some(Int)})), ("v2", Var({val: Some(Int)})), ("v3", Var({val: Some(Int)})), ("v4", Var({val: Some(Int)})), ("v5", Var({val: Some(Int)})), ("v6", Var({val: Some(Int)})), ("v7", Var({val: Some(Int)})), ("v8", Var({val: Some(Int)})), ("v9", Var({val: Some(Int)})), ("v10", Var({val: Some(Int)}))], Var("p"), LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))
// [Knf] build_knf: Var("p")
// [Knf] build_knf: LetRec({name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)]))
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("v1"), Var("v2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("v3")
// [Knf] build_knf: Var("v4")
// [Knf] build_knf: Var("v5")
// [Knf] build_knf: Var("v6")
// [Knf] build_knf: Var("v7")
// [Knf] build_knf: Var("v8")
// [Knf] build_knf: Var("v9")
// [Knf] build_knf: Var("v10")
// [Knf] build_knf: If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("z"), Int(0)), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]), Var("r"))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Neg(Var("z"), kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: App(Var("g"), [Int(1)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), []))
// [Knf] build_knf: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])])
// [Knf] build_knf: App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(7)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function h1(p2_3, k) {
// [Main]     const [v14_5, v26_7, v38_9, v410_11, v512_13, v614_15, v716_17, v818_19, v920_21, v1022_23] = p2_3;function g24(z25_26, k) {
// [Main]       const _27 = v14_5 + v26_7;
// [Main]       const _28 = _27 + v38_9;
// [Main]       const _29 = _28 + v410_11;
// [Main]       const _30 = _29 + v512_13;
// [Main]       const _31 = _30 + v614_15;
// [Main]       const _32 = _31 + v716_17;
// [Main]       const _33 = _32 + v818_19;
// [Main]       const _34 = _33 + v920_21;
// [Main]       const r_35 = _34 + v1022_23;
// [Main]       const _36 = 0;
// [Main]       if (z25_26 <= _36) {
// [Main]         const _37 = -z25_26;
// [Main]         return $thunk(() => g24(_37, k))
// [Main]       } else {
// [Main]         return k(r_35)
// [Main]       }
// [Main]     }
// [Main]     const _38 = 1;
// [Main]     return $thunk(() => g24(_38, k))
// [Main]   }
// [Main]   function main39(k) {
// [Main]     const _40 = 1;
// [Main]     const _41 = 2;
// [Main]     const _42 = 3;
// [Main]     const _43 = 4;
// [Main]     const _44 = 5;
// [Main]     const _45 = 6;
// [Main]     const _46 = 7;
// [Main]     const _47 = 8;
// [Main]     const _48 = 9;
// [Main]     const _49 = 10;
// [Main]     const _50 = [_40, _41, _42, _43, _44, _45, _46, _47, _48, _49];
// [Main]     return $thunk(() => h1(_50, function (_51) {
// [Main]       const t1_52 = minimbt_print_int($force(_51));
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main39(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
