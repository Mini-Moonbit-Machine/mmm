// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%10) -> v14, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8, Insn(iref=%3) -> v7, Insn(iref=%13) -> v17, Insn(iref=%7) -> v11, Mem(fref=f0, mref=m1) -> v3, Insn(iref=%2) -> v6, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%1) -> v5, Insn(iref=%11) -> v15, Insn(iref=%6) -> v10, Insn(iref=%12) -> v16
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [s11, zero, v35, v2]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v36]
// [Asm] live_set: [v36, s11, zero, v2]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v37]
// [Asm] live_set: [v37, s11, zero, v2]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v38]
// [Asm] live_set: [s11, zero, v38, v2]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v39]
// [Asm] live_set: [s11, v39, zero, v2]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v40]
// [Asm] live_set: [v40, s11, zero, v2]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v41]
// [Asm] live_set: [v41, s11, zero, v2]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v42]
// [Asm] live_set: [v42, s11, zero, v2]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v43]
// [Asm] live_set: [v43, s11, zero, v2]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v44]
// [Asm] live_set: [s11, v44, zero, v2]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v5]
// [Asm] live_set: [v5, s11, zero, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, s11, zero, v6, v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, v7, s11, zero, v6, v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, v7, s11, zero, v8, v6, v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v7, s11, v9, zero, v8, v6, v2]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6]
// [Asm] defined: v14 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v6, v3]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v5, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v7, v12, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v8, v12, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v12, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v10, zero, v13, v12, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v14, zero, v13, v12, v3]
// [Asm] defs: []
// [Asm] live_set: [v14, v12, zero, v13, v3]
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v13, v3]
// [Asm] defs: []
// [Asm] live_set: [v14, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: [v19]
// [Asm] live_set: [v19, zero, v3]
// [Asm] defined: v19 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v19, zero]
// [Asm] move: s10 <- v3
// [Asm] defined: s10 is X
// [Asm] defs: []
// [Asm] live_set: [v19, zero]
// [Asm] defs: [v20]
// [Asm] live_set: [v19, zero, v20]
// [Asm] defined: v20 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v19, zero, a0]
// [Asm] move: a0 <- v20
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] move: v16 <- a0
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v16
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [zero]
// [Asm] move: v17 <- a0
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.77") clobbered_x: @hashset.of([t3, a7, t1, t0, a5, a0, a4, a6, a2, a1, t2, a3])
// [Asm] Label("main.77") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v35, 1 ->   li a1, 1
// [Asm] subst   sw v35, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v36, 2 ->   li a1, 2
// [Asm] subst   sw v36, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v37, 3 ->   li a1, 3
// [Asm] subst   sw v37, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   li v38, 4 ->   li a1, 4
// [Asm] subst   sw v38, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   li v39, 5 ->   li a1, 5
// [Asm] subst   sw v39, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   li v40, 6 ->   li a1, 6
// [Asm] subst   sw v40, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   li v41, 7 ->   li a1, 7
// [Asm] subst   sw v41, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   li v42, 8 ->   li a1, 8
// [Asm] subst   sw v42, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   li v43, 9 ->   li a1, 9
// [Asm] subst   sw v43, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   li v44, 10 ->   li a1, 10
// [Asm] subst   sw v44, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   lw v5, 0(v2) ->   lw a1, 0(a0)
// [Asm] subst   lw v6, 4(v2) ->   lw a2, 4(a0)
// [Asm] subst   lw v7, 8(v2) ->   lw a3, 8(a0)
// [Asm] subst   lw v8, 12(v2) ->   lw a4, 12(a0)
// [Asm] subst   lw v9, 16(v2) ->   lw a5, 16(a0)
// [Asm] subst   lw v10, 20(v2) ->   lw a6, 20(a0)
// [Asm] subst   lw v11, 24(v2) ->   lw a7, 24(a0)
// [Asm] subst   lw v12, 28(v2) ->   lw t0, 28(a0)
// [Asm] subst   lw v13, 32(v2) ->   lw t1, 32(a0)
// [Asm] subst   lw v14, 36(v2) ->   lw a0, 36(a0)
// [Asm] subst   addi v3, s11, -88 ->   addi t2, s11, -88
// [Asm] subst   andi s11, v3, -8 ->   andi s11, t2, -8
// [Asm] subst   la v23, g.63 ->   la t3, g.63
// [Asm] subst   sd v23, 0(v3) ->   sd t3, 0(t2)
// [Asm] subst   sd v5, 8(v3) ->   sd a1, 8(t2)
// [Asm] subst   sd v6, 16(v3) ->   sd a2, 16(t2)
// [Asm] subst   sd v7, 24(v3) ->   sd a3, 24(t2)
// [Asm] subst   sd v8, 32(v3) ->   sd a4, 32(t2)
// [Asm] subst   sd v9, 40(v3) ->   sd a5, 40(t2)
// [Asm] subst   sd v10, 48(v3) ->   sd a6, 48(t2)
// [Asm] subst   sd v11, 56(v3) ->   sd a7, 56(t2)
// [Asm] subst   sd v12, 64(v3) ->   sd t0, 64(t2)
// [Asm] subst   sd v13, 72(v3) ->   sd t1, 72(t2)
// [Asm] subst   sd v14, 80(v3) ->   sd a0, 80(t2)
// [Asm] subst   ld v19, 0(v3) ->   ld a1, 0(t2)
// [Asm] subst   mv s10, v3 ->   mv s10, t2
// [Asm] subst   li v20, 1 ->   li a0, 1
// [Asm] subst   jalr v19 ->   jalr a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: FreeVar(fvref=^5) -> v7, BlockParam(bref=b3, bpref=$b.0) -> v24, Insn(iref=%9) -> v23, Self(fref=f2) -> v0, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%8) -> v22, Insn(iref=%10) -> v25, BlockParam(bref=b0, bpref=$b.0) -> v13, FreeVar(fvref=^4) -> v6, FreeVar(fvref=^10) -> v12, FreeVar(fvref=^7) -> v9, Insn(iref=%5) -> v19, Insn(iref=%0) -> v14, Insn(iref=%4) -> v18, FreeVar(fvref=^6) -> v8, Insn(iref=%3) -> v17, FreeVar(fvref=^8) -> v10, Insn(iref=%7) -> v21, Insn(iref=%2) -> v16, Insn(iref=%1) -> v15, FreeVar(fvref=^3) -> v5, Insn(iref=%6) -> v20, FnParam(fref=f2, fpref=$f.0) -> v2, FreeVar(fvref=^9) -> v11
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move: v24 <- v22
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] defined: v25 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move: v13 <- v25
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0, v0]
// [Asm] move: v0 <- s10
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v0, v4, v6, v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, zero, v7, v8, v0, v4, v6, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] move: v13 <- v2
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v5, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v19, v4, v6, v3]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v10, v13, v7, v12, v9, zero, v20, v8, v4, v6, v3]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v5, v10, v21, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, v13, zero, v22, v7, v8, v4, v6, v12, v9, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v24
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("g.63") clobbered_x: @hashset.of([t3, a7, t1, t0, a5, a0, a4, a6, a2, a1, t2, a3])
// [Asm] Label("g.63") clobbered_f: @hashset.of([])
// [Asm] subst   neg v25, v13 ->   neg a0, a1
// [Asm] subst   mv v13, v25 ->   mv a1, a0
// [Asm] subst   j .g.63_0 ->   j .g.63_0
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw t3, 8(a1)
// [Asm] subst   lw v4, 16(v0) ->   lw a7, 16(a1)
// [Asm] subst   lw v5, 24(v0) ->   lw a3, 24(a1)
// [Asm] subst   lw v6, 32(v0) ->   lw t0, 32(a1)
// [Asm] subst   lw v7, 40(v0) ->   lw a5, 40(a1)
// [Asm] subst   lw v8, 48(v0) ->   lw a6, 48(a1)
// [Asm] subst   lw v9, 56(v0) ->   lw t2, 56(a1)
// [Asm] subst   lw v10, 64(v0) ->   lw a4, 64(a1)
// [Asm] subst   lw v11, 72(v0) ->   lw a2, 72(a1)
// [Asm] subst   lw v12, 80(v0) ->   lw t1, 80(a1)
// [Asm] subst   mv v13, v2 ->   mv a1, a0
// [Asm] subst   add v14, v3, v4 ->   add a0, t3, a7
// [Asm] subst   add v15, v14, v5 ->   add a0, a0, a3
// [Asm] subst   add v16, v15, v6 ->   add a0, a0, t0
// [Asm] subst   add v17, v16, v7 ->   add a0, a0, a5
// [Asm] subst   add v18, v17, v8 ->   add a0, a0, a6
// [Asm] subst   add v19, v18, v9 ->   add a0, a0, t2
// [Asm] subst   add v20, v19, v10 ->   add a0, a0, a4
// [Asm] subst   add v21, v20, v11 ->   add a0, a0, a2
// [Asm] subst   add v22, v21, v12 ->   add a0, a0, t1
// [Asm] subst   blt zero, v13, .g.63_2 ->   blt zero, a1, .g.63_2
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.77:
// [Asm] # block info: defs: [a1, s11, v44, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, v6, ft4, v5, v10, ft9, fa4, ft2, v37, v43, v17, a3, a7, fa7, fa3, ft3, t2, v3, v40, t1, v14, v16, v13, v42, v7, v41, ft0, ft1, v12, v8, v19, ft7, v11, a5, a0, v36, a2, v9, s10, v39, ft8, t3, t0, fa5, v23, v35, fa0, t4, v38, v2], uses: [v3, v40, v14, v16, v13, v42, v7, v41, s11, v12, v44, zero, v20, v8, v19, v6, v11, v5, v10, a0, v36, v37, v43, v9, v39, v23, v35, v38, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.77_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v35, 1  # live: [s11, zero, v35, v2]
// [Asm]   sw v35, 0(v2)  # live: [s11, zero, v2]
// [Asm]   li v36, 2  # live: [v36, s11, zero, v2]
// [Asm]   sw v36, 4(v2)  # live: [s11, zero, v2]
// [Asm]   li v37, 3  # live: [v37, s11, zero, v2]
// [Asm]   sw v37, 8(v2)  # live: [s11, zero, v2]
// [Asm]   li v38, 4  # live: [s11, zero, v38, v2]
// [Asm]   sw v38, 12(v2)  # live: [s11, zero, v2]
// [Asm]   li v39, 5  # live: [s11, v39, zero, v2]
// [Asm]   sw v39, 16(v2)  # live: [s11, zero, v2]
// [Asm]   li v40, 6  # live: [v40, s11, zero, v2]
// [Asm]   sw v40, 20(v2)  # live: [s11, zero, v2]
// [Asm]   li v41, 7  # live: [v41, s11, zero, v2]
// [Asm]   sw v41, 24(v2)  # live: [s11, zero, v2]
// [Asm]   li v42, 8  # live: [v42, s11, zero, v2]
// [Asm]   sw v42, 28(v2)  # live: [s11, zero, v2]
// [Asm]   li v43, 9  # live: [v43, s11, zero, v2]
// [Asm]   sw v43, 32(v2)  # live: [s11, zero, v2]
// [Asm]   li v44, 10  # live: [s11, v44, zero, v2]
// [Asm]   sw v44, 36(v2)  # live: [s11, zero, v2]
// [Asm]   lw v5, 0(v2)  # live: [v5, s11, zero, v2]
// [Asm]   lw v6, 4(v2)  # live: [v5, s11, zero, v6, v2]
// [Asm]   lw v7, 8(v2)  # live: [v5, v7, s11, zero, v6, v2]
// [Asm]   lw v8, 12(v2)  # live: [v5, v7, s11, zero, v8, v6, v2]
// [Asm]   lw v9, 16(v2)  # live: [v5, v7, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v10, 20(v2)  # live: [v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v11, 24(v2)  # live: [v11, v5, v10, v7, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v12, 28(v2)  # live: [v11, v5, v10, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v13, 32(v2)  # live: [v11, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6, v2]
// [Asm]   lw v14, 36(v2)  # live: [v11, v14, v5, v10, v13, v7, v12, s11, v9, zero, v8, v6]
// [Asm]   addi v3, s11, -88  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm]   andi s11, v3, -8  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v8, v6, v3]
// [Asm]   la v23, g.63  # live: [v11, v14, v5, v10, v13, v7, v12, v9, zero, v23, v8, v6, v3]
// [Asm]   sd v23, 0(v3)  # live: [v11, v14, v5, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm]   sd v5, 8(v3)  # live: [v11, v14, v10, zero, v13, v8, v7, v6, v12, v9, v3]
// [Asm]   sd v6, 16(v3)  # live: [v11, v14, v10, zero, v13, v8, v7, v12, v9, v3]
// [Asm]   sd v7, 24(v3)  # live: [v11, v14, v10, zero, v13, v8, v12, v9, v3]
// [Asm]   sd v8, 32(v3)  # live: [v11, v14, v10, zero, v13, v12, v9, v3]
// [Asm]   sd v9, 40(v3)  # live: [v11, v14, v10, zero, v13, v12, v3]
// [Asm]   sd v10, 48(v3)  # live: [v11, v14, zero, v13, v12, v3]
// [Asm]   sd v11, 56(v3)  # live: [v14, v12, zero, v13, v3]
// [Asm]   sd v12, 64(v3)  # live: [v14, zero, v13, v3]
// [Asm]   sd v13, 72(v3)  # live: [v14, zero, v3]
// [Asm]   sd v14, 80(v3)  # live: [zero, v3]
// [Asm]   ld v19, 0(v3)  # live: [v19, zero, v3]
// [Asm]   mv s10, v3  # live: [v19, zero]
// [Asm]   # save_ctx2  # live: [v19, zero]
// [Asm]   li v20, 1  # live: [v19, zero, v20]
// [Asm]   mv a0, v20  # live: [v19, zero, a0]
// [Asm]   jalr v19  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [v16, zero]
// [Asm]   # restore_ctx2  # live: [v16, zero]
// [Asm]   # save_ctx2  # live: [v16, zero]
// [Asm]   mv a0, v16  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v17, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] g.63:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v0, v4, v6, v12, v9, v3], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # block parameters: []
// [Asm] .g.63_5:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [zero, a0, v0]
// [Asm]   mv v2, a0  # live: [zero, v0, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, zero, v0, v3]
// [Asm]   lw v4, 16(v0)  # live: [v2, zero, v0, v4, v3]
// [Asm]   lw v5, 24(v0)  # live: [v2, v5, zero, v0, v4, v3]
// [Asm]   lw v6, 32(v0)  # live: [v2, v5, zero, v0, v4, v6, v3]
// [Asm]   lw v7, 40(v0)  # live: [v2, v5, zero, v7, v0, v4, v6, v3]
// [Asm]   lw v8, 48(v0)  # live: [v2, v5, zero, v7, v8, v0, v4, v6, v3]
// [Asm]   lw v9, 56(v0)  # live: [v2, v5, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   lw v10, 64(v0)  # live: [v2, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   lw v11, 72(v0)  # live: [v2, v11, v5, v10, zero, v7, v8, v0, v4, v6, v9, v3]
// [Asm]   lw v12, 80(v0)  # live: [v2, v11, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # control
// [Asm]   mv v13, v2  # live: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v18, v21, v20, v22, v19, v17, v15], uses: [v11, v14, v5, v16, v10, v21, v13, v7, v17, v12, v9, v18, zero, v20, v8, v19, v4, v6, v15, v3], upward_exposed: [v11, v5, v10, zero, v13, v7, v8, v4, v6, v12, v9, v3], params_defs: [v13]
// [Asm] # live_in: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3], live_out: [v11, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] # block parameters: [v13]
// [Asm] .g.63_0:
// [Asm]   add v14, v3, v4  # live: [v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v15, v14, v5  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   add v16, v15, v6  # live: [v11, v5, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v17, v16, v7  # live: [v11, v5, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v18, v17, v8  # live: [v11, v5, v10, v13, v7, v12, v9, v18, zero, v8, v4, v6, v3]
// [Asm]   add v19, v18, v9  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v8, v19, v4, v6, v3]
// [Asm]   add v20, v19, v10  # live: [v11, v5, v10, v13, v7, v12, v9, zero, v20, v8, v4, v6, v3]
// [Asm]   add v21, v20, v11  # live: [v11, v5, v10, v21, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   add v22, v21, v12  # live: [v11, v5, v10, v13, v22, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   blt zero, v13, .g.63_2  # live: [v11, v5, v10, v13, zero, v22, v7, v8, v4, v6, v12, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, v13], uses: [v25, v13], upward_exposed: [v13], params_defs: []
// [Asm] # live_in: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3], live_out: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # block parameters: []
// [Asm] .g.63_1:
// [Asm]   neg v25, v13  # live: [v11, v25, v5, v10, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] # control
// [Asm]   mv v13, v25  # live: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm]   j .g.63_0  # live: [v11, v5, v10, v13, zero, v7, v8, v4, v6, v12, v9, v3]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v22], upward_exposed: [v22], params_defs: []
// [Asm] # live_in: [v22], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .g.63_2:
// [Asm] # control
// [Asm]   mv v24, v22  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v24, a0], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: []
// [Asm] # block parameters: [v24]
// [Asm] .g.63_3:
// [Asm] # control
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.77  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({tyvars: [], name: ("h", Int), args: [("p", Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]))], body: LetTuple([("v1", Int), ("v2", Int), ("v3", Int), ("v4", Int), ("v5", Int), ("v6", Int), ("v7", Int), ("v8", Int), ("v9", Int), ("v10", Int)], Var("p"), LetRec({tyvars: [], name: ("g", Int), args: [("z", Int)], body: Let(("r", Int), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("t1", Unit), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), [])))
// [Knf] build_knf: LetTuple([("v1", Int), ("v2", Int), ("v3", Int), ("v4", Int), ("v5", Int), ("v6", Int), ("v7", Int), ("v8", Int), ("v9", Int), ("v10", Int)], Var("p"), LetRec({tyvars: [], name: ("g", Int), args: [("z", Int)], body: Let(("r", Int), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)])))
// [Knf] build_knf: Var("p")
// [Knf] build_knf: LetRec({tyvars: [], name: ("g", Int), args: [("z", Int)], body: Let(("r", Int), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))}, App(Var("g"), [Int(1)]))
// [Knf] build_knf: Let(("r", Int), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int)), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))])))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int)), Var("v10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int)), Var("v9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int)), Var("v8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int)), Var("v7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int)), Var("v6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int)), Var("v5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int)), Var("v4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("v1"), Var("v2"), Add, kind=Some(Int)), Var("v3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("v1"), Var("v2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Var("v3")
// [Knf] build_knf: Var("v4")
// [Knf] build_knf: Var("v5")
// [Knf] build_knf: Var("v6")
// [Knf] build_knf: Var("v7")
// [Knf] build_knf: Var("v8")
// [Knf] build_knf: Var("v9")
// [Knf] build_knf: Var("v10")
// [Knf] build_knf: If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]))
// [Knf] build_knf: If(LE(Var("z"), Int(0)), App(Var("g"), [Neg(Var("z"), kind=Some(Int))]), Var("r"))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("g"), [Neg(Var("z"), kind=Some(Int))])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: App(Var("g"), [Int(1)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("t1", Unit), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, App(Var("main"), []))
// [Knf] build_knf: Let(("t1", Unit), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])])
// [Knf] build_knf: App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(6)
// [Knf] build_knf: Int(7)
// [Knf] build_knf: Int(8)
// [Knf] build_knf: Int(9)
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.77
// [Main]   .type main.77, @function
// [Main] # leaf false
// [Main] main.77:
// [Main] .main.77_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sw a1, 12(a0)
// [Main]   li a1, 5
// [Main]   sw a1, 16(a0)
// [Main]   li a1, 6
// [Main]   sw a1, 20(a0)
// [Main]   li a1, 7
// [Main]   sw a1, 24(a0)
// [Main]   li a1, 8
// [Main]   sw a1, 28(a0)
// [Main]   li a1, 9
// [Main]   sw a1, 32(a0)
// [Main]   li a1, 10
// [Main]   sw a1, 36(a0)
// [Main]   lw a1, 0(a0)
// [Main]   lw a2, 4(a0)
// [Main]   lw a3, 8(a0)
// [Main]   lw a4, 12(a0)
// [Main]   lw a5, 16(a0)
// [Main]   lw a6, 20(a0)
// [Main]   lw a7, 24(a0)
// [Main]   lw t0, 28(a0)
// [Main]   lw t1, 32(a0)
// [Main]   lw a0, 36(a0)
// [Main]   addi t2, s11, -88
// [Main]   andi s11, t2, -8
// [Main]   la t3, g.63
// [Main]   sd t3, 0(t2)
// [Main]   sd a1, 8(t2)
// [Main]   sd a2, 16(t2)
// [Main]   sd a3, 24(t2)
// [Main]   sd a4, 32(t2)
// [Main]   sd a5, 40(t2)
// [Main]   sd a6, 48(t2)
// [Main]   sd a7, 56(t2)
// [Main]   sd t0, 64(t2)
// [Main]   sd t1, 72(t2)
// [Main]   sd a0, 80(t2)
// [Main]   ld a1, 0(t2)
// [Main]   mv s10, t2
// [Main]   li a0, 1
// [Main]   jalr a1
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl g.63
// [Main]   .type g.63, @function
// [Main] # leaf true
// [Main] g.63:
// [Main] .g.63_5:
// [Main]   mv a1, s10
// [Main]   lw t3, 8(a1)
// [Main]   lw a7, 16(a1)
// [Main]   lw a3, 24(a1)
// [Main]   lw t0, 32(a1)
// [Main]   lw a5, 40(a1)
// [Main]   lw a6, 48(a1)
// [Main]   lw t2, 56(a1)
// [Main]   lw a4, 64(a1)
// [Main]   lw a2, 72(a1)
// [Main]   lw t1, 80(a1)
// [Main]   mv a1, a0
// [Main] 
// [Main] .g.63_0:
// [Main]   add a0, t3, a7
// [Main]   add a0, a0, a3
// [Main]   add a0, a0, t0
// [Main]   add a0, a0, a5
// [Main]   add a0, a0, a6
// [Main]   add a0, a0, t2
// [Main]   add a0, a0, a4
// [Main]   add a0, a0, a2
// [Main]   add a0, a0, t1
// [Main]   blt zero, a1, .g.63_2
// [Main] 
// [Main] .g.63_1:
// [Main]   neg a0, a1
// [Main]   mv a1, a0
// [Main]   j .g.63_0
// [Main] 
// [Main] .g.63_2:
// [Main] 
// [Main] .g.63_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.77
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] check: LetRec({tyvars: [], name: ("h", Int), args: [("p", Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]))], body: LetTuple([("v1", Var({val: None})), ("v2", Var({val: None})), ("v3", Var({val: None})), ("v4", Var({val: None})), ("v5", Var({val: None})), ("v6", Var({val: None})), ("v7", Var({val: None})), ("v8", Var({val: None})), ("v9", Var({val: None})), ("v10", Var({val: None}))], Var("p"), LetRec({tyvars: [], name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: None})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None), Var("v10"), Add, kind=None), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=None)])))}, App(Var("g"), [Int(1)])))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("t1", Var({val: None})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetTuple([("v1", Var({val: None})), ("v2", Var({val: None})), ("v3", Var({val: None})), ("v4", Var({val: None})), ("v5", Var({val: None})), ("v6", Var({val: None})), ("v7", Var({val: None})), ("v8", Var({val: None})), ("v9", Var({val: None})), ("v10", Var({val: None}))], Var("p"), LetRec({tyvars: [], name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: None})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None), Var("v10"), Add, kind=None), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=None)])))}, App(Var("g"), [Int(1)]))) against Int
// [Typer] infer: Var("p")
// [Typer] inst: TypeScheme(([], Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])))
// [Typer] inst result: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Int), args: [("z", Int)], body: Let(("r", Var({val: None})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None), Var("v10"), Add, kind=None), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=None)])))}, App(Var("g"), [Int(1)])) against Int
// [Typer] typevars: []
// [Typer] check: Let(("r", Var({val: None})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None), Var("v10"), Add, kind=None), If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=None)]))) against Int
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None), Var("v10"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None), Var("v9"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None), Var("v8"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None), Var("v7"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None), Var("v6"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None), Var("v5"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None), Var("v4"), Add, kind=None)
// [Typer] infer: Prim(Prim(Var("v1"), Var("v2"), Add, kind=None), Var("v3"), Add, kind=None)
// [Typer] infer: Prim(Var("v1"), Var("v2"), Add, kind=None)
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v3")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v4")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v5")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v6")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v7")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v8")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v9")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v10")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: If(Not(LE(Var("z"), Int(0))), Var("r"), App(Var("g"), [Neg(Var("z"), kind=None)])) against Int
// [Typer] check: Not(LE(Var("z"), Int(0))) against Bool
// [Typer] check: LE(Var("z"), Int(0)) against Bool
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("r") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("g"), [Neg(Var("z"), kind=None)]) against Int
// [Typer] infer: Neg(Var("z"), kind=None)
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("g") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("g"), [Int(1)]) against Int
// [Typer] infer: Int(1)
// [Typer] check: Var("g") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("t1", Var({val: None})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("t1", Var({val: None})), App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])]), Unit)
// [Typer] infer: App(Var("print_int"), [App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("h"), [Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])]) against Int
// [Typer] infer: Tuple([Int(1), Int(2), Int(3), Int(4), Int(5), Int(6), Int(7), Int(8), Int(9), Int(10)])
// [Typer] infer: Int(1)
// [Typer] infer: Int(2)
// [Typer] infer: Int(3)
// [Typer] infer: Int(4)
// [Typer] infer: Int(5)
// [Typer] infer: Int(6)
// [Typer] infer: Int(7)
// [Typer] infer: Int(8)
// [Typer] infer: Int(9)
// [Typer] infer: Int(10)
// [Typer] check: Var("h") against Fun([Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])], Int)
// [Typer] inst: TypeScheme(([], Fun([Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])], Int)))
// [Typer] inst result: Fun([Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])], Int)
// [Typer] unify: Fun([Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])], Int) and Fun([Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])], Int)
// [Typer] unify: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) and Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int])
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {h.1: Once, g.24: Many(2), main.39: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(h)
// [KnfOpt] freq: {main.39: Once, g.63: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main.39: Once, g.63: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 25
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {_40: MayEscape, _41: MayEscape, _42: MayEscape, _43: MayEscape, _44: MayEscape, _45: MayEscape, _46: MayEscape, _47: MayEscape, _48: MayEscape, _49: MayEscape, _50: Destructed, _75: MayEscape, r.73: MayEscape, _76: MayEscape, _51: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %11: Apply(ty=Int32, f=Self(fref=f2), args=[Insn(iref=%10)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f2: MaybeInClosure})
// [CoreOpt] allow_inline: false %0 main.77 false true true false true
// [CoreOpt] allow_inline: false %0 main.77 false true true false true
// [CoreOpt] allow_inline: false %0 main.77 false true true false true
// [CoreOpt] allow_inline: false %0 main.77 false true true false true
// [CoreOpt] allow_inline: false %0 main.77 false true true false true
// [CoreOpt] allow_inline: false %0 main.77 false true true false true
