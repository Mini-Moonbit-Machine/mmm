// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: FnParam(fref=f0, fpref=$f.1) -> v3, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v9, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, zero, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v8]
// [Asm] move: v4 <- v7
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v8
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- v2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move: v5 <- v3
// [Asm] defined: v5 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v4
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("sum.14") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("sum.14") clobbered_f: @hashset.of([])
// [Asm] subst   add v7, v4, v5 ->   add a0, a0, a1
// [Asm] subst   addi v8, v5, -1 ->   addi a1, a1, -1
// [Asm] subst   j .sum.14_0 ->   j .sum.14_0
// [Asm] subst   bge zero, v5, .sum.14_1 ->   bge zero, a1, .sum.14_1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Insn(iref=%0) -> v2, Self(fref=f1) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, a0]
// [Asm] defined: v5 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move: a1 <- v5
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.15") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("main.15") clobbered_f: @hashset.of([])
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v5, 10000 ->   li a1, 10000
// [Asm] subst   call sum.14 ->   call sum.14
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.15:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v5, zero, a0, a1, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.15_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   li v5, 10000  # live: [v5, a0]
// [Asm]   mv a1, v5  # live: [a1, a0]
// [Asm]   call sum.14  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] sum.14:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .sum.14_5:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v5, zero], upward_exposed: [v5, zero], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .sum.14_0:
// [Asm] # control
// [Asm]   bge zero, v5, .sum.14_1  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v8, v4, v5, v7], uses: [v8, v4, v5, v7], upward_exposed: [v4, v5], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .sum.14_2:
// [Asm]   add v7, v4, v5  # live: [v5, zero, v7]
// [Asm]   addi v8, v5, -1  # live: [v7, zero, v8]
// [Asm] # control
// [Asm]   mv v4, v7  # live: [v4, zero, v8]
// [Asm]   mv v5, v8  # live: [v4, v5, zero]
// [Asm]   j .sum.14_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v4], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .sum.14_1:
// [Asm] # control
// [Asm]   mv v9, v4  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .sum.14_3:
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.15  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.15
// [Main]   .type main.15, @function
// [Main] # leaf false
// [Main] main.15:
// [Main] .main.15_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a0, zero
// [Main]   li a1, 10000
// [Main]   call sum.14
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum.14
// [Main]   .type sum.14, @function
// [Main] # leaf true
// [Main] sum.14:
// [Main] .sum.14_5:
// [Main] 
// [Main] .sum.14_0:
// [Main]   bge zero, a1, .sum.14_1
// [Main] 
// [Main] .sum.14_2:
// [Main]   add a0, a0, a1
// [Main]   addi a1, a1, -1
// [Main]   j .sum.14_0
// [Main] 
// [Main] .sum.14_1:
// [Main] 
// [Main] .sum.14_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.15
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("sum", Int), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Int(0)), Var("acc"), App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])}, Unit))
// [Typer] resolve: If(LE(Var("x"), Int(0)), Var("acc"), App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)]))
// [Typer] resolve: LE(Var("x"), Int(0))
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("acc")
// [Typer] resolve: App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("acc"), Var("x"), Add, kind=None)
// [Typer] resolve: Var("acc")
// [Typer] resolve: Var("x")
// [Typer] resolve: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("sum")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])}, Unit)
// [Typer] resolve: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])
// [Typer] resolve: App(Var("sum"), [Int(0), Int(10000)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(10000)
// [Typer] resolve: Var("sum")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("sum", Int), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Int(0)), Var("acc"), App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Int(0)), Var("acc"), App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)])) against Int
// [Typer] check: LE(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("acc") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("acc"), Var("x"), Add, kind=None)
// [Typer] infer: Var("acc")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("sum") against (Int, Int) -> Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("sum"), [Int(0), Int(10000)]) against Int
// [Typer] infer: Int(0)
// [Typer] infer: Int(10000)
// [Typer] check: Var("sum") against (Int, Int) -> Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {sum.1: Many(2), main.10: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {sum.1: Many(2), main.10: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {sum.1: Many(2), main.10: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {acc.3: MayEscape, _7: MayEscape, _9: MayEscape, _11: MayEscape, _12: MayEscape, _13: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %3: Call(ty=Int32, f=f0, args=[Insn(iref=%1), Insn(iref=%2)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.15 false true true true true
// [CoreOpt] allow_inline: false %0 sum.14 false true true false true
// [CoreOpt] allow_inline: false %0 main.15 false true true true true
// [CoreOpt] allow_inline: false %0 sum.14 false true true false true
// [CoreOpt] allow_inline: false %0 main.15 false true true true true
// [CoreOpt] allow_inline: false %0 sum.14 false true true false true
// [CoreOpt] allow_inline: false %0 main.15 false true true true true
// [CoreOpt] allow_inline: false %0 sum.14 false true true false true
// [CoreOpt] allow_inline: false %0 main.15 false true true true true
// [CoreOpt] allow_inline: false %0 sum.14 false true true false true
// [CoreOpt] allow_inline: false %0 main.15 false true true true true
// [CoreOpt] allow_inline: false %0 sum.14 false true true false true
