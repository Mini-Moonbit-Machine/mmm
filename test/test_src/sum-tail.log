// [Main] function thunk_main(k) {
// [Main]   function sum_1(acc_3, x_5, k) {
// [Main]     const _6 = 0;
// [Main]     if (x_5 <= _6) {
// [Main]       return $thunk(() => k(acc_3))
// [Main]     } else {
// [Main]       const _7 = acc_3 + x_5;
// [Main]       const _8 = 1;
// [Main]       const _9 = x_5 - _8;
// [Main]       return $thunk(() => sum_1(_7, _9, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_10(k) {
// [Main]     const _11 = 0;
// [Main]     const _12 = 10000;
// [Main]     return $thunk(() => sum_1(_11, _12, function (_13) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       , _13))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_10(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("sum", Int), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Int(0)), Var("acc"), App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)]))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Int(0)), Var("acc"), App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)])) against Int
// [Typer] check: LE(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("acc") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("sum"), [Prim(Var("acc"), Var("x"), Add, kind=None), Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("acc"), Var("x"), Add, kind=None)
// [Typer] infer: Var("acc")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("sum") against (Int, Int) -> Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("sum"), [Int(0), Int(10000)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("sum"), [Int(0), Int(10000)]) against Int
// [Typer] infer: Int(0)
// [Typer] infer: Int(10000)
// [Typer] check: Var("sum") against (Int, Int) -> Int
// [Typer] inst: TypeScheme(([], (Int, Int) -> Int))
// [Typer] inst result: (Int, Int) -> Int
// [Typer] unify: (Int, Int) -> Int and (Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
