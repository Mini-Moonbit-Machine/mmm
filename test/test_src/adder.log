// [Knf] build_knf: LetRec({tyvars: [], name: ("make_adder", Fun([Int], Int)), args: [("x", Int)], body: LetRec({tyvars: [], name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("print_int"), [App(App(Var("make_adder"), [Int(3)]), [Int(7)])])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({tyvars: [], name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=Some(Int))}, Var("adder"))
// [Knf] build_knf: Prim(Var("x"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("adder")
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("print_int"), [App(App(Var("make_adder"), [Int(3)]), [Int(7)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(App(Var("make_adder"), [Int(3)]), [Int(7)])])
// [Knf] build_knf: App(App(Var("make_adder"), [Int(3)]), [Int(7)])
// [Knf] build_knf: App(Var("make_adder"), [Int(3)])
// [Knf] build_knf: Var("make_adder")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(7)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function make_adder_1(x_3, k) {
// [Main]     function adder_4(y_6, k) {
// [Main]       return k(x_3 + y_6)
// [Main]     }
// [Main]     return k(adder_4)
// [Main]   }
// [Main]   function main_7(k) {
// [Main]     const _8 = 3;
// [Main]     return $thunk(() => make_adder_1(_8, function (_9) {
// [Main]       const _10 = 7;
// [Main]       return $thunk(() => _9(_10, function (_11) {
// [Main]         return $thunk(() => $thunk(() => k(minimbt_print_int($force(_11)))))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_7(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("make_adder", Fun([Int], Int)), args: [("x", Int)], body: LetRec({tyvars: [], name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("adder"))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(App(Var("make_adder"), [Int(3)]), [Int(7)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("adder", Int), args: [("y", Int)], body: Prim(Var("x"), Var("y"), Add, kind=None)}, Var("adder")) against Fun([Int], Int)
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Var("y"), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("adder") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(App(Var("make_adder"), [Int(3)]), [Int(7)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(App(Var("make_adder"), [Int(3)]), [Int(7)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(App(Var("make_adder"), [Int(3)]), [Int(7)]) against Int
// [Typer] infer: Int(7)
// [Typer] check: App(Var("make_adder"), [Int(3)]) against Fun([Int], Int)
// [Typer] infer: Int(3)
// [Typer] check: Var("make_adder") against Fun([Int], Fun([Int], Int))
// [Typer] inst: TypeScheme(([], Fun([Int], Fun([Int], Int))))
// [Typer] inst result: Fun([Int], Fun([Int], Int))
// [Typer] unify: Fun([Int], Fun([Int], Int)) and Fun([Int], Fun([Int], Int))
// [Typer] unify: Int and Int
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
