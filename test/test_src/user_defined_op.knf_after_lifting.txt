let rec pow.48: Int = (x.3: Int, n.5: Int) {
  let _6: Int = Int(0)
  if (n.5 == _6) then {
    Int(1)
  } else {
    let _7: Int = Int(1)
    let _8: Int = Sub(n.5, _7)
    let _9: Int = Apply(pow.48, [x.3, _8, ])
    Mul(x.3, _9)
  }
}
let rec main.49: Unit = () {
  let _18: Int = Int(2)
  let _19: Int = Int(2)
  let _20: Int = Int(3)
  let _21: Int = Apply(pow.48, [_19, _20, ])
  let _22: Int = Apply(pow.48, [_18, _21, ])
  let _24: Unit = ExtApply(minimbt_print_int, [_22, ])
  let _25: Int = Int(10)
  let _27: Unit = ExtApply(minimbt_print_char, [_25, ])
  let _28: Int = Int(2)
  let _29: Int = Int(2)
  let _30: Int = Apply(pow.48, [_28, _29, ])
  let _31: Int = Int(3)
  let _32: Int = Apply(pow.48, [_30, _31, ])
  let _34: Unit = ExtApply(minimbt_print_int, [_32, ])
  let _35: Int = Int(10)
  let _37: Unit = ExtApply(minimbt_print_char, [_35, ])
  let _38: Int = Int(66434)
  let _39: Int = Int(100)
  let _46: Int = Int(664)
  let _47: Int = Int(66400)
  let _40: Int = Int(34)
  let _42: Unit = ExtApply(minimbt_print_int, [_40, ])
  let _43: Int = Int(10)
  let _45: Unit = ExtApply(minimbt_print_char, [_43, ])
  Unit
}
Apply(main.49, [])
