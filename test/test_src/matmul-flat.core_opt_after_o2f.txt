# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn loop31l0_0 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %2: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %3: double = load double offset(%2, $f1 * @64)
    let %4: array[double] = load array[double] offset($f3, $f0 * @ptr)
    let %5: double = load double offset(%4, $f2 * @64)
    let %6: array[double] = load array[double] offset($f4, $f2 * @ptr)
    let %7: double = load double offset(%6, $f1 * @64)
    let %8: double = mul(%5, %7)
    let %9: double = add(%3, %8)
    let _ = store double offset(%1, $f1 * @64) <- %9
    let %11: int32 = sub($f2, 1)
    let %12: bool = le(0, %11)
    br %12 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let %13: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %14: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %15: double = load double offset(%14, $f1 * @64)
    let %16: array[double] = load array[double] offset($f3, $f0 * @ptr)
    let %17: double = load double offset(%16, %11 * @64)
    let %18: array[double] = load array[double] offset($f4, %11 * @ptr)
    let %19: double = load double offset(%18, $f1 * @64)
    let %20: double = mul(%17, %19)
    let %21: double = add(%15, %20)
    let _ = store double offset(%13, $f1 * @64) <- %21
    let %23: int32 = sub(%11, 1)
    let %24: unit = call f0($f0, $f1, %23, $f3, $f4, $f5)
    jump b5(%24)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn loop228l1_1 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f1, 1)
    let %2: bool = le(0, %1)
    br %2 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %3: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %4: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %5: double = load double offset(%4, $f2 * @64)
    let %6: array[double] = load array[double] offset($f3, $f0 * @ptr)
    let %7: double = load double offset(%6, %1 * @64)
    let %8: array[double] = load array[double] offset($f4, %1 * @ptr)
    let %9: double = load double offset(%8, $f2 * @64)
    let %10: double = mul(%7, %9)
    let %11: double = add(%5, %10)
    let _ = store double offset(%3, $f2 * @64) <- %11
    let %13: int32 = sub(%1, 1)
    let %14: unit = call f0($f0, $f2, %13, $f3, $f4, $f5)
    jump b5(%14)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %15: int32 = sub($f2, 1)
    let %16: bool = le(0, %15)
    br %16 b6() b7()
  }
  .bb #b6 () {
    let %17: int32 = sub($f1, 1)
    let %18: unit = call f0($f0, %15, %17, $f3, $f4, $f5)
    let %19: int32 = sub(%15, 1)
    let %20: unit = call f1($f0, $f1, %19, $f3, $f4, $f5)
    jump b8(%20)
  }
  .bb #b7 () {
    jump b8(())
  }
  .bb #b8 (unit) {
    jump b9($b8.0)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
}
.fn main85l3_4 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let _ = alloc <m1: array[array[double]] heap(2)> <- [..] = f4.m0
    let %2: int32 = sub(2, 1)
    let %3: unit = call f3(%2, 3, f4.m1)
    let _ = alloc <m2: array[array[double]] heap(3)> <- [..] = f4.m0
    let %5: int32 = sub(3, 1)
    let %6: unit = call f3(%5, 2, f4.m2)
    let _ = alloc <m3: array[array[double]] heap(2)> <- [..] = f4.m0
    let %8: int32 = sub(2, 1)
    let %9: unit = call f3(%8, 2, f4.m3)
    let %10: array[double] = load array[double] field(f4.m1, 0 * @ptr)
    let _ = store double field(%10, 0 * @64) <- 1
    let %12: array[double] = load array[double] field(f4.m1, 0 * @ptr)
    let _ = store double field(%12, 1 * @64) <- 2
    let %14: array[double] = load array[double] field(f4.m1, 0 * @ptr)
    let _ = store double field(%14, 2 * @64) <- 3
    let %16: array[double] = load array[double] field(f4.m1, 1 * @ptr)
    let _ = store double field(%16, 0 * @64) <- 4
    let %18: array[double] = load array[double] field(f4.m1, 1 * @ptr)
    let _ = store double field(%18, 1 * @64) <- 5
    let %20: array[double] = load array[double] field(f4.m1, 1 * @ptr)
    let _ = store double field(%20, 2 * @64) <- 6
    let %22: array[double] = load array[double] field(f4.m2, 0 * @ptr)
    let _ = store double field(%22, 0 * @64) <- 7
    let %24: array[double] = load array[double] field(f4.m2, 0 * @ptr)
    let _ = store double field(%24, 1 * @64) <- 8
    let %26: array[double] = load array[double] field(f4.m2, 1 * @ptr)
    let _ = store double field(%26, 0 * @64) <- 9
    let %28: array[double] = load array[double] field(f4.m2, 1 * @ptr)
    let _ = store double field(%28, 1 * @64) <- 10
    let %30: array[double] = load array[double] field(f4.m2, 2 * @ptr)
    let _ = store double field(%30, 0 * @64) <- 11
    let %32: array[double] = load array[double] field(f4.m2, 2 * @ptr)
    let _ = store double field(%32, 1 * @64) <- 12
    let %34: int32 = sub(2, 1)
    let %35: unit = call f2(%34, 3, 2, f4.m1, f4.m2, f4.m3)
    let %36: array[double] = load array[double] field(f4.m3, 0 * @ptr)
    let %37: double = load double field(%36, 0 * @64)
    let %38: int32 = conv.d2i.rtz(%37)
    let %39: unit = ext_call minimbt_print_int(%38)
    let %40: unit = ext_call minimbt_print_endline()
    let %41: array[double] = load array[double] field(f4.m3, 0 * @ptr)
    let %42: double = load double field(%41, 1 * @64)
    let %43: int32 = conv.d2i.rtz(%42)
    let %44: unit = ext_call minimbt_print_int(%43)
    let %45: unit = ext_call minimbt_print_endline()
    let %46: array[double] = load array[double] field(f4.m3, 1 * @ptr)
    let %47: double = load double field(%46, 0 * @64)
    let %48: int32 = conv.d2i.rtz(%47)
    let %49: unit = ext_call minimbt_print_int(%48)
    let %50: unit = ext_call minimbt_print_endline()
    let %51: array[double] = load array[double] field(f4.m3, 1 * @ptr)
    let %52: double = load double field(%51, 1 * @64)
    let %53: int32 = conv.d2i.rtz(%52)
    let %54: unit = ext_call minimbt_print_int(%53)
    return ()
  }
}
.fn T$start_10 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn init_arr89l4_3 #f3 : fn(int32, int32, array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap($f1)> <- [..] = 0
    let _ = store array[double] offset($f2, $f0 * @ptr) <- f3.m0
    let %3: int32 = sub($f0, 1)
    let %4: bool = le(0, %3)
    br %4 b3() b4()
  }
  .bb #b2 () {
    jump b6(())
  }
  .bb #b3 () {
    let _ = alloc <m1: array[double] heap($f1)> <- [..] = 0
    let _ = store array[double] offset($f2, %3 * @ptr) <- f3.m1
    let %7: int32 = sub(%3, 1)
    let %8: unit = call f3(%7, $f1, $f2)
    jump b5(%8)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    jump b6($b5.0)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn loop148l2_2 #f2 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f2, 1)
    let %2: bool = le(0, %1)
    br %2 b3() b4()
  }
  .bb #b2 () {
    jump b9(())
  }
  .bb #b3 () {
    let %3: int32 = sub($f1, 1)
    let %4: unit = call f0($f0, %1, %3, $f3, $f4, $f5)
    let %5: int32 = sub(%1, 1)
    let %6: unit = call f1($f0, $f1, %5, $f3, $f4, $f5)
    jump b5(%6)
  }
  .bb #b4 () {
    jump b5(())
  }
  .bb #b5 (unit) {
    let %7: int32 = sub($f0, 1)
    let %8: bool = le(0, %7)
    br %8 b6() b7()
  }
  .bb #b6 () {
    let %9: int32 = sub($f2, 1)
    let %10: unit = call f1(%7, $f1, %9, $f3, $f4, $f5)
    let %11: int32 = sub(%7, 1)
    let %12: unit = call f2(%11, $f1, $f2, $f3, $f4, $f5)
    jump b8(%12)
  }
  .bb #b7 () {
    jump b8(())
  }
  .bb #b8 (unit) {
    jump b9($b8.0)
  }
  .bb #b9 (unit) {
    return $b9.0
  }
}
.thunk ::0 start
