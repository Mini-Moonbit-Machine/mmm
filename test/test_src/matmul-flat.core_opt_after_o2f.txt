# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn loop148.240 #f2 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f2, 1)
    let %2: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %3: array[double] = load array[double] offset($f5, $f0 * @ptr)
    let %4: array[double] = load array[double] offset($f3, $f0 * @ptr)
    let %5: unit = call f1($f0, $f1, %1, $f3, $f4, $f5, %2, %3, %4)
    let %6: int32 = sub($f0, 1)
    let %7: unit = call f2(%6, $f1, $f2, $f3, $f4, $f5)
    jump b3(%7)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn make_arr103.243 #f4 : fn(int32, int32, array[double]) -> array[array[double]]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = $f2
    let %1: int32 = sub($f0, 1)
    let %2: unit = call f3(%1, $f1, f4.m0)
    return f4.m0
  }
}
.fn init_arr89.242 #f3 : fn(int32, int32, array[array[double]]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let _ = alloc <m0: array[double] heap($f1)> <- [..] = 0
    let _ = store array[double] offset($f2, $f0 * @ptr) <- f3.m0
    let %3: int32 = sub($f0, 1)
    let %4: unit = call f3(%3, $f1, $f2)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop228.239 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($f1, 1)
    let %2: unit = call f0($f0, $f2, %1, $f3, $f4, $f5, $f6, $f7, $f8)
    let %3: int32 = sub($f2, 1)
    let %4: unit = call f1($f0, $f1, %3, $f3, $f4, $f5, $f6, $f7, $f8)
    jump b3(%4)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn loop31.238 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f2)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: double = load double offset($f7, $f1 * @64)
    let %2: double = load double offset($f8, $f2 * @64)
    let %3: array[double] = load array[double] offset($f4, $f2 * @ptr)
    let %4: double = load double offset(%3, $f1 * @64)
    let %5: double = mul(%2, %4)
    let %6: double = add(%1, %5)
    let _ = store double offset($f6, $f1 * @64) <- %6
    let %8: int32 = sub($f2, 1)
    let %9: unit = call f0($f0, $f1, %8, $f3, $f4, $f5, $f6, $f7, $f8)
    jump b3(%9)
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn main85.241 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let %1: array[array[double]] = call f4(2, 3, f5.m0)
    let %2: array[array[double]] = call f4(3, 2, f5.m0)
    let %3: array[array[double]] = call f4(2, 2, f5.m0)
    let %4: array[double] = load array[double] field(%1, 0 * @ptr)
    let _ = store double field(%4, 0 * @64) <- 1
    let %6: array[double] = load array[double] field(%1, 0 * @ptr)
    let _ = store double field(%6, 1 * @64) <- 2
    let %8: array[double] = load array[double] field(%1, 0 * @ptr)
    let _ = store double field(%8, 2 * @64) <- 3
    let %10: array[double] = load array[double] field(%1, 1 * @ptr)
    let _ = store double field(%10, 0 * @64) <- 4
    let %12: array[double] = load array[double] field(%1, 1 * @ptr)
    let _ = store double field(%12, 1 * @64) <- 5
    let %14: array[double] = load array[double] field(%1, 1 * @ptr)
    let _ = store double field(%14, 2 * @64) <- 6
    let %16: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%16, 0 * @64) <- 7
    let %18: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%18, 1 * @64) <- 8
    let %20: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%20, 0 * @64) <- 9
    let %22: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%22, 1 * @64) <- 10
    let %24: array[double] = load array[double] field(%2, 2 * @ptr)
    let _ = store double field(%24, 0 * @64) <- 11
    let %26: array[double] = load array[double] field(%2, 2 * @ptr)
    let _ = store double field(%26, 1 * @64) <- 12
    let %28: int32 = sub(2, 1)
    let %29: unit = call f2(%28, 3, 2, %1, %2, %3)
    let %30: array[double] = load array[double] field(%3, 0 * @ptr)
    let %31: double = load double field(%30, 0 * @64)
    let %32: int32 = conv.d2i.rtz(%31)
    let %33: unit = ext_call minimbt_print_int(%32)
    let %34: unit = ext_call minimbt_print_endline()
    let %35: array[double] = load array[double] field(%3, 0 * @ptr)
    let %36: double = load double field(%35, 1 * @64)
    let %37: int32 = conv.d2i.rtz(%36)
    let %38: unit = ext_call minimbt_print_int(%37)
    let %39: unit = ext_call minimbt_print_endline()
    let %40: array[double] = load array[double] field(%3, 1 * @ptr)
    let %41: double = load double field(%40, 0 * @64)
    let %42: int32 = conv.d2i.rtz(%41)
    let %43: unit = ext_call minimbt_print_int(%42)
    let %44: unit = ext_call minimbt_print_endline()
    let %45: array[double] = load array[double] field(%3, 1 * @ptr)
    let %46: double = load double field(%45, 1 * @64)
    let %47: int32 = conv.d2i.rtz(%46)
    let %48: unit = ext_call minimbt_print_int(%47)
    return ()
  }
}
.thunk ::0 start

