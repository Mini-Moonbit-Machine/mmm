let rec iloop.137: Unit = (i.98: Int, zr.99: Double, zi.100: Double, zr2.101: Double, zi2.102: Double, cr.103: Double, ci.104: Double) {
  let _105: Int = Int(0)
  if (i.98 == _105) then {
    let _106: Int = Int(1)
    ExtApply(minimbt_print_int, [_106, ])
  } else {
    let _107: Double = FSub(zr2.101, zi2.102)
    let tr.108: Double = FAdd(_107, cr.103)
    let _109: Double = FAdd(zr.99, zr.99)
    let _110: Double = FMul(_109, zi.100)
    let ti.111: Double = FAdd(_110, ci.104)
    let zr2.112: Double = FMul(tr.108, tr.108)
    let zi2.113: Double = FMul(ti.111, ti.111)
    let _114: Double = Double(2)
    let _115: Double = Double(2)
    let _116: Double = Double(4)
    let _117: Double = FAdd(zr2.112, zi2.113)
    if (_116 <= _117) then {
      let _118: Int = Int(0)
      ExtApply(minimbt_print_int, [_118, ])
    } else {
      let _119: Int = Int(1)
      let _120: Int = Sub(i.98, _119)
      Apply(iloop.137, [_120, tr.108, ti.111, zr2.112, zi2.113, cr.103, ci.104, ])
    }
  }
}
let rec xloop.136: Unit = (x.82: Int, y.83: Int, _76: Int, _87: Double, _91: Double, _93: Double) {
  if (_76 <= x.82) then {
    let _84: Unit = ExtApply(minimbt_print_endline, [])
    Unit
  } else {
    let _85: Double = ExtApply(minimbt_float_of_int, [x.82, ])
    let _86: Double = FAdd(_85, _85)
    let _88: Double = FDiv(_86, _87)
    let _89: Double = Double(1.5)
    let cr.90: Double = FSub(_88, _89)
    let _92: Double = FAdd(_91, _91)
    let _94: Double = FDiv(_92, _93)
    let _95: Double = Double(1)
    let ci.96: Double = FSub(_94, _95)
    let _121: Int = Int(1000)
    let _122: Double = Double(0)
    let _123: Double = Double(0)
    let _124: Double = Double(0)
    let _125: Double = Double(0)
    let _126: Unit = Apply(iloop.137, [_121, _122, _123, _124, _125, cr.90, ci.96, ])
    let _127: Int = Int(1)
    let _128: Int = Add(x.82, _127)
    Apply(xloop.136, [_128, y.83, _76, _87, _91, _93, ])
  }
}
let rec yloop.135: Unit = (y.80: Int, _76: Int, _141: Double, _143: Double) {
  if (_76 <= y.80) then {
    Unit
  } else {
    let _129: Int = Int(0)
    let _142: Double = ExtApply(minimbt_float_of_int, [y.80, ])
    let _130: Unit = Apply(xloop.136, [_129, y.80, _76, _141, _142, _143, ])
    let _131: Int = Int(1)
    let _132: Int = Add(y.80, _131)
    Apply(yloop.135, [_132, _76, _141, _143, ])
  }
}
let rec main.134: Unit = () {
  let _76: Int = Int(40)
  let _133: Int = Int(0)
  let _145: Double = ExtApply(minimbt_float_of_int, [_76, ])
  let _146: Double = ExtApply(minimbt_float_of_int, [_76, ])
  Apply(yloop.135, [_133, _76, _145, _146, ])
}
Apply(main.134, [])
