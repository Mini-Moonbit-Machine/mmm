# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main32.67 #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = load_symbol ::2
    let %1: int32 = load int32 field(%0, 0 * @32)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: unit = ext_call minimbt_print_endline()
    let %4: array[int32] = load_symbol ::9
    let %5: int32 = load int32 field(%4, 0 * @32)
    let %6: unit = ext_call minimbt_print_int(%5)
    return ()
  }
}
.fn T$_45 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = load_symbol ::2
    let %1: int32 = load_symbol ::3
    let %2: int32 = load_symbol ::4
    let _ = store int32 offset(%0, %1 * @32) <- %2
    return ()
  }
}
.fn T$_51 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = load_symbol ::2
    let %1: int32 = load_symbol ::14
    let %2: int32 = load_symbol ::15
    let _ = store int32 offset(%0, %1 * @32) <- %2
    return ()
  }
}
.fn T$_54 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = load_symbol ::9
    let %1: int32 = load_symbol ::17
    let %2: int32 = load_symbol ::18
    let _ = store int32 offset(%0, %1 * @32) <- %2
    return ()
  }
}
.fn T$start #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f12()
    return %0
  }
}
.fn T$_48 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = load_symbol ::9
    let %1: int32 = load_symbol ::10
    let %2: int32 = load_symbol ::11
    let _ = store int32 offset(%0, %1 * @32) <- %2
    return ()
  }
}
.fn T$len.3 #f0 : fn() -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = %1
    return f0.m0
  }
}
.fn T$len2.13 #f4 : fn() -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::7
    let %1: int32 = load_symbol ::8
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = %1
    return f4.m0
  }
}
.thunk ::0 _55
.thunk ::1 _56
.thunk ::2 len.3
.thunk ::3 _57
.thunk ::4 _58
.thunk ::5 _45
.thunk ::6 _10
.thunk ::7 _59
.thunk ::8 _60
.thunk ::9 len2.13
.thunk ::10 _61
.thunk ::11 _62
.thunk ::12 _48
.thunk ::13 _20
.thunk ::14 _63
.thunk ::15 _64
.thunk ::16 _51
.thunk ::17 _65
.thunk ::18 _66
.thunk ::19 _54
.thunk ::20 _31
.thunk ::21 start

