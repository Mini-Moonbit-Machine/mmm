// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v5
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f0, fpref=$f.0)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: []
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] defined: v6 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v6
// [Asm] defined: v5 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- v9
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("f.17") clobbered_x: @hashset.of([a0])
// [Asm] Label("f.17") clobbered_f: @hashset.of([])
// [Asm] subst   blt v2, zero, .f.17_2 ->   blt a0, zero, .f.17_2
// [Asm] subst   li v9, -1 ->   li a0, -1
// [Asm] subst   j .f.17_3 ->   j .f.17_3
// [Asm] subst   ret ->   ret
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   call f.17 ->   call f.17
// [Asm] subst   li v6, 1 ->   li a0, 1
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f1) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.18") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.18") clobbered_f: @hashset.of([])
// [Asm] subst   li v10, 10 ->   li a0, 10
// [Asm] subst   call f.17 ->   call f.17
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v7, -10 ->   li a0, -10
// [Asm] subst   call f.17 ->   call f.17
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] f.17:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .f.17_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .f.17_2  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v6, a0, v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .f.17_1:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call f.17  # live: [a0]
// [Asm]   mv v4, a0  # live: []
// [Asm]   # restore_ctx2  # live: []
// [Asm] # control
// [Asm]   li v6, 1  # live: [v6]
// [Asm]   mv v5, v6  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: []
// [Asm] # block parameters: [v5]
// [Asm] .f.17_3:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v5, v9], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .f.17_2:
// [Asm] # control
// [Asm]   li v9, -1  # live: [v9]
// [Asm]   mv v5, v9  # live: [v5]
// [Asm]   j .f.17_3  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.18  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.18:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, zero, v7, v4, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.18_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v10, 10  # live: [v10, zero]
// [Asm]   mv a0, v10  # live: [zero, a0]
// [Asm]   call f.17  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, v2  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v3, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v7, -10  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call f.17  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [v4, zero]
// [Asm]   # restore_ctx2  # live: [v4, zero]
// [Asm]   # save_ctx2  # live: [v4, zero]
// [Asm]   mv a0, v4  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f.17
// [Main]   .type f.17, @function
// [Main] # leaf false
// [Main] f.17:
// [Main] .f.17_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   blt a0, zero, .f.17_2
// [Main] 
// [Main] .f.17_1:
// [Main]   li a0, -1
// [Main]   call f.17
// [Main]   li a0, 1
// [Main] 
// [Main] .f.17_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .f.17_2:
// [Main]   li a0, -1
// [Main]   j .f.17_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.18
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.18
// [Main]   .type main.18, @function
// [Main] # leaf false
// [Main] main.18:
// [Main] .main.18_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 10
// [Main]   call f.17
// [Main]   call minimbt_print_int
// [Main]   li a0, -10
// [Main]   call f.17
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("f", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), Let(("_", Var(None)), App(Var("f"), targs=None, [Neg(Int(1), kind=None)]), Int(1)), Neg(Int(1), kind=None))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit))}, Unit))
// [Typer] resolve: If(LE(Int(0), Var("x")), Let(("_", Var(None)), App(Var("f"), targs=None, [Neg(Int(1), kind=None)]), Int(1)), Neg(Int(1), kind=None))
// [Typer] resolve: LE(Int(0), Var("x"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("x")
// [Typer] resolve: Let(("_", Var(None)), App(Var("f"), targs=None, [Neg(Int(1), kind=None)]), Int(1))
// [Typer] resolve: App(Var("f"), targs=None, [Neg(Int(1), kind=None)])
// [Typer] resolve: Neg(Int(1), kind=None)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("f")
// [Typer] resolve: Int(1)
// [Typer] resolve: Neg(Int(1), kind=None)
// [Typer] resolve: Int(1)
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit))}, Unit)
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])])
// [Typer] resolve: App(Var("f"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])])
// [Typer] resolve: App(Var("f"), targs=None, [Neg(Int(10), kind=None)])
// [Typer] resolve: Neg(Int(10), kind=None)
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), Let(("_", Var(None)), App(Var("f"), targs=None, [Neg(Int(1), kind=None)]), Int(1)), Neg(Int(1), kind=None))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("x")), Let(("_", Var(None)), App(Var("f"), targs=None, [Neg(Int(1), kind=None)]), Int(1)), Neg(Int(1), kind=None)) against Int
// [Typer] check: LE(Int(0), Var("x")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), App(Var("f"), targs=None, [Neg(Int(1), kind=None)]), Int(1)) against Int
// [Typer] infer: App(Var("f"), targs=None, [Neg(Int(1), kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Neg(Int(1), kind=None) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Neg(Int(1), kind=None) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(10)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), targs=None, [Int(10)]) against Int
// [Typer] infer: Int(10)
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])]), Unit)
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Neg(Int(10), kind=None)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), targs=None, [Neg(Int(10), kind=None)]) against Int
// [Typer] infer: Neg(Int(10), kind=None)
// [Typer] infer: Int(10)
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {f.1: Many(3), main.8: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {f.1: Many(3), main.8: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {f.1: Many(3), main.8: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {_5: MayEscape, _9: MayEscape, _10: MayEscape, _13: MayEscape, _14: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %1 f.17 true false true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 f.17 false false true false true
// [CoreOpt] allow_inline: false %2 f.17 false false true false true
// [CoreOpt] allow_inline: false %1 f.17 true false true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 f.17 false false true false true
// [CoreOpt] allow_inline: false %2 f.17 false false true false true
// [CoreOpt] allow_inline: false %1 f.17 true false true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 f.17 false false true false true
// [CoreOpt] allow_inline: false %2 f.17 false false true false true
// [CoreOpt] allow_inline: false %1 f.17 true false true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 f.17 false false true false true
// [CoreOpt] allow_inline: false %2 f.17 false false true false true
// [CoreOpt] allow_inline: false %1 f.17 true false true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 f.17 false false true false true
// [CoreOpt] allow_inline: false %2 f.17 false false true false true
// [CoreOpt] allow_inline: false %1 f.17 true false true false true
// [CoreOpt] allow_inline: false %0 main.18 false true true true true
// [CoreOpt] allow_inline: false %0 f.17 false false true false true
// [CoreOpt] allow_inline: false %2 f.17 false false true false true
