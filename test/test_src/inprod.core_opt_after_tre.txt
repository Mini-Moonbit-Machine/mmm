# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn gety10_1 #f1 : fn((double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = load double field($f0, 0)
    let %1: double = load double field($f0, 1)
    let %2: double = load double field($f0, 2)
    return %1
  }
}
.fn T$start_10 #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f4()
    return %0
  }
}
.fn getx1_0 #f0 : fn((double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = load double field($f0, 0)
    let %1: double = load double field($f0, 1)
    let %2: double = load double field($f0, 2)
    return %0
  }
}
.fn inprod28_3 #f3 : fn((double, double, double), (double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = call f0($f0)
    let %1: double = call f0($f1)
    let %2: double = mul(%0, %1)
    let %3: double = call f1($f0)
    let %4: double = call f1($f1)
    let %5: double = mul(%3, %4)
    let %6: double = add(%2, %5)
    let %7: double = call f2($f0)
    let %8: double = call f2($f1)
    let %9: double = mul(%7, %8)
    let %10: double = add(%6, %9)
    return %10
  }
}
.fn main43_4 #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (double, double, double) heap(3)> <- [0] = 1, [1] = 2, [2] = 3
    let _ = alloc <m1: (double, double, double) heap(3)> <- [0] = 4, [1] = 5, [2] = 6
    let %2: double = call f3(f4.m0, f4.m1)
    let %3: double = mul(1000000, %2)
    let %4: int32 = conv.d2i.rtz(%3)
    let %5: unit = ext_call minimbt_print_int(%4)
    return %5
  }
}
.fn getz19_2 #f2 : fn((double, double, double)) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = load double field($f0, 0)
    let %1: double = load double field($f0, 1)
    let %2: double = load double field($f0, 2)
    return %2
  }
}
.thunk ::0 start
