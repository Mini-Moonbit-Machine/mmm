let rec inprod.1: Double = (v1.3: Array[Double], v2.5: Array[Double], i.7: Int) {
  let _8: Int = Int(0)
  if (_8 <= i.7) then {
    let _9: Double = Get v1.3[i.7]
    let _10: Double = Get v2.5[i.7]
    let _11: Double = FMul(_9, _10)
    let _12: Int = Int(1)
    let _13: Int = Sub(i.7, _12)
    let _14: Double = Apply(inprod.1, [v1.3, v2.5, _13, ])
    FAdd(_11, _14)
  } else {
    Double(0)
  }
}
let rec main.15: Unit = () {
  let _16: Int = Int(3)
  let _17: Double = Double(1.23)
  let v1.18: Array[Double] = ExtApply(minimbt_create_float_array, [_16, _17, ])
  let _19: Int = Int(3)
  let _20: Double = Double(4.56)
  let v2.21: Array[Double] = ExtApply(minimbt_create_float_array, [_19, _20, ])
  let _22: Double = Double(1000000)
  let _23: Int = Int(2)
  let _24: Double = Apply(inprod.1, [v1.18, v2.21, _23, ])
  let _25: Double = FMul(_22, _24)
  let _26: Int = ExtApply(minimbt_truncate, [_25, ])
  ExtApply(minimbt_print_int, [_26, ])
}
Apply(main.15, [])
