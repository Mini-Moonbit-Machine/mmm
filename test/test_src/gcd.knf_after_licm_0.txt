let rec gcd1l0: Int = (m2.3: Int, n4.5: Int) {
  let _6: Int = Int(0)
  if (m2.3 == _6) then {
    Var(n4.5)
  } else {
    if (m2.3 <= n4.5) then {
      let _7: Int = Sub(n4.5, m2.3)
      let _13: Int = Int(0)
      if (m2.3 == _13) then {
        Var(_7)
      } else {
        if (m2.3 <= _7) then {
          let _14: Int = Sub(_7, m2.3)
          Apply(gcd1l0, [m2.3, _14, ])
        } else {
          let _15: Int = Sub(m2.3, _7)
          Apply(gcd1l0, [_7, _15, ])
        }
      }
    } else {
      let _8: Int = Sub(m2.3, n4.5)
      let _16: Int = Int(0)
      if (n4.5 == _16) then {
        Var(_8)
      } else {
        if (n4.5 <= _8) then {
          let _17: Int = Sub(_8, n4.5)
          Apply(gcd1l0, [n4.5, _17, ])
        } else {
          let _18: Int = Sub(n4.5, _8)
          Apply(gcd1l0, [_8, _18, ])
        }
      }
    }
  }
}
let rec main9l1: Var({val: Some(Unit)}) = () {
  let _10: Int = Int(21600)
  let _11: Int = Int(337500)
  let _19: Int = Int(0)
  let _12: Int = if (_10 == _19) then {
    Var(_11)
  } else {
    if (_10 <= _11) then {
      let _20: Int = Sub(_11, _10)
      Apply(gcd1l0, [_10, _20, ])
    } else {
      let _21: Int = Sub(_10, _11)
      Apply(gcd1l0, [_11, _21, ])
    }
  }
  ExtApply(minimbt_print_int, [_12, ])
}
Apply(main9l1, [])