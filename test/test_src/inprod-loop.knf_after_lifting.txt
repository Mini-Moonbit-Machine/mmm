let rec inprod.26: Double = (v1.2: Array(Double), v2.3: Array(Double), acc.4: Double, i.5: Int) {
  let _6: Int = Int(0)
  if (_6 <= i.5) then {
    let _7: Double = Get v1.2[i.5]
    let _8: Double = Get v2.3[i.5]
    let _9: Double = FMul(_7, _8)
    let _10: Double = FAdd(acc.4, _9)
    let _11: Int = Int(1)
    let _12: Int = Sub(i.5, _11)
    Apply(inprod.26, [v1.2, v2.3, _10, _12, ])
  } else {
    Var(acc.4)
  }
}
let rec main.27: Var({val: Some(Unit)}) = () {
  let _14: Int = Int(3)
  let _15: Double = Double(1.23)
  let v1.16: Array(Double) = ExtApply(minimbt_create_float_array, [_14, _15, ])
  let _17: Int = Int(3)
  let _18: Double = Double(4.56)
  let v2.19: Array(Double) = ExtApply(minimbt_create_float_array, [_17, _18, ])
  let _20: Double = Double(1000000)
  let _21: Double = Double(0)
  let _22: Int = Int(2)
  let _23: Double = Apply(inprod.26, [v1.16, v2.19, _21, _22, ])
  let _24: Double = FMul(_20, _23)
  let _25: Int = ExtApply(minimbt_truncate, [_24, ])
  ExtApply(minimbt_print_int, [_25, ])
}
Apply(main.27, [])