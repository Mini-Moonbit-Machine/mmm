# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn h1_0 #f0 : fn((int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * 4)
    let %1: int32 = load int32 field($f0, 1 * 4)
    let %2: int32 = load int32 field($f0, 2 * 4)
    let %3: int32 = load int32 field($f0, 3 * 4)
    let %4: int32 = load int32 field($f0, 4 * 4)
    let %5: int32 = load int32 field($f0, 5 * 4)
    let %6: int32 = load int32 field($f0, 6 * 4)
    let %7: int32 = load int32 field($f0, 7 * 4)
    let %8: int32 = load int32 field($f0, 8 * 4)
    let %9: int32 = load int32 field($f0, 9 * 4)
    let _ = alloc <m0: closure(int32) -> int32 heap(11)> <- [0] = f3, [1] = %0, [2] = %1, [3] = %2, [4] = %3, [5] = %4, [6] = %5, [7] = %6, [8] = %7, [9] = %8, [10] = %9
    let %11: int32 = apply f0.m0(1)
    return %11
  }
}
.fn g24_3 #f3 : closure(int32) -> int32
.freevars (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)
.entry b0 {
  .bb #b0 () {
    let %0: int32 = add(^1, ^2)
    let %1: int32 = add(%0, ^3)
    let %2: int32 = add(%1, ^4)
    let %3: int32 = add(%2, ^5)
    let %4: int32 = add(%3, ^6)
    let %5: int32 = add(%4, ^7)
    let %6: int32 = add(%5, ^8)
    let %7: int32 = add(%6, ^9)
    let %8: int32 = add(%7, ^10)
    let %9: bool = le($f0, 0)
    br %9 b1() b2()
  }
  .bb #b1 () {
    let %10: int32 = neg($f0)
    let %11: int32 = apply self(%10)
    jump b3(%11)
  }
  .bb #b2 () {
    jump b3(%8)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn main39_1 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32) heap(10)> <- [0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9, [9] = 10
    let %1: int32 = call f0(f1.m0)
    let %2: unit = ext_call minimbt_print_int(%1)
    return ()
  }
}
.fn T$start_6 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.thunk ::0 start
