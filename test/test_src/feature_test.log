// [Asm] LoweringOrder: [0, 2, 1, 3, 5, 4, 6]
// [Asm] LoweringOrder: [[1, 2], [3], [3], [4, 5], [6], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b5, 1), (b2, 2), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b4, b6, b5, b2]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 3), (b1, 1), (b5, 0), (b2, 0), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v13, Insn(iref=%9) -> v12, Insn(iref=%8) -> v10, Insn(iref=%10) -> v11, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6, Insn(iref=%3) -> v5, Insn(iref=%13) -> v15, Insn(iref=%7) -> v9, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Insn(iref=%11) -> v14, Insn(iref=%6) -> v8, Insn(iref=%12) -> v16
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [4, 5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11, zero]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, zero]
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move: v13 <- v11
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move: v15 <- a0
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move: v17 <- v15
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero]
// [Asm] defined: v21 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, zero]
// [Asm] defined: fv22 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v17
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v24]
// [Asm] live_set: [v24, zero]
// [Asm] defined: v24 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v24
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] move: v12 <- a0
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, zero]
// [Asm] defs: [v13]
// [Asm] live_set: [v13, zero]
// [Asm] move: v13 <- v12
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v45]
// [Asm] live_set: [zero, v45]
// [Asm] defined: v45 is X
// [Asm] defs: [fv46]
// [Asm] live_set: [fv46, zero]
// [Asm] defined: fv46 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v41]
// [Asm] live_set: [v41, zero]
// [Asm] defined: v41 is X
// [Asm] defs: [fv42]
// [Asm] live_set: [zero, fv42]
// [Asm] defined: fv42 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v37]
// [Asm] live_set: [v37, zero]
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [zero, fv38]
// [Asm] defined: fv38 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v33]
// [Asm] live_set: [zero, v33]
// [Asm] defined: v33 is X
// [Asm] defs: [fv34]
// [Asm] live_set: [zero, fv34]
// [Asm] defined: fv34 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v27]
// [Asm] defined: v27 is X
// [Asm] defs: [fv28]
// [Asm] live_set: [fv28, zero]
// [Asm] defined: fv28 is F
// [Asm] defs: [v29]
// [Asm] live_set: [fv28, zero, v29]
// [Asm] defined: v29 is X
// [Asm] defs: [fv30]
// [Asm] live_set: [fv28, zero, fv30]
// [Asm] defined: fv30 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] defined: v18 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v18
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move: v16 <- a0
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move: v17 <- v16
// [Asm] defined: v17 is X
// [Asm] Label("main.36") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.36") clobbered_f: @hashset.of([fa1, fa0])
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.36_3 ->   j .main.36_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.36_6 ->   j .main.36_6
// [Asm] subst   li v21, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv22, v21 ->   fmv.d.x fa0, a0
// [Asm] subst   feq.d v14, fv22, fv22 ->   feq.d a0, fa0, fa0
// [Asm] subst   beq v14, zero, .main.36_5 ->   beq a0, zero, .main.36_5
// [Asm] subst   ret ->   ret
// [Asm] subst   li v24, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v45, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv46, v45 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v2, fv46, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v41, -4616189618054758400 ->   li a0, -4616189618054758400
// [Asm] subst   fmv.d.x fv42, v41 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v4, fv42, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v37, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv38, v37 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v6, fv38, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v33, 4602678819172646912 ->   li a0, 4602678819172646912
// [Asm] subst   fmv.d.x fv34, v33 ->   fmv.d.x fa0, a0
// [Asm] subst   fcvt.w.d v8, fv34, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v27, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv28, v27 ->   fmv.d.x fa0, a0
// [Asm] subst   li v29, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv30, v29 ->   fmv.d.x fa1, a0
// [Asm] subst   fle.d v10, fv28, fv30 ->   fle.d a0, fa0, fa1
// [Asm] subst   beq v10, zero, .main.36_2 ->   beq a0, zero, .main.36_2
// [Asm] subst   li v18, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main.36:
// [Asm] # block info: defs: [fv30, a1, fa1, v33, fv38, fa2, ft6, fa6, v27, a4, a6, ft5, ft10, v6, ft4, v5, ft9, v10, fa4, ft2, v37, a3, a7, fa7, fv28, fa3, fv42, fv34, ft3, v45, t2, v3, t1, v7, ft0, ft1, v41, v29, v8, v4, ft7, a5, a0, a2, v9, ft8, t3, fv46, t0, fa5, fa0, t4, v2], uses: [v10, a0, fv30, v37, v41, v33, fv38, fv46, fv28, v29, zero, fv34, v27, fv42, v45, v8, v4, v6, v2], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .main.36_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   li v45, 4613937818241073152  # live: [zero, v45]
// [Asm]   fmv.d.x fv46, v45  # live: [fv46, zero]
// [Asm]   fcvt.w.d v2, fv46, rtz  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, v2  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v3, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v41, -4616189618054758400  # live: [v41, zero]
// [Asm]   fmv.d.x fv42, v41  # live: [zero, fv42]
// [Asm]   fcvt.w.d v4, fv42, rtz  # live: [v4, zero]
// [Asm]   # save_ctx2  # live: [v4, zero]
// [Asm]   mv a0, v4  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v37, 4611686018427387904  # live: [v37, zero]
// [Asm]   fmv.d.x fv38, v37  # live: [zero, fv38]
// [Asm]   fcvt.w.d v6, fv38, rtz  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   mv a0, v6  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v33, 4602678819172646912  # live: [zero, v33]
// [Asm]   fmv.d.x fv34, v33  # live: [zero, fv34]
// [Asm]   fcvt.w.d v8, fv34, rtz  # live: [zero, v8]
// [Asm]   # save_ctx2  # live: [zero, v8]
// [Asm]   mv a0, v8  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v27, 4607182418800017408  # live: [zero, v27]
// [Asm]   fmv.d.x fv28, v27  # live: [fv28, zero]
// [Asm]   li v29, 4611686018427387904  # live: [fv28, zero, v29]
// [Asm]   fmv.d.x fv30, v29  # live: [fv28, zero, fv30]
// [Asm]   fle.d v10, fv28, fv30  # live: [v10, zero]
// [Asm] # control
// [Asm]   beq v10, zero, .main.36_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v24, v12, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13, zero]
// [Asm] # block parameters: []
// [Asm] .main.36_1:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v24, 1  # live: [v24, zero]
// [Asm]   mv a0, v24  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v12, a0  # live: [v12, zero]
// [Asm]   # restore_ctx2  # live: [v12, zero]
// [Asm] # control
// [Asm]   mv v13, v12  # live: [v13, zero]
// [Asm] 
// [Asm] # block info: defs: [fv22, v14, v21], uses: [fv22, v14, v21, zero], upward_exposed: [zero], params_defs: [v13]
// [Asm] # live_in: [v13, zero], live_out: [zero]
// [Asm] # block parameters: [v13]
// [Asm] .main.36_3:
// [Asm]   li v21, 4607182418800017408  # live: [v21, zero]
// [Asm]   fmv.d.x fv22, v21  # live: [fv22, zero]
// [Asm]   feq.d v14, fv22, fv22  # live: [v14, zero]
// [Asm] # control
// [Asm]   beq v14, zero, .main.36_5  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v16, v18, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .main.36_4:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v18, 1  # live: [v18]
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v16, a0  # live: [v16]
// [Asm]   # restore_ctx2  # live: [v16]
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .main.36_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v15, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .main.36_5:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v15, a0  # live: [v15]
// [Asm]   # restore_ctx2  # live: [v15]
// [Asm] # control
// [Asm]   mv v17, v15  # live: [v17]
// [Asm]   j .main.36_6  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v13, zero]
// [Asm] # block parameters: []
// [Asm] .main.36_2:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v11, a0  # live: [v11, zero]
// [Asm]   # restore_ctx2  # live: [v11, zero]
// [Asm] # control
// [Asm]   mv v13, v11  # live: [v13, zero]
// [Asm]   j .main.36_3  # live: [v13, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.36  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.36
// [Main]   .type main.36, @function
// [Main] # leaf false
// [Main] main.36:
// [Main] .main.36_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, -4616189618054758400
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4602678819172646912
// [Main]   fmv.d.x fa0, a0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fle.d a0, fa0, fa1
// [Main]   beq a0, zero, .main.36_2
// [Main] 
// [Main] .main.36_1:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.36_3:
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   feq.d a0, fa0, fa0
// [Main]   beq a0, zero, .main.36_5
// [Main] 
// [Main] .main.36_4:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.36_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main.36_5:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   j .main.36_6
// [Main] 
// [Main] .main.36_2:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   j .main.36_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.36
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, Unit)
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])])
// [Typer] resolve: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])
// [Typer] resolve: Prim(Double(1), Double(2), Add, kind=None)
// [Typer] resolve: Double(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])])
// [Typer] resolve: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])
// [Typer] resolve: Prim(Double(1), Double(2), Sub, kind=None)
// [Typer] resolve: Double(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])])
// [Typer] resolve: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])
// [Typer] resolve: Prim(Double(1), Double(2), Mul, kind=None)
// [Typer] resolve: Double(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])])
// [Typer] resolve: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])
// [Typer] resolve: Prim(Double(1), Double(2), Div, kind=None)
// [Typer] resolve: Double(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Typer] resolve: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] resolve: LE(Double(1), Double(2))
// [Typer] resolve: Double(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: App(Var("print_int"), [Int(1)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("print_int"), [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("print_int")
// [Typer] resolve: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] resolve: Eq(Double(1), Double(1))
// [Typer] resolve: Double(1)
// [Typer] resolve: Double(1)
// [Typer] resolve: App(Var("print_int"), [Int(1)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("print_int"), [Int(0)])
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Add, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Sub, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Mul, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Div, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Typer] infer: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] check: LE(Double(1), Double(2)) against Bool
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("print_int"), [Int(1)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("print_int"), [Int(0)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] check: Eq(Double(1), Double(1)) against Bool
// [Typer] infer: Double(1)
// [Typer] infer: Double(1)
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("print_int"), [Int(1)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("print_int"), [Int(0)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_4: MayEscape, _5: MayEscape, _10: MayEscape, _11: MayEscape, _16: MayEscape, _17: MayEscape, _22: MayEscape, _23: MayEscape, _28: MayEscape, _29: MayEscape, _34: MayEscape, _35: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.36 false true true false true
// [CoreOpt] allow_inline: false %0 main.36 false true true false true
// [CoreOpt] allow_inline: false %0 main.36 false true true false true
// [CoreOpt] allow_inline: false %0 main.36 false true true false true
// [CoreOpt] allow_inline: false %0 main.36 false true true false true
// [CoreOpt] allow_inline: false %0 main.36 false true true false true
