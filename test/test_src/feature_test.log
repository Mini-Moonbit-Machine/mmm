// [Asm] pre_assigned_registers: Insn(iref=%15) -> v23, Self(fref=f0) -> v0, Insn(iref=%9) -> fv11, Insn(iref=%16) -> v22, Insn(iref=%8) -> v10, Insn(iref=%10) -> v12, Insn(iref=%14) -> v21, BlockParam(bref=b8, bpref=$b.0) -> v19, Insn(iref=%5) -> v7, Insn(iref=%0) -> fv2, Insn(iref=%19) -> v18, Insn(iref=%4) -> v6, Insn(iref=%3) -> fv5, Insn(iref=%18) -> v16, Insn(iref=%13) -> v20, Insn(iref=%7) -> v9, BlockParam(bref=b5, bpref=$b.0) -> v24, Insn(iref=%17) -> v15, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Insn(iref=%20) -> v17, Insn(iref=%11) -> v13, Insn(iref=%6) -> fv8, BlockParam(bref=b9, bpref=$b.0) -> v25, Insn(iref=%12) -> v14
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v26]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v23]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v23]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [a0]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v22]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, zero]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [zero, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v69, zero]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [fv70]
// [Asm] live_set: [fv70, zero]
// [Asm] move_origin: []
// [Asm] defined: fv70 is F
// [Asm] defs: [v71]
// [Asm] live_set: [fv70, v71, zero]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [fv72]
// [Asm] live_set: [fv70, zero, fv72]
// [Asm] move_origin: []
// [Asm] defined: fv72 is F
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, zero]
// [Asm] move_origin: []
// [Asm] defined: fv2 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, zero]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [fv63]
// [Asm] live_set: [fv63, zero]
// [Asm] move_origin: []
// [Asm] defined: fv63 is F
// [Asm] defs: [v64]
// [Asm] live_set: [fv63, zero, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [fv65]
// [Asm] live_set: [fv63, fv65, zero]
// [Asm] move_origin: []
// [Asm] defined: fv65 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, zero]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [zero, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [fv56]
// [Asm] live_set: [fv56, zero]
// [Asm] move_origin: []
// [Asm] defined: fv56 is F
// [Asm] defs: [v57]
// [Asm] live_set: [v57, fv56, zero]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [fv58]
// [Asm] live_set: [fv56, zero, fv58]
// [Asm] move_origin: []
// [Asm] defined: fv58 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [zero, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v48, zero]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [fv49]
// [Asm] live_set: [fv49, zero]
// [Asm] move_origin: []
// [Asm] defined: fv49 is F
// [Asm] defs: [v50]
// [Asm] live_set: [fv49, zero, v50]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [fv51]
// [Asm] live_set: [fv49, zero, fv51]
// [Asm] move_origin: []
// [Asm] defined: fv51 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41, zero]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [fv42]
// [Asm] live_set: [zero, fv42]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v43, zero, fv42]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [fv44]
// [Asm] live_set: [fv44, zero, fv42]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v19]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32, zero]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [zero, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [fv30]
// [Asm] live_set: [zero, fv30]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v17]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v34]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.31"];
// [Asm]   r0 [label="v26 ← a0", color=green];
// [Asm]   r46 [label="v19 ← a0", color=green];
// [Asm]   r38 [label="v43 ← a0", color=green];
// [Asm]   r33 [label="v48 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v64 ← a0", color=green];
// [Asm]   r47 [label="v34 ← a0", color=green];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r44 [label="v21 ← a0", color=green];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r42 [label="v20 ← a0", color=green];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r29 [label="v55 ← a0", color=green];
// [Asm]   r35 [label="v12 ← a0", color=green];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r36 [label="v13 ← a0", color=green];
// [Asm]   r15 [label="v24 ← a0", color=green];
// [Asm]   r32 [label="v10 ← a0", color=green];
// [Asm]   r24 [label="v4 ← a0", color=green];
// [Asm]   r43 [label="v29 ← a0", color=green];
// [Asm]   r31 [label="v9 ← a0", color=green];
// [Asm]   r39 [label="v14 ← a0", color=green];
// [Asm]   r17 [label="zero", color=blue];
// [Asm]   r48 [label="v18 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r37 [label="v41 ← a0", color=green];
// [Asm]   r20 [label="v16 ← a0", color=green];
// [Asm]   r23 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r27 [label="v6 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r40 [label="v25 ← a0", color=green];
// [Asm]   r28 [label="v7 ← a0", color=green];
// [Asm]   r41 [label="v32 ← a0", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r34 [label="v50 ← a0", color=green];
// [Asm]   r22 [label="v71 ← a0", color=green];
// [Asm]   r14 [label="v23 ← a0", color=green];
// [Asm]   r30 [label="v57 ← a0", color=green];
// [Asm]   r45 [label="v17 ← a0", color=green];
// [Asm]   r25 [label="v62 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v22 ← a0", color=green];
// [Asm]   r18 [label="v15 ← a0", color=green];
// [Asm]   r19 [label="v37 ← a0", color=green];
// [Asm]   r21 [label="v69 ← a0", color=green];
// [Asm]   r7 -- r17;
// [Asm]   r10 -- r17;
// [Asm]   r1 -- r9;
// [Asm]   r17 -- r44;
// [Asm]   r17 -- r42;
// [Asm]   r17 -- r18;
// [Asm]   r8 -- r17;
// [Asm]   r17 -- r21;
// [Asm]   r17 -- r23;
// [Asm]   r17 -- r43;
// [Asm]   r1 -- r12;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r17 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r17 -- r26;
// [Asm]   r13 -- r17;
// [Asm]   r17 -- r35;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r17;
// [Asm]   r17 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r17;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r17;
// [Asm]   r17 -- r25;
// [Asm]   r1 -- r5;
// [Asm]   r17 -- r30;
// [Asm]   r17 -- r31;
// [Asm]   r17 -- r36;
// [Asm]   r17 -- r38;
// [Asm]   r1 -- r3;
// [Asm]   r17 -- r32;
// [Asm]   r17 -- r27;
// [Asm]   r17 -- r33;
// [Asm]   r17 -- r39;
// [Asm]   r17 -- r34;
// [Asm]   r17 -- r19;
// [Asm]   r17 -- r28;
// [Asm]   r17 -- r37;
// [Asm]   r17 -- r20;
// [Asm]   comment = "0:v26-> 1:a0-> 2:a1-> 17:zero-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 18:v15-> 19:v37-> 20:v16-> 21:v69-> 22:v71-> 23:v3-> 24:v4-> 25:v62-> 26:v64-> 27:v6-> 28:v7-> 29:v55-> 30:v57-> 31:v9-> 32:v10-> 33:v48-> 34:v50-> 35:v12-> 36:v13-> 37:v41-> 38:v43-> 39:v14-> 41:v32-> 42:v20-> 43:v29-> 44:v21-> 14:v23-> 15:v24-> 16:v22-> 40:v25-> 45:v17-> 46:v19-> 47:v34-> 48:v18"
// [Asm]   comment = "v26<-a0;v19<-a0;v43<-a0;v48<-a0;v64<-a0;v34<-a0;v21<-a0;v20<-a0;v55<-a0;v12<-a0;v13<-a0;v24<-a0;v10<-a0;v4<-a0;v29<-a0;v9<-a0;v14<-a0;v18<-a0;v41<-a0;v16<-a0;v3<-a0;v6<-a0;v25<-a0;v7<-a0;v32<-a0;v50<-a0;v71<-a0;v23<-a0;v57<-a0;v17<-a0;v62<-a0;v22<-a0;v15<-a0;v37<-a0;v69<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.31"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv44 ← fa1", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv56 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv49 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r24 [label="fv65 ← fa1", color=green];
// [Asm]   r32 [label="fv42 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r31 [label="fv11 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv70 ← fa0", color=green];
// [Asm]   r23 [label="fv63 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv58 ← fa1", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv8 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv30 ← fa0", color=green];
// [Asm]   r22 [label="fv2 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv51 ← fa1", color=green];
// [Asm]   r25 [label="fv5 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv38 ← fa0", color=green];
// [Asm]   r21 [label="fv72 ← fa1", color=green];
// [Asm]   r32 -- r33;
// [Asm]   r26 -- r27;
// [Asm]   r23 -- r24;
// [Asm]   r20 -- r21;
// [Asm]   r29 -- r30;
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv38-> 20:fv70-> 21:fv72-> 22:fv2-> 23:fv63-> 24:fv65-> 25:fv5-> 26:fv56-> 27:fv58-> 28:fv8-> 29:fv49-> 30:fv51-> 31:fv11-> 32:fv42-> 33:fv44-> 34:fv30"
// [Asm]   comment = "fv44<-fa1;fv56<-fa0;fv49<-fa0;fv65<-fa1;fv42<-fa0;fv11<-fa0;fv70<-fa0;fv63<-fa0;fv58<-fa1;fv8<-fa0;fv30<-fa0;fv2<-fa0;fv51<-fa1;fv5<-fa0;fv38<-fa0;fv72<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v26, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.31_5 ->   j .main.31_5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v37, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv38, v37 ->   fmv.d.x fa0, a0
// [Asm] subst   feq.d v16, fv38, fv38 ->   feq.d a0, fa0, fa0
// [Asm] subst   beq v16, zero, .main.31_7 ->   beq a0, zero, .main.31_7
// [Asm] subst   li v69, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv70, v69 ->   fmv.d.x fa0, a0
// [Asm] subst   li v71, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv72, v71 ->   fmv.d.x fa1, a0
// [Asm] subst   fadd.d fv2, fv70, fv72 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v3, fv2, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v62, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv63, v62 ->   fmv.d.x fa0, a0
// [Asm] subst   li v64, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv65, v64 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv5, fv63, fv65 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v6, fv5, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v55, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv56, v55 ->   fmv.d.x fa0, a0
// [Asm] subst   li v57, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv58, v57 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv8, fv56, fv58 ->   fmul.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v9, fv8, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v48, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv49, v48 ->   fmv.d.x fa0, a0
// [Asm] subst   li v50, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv51, v50 ->   fmv.d.x fa1, a0
// [Asm] subst   fdiv.d fv11, fv49, fv51 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v12, fv11, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v41, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv42, v41 ->   fmv.d.x fa0, a0
// [Asm] subst   li v43, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv44, v43 ->   fmv.d.x fa1, a0
// [Asm] subst   fle.d v14, fv42, fv44 ->   fle.d a0, fa0, fa1
// [Asm] subst   beq v14, zero, .main.31_2 ->   beq a0, zero, .main.31_2
// [Asm] subst   j .main.31_9 ->   j .main.31_9
// [Asm] subst   li v32, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v29, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv30, v29 ->   fmv.d.x fa0, a0
// [Asm] subst   feq.d v21, fv30, fv30 ->   feq.d a0, fa0, fa0
// [Asm] subst   beq v21, zero, .main.31_4 ->   beq a0, zero, .main.31_4
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main.31_8 ->   j .main.31_8
// [Asm] subst   li v34, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.31 ->   call main.31
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.31  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.31:
// [Asm] # block info: defs: [fv63, a1, fa1, v64, fv2, fa2, ft6, fv58, fa6, a4, v50, a6, ft5, ft10, v6, v62, ft4, ft9, v10, fv65, fa4, ft2, v43, a3, a7, fa7, v48, fa3, fv11, ft3, fv42, t2, v55, v3, t1, v69, v14, v13, v7, ft0, ft1, v41, v12, fv5, fv70, v4, v57, ft7, v71, a5, fv56, a0, fv8, a2, v9, ft8, fv51, t3, t0, fa5, fa0, t4, fv49, fv44, fv72], uses: [fv72, fv63, v69, v14, v41, v12, v64, fv5, fv70, fv2, fv58, zero, v50, v6, v57, v62, v71, fv65, fv56, a0, fv8, v43, v9, fv51, v48, fv11, fv42, fv49, fv44, v55, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .main.31_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   li v69, 4607182418800017408  # live: [v69, zero]
// [Asm]   fmv.d.x fv70, v69  # live: [fv70, zero]
// [Asm]   li v71, 4611686018427387904  # live: [fv70, v71, zero]
// [Asm]   fmv.d.x fv72, v71  # live: [fv70, zero, fv72]
// [Asm]   fadd.d fv2, fv70, fv72  # live: [fv2, zero]
// [Asm]   fcvt.w.d v3, fv2, rtz  # live: [zero, v3]
// [Asm]   # save_ctx2  # live: [zero, v3]
// [Asm]   mv a0, v3  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v62, 4607182418800017408  # live: [v62, zero]
// [Asm]   fmv.d.x fv63, v62  # live: [fv63, zero]
// [Asm]   li v64, 4611686018427387904  # live: [fv63, zero, v64]
// [Asm]   fmv.d.x fv65, v64  # live: [fv63, fv65, zero]
// [Asm]   fsub.d fv5, fv63, fv65  # live: [fv5, zero]
// [Asm]   fcvt.w.d v6, fv5, rtz  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   mv a0, v6  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v55, 4607182418800017408  # live: [zero, v55]
// [Asm]   fmv.d.x fv56, v55  # live: [fv56, zero]
// [Asm]   li v57, 4611686018427387904  # live: [v57, fv56, zero]
// [Asm]   fmv.d.x fv58, v57  # live: [fv56, zero, fv58]
// [Asm]   fmul.d fv8, fv56, fv58  # live: [zero, fv8]
// [Asm]   fcvt.w.d v9, fv8, rtz  # live: [zero, v9]
// [Asm]   # save_ctx2  # live: [zero, v9]
// [Asm]   mv a0, v9  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v48, 4607182418800017408  # live: [v48, zero]
// [Asm]   fmv.d.x fv49, v48  # live: [fv49, zero]
// [Asm]   li v50, 4611686018427387904  # live: [fv49, zero, v50]
// [Asm]   fmv.d.x fv51, v50  # live: [fv49, zero, fv51]
// [Asm]   fdiv.d fv11, fv49, fv51  # live: [zero, fv11]
// [Asm]   fcvt.w.d v12, fv11, rtz  # live: [v12, zero]
// [Asm]   # save_ctx2  # live: [v12, zero]
// [Asm]   mv a0, v12  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v41, 4607182418800017408  # live: [v41, zero]
// [Asm]   fmv.d.x fv42, v41  # live: [zero, fv42]
// [Asm]   li v43, 4611686018427387904  # live: [v43, zero, fv42]
// [Asm]   fmv.d.x fv44, v43  # live: [fv44, zero, fv42]
// [Asm]   fle.d v14, fv42, fv44  # live: [v14, zero]
// [Asm] # control
// [Asm]   beq v14, zero, .main.31_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, fv30, v32, ft0, ft1, a1, fa1, fa2, ft6, v29, fa6, v20, a4, a6, ft5, ft10, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [fv30, v32, v21, a0, v29, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .main.31_1:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v32, 1  # live: [v32, zero]
// [Asm]   mv a0, v32  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v20, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v29, 4607182418800017408  # live: [zero, v29]
// [Asm]   fmv.d.x fv30, v29  # live: [zero, fv30]
// [Asm]   feq.d v21, fv30, fv30  # live: [v21, zero]
// [Asm] # control
// [Asm]   beq v21, zero, .main.31_4  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v26, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2], uses: [v26, a0, v23], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .main.31_3:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v26, 1  # live: [v26]
// [Asm]   mv a0, v26  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v23, a0  # live: [v23]
// [Asm]   # restore_ctx2  # live: [v23]
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .main.31_5:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v25, a0], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: []
// [Asm] # block parameters: [v25]
// [Asm] .main.31_9:
// [Asm] # control
// [Asm]   mv a0, v25  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fv38, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v37, v16, zero, a0, fv38], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .main.31_2:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v15, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v37, 4607182418800017408  # live: [v37, zero]
// [Asm]   fmv.d.x fv38, v37  # live: [zero, fv38]
// [Asm]   feq.d v16, fv38, fv38  # live: [v16, zero]
// [Asm] # control
// [Asm]   beq v16, zero, .main.31_7  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, v34, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v18, v34, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .main.31_6:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v34, 1  # live: [v34]
// [Asm]   mv a0, v34  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v18, a0  # live: [v18]
// [Asm]   # restore_ctx2  # live: [v18]
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: [v25]
// [Asm] # block parameters: [v19]
// [Asm] .main.31_8:
// [Asm] # control
// [Asm]   mv v25, v19  # live: [v25]
// [Asm]   j .main.31_9  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v17, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .main.31_7:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v17, a0  # live: [v17]
// [Asm]   # restore_ctx2  # live: [v17]
// [Asm] # control
// [Asm]   mv v19, v17  # live: [v19]
// [Asm]   j .main.31_8  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [zero, a0, v22], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .main.31_4:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v22, a0  # live: [v22]
// [Asm]   # restore_ctx2  # live: [v22]
// [Asm] # control
// [Asm]   mv v24, v22  # live: [v24]
// [Asm]   j .main.31_5  # live: [v24]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Add, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Sub, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Div, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Knf] build_knf: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%15)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%16)])
// [Core] b1 control: Panic -> Branch(cond=Insn(iref=%14), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b6 control: Panic -> Jump(target=b8, args=[Insn(iref=%19)])
// [Core] b7 control: Panic -> Jump(target=b8, args=[Insn(iref=%20)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%18), t=b6, t_args=[], f=b7, f_args=[])
// [Core] b5 control: Panic -> Jump(target=b9, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b8 control: Panic -> Jump(target=b9, args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%12), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b9 control: Panic -> Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.31
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.31
// [Main]   .type main.31, @function
// [Main] # leaf false
// [Main] main.31:
// [Main] .main.31_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fle.d a0, fa0, fa1
// [Main]   beq a0, zero, .main.31_2
// [Main] 
// [Main] .main.31_1:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   feq.d a0, fa0, fa0
// [Main]   beq a0, zero, .main.31_4
// [Main] 
// [Main] .main.31_3:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.31_5:
// [Main] 
// [Main] .main.31_9:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main.31_2:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   feq.d a0, fa0, fa0
// [Main]   beq a0, zero, .main.31_7
// [Main] 
// [Main] .main.31_6:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.31_8:
// [Main]   j .main.31_9
// [Main] 
// [Main] .main.31_7:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   j .main.31_8
// [Main] 
// [Main] .main.31_4:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   j .main.31_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.31
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%15)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%16)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Double(val=1), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%19)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%20)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Double(val=1), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Branch(cond=Insn(iref=%18), t=b6, t_args=[], f=b7, f_args=[])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Branch(cond=Insn(iref=%12), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.31 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: main.1 false
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] freq: {main.1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
