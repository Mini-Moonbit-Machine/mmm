// [Main] function thunk_main(k) {
// [Main]   function main_1(k) {
// [Main]     const _2 = 1;
// [Main]     const _3 = 2;
// [Main]     const _4 = _2 + _3;
// [Main]     return $thunk(() => $external(minimbt_int_of_float, function (_5) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (_7) {
// [Main]         const _8 = 1;
// [Main]         const _9 = 2;
// [Main]         const _10 = _8 - _9;
// [Main]         return $thunk(() => $external(minimbt_int_of_float, function (_11) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (_13) {
// [Main]             const _14 = 1;
// [Main]             const _15 = 2;
// [Main]             const _16 = _14 * _15;
// [Main]             return $thunk(() => $external(minimbt_int_of_float, function (_17) {
// [Main]               return $thunk(() => $external(minimbt_print_int, function (_19) {
// [Main]                 const _20 = 1;
// [Main]                 const _21 = 2;
// [Main]                 const _22 = _20 / _21;
// [Main]                 return $thunk(() => $external(minimbt_int_of_float, function (_23) {
// [Main]                   return $thunk(() => $external(minimbt_print_int, function (_25) {
// [Main]                     const _26 = 1;
// [Main]                     const _27 = 2;
// [Main]                     function j0(_31) {
// [Main]                       const _32 = 1;
// [Main]                       const _33 = 1;
// [Main]                       if (_32 === _33) {
// [Main]                         const _34 = 1;
// [Main]                         return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]                           return $thunk(() => k(x))
// [Main]                         }
// [Main]                         , _34))
// [Main]                       } else {
// [Main]                         const _35 = 0;
// [Main]                         return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]                           return $thunk(() => k(x))
// [Main]                         }
// [Main]                         , _35))
// [Main]                       }
// [Main]                     }
// [Main]                     if (_26 <= _27) {
// [Main]                       const _28 = 1;
// [Main]                       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]                         return $thunk(() => j0(x))
// [Main]                       }
// [Main]                       , _28))
// [Main]                     } else {
// [Main]                       const _29 = 0;
// [Main]                       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]                         return $thunk(() => j0(x))
// [Main]                       }
// [Main]                       , _29))
// [Main]                     }
// [Main]                   }
// [Main]                   , _23))
// [Main]                 }
// [Main]                 , _22))
// [Main]               }
// [Main]               , _17))
// [Main]             }
// [Main]             , _16))
// [Main]           }
// [Main]           , _11))
// [Main]         }
// [Main]         , _10))
// [Main]       }
// [Main]       , _5))
// [Main]     }
// [Main]     , _4))
// [Main]   }
// [Main]   return $thunk(() => main_1(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Add, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Sub, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Mul, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Div, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Typer] infer: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] check: LE(Double(1), Double(2)) against Bool
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("print_int"), [Int(1)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("print_int"), [Int(0)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] check: Eq(Double(1), Double(1)) against Bool
// [Typer] infer: Double(1)
// [Typer] infer: Double(1)
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("print_int"), [Int(1)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("print_int"), [Int(0)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
