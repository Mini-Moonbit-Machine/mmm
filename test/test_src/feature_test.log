// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Unit), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Unit), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Add, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Unit), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Sub, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Unit), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Unit), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Unit), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Div, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Unit), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Knf] build_knf: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function main_1(k) {
// [Main]     const _2 = 1;
// [Main]     const _3 = 2;
// [Main]     const _4 = _2 + _3;
// [Main]     const _5 = minimbt_int_of_float($force(_4));
// [Main]     const _7 = minimbt_print_int($force(_5));
// [Main]     const _8 = 1;
// [Main]     const _9 = 2;
// [Main]     const _10 = _8 - _9;
// [Main]     const _11 = minimbt_int_of_float($force(_10));
// [Main]     const _13 = minimbt_print_int($force(_11));
// [Main]     const _14 = 1;
// [Main]     const _15 = 2;
// [Main]     const _16 = _14 * _15;
// [Main]     const _17 = minimbt_int_of_float($force(_16));
// [Main]     const _19 = minimbt_print_int($force(_17));
// [Main]     const _20 = 1;
// [Main]     const _21 = 2;
// [Main]     const _22 = _20 / _21;
// [Main]     const _23 = minimbt_int_of_float($force(_22));
// [Main]     const _25 = minimbt_print_int($force(_23));
// [Main]     const _26 = 1;
// [Main]     const _27 = 2;
// [Main]     const _31 = $force((() => {
// [Main]       if (_26 <= _27) {
// [Main]         const _28 = 1;
// [Main]         return minimbt_print_int($force(_28))
// [Main]       } else {
// [Main]         const _29 = 0;
// [Main]         return minimbt_print_int($force(_29))
// [Main]       }
// [Main]     })());
// [Main]     const _32 = 1;
// [Main]     const _33 = 1;
// [Main]     if (_32 === _33) {
// [Main]       const _34 = 1;
// [Main]       return k(minimbt_print_int($force(_34)))
// [Main]     } else {
// [Main]       const _35 = 0;
// [Main]       return k(minimbt_print_int($force(_35)))
// [Main]     }
// [Main]   }
// [Main]   return $thunk(() => main_1(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var({val: None})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var({val: None})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Add, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var({val: None})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Sub, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var({val: None})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Mul, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])]), Let(("_", Var({val: None})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=None)]) against Int
// [Typer] infer: Prim(Double(1), Double(2), Div, kind=None)
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] check: Var("int_of_float") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Typer] infer: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] check: LE(Double(1), Double(2)) against Bool
// [Typer] infer: Double(1)
// [Typer] infer: Double(2)
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("print_int"), [Int(1)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("print_int"), [Int(0)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Typer] check: Eq(Double(1), Double(1)) against Bool
// [Typer] infer: Double(1)
// [Typer] infer: Double(1)
// [Typer] unify: Double and Double
// [Typer] infer: App(Var("print_int"), [Int(1)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(1) against Int
// [Typer] infer: App(Var("print_int"), [Int(0)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
