// [Asm] LoweringOrder: [0, 2, 1, 3, 5, 4, 6]
// [Asm] LoweringOrder: [[1, 2], [3], [3], [4, 5], [6], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b5, 1), (b2, 2), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b4, b6, b5, b2]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 3), (b1, 1), (b5, 0), (b2, 0), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v17, Insn(iref=%9) -> fv11, Insn(iref=%16) -> v20, Insn(iref=%8) -> v10, Insn(iref=%10) -> v12, Insn(iref=%14) -> v15, Insn(iref=%5) -> v7, Insn(iref=%0) -> fv2, Insn(iref=%4) -> v6, Insn(iref=%3) -> fv5, Insn(iref=%13) -> v16, Insn(iref=%7) -> v9, Insn(iref=%17) -> v19, BlockParam(bref=b6, bpref=$b.0) -> v21, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Insn(iref=%11) -> v13, Insn(iref=%6) -> fv8, Insn(iref=%12) -> v14
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [4, 5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero]
// [Asm] defined: v28 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v28
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] move: v16 <- a0
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] defs: [v17]
// [Asm] live_set: [v17, zero]
// [Asm] move: v17 <- v16
// [Asm] defined: v17 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, zero]
// [Asm] defined: v25 is X
// [Asm] defs: [fv26]
// [Asm] live_set: [zero, fv26]
// [Asm] defined: fv26 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 2 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero]
// [Asm] move: v15 <- a0
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero]
// [Asm] defs: [v17]
// [Asm] live_set: [v17, zero]
// [Asm] move: v17 <- v15
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17, zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move: v19 <- a0
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move: v21 <- v19
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v59]
// [Asm] live_set: [v59, zero]
// [Asm] defined: v59 is X
// [Asm] defs: [fv60]
// [Asm] live_set: [zero, fv60]
// [Asm] defined: fv60 is F
// [Asm] defs: [v61]
// [Asm] live_set: [v61, zero, fv60]
// [Asm] defined: v61 is X
// [Asm] defs: [fv62]
// [Asm] live_set: [fv62, zero, fv60]
// [Asm] defined: fv62 is F
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2, zero]
// [Asm] defined: fv2 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v52]
// [Asm] live_set: [v52, zero]
// [Asm] defined: v52 is X
// [Asm] defs: [fv53]
// [Asm] live_set: [fv53, zero]
// [Asm] defined: fv53 is F
// [Asm] defs: [v54]
// [Asm] live_set: [fv53, zero, v54]
// [Asm] defined: v54 is X
// [Asm] defs: [fv55]
// [Asm] live_set: [fv55, fv53, zero]
// [Asm] defined: fv55 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, zero]
// [Asm] defined: fv5 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v6
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v45]
// [Asm] live_set: [zero, v45]
// [Asm] defined: v45 is X
// [Asm] defs: [fv46]
// [Asm] live_set: [fv46, zero]
// [Asm] defined: fv46 is F
// [Asm] defs: [v47]
// [Asm] live_set: [fv46, v47, zero]
// [Asm] defined: v47 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [fv48, fv46, zero]
// [Asm] defined: fv48 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [zero, fv8]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v9]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [zero]
// [Asm] move: v10 <- a0
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v38]
// [Asm] live_set: [v38, zero]
// [Asm] defined: v38 is X
// [Asm] defs: [fv39]
// [Asm] live_set: [zero, fv39]
// [Asm] defined: fv39 is F
// [Asm] defs: [v40]
// [Asm] live_set: [zero, fv39, v40]
// [Asm] defined: v40 is X
// [Asm] defs: [fv41]
// [Asm] live_set: [zero, fv39, fv41]
// [Asm] defined: fv41 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11]
// [Asm] defined: fv11 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v13]
// [Asm] live_set: [zero]
// [Asm] move: v13 <- a0
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v31]
// [Asm] live_set: [v31, zero]
// [Asm] defined: v31 is X
// [Asm] defs: [fv32]
// [Asm] live_set: [fv32, zero]
// [Asm] defined: fv32 is F
// [Asm] defs: [v33]
// [Asm] live_set: [fv32, zero, v33]
// [Asm] defined: v33 is X
// [Asm] defs: [fv34]
// [Asm] live_set: [fv32, zero, fv34]
// [Asm] defined: fv34 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] defined: v22 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v22
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move: v20 <- a0
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move: v21 <- v20
// [Asm] defined: v21 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v21
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main1.36") clobbered_x: @hashset.of([a0])
// [Asm] Label("main1.36") clobbered_f: @hashset.of([fa1, fa0])
// [Asm] subst   li v28, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v25, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv26, v25 ->   fmv.d.x fa0, a0
// [Asm] subst   feq.d v18, fv26, fv26 ->   feq.d a0, fa0, fa0
// [Asm] subst   beq v18, zero, .main1.36_5 ->   beq a0, zero, .main1.36_5
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main1.36_3 ->   j .main1.36_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .main1.36_6 ->   j .main1.36_6
// [Asm] subst   li v59, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv60, v59 ->   fmv.d.x fa0, a0
// [Asm] subst   li v61, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv62, v61 ->   fmv.d.x fa1, a0
// [Asm] subst   fadd.d fv2, fv60, fv62 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v3, fv2, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v52, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv53, v52 ->   fmv.d.x fa0, a0
// [Asm] subst   li v54, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv55, v54 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv5, fv53, fv55 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v6, fv5, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v45, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv46, v45 ->   fmv.d.x fa0, a0
// [Asm] subst   li v47, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv48, v47 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv8, fv46, fv48 ->   fmul.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v9, fv8, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v38, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv39, v38 ->   fmv.d.x fa0, a0
// [Asm] subst   li v40, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv41, v40 ->   fmv.d.x fa1, a0
// [Asm] subst   fdiv.d fv11, fv39, fv41 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   fcvt.w.d v12, fv11, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v31, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv32, v31 ->   fmv.d.x fa0, a0
// [Asm] subst   li v33, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv34, v33 ->   fmv.d.x fa1, a0
// [Asm] subst   fle.d v14, fv32, fv34 ->   fle.d a0, fa0, fa1
// [Asm] subst   beq v14, zero, .main1.36_2 ->   beq a0, zero, .main1.36_2
// [Asm] subst   li v22, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main1.36:
// [Asm] # block info: defs: [fv39, fv55, a1, fa1, v33, fv2, fa2, ft6, a4, fa6, fv41, a6, ft10, v59, ft5, v6, v54, ft4, ft9, v10, fa4, ft2, a3, v52, v31, a7, fa7, fv62, fa3, fv11, ft3, fv34, v45, t2, fv53, v61, v3, v40, t1, v14, v13, v7, ft0, ft1, v12, fv5, fv60, v4, v47, ft7, fv32, a5, a0, fv8, fv48, a2, v9, ft8, t3, t0, fv46, fa5, fa0, t4, v38], uses: [v40, v14, fv39, fv55, v12, v33, fv5, fv2, zero, fv41, fv60, v59, v47, v6, v54, fv32, a0, fv8, fv48, v52, v31, v9, fv46, fv62, fv11, fv34, v45, v38, fv53, v61, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .main1.36_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   li v59, 4607182418800017408  # live: [v59, zero]
// [Asm]   fmv.d.x fv60, v59  # live: [zero, fv60]
// [Asm]   li v61, 4611686018427387904  # live: [v61, zero, fv60]
// [Asm]   fmv.d.x fv62, v61  # live: [fv62, zero, fv60]
// [Asm]   fadd.d fv2, fv60, fv62  # live: [fv2, zero]
// [Asm]   fcvt.w.d v3, fv2, rtz  # live: [zero, v3]
// [Asm]   # save_ctx2  # live: [zero, v3]
// [Asm]   mv a0, v3  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v52, 4607182418800017408  # live: [v52, zero]
// [Asm]   fmv.d.x fv53, v52  # live: [fv53, zero]
// [Asm]   li v54, 4611686018427387904  # live: [fv53, zero, v54]
// [Asm]   fmv.d.x fv55, v54  # live: [fv55, fv53, zero]
// [Asm]   fsub.d fv5, fv53, fv55  # live: [fv5, zero]
// [Asm]   fcvt.w.d v6, fv5, rtz  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   mv a0, v6  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v45, 4607182418800017408  # live: [zero, v45]
// [Asm]   fmv.d.x fv46, v45  # live: [fv46, zero]
// [Asm]   li v47, 4611686018427387904  # live: [fv46, v47, zero]
// [Asm]   fmv.d.x fv48, v47  # live: [fv48, fv46, zero]
// [Asm]   fmul.d fv8, fv46, fv48  # live: [zero, fv8]
// [Asm]   fcvt.w.d v9, fv8, rtz  # live: [zero, v9]
// [Asm]   # save_ctx2  # live: [zero, v9]
// [Asm]   mv a0, v9  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v10, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v38, 4607182418800017408  # live: [v38, zero]
// [Asm]   fmv.d.x fv39, v38  # live: [zero, fv39]
// [Asm]   li v40, 4611686018427387904  # live: [zero, fv39, v40]
// [Asm]   fmv.d.x fv41, v40  # live: [zero, fv39, fv41]
// [Asm]   fdiv.d fv11, fv39, fv41  # live: [zero, fv11]
// [Asm]   fcvt.w.d v12, fv11, rtz  # live: [v12, zero]
// [Asm]   # save_ctx2  # live: [v12, zero]
// [Asm]   mv a0, v12  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v13, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v31, 4607182418800017408  # live: [v31, zero]
// [Asm]   fmv.d.x fv32, v31  # live: [fv32, zero]
// [Asm]   li v33, 4611686018427387904  # live: [fv32, zero, v33]
// [Asm]   fmv.d.x fv34, v33  # live: [fv32, zero, fv34]
// [Asm]   fle.d v14, fv32, fv34  # live: [v14, zero]
// [Asm] # control
// [Asm]   beq v14, zero, .main1.36_2  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v16, v28, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17, zero]
// [Asm] # block parameters: []
// [Asm] .main1.36_1:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v28, 1  # live: [v28, zero]
// [Asm]   mv a0, v28  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v16, a0  # live: [v16, zero]
// [Asm]   # restore_ctx2  # live: [v16, zero]
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17, zero]
// [Asm] 
// [Asm] # block info: defs: [v25, v18, fv26], uses: [v25, v18, fv26, zero], upward_exposed: [zero], params_defs: [v17]
// [Asm] # live_in: [v17, zero], live_out: [zero]
// [Asm] # block parameters: [v17]
// [Asm] .main1.36_3:
// [Asm]   li v25, 4607182418800017408  # live: [v25, zero]
// [Asm]   fmv.d.x fv26, v25  # live: [zero, fv26]
// [Asm]   feq.d v18, fv26, fv26  # live: [v18, zero]
// [Asm] # control
// [Asm]   beq v18, zero, .main1.36_5  # live: [zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, a6, ft10, ft5, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, v22, v20], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .main1.36_4:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v22, 1  # live: [v22]
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v20, a0  # live: [v20]
// [Asm]   # restore_ctx2  # live: [v20]
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .main1.36_6:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v19, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .main1.36_5:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v19, a0  # live: [v19]
// [Asm]   # restore_ctx2  # live: [v19]
// [Asm] # control
// [Asm]   mv v21, v19  # live: [v21]
// [Asm]   j .main1.36_6  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v15, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v17, zero]
// [Asm] # block parameters: []
// [Asm] .main1.36_2:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v15, a0  # live: [v15, zero]
// [Asm]   # restore_ctx2  # live: [v15, zero]
// [Asm] # control
// [Asm]   mv v17, v15  # live: [v17, zero]
// [Asm]   j .main1.36_3  # live: [v17, zero]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main1.36  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Add, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Sub, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])]), Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])])
// [Knf] build_knf: App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1), Double(2), Div, kind=Some(Double))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])), If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)])))
// [Knf] build_knf: If(LE(Double(1), Double(2)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: If(Eq(Double(1), Double(1)), App(Var("print_int"), [Int(1)]), App(Var("print_int"), [Int(0)]))
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main1.36
// [Main]   .type main1.36, @function
// [Main] # leaf false
// [Main] main1.36:
// [Main] .main1.36_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   fle.d a0, fa0, fa1
// [Main]   beq a0, zero, .main1.36_2
// [Main] 
// [Main] .main1.36_1:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main1.36_3:
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   feq.d a0, fa0, fa0
// [Main]   beq a0, zero, .main1.36_5
// [Main] 
// [Main] .main1.36_4:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main1.36_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main1.36_5:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   j .main1.36_6
// [Main] 
// [Main] .main1.36_2:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main]   j .main1.36_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main1.36
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0, 2, 1, 3, 5, 4, 6]
// [Wasm] LoweringOrder: [[1, 2], [3], [3], [4, 5], [6], [6], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b5, 1), (b2, 2), (b3, 0), (b0, 0)])
// [Wasm] LoweringOrder: [b0, b1, b3, b4, b6, b5, b2]
// [Wasm] LoweringOrder: HashMap::of([(b6, 4), (b4, 3), (b1, 1), (b5, 0), (b2, 0), (b3, 2), (b0, 0)])
// [Wasm] Lowering function main1.36
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%16)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%17)])
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Double(val=1), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Branch(cond=Insn(iref=%15), t=b4, t_args=[], f=b5, f_args=[])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%13)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%14)])
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Double(val=1), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Branch(cond=Insn(iref=%12), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main1.36 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {main1: Once}
// [KnfOpt] freq: {main1: Once}
// [KnfOpt] freq: {main1: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main1.36 false true true false true
// [CoreOpt] allow_inline: false %0 main1.36 false true true false true
// [CoreOpt] allow_inline: false %0 main1.36 false true true false true
// [CoreOpt] allow_inline: false %0 main1.36 false true true false true
// [CoreOpt] allow_inline: false %0 main1.36 false true true false true
// [CoreOpt] allow_inline: false %0 main1.36 false true true false true
