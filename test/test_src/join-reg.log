// [Main] function thunk_main(k) {
// [Main]   function f_1(x_3, k) {
// [Main]     return k(123)
// [Main]   }
// [Main]   function g_4(x_6, k) {
// [Main]     return k(456)
// [Main]   }
// [Main]   function h_7(x_9, k) {
// [Main]     return k(789)
// [Main]   }
// [Main]   function main_10(k) {
// [Main]     const _11 = null;
// [Main]     return $thunk(() => f_1(_11, function (x_12) {
// [Main]       const _13 = null;
// [Main]       return $thunk(() => g_4(_13, function (y_14) {
// [Main]         const _15 = null;
// [Main]         return $thunk(() => h_7(_15, function (_16) {
// [Main]           const _17 = 0;
// [Main]           const _20 = $force((() => {
// [Main]             if (_16 === _17) {
// [Main]               return x_12 - y_14;
// [Main]             } else {
// [Main]               const _18 = y_14 - x_12;
// [Main]               const _19 = _18 + x_12;
// [Main]               return _19 + y_14;
// [Main]             }
// [Main]           })());
// [Main]           return $thunk(() => $thunk(() => $thunk(() => k(minimbt_print_int($force(_20))))))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_10(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("x", Unit)], body: Int(123)}, LetRec({tyvars: [], name: ("g", Int), args: [("x", Unit)], body: Int(456)}, LetRec({tyvars: [], name: ("h", Int), args: [("x", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("x", Var({val: None})), App(Var("f"), [Unit]), Let(("y", Var({val: None})), App(Var("g"), [Unit]), App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))])))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(123) against Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Int), args: [("x", Unit)], body: Int(456)}, LetRec({tyvars: [], name: ("h", Int), args: [("x", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("x", Var({val: None})), App(Var("f"), [Unit]), Let(("y", Var({val: None})), App(Var("g"), [Unit]), App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))])))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(456) against Int
// [Typer] check: LetRec({tyvars: [], name: ("h", Int), args: [("x", Unit)], body: Int(789)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("x", Var({val: None})), App(Var("f"), [Unit]), Let(("y", Var({val: None})), App(Var("g"), [Unit]), App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))])))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Int(789) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("x", Var({val: None})), App(Var("f"), [Unit]), Let(("y", Var({val: None})), App(Var("g"), [Unit]), App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("x", Var({val: None})), App(Var("f"), [Unit]), Let(("y", Var({val: None})), App(Var("g"), [Unit]), App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))])))
// [Typer] infer: App(Var("f"), [Unit])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Fun([Unit], Int)))
// [Typer] inst result: Fun([Unit], Int)
// [Typer] check: Unit against Unit
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] infer: Let(("y", Var({val: None})), App(Var("g"), [Unit]), App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))]))
// [Typer] infer: App(Var("g"), [Unit])
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Fun([Unit], Int)))
// [Typer] inst result: Fun([Unit], Int)
// [Typer] check: Unit against Unit
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] infer: App(Var("print_int"), [If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: If(Eq(App(Var("h"), [Unit]), Int(0)), Prim(Var("x"), Var("y"), Sub, kind=None), Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None)) against Int
// [Typer] check: Eq(App(Var("h"), [Unit]), Int(0)) against Bool
// [Typer] infer: App(Var("h"), [Unit])
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Fun([Unit], Int)))
// [Typer] inst result: Fun([Unit], Int)
// [Typer] check: Unit against Unit
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("x"), Var("y"), Sub, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Var("y"), Var("x"), Sub, kind=None), Var("x"), Add, kind=None) against Int
// [Typer] check: Prim(Var("y"), Var("x"), Sub, kind=None) against Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("y") against Int
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
