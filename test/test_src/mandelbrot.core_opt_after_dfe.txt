# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.711 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1(0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %0: bool = le(40, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b5(())
  }
  .bb #b4 () {
    let %1: unit = call f2(0, $b2.0, 40)
    let %2: int32 = add($b2.0, 1)
    jump b2(%2)
  }
  .bb #b5 (unit) {
    return $b5.0
  }
}
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn xloop.713 #f2 : fn(int32, int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32, int32) {
    let %0: bool = le($f2, $b2.0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    let %1: unit = ext_call minimbt_print_endline()
    jump b5(())
  }
  .bb #b4 () {
    let %2: double = conv.i2d($b2.0)
    let %3: double = call f0(%2)
    let %4: double = conv.i2d($f2)
    let %5: double = div(%3, %4)
    let %6: double = sub(%5, 1.5)
    let %7: double = conv.i2d($b2.1)
    let %8: double = call f0(%7)
    let %9: double = conv.i2d($f2)
    let %10: double = div(%8, %9)
    let %11: double = sub(%10, 1)
    jump b14()
  }
  .bb #b5 (unit) {
    return $b5.0
  }
  .bb #b6 (unit) {
    let %13: int32 = add($b2.0, 1)
    jump b2(%13, $b2.1)
  }
  .bb #b14 () {
    jump b15(1000, 0, 0, 0, 0, %6, %11)
  }
  .loop #b15 pre #Some(b14) header #b16 {
    .block #b17
    .block #b18
    .block #b19
    .block #b20
    .block #b21
    .block #b22
  }
  .bb #b16 (int32, double, double, double, double, double, double) {
    let %14: bool = eq($b16.0, 0)
    br %14 b17() b18()
  }
  .bb #b17 () {
    let %15: unit = ext_call minimbt_print_int(1)
    jump b22(%15)
  }
  .bb #b18 () {
    let %16: double = sub($b16.3, $b16.4)
    let %17: double = add(%16, $b16.5)
    let %18: double = call f0($b16.1)
    let %19: double = mul(%18, $b16.2)
    let %20: double = add(%19, $b16.6)
    let %21: double = mul(%17, %17)
    let %22: double = mul(%20, %20)
    let %23: double = mul(2, 2)
    let %24: double = add(%21, %22)
    let %25: bool = le(%23, %24)
    br %25 b19() b20()
  }
  .bb #b19 () {
    let %26: unit = ext_call minimbt_print_int(0)
    jump b21(%26)
  }
  .bb #b20 () {
    let %27: int32 = sub($b16.0, 1)
    jump b16(%27, %17, %20, %21, %22, $b16.5, $b16.6)
  }
  .bb #b21 (unit) {
    jump b22($b21.0)
  }
  .bb #b22 (unit) {
    jump b6($b22.0)
  }
}
.fn dbl.712 #f0 : fn(double) -> double
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = add($f0, $f0)
    return %0
  }
}
.thunk ::0 start
