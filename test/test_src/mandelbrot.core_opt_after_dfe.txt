# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn yloop7.135 #f2 : fn(int32, int32, double, double) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, double, double) {
    let %0: bool = le($b0.1, $b0.0)
    br %0 b3(()) b2()
  }
  .bb #b2 () {
    let %1: double = conv.i2d($b0.0)
    jump b12()
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3)
  }
  .bb #b6 (unit) {
    let %3: int32 = add($b0.0, 1)
    jump b0(%3, $b0.1, $b0.2, $b0.3)
  }
  .bb #b7 (int32, int32, int32, double, double, double) {
    let %4: bool = le($b7.2, $b7.0)
    br %4 b8() b9()
  }
  .bb #b8 () {
    let %5: unit = ext_call minimbt_print_endline()
    jump b10(())
  }
  .bb #b9 () {
    let %6: double = conv.i2d($b7.0)
    let %7: double = add(%6, %6)
    let %8: double = div(%7, $b7.3)
    let %9: double = sub(%8, 1.5)
    let %10: double = add($b7.4, $b7.4)
    let %11: double = div(%10, $b7.5)
    let %12: double = sub(%11, 1)
    jump b26()
  }
  .bb #b10 (unit) {
    jump b6($b10.0)
  }
  .loop #b11 pre #Some(b12) header #b7 {
    .block #b8
    .block #b9
    .block #b10
  }
  .bb #b12 () {
    jump b11(0, $b0.0, $b0.1, $b0.2, %1, $b0.3)
  }
  .bb #b13 (unit) {
    let %14: int32 = add($b7.0, 1)
    jump b7(%14, $b7.1, $b7.2, $b7.3, $b7.4, $b7.5)
  }
  .bb #b18 (int32, double, double, double, double, double, double) {
    let %15: bool = eq($b18.0, 0)
    br %15 b19() b20()
  }
  .bb #b19 () {
    let %16: unit = ext_call minimbt_print_int(1)
    jump b24(%16)
  }
  .bb #b20 () {
    let %17: double = sub($b18.3, $b18.4)
    let %18: double = add(%17, $b18.5)
    let %19: double = add($b18.1, $b18.1)
    let %20: double = mul(%19, $b18.2)
    let %21: double = add(%20, $b18.6)
    let %22: double = mul(%18, %18)
    let %23: double = mul(%21, %21)
    let %24: double = mul(2, 2)
    let %25: double = add(%22, %23)
    let %26: bool = le(%24, %25)
    br %26 b21() b22()
  }
  .bb #b21 () {
    let %27: unit = ext_call minimbt_print_int(0)
    jump b23(%27)
  }
  .bb #b22 () {
    let %28: int32 = sub($b18.0, 1)
    jump b18(%28, %18, %21, %22, %23, $b18.5, $b18.6)
  }
  .bb #b23 (unit) {
    jump b24($b23.0)
  }
  .bb #b24 (unit) {
    jump b13($b24.0)
  }
  .loop #b25 pre #Some(b26) header #b18 {
    .block #b24
    .block #b22
    .block #b19
    .block #b23
    .block #b20
    .block #b21
  }
  .bb #b26 () {
    jump b25(1000, 0, 0, 0, 0, %9, %12)
  }
}
.fn main75.134 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: double = conv.i2d(40)
    let %1: double = conv.i2d(40)
    let %2: unit = call f2(0, 40, %0, %1)
    return %2
  }
}
.thunk ::0 start

