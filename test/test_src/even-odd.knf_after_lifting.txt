let t.1: Int = Int(123)
let f.2: Int = Int(456)
let rec odd6l1: Int = (x7.8: Int, f.2: Int, t.1: Int) {
  let _9: Int = Int(0)
  if (_9 <= x7.8) then {
    let _10: Int = Int(0)
    if (x7.8 == _10) then {
      Var(f.2)
    } else {
      let _11: Int = Int(1)
      let _12: Int = Sub(x7.8, _11)
      Apply(even3l0, [_12, f.2, t.1, ])
    }
  } else {
    let _13: Int = Int(1)
    let _14: Int = Add(x7.8, _13)
    Apply(even3l0, [_14, f.2, t.1, ])
  }
}
let rec even3l0: Int = (x4.5: Int, f.2: Int, t.1: Int) {
  let _15: Int = Int(0)
  if (_15 <= x4.5) then {
    let _16: Int = Int(0)
    if (x4.5 == _16) then {
      Var(t.1)
    } else {
      let _17: Int = Int(1)
      let _18: Int = Sub(x4.5, _17)
      Apply(odd6l1, [_18, f.2, t.1, ])
    }
  } else {
    let _19: Int = Int(1)
    let _20: Int = Add(x4.5, _19)
    Apply(odd6l1, [_20, f.2, t.1, ])
  }
}
let rec main21l1: Var({val: Some(Unit)}) = (f.2: Int, t.1: Int) {
  let _22: Int = Int(789)
  let _23: Int = Apply(even3l0, [_22, f.2, t.1, ])
  ExtApply(minimbt_print_int, [_23, ])
}
Apply(main21l1, [f.2, t.1, ])