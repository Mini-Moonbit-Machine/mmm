// [Knf] build_knf: LetRec({name: ("sum", Int), args: [("x", Int)], body: If(LE(Var("x"), Int(0)), Int(0), Prim(App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Var("x"), Add, kind=Some(Int)))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(10000)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("x"), Int(0)), Int(0), Prim(App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Var("x"), Add, kind=Some(Int)))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(10000)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("sum"), [Int(10000)])])
// [Knf] build_knf: App(Var("sum"), [Int(10000)])
// [Knf] build_knf: Var("sum")
// [Knf] build_knf: Int(10000)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function sum1(x2_3, k) {
// [Main]     const _4 = 0;
// [Main]     if (x2_3 <= _4) {
// [Main]       return k(0)
// [Main]     } else {
// [Main]       const _5 = 1;
// [Main]       const _6 = x2_3 - _5;
// [Main]       return $thunk(() => sum1(_6, function (_7) {
// [Main]         return $thunk(() => k(_7 + x2_3))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main8(k) {
// [Main]     const _9 = 10000;
// [Main]     return $thunk(() => sum1(_9, function (_10) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_10))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main8(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
