// [Main] function thunk_main(k) {
// [Main]   function sum_1(x_3, k) {
// [Main]     const _4 = 0;
// [Main]     if (x_3 <= _4) {
// [Main]       return k(0)
// [Main]     } else {
// [Main]       const _5 = 1;
// [Main]       const _6 = x_3 - _5;
// [Main]       return $thunk(() => sum_1(_6, function (_7) {
// [Main]         return $thunk(() => k(_7 + x_3))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_8(k) {
// [Main]     const _9 = 10000;
// [Main]     return $thunk(() => sum_1(_9, function (_10) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_10))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_8(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("sum", Int), args: [("x", Int)], body: If(LE(Var("x"), Int(0)), Int(0), Prim(App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=None)]), Var("x"), Add, kind=None))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(10000)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Int(0)), Int(0), Prim(App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=None)]), Var("x"), Add, kind=None)) against Int
// [Typer] check: LE(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Prim(App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=None)]), Var("x"), Add, kind=None) against Int
// [Typer] check: App(Var("sum"), [Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("sum") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("sum"), [Int(10000)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("sum"), [Int(10000)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("sum"), [Int(10000)]) against Int
// [Typer] infer: Int(10000)
// [Typer] check: Var("sum") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
