# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn g24.63 #f2 : closure(int32) -> int32
.freevars (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)
.entry b5 {
  .bb #b0 (int32) {
    let %0: int32 = add(^1, ^2)
    let %1: int32 = add(%0, ^3)
    let %2: int32 = add(%1, ^4)
    let %3: int32 = add(%2, ^5)
    let %4: int32 = add(%3, ^6)
    let %5: int32 = add(%4, ^7)
    let %6: int32 = add(%5, ^8)
    let %7: int32 = add(%6, ^9)
    let %8: int32 = add(%7, ^10)
    let %9: bool = le($b0.0, 0)
    br %9 b1() b2()
  }
  .bb #b1 () {
    let %10: int32 = neg($b0.0)
    jump b0(%10)
  }
  .bb #b2 () {
    jump b3(%8)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main39.77 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32) heap(10)> <- [0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9, [9] = 10
    let %1: int32 = load int32 field(f0.m0, 0 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %2: int32 = load int32 field(f0.m0, 1 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %3: int32 = load int32 field(f0.m0, 2 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %4: int32 = load int32 field(f0.m0, 3 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %5: int32 = load int32 field(f0.m0, 4 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %6: int32 = load int32 field(f0.m0, 5 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %7: int32 = load int32 field(f0.m0, 6 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %8: int32 = load int32 field(f0.m0, 7 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %9: int32 = load int32 field(f0.m0, 8 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %10: int32 = load int32 field(f0.m0, 9 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let _ = alloc <m1: closure(int32) -> int32 heap(11)> <- [0] = f2, [1] = %1, [2] = %2, [3] = %3, [4] = %4, [5] = %5, [6] = %6, [7] = %7, [8] = %8, [9] = %9, [10] = %10
    let %12: int32 = apply f0.m1(1)
    let %13: unit = ext_call minimbt_print_int(%12)
    return ()
  }
}
.thunk ::0 start

