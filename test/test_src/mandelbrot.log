// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_12"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main75_1 ->   call main75_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v2, Self(fref=f1) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main75_1"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v3-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v2"
// [Asm]   comment = "v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main75_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v3, 40 ->   li a0, 40
// [Asm] subst   call mandelbrot1_0 ->   call mandelbrot1_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v10, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v5, Self(fref=f5) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v9, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%1) -> v8, BlockParam(bref=b0, bpref=$b.0) -> v6, Insn(iref=%0) -> v7
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [zero, v4, v6, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v4, v6, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13, v4, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v13, v4, v6, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v13, v4, v6, a1, s11, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v6, s11, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v4, s11, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yloop7_5"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v4 ← s0", color=green];
// [Asm]   r9 [label="s10", color=blue];
// [Asm]   r26 [label="v0 ← a1", color=green];
// [Asm]   r27 [label="v2 ← a0", color=green];
// [Asm]   r6 [label="v5 ← a0", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v6 ← s1", color=green];
// [Asm]   r1 [label="v15 ← a0", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="s11", color=blue];
// [Asm]   r10 [label="v13 ← a2", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="v17 ← a1", color=green];
// [Asm]   r5 [label="v3 ← s2", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r24 [label="v9 ← a0", color=green];
// [Asm]   r25 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r5 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r11 -- r15;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v11-> 1:v15-> 2:zero-> 3:v4-> 4:v6-> 5:v3-> 6:v5-> 8:v17-> 7:s11-> 9:s10-> 10:v13-> 11:a0-> 12:a1-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:v9-> 25:v10-> 26:v0-> 27:v2"
// [Asm]   comment = "v11<-a0;v4<-s0;v0<-a1;v2<-a0;v5<-a0;v6<-s1;v15<-a0;v13<-a2;v17<-a1;v3<-s2;v9<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yloop7_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   bge v6, v3, .yloop7_5_1 ->   bge s1, s2, .yloop7_5_1
// [Asm] subst   addi v15, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v5, v15, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   la v17, xloop10_7 ->   la a1, xloop10_7
// [Asm] subst   sd v17, 0(v5) ->   sd a1, 0(a0)
// [Asm] subst   sd v3, 8(v5) ->   sd s2, 8(a0)
// [Asm] subst   sd v4, 16(v5) ->   sd s0, 16(a0)
// [Asm] subst   mv s10, v5 ->   mv s10, a0
// [Asm] subst   ld v13, 0(v5) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v6 ->   mv a1, s1
// [Asm] subst   jalr v13 ->   jalr a2
// [Asm] subst   addi v10, v6, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v6, v10 ->   mv s1, a0
// [Asm] subst   j .yloop7_5_0 ->   j .yloop7_5_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   lw v3, 8(v0) ->   lw s2, 8(a1)
// [Asm] subst   ld v4, 16(v0) ->   ld s0, 16(a1)
// [Asm] subst   mv v6, v2 ->   mv s1, a0
// [Asm] pre_assigned_registers: Self(fref=f9) -> v0, BlockParam(bref=b0, bpref=$b.5) -> fv15, Insn(iref=%9) -> fv25, FreeVar(fvref=^1) -> v9, Insn(iref=%8) -> fv24, FnParam(fref=f9, fpref=$f.4) -> fv6, Insn(iref=%10) -> fv26, BlockParam(bref=b0, bpref=$b.4) -> fv14, FnParam(fref=f9, fpref=$f.1) -> fv3, BlockParam(bref=b0, bpref=$b.3) -> fv13, BlockParam(bref=b0, bpref=$b.0) -> v10, BlockParam(bref=b0, bpref=$b.1) -> fv11, BlockParam(bref=b0, bpref=$b.2) -> fv12, FnParam(fref=f9, fpref=$f.6) -> fv8, Insn(iref=%5) -> fv21, FnParam(fref=f9, fpref=$f.3) -> fv5, Insn(iref=%0) -> v17, Insn(iref=%4) -> fv20, Insn(iref=%3) -> fv19, Insn(iref=%13) -> v28, Insn(iref=%7) -> fv23, BlockParam(bref=b5, bpref=$b.0) -> v30, FnParam(fref=f9, fpref=$f.5) -> fv7, BlockParam(bref=b6, bpref=$b.0) -> v32, Insn(iref=%2) -> fv18, Insn(iref=%1) -> v31, Insn(iref=%11) -> v27, BlockParam(bref=b0, bpref=$b.6) -> fv16, FnParam(fref=f9, fpref=$f.2) -> fv4, Insn(iref=%6) -> fv22, FnParam(fref=f9, fpref=$f.0) -> v2, Insn(iref=%12) -> v29
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [v30]
// [Asm] defined: v32 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, a0, fa0, fa1, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, a0, fa0, v0, fa1]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, fa0, v0, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, v0, fv3, fa1, v2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv3 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, v0, fv4, fv3, v2]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv4 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fa5, fa3, zero, fa4, v0, fv4, fv3, v2]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fa5, zero, fa4, v0, fv4, fv6, fv3, v2]
// [Asm] move_origin: [fa3]
// [Asm] defined: fv6 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv5, fa5, zero, v0, fv4, fv6, fv3, fv7, v2]
// [Asm] move_origin: [fa4]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [fv5, zero, fv8, v0, fv4, fv6, fv3, fv7, v2]
// [Asm] move_origin: [fa5]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, fv5, zero, fv8, fv4, fv6, v9, fv3, fv7]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [fv5, v10, zero, fv8, fv4, fv6, v9, fv3, fv7]
// [Asm] move_origin: [v2]
// [Asm] defined: v10 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [fv5, v10, fv11, zero, fv8, fv4, fv6, v9, fv7]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv5, v10, fv11, zero, fv8, fv12, fv6, v9, fv7]
// [Asm] move_origin: [fv4]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [v10, fv11, zero, fv13, fv8, fv12, fv6, v9, fv7]
// [Asm] move_origin: [fv5]
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v10, fv11, zero, fv13, fv8, fv12, fv14, v9, fv7]
// [Asm] move_origin: [fv6]
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v10, fv11, zero, fv13, fv8, fv12, fv14, fv15, v9]
// [Asm] move_origin: [fv7]
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv16 is F
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v33]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v31]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [v31]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v32]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [a0]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v29]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [v29]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [fv22, fv24, fv23, zero, fv19, fv15, fv16, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v10]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm] move_origin: [v28]
// [Asm] defined: v10 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [fv22, fv24, fv23, v10, fv11, zero, fv15, fv16, v9]
// [Asm] move_origin: [fv19]
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv24, fv23, v10, fv11, zero, fv12, fv15, fv16, v9]
// [Asm] move_origin: [fv22]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv24, v10, fv11, zero, fv13, fv12, fv15, fv16, v9]
// [Asm] move_origin: [fv23]
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] move_origin: [fv24]
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] move_origin: [fv15]
// [Asm] defs: []
// [Asm] live_set: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] move_origin: [fv16]
// [Asm] defs: []
// [Asm] live_set: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defs: [fv18]
// [Asm] live_set: [v10, zero, fv11, fv12, fv15, fv16, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v10, zero, fv11, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [s10]
// [Asm] live_set: [v10, zero, fv11, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v10, zero, fv11, v45, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, fv11, v45, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v10, zero, fa0, v45, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, fa0, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v10, zero, fv20, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv20 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, fv20, fv19, fv12, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, v10, zero, fv19, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv22, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v39]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [fv40]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv25, fv19, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv25, fv19, fv15, fv16, v9, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [v27]
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, v27, fv19, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of iloop29_9"];
// [Asm]   r0 [label="v32 ← a0", color=green];
// [Asm]   r20 [label="v31 ← a0", color=green];
// [Asm]   r23 [label="v28 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v39 ← a0", color=green];
// [Asm]   r27 [label="v27 ← a0", color=green];
// [Asm]   r6 [label="v10 ← s1", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="v33 ← a0", color=green];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r22 [label="v30 ← a0", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v9 ← s0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="s10", color=blue];
// [Asm]   r25 [label="v45 ← a0", color=green];
// [Asm]   r2 [label="v0 ← a1", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v29 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r18;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r26;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r27;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r5 -- r15;
// [Asm]   r6 -- r25;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v32-> 1:a0-> 2:v0-> 3:zero-> 4:v2-> 5:v9-> 6:v10-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 25:v45-> 26:v39-> 27:v27-> 23:v28-> 24:s10-> 7:v33-> 20:v31-> 21:v29-> 22:v30"
// [Asm]   comment = "v32<-a0;v31<-a0;v28<-a0;v39<-a0;v27<-a0;v10<-s1;v2<-a0;v33<-a0;v30<-a0;v9<-s0;v45<-a0;v0<-a1;v29<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of iloop29_9"];
// [Asm]   r0 [label="fa5", color=blue];
// [Asm]   r38 [label="fv25 ← fa0", color=green];
// [Asm]   r33 [label="fv23 ← fa1", color=green];
// [Asm]   r9 [label="fv6 ← fa3", color=green];
// [Asm]   r26 [label="ft8", color=blue];
// [Asm]   r6 [label="fv3 ← fa0", color=green];
// [Asm]   r13 [label="fv12 ← fs0", color=green];
// [Asm]   r4 [label="fa0", color=blue];
// [Asm]   r29 [label="fa6", color=blue];
// [Asm]   r35 [label="fv18 ← fa1", color=green];
// [Asm]   r7 [label="fv4 ← fa1", color=green];
// [Asm]   r10 [label="fv7 ← fa4", color=green];
// [Asm]   r8 [label="fv5 ← fa2", color=green];
// [Asm]   r5 [label="fa1", color=blue];
// [Asm]   r36 [label="fv20 ← fa0", color=green];
// [Asm]   r24 [label="ft6", color=blue];
// [Asm]   r15 [label="fv14 ← fa2", color=green];
// [Asm]   r32 [label="fv24 ← fa2", color=green];
// [Asm]   r31 [label="fv22 ← fa3", color=green];
// [Asm]   r39 [label="fv26 ← fa4", color=green];
// [Asm]   r17 [label="fv16 ← fs2", color=green];
// [Asm]   r12 [label="fv11 ← fa0", color=green];
// [Asm]   r37 [label="fv40 ← fa0", color=green];
// [Asm]   r20 [label="ft2", color=blue];
// [Asm]   r23 [label="ft5", color=blue];
// [Asm]   r3 [label="fa4", color=blue];
// [Asm]   r27 [label="ft9", color=blue];
// [Asm]   r1 [label="fa3", color=blue];
// [Asm]   r28 [label="ft10", color=blue];
// [Asm]   r11 [label="fv8 ← fa5", color=green];
// [Asm]   r34 [label="fv19 ← fs3", color=green];
// [Asm]   r22 [label="ft4", color=blue];
// [Asm]   r14 [label="fv13 ← fa1", color=green];
// [Asm]   r30 [label="fa7", color=blue];
// [Asm]   r25 [label="ft7", color=blue];
// [Asm]   r2 [label="fa2", color=blue];
// [Asm]   r16 [label="fv15 ← fs1", color=green];
// [Asm]   r18 [label="ft0", color=blue];
// [Asm]   r19 [label="ft1", color=blue];
// [Asm]   r21 [label="ft3", color=blue];
// [Asm]   r10 -- r14;
// [Asm]   r12 -- r35;
// [Asm]   r12 -- r32;
// [Asm]   r0 -- r13;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r4 -- r34;
// [Asm]   r14 -- r16;
// [Asm]   r3 -- r16;
// [Asm]   r13 -- r32;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r36;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r17 -- r35;
// [Asm]   r10 -- r13;
// [Asm]   r20 -- r34;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r27 -- r34;
// [Asm]   r17 -- r36;
// [Asm]   r0 -- r16;
// [Asm]   r30 -- r34;
// [Asm]   r17 -- r33;
// [Asm]   r3 -- r34;
// [Asm]   r31 -- r39;
// [Asm]   r17 -- r39;
// [Asm]   r17 -- r19;
// [Asm]   r18 -- r34;
// [Asm]   r16 -- r17;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r16 -- r34;
// [Asm]   r16 -- r29;
// [Asm]   r16 -- r36;
// [Asm]   r2 -- r6;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r22 -- r34;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r16 -- r33;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r16 -- r37;
// [Asm]   r9 -- r12;
// [Asm]   r17 -- r22;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r9 -- r10;
// [Asm]   r32 -- r34;
// [Asm]   r11 -- r15;
// [Asm]   r13 -- r22;
// [Asm]   r13 -- r35;
// [Asm]   r8 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r16 -- r39;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r17 -- r31;
// [Asm]   r0 -- r4;
// [Asm]   r31 -- r34;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r17 -- r27;
// [Asm]   r16 -- r38;
// [Asm]   r16 -- r24;
// [Asm]   r13 -- r29;
// [Asm]   r16 -- r23;
// [Asm]   r17 -- r34;
// [Asm]   r14 -- r15;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r5 -- r34;
// [Asm]   r17 -- r20;
// [Asm]   r14 -- r32;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r26 -- r34;
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r16 -- r30;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r17;
// [Asm]   r32 -- r37;
// [Asm]   r4 -- r23;
// [Asm]   r17 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r16 -- r32;
// [Asm]   r12 -- r34;
// [Asm]   r12 -- r15;
// [Asm]   r0 -- r34;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r13 -- r26;
// [Asm]   r17 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r19 -- r34;
// [Asm]   r16 -- r19;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r23 -- r34;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r21 -- r34;
// [Asm]   r31 -- r38;
// [Asm]   r34 -- r39;
// [Asm]   r33 -- r39;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r16 -- r26;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r16 -- r28;
// [Asm]   r13 -- r25;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r17 -- r37;
// [Asm]   r32 -- r38;
// [Asm]   r6 -- r8;
// [Asm]   r34 -- r38;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r13 -- r34;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r12 -- r33;
// [Asm]   r31 -- r37;
// [Asm]   r8 -- r13;
// [Asm]   r32 -- r33;
// [Asm]   r12 -- r31;
// [Asm]   r13 -- r23;
// [Asm]   r34 -- r37;
// [Asm]   r0 -- r8;
// [Asm]   r32 -- r39;
// [Asm]   r24 -- r34;
// [Asm]   r16 -- r35;
// [Asm]   r13 -- r14;
// [Asm]   r25 -- r34;
// [Asm]   r34 -- r36;
// [Asm]   r10 -- r15;
// [Asm]   r33 -- r37;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r13 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r29 -- r34;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r31 -- r32;
// [Asm]   r31 -- r33;
// [Asm]   r12 -- r17;
// [Asm]   r38 -- r39;
// [Asm]   r17 -- r30;
// [Asm]   r17 -- r38;
// [Asm]   r4 -- r26;
// [Asm]   r17 -- r32;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r16;
// [Asm]   r17 -- r28;
// [Asm]   r13 -- r27;
// [Asm]   r33 -- r38;
// [Asm]   r4 -- r19;
// [Asm]   r28 -- r34;
// [Asm]   comment = "0:fa5-> 4:fa0-> 13:fv12-> 16:fv15-> 17:fv16-> 34:fv19-> 1:fa3-> 2:fa2-> 3:fa4-> 5:fa1-> 6:fv3-> 7:fv4-> 8:fv5-> 9:fv6-> 12:fv11-> 10:fv7-> 11:fv8-> 14:fv13-> 15:fv14-> 32:fv24-> 33:fv23-> 31:fv22-> 37:fv40-> 38:fv25-> 39:fv26-> 18:ft0-> 19:ft1-> 20:ft2-> 21:ft3-> 22:ft4-> 23:ft5-> 24:ft6-> 25:ft7-> 26:ft8-> 27:ft9-> 28:ft10-> 29:fa6-> 30:fa7-> 35:fv18-> 36:fv20"
// [Asm]   comment = "fv25<-fa0;fv23<-fa1;fv6<-fa3;fv3<-fa0;fv12<-fs0;fv18<-fa1;fv4<-fa1;fv7<-fa4;fv5<-fa2;fv20<-fa0;fv14<-fa2;fv24<-fa2;fv22<-fa3;fv26<-fa4;fv16<-fs2;fv11<-fa0;fv40<-fa0;fv8<-fa5;fv19<-fs3;fv13<-fa1;fv15<-fs1;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   ld v9, 8(v0) ->   ld s0, 8(a1)
// [Asm] subst   mv v10, v2 ->   mv s1, a0
// [Asm] subst   fmv.d fv12, fv4 ->   fmv.d fs0, fa1
// [Asm] subst   fmv.d fv13, fv5 ->   fmv.d fa1, fa2
// [Asm] subst   fmv.d fv14, fv6 ->   fmv.d fa2, fa3
// [Asm] subst   fmv.d fv15, fv7 ->   fmv.d fs1, fa4
// [Asm] subst   fmv.d fv16, fv8 ->   fmv.d fs2, fa5
// [Asm] subst   li v33, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .iloop29_9_6 ->   j .iloop29_9_6
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   beq v10, zero, .iloop29_9_1 ->   beq s1, zero, .iloop29_9_1
// [Asm] subst   addi v28, v10, -1 ->   addi a0, s1, -1
// [Asm] subst   mv v10, v28 ->   mv s1, a0
// [Asm] subst   fmv.d fv11, fv19 ->   fmv.d fa0, fs3
// [Asm] subst   fmv.d fv12, fv22 ->   fmv.d fs0, fa3
// [Asm] subst   j .iloop29_9_0 ->   j .iloop29_9_0
// [Asm] subst   fsub.d fv18, fv13, fv14 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   fadd.d fv19, fv18, fv15 ->   fadd.d fs3, fa1, fs1
// [Asm] subst   mv s10, v9 ->   mv s10, s0
// [Asm] subst   ld v45, 0(v9) ->   ld a0, 0(s0)
// [Asm] subst   jalr v45 ->   jalr a0
// [Asm] subst   fmadd.d fv22, fv20, fv12, fv16 ->   fmadd.d fa3, fa0, fs0, fs2
// [Asm] subst   fmul.d fv23, fv19, fv19 ->   fmul.d fa1, fs3, fs3
// [Asm] subst   fmul.d fv24, fv22, fv22 ->   fmul.d fa2, fa3, fa3
// [Asm] subst   li v39, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv40, v39 ->   fmv.d.x fa0, a0
// [Asm] subst   fmul.d fv25, fv40, fv40 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   fmadd.d fv26, fv22, fv22, fv23 ->   fmadd.d fa4, fa3, fa3, fa1
// [Asm] subst   fle.d v27, fv25, fv26 ->   fle.d a0, fa0, fa4
// [Asm] subst   beq v27, zero, .iloop29_9_4 ->   beq a0, zero, .iloop29_9_4
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.0) -> fv2, Self(fref=f3) -> v0, Insn(iref=%0) -> fv3
// [Asm] defs: []
// [Asm] live_set: [s10, fa0]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dbl4_3"];
// [Asm]   r0 [label="v0 ← a0", color=green];
// [Asm]   comment = "0:v0"
// [Asm]   comment = "v0<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dbl4_3"];
// [Asm]   r0 [label="fa0", color=blue];
// [Asm]   r2 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fv2 ← fa0", color=green];
// [Asm]   comment = "0:fa0-> 1:fv2-> 2:fv3"
// [Asm]   comment = "fv3<-fa0;fv2<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a0, s10
// [Asm] subst   fadd.d fv3, fv2, fv2 ->   fadd.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Mem(fref=f7, mref=m0) -> v6, FnParam(fref=f7, fpref=$f.1) -> v3, Self(fref=f7) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v24, Insn(iref=%9) -> fv17, FreeVar(fvref=^1) -> v4, FreeVar(fvref=^2) -> v5, Insn(iref=%8) -> fv16, Insn(iref=%10) -> fv18, BlockParam(bref=b0, bpref=$b.0) -> v7, Insn(iref=%14) -> v22, BlockParam(bref=b0, bpref=$b.1) -> v8, Insn(iref=%5) -> fv13, Insn(iref=%0) -> v9, Insn(iref=%4) -> fv12, Insn(iref=%3) -> fv11, Insn(iref=%13) -> v21, Insn(iref=%7) -> fv15, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%2) -> fv10, Insn(iref=%1) -> v23, Insn(iref=%11) -> fv19, Insn(iref=%6) -> fv14, Insn(iref=%12) -> v20
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v24]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a1, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v5, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v5, s11, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [fv10]
// [Asm] live_set: [fv10, v5, v7, s11, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [s10]
// [Asm] live_set: [fv10, v5, v7, s11, zero, v8, v4]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v47]
// [Asm] live_set: [fv10, v5, v7, s11, zero, v8, v4, v47]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [fv10, v5, v7, s11, zero, v8, v4, v47]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, v7, s11, zero, v8, fa0, v4, v47]
// [Asm] move_origin: [fv10]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v7, s11, zero, v8, fa0, v4]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [v5, v7, s11, zero, fv11, v8, v4]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv11 is F
// [Asm] defs: []
// [Asm] live_set: [v5, v7, s11, zero, fv11, v8, v4]
// [Asm] move_origin: []
// [Asm] defs: [fv12]
// [Asm] live_set: [v5, v7, fv12, s11, zero, fv11, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [v5, v7, s11, zero, v8, fv13, v4]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v5, v42, v7, s11, zero, v8, fv13, v4]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v5, v7, s11, zero, fv43, v8, fv13, v4]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v5, v7, fv14, s11, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v5, v7, fv14, s11, fv15, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v7, fv14, s11, fv15, zero, v8, v4]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v7, fv14, s11, fv15, v39, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, fv14, s11, fv15, v39, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, v7, fv14, s11, v39, zero, v8, fa0, v4]
// [Asm] move_origin: [fv15]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, v7, fv14, s11, zero, v8, fa0, v4]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v5, v7, fv14, s11, fv16, zero, v8, v4]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv16 is F
// [Asm] defs: []
// [Asm] live_set: [v5, v7, fv14, s11, fv16, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defs: [fv17]
// [Asm] live_set: [v5, v7, fv14, s11, fv16, zero, v8, v4, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [v5, v7, fv14, s11, zero, v8, v4, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v5, v7, fv14, s11, zero, v8, v4, fv18, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [fv35]
// [Asm] live_set: [v5, v7, fv14, s11, fv35, zero, v8, v4, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v5, v7, fv19, fv14, s11, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v5, v7, fv19, fv14, v31, zero, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, v7, fv19, fv14, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, v7, fv19, s11, fv14, v33, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm] move_origin: [v6]
// [Asm] defined: s10 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v5, v7, fv19, s11, fv14, zero, v27, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, fv19, s11, fv14, zero, v27, v8, v4]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v5, v7, fv19, s11, fv14, v28, zero, v27, v8, v4]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, v7, fv19, s11, fv14, zero, v27, v8, v4]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: [fv29]
// [Asm] live_set: [v5, a0, v7, fv19, s11, fv14, zero, v27, v8, fv29, v4]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, a0, v7, fv19, s11, fv14, zero, v27, v8, fa0, fv29, v4]
// [Asm] move_origin: [fv29]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [v5, a0, v7, fv19, s11, fv14, fa1, zero, v27, v8, fa0, fv29, v4]
// [Asm] move_origin: [fv29]
// [Asm] defined: fa1 is F
// [Asm] defs: [fa2]
// [Asm] live_set: [v5, a0, v7, fv19, s11, fv14, fa1, fa2, zero, v27, v8, fa0, fv29, v4]
// [Asm] move_origin: [fv29]
// [Asm] defined: fa2 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [v5, a0, v7, fv19, s11, fv14, fa1, fa2, fa3, zero, v27, v8, fa0, v4]
// [Asm] move_origin: [fv29]
// [Asm] defined: fa3 is F
// [Asm] defs: [fa4]
// [Asm] live_set: [v5, fa4, a0, v7, fv19, s11, fa1, fa2, fa3, zero, v27, v8, fa0, v4]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa4 is F
// [Asm] defs: [fa5]
// [Asm] live_set: [v5, fa4, a0, v7, s11, fa1, fa5, fa2, fa3, zero, v27, v8, fa0, v4]
// [Asm] move_origin: [fv19]
// [Asm] defined: fa5 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v8, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v8, v4, s11]
// [Asm] move_origin: [v22]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of xloop10_7"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r33 [label="v22 ← a0", color=green];
// [Asm]   r9 [label="v7 ← s2", color=green];
// [Asm]   r26 [label="v34 ← a0", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v33 ← a0", color=green];
// [Asm]   r35 [label="v24 ← a0", color=green];
// [Asm]   r7 [label="v4 ← s0", color=green];
// [Asm]   r10 [label="v8 ← s3", color=green];
// [Asm]   r8 [label="v5 ← s1", color=green];
// [Asm]   r5 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="v42 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r32 [label="v21 ← a0", color=green];
// [Asm]   r31 [label="v28 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="v47 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v31 ← a0", color=green];
// [Asm]   r1 [label="v0 ← a2", color=green];
// [Asm]   r28 [label="v6 ← a1", color=green];
// [Asm]   r11 [label="s10", color=blue];
// [Asm]   r34 [label="v23 ← a0", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r30 [label="v27 ← a1", color=green];
// [Asm]   r25 [label="v39 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r4 -- r19;
// [Asm]   r9 -- r21;
// [Asm]   r10 -- r14;
// [Asm]   r8 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r9 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r9 -- r27;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r10 -- r13;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r9 -- r31;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r0 -- r16;
// [Asm]   r7 -- r32;
// [Asm]   r3 -- r5;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r10 -- r18;
// [Asm]   r9 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r10 -- r33;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r10 -- r31;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r10 -- r22;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r30;
// [Asm]   r0 -- r18;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r21;
// [Asm]   r4 -- r20;
// [Asm]   r10 -- r29;
// [Asm]   r9 -- r30;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r10 -- r27;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r0 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r33;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r8 -- r26;
// [Asm]   r4 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r30;
// [Asm]   r1 -- r3;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   comment = "0:a0-> 1:v0-> 2:a1-> 3:s11-> 4:zero-> 7:v4-> 5:v2-> 8:v5-> 6:v3-> 9:v7-> 10:v8-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 30:v27-> 31:v28-> 11:s10-> 12:v47-> 24:v42-> 25:v39-> 26:v34-> 29:v33-> 28:v6-> 32:v21-> 27:v31-> 33:v22-> 34:v23-> 35:v24"
// [Asm]   comment = "v22<-a0;v7<-s2;v34<-a0;v3<-a1;v33<-a0;v24<-a0;v4<-s0;v8<-s3;v5<-s1;v2<-a0;v42<-a0;v21<-a0;v28<-a0;v47<-a0;v31<-a0;v0<-a2;v6<-a1;v23<-a0;v27<-a1;v39<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of xloop10_7"];
// [Asm]   r0 [label="fv10 ← fa0", color=green];
// [Asm]   r20 [label="fv11 ← fa0", color=green];
// [Asm]   r23 [label="fv43 ← fa1", color=green];
// [Asm]   r3 [label="ft1", color=blue];
// [Asm]   r9 [label="ft7", color=blue];
// [Asm]   r26 [label="fv16 ← fa0", color=green];
// [Asm]   r27 [label="fv17 ← fa1", color=green];
// [Asm]   r6 [label="ft4", color=blue];
// [Asm]   r13 [label="fa1", color=blue];
// [Asm]   r4 [label="ft2", color=blue];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   r29 [label="fv35 ← fa1", color=green];
// [Asm]   r28 [label="fv18 ← fa0", color=green];
// [Asm]   r11 [label="ft9", color=blue];
// [Asm]   r7 [label="ft5", color=blue];
// [Asm]   r10 [label="ft8", color=blue];
// [Asm]   r22 [label="fv13 ← fa0", color=green];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r8 [label="ft6", color=blue];
// [Asm]   r30 [label="fv19 ← fa5", color=green];
// [Asm]   r5 [label="ft3", color=blue];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r24 [label="fv14 ← fs0", color=green];
// [Asm]   r25 [label="fv15 ← fa0", color=green];
// [Asm]   r2 [label="ft0", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r31 [label="fv29 ← fa0", color=green];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r21 [label="fv12 ← fa1", color=green];
// [Asm]   r12 [label="ft10", color=blue];
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r30;
// [Asm]   r13 -- r15;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r24;
// [Asm]   r14 -- r17;
// [Asm]   r1 -- r30;
// [Asm]   r14 -- r16;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r24;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r13 -- r16;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r17;
// [Asm]   r19 -- r24;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r14 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r30;
// [Asm]   r16 -- r17;
// [Asm]   r14 -- r30;
// [Asm]   r8 -- r24;
// [Asm]   r12 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r24 -- r31;
// [Asm]   r13 -- r30;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r24;
// [Asm]   r9 -- r24;
// [Asm]   r13 -- r14;
// [Asm]   r22 -- r23;
// [Asm]   r24 -- r27;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r29;
// [Asm]   r15 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r15 -- r16;
// [Asm]   r20 -- r21;
// [Asm]   r15 -- r30;
// [Asm]   r10 -- r24;
// [Asm]   r14 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r18 -- r24;
// [Asm]   comment = "0:fv10-> 1:fa0-> 2:ft0-> 24:fv14-> 3:ft1-> 4:ft2-> 5:ft3-> 6:ft4-> 7:ft5-> 8:ft6-> 9:ft7-> 10:ft8-> 11:ft9-> 12:ft10-> 13:fa1-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 30:fv19-> 18:fa6-> 19:fa7-> 31:fv29-> 25:fv15-> 26:fv16-> 27:fv17-> 28:fv18-> 29:fv35-> 20:fv11-> 21:fv12-> 22:fv13-> 23:fv43"
// [Asm]   comment = "fv10<-fa0;fv11<-fa0;fv43<-fa1;fv16<-fa0;fv17<-fa1;fv35<-fa1;fv18<-fa0;fv13<-fa0;fv19<-fa5;fv14<-fs0;fv15<-fa0;fv29<-fa0;fv12<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   lw v4, 8(v0) ->   lw s0, 8(a2)
// [Asm] subst   ld v5, 16(v0) ->   ld s1, 16(a2)
// [Asm] subst   mv v7, v2 ->   mv s2, a0
// [Asm] subst   mv v8, v3 ->   mv s3, a1
// [Asm] subst   bge v7, v4, .xloop10_7_1 ->   bge s2, s0, .xloop10_7_1
// [Asm] subst   fcvt.d.w fv10, v7 ->   fcvt.d.w fa0, s2
// [Asm] subst   mv s10, v5 ->   mv s10, s1
// [Asm] subst   ld v47, 0(v5) ->   ld a0, 0(s1)
// [Asm] subst   jalr v47 ->   jalr a0
// [Asm] subst   fcvt.d.w fv12, v4 ->   fcvt.d.w fa1, s0
// [Asm] subst   fdiv.d fv13, fv11, fv12 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v42, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv43, v42 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv14, fv13, fv43 ->   fsub.d fs0, fa0, fa1
// [Asm] subst   fcvt.d.w fv15, v8 ->   fcvt.d.w fa0, s3
// [Asm] subst   mv s10, v5 ->   mv s10, s1
// [Asm] subst   ld v39, 0(v5) ->   ld a0, 0(s1)
// [Asm] subst   jalr v39 ->   jalr a0
// [Asm] subst   fcvt.d.w fv17, v4 ->   fcvt.d.w fa1, s0
// [Asm] subst   fdiv.d fv18, fv16, fv17 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v34, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv35, v34 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv19, fv18, fv35 ->   fsub.d fa5, fa0, fa1
// [Asm] subst   addi v31, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi v6, v31, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a1
// [Asm] subst   la v33, iloop29_9 ->   la a0, iloop29_9
// [Asm] subst   sd v33, 0(v6) ->   sd a0, 0(a1)
// [Asm] subst   sd v5, 8(v6) ->   sd s1, 8(a1)
// [Asm] subst   mv s10, v6 ->   mv s10, a1
// [Asm] subst   ld v27, 0(v6) ->   ld a1, 0(a1)
// [Asm] subst   li v28, 1000 ->   li a0, 1000
// [Asm] subst   fmv.d.x fv29, zero ->   fmv.d.x fa0, zero
// [Asm] subst   fmv.d fa1, fv29 ->   fmv.d fa1, fa0
// [Asm] subst   fmv.d fa2, fv29 ->   fmv.d fa2, fa0
// [Asm] subst   fmv.d fa3, fv29 ->   fmv.d fa3, fa0
// [Asm] subst   fmv.d fa4, fv14 ->   fmv.d fa4, fs0
// [Asm] subst   jalr v27 ->   jalr a1
// [Asm] subst   addi v22, v7, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v7, v22 ->   mv s2, a0
// [Asm] subst   j .xloop10_7_0 ->   j .xloop10_7_0
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Mem(fref=f0, mref=m1) -> v4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Mem(fref=f0, mref=m0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, s11, v15, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v4, v12, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mandelbrot1_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v13 ← a1", color=green];
// [Asm]   r9 [label="s10", color=blue];
// [Asm]   r6 [label="v10 ← a2", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v8 ← a1", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="v12 ← a3", color=green];
// [Asm]   r5 [label="v15 ← a2", color=green];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r17 [label="a1", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r13;
// [Asm]   r11 -- r17;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r2 -- r8;
// [Asm]   r10 -- r11;
// [Asm]   r11 -- r16;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r23;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r22;
// [Asm]   r11 -- r15;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r11 -- r19;
// [Asm]   r11 -- r21;
// [Asm]   r0 -- r6;
// [Asm]   comment = "0:v2-> 1:s11-> 2:zero-> 4:v3-> 5:v15-> 6:v10-> 7:v4-> 8:v12-> 3:v13-> 9:s10-> 10:v8-> 11:a0-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a1-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:v7"
// [Asm]   comment = "v2<-a0;v13<-a1;v10<-a2;v3<-a1;v4<-a2;v8<-a1;v12<-a3;v15<-a2;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mandelbrot1_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v13, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v3, v13, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v15, dbl4_3 ->   la a2, dbl4_3
// [Asm] subst   sd v15, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   addi v10, s11, -24 ->   addi a2, s11, -24
// [Asm] subst   andi v4, v10, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v12, yloop7_5 ->   la a3, yloop7_5
// [Asm] subst   sd v12, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd a0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd a1, 16(a2)
// [Asm] subst   mv s10, v4 ->   mv s10, a2
// [Asm] subst   ld v8, 0(v4) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v8 ->   jalr a1
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main75_1:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main75_1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 40  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call mandelbrot1_0  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_12:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main75_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] iloop29_9:
// [Asm] # block info: defs: [v10, fv8, v0, fv12, fv4, fv14, fv6, fv15, fv16, v9, fv5, fv11, fv13, fv3, fv7, v2], uses: [a0, fa4, fv8, v0, fv4, fv6, s10, fa1, fv5, fa5, fa2, fa3, fa0, fv3, fv7, v2], upward_exposed: [fa5, fa2, fa3, a0, fa4, fa0, s10, fa1], params_defs: []
// [Asm] # live_in: [fa5, fa2, fa3, a0, fa4, zero, fa0, s10, fa1], live_out: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] # block parameters: []
// [Asm] .iloop29_9_7:
// [Asm]   # save_ctx1  # live: [fa5, fa3, fa2, fa4, zero, a0, fa0, fa1, s10]
// [Asm]   mv v0, s10  # live: [fa5, fa3, fa2, fa4, zero, a0, fa0, v0, fa1]
// [Asm]   mv v2, a0  # live: [fa5, fa3, fa2, fa4, zero, fa0, v0, fa1, v2]
// [Asm]   fmv.d fv3, fa0  # live: [fa5, fa3, fa2, fa4, zero, v0, fv3, fa1, v2]
// [Asm]   fmv.d fv4, fa1  # live: [fa5, fa3, fa2, fa4, zero, v0, fv4, fv3, v2]
// [Asm]   fmv.d fv5, fa2  # live: [fv5, fa5, fa3, zero, fa4, v0, fv4, fv3, v2]
// [Asm]   fmv.d fv6, fa3  # live: [fv5, fa5, zero, fa4, v0, fv4, fv6, fv3, v2]
// [Asm]   fmv.d fv7, fa4  # live: [fv5, fa5, zero, v0, fv4, fv6, fv3, fv7, v2]
// [Asm]   fmv.d fv8, fa5  # live: [fv5, zero, fv8, v0, fv4, fv6, fv3, fv7, v2]
// [Asm]   ld v9, 8(v0)  # live: [v2, fv5, zero, fv8, fv4, fv6, v9, fv3, fv7]
// [Asm] # control
// [Asm]   mv v10, v2  # live: [fv5, v10, zero, fv8, fv4, fv6, v9, fv3, fv7]
// [Asm]   fmv.d fv11, fv3  # live: [fv5, v10, fv11, zero, fv8, fv4, fv6, v9, fv7]
// [Asm]   fmv.d fv12, fv4  # live: [fv5, v10, fv11, zero, fv8, fv12, fv6, v9, fv7]
// [Asm]   fmv.d fv13, fv5  # live: [v10, fv11, zero, fv13, fv8, fv12, fv6, v9, fv7]
// [Asm]   fmv.d fv14, fv6  # live: [v10, fv11, zero, fv13, fv8, fv12, fv14, v9, fv7]
// [Asm]   fmv.d fv15, fv7  # live: [v10, fv11, zero, fv13, fv8, fv12, fv14, fv15, v9]
// [Asm]   fmv.d fv16, fv8  # live: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v10, fv11, fv13, fv12, fv14, fv15, fv16]
// [Asm] # live_in: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9], live_out: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] # block parameters: [v10, fv11, fv12, fv13, fv14, fv15, fv16]
// [Asm] .iloop29_9_0:
// [Asm] # control
// [Asm]   beq v10, zero, .iloop29_9_1  # live: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, fv23, fv24, fv20, fv19, ft0, ft1, a1, fa1, fv40, fv22, fa2, ft6, fv25, fa6, a4, v27, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, fv26, v39, ft8, a7, fa7, t3, t0, fa5, fa3, ft3, fa0, v45, t4, t2, fv18], uses: [fv23, fv20, fv19, fv12, fv14, fv15, fv16, v9, fv26, fv40, v39, fv22, fv11, fv25, zero, v27, v45, fv13, fa0, fv18], upward_exposed: [fv11, zero, fv13, fv12, fv14, fv15, fv16, v9], params_defs: []
// [Asm] # live_in: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9], live_out: [fv22, fv23, fv24, v10, zero, fv19, fv15, fv16, v9]
// [Asm] # block parameters: []
// [Asm] .iloop29_9_2:
// [Asm]   fsub.d fv18, fv13, fv14  # live: [v10, zero, fv11, fv12, fv15, fv16, fv18, v9]
// [Asm]   fadd.d fv19, fv18, fv15  # live: [v10, zero, fv11, fv19, fv12, fv15, fv16, v9]
// [Asm]   mv s10, v9  # live: [v10, zero, fv11, fv19, fv12, fv15, fv16, v9]
// [Asm]   ld v45, 0(v9)  # live: [v10, zero, fv11, v45, fv19, fv12, fv15, fv16, v9]
// [Asm]   # save_ctx2  # live: [v10, zero, fv11, v45, fv19, fv12, fv15, fv16, v9]
// [Asm]   fmv.d fa0, fv11  # live: [v10, zero, fa0, v45, fv19, fv12, fv15, fv16, v9]
// [Asm]   jalr v45  # live: [v10, zero, fa0, fv19, fv12, fv15, fv16, v9]
// [Asm]   fmv.d fv20, fa0  # live: [v10, zero, fv20, fv19, fv12, fv15, fv16, v9]
// [Asm]   # restore_ctx2  # live: [v10, zero, fv20, fv19, fv12, fv15, fv16, v9]
// [Asm]   fmadd.d fv22, fv20, fv12, fv16  # live: [fv22, v10, zero, fv19, fv15, fv16, v9]
// [Asm]   fmul.d fv23, fv19, fv19  # live: [fv22, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm]   fmul.d fv24, fv22, fv22  # live: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm]   li v39, 4611686018427387904  # live: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9, v39]
// [Asm]   fmv.d.x fv40, v39  # live: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9, fv40]
// [Asm]   fmul.d fv25, fv40, fv40  # live: [fv22, fv24, fv23, v10, zero, fv25, fv19, fv15, fv16, v9]
// [Asm]   fmadd.d fv26, fv22, fv22, fv23  # live: [fv22, fv24, fv23, v10, zero, fv25, fv19, fv15, fv16, v9, fv26]
// [Asm]   fle.d v27, fv25, fv26  # live: [fv22, fv24, fv23, v10, zero, v27, fv19, fv15, fv16, v9]
// [Asm] # control
// [Asm]   beq v27, zero, .iloop29_9_4  # live: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [zero, a0, v29], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v30]
// [Asm] # block parameters: []
// [Asm] .iloop29_9_3:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v29, a0  # live: [v29]
// [Asm]   # restore_ctx2  # live: [v29]
// [Asm] # control
// [Asm]   mv v30, v29  # live: [v30]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v30], live_out: [v32]
// [Asm] # block parameters: [v30]
// [Asm] .iloop29_9_5:
// [Asm] # control
// [Asm]   mv v32, v30  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v32, a0], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v32], live_out: []
// [Asm] # block parameters: [v32]
// [Asm] .iloop29_9_6:
// [Asm] # control
// [Asm]   mv a0, v32  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, v33, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v31, v33, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v32]
// [Asm] # block parameters: []
// [Asm] .iloop29_9_1:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v33, 1  # live: [v33]
// [Asm]   mv a0, v33  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v31, a0  # live: [v31]
// [Asm]   # restore_ctx2  # live: [v31]
// [Asm] # control
// [Asm]   mv v32, v31  # live: [v32]
// [Asm]   j .iloop29_9_6  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [fv12, v10, fv14, v28, fv11, fv13], uses: [fv22, fv23, fv24, v10, fv19, v28, fv15, fv16], upward_exposed: [fv22, fv23, fv24, v10, fv19, fv15, fv16], params_defs: []
// [Asm] # live_in: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9], live_out: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] # block parameters: []
// [Asm] .iloop29_9_4:
// [Asm]   addi v28, v10, -1  # live: [fv22, fv24, fv23, zero, fv19, fv15, fv16, v28, v9]
// [Asm] # control
// [Asm]   mv v10, v28  # live: [fv22, fv24, fv23, v10, zero, fv19, fv15, fv16, v9]
// [Asm]   fmv.d fv11, fv19  # live: [fv22, fv24, fv23, v10, fv11, zero, fv15, fv16, v9]
// [Asm]   fmv.d fv12, fv22  # live: [fv24, fv23, v10, fv11, zero, fv12, fv15, fv16, v9]
// [Asm]   fmv.d fv13, fv23  # live: [fv24, v10, fv11, zero, fv13, fv12, fv15, fv16, v9]
// [Asm]   fmv.d fv14, fv24  # live: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm]   fmv.d fv15, fv15  # live: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm]   fmv.d fv16, fv16  # live: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm]   j .iloop29_9_0  # live: [v10, fv11, zero, fv13, fv12, fv14, fv15, fv16, v9]
// [Asm] 
// [Asm] # leaf false
// [Asm] mandelbrot1_0:
// [Asm] # block info: defs: [v2, t1, v13, v7, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v2, v10, v13, a0, zero, v8, v7, v4, s11, v15, v12, v3], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .mandelbrot1_0_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm]   addi v13, s11, -8  # live: [zero, v13, v2]
// [Asm]   andi v3, v13, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v3  # live: [v2, s11, zero, v3]
// [Asm]   la v15, dbl4_3  # live: [v2, s11, v15, zero, v3]
// [Asm]   sd v15, 0(v3)  # live: [v2, s11, zero, v3]
// [Asm]   addi v10, s11, -24  # live: [v2, v10, zero, v3]
// [Asm]   andi v4, v10, -8  # live: [v2, v4, zero, v3]
// [Asm]   mv s11, v4  # live: [v2, v4, zero, v3]
// [Asm]   la v12, yloop7_5  # live: [v2, v4, v12, zero, v3]
// [Asm]   sd v12, 0(v4)  # live: [v2, v4, zero, v3]
// [Asm]   sd v2, 8(v4)  # live: [v4, zero, v3]
// [Asm]   sd v3, 16(v4)  # live: [v4, zero]
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v8, 0(v4)  # live: [zero, v8]
// [Asm]   # save_ctx2  # live: [zero, v8]
// [Asm]   mv a0, zero  # live: [a0, v8]
// [Asm]   jalr v8  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dbl4_3:
// [Asm] # block info: defs: [v0, fv2, fv3, fa0], uses: [fv2, s10, fv3, fa0], upward_exposed: [s10, fa0], params_defs: []
// [Asm] # live_in: [s10, fa0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dbl4_3_0:
// [Asm]   # save_ctx1  # live: [s10, fa0]
// [Asm]   mv v0, s10  # live: [fa0]
// [Asm]   fmv.d fv2, fa0  # live: [fv2]
// [Asm]   fadd.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_12  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yloop7_5:
// [Asm] # block info: defs: [v3, v0, v4, v6, v2], uses: [v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0, zero], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .yloop7_5_4:
// [Asm]   # save_ctx1  # live: [s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, s11, zero, v2]
// [Asm]   lw v3, 8(v0)  # live: [v2, v0, s11, zero, v3]
// [Asm]   ld v4, 16(v0)  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v3], upward_exposed: [v6, v3], params_defs: [v6]
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: [v6]
// [Asm] .yloop7_5_0:
// [Asm] # control
// [Asm]   bge v6, v3, .yloop7_5_1  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, s10, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v10, zero, a0, v13, v4, v17, v6, a1, v15, s11, v3], upward_exposed: [v4, v6, s11, zero, v3], params_defs: []
// [Asm] # live_in: [v4, v6, s11, zero, v3], live_out: [v4, v6, s11, zero, v3]
// [Asm] # block parameters: []
// [Asm] .yloop7_5_2:
// [Asm]   addi v15, s11, -24  # live: [zero, v4, v6, v15, v3]
// [Asm]   andi v5, v15, -8  # live: [v5, zero, v4, v6, v3]
// [Asm]   mv s11, v5  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   la v17, xloop10_7  # live: [v5, zero, v4, v6, v17, s11, v3]
// [Asm]   sd v17, 0(v5)  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   sd v3, 8(v5)  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   sd v4, 16(v5)  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   mv s10, v5  # live: [v5, zero, v4, v6, s11, v3]
// [Asm]   ld v13, 0(v5)  # live: [zero, v13, v4, v6, s11, v3]
// [Asm]   # save_ctx2  # live: [zero, v13, v4, v6, s11, v3]
// [Asm]   mv a0, zero  # live: [zero, a0, v13, v4, v6, s11, v3]
// [Asm]   mv a1, v6  # live: [zero, a0, v13, v4, v6, a1, s11, v3]
// [Asm]   jalr v13  # live: [v4, v6, s11, zero, a0, v3]
// [Asm]   mv v9, a0  # live: [v4, v6, s11, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, v6, s11, zero, v3]
// [Asm]   addi v10, v6, 1  # live: [v4, s11, v10, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v10  # live: [v4, v6, s11, zero, v3]
// [Asm]   j .yloop7_5_0  # live: [v4, v6, s11, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .yloop7_5_1:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .yloop7_5_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] xloop10_7:
// [Asm] # block info: defs: [v2, v5, v7, v8, v0, v4, v3], uses: [v3, v0, a1, s10, a0, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s11, s10, a0, zero], live_out: [v5, zero, v8, v7, v4, s11]
// [Asm] # block parameters: []
// [Asm] .xloop10_7_4:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, v0, s11, zero, v3]
// [Asm]   lw v4, 8(v0)  # live: [v2, v0, v4, s11, zero, v3]
// [Asm]   ld v5, 16(v0)  # live: [v2, v4, v5, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v5, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v5, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v7], upward_exposed: [v4, v7], params_defs: [v8, v7]
// [Asm] # live_in: [v5, zero, v7, v8, v4, s11], live_out: [v5, zero, v8, v7, v4, s11]
// [Asm] # block parameters: [v7, v8]
// [Asm] .xloop10_7_0:
// [Asm] # control
// [Asm]   bge v7, v4, .xloop10_7_1  # live: [v7, v4, v5, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v22, fv12, a1, s11, fv35, fv15, v28, v33, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, v6, ft4, ft9, fa4, ft2, a3, v31, a7, fa7, fa3, fv11, ft3, fv43, fv29, t2, fv18, fv17, fv10, t1, v42, v7, fv19, ft0, ft1, fv14, fv16, v47, v34, ft7, v21, a5, a0, a2, s10, v39, ft8, t3, t0, fa5, fv13, fa0, t4], uses: [fv10, v42, v22, v7, fv19, fv12, s11, fv14, fv16, fv35, v28, fv15, v33, fa1, fa2, zero, v27, v8, v47, v4, v6, v34, v5, fa4, a0, v31, v39, fa5, fa3, fv11, fv43, fa0, fv13, fv29, fv18, fv17], upward_exposed: [v5, zero, v8, v7, v4, s11], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, s11], live_out: [v5, zero, v8, v7, v4, s11]
// [Asm] # block parameters: []
// [Asm] .xloop10_7_2:
// [Asm]   fcvt.d.w fv10, v7  # live: [fv10, v5, v7, s11, zero, v8, v4]
// [Asm]   mv s10, v5  # live: [fv10, v5, v7, s11, zero, v8, v4]
// [Asm]   ld v47, 0(v5)  # live: [fv10, v5, v7, s11, zero, v8, v4, v47]
// [Asm]   # save_ctx2  # live: [fv10, v5, v7, s11, zero, v8, v4, v47]
// [Asm]   fmv.d fa0, fv10  # live: [v5, v7, s11, zero, v8, fa0, v4, v47]
// [Asm]   jalr v47  # live: [v5, v7, s11, zero, v8, fa0, v4]
// [Asm]   fmv.d fv11, fa0  # live: [v5, v7, s11, zero, fv11, v8, v4]
// [Asm]   # restore_ctx2  # live: [v5, v7, s11, zero, fv11, v8, v4]
// [Asm]   fcvt.d.w fv12, v4  # live: [v5, v7, fv12, s11, zero, fv11, v8, v4]
// [Asm]   fdiv.d fv13, fv11, fv12  # live: [v5, v7, s11, zero, v8, fv13, v4]
// [Asm]   li v42, 4609434218613702656  # live: [v5, v42, v7, s11, zero, v8, fv13, v4]
// [Asm]   fmv.d.x fv43, v42  # live: [v5, v7, s11, zero, fv43, v8, fv13, v4]
// [Asm]   fsub.d fv14, fv13, fv43  # live: [v5, v7, fv14, s11, zero, v8, v4]
// [Asm]   fcvt.d.w fv15, v8  # live: [v5, v7, fv14, s11, fv15, zero, v8, v4]
// [Asm]   mv s10, v5  # live: [v5, v7, fv14, s11, fv15, zero, v8, v4]
// [Asm]   ld v39, 0(v5)  # live: [v5, v7, fv14, s11, fv15, v39, zero, v8, v4]
// [Asm]   # save_ctx2  # live: [v5, v7, fv14, s11, fv15, v39, zero, v8, v4]
// [Asm]   fmv.d fa0, fv15  # live: [v5, v7, fv14, s11, v39, zero, v8, fa0, v4]
// [Asm]   jalr v39  # live: [v5, v7, fv14, s11, zero, v8, fa0, v4]
// [Asm]   fmv.d fv16, fa0  # live: [v5, v7, fv14, s11, fv16, zero, v8, v4]
// [Asm]   # restore_ctx2  # live: [v5, v7, fv14, s11, fv16, zero, v8, v4]
// [Asm]   fcvt.d.w fv17, v4  # live: [v5, v7, fv14, s11, fv16, zero, v8, v4, fv17]
// [Asm]   fdiv.d fv18, fv16, fv17  # live: [v5, v7, fv14, s11, zero, v8, v4, fv18]
// [Asm]   li v34, 4607182418800017408  # live: [v5, v7, fv14, s11, zero, v8, v4, fv18, v34]
// [Asm]   fmv.d.x fv35, v34  # live: [v5, v7, fv14, s11, fv35, zero, v8, v4, fv18]
// [Asm]   fsub.d fv19, fv18, fv35  # live: [v5, v7, fv19, fv14, s11, zero, v8, v4]
// [Asm]   addi v31, s11, -16  # live: [v5, v7, fv19, fv14, v31, zero, v8, v4]
// [Asm]   andi v6, v31, -8  # live: [v5, v7, fv19, fv14, zero, v8, v4, v6]
// [Asm]   mv s11, v6  # live: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm]   la v33, iloop29_9  # live: [v5, v7, fv19, s11, fv14, v33, zero, v8, v4, v6]
// [Asm]   sd v33, 0(v6)  # live: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm]   sd v5, 8(v6)  # live: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm]   mv s10, v6  # live: [v5, v7, fv19, s11, fv14, zero, v8, v4, v6]
// [Asm]   ld v27, 0(v6)  # live: [v5, v7, fv19, s11, fv14, zero, v27, v8, v4]
// [Asm]   # save_ctx2  # live: [v5, v7, fv19, s11, fv14, zero, v27, v8, v4]
// [Asm]   li v28, 1000  # live: [v5, v7, fv19, s11, fv14, v28, zero, v27, v8, v4]
// [Asm]   mv a0, v28  # live: [v5, a0, v7, fv19, s11, fv14, zero, v27, v8, v4]
// [Asm]   fmv.d.x fv29, zero  # live: [v5, a0, v7, fv19, s11, fv14, zero, v27, v8, fv29, v4]
// [Asm]   fmv.d fa0, fv29  # live: [v5, a0, v7, fv19, s11, fv14, zero, v27, v8, fa0, fv29, v4]
// [Asm]   fmv.d fa1, fv29  # live: [v5, a0, v7, fv19, s11, fv14, fa1, zero, v27, v8, fa0, fv29, v4]
// [Asm]   fmv.d fa2, fv29  # live: [v5, a0, v7, fv19, s11, fv14, fa1, fa2, zero, v27, v8, fa0, fv29, v4]
// [Asm]   fmv.d fa3, fv29  # live: [v5, a0, v7, fv19, s11, fv14, fa1, fa2, fa3, zero, v27, v8, fa0, v4]
// [Asm]   fmv.d fa4, fv14  # live: [v5, fa4, a0, v7, fv19, s11, fa1, fa2, fa3, zero, v27, v8, fa0, v4]
// [Asm]   fmv.d fa5, fv19  # live: [v5, fa4, a0, v7, s11, fa1, fa5, fa2, fa3, zero, v27, v8, fa0, v4]
// [Asm]   jalr v27  # live: [v5, zero, a0, v8, v7, v4, s11]
// [Asm]   mv v21, a0  # live: [v5, zero, v8, v7, v4, s11]
// [Asm]   # restore_ctx2  # live: [v5, zero, v8, v7, v4, s11]
// [Asm]   addi v22, v7, 1  # live: [v5, zero, v22, v8, v4, s11]
// [Asm] # control
// [Asm]   mv v7, v22  # live: [v5, zero, v7, v8, v4, s11]
// [Asm]   mv v8, v8  # live: [v7, v4, v5, s11, zero, v8]
// [Asm]   j .xloop10_7_0  # live: [v7, v4, v5, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2], uses: [a0, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .xloop10_7_1:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call minimbt_print_endline  # live: [zero, a0]
// [Asm]   mv v23, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v24, a0], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: []
// [Asm] # block parameters: [v24]
// [Asm] .xloop10_7_3:
// [Asm] # control
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("mandelbrot", Unit), args: [("w", Int)], body: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))
// [Knf] build_knf: Prim(Var("f"), Var("f"), Add, kind=Some(Double))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit)
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1)
// [Knf] build_knf: LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [Var("zr")])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))
// [Knf] build_knf: Var("tr")
// [Knf] build_knf: Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))
// [Knf] build_knf: Var("ti")
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))
// [Knf] build_knf: Prim(Double(2), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))
// [Knf] build_knf: App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("xloop"), [Int(0), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("yloop"), [Int(0)])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("mandelbrot"), [Int(40)])
// [Knf] build_knf: Var("mandelbrot")
// [Knf] build_knf: Int(40)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75_1
// [Main]   .type main75_1, @function
// [Main] # leaf false
// [Main] main75_1:
// [Main] .main75_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 40
// [Main]   call mandelbrot1_0
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_12
// [Main]   .type T$start_12, @function
// [Main] # leaf false
// [Main] T$start_12:
// [Main] .T$start_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main75_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl iloop29_9
// [Main]   .type iloop29_9, @function
// [Main] # leaf false
// [Main] iloop29_9:
// [Main] .iloop29_9_7:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   fsd fs1, 32(sp)
// [Main]   fsd fs2, 40(sp)
// [Main]   fsd fs3, 48(sp)
// [Main]   mv a1, s10
// [Main]   ld s0, 8(a1)
// [Main]   mv s1, a0
// [Main]   fmv.d fs0, fa1
// [Main]   fmv.d fa1, fa2
// [Main]   fmv.d fa2, fa3
// [Main]   fmv.d fs1, fa4
// [Main]   fmv.d fs2, fa5
// [Main] 
// [Main] .iloop29_9_0:
// [Main]   beq s1, zero, .iloop29_9_1
// [Main] 
// [Main] .iloop29_9_2:
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   fadd.d fs3, fa1, fs1
// [Main]   mv s10, s0
// [Main]   ld a0, 0(s0)
// [Main]   jalr a0
// [Main]   fmadd.d fa3, fa0, fs0, fs2
// [Main]   fmul.d fa1, fs3, fs3
// [Main]   fmul.d fa2, fa3, fa3
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   fmadd.d fa4, fa3, fa3, fa1
// [Main]   fle.d a0, fa0, fa4
// [Main]   beq a0, zero, .iloop29_9_4
// [Main] 
// [Main] .iloop29_9_3:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .iloop29_9_5:
// [Main] 
// [Main] .iloop29_9_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   fld fs1, 32(sp)
// [Main]   fld fs2, 40(sp)
// [Main]   fld fs3, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .iloop29_9_1:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .iloop29_9_6
// [Main] 
// [Main] .iloop29_9_4:
// [Main]   addi a0, s1, -1
// [Main]   mv s1, a0
// [Main]   fmv.d fa0, fs3
// [Main]   fmv.d fs0, fa3
// [Main]   j .iloop29_9_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mandelbrot1_0
// [Main]   .type mandelbrot1_0, @function
// [Main] # leaf false
// [Main] mandelbrot1_0:
// [Main] .mandelbrot1_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, dbl4_3
// [Main]   sd a2, 0(a1)
// [Main]   addi a2, s11, -24
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, yloop7_5
// [Main]   sd a3, 0(a2)
// [Main]   sd a0, 8(a2)
// [Main]   sd a1, 16(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dbl4_3
// [Main]   .type dbl4_3, @function
// [Main] # leaf true
// [Main] dbl4_3:
// [Main] .dbl4_3_0:
// [Main]   mv a0, s10
// [Main]   fadd.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_12
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yloop7_5
// [Main]   .type yloop7_5, @function
// [Main] # leaf false
// [Main] yloop7_5:
// [Main] .yloop7_5_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv a1, s10
// [Main]   lw s2, 8(a1)
// [Main]   ld s0, 16(a1)
// [Main]   mv s1, a0
// [Main] 
// [Main] .yloop7_5_0:
// [Main]   bge s1, s2, .yloop7_5_1
// [Main] 
// [Main] .yloop7_5_2:
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, xloop10_7
// [Main]   sd a1, 0(a0)
// [Main]   sd s2, 8(a0)
// [Main]   sd s0, 16(a0)
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, zero
// [Main]   mv a1, s1
// [Main]   jalr a2
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .yloop7_5_0
// [Main] 
// [Main] .yloop7_5_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop7_5_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl xloop10_7
// [Main]   .type xloop10_7, @function
// [Main] # leaf false
// [Main] xloop10_7:
// [Main] .xloop10_7_4:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   fsd fs0, 40(sp)
// [Main]   mv a2, s10
// [Main]   lw s0, 8(a2)
// [Main]   ld s1, 16(a2)
// [Main]   mv s2, a0
// [Main]   mv s3, a1
// [Main] 
// [Main] .xloop10_7_0:
// [Main]   bge s2, s0, .xloop10_7_1
// [Main] 
// [Main] .xloop10_7_2:
// [Main]   fcvt.d.w fa0, s2
// [Main]   mv s10, s1
// [Main]   ld a0, 0(s1)
// [Main]   jalr a0
// [Main]   fcvt.d.w fa1, s0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fs0, fa0, fa1
// [Main]   fcvt.d.w fa0, s3
// [Main]   mv s10, s1
// [Main]   ld a0, 0(s1)
// [Main]   jalr a0
// [Main]   fcvt.d.w fa1, s0
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa5, fa0, fa1
// [Main]   addi a0, s11, -16
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, iloop29_9
// [Main]   sd a0, 0(a1)
// [Main]   sd s1, 8(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   li a0, 1000
// [Main]   fmv.d.x fa0, zero
// [Main]   fmv.d fa1, fa0
// [Main]   fmv.d fa2, fa0
// [Main]   fmv.d fa3, fa0
// [Main]   fmv.d fa4, fs0
// [Main]   jalr a1
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .xloop10_7_0
// [Main] 
// [Main] .xloop10_7_1:
// [Main]   call minimbt_print_endline
// [Main]   mv a0, zero
// [Main] 
// [Main] .xloop10_7_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   fld fs0, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start_12
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_12 to wasm
// [Wasm] Lowering function main75_1
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=40)])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function main75_1 to wasm
// [Wasm] Lowering function yloop7_5
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f7)), Field(index=1, val=FreeVar(fvref=^1)), Field(index=2, val=FreeVar(fvref=^2))])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f5, mref=m0), args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function yloop7_5 to wasm
// [Wasm] Lowering function iloop29_9
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%1)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%12)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Apply(ty=Double, f=FreeVar(fvref=^1), args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%5), BlockParam(bref=b0, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%6), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%7), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f9, fpref=$f.0), FnParam(fref=f9, fpref=$f.1), FnParam(fref=f9, fpref=$f.2), FnParam(fref=f9, fpref=$f.3), FnParam(fref=f9, fpref=$f.4), FnParam(fref=f9, fpref=$f.5), FnParam(fref=f9, fpref=$f.6)])
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.6) -> $$f.6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name FnParam(fref=f9, fpref=$f.6) -> $$f.6
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.6) -> $b0.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function iloop29_9 to wasm
// [Wasm] Lowering function dbl4_3
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function dbl4_3 to wasm
// [Wasm] Lowering function xloop10_7
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Apply(ty=Double, f=FreeVar(fvref=^2), args=[Insn(iref=%2)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[FreeVar(fvref=^1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%5), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Apply(ty=Double, f=FreeVar(fvref=^2), args=[Insn(iref=%7)])
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[FreeVar(fvref=^1)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%10), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Double, Double, Double, Double, Double, Double], ty=Unit), mref=m0, fills=[Field(index=0, val=Fn(fref=f9)), Field(index=1, val=FreeVar(fvref=^2))])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name FreeVar(fvref=^2) -> $^2
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f7, mref=m0), args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%6), Insn(iref=%11)])
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%14), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f7, fpref=$f.0), FnParam(fref=f7, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f7, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f7, mref=m0) -> $f7.m0
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local FreeVar(fvref=^2) -> $^2
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function xloop10_7 to wasm
// [Wasm] Lowering function mandelbrot1_0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Double], ty=Double), mref=m0, fills=[Field(index=0, val=Fn(fref=f3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f5)), Field(index=1, val=FnParam(fref=f0, fpref=$f.0)), Field(index=2, val=Mem(fref=f0, mref=m0))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Apply(ty=Unit, f=Mem(fref=f0, mref=m1), args=[Int32(val=0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowered function mandelbrot1_0 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %4: Apply(ty=Unit, f=Self(fref=f5), args=[Insn(iref=%3)])
// [CoreOpt] eliminated tail rec call %14: Apply(ty=Unit, f=Self(fref=f9), args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), FnParam(fref=f9, fpref=$f.5), FnParam(fref=f9, fpref=$f.6)])
// [CoreOpt] eliminated tail rec call %15: Apply(ty=Unit, f=Self(fref=f7), args=[Insn(iref=%14), FnParam(fref=f7, fpref=$f.1)])
