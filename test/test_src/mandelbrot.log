// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.66"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v3-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v2"
// [Asm]   comment = "v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.66"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v3, 40 ->   li a0, 40
// [Asm] subst   call mandelbrot.62 ->   call mandelbrot.62
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.66 ->   call main.66
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v33, BlockParam(bref=b7, bpref=$b.1) -> v13, BlockParam(bref=b7, bpref=$b.0) -> v12, Insn(iref=%8) -> fv21, BlockParam(bref=b10, bpref=$b.0) -> v52, Insn(iref=%10) -> fv23, BlockParam(bref=b0, bpref=$b.3) -> fv9, Insn(iref=%27) -> v45, Insn(iref=%25) -> fv42, Insn(iref=%14) -> v50, BlockParam(bref=b18, bpref=$b.0) -> v26, BlockParam(bref=b18, bpref=$b.2) -> fv28, Insn(iref=%4) -> v18, BlockParam(bref=b7, bpref=$b.3) -> fv15, BlockParam(bref=b18, bpref=$b.5) -> fv31, BlockParam(bref=b6, bpref=$b.0) -> v53, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> fv11, BlockParam(bref=b18, bpref=$b.3) -> fv29, Insn(iref=%11) -> fv24, Insn(iref=%26) -> v43, BlockParam(bref=b18, bpref=$b.1) -> fv27, BlockParam(bref=b23, bpref=$b.0) -> v46, BlockParam(bref=b18, bpref=$b.6) -> fv32, BlockParam(bref=b24, bpref=$b.0) -> v48, Insn(iref=%6) -> fv19, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> fv4, BlockParam(bref=b7, bpref=$b.2) -> v14, Insn(iref=%28) -> v44, BlockParam(bref=b3, bpref=$b.0) -> v55, Insn(iref=%9) -> fv22, Insn(iref=%24) -> fv41, Insn(iref=%16) -> v47, Self(fref=f2) -> v0, BlockParam(bref=b7, bpref=$b.5) -> fv17, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> fv8, Insn(iref=%5) -> v51, Insn(iref=%0) -> v10, Insn(iref=%19) -> fv36, BlockParam(bref=b13, bpref=$b.0) -> v49, Insn(iref=%18) -> fv35, Insn(iref=%3) -> v54, Insn(iref=%7) -> fv20, BlockParam(bref=b18, bpref=$b.4) -> fv30, Insn(iref=%22) -> fv39, Insn(iref=%17) -> fv34, Insn(iref=%23) -> fv40, Insn(iref=%20) -> fv37, BlockParam(bref=b7, bpref=$b.4) -> fv16, Insn(iref=%21) -> fv38, Insn(iref=%12) -> fv25, FnParam(fref=f2, fpref=$f.3) -> fv5
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%19), BlockParam(bref=b18, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b18, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b7, bpref=$b.2), BlockParam(bref=b7, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v54]
// [Asm] live_set: [v7, fv9, zero, v54, fv8]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: [v54]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: [fv8]
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: [fv9]
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [fv19]
// [Asm] live_set: [v14, v13, v7, fv8, fv19, v12, fv16, fv15, fv9, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v14, v13, v7, fv8, fv20, v12, fv16, fv15, fv9, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v14, v13, v7, fv8, v12, fv16, fv15, fv9, zero, v6, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v81]
// [Asm] live_set: [v14, v13, v7, fv8, v12, fv16, fv15, fv9, zero, v81, v6, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [fv82]
// [Asm] live_set: [v14, v13, v7, fv8, v12, fv16, fv15, fv9, zero, v6, fv82, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv82 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv23, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv24, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v76]
// [Asm] live_set: [fv24, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [fv77]
// [Asm] live_set: [fv24, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17, fv77]
// [Asm] move_origin: []
// [Asm] defined: fv77 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [fv22, fv9, v14, v13, zero, fv25, v7, fv8, v6, v12, fv16, fv15, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: []
// [Asm] live_set: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v74]
// [Asm] live_set: [v14, v13, fv8, v7, v12, fv16, fv15, fv9, fv22, zero, fv25, v6, v74, fv17]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v14, v13, v26, fv8, v7, v12, fv16, fv15, fv9, fv22, zero, fv25, v6, fv17]
// [Asm] move_origin: [v74]
// [Asm] defined: v26 is X
// [Asm] defs: [fv75]
// [Asm] live_set: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, zero, fv25, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv75 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, zero, fv25, fv27, v6, fv17]
// [Asm] move_origin: [fv75]
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, fv28, zero, fv25, fv27, v6, fv17]
// [Asm] move_origin: [fv75]
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, fv28, zero, fv25, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv75]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v14, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv22, fv28, zero, fv25, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv75]
// [Asm] defined: fv30 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [v14, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv25, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv22]
// [Asm] defined: fv31 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv25]
// [Asm] defined: fv32 is F
// [Asm] defs: [v12]
// [Asm] live_set: [fv9, zero, fv11, v7, fv8, v6, v12]
// [Asm] move_origin: [zero]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [fv9, v13, zero, fv11, v7, fv8, v6, v12]
// [Asm] move_origin: [v6]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [fv9, v14, v13, zero, fv11, v7, fv8, v6, v12]
// [Asm] move_origin: [v7]
// [Asm] defined: v14 is X
// [Asm] defs: [fv15]
// [Asm] live_set: [fv9, v14, v13, zero, fv11, v7, fv8, v6, v12, fv15]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16]
// [Asm] move_origin: [fv11]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [fv9]
// [Asm] defined: fv17 is F
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v59, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [a0]
// [Asm] live_set: [fv9, v14, v13, zero, a0, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v59]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv9, v14, v13, zero, a0, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v47, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [a0]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v47, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v47]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v55]
// [Asm] move_origin: [zero]
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [fa0, a1, zero, fa1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [fa0, a1, zero, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, fa0, zero, fa1, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, fv4, zero, fa1, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv4 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [v2, fv5, fv4, zero, v3]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv5 is F
// [Asm] defs: [v6]
// [Asm] live_set: [fv5, v6, fv4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [fv5, v6, fv4, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, fv5, v6, zero, fv8]
// [Asm] move_origin: [fv4]
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: [fv5]
// [Asm] defined: fv9 is F
// [Asm] defs: [v48]
// [Asm] live_set: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v46]
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [fv9, v14, v49, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v48]
// [Asm] defined: v49 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v14, fv32, v13, fv39, v7, fv8, v12, fv16, fv15, fv35, v44, fv40, fv38, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v14, fv32, v13, v26, fv39, v7, fv8, v12, fv16, fv15, fv35, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: [v44]
// [Asm] defined: v26 is X
// [Asm] defs: [fv27]
// [Asm] live_set: [v14, fv32, v13, v26, fv39, v7, fv8, v12, fv16, fv15, fv40, fv38, fv9, fv31, zero, fv27, v6, fv17]
// [Asm] move_origin: [fv35]
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [v14, fv32, v13, v26, fv39, v7, fv8, v12, fv16, fv15, fv40, fv9, fv28, fv31, zero, fv27, v6, fv17]
// [Asm] move_origin: [fv38]
// [Asm] defined: fv28 is F
// [Asm] defs: [fv29]
// [Asm] live_set: [v14, fv32, v13, v26, fv8, v7, v12, fv16, fv15, fv40, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv39]
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv40]
// [Asm] defined: fv30 is F
// [Asm] defs: []
// [Asm] live_set: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv31]
// [Asm] defs: []
// [Asm] live_set: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: [fv32]
// [Asm] defs: []
// [Asm] live_set: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, zero, v13, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v7, fv9, v6, v53, zero, fv8]
// [Asm] move_origin: [v52]
// [Asm] defined: v53 is X
// [Asm] defs: [fv34]
// [Asm] live_set: [v14, fv32, v26, v13, v7, fv8, v12, fv15, fv16, fv9, fv28, fv31, zero, fv34, v6, fv27, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [fv35]
// [Asm] live_set: [v14, fv32, v26, v13, v7, fv8, v12, fv35, fv15, fv16, fv9, fv28, fv31, zero, v6, fv27, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [fv36]
// [Asm] live_set: [v14, fv32, v26, v13, v7, fv8, v12, fv35, fv15, fv16, fv9, fv28, fv31, zero, fv36, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: [fv38]
// [Asm] live_set: [v14, fv32, v26, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [fv39]
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv39 is F
// [Asm] defs: [fv40]
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: [v65]
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v65, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [fv66]
// [Asm] live_set: [v14, fv32, fv66, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv66 is F
// [Asm] defs: [fv41]
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, fv41, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv41 is F
// [Asm] defs: [fv42]
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, fv41, fv42, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v43, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, fv9, v6, zero, a0, fv8]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: [a0]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v7, fv9, v6, zero, fv8]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v7, fv9, v6, v52, zero, fv8]
// [Asm] move_origin: [zero]
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv9, v14, v13, zero, a0, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv9, v14, v13, zero, a0, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v45, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, v7, fv8, v45, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [fv9, v46, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v45]
// [Asm] defined: v46 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v55]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv11]
// [Asm] live_set: [v7, fv9, v6, zero, fv11, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [v50]
// [Asm] live_set: [fv9, v14, v13, zero, v50, v7, fv8, v6, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v12]
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v50]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [v14]
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [fv15]
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [fv16]
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: [fv17]
// [Asm] defs: []
// [Asm] live_set: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yloop.63"];
// [Asm]   r0 [label="v54 ← a0", color=green];
// [Asm]   r38 [label="v46 ← a0", color=green];
// [Asm]   r33 [label="v65 ← a1", color=green];
// [Asm]   r9 [label="v74 ← a0", color=green];
// [Asm]   r26 [label="v48 ← a0", color=green];
// [Asm]   r6 [label="v12 ← s2", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v14 ← s0", color=green];
// [Asm]   r29 [label="v3 ← a1", color=green];
// [Asm]   r35 [label="v51 ← a0", color=green];
// [Asm]   r7 [label="v81 ← a0", color=green];
// [Asm]   r10 [label="v26 ← a0", color=green];
// [Asm]   r8 [label="v76 ← a0", color=green];
// [Asm]   r5 [label="v13 ← s1", color=green];
// [Asm]   r36 [label="v52 ← a0", color=green];
// [Asm]   r32 [label="v53 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="t4", color=blue];
// [Asm]   r31 [label="v44 ← a0", color=green];
// [Asm]   r39 [label="v50 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r37 [label="v45 ← a0", color=green];
// [Asm]   r20 [label="t0", color=blue];
// [Asm]   r23 [label="t3", color=blue];
// [Asm]   r3 [label="v6 ← s1", color=green];
// [Asm]   r27 [label="v55 ← a0", color=green];
// [Asm]   r1 [label="v7 ← s0", color=green];
// [Asm]   r28 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="v59 ← a0", color=green];
// [Asm]   r34 [label="v43 ← a1", color=green];
// [Asm]   r22 [label="t2", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r30 [label="v49 ← a0", color=green];
// [Asm]   r25 [label="v47 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="t1", color=blue];
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r4 -- r38;
// [Asm]   r2 -- r38;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r30;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r37;
// [Asm]   r3 -- r24;
// [Asm]   r13 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r3 -- r34;
// [Asm]   r12 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r4 -- r33;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r39;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r10 -- r33;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r38;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r4 -- r37;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r12 -- r15;
// [Asm]   r6 -- r33;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r10 -- r34;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r1 -- r39;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r6 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r37;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r12 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r12 -- r18;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v54-> 1:v7-> 2:zero-> 3:v6-> 6:v12-> 7:v81-> 4:v14-> 5:v13-> 8:v76-> 9:v74-> 10:v26-> 33:v65-> 34:v43-> 11:v59-> 12:a0-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 20:t0-> 21:t1-> 22:t2-> 23:t3-> 24:t4-> 25:v47-> 26:v48-> 30:v49-> 31:v44-> 37:v45-> 38:v46-> 39:v50-> 32:v53-> 35:v51-> 28:v2-> 29:v3-> 36:v52-> 27:v55"
// [Asm]   comment = "v54<-a0;v46<-a0;v65<-a1;v74<-a0;v48<-a0;v12<-s2;v14<-s0;v3<-a1;v51<-a0;v81<-a0;v26<-a0;v76<-a0;v13<-s1;v52<-a0;v53<-a0;v44<-a0;v50<-a0;v45<-a0;v6<-s1;v55<-a0;v7<-s0;v2<-a0;v59<-a0;v43<-a1;v49<-a0;v47<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yloop.63"];
// [Asm]   r0 [label="fv9 ← fs0", color=green];
// [Asm]   r46 [label="fv38 ← fa3", color=green];
// [Asm]   r38 [label="fa5", color=blue];
// [Asm]   r33 [label="fa0", color=blue];
// [Asm]   r9 [label="fv22 ← fa0", color=green];
// [Asm]   r26 [label="ft4", color=blue];
// [Asm]   r47 [label="fv34 ← fa4", color=green];
// [Asm]   r6 [label="fv20 ← fa0", color=green];
// [Asm]   r44 [label="fv35 ← fa6", color=green];
// [Asm]   r13 [label="fv25 ← fa1", color=green];
// [Asm]   r42 [label="fv5 ← fa1", color=green];
// [Asm]   r4 [label="fv15 ← fs1", color=green];
// [Asm]   r29 [label="ft7", color=blue];
// [Asm]   r35 [label="fa2", color=blue];
// [Asm]   r7 [label="fv21 ← fa0", color=green];
// [Asm]   r10 [label="fv23 ← fa1", color=green];
// [Asm]   r8 [label="fv82 ← fa1", color=green];
// [Asm]   r5 [label="fv17 ← fs0", color=green];
// [Asm]   r36 [label="fa3", color=blue];
// [Asm]   r15 [label="fv27 ← fa2", color=green];
// [Asm]   r24 [label="ft2", color=blue];
// [Asm]   r32 [label="ft10", color=blue];
// [Asm]   r49 [label="fv66 ← fa2", color=green];
// [Asm]   r43 [label="fv39 ← fa4", color=green];
// [Asm]   r31 [label="ft9", color=blue];
// [Asm]   r39 [label="fa6", color=blue];
// [Asm]   r17 [label="fv29 ← fa4", color=green];
// [Asm]   r12 [label="fv77 ← fa2", color=green];
// [Asm]   r48 [label="fv36 ← fa2", color=green];
// [Asm]   r37 [label="fa4", color=blue];
// [Asm]   r20 [label="fv32 ← fa1", color=green];
// [Asm]   r23 [label="ft1", color=blue];
// [Asm]   r3 [label="fv16 ← fs2", color=green];
// [Asm]   r27 [label="ft5", color=blue];
// [Asm]   r1 [label="fv8 ← fs1", color=green];
// [Asm]   r40 [label="fa7", color=blue];
// [Asm]   r28 [label="ft6", color=blue];
// [Asm]   r41 [label="fv4 ← fa0", color=green];
// [Asm]   r11 [label="fv24 ← fa1", color=green];
// [Asm]   r34 [label="fa1", color=blue];
// [Asm]   r22 [label="ft0", color=blue];
// [Asm]   r14 [label="fv75 ← fa2", color=green];
// [Asm]   r50 [label="fv41 ← fa2", color=green];
// [Asm]   r51 [label="fv42 ← fa7", color=green];
// [Asm]   r30 [label="ft8", color=blue];
// [Asm]   r45 [label="fv40 ← fa5", color=green];
// [Asm]   r25 [label="ft3", color=blue];
// [Asm]   r2 [label="fv19 ← fa0", color=green];
// [Asm]   r16 [label="fv28 ← fa3", color=green];
// [Asm]   r18 [label="fv30 ← fa5", color=green];
// [Asm]   r19 [label="fv31 ← fa0", color=green];
// [Asm]   r21 [label="fv11 ← fa0", color=green];
// [Asm]   r19 -- r20;
// [Asm]   r3 -- r44;
// [Asm]   r0 -- r36;
// [Asm]   r16 -- r20;
// [Asm]   r5 -- r33;
// [Asm]   r15 -- r43;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r32;
// [Asm]   r4 -- r34;
// [Asm]   r3 -- r15;
// [Asm]   r0 -- r48;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r15 -- r45;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r28;
// [Asm]   r4 -- r44;
// [Asm]   r1 -- r45;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r29;
// [Asm]   r0 -- r23;
// [Asm]   r3 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r4 -- r31;
// [Asm]   r5 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r43 -- r51;
// [Asm]   r1 -- r9;
// [Asm]   r19 -- r45;
// [Asm]   r5 -- r35;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r1 -- r48;
// [Asm]   r3 -- r39;
// [Asm]   r44 -- r49;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r12;
// [Asm]   r1 -- r40;
// [Asm]   r5 -- r32;
// [Asm]   r20 -- r50;
// [Asm]   r19 -- r47;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r41 -- r42;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r0 -- r47;
// [Asm]   r3 -- r17;
// [Asm]   r3 -- r49;
// [Asm]   r5 -- r51;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r38;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r44;
// [Asm]   r1 -- r35;
// [Asm]   r0 -- r4;
// [Asm]   r20 -- r45;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r15 -- r47;
// [Asm]   r5 -- r36;
// [Asm]   r0 -- r18;
// [Asm]   r16 -- r47;
// [Asm]   r4 -- r13;
// [Asm]   r20 -- r51;
// [Asm]   r46 -- r50;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r44 -- r51;
// [Asm]   r13 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r34 -- r41;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r0 -- r34;
// [Asm]   r1 -- r22;
// [Asm]   r19 -- r48;
// [Asm]   r16 -- r43;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r46 -- r51;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r18;
// [Asm]   r43 -- r45;
// [Asm]   r5 -- r11;
// [Asm]   r0 -- r19;
// [Asm]   r5 -- r38;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r19;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r31;
// [Asm]   r45 -- r50;
// [Asm]   r3 -- r50;
// [Asm]   r19 -- r50;
// [Asm]   r0 -- r50;
// [Asm]   r20 -- r48;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r28;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r1 -- r29;
// [Asm]   r0 -- r45;
// [Asm]   r13 -- r14;
// [Asm]   r0 -- r39;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r37;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r19 -- r43;
// [Asm]   r4 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r0 -- r30;
// [Asm]   r43 -- r44;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r44 -- r50;
// [Asm]   r15 -- r19;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r5 -- r12;
// [Asm]   r46 -- r49;
// [Asm]   r4 -- r38;
// [Asm]   r0 -- r13;
// [Asm]   r44 -- r46;
// [Asm]   r19 -- r44;
// [Asm]   r1 -- r12;
// [Asm]   r44 -- r48;
// [Asm]   r1 -- r37;
// [Asm]   r0 -- r49;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r43;
// [Asm]   r43 -- r49;
// [Asm]   r19 -- r51;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r4 -- r35;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r15 -- r18;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r0 -- r40;
// [Asm]   r50 -- r51;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r51;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r43 -- r46;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r15 -- r44;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r11;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r44;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r34;
// [Asm]   r17 -- r20;
// [Asm]   r17 -- r18;
// [Asm]   r15 -- r46;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r20 -- r43;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r9 -- r15;
// [Asm]   r45 -- r49;
// [Asm]   r0 -- r24;
// [Asm]   r16 -- r45;
// [Asm]   r1 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r43 -- r50;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r43;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r5 -- r44;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r0 -- r35;
// [Asm]   r19 -- r46;
// [Asm]   r5 -- r16;
// [Asm]   r20 -- r46;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r46;
// [Asm]   r18 -- r19;
// [Asm]   r0 -- r33;
// [Asm]   r0 -- r46;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r19 -- r49;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r5 -- r37;
// [Asm]   r20 -- r47;
// [Asm]   r45 -- r51;
// [Asm]   r16 -- r44;
// [Asm]   r4 -- r47;
// [Asm]   r3 -- r14;
// [Asm]   r20 -- r49;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r17 -- r45;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r20 -- r44;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r0 -- r27;
// [Asm]   r16 -- r48;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r40;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:fv9-> 1:fv8-> 2:fv19-> 3:fv16-> 4:fv15-> 5:fv17-> 6:fv20-> 7:fv21-> 8:fv82-> 9:fv22-> 10:fv23-> 11:fv24-> 12:fv77-> 13:fv25-> 14:fv75-> 15:fv27-> 16:fv28-> 17:fv29-> 18:fv30-> 19:fv31-> 20:fv32-> 45:fv40-> 43:fv39-> 44:fv35-> 46:fv38-> 49:fv66-> 50:fv41-> 51:fv42-> 47:fv34-> 48:fv36-> 22:ft0-> 23:ft1-> 24:ft2-> 25:ft3-> 26:ft4-> 27:ft5-> 28:ft6-> 29:ft7-> 30:ft8-> 31:ft9-> 32:ft10-> 33:fa0-> 34:fa1-> 35:fa2-> 36:fa3-> 37:fa4-> 38:fa5-> 39:fa6-> 40:fa7-> 21:fv11-> 41:fv4-> 42:fv5"
// [Asm]   comment = "fv9<-fs0;fv38<-fa3;fv22<-fa0;fv34<-fa4;fv20<-fa0;fv35<-fa6;fv25<-fa1;fv5<-fa1;fv15<-fs1;fv21<-fa0;fv23<-fa1;fv82<-fa1;fv17<-fs0;fv27<-fa2;fv66<-fa2;fv39<-fa4;fv29<-fa4;fv77<-fa2;fv36<-fa2;fv32<-fa1;fv16<-fs2;fv8<-fs1;fv4<-fa0;fv24<-fa1;fv75<-fa2;fv41<-fa2;fv42<-fa7;fv40<-fa5;fv19<-fa0;fv28<-fa3;fv30<-fa5;fv31<-fa0;fv11<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v54, v6, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v6, v54 ->   mv s1, a0
// [Asm] subst   j .yloop.63_0 ->   j .yloop.63_0
// [Asm] subst   fcvt.d.w fv19, v12 ->   fcvt.d.w fa0, s2
// [Asm] subst   fadd.d fv20, fv19, fv19 ->   fadd.d fa0, fa0, fa0
// [Asm] subst   fdiv.d fv21, fv20, fv15 ->   fdiv.d fa0, fa0, fs1
// [Asm] subst   li v81, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv82, v81 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv22, fv21, fv82 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fadd.d fv23, fv16, fv16 ->   fadd.d fa1, fs2, fs2
// [Asm] subst   fdiv.d fv24, fv23, fv17 ->   fdiv.d fa1, fa1, fs0
// [Asm] subst   li v76, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv77, v76 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv25, fv24, fv77 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   beq v26, zero, .yloop.63_19 ->   beq a0, zero, .yloop.63_19
// [Asm] subst   li v74, 1000 ->   li a0, 1000
// [Asm] subst   fmv.d.x fv75, zero ->   fmv.d.x fa2, zero
// [Asm] subst   fmv.d fv28, fv75 ->   fmv.d fa3, fa2
// [Asm] subst   fmv.d fv29, fv75 ->   fmv.d fa4, fa2
// [Asm] subst   fmv.d fv30, fv75 ->   fmv.d fa5, fa2
// [Asm] subst   mv v12, zero ->   mv s2, zero
// [Asm] subst   fmv.d fv16, fv11 ->   fmv.d fs2, fa0
// [Asm] subst   li v59, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .yloop.63_24 ->   j .yloop.63_24
// [Asm] subst   bge v6, v7, .yloop.63_1 ->   bge s1, s0, .yloop.63_1
// [Asm] subst   mv v55, zero ->   mv a0, zero
// [Asm] subst   mv v6, v2 ->   mv s1, a0
// [Asm] subst   mv v7, v3 ->   mv s0, a1
// [Asm] subst   fmv.d fv8, fv4 ->   fmv.d fs1, fa0
// [Asm] subst   fmv.d fv9, fv5 ->   fmv.d fs0, fa1
// [Asm] subst   addi v44, v26, -1 ->   addi a0, a0, -1
// [Asm] subst   fmv.d fv27, fv35 ->   fmv.d fa2, fa6
// [Asm] subst   j .yloop.63_18 ->   j .yloop.63_18
// [Asm] subst   bge v12, v14, .yloop.63_8 ->   bge s2, s0, .yloop.63_8
// [Asm] subst   fsub.d fv34, fv29, fv30 ->   fsub.d fa4, fa4, fa5
// [Asm] subst   fadd.d fv35, fv34, fv31 ->   fadd.d fa6, fa4, fa0
// [Asm] subst   fadd.d fv36, fv27, fv27 ->   fadd.d fa2, fa2, fa2
// [Asm] subst   fmadd.d fv38, fv36, fv28, fv32 ->   fmadd.d fa3, fa2, fa3, fa1
// [Asm] subst   fmul.d fv39, fv35, fv35 ->   fmul.d fa4, fa6, fa6
// [Asm] subst   fmul.d fv40, fv38, fv38 ->   fmul.d fa5, fa3, fa3
// [Asm] subst   li v65, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv66, v65 ->   fmv.d.x fa2, a1
// [Asm] subst   fmul.d fv41, fv66, fv66 ->   fmul.d fa2, fa2, fa2
// [Asm] subst   fadd.d fv42, fv39, fv40 ->   fadd.d fa7, fa4, fa5
// [Asm] subst   fle.d v43, fv41, fv42 ->   fle.d a1, fa2, fa7
// [Asm] subst   beq v43, zero, .yloop.63_22 ->   beq a1, zero, .yloop.63_22
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   mv v52, zero ->   mv a0, zero
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   fcvt.d.w fv11, v6 ->   fcvt.d.w fa0, s1
// [Asm] subst   addi v50, v12, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v12, v50 ->   mv s2, a0
// [Asm] subst   j .yloop.63_7 ->   j .yloop.63_7
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v4, FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%0) -> fv3
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: []
// [Asm] live_set: [fv3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, fv3, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, fv3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [a1, a0, fv3, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [a1, fa1, a0, fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa1 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mandelbrot.62"];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r0 [label="v2 ← a1", color=green];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v4 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a0-> 3:a1-> 4:a2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:v4"
// [Asm]   comment = "v2<-a1;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mandelbrot.62"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r3 [label="ft0", color=blue];
// [Asm]   r9 [label="ft6", color=blue];
// [Asm]   r6 [label="ft3", color=blue];
// [Asm]   r13 [label="ft10", color=blue];
// [Asm]   r4 [label="ft1", color=blue];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   r11 [label="ft8", color=blue];
// [Asm]   r7 [label="ft4", color=blue];
// [Asm]   r10 [label="ft7", color=blue];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r8 [label="ft5", color=blue];
// [Asm]   r5 [label="ft2", color=blue];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r2 [label="fa1", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r12 [label="ft9", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv3-> 1:fa0-> 2:fa1-> 3:ft0-> 4:ft1-> 5:ft2-> 6:ft3-> 7:ft4-> 8:ft5-> 9:ft6-> 10:ft7-> 11:ft8-> 12:ft9-> 13:ft10-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 18:fa6-> 19:fa7"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   fcvt.d.w fv3, v2 ->   fcvt.d.w fa0, a1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   fmv.d fa1, fv3 ->   fmv.d fa1, fa0
// [Asm] subst   call yloop.63 ->   call yloop.63
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] mandelbrot.62:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, fv3, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, zero, fa0, v4, a1, fa1, fv3, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .mandelbrot.62_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   fcvt.d.w fv3, v2  # live: [fv3, zero, v2]
// [Asm]   # save_ctx2  # live: [fv3, zero, v2]
// [Asm]   mv a0, zero  # live: [a0, fv3, v2]
// [Asm]   mv a1, v2  # live: [a1, a0, fv3]
// [Asm]   fmv.d fa0, fv3  # live: [a1, a0, fv3, fa0]
// [Asm]   fmv.d fa1, fv3  # live: [a1, fa1, a0, fa0]
// [Asm]   call yloop.63  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.66:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.66_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 40  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call mandelbrot.62  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yloop.63:
// [Asm] # block info: defs: [v2, fv5, fv9, v7, fv8, v6, fv4, v3], uses: [v3, fv5, a0, fa0, a1, fv4, fa1, v2], upward_exposed: [a1, a0, fa1, fa0], params_defs: []
// [Asm] # live_in: [fa0, a1, a0, fa1, zero], live_out: [fv8, fv9, v6, zero, v7]
// [Asm] # block parameters: []
// [Asm] .yloop.63_5:
// [Asm]   # save_ctx1  # live: [fa0, a1, zero, fa1, a0]
// [Asm]   mv v2, a0  # live: [fa0, a1, zero, fa1, v2]
// [Asm]   mv v3, a1  # live: [v2, fa0, zero, fa1, v3]
// [Asm]   fmv.d fv4, fa0  # live: [v2, fv4, zero, fa1, v3]
// [Asm]   fmv.d fv5, fa1  # live: [v2, fv5, fv4, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [fv5, v6, fv4, zero, v3]
// [Asm]   mv v7, v3  # live: [fv5, v6, fv4, zero, v7]
// [Asm]   fmv.d fv8, fv4  # live: [v7, fv5, v6, zero, fv8]
// [Asm]   fmv.d fv9, fv5  # live: [v7, fv9, v6, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v7], upward_exposed: [v6, v7], params_defs: [fv8, fv9, v6, v7]
// [Asm] # live_in: [v7, fv9, v6, zero, fv8], live_out: [fv8, fv9, v6, zero, v7]
// [Asm] # block parameters: [v6, v7, fv8, fv9]
// [Asm] .yloop.63_0:
// [Asm] # control
// [Asm]   bge v6, v7, .yloop.63_1  # live: [v7, fv9, v6, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [fv11], uses: [v6], upward_exposed: [v6], params_defs: []
// [Asm] # live_in: [v7, fv9, v6, zero, fv8], live_out: [fv9, zero, fv11, fv8, v7, v6]
// [Asm] # block parameters: []
// [Asm] .yloop.63_2:
// [Asm]   fcvt.d.w fv11, v6  # live: [v7, fv9, v6, zero, fv11, fv8]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v14, v12, fv15, fv16, v13, fv17], uses: [fv8, fv9, v6, zero, fv11, v7], upward_exposed: [fv8, fv9, v6, zero, fv11, v7], params_defs: []
// [Asm] # live_in: [fv9, zero, fv11, v7, fv8, v6], live_out: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_12:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [fv9, zero, fv11, v7, fv8, v6, v12]
// [Asm]   mv v13, v6  # live: [fv9, v13, zero, fv11, v7, fv8, v6, v12]
// [Asm]   mv v14, v7  # live: [fv9, v14, v13, zero, fv11, v7, fv8, v6, v12]
// [Asm]   fmv.d fv15, fv8  # live: [fv9, v14, v13, zero, fv11, v7, fv8, v6, v12, fv15]
// [Asm]   fmv.d fv16, fv11  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16]
// [Asm]   fmv.d fv17, fv9  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v14, v12], upward_exposed: [v14, v12], params_defs: [v14, v12, fv15, fv16, v13, fv17]
// [Asm] # live_in: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [fv9, v14, zero, v13, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: [v12, v13, v14, fv15, fv16, fv17]
// [Asm] .yloop.63_7:
// [Asm] # control
// [Asm]   bge v12, v14, .yloop.63_8  # live: [fv9, v14, zero, v13, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv77, fv22, fv24, fv23, fv25, fv20, fv19, v81, fv82, fv21, v76], uses: [v76, fv77, fv24, fv23, fv20, fv19, v81, fv82, v12, fv15, fv16, fv17, fv21], upward_exposed: [v12, fv15, fv16, fv17], params_defs: []
// [Asm] # live_in: [fv9, v14, zero, v13, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, fv25, v6, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_9:
// [Asm]   fcvt.d.w fv19, v12  # live: [v14, v13, v7, fv8, fv19, v12, fv16, fv15, fv9, zero, v6, fv17]
// [Asm]   fadd.d fv20, fv19, fv19  # live: [v14, v13, v7, fv8, fv20, v12, fv16, fv15, fv9, zero, v6, fv17]
// [Asm]   fdiv.d fv21, fv20, fv15  # live: [v14, v13, v7, fv8, v12, fv16, fv15, fv9, zero, v6, fv17, fv21]
// [Asm]   li v81, 4609434218613702656  # live: [v14, v13, v7, fv8, v12, fv16, fv15, fv9, zero, v81, v6, fv17, fv21]
// [Asm]   fmv.d.x fv82, v81  # live: [v14, v13, v7, fv8, v12, fv16, fv15, fv9, zero, v6, fv82, fv17, fv21]
// [Asm]   fsub.d fv22, fv21, fv82  # live: [v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17]
// [Asm]   fadd.d fv23, fv16, fv16  # live: [fv23, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17]
// [Asm]   fdiv.d fv24, fv23, fv17  # live: [fv24, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17]
// [Asm]   li v76, 4607182418800017408  # live: [fv24, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17, v76]
// [Asm]   fmv.d.x fv77, v76  # live: [fv24, v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, v6, fv17, fv77]
// [Asm]   fsub.d fv25, fv24, fv77  # live: [fv22, fv9, v14, v13, zero, fv25, v7, fv8, v6, v12, fv16, fv15, fv17]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [fv28, fv32, fv31, v26, fv30, fv29, fv75, v74, fv27], uses: [fv22, fv75, v74, zero, fv25], upward_exposed: [fv22, zero, fv25], params_defs: []
// [Asm] # live_in: [v14, v13, v7, fv8, v12, fv16, fv15, fv22, fv9, zero, fv25, v6, fv17], live_out: [v14, fv32, v26, v13, fv30, v7, fv8, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_26:
// [Asm] # control
// [Asm]   li v74, 1000  # live: [v14, v13, fv8, v7, v12, fv16, fv15, fv9, fv22, zero, fv25, v6, v74, fv17]
// [Asm]   mv v26, v74  # live: [v14, v13, v26, fv8, v7, v12, fv16, fv15, fv9, fv22, zero, fv25, v6, fv17]
// [Asm]   fmv.d.x fv75, zero  # live: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, zero, fv25, v6, fv17]
// [Asm]   fmv.d fv27, fv75  # live: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, zero, fv25, fv27, v6, fv17]
// [Asm]   fmv.d fv28, fv75  # live: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, fv28, zero, fv25, fv27, v6, fv17]
// [Asm]   fmv.d fv29, fv75  # live: [v14, v13, v26, fv8, v7, fv75, v12, fv16, fv15, fv9, fv22, fv28, zero, fv25, fv29, fv27, v6, fv17]
// [Asm]   fmv.d fv30, fv75  # live: [v14, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv22, fv28, zero, fv25, fv29, fv27, v6, fv17]
// [Asm]   fmv.d fv31, fv22  # live: [v14, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv25, fv29, fv27, v6, fv17]
// [Asm]   fmv.d fv32, fv25  # live: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v26, zero], upward_exposed: [v26, zero], params_defs: [fv28, fv32, fv31, v26, fv30, fv29, fv27]
// [Asm] # live_in: [v14, fv32, v26, v13, fv30, v7, fv8, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17], live_out: [v14, fv32, v26, v13, fv30, v7, fv8, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] # block parameters: [v26, fv27, fv28, fv29, fv30, fv31, fv32]
// [Asm] .yloop.63_18:
// [Asm] # control
// [Asm]   beq v26, zero, .yloop.63_19  # live: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv66, fv36, fv39, fv34, fv41, fv42, v65, v43, fv35, fv40, fv38], uses: [fv32, fv66, fv39, fv30, v65, v43, fv35, fv38, fv40, fv28, fv31, fv36, zero, fv41, fv42, fv34, fv29, fv27], upward_exposed: [fv28, fv32, fv31, zero, fv30, fv29, fv27], params_defs: []
// [Asm] # live_in: [v14, fv32, v26, v13, fv30, v7, fv8, v12, fv15, fv16, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17], live_out: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv40, fv38, fv9, fv31, zero, v6, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_20:
// [Asm]   fsub.d fv34, fv29, fv30  # live: [v14, fv32, v26, v13, v7, fv8, v12, fv15, fv16, fv9, fv28, fv31, zero, fv34, v6, fv27, fv17]
// [Asm]   fadd.d fv35, fv34, fv31  # live: [v14, fv32, v26, v13, v7, fv8, v12, fv35, fv15, fv16, fv9, fv28, fv31, zero, v6, fv27, fv17]
// [Asm]   fadd.d fv36, fv27, fv27  # live: [v14, fv32, v26, v13, v7, fv8, v12, fv35, fv15, fv16, fv9, fv28, fv31, zero, fv36, v6, fv17]
// [Asm]   fmadd.d fv38, fv36, fv28, fv32  # live: [v14, fv32, v26, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv9, fv31, zero, v6, fv17]
// [Asm]   fmul.d fv39, fv35, fv35  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv9, fv31, zero, v6, fv17]
// [Asm]   fmul.d fv40, fv38, fv38  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm]   li v65, 4611686018427387904  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v65, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm]   fmv.d.x fv66, v65  # live: [v14, fv32, fv66, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm]   fmul.d fv41, fv66, fv66  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, fv41, v6, fv17]
// [Asm]   fadd.d fv42, fv39, fv40  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, fv41, fv42, v6, fv17]
// [Asm]   fle.d v43, fv41, fv42  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v43, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] # control
// [Asm]   beq v43, zero, .yloop.63_22  # live: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv15, fv16, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v46, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, v45, t4, t2], uses: [zero, a0, v45], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [fv9, v46, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_21:
// [Asm]   # save_ctx2  # live: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm]   mv a0, zero  # live: [fv9, v14, v13, zero, a0, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm]   call minimbt_print_int  # live: [fv9, v14, v13, zero, a0, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   mv v45, a0  # live: [fv9, v14, v13, zero, v7, fv8, v45, v6, v12, fv15, fv16, fv17]
// [Asm]   # restore_ctx2  # live: [fv9, v14, v13, zero, v7, fv8, v45, v6, v12, fv15, fv16, fv17]
// [Asm] # control
// [Asm]   mv v46, v45  # live: [fv9, v46, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v48], uses: [v46], upward_exposed: [v46], params_defs: [v46]
// [Asm] # live_in: [fv9, v46, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: [v46]
// [Asm] .yloop.63_23:
// [Asm] # control
// [Asm]   mv v48, v46  # live: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v49], uses: [v48], upward_exposed: [v48], params_defs: [v48]
// [Asm] # live_in: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [fv9, v14, v49, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: [v48]
// [Asm] .yloop.63_24:
// [Asm] # control
// [Asm]   mv v49, v48  # live: [fv9, v14, v49, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v12, v50], uses: [v14, v13, v50, v12, fv15, fv16, fv17], upward_exposed: [v14, v12, fv15, fv16, v13, fv17], params_defs: [v49]
// [Asm] # live_in: [fv9, v14, v49, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: [v49]
// [Asm] .yloop.63_13:
// [Asm]   addi v50, v12, 1  # live: [fv9, v14, v13, zero, v50, v7, fv8, v6, fv15, fv16, fv17]
// [Asm] # control
// [Asm]   mv v12, v50  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   mv v13, v13  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   mv v14, v14  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   fmv.d fv15, fv15  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   fmv.d fv16, fv16  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   fmv.d fv17, fv17  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   j .yloop.63_7  # live: [fv9, v14, v13, zero, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [v55], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v55]
// [Asm] # block parameters: []
// [Asm] .yloop.63_1:
// [Asm] # control
// [Asm]   mv v55, zero  # live: [v55]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v55, a0], upward_exposed: [v55], params_defs: [v55]
// [Asm] # live_in: [v55], live_out: []
// [Asm] # block parameters: [v55]
// [Asm] .yloop.63_3:
// [Asm] # control
// [Asm]   mv a0, v55  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v51, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v52, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v7, fv9, v6, zero, fv8], live_out: [fv9, zero, fv8, v7, v6, v52]
// [Asm] # block parameters: []
// [Asm] .yloop.63_8:
// [Asm]   # save_ctx2  # live: [v7, fv9, v6, zero, fv8]
// [Asm]   call minimbt_print_endline  # live: [v7, fv9, v6, zero, a0, fv8]
// [Asm]   mv v51, a0  # live: [v7, fv9, v6, zero, fv8]
// [Asm]   # restore_ctx2  # live: [v7, fv9, v6, zero, fv8]
// [Asm] # control
// [Asm]   mv v52, zero  # live: [v7, fv9, v6, v52, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [v53], uses: [v52], upward_exposed: [v52], params_defs: [v52]
// [Asm] # live_in: [fv9, zero, v7, fv8, v6, v52], live_out: [fv9, v53, zero, fv8, v7, v6]
// [Asm] # block parameters: [v52]
// [Asm] .yloop.63_10:
// [Asm] # control
// [Asm]   mv v53, v52  # live: [v7, fv9, v6, v53, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [v6, v54], uses: [fv8, fv9, v6, v54, v7], upward_exposed: [fv8, fv9, v6, v7], params_defs: [v53]
// [Asm] # live_in: [fv9, v53, zero, v7, fv8, v6], live_out: [fv8, fv9, v6, zero, v7]
// [Asm] # block parameters: [v53]
// [Asm] .yloop.63_6:
// [Asm]   addi v54, v6, 1  # live: [v7, fv9, zero, v54, fv8]
// [Asm] # control
// [Asm]   mv v6, v54  # live: [v7, fv9, v6, zero, fv8]
// [Asm]   mv v7, v7  # live: [v7, fv9, v6, zero, fv8]
// [Asm]   fmv.d fv8, fv8  # live: [v7, fv9, v6, zero, fv8]
// [Asm]   fmv.d fv9, fv9  # live: [v7, fv9, v6, zero, fv8]
// [Asm]   j .yloop.63_0  # live: [v7, fv9, v6, zero, fv8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v59, v47, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, v48, fa3, ft3, fa0, t4, t2], uses: [v59, v47, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17], live_out: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_19:
// [Asm]   # save_ctx2  # live: [fv9, v14, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm]   li v59, 1  # live: [fv9, v14, v13, zero, v7, fv8, v59, v6, v12, fv15, fv16, fv17]
// [Asm]   mv a0, v59  # live: [fv9, v14, v13, zero, a0, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm]   call minimbt_print_int  # live: [fv9, v14, v13, zero, a0, fv8, v7, v6, v12, fv15, fv16, fv17]
// [Asm]   mv v47, a0  # live: [fv9, v14, v13, zero, v7, fv8, v47, v6, v12, fv15, fv16, fv17]
// [Asm]   # restore_ctx2  # live: [fv9, v14, v13, zero, v7, fv8, v47, v6, v12, fv15, fv16, fv17]
// [Asm] # control
// [Asm]   mv v48, v47  # live: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm]   j .yloop.63_24  # live: [fv9, v14, v48, v13, zero, v7, fv8, v6, v12, fv15, fv16, fv17]
// [Asm] 
// [Asm] # block info: defs: [fv29, fv27, fv28, v44, v26, fv30], uses: [fv32, fv31, v26, fv39, v44, fv35, fv38, fv40], upward_exposed: [fv32, fv31, fv39, v26, fv35, fv40, fv38], params_defs: []
// [Asm] # live_in: [v14, fv32, v26, fv39, v13, v7, fv8, v12, fv35, fv16, fv15, fv40, fv38, fv9, fv31, zero, v6, fv17], live_out: [v14, fv32, v26, v13, fv30, v7, fv8, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] # block parameters: []
// [Asm] .yloop.63_22:
// [Asm]   addi v44, v26, -1  # live: [v14, fv32, v13, fv39, v7, fv8, v12, fv16, fv15, fv35, v44, fv40, fv38, fv9, fv31, zero, v6, fv17]
// [Asm] # control
// [Asm]   mv v26, v44  # live: [v14, fv32, v13, v26, fv39, v7, fv8, v12, fv16, fv15, fv35, fv38, fv40, fv9, fv31, zero, v6, fv17]
// [Asm]   fmv.d fv27, fv35  # live: [v14, fv32, v13, v26, fv39, v7, fv8, v12, fv16, fv15, fv40, fv38, fv9, fv31, zero, fv27, v6, fv17]
// [Asm]   fmv.d fv28, fv38  # live: [v14, fv32, v13, v26, fv39, v7, fv8, v12, fv16, fv15, fv40, fv9, fv28, fv31, zero, fv27, v6, fv17]
// [Asm]   fmv.d fv29, fv39  # live: [v14, fv32, v13, v26, fv8, v7, v12, fv16, fv15, fv40, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm]   fmv.d fv30, fv40  # live: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm]   fmv.d fv31, fv31  # live: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm]   fmv.d fv32, fv32  # live: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm]   j .yloop.63_18  # live: [v14, fv32, v13, v26, fv30, fv8, v7, v12, fv16, fv15, fv9, fv28, fv31, zero, fv29, fv27, v6, fv17]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.66  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("mandelbrot", Unit), args: [("w", Int)], body: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))
// [Knf] build_knf: Prim(Var("f"), Var("f"), Add, kind=Some(Double))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit)
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1)
// [Knf] build_knf: LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [Var("zr")])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))
// [Knf] build_knf: Var("tr")
// [Knf] build_knf: Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))
// [Knf] build_knf: Var("ti")
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))
// [Knf] build_knf: Prim(Double(2), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))
// [Knf] build_knf: App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("xloop"), [Int(0), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("yloop"), [Int(0)])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("mandelbrot"), [Int(40)])
// [Knf] build_knf: Var("mandelbrot")
// [Knf] build_knf: Int(40)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Insn(iref=%12)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%14)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%11), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Insn(iref=%1)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%11)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mandelbrot.62
// [Main]   .type mandelbrot.62, @function
// [Main] # leaf false
// [Main] mandelbrot.62:
// [Main] .mandelbrot.62_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, a0
// [Main]   fcvt.d.w fa0, a1
// [Main]   mv a0, zero
// [Main]   fmv.d fa1, fa0
// [Main]   call yloop.63
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.66
// [Main]   .type main.66, @function
// [Main] # leaf false
// [Main] main.66:
// [Main] .main.66_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 40
// [Main]   call mandelbrot.62
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yloop.63
// [Main]   .type yloop.63, @function
// [Main] # leaf false
// [Main] yloop.63:
// [Main] .yloop.63_5:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   fsd fs0, 32(sp)
// [Main]   fsd fs1, 40(sp)
// [Main]   fsd fs2, 48(sp)
// [Main]   mv s1, a0
// [Main]   mv s0, a1
// [Main]   fmv.d fs1, fa0
// [Main]   fmv.d fs0, fa1
// [Main] 
// [Main] .yloop.63_0:
// [Main]   bge s1, s0, .yloop.63_1
// [Main] 
// [Main] .yloop.63_2:
// [Main]   fcvt.d.w fa0, s1
// [Main] 
// [Main] .yloop.63_12:
// [Main]   mv s2, zero
// [Main]   fmv.d fs2, fa0
// [Main] 
// [Main] .yloop.63_7:
// [Main]   bge s2, s0, .yloop.63_8
// [Main] 
// [Main] .yloop.63_9:
// [Main]   fcvt.d.w fa0, s2
// [Main]   fadd.d fa0, fa0, fa0
// [Main]   fdiv.d fa0, fa0, fs1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fadd.d fa1, fs2, fs2
// [Main]   fdiv.d fa1, fa1, fs0
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main] 
// [Main] .yloop.63_26:
// [Main]   li a0, 1000
// [Main]   fmv.d.x fa2, zero
// [Main]   fmv.d fa3, fa2
// [Main]   fmv.d fa4, fa2
// [Main]   fmv.d fa5, fa2
// [Main] 
// [Main] .yloop.63_18:
// [Main]   beq a0, zero, .yloop.63_19
// [Main] 
// [Main] .yloop.63_20:
// [Main]   fsub.d fa4, fa4, fa5
// [Main]   fadd.d fa6, fa4, fa0
// [Main]   fadd.d fa2, fa2, fa2
// [Main]   fmadd.d fa3, fa2, fa3, fa1
// [Main]   fmul.d fa4, fa6, fa6
// [Main]   fmul.d fa5, fa3, fa3
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa2, a1
// [Main]   fmul.d fa2, fa2, fa2
// [Main]   fadd.d fa7, fa4, fa5
// [Main]   fle.d a1, fa2, fa7
// [Main]   beq a1, zero, .yloop.63_22
// [Main] 
// [Main] .yloop.63_21:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .yloop.63_23:
// [Main] 
// [Main] .yloop.63_24:
// [Main] 
// [Main] .yloop.63_13:
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .yloop.63_7
// [Main] 
// [Main] .yloop.63_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop.63_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   fld fs0, 32(sp)
// [Main]   fld fs1, 40(sp)
// [Main]   fld fs2, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .yloop.63_8:
// [Main]   call minimbt_print_endline
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop.63_10:
// [Main] 
// [Main] .yloop.63_6:
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .yloop.63_0
// [Main] 
// [Main] .yloop.63_19:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .yloop.63_24
// [Main] 
// [Main] .yloop.63_22:
// [Main]   addi a0, a0, -1
// [Main]   fmv.d fa2, fa6
// [Main]   j .yloop.63_18
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.66
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.66
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=40)])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function main.66 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function yloop.63
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering control Jump(target=b10, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%14), BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.2), BlockParam(bref=b7, bpref=$b.3), BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b24, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b24, args=[Insn(iref=%16)])
// [Wasm] Lowering control Jump(target=b24, args=[BlockParam(bref=b23, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b23, args=[Insn(iref=%27)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b18, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b18, args=[Insn(iref=%28), Insn(iref=%18), Insn(iref=%21), Insn(iref=%22), Insn(iref=%23), BlockParam(bref=b18, bpref=$b.5), BlockParam(bref=b18, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.1) -> $b18.$b.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.2) -> $b18.$b.2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.3) -> $b18.$b.3
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.4) -> $b18.$b.4
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.5) -> $b18.$b.5
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.5) -> $b18.$b.5
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.6) -> $b18.$b.6
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.6) -> $b18.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[BlockParam(bref=b18, bpref=$b.3), BlockParam(bref=b18, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.3) -> $b18.$b.3
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.4) -> $b18.$b.4
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%17), BlockParam(bref=b18, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.5) -> $b18.$b.5
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[BlockParam(bref=b18, bpref=$b.1), BlockParam(bref=b18, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.1) -> $b18.$b.1
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.1) -> $b18.$b.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%19), BlockParam(bref=b18, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.2) -> $b18.$b.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%20), BlockParam(bref=b18, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.6) -> $b18.$b.6
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%18), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%21), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%22), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%24), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b21, t_args=[], f=b22, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b18, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Branch(cond=Insn(iref=%15), t=b19, t_args=[], f=b20, f_args=[])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b25, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%9), Insn(iref=%12)])
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.1) -> $b18.$b.1
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.2) -> $b18.$b.2
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.3) -> $b18.$b.3
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.4) -> $b18.$b.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.5) -> $b18.$b.5
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name BlockParam(bref=b18, bpref=$b.6) -> $b18.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%6), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%7), BlockParam(bref=b7, bpref=$b.3)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%8), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%10), BlockParam(bref=b7, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%11), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b26, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b7, bpref=$b.2), BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b11, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b12, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local BlockParam(bref=b18, bpref=$b.0) -> $b18.$b.0
// [Wasm] Local BlockParam(bref=b18, bpref=$b.2) -> $b18.$b.2
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Local BlockParam(bref=b18, bpref=$b.5) -> $b18.$b.5
// [Wasm] Local BlockParam(bref=b18, bpref=$b.3) -> $b18.$b.3
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local BlockParam(bref=b18, bpref=$b.1) -> $b18.$b.1
// [Wasm] Local BlockParam(bref=b18, bpref=$b.6) -> $b18.$b.6
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b18, bpref=$b.4) -> $b18.$b.4
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function yloop.63 to wasm
// [Wasm] Lowering function mandelbrot.62
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Int32(val=0), FnParam(fref=f3, fpref=$f.0), Insn(iref=%0), Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function mandelbrot.62 to wasm
// [KnfOpt] func_tre: mandelbrot.1 false
// [KnfOpt] func_tre: dbl.3 false
// [KnfOpt] func_tre: yloop.5 true
// [KnfOpt] func_tre: xloop.7 true
// [KnfOpt] func_tre: iloop.23 true
// [KnfOpt] func_tre: main.60 false
// [KnfOpt] freq: {mandelbrot.1: Once, dbl.3: Many(3), yloop.5: Many(2), xloop.7: Many(2), iloop.23: Many(2), main.60: Once}
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Knf inline Some(dbl) let _35: Double = Unit
// [KnfOpt] let _36: Double = FMul(_35, zi.26)
// [KnfOpt] let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt] let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt] let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt] let _40: Double = Double(2)
// [KnfOpt] let _41: Double = Double(2)
// [KnfOpt] let _42: Double = FMul(_40, _41)
// [KnfOpt] let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt] if (_42 <= _43) then {
// [KnfOpt]   let _44: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt] } else {
// [KnfOpt]   let _45: Int = Int(1)
// [KnfOpt]   let _46: Int = Sub(i.24, _45)
// [KnfOpt]   Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 83
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision xloop.7 rejected
// [KnfOpt] Knf inline Some(dbl) let _18: Double = Unit
// [KnfOpt] let _19: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _20: Double = FDiv(_18, _19)
// [KnfOpt] let _21: Double = Double(1)
// [KnfOpt] let ci.22: Double = FSub(_20, _21)
// [KnfOpt] let rec iloop.23: Unit = (i.24: Int, zr.25: Double, zi.26: Double, zr2.27: Double, zi2.28: Double, cr.29: Double, ci.30: Double) {
// [KnfOpt]   let _31: Int = Int(0)
// [KnfOpt]   if (i.24 == _31) then {
// [KnfOpt]     let _32: Int = Int(1)
// [KnfOpt]     ExtApply(minimbt_print_int, [_32, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _33: Double = FSub(zr2.27, zi2.28)
// [KnfOpt]     let tr.34: Double = FAdd(_33, cr.29)
// [KnfOpt]     let _35: Double = FAdd(zr.25, zr.25)
// [KnfOpt]     let _36: Double = FMul(_35, zi.26)
// [KnfOpt]     let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt]     let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt]     let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt]     let _40: Double = Double(2)
// [KnfOpt]     let _41: Double = Double(2)
// [KnfOpt]     let _42: Double = FMul(_40, _41)
// [KnfOpt]     let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt]     if (_42 <= _43) then {
// [KnfOpt]       let _44: Int = Int(0)
// [KnfOpt]       ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _45: Int = Int(1)
// [KnfOpt]       let _46: Int = Sub(i.24, _45)
// [KnfOpt]       Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _47: Int = Int(1000)
// [KnfOpt] let _48: Double = Double(0)
// [KnfOpt] let _49: Double = Double(0)
// [KnfOpt] let _50: Double = Double(0)
// [KnfOpt] let _51: Double = Double(0)
// [KnfOpt] let _52: Unit = Apply(iloop.23, [_47, _48, _49, _50, _51, cr.16, ci.22, ])
// [KnfOpt] let _53: Int = Int(1)
// [KnfOpt] let _54: Int = Add(x.8, _53)
// [KnfOpt] Apply(xloop.7, [_54, y.9, ])
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Knf inline Some(dbl) let _35: Double = Unit
// [KnfOpt] let _36: Double = FMul(_35, zi.26)
// [KnfOpt] let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt] let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt] let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt] let _40: Double = Double(2)
// [KnfOpt] let _41: Double = Double(2)
// [KnfOpt] let _42: Double = FMul(_40, _41)
// [KnfOpt] let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt] if (_42 <= _43) then {
// [KnfOpt]   let _44: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt] } else {
// [KnfOpt]   let _45: Int = Int(1)
// [KnfOpt]   let _46: Int = Sub(i.24, _45)
// [KnfOpt]   Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 83
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision xloop.7 rejected
// [KnfOpt] Knf inline Some(dbl) let _12: Double = Unit
// [KnfOpt] let _13: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _14: Double = FDiv(_12, _13)
// [KnfOpt] let _15: Double = Double(1.5)
// [KnfOpt] let cr.16: Double = FSub(_14, _15)
// [KnfOpt] let _17: Double = ExtApply(minimbt_float_of_int, [y.9, ])
// [KnfOpt] let _18: Double = FAdd(_17, _17)
// [KnfOpt] let _19: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _20: Double = FDiv(_18, _19)
// [KnfOpt] let _21: Double = Double(1)
// [KnfOpt] let ci.22: Double = FSub(_20, _21)
// [KnfOpt] let rec iloop.23: Unit = (i.24: Int, zr.25: Double, zi.26: Double, zr2.27: Double, zi2.28: Double, cr.29: Double, ci.30: Double) {
// [KnfOpt]   let _31: Int = Int(0)
// [KnfOpt]   if (i.24 == _31) then {
// [KnfOpt]     let _32: Int = Int(1)
// [KnfOpt]     ExtApply(minimbt_print_int, [_32, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _33: Double = FSub(zr2.27, zi2.28)
// [KnfOpt]     let tr.34: Double = FAdd(_33, cr.29)
// [KnfOpt]     let _35: Double = FAdd(zr.25, zr.25)
// [KnfOpt]     let _36: Double = FMul(_35, zi.26)
// [KnfOpt]     let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt]     let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt]     let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt]     let _40: Double = Double(2)
// [KnfOpt]     let _41: Double = Double(2)
// [KnfOpt]     let _42: Double = FMul(_40, _41)
// [KnfOpt]     let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt]     if (_42 <= _43) then {
// [KnfOpt]       let _44: Int = Int(0)
// [KnfOpt]       ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _45: Int = Int(1)
// [KnfOpt]       let _46: Int = Sub(i.24, _45)
// [KnfOpt]       Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _47: Int = Int(1000)
// [KnfOpt] let _48: Double = Double(0)
// [KnfOpt] let _49: Double = Double(0)
// [KnfOpt] let _50: Double = Double(0)
// [KnfOpt] let _51: Double = Double(0)
// [KnfOpt] let _52: Unit = Apply(iloop.23, [_47, _48, _49, _50, _51, cr.16, ci.22, ])
// [KnfOpt] let _53: Int = Int(1)
// [KnfOpt] let _54: Int = Add(x.8, _53)
// [KnfOpt] Apply(xloop.7, [_54, y.9, ])
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Knf inline Some(dbl) let _35: Double = Unit
// [KnfOpt] let _36: Double = FMul(_35, zi.26)
// [KnfOpt] let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt] let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt] let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt] let _40: Double = Double(2)
// [KnfOpt] let _41: Double = Double(2)
// [KnfOpt] let _42: Double = FMul(_40, _41)
// [KnfOpt] let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt] if (_42 <= _43) then {
// [KnfOpt]   let _44: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt] } else {
// [KnfOpt]   let _45: Int = Int(1)
// [KnfOpt]   let _46: Int = Sub(i.24, _45)
// [KnfOpt]   Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 83
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision xloop.7 rejected
// [KnfOpt] Knf inline Some(dbl) let _18: Double = Unit
// [KnfOpt] let _19: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _20: Double = FDiv(_18, _19)
// [KnfOpt] let _21: Double = Double(1)
// [KnfOpt] let ci.22: Double = FSub(_20, _21)
// [KnfOpt] let rec iloop.23: Unit = (i.24: Int, zr.25: Double, zi.26: Double, zr2.27: Double, zi2.28: Double, cr.29: Double, ci.30: Double) {
// [KnfOpt]   let _31: Int = Int(0)
// [KnfOpt]   if (i.24 == _31) then {
// [KnfOpt]     let _32: Int = Int(1)
// [KnfOpt]     ExtApply(minimbt_print_int, [_32, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _33: Double = FSub(zr2.27, zi2.28)
// [KnfOpt]     let tr.34: Double = FAdd(_33, cr.29)
// [KnfOpt]     let _35: Double = FAdd(zr.25, zr.25)
// [KnfOpt]     let _36: Double = FMul(_35, zi.26)
// [KnfOpt]     let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt]     let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt]     let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt]     let _40: Double = Double(2)
// [KnfOpt]     let _41: Double = Double(2)
// [KnfOpt]     let _42: Double = FMul(_40, _41)
// [KnfOpt]     let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt]     if (_42 <= _43) then {
// [KnfOpt]       let _44: Int = Int(0)
// [KnfOpt]       ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _45: Int = Int(1)
// [KnfOpt]       let _46: Int = Sub(i.24, _45)
// [KnfOpt]       Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] let _47: Int = Int(1000)
// [KnfOpt] let _48: Double = Double(0)
// [KnfOpt] let _49: Double = Double(0)
// [KnfOpt] let _50: Double = Double(0)
// [KnfOpt] let _51: Double = Double(0)
// [KnfOpt] let _52: Unit = Apply(iloop.23, [_47, _48, _49, _50, _51, cr.16, ci.22, ])
// [KnfOpt] let _53: Int = Int(1)
// [KnfOpt] let _54: Int = Add(x.8, _53)
// [KnfOpt] Apply(xloop.7, [_54, y.9, ])
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Knf inline Some(dbl) let _35: Double = Unit
// [KnfOpt] let _36: Double = FMul(_35, zi.26)
// [KnfOpt] let ti.37: Double = FAdd(_36, ci.30)
// [KnfOpt] let zr2.38: Double = FMul(tr.34, tr.34)
// [KnfOpt] let zi2.39: Double = FMul(ti.37, ti.37)
// [KnfOpt] let _40: Double = Double(2)
// [KnfOpt] let _41: Double = Double(2)
// [KnfOpt] let _42: Double = FMul(_40, _41)
// [KnfOpt] let _43: Double = FAdd(zr2.38, zi2.39)
// [KnfOpt] if (_42 <= _43) then {
// [KnfOpt]   let _44: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_44, ])
// [KnfOpt] } else {
// [KnfOpt]   let _45: Int = Int(1)
// [KnfOpt]   let _46: Int = Sub(i.24, _45)
// [KnfOpt]   Apply(iloop.23, [_46, tr.34, ti.37, zr2.38, zi2.39, cr.29, ci.30, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 37
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision iloop.23 rejected
// [KnfOpt] Inline threshold 83
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision xloop.7 rejected
// [KnfOpt] Inline threshold 83
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision xloop.7 rejected
// [KnfOpt] Inline threshold 95
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision yloop.5 rejected
// [KnfOpt] Inline threshold 95
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision yloop.5 rejected
// [KnfOpt] Inline threshold 101
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision mandelbrot.1 rejected
// [KnfOpt] Numbers of let rec: 5 5 0
// [KnfOpt] hoist: _13
// [KnfOpt] hoist: _17
// [KnfOpt] hoist: _19
// [KnfOpt] hoist: _70
// [KnfOpt] hoist: _72
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %11: Call(ty=Unit, f=f1, args=[Insn(iref=%10), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f2, args=[Insn(iref=%3), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f0, args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%9) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%9) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%9) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%9) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%9) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] xloop.64 is inlining Call(ty=Unit, f=f0, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%5), Insn(iref=%8)])
// [CoreOpt] shifted callee .fn iloop.65 #f0 : fn(int32, double, double, double, double, double, double) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b19 {
// [CoreOpt]   .bb #b11 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %11: bool = eq($b11.0, 0)
// [CoreOpt]     br %11 b12() b13()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     let %12: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b17(%12)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 () {
// [CoreOpt]     let %13: double = sub($b11.3, $b11.4)
// [CoreOpt]     let %14: double = add(%13, $b11.5)
// [CoreOpt]     let %15: double = add($b11.1, $b11.1)
// [CoreOpt]     let %16: double = mul(%15, $b11.2)
// [CoreOpt]     let %17: double = add(%16, $b11.6)
// [CoreOpt]     let %18: double = mul(%14, %14)
// [CoreOpt]     let %19: double = mul(%17, %17)
// [CoreOpt]     let %20: double = mul(2, 2)
// [CoreOpt]     let %21: double = add(%18, %19)
// [CoreOpt]     let %22: bool = le(%20, %21)
// [CoreOpt]     br %22 b14() b15()
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     let %23: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b16(%23)
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %24: int32 = sub($b11.0, 1)
// [CoreOpt]     jump b11(%24, %14, %17, %18, %19, $b11.5, $b11.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (unit) {
// [CoreOpt]     jump b17($b16.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (unit) {
// [CoreOpt]     return $b17.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b18 pre #Some(b19) header #b11 {
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b12
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b13
// [CoreOpt]     .block #b14
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b18($f0, $f1, $f2, $f3, $f4, $f5, $f6)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] yloop.63 is inlining Call(ty=Unit, f=f1, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3)])
// [CoreOpt] shifted callee .fn xloop.64 #f1 : fn(int32, int32, int32, double, double, double) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, double, double, double) {
// [CoreOpt]     let %4: bool = le($b7.2, $b7.0)
// [CoreOpt]     br %4 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %5: unit = ext_call minimbt_print_endline()
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %6: double = conv.i2d($b7.0)
// [CoreOpt]     let %7: double = add(%6, %6)
// [CoreOpt]     let %8: double = div(%7, $b7.3)
// [CoreOpt]     let %9: double = sub(%8, 1.5)
// [CoreOpt]     let %10: double = add($b7.4, $b7.4)
// [CoreOpt]     let %11: double = div(%10, $b7.5)
// [CoreOpt]     let %12: double = sub(%11, 1)
// [CoreOpt]     jump b26()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %14: int32 = add($b7.0, 1)
// [CoreOpt]     jump b7(%14, $b7.1, $b7.2, $b7.3, $b7.4, $b7.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %15: bool = eq($b18.0, 0)
// [CoreOpt]     br %15 b19() b20()
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     let %16: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b24(%16)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %17: double = sub($b18.3, $b18.4)
// [CoreOpt]     let %18: double = add(%17, $b18.5)
// [CoreOpt]     let %19: double = add($b18.1, $b18.1)
// [CoreOpt]     let %20: double = mul(%19, $b18.2)
// [CoreOpt]     let %21: double = add(%20, $b18.6)
// [CoreOpt]     let %22: double = mul(%18, %18)
// [CoreOpt]     let %23: double = mul(%21, %21)
// [CoreOpt]     let %24: double = mul(2, 2)
// [CoreOpt]     let %25: double = add(%22, %23)
// [CoreOpt]     let %26: bool = le(%24, %25)
// [CoreOpt]     br %26 b21() b22()
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     let %27: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b23(%27)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     let %28: int32 = sub($b18.0, 1)
// [CoreOpt]     jump b18(%28, %18, %21, %22, %23, $b18.5, $b18.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 (unit) {
// [CoreOpt]     jump b24($b23.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 (unit) {
// [CoreOpt]     jump b13($b24.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b25 pre #Some(b26) header #b18 {
// [CoreOpt]     .block #b24
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b21
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     jump b25(1000, 0, 0, 0, 0, %9, %12)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
// [CoreOpt] LVN subst Insn(iref=%1) with Insn(iref=%0)
