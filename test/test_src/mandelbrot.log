// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.711 ->   call main.711
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v5, Insn(iref=%15) -> v38, Insn(iref=%8) -> fv14, Insn(iref=%10) -> fv15, Insn(iref=%27) -> v35, BlockParam(bref=b16, bpref=$b.6) -> fv23, Insn(iref=%14) -> v24, Insn(iref=%25) -> v34, BlockParam(bref=b16, bpref=$b.1) -> fv18, Insn(iref=%4) -> fv10, BlockParam(bref=b6, bpref=$b.0) -> v40, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v42, Insn(iref=%26) -> v36, Insn(iref=%11) -> fv16, Insn(iref=%6) -> fv12, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b16, bpref=$b.3) -> fv20, BlockParam(bref=b22, bpref=$b.0) -> v39, BlockParam(bref=b16, bpref=$b.0) -> v17, BlockParam(bref=b16, bpref=$b.4) -> fv21, Insn(iref=%16) -> fv25, Insn(iref=%24) -> fv33, Self(fref=f2) -> v0, BlockParam(bref=b2, bpref=$b.1) -> v6, BlockParam(bref=b16, bpref=$b.2) -> fv19, Insn(iref=%5) -> fv11, Insn(iref=%0) -> v7, Insn(iref=%19) -> fv28, Insn(iref=%3) -> fv9, Insn(iref=%18) -> fv27, Insn(iref=%13) -> v41, Insn(iref=%7) -> fv13, BlockParam(bref=b5, bpref=$b.0) -> v43, Insn(iref=%22) -> fv31, Insn(iref=%17) -> fv26, Insn(iref=%23) -> fv32, Insn(iref=%2) -> fv8, Insn(iref=%20) -> fv29, BlockParam(bref=b16, bpref=$b.5) -> fv22, BlockParam(bref=b21, bpref=$b.0) -> v37, Insn(iref=%21) -> fv30
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%18), BlockParam(bref=b16, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b16, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.2), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defs: [fv8]
// [Asm] live_set: [v5, zero, fv8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, fv8, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, zero, fa0, v4, v6]
// [Asm] move_origin: [fv8]
// [Asm] defined: fa0 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, fa0, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, v5, zero, v4, v6]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv9 is F
// [Asm] defs: []
// [Asm] live_set: [fv9, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv10, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv10, v5, zero, fv11, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [v69]
// [Asm] live_set: [fv10, v5, v69, zero, fv11, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [fv70]
// [Asm] live_set: [fv10, fv70, v5, zero, fv11, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv70 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv10, v5, zero, fv12, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv10, v5, zero, fv13, fv12, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, v5, zero, fv13, fv12, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv10, v5, zero, fa0, fv12, v4, v6]
// [Asm] move_origin: [fv13]
// [Asm] defined: fa0 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv10, v5, zero, fa0, fv12, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv10, v5, zero, fv12, v4, v6, fv14]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, v5, zero, fv12, v4, v6, fv14]
// [Asm] move_origin: []
// [Asm] defs: [fv15]
// [Asm] live_set: [v5, zero, fv12, v4, v6, fv15]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v5, zero, fv12, v4, v6, fv15]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [fv64]
// [Asm] live_set: [v5, zero, fv64, fv12, v4, v6, fv15]
// [Asm] move_origin: []
// [Asm] defined: fv64 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [fv12, v4, v5, v6, fv16, zero]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v43]
// [Asm] move_origin: [zero]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v35]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, v35, fv29, v4, v6, fv26]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v17]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26]
// [Asm] move_origin: [v35]
// [Asm] defined: v17 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv18]
// [Asm] move_origin: [fv26]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv19, v4, v17, v6, fv18]
// [Asm] move_origin: [fv29]
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv20, fv19, v4, v17, v6, fv18]
// [Asm] move_origin: [fv30]
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] move_origin: [fv31]
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] move_origin: [fv22]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] move_origin: [fv23]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defs: [fv25]
// [Asm] live_set: [fv22, fv23, v5, zero, fv25, fv19, v4, v6, v17, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv18, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv18, fv26]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv22, fv23, v5, zero, fa0, fv19, v4, v6, v17, fv26]
// [Asm] move_origin: [fv18]
// [Asm] defined: fa0 is F
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv22, fv23, v5, zero, fa0, fv19, v4, v6, v17, fv26]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv27, fv26]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv27 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv27, fv26]
// [Asm] move_origin: []
// [Asm] defs: [fv29]
// [Asm] live_set: [fv22, fv23, v5, zero, fv29, v4, v6, v17, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [fv22, fv23, v5, zero, fv30, fv29, v4, v6, v17, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v6, v17, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [v52]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v6, v17, v52, fv26]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [fv53]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v6, v17, fv53, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv53 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [fv22, fv23, v5, fv32, fv31, zero, fv30, fv29, v4, v6, v17, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [fv22, fv23, v5, fv32, fv31, zero, fv30, fv33, fv29, v4, v6, v17, fv26]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v4, v5, v6, zero, v39]
// [Asm] move_origin: [v37]
// [Asm] defined: v39 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v4, v41, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v41]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: [v6]
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v4, v5, v6, zero, v40]
// [Asm] move_origin: [v39]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v6, v5, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v6, v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v4, v6, v5, zero, v36]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v36]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v4, v6, v5, zero]
// [Asm] move_origin: [v36]
// [Asm] defined: v37 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v43]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v4, v6, v5, v46, zero]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v6, v5, zero, a0]
// [Asm] move_origin: [v46]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v6, v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v4, v38, v6, v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v38, v6, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v4, v5, v6, zero, v39]
// [Asm] move_origin: [v38]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v5, zero, v4, fv12, v6, v61, fv16]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, fv12, v6, v17, fv16]
// [Asm] move_origin: [v61]
// [Asm] defined: v17 is X
// [Asm] defs: [fv62]
// [Asm] live_set: [v5, fv62, zero, v4, fv12, v6, v17, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv62 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [v5, fv62, zero, v4, fv12, v6, v17, fv16, fv18]
// [Asm] move_origin: [fv62]
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v5, fv62, zero, fv19, v4, fv12, v6, v17, fv16, fv18]
// [Asm] move_origin: [fv62]
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v5, fv62, zero, fv20, fv19, v4, fv12, v6, v17, fv16, fv18]
// [Asm] move_origin: [fv62]
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v5, zero, fv20, fv19, v4, fv12, v6, v17, fv16, fv18, fv21]
// [Asm] move_origin: [fv62]
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv16, fv21]
// [Asm] move_origin: [fv12]
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] move_origin: [fv16]
// [Asm] defined: fv23 is F
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of xloop.713"];
// [Asm]   r0 [label="v5 ← s0", color=green];
// [Asm]   r33 [label="v38 ← a0", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r26 [label="v34 ← a0", color=green];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v40 ← a0", color=green];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v17 ← s3", color=green];
// [Asm]   r32 [label="v46 ← a0", color=green];
// [Asm]   r31 [label="v37 ← a0", color=green];
// [Asm]   r17 [label="v69 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r20 [label="v43 ← a0", color=green];
// [Asm]   r23 [label="v35 ← a0", color=green];
// [Asm]   r3 [label="v6 ← s2", color=green];
// [Asm]   r27 [label="v39 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v41 ← a0", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r34 [label="v61 ← a0", color=green];
// [Asm]   r22 [label="v3 ← a1", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r30 [label="v36 ← a0", color=green];
// [Asm]   r25 [label="v52 ← a0", color=green];
// [Asm]   r2 [label="v4 ← s1", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v63 ← a0", color=green];
// [Asm]   r19 [label="v42 ← a0", color=green];
// [Asm]   r21 [label="v2 ← a0", color=green];
// [Asm]   r6 -- r21;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r32;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r16;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r16 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r0 -- r18;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r0 -- r34;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r14;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r28;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r0 -- r31;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r0 -- r33;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r0 -- r12;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r30;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r10 -- r24;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v5-> 1:zero-> 2:v4-> 3:v6-> 4:a0-> 5:a1-> 24:v17-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 25:v52-> 26:v34-> 17:v69-> 18:v63-> 21:v2-> 22:v3-> 23:v35-> 27:v39-> 29:v40-> 30:v36-> 31:v37-> 32:v46-> 33:v38-> 34:v61-> 28:v41-> 19:v42-> 20:v43"
// [Asm]   comment = "v5<-s0;v38<-a0;v34<-a0;v40<-a0;v17<-s3;v46<-a0;v37<-a0;v69<-a0;v43<-a0;v35<-a0;v6<-s2;v39<-a0;v41<-a0;v61<-a0;v3<-a1;v36<-a0;v52<-a0;v4<-s1;v63<-a0;v42<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of xloop.713"];
// [Asm]   r0 [label="fv8 ← fa0", color=green];
// [Asm]   r38 [label="fv20 ← fa2", color=green];
// [Asm]   r33 [label="fv30 ← fa2", color=green];
// [Asm]   r9 [label="ft7", color=blue];
// [Asm]   r26 [label="fv14 ← fa0", color=green];
// [Asm]   r6 [label="ft4", color=blue];
// [Asm]   r44 [label="fv33 ← fa4", color=green];
// [Asm]   r13 [label="fa1", color=blue];
// [Asm]   r42 [label="fv53 ← fa0", color=green];
// [Asm]   r4 [label="ft2", color=blue];
// [Asm]   r29 [label="fv16 ← fa3", color=green];
// [Asm]   r35 [label="fv26 ← fs3", color=green];
// [Asm]   r7 [label="ft5", color=blue];
// [Asm]   r10 [label="ft8", color=blue];
// [Asm]   r8 [label="ft6", color=blue];
// [Asm]   r5 [label="ft3", color=blue];
// [Asm]   r36 [label="fv18 ← fa0", color=green];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r32 [label="fv31 ← fa1", color=green];
// [Asm]   r24 [label="fv12 ← fs1", color=green];
// [Asm]   r43 [label="fv32 ← fa0", color=green];
// [Asm]   r31 [label="fv23 ← fs2", color=green];
// [Asm]   r39 [label="fv21 ← fa1", color=green];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r12 [label="ft10", color=blue];
// [Asm]   r37 [label="fv19 ← fs0", color=green];
// [Asm]   r20 [label="fv9 ← fa0", color=green];
// [Asm]   r23 [label="fv70 ← fa1", color=green];
// [Asm]   r3 [label="ft1", color=blue];
// [Asm]   r27 [label="fv15 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   r40 [label="fv25 ← fa1", color=green];
// [Asm]   r28 [label="fv64 ← fa1", color=green];
// [Asm]   r41 [label="fv27 ← fa0", color=green];
// [Asm]   r11 [label="ft9", color=blue];
// [Asm]   r34 [label="fv29 ← fa3", color=green];
// [Asm]   r22 [label="fv11 ← fa0", color=green];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r30 [label="fv22 ← fs1", color=green];
// [Asm]   r45 [label="fv62 ← fa0", color=green];
// [Asm]   r25 [label="fv13 ← fa0", color=green];
// [Asm]   r2 [label="ft0", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r21 [label="fv10 ← fs0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r8 -- r31;
// [Asm]   r37 -- r39;
// [Asm]   r2 -- r31;
// [Asm]   r32 -- r36;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r35;
// [Asm]   r11 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r15 -- r31;
// [Asm]   r17 -- r35;
// [Asm]   r35 -- r42;
// [Asm]   r13 -- r31;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r37;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r37;
// [Asm]   r1 -- r16;
// [Asm]   r18 -- r35;
// [Asm]   r3 -- r31;
// [Asm]   r30 -- r34;
// [Asm]   r34 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r4 -- r31;
// [Asm]   r31 -- r35;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r33 -- r42;
// [Asm]   r1 -- r9;
// [Asm]   r32 -- r35;
// [Asm]   r24 -- r45;
// [Asm]   r5 -- r35;
// [Asm]   r32 -- r44;
// [Asm]   r13 -- r30;
// [Asm]   r16 -- r37;
// [Asm]   r10 -- r31;
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r11;
// [Asm]   r15 -- r37;
// [Asm]   r35 -- r37;
// [Asm]   r32 -- r34;
// [Asm]   r18 -- r37;
// [Asm]   r13 -- r35;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r17 -- r31;
// [Asm]   r1 -- r35;
// [Asm]   r16 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r14 -- r37;
// [Asm]   r15 -- r30;
// [Asm]   r8 -- r30;
// [Asm]   r18 -- r24;
// [Asm]   r16 -- r30;
// [Asm]   r36 -- r40;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r8;
// [Asm]   r30 -- r35;
// [Asm]   r19 -- r30;
// [Asm]   r7 -- r24;
// [Asm]   r32 -- r43;
// [Asm]   r29 -- r30;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r30;
// [Asm]   r15 -- r35;
// [Asm]   r33 -- r36;
// [Asm]   r31 -- r41;
// [Asm]   r17 -- r24;
// [Asm]   r1 -- r13;
// [Asm]   r9 -- r30;
// [Asm]   r33 -- r35;
// [Asm]   r31 -- r42;
// [Asm]   r24 -- r29;
// [Asm]   r24 -- r28;
// [Asm]   r19 -- r37;
// [Asm]   r35 -- r41;
// [Asm]   r11 -- r37;
// [Asm]   r24 -- r26;
// [Asm]   r21 -- r23;
// [Asm]   r14 -- r35;
// [Asm]   r30 -- r43;
// [Asm]   r31 -- r40;
// [Asm]   r35 -- r43;
// [Asm]   r31 -- r37;
// [Asm]   r32 -- r33;
// [Asm]   r29 -- r45;
// [Asm]   r3 -- r21;
// [Asm]   r31 -- r44;
// [Asm]   r14 -- r21;
// [Asm]   r16 -- r35;
// [Asm]   r9 -- r24;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r35;
// [Asm]   r15 -- r24;
// [Asm]   r2 -- r30;
// [Asm]   r31 -- r33;
// [Asm]   r2 -- r35;
// [Asm]   r30 -- r41;
// [Asm]   r43 -- r44;
// [Asm]   r20 -- r21;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r36 -- r38;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r35;
// [Asm]   r24 -- r39;
// [Asm]   r33 -- r43;
// [Asm]   r30 -- r42;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r37;
// [Asm]   r30 -- r38;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r34 -- r43;
// [Asm]   r30 -- r40;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r11 -- r31;
// [Asm]   r31 -- r36;
// [Asm]   r19 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r29 -- r36;
// [Asm]   r31 -- r39;
// [Asm]   r4 -- r35;
// [Asm]   r37 -- r40;
// [Asm]   r13 -- r37;
// [Asm]   r14 -- r30;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r29 -- r38;
// [Asm]   r12 -- r24;
// [Asm]   r10 -- r37;
// [Asm]   r3 -- r30;
// [Asm]   r35 -- r44;
// [Asm]   r1 -- r21;
// [Asm]   r8 -- r37;
// [Asm]   r24 -- r36;
// [Asm]   r18 -- r30;
// [Asm]   r24 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r30 -- r39;
// [Asm]   r10 -- r30;
// [Asm]   r8 -- r21;
// [Asm]   r14 -- r31;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r31 -- r34;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r10 -- r35;
// [Asm]   r11 -- r30;
// [Asm]   r24 -- r37;
// [Asm]   r30 -- r33;
// [Asm]   r36 -- r37;
// [Asm]   r35 -- r36;
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r4 -- r24;
// [Asm]   r32 -- r37;
// [Asm]   r9 -- r35;
// [Asm]   r34 -- r44;
// [Asm]   r4 -- r37;
// [Asm]   r30 -- r44;
// [Asm]   r36 -- r39;
// [Asm]   r1 -- r15;
// [Asm]   r31 -- r38;
// [Asm]   r19 -- r24;
// [Asm]   r7 -- r30;
// [Asm]   r19 -- r35;
// [Asm]   r4 -- r30;
// [Asm]   r14 -- r24;
// [Asm]   r30 -- r37;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r38;
// [Asm]   r17 -- r37;
// [Asm]   r32 -- r38;
// [Asm]   r32 -- r42;
// [Asm]   r33 -- r34;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r5 -- r24;
// [Asm]   r15 -- r21;
// [Asm]   r12 -- r31;
// [Asm]   r5 -- r37;
// [Asm]   r29 -- r37;
// [Asm]   r21 -- r25;
// [Asm]   r34 -- r36;
// [Asm]   r22 -- r23;
// [Asm]   r9 -- r37;
// [Asm]   r29 -- r39;
// [Asm]   r2 -- r21;
// [Asm]   r21 -- r26;
// [Asm]   r30 -- r36;
// [Asm]   r12 -- r30;
// [Asm]   r12 -- r37;
// [Asm]   r7 -- r31;
// [Asm]   r31 -- r32;
// [Asm]   r33 -- r44;
// [Asm]   r38 -- r39;
// [Asm]   r17 -- r30;
// [Asm]   r31 -- r43;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r30;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r37 -- r41;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:fv8-> 1:fa0-> 2:ft0-> 21:fv10-> 24:fv12-> 3:ft1-> 37:fv19-> 4:ft2-> 30:fv22-> 31:fv23-> 35:fv26-> 5:ft3-> 6:ft4-> 7:ft5-> 8:ft6-> 9:ft7-> 10:ft8-> 11:ft9-> 12:ft10-> 13:fa1-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 18:fa6-> 19:fa7-> 36:fv18-> 32:fv31-> 33:fv30-> 34:fv29-> 38:fv20-> 39:fv21-> 29:fv16-> 42:fv53-> 43:fv32-> 44:fv33-> 40:fv25-> 41:fv27-> 25:fv13-> 26:fv14-> 45:fv62-> 20:fv9-> 22:fv11-> 23:fv70-> 27:fv15-> 28:fv64"
// [Asm]   comment = "fv8<-fa0;fv20<-fa2;fv30<-fa2;fv14<-fa0;fv33<-fa4;fv53<-fa0;fv16<-fa3;fv26<-fs3;fv18<-fa0;fv31<-fa1;fv12<-fs1;fv32<-fa0;fv23<-fs2;fv21<-fa1;fv19<-fs0;fv9<-fa0;fv70<-fa1;fv15<-fa0;fv25<-fa1;fv64<-fa1;fv27<-fa0;fv29<-fa3;fv11<-fa0;fv22<-fs1;fv62<-fa0;fv13<-fa0;fv10<-fs0;"
// [Asm] }
// [Asm] 
// [Asm] subst   beq v17, zero, .xloop.713_17 ->   beq s3, zero, .xloop.713_17
// [Asm] subst   fcvt.d.w fv8, v5 ->   fcvt.d.w fa0, s0
// [Asm] subst   call dbl.712 ->   call dbl.712
// [Asm] subst   fcvt.d.w fv10, v4 ->   fcvt.d.w fs0, s1
// [Asm] subst   fdiv.d fv11, fv9, fv10 ->   fdiv.d fa0, fa0, fs0
// [Asm] subst   li v69, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv70, v69 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv12, fv11, fv70 ->   fsub.d fs1, fa0, fa1
// [Asm] subst   fcvt.d.w fv13, v6 ->   fcvt.d.w fa0, s2
// [Asm] subst   call dbl.712 ->   call dbl.712
// [Asm] subst   fdiv.d fv15, fv14, fv10 ->   fdiv.d fa0, fa0, fs0
// [Asm] subst   li v63, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv64, v63 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv16, fv15, fv64 ->   fsub.d fa3, fa0, fa1
// [Asm] subst   bge v5, v4, .xloop.713_3 ->   bge s0, s1, .xloop.713_3
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   mv v43, zero ->   mv a0, zero
// [Asm] subst   mv v4, a2 ->   mv s1, a2
// [Asm] subst   mv v5, v2 ->   mv s0, a0
// [Asm] subst   mv v6, v3 ->   mv s2, a1
// [Asm] subst   addi v35, v17, -1 ->   addi a0, s3, -1
// [Asm] subst   mv v17, v35 ->   mv s3, a0
// [Asm] subst   fmv.d fv18, fv26 ->   fmv.d fa0, fs3
// [Asm] subst   fmv.d fv19, fv29 ->   fmv.d fs0, fa3
// [Asm] subst   j .xloop.713_16 ->   j .xloop.713_16
// [Asm] subst   fsub.d fv25, fv20, fv21 ->   fsub.d fa1, fa2, fa1
// [Asm] subst   fadd.d fv26, fv25, fv22 ->   fadd.d fs3, fa1, fs1
// [Asm] subst   call dbl.712 ->   call dbl.712
// [Asm] subst   fmadd.d fv29, fv27, fv19, fv23 ->   fmadd.d fa3, fa0, fs0, fs2
// [Asm] subst   fmul.d fv30, fv26, fv26 ->   fmul.d fa2, fs3, fs3
// [Asm] subst   fmul.d fv31, fv29, fv29 ->   fmul.d fa1, fa3, fa3
// [Asm] subst   li v52, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv53, v52 ->   fmv.d.x fa0, a0
// [Asm] subst   fmul.d fv32, fv53, fv53 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   fadd.d fv33, fv30, fv31 ->   fadd.d fa4, fa2, fa1
// [Asm] subst   fle.d v34, fv32, fv33 ->   fle.d a0, fa0, fa4
// [Asm] subst   beq v34, zero, .xloop.713_20 ->   beq a0, zero, .xloop.713_20
// [Asm] subst   addi v41, v5, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v5, v41 ->   mv s0, a0
// [Asm] subst   j .xloop.713_2 ->   j .xloop.713_2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   li v46, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .xloop.713_22 ->   j .xloop.713_22
// [Asm] subst   li v61, 1000 ->   li a0, 1000
// [Asm] subst   mv v17, v61 ->   mv s3, a0
// [Asm] subst   fmv.d.x fv62, zero ->   fmv.d.x fa0, zero
// [Asm] subst   fmv.d fv19, fv62 ->   fmv.d fs0, fa0
// [Asm] subst   fmv.d fv20, fv62 ->   fmv.d fa2, fa0
// [Asm] subst   fmv.d fv21, fv62 ->   fmv.d fa1, fa0
// [Asm] subst   fmv.d fv23, fv16 ->   fmv.d fs2, fa3
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, BlockParam(bref=b2, bpref=$b.0) -> v2, BlockParam(bref=b5, bpref=$b.0) -> v6, Self(fref=f3) -> v0, Insn(iref=%0) -> v3
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=40), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [zero]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v2 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, a1, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, zero, a0, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.711"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v10 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="v8 ← a2", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v2 ← s0", color=green];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v4 ← a0", color=green];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r1 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   comment = "0:v6-> 1:v2-> 2:zero-> 3:v10-> 4:a0-> 5:a1-> 6:v8-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:v4-> 19:v5"
// [Asm]   comment = "v6<-a0;v10<-a0;v8<-a2;v2<-s0;v4<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.711"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v6, zero ->   mv a0, zero
// [Asm] subst   mv v2, zero ->   mv s0, zero
// [Asm] subst   li v10, 40 ->   li a0, 40
// [Asm] subst   bge v2, v10, .main.711_3 ->   bge s0, a0, .main.711_3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   li v8, 40 ->   li a2, 40
// [Asm] subst   call xloop.713 ->   call xloop.713
// [Asm] subst   addi v5, v2, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v2, v5 ->   mv s0, a0
// [Asm] subst   j .main.711_2 ->   j .main.711_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> fv2, Insn(iref=%0) -> fv3
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dbl.712"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dbl.712"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fadd.d fv3, fv2, fv2 ->   fadd.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.711:
// [Asm] # block info: defs: [v2], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.711_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm] # control
// [Asm]   mv v2, zero  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v10, v2], upward_exposed: [v2], params_defs: [v2]
// [Asm] # live_in: [zero, v2], live_out: [zero, v2]
// [Asm] # block parameters: [v2]
// [Asm] .main.711_2:
// [Asm] # control
// [Asm]   li v10, 40  # live: [v10, zero, v2]
// [Asm]   bge v2, v10, .main.711_3  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v5, zero, a0, v8, a2, a1, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .main.711_4:
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0, v2]
// [Asm]   li v8, 40  # live: [v8, a1, zero, a0, v2]
// [Asm]   mv a2, v8  # live: [a2, a1, zero, a0, v2]
// [Asm]   call xloop.713  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm]   addi v5, v2, 1  # live: [v5, zero]
// [Asm] # control
// [Asm]   mv v2, v5  # live: [zero, v2]
// [Asm]   j .main.711_2  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .main.711_3:
// [Asm] # control
// [Asm]   mv v6, zero  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .main.711_5:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.711  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] xloop.713:
// [Asm] # block info: defs: [v3, v4, v5, v6, v2], uses: [v3, a2, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [v4, v5, v6, zero]
// [Asm] # block parameters: []
// [Asm] .xloop.713_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, zero, v3]
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v4, v5, zero, v3]
// [Asm]   mv v6, v3  # live: [v4, v5, v6, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v5], upward_exposed: [v4, v5], params_defs: [v5, v6]
// [Asm] # live_in: [v4, v5, v6, zero], live_out: [v4, v5, v6, zero]
// [Asm] # block parameters: [v5, v6]
// [Asm] .xloop.713_2:
// [Asm] # control
// [Asm]   bge v5, v4, .xloop.713_3  # live: [v4, v5, v6, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, fv10, v69, fv64, ft0, ft1, fv12, a1, fv14, fv15, fv16, fa1, fv70, v63, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, fv8, ft2, a2, a3, ft8, a7, t3, fa7, fv9, t0, fa5, fa3, fv11, ft3, fa0, fv13, t4, t2], uses: [fv10, v5, v69, fv64, fv8, fv14, fv15, fv9, fv70, v63, fv11, fa0, fv13, v4, v6], upward_exposed: [v4, v5, v6], params_defs: []
// [Asm] # live_in: [v4, v5, v6, zero], live_out: [v5, zero, fv12, v4, v6, fv16]
// [Asm] # block parameters: []
// [Asm] .xloop.713_4:
// [Asm]   fcvt.d.w fv8, v5  # live: [v5, zero, fv8, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, fv8, v4, v6]
// [Asm]   fmv.d fa0, fv8  # live: [v5, zero, fa0, v4, v6]
// [Asm]   call dbl.712  # live: [v5, zero, fa0, v4, v6]
// [Asm]   fmv.d fv9, fa0  # live: [fv9, v5, zero, v4, v6]
// [Asm]   # restore_ctx2  # live: [fv9, v5, zero, v4, v6]
// [Asm]   fcvt.d.w fv10, v4  # live: [fv9, fv10, v5, zero, v4, v6]
// [Asm]   fdiv.d fv11, fv9, fv10  # live: [fv10, v5, zero, fv11, v4, v6]
// [Asm]   li v69, 4609434218613702656  # live: [fv10, v5, v69, zero, fv11, v4, v6]
// [Asm]   fmv.d.x fv70, v69  # live: [fv10, fv70, v5, zero, fv11, v4, v6]
// [Asm]   fsub.d fv12, fv11, fv70  # live: [fv10, v5, zero, fv12, v4, v6]
// [Asm]   fcvt.d.w fv13, v6  # live: [fv10, v5, zero, fv13, fv12, v4, v6]
// [Asm]   # save_ctx2  # live: [fv10, v5, zero, fv13, fv12, v4, v6]
// [Asm]   fmv.d fa0, fv13  # live: [fv10, v5, zero, fa0, fv12, v4, v6]
// [Asm]   call dbl.712  # live: [fv10, v5, zero, fa0, fv12, v4, v6]
// [Asm]   fmv.d fv14, fa0  # live: [fv10, v5, zero, fv12, v4, v6, fv14]
// [Asm]   # restore_ctx2  # live: [fv10, v5, zero, fv12, v4, v6, fv14]
// [Asm]   fdiv.d fv15, fv14, fv10  # live: [v5, zero, fv12, v4, v6, fv15]
// [Asm]   li v63, 4607182418800017408  # live: [v63, v5, zero, fv12, v4, v6, fv15]
// [Asm]   fmv.d.x fv64, v63  # live: [v5, zero, fv64, fv12, v4, v6, fv15]
// [Asm]   fsub.d fv16, fv15, fv64  # live: [fv12, v4, v5, v6, fv16, zero]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [fv22, fv23, fv62, fv20, fv19, v17, v61, fv18, fv21], uses: [fv12, v61, fv62, fv16, zero], upward_exposed: [fv12, fv16, zero], params_defs: []
// [Asm] # live_in: [v5, zero, fv12, v4, v6, fv16], live_out: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .xloop.713_14:
// [Asm] # control
// [Asm]   li v61, 1000  # live: [v5, zero, v4, fv12, v6, v61, fv16]
// [Asm]   mv v17, v61  # live: [v5, zero, v4, fv12, v6, v17, fv16]
// [Asm]   fmv.d.x fv62, zero  # live: [v5, fv62, zero, v4, fv12, v6, v17, fv16]
// [Asm]   fmv.d fv18, fv62  # live: [v5, fv62, zero, v4, fv12, v6, v17, fv16, fv18]
// [Asm]   fmv.d fv19, fv62  # live: [v5, fv62, zero, fv19, v4, fv12, v6, v17, fv16, fv18]
// [Asm]   fmv.d fv20, fv62  # live: [v5, fv62, zero, fv20, fv19, v4, fv12, v6, v17, fv16, fv18]
// [Asm]   fmv.d fv21, fv62  # live: [v5, zero, fv20, fv19, v4, fv12, v6, v17, fv16, fv18, fv21]
// [Asm]   fmv.d fv22, fv12  # live: [fv22, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv16, fv21]
// [Asm]   fmv.d fv23, fv16  # live: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v17, zero], upward_exposed: [v17, zero], params_defs: [fv22, fv23, fv20, fv19, v17, fv18, fv21]
// [Asm] # live_in: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21], live_out: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] # block parameters: [v17, fv18, fv19, fv20, fv21, fv22, fv23]
// [Asm] .xloop.713_16:
// [Asm] # control
// [Asm]   beq v17, zero, .xloop.713_17  # live: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] 
// [Asm] # block info: defs: [t1, fv30, ft0, ft1, a1, fa1, fa2, fv25, ft6, a4, fa6, a6, ft10, ft5, fv27, v34, ft7, ft4, ft9, fv32, a5, fa4, a0, ft2, a2, a3, v52, fv26, ft8, a7, t3, fa7, t0, fa5, fa3, fv31, ft3, fa0, fv33, fv29, t4, fv53, t2], uses: [fv23, fv32, fv20, fv30, fv19, v52, fv26, fv22, fv31, fv25, zero, fa0, fv33, fv29, fv27, fv53, fv18, v34, fv21], upward_exposed: [fv22, fv23, zero, fv20, fv19, fv18, fv21], params_defs: []
// [Asm] # live_in: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21], live_out: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26]
// [Asm] # block parameters: []
// [Asm] .xloop.713_18:
// [Asm]   fsub.d fv25, fv20, fv21  # live: [fv22, fv23, v5, zero, fv25, fv19, v4, v6, v17, fv18]
// [Asm]   fadd.d fv26, fv25, fv22  # live: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv18, fv26]
// [Asm]   # save_ctx2  # live: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv18, fv26]
// [Asm]   fmv.d fa0, fv18  # live: [fv22, fv23, v5, zero, fa0, fv19, v4, v6, v17, fv26]
// [Asm]   call dbl.712  # live: [fv22, fv23, v5, zero, fa0, fv19, v4, v6, v17, fv26]
// [Asm]   fmv.d fv27, fa0  # live: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv27, fv26]
// [Asm]   # restore_ctx2  # live: [fv22, fv23, v5, zero, fv19, v4, v6, v17, fv27, fv26]
// [Asm]   fmadd.d fv29, fv27, fv19, fv23  # live: [fv22, fv23, v5, zero, fv29, v4, v6, v17, fv26]
// [Asm]   fmul.d fv30, fv26, fv26  # live: [fv22, fv23, v5, zero, fv30, fv29, v4, v6, v17, fv26]
// [Asm]   fmul.d fv31, fv29, fv29  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v6, v17, fv26]
// [Asm]   li v52, 4611686018427387904  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v6, v17, v52, fv26]
// [Asm]   fmv.d.x fv53, v52  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v6, v17, fv53, fv26]
// [Asm]   fmul.d fv32, fv53, fv53  # live: [fv22, fv23, v5, fv32, fv31, zero, fv30, fv29, v4, v6, v17, fv26]
// [Asm]   fadd.d fv33, fv30, fv31  # live: [fv22, fv23, v5, fv32, fv31, zero, fv30, fv33, fv29, v4, v6, v17, fv26]
// [Asm]   fle.d v34, fv32, fv33  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26, v34]
// [Asm] # control
// [Asm]   beq v34, zero, .xloop.713_20  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [zero, a0, v36], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, v5, v6, zero], live_out: [v37, v4, v6, v5, zero]
// [Asm] # block parameters: []
// [Asm] .xloop.713_19:
// [Asm]   # save_ctx2  # live: [v4, v6, v5, zero]
// [Asm]   mv a0, zero  # live: [v4, v6, v5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v4, v6, v5, zero, a0]
// [Asm]   mv v36, a0  # live: [v4, v6, v5, zero, v36]
// [Asm]   # restore_ctx2  # live: [v4, v6, v5, zero, v36]
// [Asm] # control
// [Asm]   mv v37, v36  # live: [v37, v4, v6, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [v37], upward_exposed: [v37], params_defs: [v37]
// [Asm] # live_in: [v37, v4, v6, v5, zero], live_out: [v4, v5, v6, zero, v39]
// [Asm] # block parameters: [v37]
// [Asm] .xloop.713_21:
// [Asm] # control
// [Asm]   mv v39, v37  # live: [v4, v5, v6, zero, v39]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v39], upward_exposed: [v39], params_defs: [v39]
// [Asm] # live_in: [v4, v5, v6, zero, v39], live_out: [v4, v5, v6, zero, v40]
// [Asm] # block parameters: [v39]
// [Asm] .xloop.713_22:
// [Asm] # control
// [Asm]   mv v40, v39  # live: [v4, v5, v6, zero, v40]
// [Asm] 
// [Asm] # block info: defs: [v41, v5], uses: [v41, v5, v6], upward_exposed: [v5, v6], params_defs: [v40]
// [Asm] # live_in: [v4, v5, v6, zero, v40], live_out: [v4, v5, v6, zero]
// [Asm] # block parameters: [v40]
// [Asm] .xloop.713_6:
// [Asm]   addi v41, v5, 1  # live: [v4, v41, v6, zero]
// [Asm] # control
// [Asm]   mv v5, v41  # live: [v4, v5, v6, zero]
// [Asm]   mv v6, v6  # live: [v4, v5, v6, zero]
// [Asm]   j .xloop.713_2  # live: [v4, v5, v6, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v43, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v43]
// [Asm] # block parameters: []
// [Asm] .xloop.713_3:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call minimbt_print_endline  # live: [zero, a0]
// [Asm]   mv v42, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v43, zero  # live: [v43]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v43, a0], upward_exposed: [v43], params_defs: [v43]
// [Asm] # live_in: [v43], live_out: []
// [Asm] # block parameters: [v43]
// [Asm] .xloop.713_5:
// [Asm] # control
// [Asm]   mv a0, v43  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v46, ft9, a5, a0, fa4, ft2, a2, a3, v39, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, v38, t2], uses: [v38, v46, a0], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v4, v5, v6, zero], live_out: [v4, v5, v6, zero, v39]
// [Asm] # block parameters: []
// [Asm] .xloop.713_17:
// [Asm]   # save_ctx2  # live: [v4, v6, v5, zero]
// [Asm]   li v46, 1  # live: [v4, v6, v5, v46, zero]
// [Asm]   mv a0, v46  # live: [v4, v6, v5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v4, v6, v5, zero, a0]
// [Asm]   mv v38, a0  # live: [v4, v38, v6, v5, zero]
// [Asm]   # restore_ctx2  # live: [v4, v38, v6, v5, zero]
// [Asm] # control
// [Asm]   mv v39, v38  # live: [v4, v5, v6, zero, v39]
// [Asm]   j .xloop.713_22  # live: [v4, v5, v6, zero, v39]
// [Asm] 
// [Asm] # block info: defs: [fv20, fv19, v17, fv18, fv21, v35], uses: [fv22, fv23, fv31, fv30, v35, fv29, v17, fv26], upward_exposed: [fv22, fv23, fv31, fv30, fv29, v17, fv26], params_defs: []
// [Asm] # live_in: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26], live_out: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] # block parameters: []
// [Asm] .xloop.713_20:
// [Asm]   addi v35, v17, -1  # live: [fv22, fv23, v5, fv31, zero, fv30, v35, fv29, v4, v6, fv26]
// [Asm] # control
// [Asm]   mv v17, v35  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv26]
// [Asm]   fmv.d fv18, fv26  # live: [fv22, fv23, v5, fv31, zero, fv30, fv29, v4, v17, v6, fv18]
// [Asm]   fmv.d fv19, fv29  # live: [fv22, fv23, v5, fv31, zero, fv30, fv19, v4, v17, v6, fv18]
// [Asm]   fmv.d fv20, fv30  # live: [fv22, fv23, v5, fv31, zero, fv20, fv19, v4, v17, v6, fv18]
// [Asm]   fmv.d fv21, fv31  # live: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm]   fmv.d fv22, fv22  # live: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm]   fmv.d fv23, fv23  # live: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm]   j .xloop.713_16  # live: [fv22, fv23, v5, zero, fv20, fv19, v4, v17, v6, fv18, fv21]
// [Asm] 
// [Asm] # leaf true
// [Asm] dbl.712:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [fa0], params_defs: []
// [Asm] # live_in: [fa0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dbl.712_0:
// [Asm]   # save_ctx1  # live: [fa0]
// [Asm]   fmv.d fv2, fa0  # live: [fv2]
// [Asm]   fadd.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("mandelbrot", Unit), args: [("w", Int)], body: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))
// [Knf] build_knf: Prim(Var("f"), Var("f"), Add, kind=Some(Double))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit)
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1)
// [Knf] build_knf: LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [Var("zr")])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))
// [Knf] build_knf: Var("tr")
// [Knf] build_knf: Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))
// [Knf] build_knf: Var("ti")
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))
// [Knf] build_knf: Prim(Double(2), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))
// [Knf] build_knf: App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("xloop"), [Int(0), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("yloop"), [Int(0)])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("mandelbrot"), [Int(40)])
// [Knf] build_knf: Var("mandelbrot")
// [Knf] build_knf: Int(40)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b5 control: Panic -> Jump(target=b7, args=[Insn(iref=%12)])
// [Core] b6 control: Jump(target=b2, args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), BlockParam(bref=b2, bpref=$b.5), BlockParam(bref=b2, bpref=$b.6)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%11), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b8, args=[Insn(iref=%1)])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5), FnParam(fref=f1, fpref=$f.6)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%13), BlockParam(bref=b2, bpref=$b.1)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%2)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.711
// [Main]   .type main.711, @function
// [Main] # leaf false
// [Main] main.711:
// [Main] .main.711_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, zero
// [Main] 
// [Main] .main.711_2:
// [Main]   li a0, 40
// [Main]   bge s0, a0, .main.711_3
// [Main] 
// [Main] .main.711_4:
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   li a2, 40
// [Main]   call xloop.713
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .main.711_2
// [Main] 
// [Main] .main.711_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.711_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.711
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl xloop.713
// [Main]   .type xloop.713, @function
// [Main] # leaf false
// [Main] xloop.713:
// [Main] .xloop.713_0:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   fsd fs0, 40(sp)
// [Main]   fsd fs1, 48(sp)
// [Main]   fsd fs2, 56(sp)
// [Main]   fsd fs3, 64(sp)
// [Main]   mv s1, a2
// [Main]   mv s0, a0
// [Main]   mv s2, a1
// [Main] 
// [Main] .xloop.713_2:
// [Main]   bge s0, s1, .xloop.713_3
// [Main] 
// [Main] .xloop.713_4:
// [Main]   fcvt.d.w fa0, s0
// [Main]   call dbl.712
// [Main]   fcvt.d.w fs0, s1
// [Main]   fdiv.d fa0, fa0, fs0
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fs1, fa0, fa1
// [Main]   fcvt.d.w fa0, s2
// [Main]   call dbl.712
// [Main]   fdiv.d fa0, fa0, fs0
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa3, fa0, fa1
// [Main] 
// [Main] .xloop.713_14:
// [Main]   li a0, 1000
// [Main]   mv s3, a0
// [Main]   fmv.d.x fa0, zero
// [Main]   fmv.d fs0, fa0
// [Main]   fmv.d fa2, fa0
// [Main]   fmv.d fa1, fa0
// [Main]   fmv.d fs2, fa3
// [Main] 
// [Main] .xloop.713_16:
// [Main]   beq s3, zero, .xloop.713_17
// [Main] 
// [Main] .xloop.713_18:
// [Main]   fsub.d fa1, fa2, fa1
// [Main]   fadd.d fs3, fa1, fs1
// [Main]   call dbl.712
// [Main]   fmadd.d fa3, fa0, fs0, fs2
// [Main]   fmul.d fa2, fs3, fs3
// [Main]   fmul.d fa1, fa3, fa3
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   fadd.d fa4, fa2, fa1
// [Main]   fle.d a0, fa0, fa4
// [Main]   beq a0, zero, .xloop.713_20
// [Main] 
// [Main] .xloop.713_19:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .xloop.713_21:
// [Main] 
// [Main] .xloop.713_22:
// [Main] 
// [Main] .xloop.713_6:
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .xloop.713_2
// [Main] 
// [Main] .xloop.713_3:
// [Main]   call minimbt_print_endline
// [Main]   mv a0, zero
// [Main] 
// [Main] .xloop.713_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   fld fs0, 40(sp)
// [Main]   fld fs1, 48(sp)
// [Main]   fld fs2, 56(sp)
// [Main]   fld fs3, 64(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .xloop.713_17:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .xloop.713_22
// [Main] 
// [Main] .xloop.713_20:
// [Main]   addi a0, s3, -1
// [Main]   mv s3, a0
// [Main]   fmv.d fa0, fs3
// [Main]   fmv.d fs0, fa3
// [Main]   j .xloop.713_16
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dbl.712
// [Main]   .type dbl.712, @function
// [Main] # leaf true
// [Main] dbl.712:
// [Main] .dbl.712_0:
// [Main]   fadd.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function xloop.713
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%13), BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b22, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b22, args=[Insn(iref=%15)])
// [Wasm] Lowering control Jump(target=b22, args=[BlockParam(bref=b21, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b21, args=[Insn(iref=%26)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b16, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering control Jump(target=b16, args=[Insn(iref=%27), Insn(iref=%17), Insn(iref=%20), Insn(iref=%21), Insn(iref=%22), BlockParam(bref=b16, bpref=$b.5), BlockParam(bref=b16, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.1) -> $b16.$b.1
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.2) -> $b16.$b.2
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.3) -> $b16.$b.3
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.4) -> $b16.$b.4
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.5) -> $b16.$b.5
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.5) -> $b16.$b.5
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.6) -> $b16.$b.6
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.6) -> $b16.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[BlockParam(bref=b16, bpref=$b.3), BlockParam(bref=b16, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.3) -> $b16.$b.3
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.4) -> $b16.$b.4
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%16), BlockParam(bref=b16, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.5) -> $b16.$b.5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[BlockParam(bref=b16, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.1) -> $b16.$b.1
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%18), BlockParam(bref=b16, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.2) -> $b16.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%19), BlockParam(bref=b16, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.6) -> $b16.$b.6
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%17), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%20), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%21), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%23), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Branch(cond=Insn(iref=%25), t=b19, t_args=[], f=b20, f_args=[])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b16, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Branch(cond=Insn(iref=%14), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b15, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%6), Insn(iref=%11)])
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.1) -> $b16.$b.1
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.2) -> $b16.$b.2
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.3) -> $b16.$b.3
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.4) -> $b16.$b.4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.5) -> $b16.$b.5
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b16, bpref=$b.6) -> $b16.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[FnParam(fref=f2, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%5), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b2, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%8), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%10), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b14, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.2), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b16, bpref=$b.3) -> $b16.$b.3
// [Wasm] Local BlockParam(bref=b16, bpref=$b.0) -> $b16.$b.0
// [Wasm] Local BlockParam(bref=b16, bpref=$b.4) -> $b16.$b.4
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local BlockParam(bref=b16, bpref=$b.6) -> $b16.$b.6
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b16, bpref=$b.1) -> $b16.$b.1
// [Wasm] Local BlockParam(bref=b16, bpref=$b.2) -> $b16.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b16, bpref=$b.5) -> $b16.$b.5
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function xloop.713 to wasm
// [Wasm] Lowering function main.711
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0), Int32(val=40)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=40), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.711 to wasm
// [Wasm] Lowering function dbl.712
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function dbl.712 to wasm
// [KnfOpt] func_tre: mandelbrot.1 false
// [KnfOpt] func_tre: dbl.3 false
// [KnfOpt] func_tre: yloop.5 true
// [KnfOpt] func_tre: xloop.7 true
// [KnfOpt] func_tre: iloop.23 true
// [KnfOpt] func_tre: main.60 false
// [KnfOpt] freq: {mandelbrot.1: Once, dbl.3: Many(3), yloop.5: Once, yloop.142: Many(2), xloop.144: Once, xloop.147: Many(2), iloop.163: Once, iloop.171: Many(2), main.60: Once}
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _200: Unit = Unit
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Knf inline Some(dbl) let _158: Double = Unit
// [KnfOpt] let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _160: Double = FDiv(_158, _159)
// [KnfOpt] let _161: Double = Double(1)
// [KnfOpt] let ci.162: Double = FSub(_160, _161)
// [KnfOpt] let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
// [KnfOpt]   let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
// [KnfOpt]     let _179: Int = Int(0)
// [KnfOpt]     if (i.172 == _179) then {
// [KnfOpt]       let _180: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_180, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _181: Double = FSub(zr2.175, zi2.176)
// [KnfOpt]       let tr.182: Double = FAdd(_181, cr.177)
// [KnfOpt]       let _183: Double = FAdd(zr.173, zr.173)
// [KnfOpt]       let _184: Double = FMul(_183, zi.174)
// [KnfOpt]       let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt]       let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt]       let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt]       let _188: Double = Double(2)
// [KnfOpt]       let _189: Double = Double(2)
// [KnfOpt]       let _190: Double = FMul(_188, _189)
// [KnfOpt]       let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt]       if (_190 <= _191) then {
// [KnfOpt]         let _192: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _193: Int = Int(1)
// [KnfOpt]         let _194: Int = Sub(i.172, _193)
// [KnfOpt]         Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
// [KnfOpt] }
// [KnfOpt] let _195: Int = Int(1000)
// [KnfOpt] let _196: Double = Double(0)
// [KnfOpt] let _197: Double = Double(0)
// [KnfOpt] let _198: Double = Double(0)
// [KnfOpt] let _199: Double = Double(0)
// [KnfOpt] let join iloop.207: Unit = (i.208: Int, zr.209: Double, zi.210: Double, zr2.211: Double, zi2.212: Double, cr.213: Double, ci.214: Double) {
// [KnfOpt]   let _215: Int = Int(0)
// [KnfOpt]   if (i.208 == _215) then {
// [KnfOpt]     let _216: Int = Int(1)
// [KnfOpt]     let _200: Unit = ExtApply(minimbt_print_int, [_216, ])
// [KnfOpt]     let _201: Int = Int(1)
// [KnfOpt]     let _202: Int = Add(x.148, _201)
// [KnfOpt]     Jump(xloop.147, [_202, y.149, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _217: Double = FSub(zr2.211, zi2.212)
// [KnfOpt]     let tr.218: Double = FAdd(_217, cr.213)
// [KnfOpt]     let _219: Double = Apply(dbl.3, [zr.209, ])
// [KnfOpt]     let _220: Double = FMul(_219, zi.210)
// [KnfOpt]     let ti.221: Double = FAdd(_220, ci.214)
// [KnfOpt]     let zr2.222: Double = FMul(tr.218, tr.218)
// [KnfOpt]     let zi2.223: Double = FMul(ti.221, ti.221)
// [KnfOpt]     let _224: Double = Double(2)
// [KnfOpt]     let _225: Double = Double(2)
// [KnfOpt]     let _226: Double = FMul(_224, _225)
// [KnfOpt]     let _227: Double = FAdd(zr2.222, zi2.223)
// [KnfOpt]     if (_226 <= _227) then {
// [KnfOpt]       let _228: Int = Int(0)
// [KnfOpt]       let _200: Unit = ExtApply(minimbt_print_int, [_228, ])
// [KnfOpt]       let _201: Int = Int(1)
// [KnfOpt]       let _202: Int = Add(x.148, _201)
// [KnfOpt]       Jump(xloop.147, [_202, y.149, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _229: Int = Int(1)
// [KnfOpt]       let _230: Int = Sub(i.208, _229)
// [KnfOpt]       Jump(iloop.207, [_230, tr.218, ti.221, zr2.222, zi2.223, cr.213, ci.214, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(iloop.207, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _200: Unit = Unit
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Knf inline Some(dbl) let _152: Double = Unit
// [KnfOpt] let _153: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _154: Double = FDiv(_152, _153)
// [KnfOpt] let _155: Double = Double(1.5)
// [KnfOpt] let cr.156: Double = FSub(_154, _155)
// [KnfOpt] let _157: Double = ExtApply(minimbt_float_of_int, [y.149, ])
// [KnfOpt] let _158: Double = FAdd(_157, _157)
// [KnfOpt] let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _160: Double = FDiv(_158, _159)
// [KnfOpt] let _161: Double = Double(1)
// [KnfOpt] let ci.162: Double = FSub(_160, _161)
// [KnfOpt] let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
// [KnfOpt]   let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
// [KnfOpt]     let _179: Int = Int(0)
// [KnfOpt]     if (i.172 == _179) then {
// [KnfOpt]       let _180: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_180, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _181: Double = FSub(zr2.175, zi2.176)
// [KnfOpt]       let tr.182: Double = FAdd(_181, cr.177)
// [KnfOpt]       let _183: Double = FAdd(zr.173, zr.173)
// [KnfOpt]       let _184: Double = FMul(_183, zi.174)
// [KnfOpt]       let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt]       let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt]       let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt]       let _188: Double = Double(2)
// [KnfOpt]       let _189: Double = Double(2)
// [KnfOpt]       let _190: Double = FMul(_188, _189)
// [KnfOpt]       let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt]       if (_190 <= _191) then {
// [KnfOpt]         let _192: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _193: Int = Int(1)
// [KnfOpt]         let _194: Int = Sub(i.172, _193)
// [KnfOpt]         Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
// [KnfOpt] }
// [KnfOpt] let _195: Int = Int(1000)
// [KnfOpt] let _196: Double = Double(0)
// [KnfOpt] let _197: Double = Double(0)
// [KnfOpt] let _198: Double = Double(0)
// [KnfOpt] let _199: Double = Double(0)
// [KnfOpt] let join iloop.231: Unit = (i.232: Int, zr.233: Double, zi.234: Double, zr2.235: Double, zi2.236: Double, cr.237: Double, ci.238: Double) {
// [KnfOpt]   let _239: Int = Int(0)
// [KnfOpt]   if (i.232 == _239) then {
// [KnfOpt]     let _240: Int = Int(1)
// [KnfOpt]     let _200: Unit = ExtApply(minimbt_print_int, [_240, ])
// [KnfOpt]     let _201: Int = Int(1)
// [KnfOpt]     let _202: Int = Add(x.148, _201)
// [KnfOpt]     Jump(xloop.147, [_202, y.149, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _241: Double = FSub(zr2.235, zi2.236)
// [KnfOpt]     let tr.242: Double = FAdd(_241, cr.237)
// [KnfOpt]     let _243: Double = Apply(dbl.3, [zr.233, ])
// [KnfOpt]     let _244: Double = FMul(_243, zi.234)
// [KnfOpt]     let ti.245: Double = FAdd(_244, ci.238)
// [KnfOpt]     let zr2.246: Double = FMul(tr.242, tr.242)
// [KnfOpt]     let zi2.247: Double = FMul(ti.245, ti.245)
// [KnfOpt]     let _248: Double = Double(2)
// [KnfOpt]     let _249: Double = Double(2)
// [KnfOpt]     let _250: Double = FMul(_248, _249)
// [KnfOpt]     let _251: Double = FAdd(zr2.246, zi2.247)
// [KnfOpt]     if (_250 <= _251) then {
// [KnfOpt]       let _252: Int = Int(0)
// [KnfOpt]       let _200: Unit = ExtApply(minimbt_print_int, [_252, ])
// [KnfOpt]       let _201: Int = Int(1)
// [KnfOpt]       let _202: Int = Add(x.148, _201)
// [KnfOpt]       Jump(xloop.147, [_202, y.149, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _253: Int = Int(1)
// [KnfOpt]       let _254: Int = Sub(i.232, _253)
// [KnfOpt]       Jump(iloop.231, [_254, tr.242, ti.245, zr2.246, zi2.247, cr.237, ci.238, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(iloop.231, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _200: Unit = Unit
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Knf inline Some(dbl) let _158: Double = Unit
// [KnfOpt] let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _160: Double = FDiv(_158, _159)
// [KnfOpt] let _161: Double = Double(1)
// [KnfOpt] let ci.162: Double = FSub(_160, _161)
// [KnfOpt] let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
// [KnfOpt]   let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
// [KnfOpt]     let _179: Int = Int(0)
// [KnfOpt]     if (i.172 == _179) then {
// [KnfOpt]       let _180: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_180, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _181: Double = FSub(zr2.175, zi2.176)
// [KnfOpt]       let tr.182: Double = FAdd(_181, cr.177)
// [KnfOpt]       let _183: Double = FAdd(zr.173, zr.173)
// [KnfOpt]       let _184: Double = FMul(_183, zi.174)
// [KnfOpt]       let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt]       let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt]       let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt]       let _188: Double = Double(2)
// [KnfOpt]       let _189: Double = Double(2)
// [KnfOpt]       let _190: Double = FMul(_188, _189)
// [KnfOpt]       let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt]       if (_190 <= _191) then {
// [KnfOpt]         let _192: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _193: Int = Int(1)
// [KnfOpt]         let _194: Int = Sub(i.172, _193)
// [KnfOpt]         Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
// [KnfOpt] }
// [KnfOpt] let _195: Int = Int(1000)
// [KnfOpt] let _196: Double = Double(0)
// [KnfOpt] let _197: Double = Double(0)
// [KnfOpt] let _198: Double = Double(0)
// [KnfOpt] let _199: Double = Double(0)
// [KnfOpt] let join iloop.255: Unit = (i.256: Int, zr.257: Double, zi.258: Double, zr2.259: Double, zi2.260: Double, cr.261: Double, ci.262: Double) {
// [KnfOpt]   let _263: Int = Int(0)
// [KnfOpt]   if (i.256 == _263) then {
// [KnfOpt]     let _264: Int = Int(1)
// [KnfOpt]     let _200: Unit = ExtApply(minimbt_print_int, [_264, ])
// [KnfOpt]     let _201: Int = Int(1)
// [KnfOpt]     let _202: Int = Add(x.148, _201)
// [KnfOpt]     Jump(xloop.147, [_202, y.149, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _265: Double = FSub(zr2.259, zi2.260)
// [KnfOpt]     let tr.266: Double = FAdd(_265, cr.261)
// [KnfOpt]     let _267: Double = Apply(dbl.3, [zr.257, ])
// [KnfOpt]     let _268: Double = FMul(_267, zi.258)
// [KnfOpt]     let ti.269: Double = FAdd(_268, ci.262)
// [KnfOpt]     let zr2.270: Double = FMul(tr.266, tr.266)
// [KnfOpt]     let zi2.271: Double = FMul(ti.269, ti.269)
// [KnfOpt]     let _272: Double = Double(2)
// [KnfOpt]     let _273: Double = Double(2)
// [KnfOpt]     let _274: Double = FMul(_272, _273)
// [KnfOpt]     let _275: Double = FAdd(zr2.270, zi2.271)
// [KnfOpt]     if (_274 <= _275) then {
// [KnfOpt]       let _276: Int = Int(0)
// [KnfOpt]       let _200: Unit = ExtApply(minimbt_print_int, [_276, ])
// [KnfOpt]       let _201: Int = Int(1)
// [KnfOpt]       let _202: Int = Add(x.148, _201)
// [KnfOpt]       Jump(xloop.147, [_202, y.149, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _277: Int = Int(1)
// [KnfOpt]       let _278: Int = Sub(i.256, _277)
// [KnfOpt]       Jump(iloop.255, [_278, tr.266, ti.269, zr2.270, zi2.271, cr.261, ci.262, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(iloop.255, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _200: Unit = Unit
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Knf inline Some(xloop) let _204: Unit = Unit
// [KnfOpt] let _205: Int = Int(1)
// [KnfOpt] let _206: Int = Add(y.143, _205)
// [KnfOpt] Jump(yloop.142, [_206, ])
// [KnfOpt] Knf inline Some(yloop) Unit
// [KnfOpt] Knf inline Some(mandelbrot) Unit
// [KnfOpt] freq: {main.60: Once, dbl.424: Many(3), yloop.426: Once, yloop.428: Many(2), xloop.430: Once, xloop.433: Many(2), iloop.449: Once, iloop.457: Many(2)}
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Knf inline Some(dbl) let _469: Double = Unit
// [KnfOpt] let _470: Double = FMul(_469, zi.460)
// [KnfOpt] let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt] let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt] let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt] let _474: Double = Double(2)
// [KnfOpt] let _475: Double = Double(2)
// [KnfOpt] let _476: Double = FMul(_474, _475)
// [KnfOpt] let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt] if (_476 <= _477) then {
// [KnfOpt]   let _478: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt] } else {
// [KnfOpt]   let _479: Int = Int(1)
// [KnfOpt]   let _480: Int = Sub(i.458, _479)
// [KnfOpt]   Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _486: Unit = Unit
// [KnfOpt] let _487: Int = Int(1)
// [KnfOpt] let _488: Int = Add(x.434, _487)
// [KnfOpt] Jump(xloop.433, [_488, y.435, ])
// [KnfOpt] Knf inline Some(dbl) let _444: Double = Unit
// [KnfOpt] let _445: Double = ExtApply(minimbt_float_of_int, [_61, ])
// [KnfOpt] let _446: Double = FDiv(_444, _445)
// [KnfOpt] let _447: Double = Double(1)
// [KnfOpt] let ci.448: Double = FSub(_446, _447)
// [KnfOpt] let rec iloop.449: Unit = (i.450: Int, zr.451: Double, zi.452: Double, zr2.453: Double, zi2.454: Double, cr.455: Double, ci.456: Double) {
// [KnfOpt]   let join iloop.457: Unit = (i.458: Int, zr.459: Double, zi.460: Double, zr2.461: Double, zi2.462: Double, cr.463: Double, ci.464: Double) {
// [KnfOpt]     let _465: Int = Int(0)
// [KnfOpt]     if (i.458 == _465) then {
// [KnfOpt]       let _466: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_466, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _467: Double = FSub(zr2.461, zi2.462)
// [KnfOpt]       let tr.468: Double = FAdd(_467, cr.463)
// [KnfOpt]       let _469: Double = FAdd(zr.459, zr.459)
// [KnfOpt]       let _470: Double = FMul(_469, zi.460)
// [KnfOpt]       let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt]       let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt]       let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt]       let _474: Double = Double(2)
// [KnfOpt]       let _475: Double = Double(2)
// [KnfOpt]       let _476: Double = FMul(_474, _475)
// [KnfOpt]       let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt]       if (_476 <= _477) then {
// [KnfOpt]         let _478: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _479: Int = Int(1)
// [KnfOpt]         let _480: Int = Sub(i.458, _479)
// [KnfOpt]         Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.457, [i.450, zr.451, zi.452, zr2.453, zi2.454, cr.455, ci.456, ])
// [KnfOpt] }
// [KnfOpt] let _481: Int = Int(1000)
// [KnfOpt] let _482: Double = Double(0)
// [KnfOpt] let _483: Double = Double(0)
// [KnfOpt] let _484: Double = Double(0)
// [KnfOpt] let _485: Double = Double(0)
// [KnfOpt] let join iloop.494: Unit = (i.495: Int, zr.496: Double, zi.497: Double, zr2.498: Double, zi2.499: Double, cr.500: Double, ci.501: Double) {
// [KnfOpt]   let _502: Int = Int(0)
// [KnfOpt]   if (i.495 == _502) then {
// [KnfOpt]     let _503: Int = Int(1)
// [KnfOpt]     let _486: Unit = ExtApply(minimbt_print_int, [_503, ])
// [KnfOpt]     let _487: Int = Int(1)
// [KnfOpt]     let _488: Int = Add(x.434, _487)
// [KnfOpt]     Jump(xloop.433, [_488, y.435, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _504: Double = FSub(zr2.498, zi2.499)
// [KnfOpt]     let tr.505: Double = FAdd(_504, cr.500)
// [KnfOpt]     let _506: Double = Apply(dbl.424, [zr.496, ])
// [KnfOpt]     let _507: Double = FMul(_506, zi.497)
// [KnfOpt]     let ti.508: Double = FAdd(_507, ci.501)
// [KnfOpt]     let zr2.509: Double = FMul(tr.505, tr.505)
// [KnfOpt]     let zi2.510: Double = FMul(ti.508, ti.508)
// [KnfOpt]     let _511: Double = Double(2)
// [KnfOpt]     let _512: Double = Double(2)
// [KnfOpt]     let _513: Double = FMul(_511, _512)
// [KnfOpt]     let _514: Double = FAdd(zr2.509, zi2.510)
// [KnfOpt]     if (_513 <= _514) then {
// [KnfOpt]       let _515: Int = Int(0)
// [KnfOpt]       let _486: Unit = ExtApply(minimbt_print_int, [_515, ])
// [KnfOpt]       let _487: Int = Int(1)
// [KnfOpt]       let _488: Int = Add(x.434, _487)
// [KnfOpt]       Jump(xloop.433, [_488, y.435, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _516: Int = Int(1)
// [KnfOpt]       let _517: Int = Sub(i.495, _516)
// [KnfOpt]       Jump(iloop.494, [_517, tr.505, ti.508, zr2.509, zi2.510, cr.500, ci.501, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(iloop.494, [_481, _482, _483, _484, _485, cr.442, ci.448, ])
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Knf inline Some(dbl) let _469: Double = Unit
// [KnfOpt] let _470: Double = FMul(_469, zi.460)
// [KnfOpt] let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt] let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt] let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt] let _474: Double = Double(2)
// [KnfOpt] let _475: Double = Double(2)
// [KnfOpt] let _476: Double = FMul(_474, _475)
// [KnfOpt] let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt] if (_476 <= _477) then {
// [KnfOpt]   let _478: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt] } else {
// [KnfOpt]   let _479: Int = Int(1)
// [KnfOpt]   let _480: Int = Sub(i.458, _479)
// [KnfOpt]   Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _486: Unit = Unit
// [KnfOpt] let _487: Int = Int(1)
// [KnfOpt] let _488: Int = Add(x.434, _487)
// [KnfOpt] Jump(xloop.433, [_488, y.435, ])
// [KnfOpt] Knf inline Some(dbl) let _438: Double = Unit
// [KnfOpt] let _439: Double = ExtApply(minimbt_float_of_int, [_61, ])
// [KnfOpt] let _440: Double = FDiv(_438, _439)
// [KnfOpt] let _441: Double = Double(1.5)
// [KnfOpt] let cr.442: Double = FSub(_440, _441)
// [KnfOpt] let _443: Double = ExtApply(minimbt_float_of_int, [y.435, ])
// [KnfOpt] let _444: Double = FAdd(_443, _443)
// [KnfOpt] let _445: Double = ExtApply(minimbt_float_of_int, [_61, ])
// [KnfOpt] let _446: Double = FDiv(_444, _445)
// [KnfOpt] let _447: Double = Double(1)
// [KnfOpt] let ci.448: Double = FSub(_446, _447)
// [KnfOpt] let rec iloop.449: Unit = (i.450: Int, zr.451: Double, zi.452: Double, zr2.453: Double, zi2.454: Double, cr.455: Double, ci.456: Double) {
// [KnfOpt]   let join iloop.457: Unit = (i.458: Int, zr.459: Double, zi.460: Double, zr2.461: Double, zi2.462: Double, cr.463: Double, ci.464: Double) {
// [KnfOpt]     let _465: Int = Int(0)
// [KnfOpt]     if (i.458 == _465) then {
// [KnfOpt]       let _466: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_466, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _467: Double = FSub(zr2.461, zi2.462)
// [KnfOpt]       let tr.468: Double = FAdd(_467, cr.463)
// [KnfOpt]       let _469: Double = FAdd(zr.459, zr.459)
// [KnfOpt]       let _470: Double = FMul(_469, zi.460)
// [KnfOpt]       let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt]       let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt]       let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt]       let _474: Double = Double(2)
// [KnfOpt]       let _475: Double = Double(2)
// [KnfOpt]       let _476: Double = FMul(_474, _475)
// [KnfOpt]       let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt]       if (_476 <= _477) then {
// [KnfOpt]         let _478: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _479: Int = Int(1)
// [KnfOpt]         let _480: Int = Sub(i.458, _479)
// [KnfOpt]         Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.457, [i.450, zr.451, zi.452, zr2.453, zi2.454, cr.455, ci.456, ])
// [KnfOpt] }
// [KnfOpt] let _481: Int = Int(1000)
// [KnfOpt] let _482: Double = Double(0)
// [KnfOpt] let _483: Double = Double(0)
// [KnfOpt] let _484: Double = Double(0)
// [KnfOpt] let _485: Double = Double(0)
// [KnfOpt] let join iloop.518: Unit = (i.519: Int, zr.520: Double, zi.521: Double, zr2.522: Double, zi2.523: Double, cr.524: Double, ci.525: Double) {
// [KnfOpt]   let _526: Int = Int(0)
// [KnfOpt]   if (i.519 == _526) then {
// [KnfOpt]     let _527: Int = Int(1)
// [KnfOpt]     let _486: Unit = ExtApply(minimbt_print_int, [_527, ])
// [KnfOpt]     let _487: Int = Int(1)
// [KnfOpt]     let _488: Int = Add(x.434, _487)
// [KnfOpt]     Jump(xloop.433, [_488, y.435, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _528: Double = FSub(zr2.522, zi2.523)
// [KnfOpt]     let tr.529: Double = FAdd(_528, cr.524)
// [KnfOpt]     let _530: Double = Apply(dbl.424, [zr.520, ])
// [KnfOpt]     let _531: Double = FMul(_530, zi.521)
// [KnfOpt]     let ti.532: Double = FAdd(_531, ci.525)
// [KnfOpt]     let zr2.533: Double = FMul(tr.529, tr.529)
// [KnfOpt]     let zi2.534: Double = FMul(ti.532, ti.532)
// [KnfOpt]     let _535: Double = Double(2)
// [KnfOpt]     let _536: Double = Double(2)
// [KnfOpt]     let _537: Double = FMul(_535, _536)
// [KnfOpt]     let _538: Double = FAdd(zr2.533, zi2.534)
// [KnfOpt]     if (_537 <= _538) then {
// [KnfOpt]       let _539: Int = Int(0)
// [KnfOpt]       let _486: Unit = ExtApply(minimbt_print_int, [_539, ])
// [KnfOpt]       let _487: Int = Int(1)
// [KnfOpt]       let _488: Int = Add(x.434, _487)
// [KnfOpt]       Jump(xloop.433, [_488, y.435, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _540: Int = Int(1)
// [KnfOpt]       let _541: Int = Sub(i.519, _540)
// [KnfOpt]       Jump(iloop.518, [_541, tr.529, ti.532, zr2.533, zi2.534, cr.524, ci.525, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(iloop.518, [_481, _482, _483, _484, _485, cr.442, ci.448, ])
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Knf inline Some(dbl) let _469: Double = Unit
// [KnfOpt] let _470: Double = FMul(_469, zi.460)
// [KnfOpt] let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt] let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt] let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt] let _474: Double = Double(2)
// [KnfOpt] let _475: Double = Double(2)
// [KnfOpt] let _476: Double = FMul(_474, _475)
// [KnfOpt] let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt] if (_476 <= _477) then {
// [KnfOpt]   let _478: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt] } else {
// [KnfOpt]   let _479: Int = Int(1)
// [KnfOpt]   let _480: Int = Sub(i.458, _479)
// [KnfOpt]   Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _486: Unit = Unit
// [KnfOpt] let _487: Int = Int(1)
// [KnfOpt] let _488: Int = Add(x.434, _487)
// [KnfOpt] Jump(xloop.433, [_488, y.435, ])
// [KnfOpt] Knf inline Some(dbl) let _444: Double = Unit
// [KnfOpt] let _445: Double = ExtApply(minimbt_float_of_int, [_61, ])
// [KnfOpt] let _446: Double = FDiv(_444, _445)
// [KnfOpt] let _447: Double = Double(1)
// [KnfOpt] let ci.448: Double = FSub(_446, _447)
// [KnfOpt] let rec iloop.449: Unit = (i.450: Int, zr.451: Double, zi.452: Double, zr2.453: Double, zi2.454: Double, cr.455: Double, ci.456: Double) {
// [KnfOpt]   let join iloop.457: Unit = (i.458: Int, zr.459: Double, zi.460: Double, zr2.461: Double, zi2.462: Double, cr.463: Double, ci.464: Double) {
// [KnfOpt]     let _465: Int = Int(0)
// [KnfOpt]     if (i.458 == _465) then {
// [KnfOpt]       let _466: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_466, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _467: Double = FSub(zr2.461, zi2.462)
// [KnfOpt]       let tr.468: Double = FAdd(_467, cr.463)
// [KnfOpt]       let _469: Double = FAdd(zr.459, zr.459)
// [KnfOpt]       let _470: Double = FMul(_469, zi.460)
// [KnfOpt]       let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt]       let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt]       let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt]       let _474: Double = Double(2)
// [KnfOpt]       let _475: Double = Double(2)
// [KnfOpt]       let _476: Double = FMul(_474, _475)
// [KnfOpt]       let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt]       if (_476 <= _477) then {
// [KnfOpt]         let _478: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _479: Int = Int(1)
// [KnfOpt]         let _480: Int = Sub(i.458, _479)
// [KnfOpt]         Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.457, [i.450, zr.451, zi.452, zr2.453, zi2.454, cr.455, ci.456, ])
// [KnfOpt] }
// [KnfOpt] let _481: Int = Int(1000)
// [KnfOpt] let _482: Double = Double(0)
// [KnfOpt] let _483: Double = Double(0)
// [KnfOpt] let _484: Double = Double(0)
// [KnfOpt] let _485: Double = Double(0)
// [KnfOpt] let join iloop.542: Unit = (i.543: Int, zr.544: Double, zi.545: Double, zr2.546: Double, zi2.547: Double, cr.548: Double, ci.549: Double) {
// [KnfOpt]   let _550: Int = Int(0)
// [KnfOpt]   if (i.543 == _550) then {
// [KnfOpt]     let _551: Int = Int(1)
// [KnfOpt]     let _486: Unit = ExtApply(minimbt_print_int, [_551, ])
// [KnfOpt]     let _487: Int = Int(1)
// [KnfOpt]     let _488: Int = Add(x.434, _487)
// [KnfOpt]     Jump(xloop.433, [_488, y.435, ])
// [KnfOpt]   } else {
// [KnfOpt]     let _552: Double = FSub(zr2.546, zi2.547)
// [KnfOpt]     let tr.553: Double = FAdd(_552, cr.548)
// [KnfOpt]     let _554: Double = Apply(dbl.424, [zr.544, ])
// [KnfOpt]     let _555: Double = FMul(_554, zi.545)
// [KnfOpt]     let ti.556: Double = FAdd(_555, ci.549)
// [KnfOpt]     let zr2.557: Double = FMul(tr.553, tr.553)
// [KnfOpt]     let zi2.558: Double = FMul(ti.556, ti.556)
// [KnfOpt]     let _559: Double = Double(2)
// [KnfOpt]     let _560: Double = Double(2)
// [KnfOpt]     let _561: Double = FMul(_559, _560)
// [KnfOpt]     let _562: Double = FAdd(zr2.557, zi2.558)
// [KnfOpt]     if (_561 <= _562) then {
// [KnfOpt]       let _563: Int = Int(0)
// [KnfOpt]       let _486: Unit = ExtApply(minimbt_print_int, [_563, ])
// [KnfOpt]       let _487: Int = Int(1)
// [KnfOpt]       let _488: Int = Add(x.434, _487)
// [KnfOpt]       Jump(xloop.433, [_488, y.435, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _564: Int = Int(1)
// [KnfOpt]       let _565: Int = Sub(i.543, _564)
// [KnfOpt]       Jump(iloop.542, [_565, tr.553, ti.556, zr2.557, zi2.558, cr.548, ci.549, ])
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt] }
// [KnfOpt] Jump(iloop.542, [_481, _482, _483, _484, _485, cr.442, ci.448, ])
// [KnfOpt] Inline threshold 3 1
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision dbl.424 accepted
// [KnfOpt] Knf inline Some(dbl) let _469: Double = Unit
// [KnfOpt] let _470: Double = FMul(_469, zi.460)
// [KnfOpt] let ti.471: Double = FAdd(_470, ci.464)
// [KnfOpt] let zr2.472: Double = FMul(tr.468, tr.468)
// [KnfOpt] let zi2.473: Double = FMul(ti.471, ti.471)
// [KnfOpt] let _474: Double = Double(2)
// [KnfOpt] let _475: Double = Double(2)
// [KnfOpt] let _476: Double = FMul(_474, _475)
// [KnfOpt] let _477: Double = FAdd(zr2.472, zi2.473)
// [KnfOpt] if (_476 <= _477) then {
// [KnfOpt]   let _478: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_478, ])
// [KnfOpt] } else {
// [KnfOpt]   let _479: Int = Int(1)
// [KnfOpt]   let _480: Int = Sub(i.458, _479)
// [KnfOpt]   Jump(iloop.457, [_480, tr.468, ti.471, zr2.472, zi2.473, cr.463, ci.464, ])
// [KnfOpt] }
// [KnfOpt] Knf inline Some(iloop) let _486: Unit = Unit
// [KnfOpt] let _487: Int = Int(1)
// [KnfOpt] let _488: Int = Add(x.434, _487)
// [KnfOpt] Jump(xloop.433, [_488, y.435, ])
// [KnfOpt] Knf inline Some(xloop) let _490: Unit = Unit
// [KnfOpt] let _491: Int = Int(1)
// [KnfOpt] let _492: Int = Add(y.429, _491)
// [KnfOpt] Jump(yloop.428, [_492, ])
// [KnfOpt] Knf inline Some(yloop) Unit
// [KnfOpt] Numbers of let rec: 4 4 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f1: Once, f8: Once, f2: Once, f3: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] xloop.713 is inlining Call(ty=Unit, f=f1, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%6), Insn(iref=%11)])
// [CoreOpt] shifted callee .fn iloop.714 #f1 : fn(int32, double, double, double, double, double, double) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b15($f0, $f1, $f2, $f3, $f4, $f5, $f6)
// [CoreOpt]   }
// [CoreOpt]   .loop #b15 pre #Some(b14) header #b16 {
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b22
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %14: bool = eq($b16.0, 0)
// [CoreOpt]     br %14 b17() b18()
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %15: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b22(%15)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     let %16: double = sub($b16.3, $b16.4)
// [CoreOpt]     let %17: double = add(%16, $b16.5)
// [CoreOpt]     let %18: double = call f0($b16.1)
// [CoreOpt]     let %19: double = mul(%18, $b16.2)
// [CoreOpt]     let %20: double = add(%19, $b16.6)
// [CoreOpt]     let %21: double = mul(%17, %17)
// [CoreOpt]     let %22: double = mul(%20, %20)
// [CoreOpt]     let %23: double = mul(2, 2)
// [CoreOpt]     let %24: double = add(%21, %22)
// [CoreOpt]     let %25: bool = le(%23, %24)
// [CoreOpt]     br %25 b19() b20()
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     let %26: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b21(%26)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %27: int32 = sub($b16.0, 1)
// [CoreOpt]     jump b16(%27, %17, %20, %21, %22, $b16.5, $b16.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (unit) {
// [CoreOpt]     jump b22($b21.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (unit) {
// [CoreOpt]     return $b22.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] LVN subst Insn(iref=%9) with Insn(iref=%4)
