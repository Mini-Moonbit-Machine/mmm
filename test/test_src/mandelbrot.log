// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_12"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main75l1_4 ->   call main75l1_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main75l1_4"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v3-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v2"
// [Asm]   comment = "v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main75l1_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v3, 40 ->   li a0, 40
// [Asm] subst   call mandelbrot1l0_3 ->   call mandelbrot1l0_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v24, Insn(iref=%9) -> fv17, Insn(iref=%8) -> fv16, Insn(iref=%10) -> fv18, Mem(fref=f1, mref=m0) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v6, Insn(iref=%14) -> v22, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%5) -> fv13, Insn(iref=%0) -> v9, Insn(iref=%4) -> fv12, Insn(iref=%3) -> fv11, Insn(iref=%13) -> v21, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> fv15, FnParam(fref=f1, fpref=$f.2) -> v4, Insn(iref=%2) -> fv10, Insn(iref=%1) -> v23, Insn(iref=%11) -> fv19, Self(fref=f1) -> v0, Insn(iref=%6) -> fv14, Insn(iref=%12) -> v20
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v8, v6, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v24]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv10]
// [Asm] live_set: [fv10, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [zero, v7, v8, fa0, v6, s11]
// [Asm] move_origin: [fv10]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v7, v8, fa0, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [zero, fv11, v7, v8, v6, s11]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv11 is F
// [Asm] defs: []
// [Asm] live_set: [zero, fv11, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, v8, fv12, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [zero, v7, v8, fv13, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [v44]
// [Asm] live_set: [zero, v7, v8, fv13, v6, s11, v44]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv45]
// [Asm] live_set: [fv45, zero, v7, v8, fv13, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv15]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv15]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [zero, v7, v8, fa0, v6, fv14, s11]
// [Asm] move_origin: [fv15]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v7, v8, fa0, v6, fv14, s11]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv16]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv16 is F
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv16]
// [Asm] move_origin: []
// [Asm] defs: [fv17]
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv16, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv18]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v37]
// [Asm] live_set: [zero, v7, v8, v37, v6, fv14, s11, fv18]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [zero, v7, v8, v6, fv14, s11, fv18, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [zero, v7, v8, fv19, v6, fv14, s11]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v34]
// [Asm] live_set: [zero, v7, v8, fv19, v6, fv14, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v8, fv19, v6, fv14]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v8, fv19, v6, fv14, s11]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v8, v36, fv19, v6, fv14, s11]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, fv19, v6, s11, fv14]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v5, zero, v7, v8, fv19, v6, s11, fv14]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v27, v7, v8, fv19, v6, s11, fv14]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v27, v7, v8, fv19, v6, s11, fv14]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [zero, v27, v7, v8, fv19, v6, s11, fv14, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v27, v7, v8, fv19, v6, s11, fv14]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: [fv29]
// [Asm] live_set: [zero, a0, v27, v7, v8, fv19, fv29, v6, s11, fv14]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [zero, a0, v27, v7, fa0, v8, fv19, v6, fv14, s11]
// [Asm] move_origin: [fv29]
// [Asm] defined: fa0 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [zero, a0, v27, v7, fa0, v8, fv30, fv19, v6, fv14, s11]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fa1]
// [Asm] live_set: [zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm] move_origin: [fv30]
// [Asm] defined: fa1 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [fv31, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [fa2]
// [Asm] live_set: [fa2, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm] move_origin: [fv31]
// [Asm] defined: fa2 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [fv32, fa2, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [fa3]
// [Asm] live_set: [fa1, fa2, fa3, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14]
// [Asm] move_origin: [fv32]
// [Asm] defined: fa3 is F
// [Asm] defs: [fa4]
// [Asm] live_set: [fa1, fa2, fa3, zero, fa4, a0, v27, v7, fa0, v8, fv19, v6, s11]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa4 is F
// [Asm] defs: [fa5]
// [Asm] live_set: [fa5, fa2, fa3, zero, fa4, a0, v27, v7, fa0, v8, v6, s11, fa1]
// [Asm] move_origin: [fv19]
// [Asm] defined: fa5 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, v6, s11, zero, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v7, s11, zero, v22, v8]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v22]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of xloop10l3_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="v8 ← s2", color=green];
// [Asm]   r26 [label="v5 ← a1", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v27 ← a1", color=green];
// [Asm]   r7 [label="v6 ← s0", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r8 [label="v7 ← s1", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r32 [label="v22 ← a0", color=green];
// [Asm]   r24 [label="v37 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r31 [label="v21 ← a0", color=green];
// [Asm]   r17 [label="a4", color=blue];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v44 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v36 ← a0", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="s10", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r22 [label="v24 ← a0", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r30 [label="v28 ← a0", color=green];
// [Asm]   r25 [label="v34 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a3", color=blue];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v23 ← a0", color=green];
// [Asm]   r8 -- r31;
// [Asm]   r9 -- r25;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r9 -- r27;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r9 -- r31;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r29;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r29;
// [Asm]   r29 -- r30;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r4 -- r20;
// [Asm]   r9 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r8 -- r26;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r11 -- r29;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v2-> 1:a2-> 3:s11-> 4:zero-> 5:v3-> 6:v4-> 7:v6-> 8:v7-> 2:a1-> 9:v8-> 11:a0-> 10:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:a3-> 17:a4-> 18:a5-> 19:a6-> 20:a7-> 29:v27-> 30:v28-> 23:v44-> 24:v37-> 27:v36-> 26:v5-> 28:s10-> 31:v21-> 25:v34-> 32:v22-> 21:v23-> 22:v24"
// [Asm]   comment = "v2<-a0;v8<-s2;v5<-a1;v4<-a2;v27<-a1;v6<-s0;v7<-s1;v3<-a1;v22<-a0;v37<-a0;v21<-a0;v44<-a0;v36<-a0;v24<-a0;v28<-a0;v34<-a0;v23<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of xloop10l3_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv31 ← fa2", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv16 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv38 ← fa1", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r32 [label="fv30 ← fa1", color=green];
// [Asm]   r24 [label="fv14 ← fs0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r31 [label="fv29 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv11 ← fa0", color=green];
// [Asm]   r23 [label="fv45 ← fa1", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv17 ← fa1", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv18 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv32 ← fa3", color=green];
// [Asm]   r22 [label="fv13 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv19 ← fa5", color=green];
// [Asm]   r25 [label="fv15 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv10 ← fa0", color=green];
// [Asm]   r21 [label="fv12 ← fa1", color=green];
// [Asm]   r13 -- r24;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r17;
// [Asm]   r14 -- r16;
// [Asm]   r0 -- r24;
// [Asm]   r11 -- r14;
// [Asm]   r7 -- r24;
// [Asm]   r12 -- r34;
// [Asm]   r12 -- r15;
// [Asm]   r30 -- r32;
// [Asm]   r11 -- r16;
// [Asm]   r30 -- r31;
// [Asm]   r24 -- r32;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r32;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r11;
// [Asm]   r17 -- r24;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r14 -- r24;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r30 -- r34;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r24 -- r30;
// [Asm]   r14 -- r30;
// [Asm]   r8 -- r24;
// [Asm]   r12 -- r24;
// [Asm]   r26 -- r27;
// [Asm]   r9 -- r11;
// [Asm]   r24 -- r31;
// [Asm]   r13 -- r30;
// [Asm]   r11 -- r33;
// [Asm]   r4 -- r11;
// [Asm]   r13 -- r34;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r11 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r24 -- r34;
// [Asm]   r9 -- r24;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r11;
// [Asm]   r22 -- r23;
// [Asm]   r24 -- r27;
// [Asm]   r7 -- r11;
// [Asm]   r28 -- r29;
// [Asm]   r15 -- r24;
// [Asm]   r11 -- r34;
// [Asm]   r12 -- r30;
// [Asm]   r1 -- r11;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r2 -- r24;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r11 -- r30;
// [Asm]   r15 -- r16;
// [Asm]   r15 -- r30;
// [Asm]   r20 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r14 -- r15;
// [Asm]   r30 -- r33;
// [Asm]   r24 -- r33;
// [Asm]   r1 -- r24;
// [Asm]   r18 -- r24;
// [Asm]   comment = "0:ft0-> 11:fa0-> 24:fv14-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 30:fv19-> 34:fv32-> 33:fv31-> 32:fv30-> 17:fa6-> 18:fa7-> 31:fv29-> 25:fv15-> 26:fv16-> 27:fv17-> 28:fv18-> 29:fv38-> 19:fv10-> 20:fv11-> 21:fv12-> 22:fv13-> 23:fv45"
// [Asm]   comment = "fv31<-fa2;fv16<-fa0;fv38<-fa1;fv30<-fa1;fv14<-fs0;fv29<-fa0;fv11<-fa0;fv45<-fa1;fv17<-fa1;fv18<-fa0;fv32<-fa3;fv13<-fa0;fv19<-fa5;fv15<-fa0;fv10<-fa0;fv12<-fa1;"
// [Asm] }
// [Asm] 
// [Asm] subst   bge v6, v8, .xloop10l3_1_1 ->   bge s0, s2, .xloop10l3_1_1
// [Asm] subst   mv v6, v2 ->   mv s0, a0
// [Asm] subst   mv v7, v3 ->   mv s1, a1
// [Asm] subst   mv v8, v4 ->   mv s2, a2
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   fcvt.d.w fv10, v6 ->   fcvt.d.w fa0, s0
// [Asm] subst   call dbl4l1_0 ->   call dbl4l1_0
// [Asm] subst   fcvt.d.w fv12, v8 ->   fcvt.d.w fa1, s2
// [Asm] subst   fdiv.d fv13, fv11, fv12 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v44, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv45, v44 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv14, fv13, fv45 ->   fsub.d fs0, fa0, fa1
// [Asm] subst   fcvt.d.w fv15, v7 ->   fcvt.d.w fa0, s1
// [Asm] subst   call dbl4l1_0 ->   call dbl4l1_0
// [Asm] subst   fcvt.d.w fv17, v8 ->   fcvt.d.w fa1, s2
// [Asm] subst   fdiv.d fv18, fv16, fv17 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v37, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv38, v37 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv19, fv18, fv38 ->   fsub.d fa5, fa0, fa1
// [Asm] subst   addi v34, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v5, v34, -8 ->   andi a1, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a1
// [Asm] subst   la v36, iloop29_7 ->   la a0, iloop29_7
// [Asm] subst   sd v36, 0(v5) ->   sd a0, 0(a1)
// [Asm] subst   mv s10, v5 ->   mv s10, a1
// [Asm] subst   ld v27, 0(v5) ->   ld a1, 0(a1)
// [Asm] subst   li v28, 1000 ->   li a0, 1000
// [Asm] subst   fmv.d.x fv29, zero ->   fmv.d.x fa0, zero
// [Asm] subst   fmv.d.x fv30, zero ->   fmv.d.x fa1, zero
// [Asm] subst   fmv.d.x fv31, zero ->   fmv.d.x fa2, zero
// [Asm] subst   fmv.d.x fv32, zero ->   fmv.d.x fa3, zero
// [Asm] subst   fmv.d fa4, fv14 ->   fmv.d fa4, fs0
// [Asm] subst   jalr v27 ->   jalr a1
// [Asm] subst   addi v22, v6, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v6, v22 ->   mv s0, a0
// [Asm] subst   j .xloop10l3_1_0 ->   j .xloop10l3_1_0
// [Asm] pre_assigned_registers: BlockParam(bref=b3, bpref=$b.0) -> v9, Insn(iref=%2) -> v8, Self(fref=f2) -> v0, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v7, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v5, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, v5, zero, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v8]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yloop7l2_2"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="t3", color=blue];
// [Asm]   r6 [label="t0", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="v4 ← s0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t1", color=blue];
// [Asm]   r10 [label="t4", color=blue];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t2", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="v7 ← a0", color=green];
// [Asm]   r18 [label="v2 ← a0", color=green];
// [Asm]   r19 [label="v3 ← a1", color=green];
// [Asm]   r17 [label="v8 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   comment = "0:a0-> 1:v4-> 2:v5-> 3:zero-> 4:a1-> 5:a2-> 6:t0-> 7:t1-> 8:t2-> 9:t3-> 10:t4-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v7-> 17:v8-> 18:v2-> 19:v3-> 20:v9"
// [Asm]   comment = "v9<-a0;v4<-s0;v5<-s1;v7<-a0;v2<-a0;v3<-a1;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yloop7l2_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v4 ->   mv a1, s0
// [Asm] subst   mv a2, v5 ->   mv a2, s1
// [Asm] subst   call xloop10l3_1 ->   call xloop10l3_1
// [Asm] subst   addi v8, v4, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v4, v8 ->   mv s0, a0
// [Asm] subst   j .yloop7l2_2_0 ->   j .yloop7l2_2_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v4, v2 ->   mv s0, a0
// [Asm] subst   mv v5, v3 ->   mv s1, a1
// [Asm] subst   mv v9, zero ->   mv a0, zero
// [Asm] subst   bge v4, v5, .yloop7l2_2_1 ->   bge s0, s1, .yloop7l2_2_1
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mandelbrot1l0_3"];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r0 [label="v2 ← a1", color=green];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a0-> 3:a1-> 4:t0-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:v3"
// [Asm]   comment = "v2<-a1;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mandelbrot1l0_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call yloop7l2_2 ->   call yloop7l2_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f7, fpref=$f.1) -> fv3, FnParam(fref=f7, fpref=$f.5) -> fv7, Self(fref=f7) -> v0, BlockParam(bref=b0, bpref=$b.5) -> fv14, Insn(iref=%9) -> fv24, Insn(iref=%8) -> fv23, Insn(iref=%10) -> fv25, BlockParam(bref=b0, bpref=$b.4) -> fv13, BlockParam(bref=b0, bpref=$b.3) -> fv12, BlockParam(bref=b0, bpref=$b.0) -> v9, BlockParam(bref=b0, bpref=$b.1) -> fv10, BlockParam(bref=b0, bpref=$b.2) -> fv11, Insn(iref=%5) -> fv20, Insn(iref=%0) -> v16, Insn(iref=%4) -> fv19, FnParam(fref=f7, fpref=$f.4) -> fv6, Insn(iref=%3) -> fv18, Insn(iref=%13) -> v27, Insn(iref=%7) -> fv22, FnParam(fref=f7, fpref=$f.2) -> fv4, BlockParam(bref=b5, bpref=$b.0) -> v29, BlockParam(bref=b6, bpref=$b.0) -> v31, FnParam(fref=f7, fpref=$f.0) -> v2, FnParam(fref=f7, fpref=$f.6) -> fv8, Insn(iref=%2) -> fv17, Insn(iref=%1) -> v30, Insn(iref=%11) -> v26, FnParam(fref=f7, fpref=$f.3) -> fv5, BlockParam(bref=b0, bpref=$b.6) -> fv15, Insn(iref=%6) -> fv21, Insn(iref=%12) -> v28
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%4), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [v29]
// [Asm] defined: v31 is X
// [Asm] defs: [v27]
// [Asm] live_set: [fv22, fv23, zero, v27, fv14, fv15, fv18, fv21]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v9]
// [Asm] live_set: [fv22, fv23, zero, fv14, fv15, fv18, v9, fv21]
// [Asm] move_origin: [v27]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [fv22, fv10, fv23, zero, fv14, fv15, v9, fv21]
// [Asm] move_origin: [fv18]
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv22, fv10, fv23, fv11, zero, fv14, fv15, v9]
// [Asm] move_origin: [fv21]
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv10, fv23, fv11, zero, fv12, fv14, fv15, v9]
// [Asm] move_origin: [fv22]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] move_origin: [fv23]
// [Asm] defined: fv13 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] move_origin: [fv14]
// [Asm] defs: []
// [Asm] live_set: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] move_origin: [fv15]
// [Asm] defs: []
// [Asm] live_set: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, a0, fa0, fa1, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, a0, fa0, fa1]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, fa0, fa1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, fv3, fa1, v2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv3 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [fa5, fa3, fa2, fa4, zero, fv4, fv3, v2]
// [Asm] move_origin: [fa1]
// [Asm] defined: fv4 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, fa5, fa3, zero, fa4, fv4, fv3, v2]
// [Asm] move_origin: [fa2]
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fa5, zero, fa4, fv4, fv6, fv3, v2]
// [Asm] move_origin: [fa3]
// [Asm] defined: fv6 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv5, fa5, zero, fv4, fv6, fv3, fv7, v2]
// [Asm] move_origin: [fa4]
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [fv5, zero, fv8, fv4, fv6, fv3, fv7, v2]
// [Asm] move_origin: [fa5]
// [Asm] defined: fv8 is F
// [Asm] defs: [v9]
// [Asm] live_set: [fv5, zero, fv8, fv4, fv6, v9, fv3, fv7]
// [Asm] move_origin: [v2]
// [Asm] defined: v9 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [fv5, fv10, zero, fv8, fv4, fv6, v9, fv7]
// [Asm] move_origin: [fv3]
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv5, fv10, fv11, zero, fv8, fv6, v9, fv7]
// [Asm] move_origin: [fv4]
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv10, fv11, zero, fv8, fv12, fv6, v9, fv7]
// [Asm] move_origin: [fv5]
// [Asm] defined: fv12 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [fv10, fv11, zero, fv13, fv8, fv12, v9, fv7]
// [Asm] move_origin: [fv6]
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv10, fv11, zero, fv13, fv8, fv12, fv14, v9]
// [Asm] move_origin: [fv7]
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] move_origin: [fv8]
// [Asm] defined: fv15 is F
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v29]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: [fv17]
// [Asm] live_set: [fv10, zero, fv11, fv14, fv15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [fv10, zero, fv11, fv14, fv18, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, zero, fv11, fv14, fv18, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [zero, fv11, fa0, fv14, fv18, fv15, v9]
// [Asm] move_origin: [fv10]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, fv11, fa0, fv14, fv18, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [zero, fv11, fv19, fv14, fv18, fv15, v9]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [zero, fv11, fv19, fv14, fv18, fv15, v9]
// [Asm] move_origin: []
// [Asm] defs: [fv21]
// [Asm] live_set: [zero, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, zero, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv22, fv23, zero, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [v38]
// [Asm] live_set: [fv22, fv23, zero, v38, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [fv39]
// [Asm] live_set: [fv22, fv23, zero, fv39, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv39 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v40, fv22, fv23, zero, fv39, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [fv41]
// [Asm] live_set: [fv22, fv23, zero, fv39, fv41, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv41 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv22, fv23, fv24, zero, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [fv22, fv23, fv24, zero, fv25, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [v26]
// [Asm] live_set: [fv22, fv23, zero, v26, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, zero, fv14, fv18, fv15, v9, fv21]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v32]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v30]
// [Asm] live_set: [v30]
// [Asm] move_origin: [a0]
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v30]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v31]
// [Asm] move_origin: [v30]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v31]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of iloop29_7"];
// [Asm]   r0 [label="v31 ← a0", color=green];
// [Asm]   r20 [label="v29 ← a0", color=green];
// [Asm]   r23 [label="v26 ← a0", color=green];
// [Asm]   r3 [label="v9 ← s0", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="v2 ← a0", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v0 ← a1", color=green];
// [Asm]   r1 [label="v27 ← a0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="v40 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r24 [label="v32 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r25 [label="v30 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v28 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v38 ← a0", color=green];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r13;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r17;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r2 -- r16;
// [Asm]   r5 -- r14;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r5 -- r15;
// [Asm]   r3 -- r8;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v31-> 1:v27-> 2:zero-> 3:v9-> 5:a0-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 4:v0-> 21:v38-> 22:v40-> 23:v26-> 6:v2-> 19:v28-> 20:v29-> 24:v32-> 25:v30"
// [Asm]   comment = "v31<-a0;v29<-a0;v26<-a0;v9<-s0;v2<-a0;v0<-a1;v27<-a0;v40<-a0;v32<-a0;v30<-a0;v28<-a0;v38<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of iloop29_7"];
// [Asm]   r0 [label="fv22 ← fa0", color=green];
// [Asm]   r38 [label="fv41 ← fa4", color=green];
// [Asm]   r33 [label="fa6", color=blue];
// [Asm]   r9 [label="fv13 ← fa1", color=green];
// [Asm]   r26 [label="ft4", color=blue];
// [Asm]   r6 [label="fv10 ← fa3", color=green];
// [Asm]   r13 [label="fa4", color=blue];
// [Asm]   r4 [label="fv18 ← fs2", color=green];
// [Asm]   r29 [label="ft7", color=blue];
// [Asm]   r35 [label="fv17 ← fa0", color=green];
// [Asm]   r7 [label="fv11 ← fs3", color=green];
// [Asm]   r10 [label="fa5", color=blue];
// [Asm]   r8 [label="fv12 ← fa0", color=green];
// [Asm]   r5 [label="fv21 ← fa2", color=green];
// [Asm]   r36 [label="fv19 ← fa0", color=green];
// [Asm]   r24 [label="ft2", color=blue];
// [Asm]   r32 [label="ft10", color=blue];
// [Asm]   r15 [label="fa1", color=blue];
// [Asm]   r31 [label="ft9", color=blue];
// [Asm]   r39 [label="fv24 ← fa3", color=green];
// [Asm]   r17 [label="fv4 ← fa6", color=green];
// [Asm]   r12 [label="fa2", color=blue];
// [Asm]   r37 [label="fv39 ← fa3", color=green];
// [Asm]   r20 [label="fv7 ← fa4", color=green];
// [Asm]   r23 [label="ft1", color=blue];
// [Asm]   r3 [label="fv15 ← fs1", color=green];
// [Asm]   r27 [label="ft5", color=blue];
// [Asm]   r40 [label="fv25 ← fa4", color=green];
// [Asm]   r1 [label="fv23 ← fa1", color=green];
// [Asm]   r28 [label="ft6", color=blue];
// [Asm]   r11 [label="fa3", color=blue];
// [Asm]   r34 [label="fa7", color=blue];
// [Asm]   r22 [label="ft0", color=blue];
// [Asm]   r14 [label="fa0", color=blue];
// [Asm]   r30 [label="ft8", color=blue];
// [Asm]   r25 [label="ft3", color=blue];
// [Asm]   r2 [label="fv14 ← fs0", color=green];
// [Asm]   r16 [label="fv3 ← fa7", color=green];
// [Asm]   r18 [label="fv5 ← fa0", color=green];
// [Asm]   r19 [label="fv6 ← fa1", color=green];
// [Asm]   r21 [label="fv8 ← fa2", color=green];
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r16 -- r20;
// [Asm]   r6 -- r35;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r14 -- r34;
// [Asm]   r2 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r10 -- r18;
// [Asm]   r3 -- r39;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r4 -- r29;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r4 -- r25;
// [Asm]   r39 -- r40;
// [Asm]   r2 -- r36;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r38;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r14;
// [Asm]   r14 -- r15;
// [Asm]   r14 -- r32;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r14 -- r26;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r38;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r19;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r40;
// [Asm]   r7 -- r22;
// [Asm]   r14 -- r33;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r25;
// [Asm]   r7 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r0 -- r39;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r37;
// [Asm]   r7 -- r36;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r4 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r20 -- r21;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r37;
// [Asm]   r14 -- r27;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r7;
// [Asm]   r10 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r34;
// [Asm]   r16 -- r17;
// [Asm]   r14 -- r30;
// [Asm]   r14 -- r28;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r0 -- r40;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r21;
// [Asm]   r14 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r24;
// [Asm]   r7 -- r8;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r17;
// [Asm]   r4 -- r37;
// [Asm]   r8 -- r19;
// [Asm]   r14 -- r23;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r13;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r4 -- r30;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r7 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r40;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:fv22-> 1:fv23-> 2:fv14-> 3:fv15-> 4:fv18-> 5:fv21-> 6:fv10-> 7:fv11-> 37:fv39-> 38:fv41-> 39:fv24-> 40:fv25-> 8:fv12-> 9:fv13-> 21:fv8-> 20:fv7-> 10:fa5-> 19:fv6-> 18:fv5-> 13:fa4-> 17:fv4-> 16:fv3-> 11:fa3-> 14:fa0-> 12:fa2-> 15:fa1-> 22:ft0-> 23:ft1-> 24:ft2-> 25:ft3-> 26:ft4-> 27:ft5-> 28:ft6-> 29:ft7-> 30:ft8-> 31:ft9-> 32:ft10-> 33:fa6-> 34:fa7-> 35:fv17-> 36:fv19"
// [Asm]   comment = "fv22<-fa0;fv41<-fa4;fv13<-fa1;fv10<-fa3;fv18<-fs2;fv17<-fa0;fv11<-fs3;fv12<-fa0;fv21<-fa2;fv19<-fa0;fv24<-fa3;fv4<-fa6;fv39<-fa3;fv7<-fa4;fv15<-fs1;fv25<-fa4;fv23<-fa1;fv14<-fs0;fv3<-fa7;fv5<-fa0;fv6<-fa1;fv8<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v27, v9, -1 ->   addi a0, s0, -1
// [Asm] subst   mv v9, v27 ->   mv s0, a0
// [Asm] subst   fmv.d fv10, fv18 ->   fmv.d fa3, fs2
// [Asm] subst   fmv.d fv11, fv21 ->   fmv.d fs3, fa2
// [Asm] subst   j .iloop29_7_0 ->   j .iloop29_7_0
// [Asm] subst   beq v9, zero, .iloop29_7_1 ->   beq s0, zero, .iloop29_7_1
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   fmv.d fv3, fa0 ->   fmv.d fa7, fa0
// [Asm] subst   fmv.d fv4, fa1 ->   fmv.d fa6, fa1
// [Asm] subst   fmv.d fv5, fa2 ->   fmv.d fa0, fa2
// [Asm] subst   fmv.d fv6, fa3 ->   fmv.d fa1, fa3
// [Asm] subst   fmv.d fv8, fa5 ->   fmv.d fa2, fa5
// [Asm] subst   mv v9, v2 ->   mv s0, a0
// [Asm] subst   fmv.d fv10, fv3 ->   fmv.d fa3, fa7
// [Asm] subst   fmv.d fv11, fv4 ->   fmv.d fs3, fa6
// [Asm] subst   fmv.d fv14, fv7 ->   fmv.d fs0, fa4
// [Asm] subst   fmv.d fv15, fv8 ->   fmv.d fs1, fa2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fsub.d fv17, fv12, fv13 ->   fsub.d fa0, fa0, fa1
// [Asm] subst   fadd.d fv18, fv17, fv14 ->   fadd.d fs2, fa0, fs0
// [Asm] subst   fmv.d fa0, fv10 ->   fmv.d fa0, fa3
// [Asm] subst   call dbl4l1_0 ->   call dbl4l1_0
// [Asm] subst   fmadd.d fv21, fv19, fv11, fv15 ->   fmadd.d fa2, fa0, fs3, fs1
// [Asm] subst   fmul.d fv22, fv18, fv18 ->   fmul.d fa0, fs2, fs2
// [Asm] subst   fmul.d fv23, fv21, fv21 ->   fmul.d fa1, fa2, fa2
// [Asm] subst   li v38, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv39, v38 ->   fmv.d.x fa3, a0
// [Asm] subst   li v40, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv41, v40 ->   fmv.d.x fa4, a0
// [Asm] subst   fmul.d fv24, fv39, fv41 ->   fmul.d fa3, fa3, fa4
// [Asm] subst   fmadd.d fv25, fv21, fv21, fv22 ->   fmadd.d fa4, fa2, fa2, fa0
// [Asm] subst   fle.d v26, fv24, fv25 ->   fle.d a0, fa3, fa4
// [Asm] subst   beq v26, zero, .iloop29_7_4 ->   beq a0, zero, .iloop29_7_4
// [Asm] subst   ret ->   ret
// [Asm] subst   li v32, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .iloop29_7_6 ->   j .iloop29_7_6
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> fv2, Insn(iref=%0) -> fv3
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dbl4l1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dbl4l1_0"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fadd.d fv3, fv2, fv2 ->   fadd.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main75l1_4:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main75l1_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 40  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call mandelbrot1l0_3  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_12:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main75l1_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yloop7l2_2:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .yloop7l2_2_4:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v5], upward_exposed: [v4, v5], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .yloop7l2_2_0:
// [Asm] # control
// [Asm]   bge v4, v5, .yloop7l2_2_1  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, zero, a0, v8, v4, a2, a1], upward_exposed: [v4, v5, zero], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .yloop7l2_2_2:
// [Asm]   # save_ctx2  # live: [v4, v5, zero]
// [Asm]   mv a0, zero  # live: [v4, v5, zero, a0]
// [Asm]   mv a1, v4  # live: [v4, a1, v5, zero, a0]
// [Asm]   mv a2, v5  # live: [v4, a2, a1, v5, zero, a0]
// [Asm]   call xloop10l3_1  # live: [v4, v5, zero, a0]
// [Asm]   mv v7, a0  # live: [v4, v5, zero]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero]
// [Asm]   addi v8, v4, 1  # live: [v5, zero, v8]
// [Asm] # control
// [Asm]   mv v4, v8  # live: [v4, v5, zero]
// [Asm]   mv v5, v5  # live: [v4, v5, zero]
// [Asm]   j .yloop7l2_2_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .yloop7l2_2_1:
// [Asm] # control
// [Asm]   mv v9, zero  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .yloop7l2_2_3:
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] xloop10l3_1:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .xloop10l3_1_4:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v8], upward_exposed: [v6, v8], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v7, v6, s11, zero, v8]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .xloop10l3_1_0:
// [Asm] # control
// [Asm]   bge v6, v8, .xloop10l3_1_1  # live: [v8, v6, s11, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v22, fv30, fv12, a1, s11, fv15, v44, v28, fa1, fv38, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, v6, ft4, v5, ft9, fa4, ft2, v37, a3, a7, fa7, fa3, fv11, ft3, fv29, t2, fv18, fv17, fv10, t1, fv19, ft0, ft1, fv14, fv16, v34, ft7, fv45, fv32, v21, a5, a0, v36, a2, s10, ft8, t3, t0, fa5, fv31, fa0, fv13, t4], uses: [fv10, v22, v7, fv30, fv19, fv12, s11, fv14, fv16, v28, v44, fv15, fa1, fv38, fa2, zero, v27, v8, v6, v34, fv45, v5, fv32, fa4, a0, v36, v37, fa5, fv31, fa3, fv11, fa0, fv13, fv29, fv18, fv17], upward_exposed: [v7, v6, s11, zero, v8], params_defs: []
// [Asm] # live_in: [v8, v6, s11, zero, v7], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .xloop10l3_1_2:
// [Asm]   fcvt.d.w fv10, v6  # live: [fv10, zero, v7, v8, v6, s11]
// [Asm]   # save_ctx2  # live: [fv10, zero, v7, v8, v6, s11]
// [Asm]   fmv.d fa0, fv10  # live: [zero, v7, v8, fa0, v6, s11]
// [Asm]   call dbl4l1_0  # live: [zero, v7, v8, fa0, v6, s11]
// [Asm]   fmv.d fv11, fa0  # live: [zero, fv11, v7, v8, v6, s11]
// [Asm]   # restore_ctx2  # live: [zero, fv11, v7, v8, v6, s11]
// [Asm]   fcvt.d.w fv12, v8  # live: [zero, fv11, v7, v8, fv12, v6, s11]
// [Asm]   fdiv.d fv13, fv11, fv12  # live: [zero, v7, v8, fv13, v6, s11]
// [Asm]   li v44, 4609434218613702656  # live: [zero, v7, v8, fv13, v6, s11, v44]
// [Asm]   fmv.d.x fv45, v44  # live: [fv45, zero, v7, v8, fv13, v6, s11]
// [Asm]   fsub.d fv14, fv13, fv45  # live: [zero, v7, v8, v6, fv14, s11]
// [Asm]   fcvt.d.w fv15, v7  # live: [zero, v7, v8, v6, fv14, s11, fv15]
// [Asm]   # save_ctx2  # live: [zero, v7, v8, v6, fv14, s11, fv15]
// [Asm]   fmv.d fa0, fv15  # live: [zero, v7, v8, fa0, v6, fv14, s11]
// [Asm]   call dbl4l1_0  # live: [zero, v7, v8, fa0, v6, fv14, s11]
// [Asm]   fmv.d fv16, fa0  # live: [zero, v7, v8, v6, fv14, s11, fv16]
// [Asm]   # restore_ctx2  # live: [zero, v7, v8, v6, fv14, s11, fv16]
// [Asm]   fcvt.d.w fv17, v8  # live: [zero, v7, v8, v6, fv14, s11, fv16, fv17]
// [Asm]   fdiv.d fv18, fv16, fv17  # live: [zero, v7, v8, v6, fv14, s11, fv18]
// [Asm]   li v37, 4607182418800017408  # live: [zero, v7, v8, v37, v6, fv14, s11, fv18]
// [Asm]   fmv.d.x fv38, v37  # live: [zero, v7, v8, v6, fv14, s11, fv18, fv38]
// [Asm]   fsub.d fv19, fv18, fv38  # live: [zero, v7, v8, fv19, v6, fv14, s11]
// [Asm]   addi v34, s11, -8  # live: [zero, v7, v8, fv19, v6, fv14, v34]
// [Asm]   andi v5, v34, -8  # live: [v5, zero, v7, v8, fv19, v6, fv14]
// [Asm]   mv s11, v5  # live: [v5, zero, v7, v8, fv19, v6, fv14, s11]
// [Asm]   la v36, iloop29_7  # live: [v5, zero, v7, v8, v36, fv19, v6, fv14, s11]
// [Asm]   sd v36, 0(v5)  # live: [v5, zero, v7, v8, fv19, v6, s11, fv14]
// [Asm]   mv s10, v5  # live: [v5, zero, v7, v8, fv19, v6, s11, fv14]
// [Asm]   ld v27, 0(v5)  # live: [zero, v27, v7, v8, fv19, v6, s11, fv14]
// [Asm]   # save_ctx2  # live: [zero, v27, v7, v8, fv19, v6, s11, fv14]
// [Asm]   li v28, 1000  # live: [zero, v27, v7, v8, fv19, v6, s11, fv14, v28]
// [Asm]   mv a0, v28  # live: [zero, a0, v27, v7, v8, fv19, v6, s11, fv14]
// [Asm]   fmv.d.x fv29, zero  # live: [zero, a0, v27, v7, v8, fv19, fv29, v6, s11, fv14]
// [Asm]   fmv.d fa0, fv29  # live: [zero, a0, v27, v7, fa0, v8, fv19, v6, fv14, s11]
// [Asm]   fmv.d.x fv30, zero  # live: [zero, a0, v27, v7, fa0, v8, fv30, fv19, v6, fv14, s11]
// [Asm]   fmv.d fa1, fv30  # live: [zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm]   fmv.d.x fv31, zero  # live: [fv31, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm]   fmv.d fa2, fv31  # live: [fa2, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm]   fmv.d.x fv32, zero  # live: [fv32, fa2, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14, fa1]
// [Asm]   fmv.d fa3, fv32  # live: [fa1, fa2, fa3, zero, a0, v27, v7, fa0, v8, fv19, v6, s11, fv14]
// [Asm]   fmv.d fa4, fv14  # live: [fa1, fa2, fa3, zero, fa4, a0, v27, v7, fa0, v8, fv19, v6, s11]
// [Asm]   fmv.d fa5, fv19  # live: [fa5, fa2, fa3, zero, fa4, a0, v27, v7, fa0, v8, v6, s11, fa1]
// [Asm]   jalr v27  # live: [v7, v6, s11, zero, a0, v8]
// [Asm]   mv v21, a0  # live: [v7, v6, s11, zero, v8]
// [Asm]   # restore_ctx2  # live: [v7, v6, s11, zero, v8]
// [Asm]   addi v22, v6, 1  # live: [v7, s11, zero, v22, v8]
// [Asm] # control
// [Asm]   mv v6, v22  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, s11, zero, v8]
// [Asm]   j .xloop10l3_1_0  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2], uses: [a0, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .xloop10l3_1_1:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call minimbt_print_endline  # live: [zero, a0]
// [Asm]   mv v23, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v24, a0], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: []
// [Asm] # block parameters: [v24]
// [Asm] .xloop10l3_1_3:
// [Asm] # control
// [Asm]   mv a0, v24  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] iloop29_7:
// [Asm] # block info: defs: [fv10, fv8, v0, fv12, fv4, fv14, fv6, fv15, v9, fv5, fv11, fv13, fv3, fv7, v2], uses: [a0, fa4, fv8, fv4, fv6, s10, fa1, fv5, fa5, fa2, fa3, fa0, fv3, fv7, v2], upward_exposed: [fa5, fa2, fa3, a0, fa4, fa0, s10, fa1], params_defs: []
// [Asm] # live_in: [fa5, fa2, fa3, a0, fa4, zero, fa0, s10, fa1], live_out: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .iloop29_7_7:
// [Asm]   # save_ctx1  # live: [fa5, fa3, fa2, fa4, zero, a0, fa0, fa1, s10]
// [Asm]   mv v0, s10  # live: [fa5, fa3, fa2, fa4, zero, a0, fa0, fa1]
// [Asm]   mv v2, a0  # live: [fa5, fa3, fa2, fa4, zero, fa0, fa1, v2]
// [Asm]   fmv.d fv3, fa0  # live: [fa5, fa3, fa2, fa4, zero, fv3, fa1, v2]
// [Asm]   fmv.d fv4, fa1  # live: [fa5, fa3, fa2, fa4, zero, fv4, fv3, v2]
// [Asm]   fmv.d fv5, fa2  # live: [fv5, fa5, fa3, zero, fa4, fv4, fv3, v2]
// [Asm]   fmv.d fv6, fa3  # live: [fv5, fa5, zero, fa4, fv4, fv6, fv3, v2]
// [Asm]   fmv.d fv7, fa4  # live: [fv5, fa5, zero, fv4, fv6, fv3, fv7, v2]
// [Asm]   fmv.d fv8, fa5  # live: [fv5, zero, fv8, fv4, fv6, fv3, fv7, v2]
// [Asm] # control
// [Asm]   mv v9, v2  # live: [fv5, zero, fv8, fv4, fv6, v9, fv3, fv7]
// [Asm]   fmv.d fv10, fv3  # live: [fv5, fv10, zero, fv8, fv4, fv6, v9, fv7]
// [Asm]   fmv.d fv11, fv4  # live: [fv5, fv10, fv11, zero, fv8, fv6, v9, fv7]
// [Asm]   fmv.d fv12, fv5  # live: [fv10, fv11, zero, fv8, fv12, fv6, v9, fv7]
// [Asm]   fmv.d fv13, fv6  # live: [fv10, fv11, zero, fv13, fv8, fv12, v9, fv7]
// [Asm]   fmv.d fv14, fv7  # live: [fv10, fv11, zero, fv13, fv8, fv12, fv14, v9]
// [Asm]   fmv.d fv15, fv8  # live: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [fv10, fv11, fv13, fv12, fv14, fv15, v9]
// [Asm] # live_in: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9], live_out: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] # block parameters: [v9, fv10, fv11, fv12, fv13, fv14, fv15]
// [Asm] .iloop29_7_0:
// [Asm] # control
// [Asm]   beq v9, zero, .iloop29_7_1  # live: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, fv23, fv24, fv39, v26, fv19, ft0, ft1, a1, fa1, fv22, fa2, ft6, fv25, fa6, fv41, a4, a6, ft5, ft10, fv21, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, v38, t2, fv18, fv17, v40], uses: [fv10, fv24, fv39, v26, fv19, fv12, fv14, fv15, fv22, fv11, fv25, zero, fv41, fa0, fv13, v38, fv18, fv17, fv21, v40], upward_exposed: [fv10, fv11, zero, fv13, fv12, fv14, fv15], params_defs: []
// [Asm] # live_in: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9], live_out: [fv22, fv23, zero, fv14, fv18, fv15, v9, fv21]
// [Asm] # block parameters: []
// [Asm] .iloop29_7_2:
// [Asm]   fsub.d fv17, fv12, fv13  # live: [fv10, zero, fv11, fv14, fv15, v9, fv17]
// [Asm]   fadd.d fv18, fv17, fv14  # live: [fv10, zero, fv11, fv14, fv18, fv15, v9]
// [Asm]   # save_ctx2  # live: [fv10, zero, fv11, fv14, fv18, fv15, v9]
// [Asm]   fmv.d fa0, fv10  # live: [zero, fv11, fa0, fv14, fv18, fv15, v9]
// [Asm]   call dbl4l1_0  # live: [zero, fv11, fa0, fv14, fv18, fv15, v9]
// [Asm]   fmv.d fv19, fa0  # live: [zero, fv11, fv19, fv14, fv18, fv15, v9]
// [Asm]   # restore_ctx2  # live: [zero, fv11, fv19, fv14, fv18, fv15, v9]
// [Asm]   fmadd.d fv21, fv19, fv11, fv15  # live: [zero, fv14, fv18, fv15, v9, fv21]
// [Asm]   fmul.d fv22, fv18, fv18  # live: [fv22, zero, fv14, fv18, fv15, v9, fv21]
// [Asm]   fmul.d fv23, fv21, fv21  # live: [fv22, fv23, zero, fv14, fv18, fv15, v9, fv21]
// [Asm]   li v38, 4611686018427387904  # live: [fv22, fv23, zero, v38, fv14, fv18, fv15, v9, fv21]
// [Asm]   fmv.d.x fv39, v38  # live: [fv22, fv23, zero, fv39, fv14, fv18, fv15, v9, fv21]
// [Asm]   li v40, 4611686018427387904  # live: [v40, fv22, fv23, zero, fv39, fv14, fv18, fv15, v9, fv21]
// [Asm]   fmv.d.x fv41, v40  # live: [fv22, fv23, zero, fv39, fv41, fv14, fv18, fv15, v9, fv21]
// [Asm]   fmul.d fv24, fv39, fv41  # live: [fv22, fv23, fv24, zero, fv14, fv18, fv15, v9, fv21]
// [Asm]   fmadd.d fv25, fv21, fv21, fv22  # live: [fv22, fv23, fv24, zero, fv25, fv14, fv18, fv15, v9, fv21]
// [Asm]   fle.d v26, fv24, fv25  # live: [fv22, fv23, zero, v26, fv14, fv18, fv15, v9, fv21]
// [Asm] # control
// [Asm]   beq v26, zero, .iloop29_7_4  # live: [fv22, fv23, zero, fv14, fv18, fv15, v9, fv21]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v28, fa1, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v28, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v29]
// [Asm] # block parameters: []
// [Asm] .iloop29_7_3:
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v28, a0  # live: [v28]
// [Asm]   # restore_ctx2  # live: [v28]
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v29]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v29], upward_exposed: [v29], params_defs: [v29]
// [Asm] # live_in: [v29], live_out: [v31]
// [Asm] # block parameters: [v29]
// [Asm] .iloop29_7_5:
// [Asm] # control
// [Asm]   mv v31, v29  # live: [v31]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v31, a0], upward_exposed: [v31], params_defs: [v31]
// [Asm] # live_in: [v31], live_out: []
// [Asm] # block parameters: [v31]
// [Asm] .iloop29_7_6:
// [Asm] # control
// [Asm]   mv a0, v31  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v32, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v31, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v32, a0, v30], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v31]
// [Asm] # block parameters: []
// [Asm] .iloop29_7_1:
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v32, 1  # live: [v32]
// [Asm]   mv a0, v32  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v30, a0  # live: [v30]
// [Asm]   # restore_ctx2  # live: [v30]
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v31]
// [Asm]   j .iloop29_7_6  # live: [v31]
// [Asm] 
// [Asm] # block info: defs: [fv13, fv10, fv12, v9, fv11, v27], uses: [fv22, fv23, v27, fv14, fv18, fv15, v9, fv21], upward_exposed: [fv22, fv23, fv14, fv18, fv15, v9, fv21], params_defs: []
// [Asm] # live_in: [fv22, fv23, zero, fv14, fv18, fv15, v9, fv21], live_out: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .iloop29_7_4:
// [Asm]   addi v27, v9, -1  # live: [fv22, fv23, zero, v27, fv14, fv15, fv18, fv21]
// [Asm] # control
// [Asm]   mv v9, v27  # live: [fv22, fv23, zero, fv14, fv15, fv18, v9, fv21]
// [Asm]   fmv.d fv10, fv18  # live: [fv22, fv10, fv23, zero, fv14, fv15, v9, fv21]
// [Asm]   fmv.d fv11, fv21  # live: [fv22, fv10, fv23, fv11, zero, fv14, fv15, v9]
// [Asm]   fmv.d fv12, fv22  # live: [fv10, fv23, fv11, zero, fv12, fv14, fv15, v9]
// [Asm]   fmv.d fv13, fv23  # live: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm]   fmv.d fv14, fv14  # live: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm]   fmv.d fv15, fv15  # live: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm]   j .iloop29_7_0  # live: [fv10, fv11, zero, fv13, fv12, fv14, fv15, v9]
// [Asm] 
// [Asm] # leaf false
// [Asm] mandelbrot1l0_3:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a1, a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .mandelbrot1l0_3_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [a0, v2]
// [Asm]   mv a1, v2  # live: [a1, a0]
// [Asm]   call yloop7l2_2  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_12  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] dbl4l1_0:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [fa0], params_defs: []
// [Asm] # live_in: [fa0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dbl4l1_0_0:
// [Asm]   # save_ctx1  # live: [fa0]
// [Asm]   fmv.d fv2, fa0  # live: [fv2]
// [Asm]   fadd.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("mandelbrot", Unit), args: [("w", Int)], body: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))
// [Knf] build_knf: Prim(Var("f"), Var("f"), Add, kind=Some(Double))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit)
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1)
// [Knf] build_knf: LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [Var("zr")])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))
// [Knf] build_knf: Var("tr")
// [Knf] build_knf: Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))
// [Knf] build_knf: Var("ti")
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))
// [Knf] build_knf: Prim(Double(2), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))
// [Knf] build_knf: App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("xloop"), [Int(0), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("yloop"), [Int(0)])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("mandelbrot"), [Int(40)])
// [Knf] build_knf: Var("mandelbrot")
// [Knf] build_knf: Int(40)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75l1_4
// [Main]   .type main75l1_4, @function
// [Main] # leaf false
// [Main] main75l1_4:
// [Main] .main75l1_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 40
// [Main]   call mandelbrot1l0_3
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_12
// [Main]   .type T$start_12, @function
// [Main] # leaf false
// [Main] T$start_12:
// [Main] .T$start_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main75l1_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yloop7l2_2
// [Main]   .type yloop7l2_2, @function
// [Main] # leaf false
// [Main] yloop7l2_2:
// [Main] .yloop7l2_2_4:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .yloop7l2_2_0:
// [Main]   bge s0, s1, .yloop7l2_2_1
// [Main] 
// [Main] .yloop7l2_2_2:
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   mv a2, s1
// [Main]   call xloop10l3_1
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .yloop7l2_2_0
// [Main] 
// [Main] .yloop7l2_2_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop7l2_2_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl xloop10l3_1
// [Main]   .type xloop10l3_1, @function
// [Main] # leaf false
// [Main] xloop10l3_1:
// [Main] .xloop10l3_1_4:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   fsd fs0, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .xloop10l3_1_0:
// [Main]   bge s0, s2, .xloop10l3_1_1
// [Main] 
// [Main] .xloop10l3_1_2:
// [Main]   fcvt.d.w fa0, s0
// [Main]   call dbl4l1_0
// [Main]   fcvt.d.w fa1, s2
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fs0, fa0, fa1
// [Main]   fcvt.d.w fa0, s1
// [Main]   call dbl4l1_0
// [Main]   fcvt.d.w fa1, s2
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa5, fa0, fa1
// [Main]   addi a0, s11, -8
// [Main]   andi a1, a0, -8
// [Main]   mv s11, a1
// [Main]   la a0, iloop29_7
// [Main]   sd a0, 0(a1)
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   li a0, 1000
// [Main]   fmv.d.x fa0, zero
// [Main]   fmv.d.x fa1, zero
// [Main]   fmv.d.x fa2, zero
// [Main]   fmv.d.x fa3, zero
// [Main]   fmv.d fa4, fs0
// [Main]   jalr a1
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .xloop10l3_1_0
// [Main] 
// [Main] .xloop10l3_1_1:
// [Main]   call minimbt_print_endline
// [Main]   mv a0, zero
// [Main] 
// [Main] .xloop10l3_1_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   fld fs0, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl iloop29_7
// [Main]   .type iloop29_7, @function
// [Main] # leaf false
// [Main] iloop29_7:
// [Main] .iloop29_7_7:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   fsd fs0, 16(sp)
// [Main]   fsd fs1, 24(sp)
// [Main]   fsd fs2, 32(sp)
// [Main]   fsd fs3, 40(sp)
// [Main]   mv a1, s10
// [Main]   fmv.d fa7, fa0
// [Main]   fmv.d fa6, fa1
// [Main]   fmv.d fa0, fa2
// [Main]   fmv.d fa1, fa3
// [Main]   fmv.d fa2, fa5
// [Main]   mv s0, a0
// [Main]   fmv.d fa3, fa7
// [Main]   fmv.d fs3, fa6
// [Main]   fmv.d fs0, fa4
// [Main]   fmv.d fs1, fa2
// [Main] 
// [Main] .iloop29_7_0:
// [Main]   beq s0, zero, .iloop29_7_1
// [Main] 
// [Main] .iloop29_7_2:
// [Main]   fsub.d fa0, fa0, fa1
// [Main]   fadd.d fs2, fa0, fs0
// [Main]   fmv.d fa0, fa3
// [Main]   call dbl4l1_0
// [Main]   fmadd.d fa2, fa0, fs3, fs1
// [Main]   fmul.d fa0, fs2, fs2
// [Main]   fmul.d fa1, fa2, fa2
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa3, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa4, a0
// [Main]   fmul.d fa3, fa3, fa4
// [Main]   fmadd.d fa4, fa2, fa2, fa0
// [Main]   fle.d a0, fa3, fa4
// [Main]   beq a0, zero, .iloop29_7_4
// [Main] 
// [Main] .iloop29_7_3:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .iloop29_7_5:
// [Main] 
// [Main] .iloop29_7_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   fld fs0, 16(sp)
// [Main]   fld fs1, 24(sp)
// [Main]   fld fs2, 32(sp)
// [Main]   fld fs3, 40(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .iloop29_7_1:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .iloop29_7_6
// [Main] 
// [Main] .iloop29_7_4:
// [Main]   addi a0, s0, -1
// [Main]   mv s0, a0
// [Main]   fmv.d fa3, fs2
// [Main]   fmv.d fs3, fa2
// [Main]   j .iloop29_7_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mandelbrot1l0_3
// [Main]   .type mandelbrot1l0_3, @function
// [Main] # leaf false
// [Main] mandelbrot1l0_3:
// [Main] .mandelbrot1l0_3_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   call yloop7l2_2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_12
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dbl4l1_0
// [Main]   .type dbl4l1_0, @function
// [Main] # leaf true
// [Main] dbl4l1_0:
// [Main] .dbl4l1_0_0:
// [Main]   fadd.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %15: Call(ty=Unit, f=f1, args=[Insn(iref=%14), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f2, args=[Insn(iref=%2), FnParam(fref=f2, fpref=$f.1)])
// [CoreOpt] eliminated tail rec call %14: Apply(ty=Unit, f=Self(fref=f7), args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), FnParam(fref=f7, fpref=$f.5), FnParam(fref=f7, fpref=$f.6)])
