// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.211"];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r0 [label="v3 ← a0", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v3-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v2"
// [Asm]   comment = "v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.211"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v3, 40 ->   li a0, 40
// [Asm] subst   call mandelbrot.207 ->   call mandelbrot.207
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.211 ->   call main.211
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v44, BlockParam(bref=b2, bpref=$b.0) -> v4, BlockParam(bref=b28, bpref=$b.0) -> v38, Insn(iref=%8) -> fv12, Insn(iref=%10) -> fv14, Insn(iref=%27) -> fv34, BlockParam(bref=b23, bpref=$b.4) -> fv22, BlockParam(bref=b23, bpref=$b.2) -> fv20, Insn(iref=%14) -> fv17, Insn(iref=%25) -> fv32, Insn(iref=%4) -> v43, BlockParam(bref=b23, bpref=$b.3) -> fv21, BlockParam(bref=b23, bpref=$b.5) -> fv23, BlockParam(bref=b6, bpref=$b.0) -> v45, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%11) -> fv15, Insn(iref=%26) -> fv33, BlockParam(bref=b23, bpref=$b.0) -> v18, Insn(iref=%6) -> fv10, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b9, bpref=$b.0) -> v6, BlockParam(bref=b29, bpref=$b.0) -> v40, Insn(iref=%28) -> v35, Insn(iref=%9) -> fv13, Insn(iref=%24) -> fv31, Insn(iref=%16) -> v42, Self(fref=f2) -> v0, BlockParam(bref=b23, bpref=$b.6) -> fv24, BlockParam(bref=b9, bpref=$b.1) -> v7, Insn(iref=%29) -> v37, Insn(iref=%5) -> fv9, Insn(iref=%0) -> v5, Insn(iref=%19) -> fv26, BlockParam(bref=b13, bpref=$b.0) -> v41, Insn(iref=%3) -> v8, Insn(iref=%18) -> v39, Insn(iref=%13) -> fv16, BlockParam(bref=b23, bpref=$b.1) -> fv19, Insn(iref=%7) -> fv11, BlockParam(bref=b5, bpref=$b.0) -> v47, Insn(iref=%22) -> fv29, Insn(iref=%17) -> v25, Insn(iref=%23) -> fv30, Insn(iref=%2) -> v46, Insn(iref=%20) -> fv27, Insn(iref=%30) -> v36, Insn(iref=%21) -> fv28
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%21), BlockParam(bref=b23, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b23, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b9, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [v3, v51, v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v4, v6, zero, a0, v7]
// [Asm] move_origin: [v51]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v3, v4, v6, zero, v39, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v39, v7]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v7, v3, v4, v6, zero, v40]
// [Asm] move_origin: [v39]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v4, v6, zero, v40]
// [Asm] move_origin: []
// [Asm] defs: [fv26]
// [Asm] live_set: [fv23, fv24, v7, fv20, fv19, fv26, v18, zero, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [fv23, fv24, v7, fv20, fv19, v18, zero, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: [fv28]
// [Asm] live_set: [fv23, fv24, v7, fv20, fv28, v18, zero, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv28 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [fv23, fv24, fv30, v7, v18, zero, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [fv23, fv24, fv30, v7, v18, fv31, zero, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [fv32]
// [Asm] live_set: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv32 is F
// [Asm] defs: [v57]
// [Asm] live_set: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, v4, v6, fv27, v57, v3]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [fv58]
// [Asm] live_set: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, fv58, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv58 is F
// [Asm] defs: [fv33]
// [Asm] live_set: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, fv33, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [fv34]
// [Asm] live_set: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, fv34, fv33, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [v35]
// [Asm] live_set: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, v35, v4, v6, fv27, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [fv23, fv24, v18, fv32, fv31, zero, fv30, v7, v4, fv27, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v4, v6, zero, a0, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v3, v4, v6, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v3, v4, v37, v6, zero, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v37, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v38, v4, v6, zero, v7]
// [Asm] move_origin: [v37]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v66]
// [Asm] live_set: [v66, zero, v7, fv13, v4, v6, fv17, v3]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v7, fv13, v4, v6, fv17, v3]
// [Asm] move_origin: [v66]
// [Asm] defined: v18 is X
// [Asm] defs: [fv67]
// [Asm] live_set: [v18, fv67, zero, v7, fv13, v4, v6, fv17, v3]
// [Asm] move_origin: []
// [Asm] defined: fv67 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v18, fv67, zero, v7, fv13, fv19, v4, v6, fv17, v3]
// [Asm] move_origin: [fv67]
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v18, fv67, zero, fv20, v7, fv13, fv19, v4, v6, fv17, v3]
// [Asm] move_origin: [fv67]
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [v18, fv67, zero, fv20, v7, fv13, fv19, v4, v6, fv17, fv21, v3]
// [Asm] move_origin: [fv67]
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, v18, zero, fv20, v7, fv13, fv19, v4, v6, fv17, fv21, v3]
// [Asm] move_origin: [fv67]
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv22, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv17, fv21, v3]
// [Asm] move_origin: [fv13]
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: [fv17]
// [Asm] defined: fv24 is F
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, fv24, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v3, v41, v4, v6, zero, v7]
// [Asm] move_origin: [v40]
// [Asm] defined: v41 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v47]
// [Asm] move_origin: [zero]
// [Asm] defined: v47 is X
// [Asm] defs: [v36]
// [Asm] live_set: [fv24, fv23, fv32, fv31, zero, v7, fv30, v36, v4, fv27, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v18]
// [Asm] live_set: [fv24, fv23, v18, fv32, fv31, zero, v7, fv30, v4, v6, fv27, v3]
// [Asm] move_origin: [v36]
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [fv24, fv23, v18, fv32, fv31, zero, v7, fv30, fv19, v4, v6, v3]
// [Asm] move_origin: [fv27]
// [Asm] defined: fv19 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [fv24, fv23, v18, fv32, fv31, zero, fv20, v7, fv19, v4, v6, v3]
// [Asm] move_origin: [fv30]
// [Asm] defined: fv20 is F
// [Asm] defs: [fv21]
// [Asm] live_set: [fv24, fv23, v18, fv32, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: [fv31]
// [Asm] defined: fv21 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: [fv32]
// [Asm] defined: fv22 is F
// [Asm] defs: []
// [Asm] live_set: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: [fv23]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: [fv24]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v46]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, zero, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: [v4]
// [Asm] defined: v7 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v45, v4, zero, v3]
// [Asm] move_origin: [v44]
// [Asm] defined: v45 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v47]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v4, v44, zero, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v44 is X
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv10, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv10, zero, fv11, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [zero, fv11, v7, v4, fv12, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v74]
// [Asm] live_set: [zero, fv11, v7, v4, fv12, v6, v74, v3]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [fv75]
// [Asm] live_set: [zero, fv11, v7, v4, fv12, fv75, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv75 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [zero, fv11, fv13, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [zero, fv11, fv13, v7, v4, v6, fv14, v3]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [zero, fv11, fv13, v7, v4, v6, fv15, v3]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [zero, fv13, v7, v4, v6, fv16, v3]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [v68]
// [Asm] live_set: [zero, v68, fv13, v7, v4, v6, fv16, v3]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [fv69]
// [Asm] live_set: [fv69, zero, fv13, v7, v4, v6, fv16, v3]
// [Asm] move_origin: []
// [Asm] defined: fv69 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [zero, fv13, v7, v4, v6, fv17, v3]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v3, v4, zero, v42, v7]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: [v42]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v7, v3, v4, v6, zero, v40]
// [Asm] move_origin: [v38]
// [Asm] defined: v40 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yloop.208"];
// [Asm]   r0 [label="v51 ← a0", color=green];
// [Asm]   r33 [label="v43 ← a0", color=green];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r26 [label="v66 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v47 ← a0", color=green];
// [Asm]   r35 [label="v74 ← a0", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v7 ← s1", color=green];
// [Asm]   r36 [label="v68 ← a0", color=green];
// [Asm]   r24 [label="v37 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r32 [label="v45 ← a0", color=green];
// [Asm]   r31 [label="v46 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r37 [label="v42 ← a0", color=green];
// [Asm]   r20 [label="v40 ← a0", color=green];
// [Asm]   r23 [label="v35 ← a1", color=green];
// [Asm]   r3 [label="v6 ← s2", color=green];
// [Asm]   r27 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="v3 ← s0", color=green];
// [Asm]   r28 [label="v41 ← a0", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r34 [label="v44 ← a0", color=green];
// [Asm]   r22 [label="v57 ← a1", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r30 [label="v36 ← a0", color=green];
// [Asm]   r25 [label="v38 ← a0", color=green];
// [Asm]   r2 [label="v4 ← s1", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v39 ← a0", color=green];
// [Asm]   r21 [label="v18 ← a0", color=green];
// [Asm]   r2 -- r20;
// [Asm]   r2 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r31;
// [Asm]   r2 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r33;
// [Asm]   r4 -- r33;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r14;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r1 -- r35;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r2 -- r26;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r28;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r5 -- r37;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r36;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r25;
// [Asm]   r3 -- r36;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v51-> 1:v3-> 2:v4-> 3:v6-> 4:zero-> 5:v7-> 6:a0-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:v39-> 20:v40-> 21:v18-> 22:v57-> 23:v35-> 24:v37-> 25:v38-> 26:v66-> 28:v41-> 30:v36-> 35:v74-> 36:v68-> 37:v42-> 27:v2-> 32:v45-> 33:v43-> 31:v46-> 34:v44-> 29:v47"
// [Asm]   comment = "v51<-a0;v43<-a0;v66<-a0;v47<-a0;v74<-a0;v7<-s1;v68<-a0;v37<-a0;v45<-a0;v46<-a0;v42<-a0;v40<-a0;v35<-a1;v6<-s2;v2<-a0;v3<-s0;v41<-a0;v44<-a0;v57<-a1;v36<-a0;v38<-a0;v4<-s1;v39<-a0;v18<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yloop.208"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r38 [label="fv10 ← fa1", color=green];
// [Asm]   r33 [label="fv17 ← fa2", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv30 ← fa3", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r44 [label="fv16 ← fa0", color=green];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r42 [label="fv14 ← fa2", color=green];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv58 ← fa4", color=green];
// [Asm]   r35 [label="fv21 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r36 [label="fv22 ← fa5", color=green];
// [Asm]   r32 [label="fv13 ← fa1", color=green];
// [Asm]   r24 [label="fv27 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r43 [label="fv15 ← fa2", color=green];
// [Asm]   r31 [label="fv34 ← fa7", color=green];
// [Asm]   r39 [label="fv11 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r37 [label="fv9 ← fa0", color=green];
// [Asm]   r20 [label="fv23 ← fa1", color=green];
// [Asm]   r23 [label="fv19 ← fa4", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv31 ← fa5", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r40 [label="fv12 ← fa1", color=green];
// [Asm]   r28 [label="fv32 ← fa6", color=green];
// [Asm]   r41 [label="fv75 ← fa2", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv67 ← fa0", color=green];
// [Asm]   r22 [label="fv20 ← fa3", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv33 ← fa4", color=green];
// [Asm]   r45 [label="fv69 ← fa2", color=green];
// [Asm]   r25 [label="fv28 ← fa4", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv26 ← fa0", color=green];
// [Asm]   r21 [label="fv24 ← fa2", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r23 -- r36;
// [Asm]   r22 -- r36;
// [Asm]   r20 -- r33;
// [Asm]   r23 -- r33;
// [Asm]   r32 -- r36;
// [Asm]   r21 -- r35;
// [Asm]   r20 -- r24;
// [Asm]   r20 -- r31;
// [Asm]   r28 -- r31;
// [Asm]   r39 -- r41;
// [Asm]   r20 -- r26;
// [Asm]   r27 -- r29;
// [Asm]   r21 -- r28;
// [Asm]   r32 -- r43;
// [Asm]   r21 -- r29;
// [Asm]   r28 -- r30;
// [Asm]   r20 -- r29;
// [Asm]   r30 -- r31;
// [Asm]   r39 -- r43;
// [Asm]   r33 -- r36;
// [Asm]   r23 -- r35;
// [Asm]   r39 -- r42;
// [Asm]   r44 -- r45;
// [Asm]   r33 -- r35;
// [Asm]   r27 -- r28;
// [Asm]   r19 -- r21;
// [Asm]   r20 -- r36;
// [Asm]   r23 -- r27;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r20 -- r35;
// [Asm]   r20 -- r25;
// [Asm]   r22 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r20 -- r30;
// [Asm]   r27 -- r30;
// [Asm]   r24 -- r30;
// [Asm]   r21 -- r23;
// [Asm]   r32 -- r42;
// [Asm]   r33 -- r34;
// [Asm]   r20 -- r23;
// [Asm]   r23 -- r26;
// [Asm]   r32 -- r45;
// [Asm]   r22 -- r35;
// [Asm]   r26 -- r28;
// [Asm]   r32 -- r35;
// [Asm]   r26 -- r27;
// [Asm]   r22 -- r25;
// [Asm]   r20 -- r22;
// [Asm]   r32 -- r44;
// [Asm]   r24 -- r31;
// [Asm]   r19 -- r23;
// [Asm]   r21 -- r31;
// [Asm]   r32 -- r33;
// [Asm]   r21 -- r30;
// [Asm]   r32 -- r39;
// [Asm]   r21 -- r27;
// [Asm]   r22 -- r28;
// [Asm]   r19 -- r22;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r28;
// [Asm]   r26 -- r30;
// [Asm]   r23 -- r32;
// [Asm]   r22 -- r27;
// [Asm]   r24 -- r27;
// [Asm]   r22 -- r23;
// [Asm]   r28 -- r35;
// [Asm]   r20 -- r27;
// [Asm]   r28 -- r29;
// [Asm]   r21 -- r26;
// [Asm]   r23 -- r24;
// [Asm]   r40 -- r41;
// [Asm]   r22 -- r32;
// [Asm]   r39 -- r40;
// [Asm]   r32 -- r34;
// [Asm]   r26 -- r29;
// [Asm]   r20 -- r28;
// [Asm]   r26 -- r31;
// [Asm]   r38 -- r39;
// [Asm]   r22 -- r33;
// [Asm]   r21 -- r36;
// [Asm]   r21 -- r22;
// [Asm]   r24 -- r25;
// [Asm]   r20 -- r21;
// [Asm]   r27 -- r31;
// [Asm]   r19 -- r20;
// [Asm]   r35 -- r36;
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv26-> 20:fv23-> 21:fv24-> 22:fv20-> 23:fv19-> 24:fv27-> 27:fv31-> 28:fv32-> 26:fv30-> 29:fv58-> 30:fv33-> 31:fv34-> 35:fv21-> 36:fv22-> 33:fv17-> 32:fv13-> 25:fv28-> 34:fv67-> 39:fv11-> 42:fv14-> 43:fv15-> 38:fv10-> 40:fv12-> 41:fv75-> 44:fv16-> 45:fv69-> 37:fv9"
// [Asm]   comment = "fv10<-fa1;fv17<-fa2;fv30<-fa3;fv16<-fa0;fv14<-fa2;fv58<-fa4;fv21<-fa0;fv22<-fa5;fv13<-fa1;fv27<-fa0;fv15<-fa2;fv34<-fa7;fv11<-fa0;fv9<-fa0;fv23<-fa1;fv19<-fa4;fv31<-fa5;fv12<-fa1;fv32<-fa6;fv75<-fa2;fv67<-fa0;fv20<-fa3;fv33<-fa4;fv69<-fa2;fv28<-fa4;fv26<-fa0;fv24<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   li v51, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .yloop.208_29 ->   j .yloop.208_29
// [Asm] subst   fsub.d fv26, fv21, fv22 ->   fsub.d fa0, fa0, fa5
// [Asm] subst   fadd.d fv27, fv26, fv23 ->   fadd.d fa0, fa0, fa1
// [Asm] subst   fadd.d fv28, fv19, fv19 ->   fadd.d fa4, fa4, fa4
// [Asm] subst   fmadd.d fv30, fv28, fv20, fv24 ->   fmadd.d fa3, fa4, fa3, fa2
// [Asm] subst   fmul.d fv31, fv27, fv27 ->   fmul.d fa5, fa0, fa0
// [Asm] subst   fmul.d fv32, fv30, fv30 ->   fmul.d fa6, fa3, fa3
// [Asm] subst   li v57, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv58, v57 ->   fmv.d.x fa4, a1
// [Asm] subst   fmul.d fv33, fv58, fv58 ->   fmul.d fa4, fa4, fa4
// [Asm] subst   fadd.d fv34, fv31, fv32 ->   fadd.d fa7, fa5, fa6
// [Asm] subst   fle.d v35, fv33, fv34 ->   fle.d a1, fa4, fa7
// [Asm] subst   beq v35, zero, .yloop.208_27 ->   beq a1, zero, .yloop.208_27
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   blt v4, v3, .yloop.208_4 ->   blt s1, s0, .yloop.208_4
// [Asm] subst   li v66, 1000 ->   li a0, 1000
// [Asm] subst   fmv.d.x fv67, zero ->   fmv.d.x fa0, zero
// [Asm] subst   fmv.d fv19, fv67 ->   fmv.d fa4, fa0
// [Asm] subst   fmv.d fv20, fv67 ->   fmv.d fa3, fa0
// [Asm] subst   fmv.d fv22, fv67 ->   fmv.d fa5, fa0
// [Asm] subst   mv v3, a1 ->   mv s0, a1
// [Asm] subst   mv v4, v2 ->   mv s1, a0
// [Asm] subst   beq v18, zero, .yloop.208_24 ->   beq a0, zero, .yloop.208_24
// [Asm] subst   mv v47, zero ->   mv a0, zero
// [Asm] subst   addi v36, v18, -1 ->   addi a0, a0, -1
// [Asm] subst   fmv.d fv19, fv27 ->   fmv.d fa4, fa0
// [Asm] subst   fmv.d fv21, fv31 ->   fmv.d fa0, fa5
// [Asm] subst   fmv.d fv22, fv32 ->   fmv.d fa5, fa6
// [Asm] subst   j .yloop.208_23 ->   j .yloop.208_23
// [Asm] subst   bge v6, v3, .yloop.208_10 ->   bge s2, s0, .yloop.208_10
// [Asm] subst   addi v46, v4, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v4, v46 ->   mv s1, a0
// [Asm] subst   j .yloop.208_2 ->   j .yloop.208_2
// [Asm] subst   mv v6, zero ->   mv s2, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   mv v44, zero ->   mv a0, zero
// [Asm] subst   fcvt.d.w fv9, v6 ->   fcvt.d.w fa0, s2
// [Asm] subst   fadd.d fv10, fv9, fv9 ->   fadd.d fa1, fa0, fa0
// [Asm] subst   fcvt.d.w fv11, v3 ->   fcvt.d.w fa0, s0
// [Asm] subst   fdiv.d fv12, fv10, fv11 ->   fdiv.d fa1, fa1, fa0
// [Asm] subst   li v74, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv75, v74 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv13, fv12, fv75 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   fcvt.d.w fv14, v7 ->   fcvt.d.w fa2, s1
// [Asm] subst   fadd.d fv15, fv14, fv14 ->   fadd.d fa2, fa2, fa2
// [Asm] subst   fdiv.d fv16, fv15, fv11 ->   fdiv.d fa0, fa2, fa0
// [Asm] subst   li v68, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv69, v68 ->   fmv.d.x fa2, a0
// [Asm] subst   fsub.d fv17, fv16, fv69 ->   fsub.d fa2, fa0, fa2
// [Asm] subst   addi v42, v6, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v6, v42 ->   mv s2, a0
// [Asm] subst   j .yloop.208_9 ->   j .yloop.208_9
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.0) -> v2, Self(fref=f3) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mandelbrot.207"];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r0 [label="v2 ← a1", color=green];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a0-> 3:a1-> 4:a2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:v3"
// [Asm]   comment = "v2<-a1;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mandelbrot.207"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call yloop.208 ->   call yloop.208
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.211:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.211_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 40  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call mandelbrot.207  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yloop.208:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v3], upward_exposed: [v4, v3], params_defs: [v4]
// [Asm] # live_in: [v4, zero, v3], live_out: [v4, zero, v3]
// [Asm] # block parameters: [v4]
// [Asm] .yloop.208_2:
// [Asm] # control
// [Asm]   blt v4, v3, .yloop.208_4  # live: [v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v47]
// [Asm] # block parameters: []
// [Asm] .yloop.208_3:
// [Asm] # control
// [Asm]   mv v47, zero  # live: [v47]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v47, a0], upward_exposed: [v47], params_defs: [v47]
// [Asm] # live_in: [v47], live_out: []
// [Asm] # block parameters: [v47]
// [Asm] .yloop.208_5:
// [Asm] # control
// [Asm]   mv a0, v47  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v4, zero, v3], live_out: [v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_4:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v4, zero], upward_exposed: [v4, zero], params_defs: []
// [Asm] # live_in: [v4, zero, v3], live_out: [v7, v4, v6, zero, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_7:
// [Asm] # control
// [Asm]   mv v6, zero  # live: [v4, v6, zero, v3]
// [Asm]   mv v7, v4  # live: [v3, v4, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, v3], upward_exposed: [v6, v3], params_defs: [v6, v7]
// [Asm] # live_in: [v3, v4, v6, zero, v7], live_out: [v7, v4, v6, zero, v3]
// [Asm] # block parameters: [v6, v7]
// [Asm] .yloop.208_9:
// [Asm] # control
// [Asm]   bge v6, v3, .yloop.208_10  # live: [v3, v4, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [fv9, fv10, fv69, fv11, v68, fv13, fv12, fv75, v74, fv14, fv15, fv16, fv17], uses: [fv10, fv69, v7, fv12, fv75, fv14, fv15, fv16, fv9, fv11, v68, v74, v6, v3], upward_exposed: [v7, v6, v3], params_defs: []
// [Asm] # live_in: [v3, v4, v6, zero, v7], live_out: [zero, v7, fv13, v4, v6, fv17, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_11:
// [Asm]   fcvt.d.w fv9, v6  # live: [fv9, zero, v7, v4, v6, v3]
// [Asm]   fadd.d fv10, fv9, fv9  # live: [fv10, zero, v7, v4, v6, v3]
// [Asm]   fcvt.d.w fv11, v3  # live: [fv10, zero, fv11, v7, v4, v6, v3]
// [Asm]   fdiv.d fv12, fv10, fv11  # live: [zero, fv11, v7, v4, fv12, v6, v3]
// [Asm]   li v74, 4609434218613702656  # live: [zero, fv11, v7, v4, fv12, v6, v74, v3]
// [Asm]   fmv.d.x fv75, v74  # live: [zero, fv11, v7, v4, fv12, fv75, v6, v3]
// [Asm]   fsub.d fv13, fv12, fv75  # live: [zero, fv11, fv13, v7, v4, v6, v3]
// [Asm]   fcvt.d.w fv14, v7  # live: [zero, fv11, fv13, v7, v4, v6, fv14, v3]
// [Asm]   fadd.d fv15, fv14, fv14  # live: [zero, fv11, fv13, v7, v4, v6, fv15, v3]
// [Asm]   fdiv.d fv16, fv15, fv11  # live: [zero, fv13, v7, v4, v6, fv16, v3]
// [Asm]   li v68, 4607182418800017408  # live: [zero, v68, fv13, v7, v4, v6, fv16, v3]
// [Asm]   fmv.d.x fv69, v68  # live: [fv69, zero, fv13, v7, v4, v6, fv16, v3]
// [Asm]   fsub.d fv17, fv16, fv69  # live: [zero, fv13, v7, v4, v6, fv17, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v66, fv22, fv23, fv24, fv67, v18, fv20, fv19, fv21], uses: [v66, fv67, zero, fv17, fv13], upward_exposed: [zero, fv17, fv13], params_defs: []
// [Asm] # live_in: [zero, v7, fv13, v4, v6, fv17, v3], live_out: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_21:
// [Asm] # control
// [Asm]   li v66, 1000  # live: [v66, zero, v7, fv13, v4, v6, fv17, v3]
// [Asm]   mv v18, v66  # live: [v18, zero, v7, fv13, v4, v6, fv17, v3]
// [Asm]   fmv.d.x fv67, zero  # live: [v18, fv67, zero, v7, fv13, v4, v6, fv17, v3]
// [Asm]   fmv.d fv19, fv67  # live: [v18, fv67, zero, v7, fv13, fv19, v4, v6, fv17, v3]
// [Asm]   fmv.d fv20, fv67  # live: [v18, fv67, zero, fv20, v7, fv13, fv19, v4, v6, fv17, v3]
// [Asm]   fmv.d fv21, fv67  # live: [v18, fv67, zero, fv20, v7, fv13, fv19, v4, v6, fv17, fv21, v3]
// [Asm]   fmv.d fv22, fv67  # live: [fv22, v18, zero, fv20, v7, fv13, fv19, v4, v6, fv17, fv21, v3]
// [Asm]   fmv.d fv23, fv13  # live: [fv22, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv17, fv21, v3]
// [Asm]   fmv.d fv24, fv17  # live: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v18, zero], upward_exposed: [v18, zero], params_defs: [fv22, fv23, fv24, v18, fv20, fv19, fv21]
// [Asm] # live_in: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3], live_out: [fv22, fv23, fv24, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] # block parameters: [v18, fv19, fv20, fv21, fv22, fv23, fv24]
// [Asm] .yloop.208_23:
// [Asm] # control
// [Asm]   beq v18, zero, .yloop.208_24  # live: [fv22, fv23, fv24, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] 
// [Asm] # block info: defs: [fv28, fv32, fv31, fv58, fv34, fv30, fv33, v35, fv27, v57, fv26], uses: [fv23, fv24, fv32, fv20, fv30, fv19, fv26, fv22, fv28, fv31, fv58, zero, fv34, v35, fv33, fv27, v57, fv21], upward_exposed: [fv22, fv23, fv24, zero, fv20, fv19, fv21], params_defs: []
// [Asm] # live_in: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3], live_out: [fv23, fv24, v18, fv32, fv31, zero, fv30, v7, v4, fv27, v6, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_25:
// [Asm]   fsub.d fv26, fv21, fv22  # live: [fv23, fv24, v7, fv20, fv19, fv26, v18, zero, v4, v6, v3]
// [Asm]   fadd.d fv27, fv26, fv23  # live: [fv23, fv24, v7, fv20, fv19, v18, zero, v4, v6, fv27, v3]
// [Asm]   fadd.d fv28, fv19, fv19  # live: [fv23, fv24, v7, fv20, fv28, v18, zero, v4, v6, fv27, v3]
// [Asm]   fmadd.d fv30, fv28, fv20, fv24  # live: [fv23, fv24, fv30, v7, v18, zero, v4, v6, fv27, v3]
// [Asm]   fmul.d fv31, fv27, fv27  # live: [fv23, fv24, fv30, v7, v18, fv31, zero, v4, v6, fv27, v3]
// [Asm]   fmul.d fv32, fv30, fv30  # live: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, v4, v6, fv27, v3]
// [Asm]   li v57, 4611686018427387904  # live: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, v4, v6, fv27, v57, v3]
// [Asm]   fmv.d.x fv58, v57  # live: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, fv58, v4, v6, fv27, v3]
// [Asm]   fmul.d fv33, fv58, fv58  # live: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, fv33, v4, v6, fv27, v3]
// [Asm]   fadd.d fv34, fv31, fv32  # live: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, fv34, fv33, v4, v6, fv27, v3]
// [Asm]   fle.d v35, fv33, fv34  # live: [fv23, fv24, fv32, fv30, v7, v18, fv31, zero, v35, v4, v6, fv27, v3]
// [Asm] # control
// [Asm]   beq v35, zero, .yloop.208_27  # live: [fv23, fv24, v18, fv32, fv31, zero, fv30, v7, v4, fv27, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v37, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, v38, t2], uses: [v37, zero, a0], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v3, v4, v6, zero, v7], live_out: [zero, v7, v38, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_26:
// [Asm]   # save_ctx2  # live: [v3, v4, v6, zero, v7]
// [Asm]   mv a0, zero  # live: [v3, v4, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v3, v4, v6, zero, a0, v7]
// [Asm]   mv v37, a0  # live: [v3, v4, v37, v6, zero, v7]
// [Asm]   # restore_ctx2  # live: [v3, v4, v37, v6, zero, v7]
// [Asm] # control
// [Asm]   mv v38, v37  # live: [v3, v38, v4, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [v38], upward_exposed: [v38], params_defs: [v38]
// [Asm] # live_in: [zero, v7, v38, v4, v6, v3], live_out: [v40, zero, v7, v4, v6, v3]
// [Asm] # block parameters: [v38]
// [Asm] .yloop.208_28:
// [Asm] # control
// [Asm]   mv v40, v38  # live: [v7, v3, v4, v6, zero, v40]
// [Asm] 
// [Asm] # block info: defs: [v41], uses: [v40], upward_exposed: [v40], params_defs: [v40]
// [Asm] # live_in: [v40, zero, v7, v4, v6, v3], live_out: [zero, v7, v41, v4, v6, v3]
// [Asm] # block parameters: [v40]
// [Asm] .yloop.208_29:
// [Asm] # control
// [Asm]   mv v41, v40  # live: [v3, v41, v4, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v6, v42], uses: [v6, v42, v7], upward_exposed: [v6, v7], params_defs: [v41]
// [Asm] # live_in: [zero, v7, v41, v4, v6, v3], live_out: [v7, v4, v6, zero, v3]
// [Asm] # block parameters: [v41]
// [Asm] .yloop.208_13:
// [Asm]   addi v42, v6, 1  # live: [v3, v4, zero, v42, v7]
// [Asm] # control
// [Asm]   mv v6, v42  # live: [v3, v4, v6, zero, v7]
// [Asm]   mv v7, v7  # live: [v3, v4, v6, zero, v7]
// [Asm]   j .yloop.208_9  # live: [v3, v4, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v44, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v43, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, zero, v3], live_out: [v4, v44, zero, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_10:
// [Asm]   # save_ctx2  # live: [v4, zero, v3]
// [Asm]   call minimbt_print_endline  # live: [v4, zero, a0, v3]
// [Asm]   mv v43, a0  # live: [v4, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, zero, v3]
// [Asm] # control
// [Asm]   mv v44, zero  # live: [v4, v44, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v4, v44, zero, v3], live_out: [v3, v4, zero, v45]
// [Asm] # block parameters: [v44]
// [Asm] .yloop.208_12:
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v45, v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v4, v46], uses: [v4, v46], upward_exposed: [v4], params_defs: [v45]
// [Asm] # live_in: [v3, v4, zero, v45], live_out: [v4, zero, v3]
// [Asm] # block parameters: [v45]
// [Asm] .yloop.208_6:
// [Asm]   addi v46, v4, 1  # live: [v46, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v46  # live: [v4, zero, v3]
// [Asm]   j .yloop.208_2  # live: [v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v51, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v39, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [a0, v39, v51], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v3, v4, v6, zero, v7], live_out: [v40, zero, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_24:
// [Asm]   # save_ctx2  # live: [v3, v4, v6, zero, v7]
// [Asm]   li v51, 1  # live: [v3, v51, v4, v6, zero, v7]
// [Asm]   mv a0, v51  # live: [v3, v4, v6, zero, a0, v7]
// [Asm]   call minimbt_print_int  # live: [v3, v4, v6, zero, a0, v7]
// [Asm]   mv v39, a0  # live: [v3, v4, v6, zero, v39, v7]
// [Asm]   # restore_ctx2  # live: [v3, v4, v6, zero, v39, v7]
// [Asm] # control
// [Asm]   mv v40, v39  # live: [v7, v3, v4, v6, zero, v40]
// [Asm]   j .yloop.208_29  # live: [v7, v3, v4, v6, zero, v40]
// [Asm] 
// [Asm] # block info: defs: [fv20, fv19, fv22, v18, fv21, v36], uses: [fv23, fv24, v18, fv32, fv31, fv30, v36, fv27], upward_exposed: [fv23, fv24, v18, fv32, fv31, fv30, fv27], params_defs: []
// [Asm] # live_in: [fv23, fv24, v18, fv32, fv31, zero, fv30, v7, v4, fv27, v6, v3], live_out: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] # block parameters: []
// [Asm] .yloop.208_27:
// [Asm]   addi v36, v18, -1  # live: [fv24, fv23, fv32, fv31, zero, v7, fv30, v36, v4, fv27, v6, v3]
// [Asm] # control
// [Asm]   mv v18, v36  # live: [fv24, fv23, v18, fv32, fv31, zero, v7, fv30, v4, v6, fv27, v3]
// [Asm]   fmv.d fv19, fv27  # live: [fv24, fv23, v18, fv32, fv31, zero, v7, fv30, fv19, v4, v6, v3]
// [Asm]   fmv.d fv20, fv30  # live: [fv24, fv23, v18, fv32, fv31, zero, fv20, v7, fv19, v4, v6, v3]
// [Asm]   fmv.d fv21, fv31  # live: [fv24, fv23, v18, fv32, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm]   fmv.d fv22, fv32  # live: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm]   fmv.d fv23, fv23  # live: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm]   fmv.d fv24, fv24  # live: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm]   j .yloop.208_23  # live: [fv22, fv24, fv23, v18, zero, fv20, v7, fv19, v4, v6, fv21, v3]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.211  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] mandelbrot.207:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a1, a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .mandelbrot.207_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [a0, v2]
// [Asm]   mv a1, v2  # live: [a1, a0]
// [Asm]   call yloop.208  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("mandelbrot", Unit), args: [("w", Int)], body: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))
// [Knf] build_knf: Prim(Var("f"), Var("f"), Add, kind=Some(Double))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit)
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1)
// [Knf] build_knf: LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [Var("zr")])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))
// [Knf] build_knf: Var("tr")
// [Knf] build_knf: Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))
// [Knf] build_knf: Var("ti")
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))
// [Knf] build_knf: Prim(Double(2), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))
// [Knf] build_knf: App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("xloop"), [Int(0), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("yloop"), [Int(0)])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("mandelbrot"), [Int(40)])
// [Knf] build_knf: Var("mandelbrot")
// [Knf] build_knf: Int(40)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b5 control: Panic -> Jump(target=b7, args=[Insn(iref=%12)])
// [Core] b6 control: Jump(target=b2, args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), BlockParam(bref=b2, bpref=$b.5), BlockParam(bref=b2, bpref=$b.6)]) already set
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%11), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b8, args=[Insn(iref=%1)])
// [Core] b7 control: Panic -> Jump(target=b8, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b8 control: Panic -> Return(args=[BlockParam(bref=b8, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%13), BlockParam(bref=b2, bpref=$b.1)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1)]) already set
// [Core] b3 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b4 control: Jump(target=b2, args=[Insn(iref=%2)]) already set
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.211
// [Main]   .type main.211, @function
// [Main] # leaf false
// [Main] main.211:
// [Main] .main.211_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 40
// [Main]   call mandelbrot.207
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yloop.208
// [Main]   .type yloop.208, @function
// [Main] # leaf false
// [Main] yloop.208:
// [Main] .yloop.208_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a1
// [Main]   mv s1, a0
// [Main] 
// [Main] .yloop.208_2:
// [Main]   blt s1, s0, .yloop.208_4
// [Main] 
// [Main] .yloop.208_3:
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop.208_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .yloop.208_4:
// [Main] 
// [Main] .yloop.208_7:
// [Main]   mv s2, zero
// [Main] 
// [Main] .yloop.208_9:
// [Main]   bge s2, s0, .yloop.208_10
// [Main] 
// [Main] .yloop.208_11:
// [Main]   fcvt.d.w fa0, s2
// [Main]   fadd.d fa1, fa0, fa0
// [Main]   fcvt.d.w fa0, s0
// [Main]   fdiv.d fa1, fa1, fa0
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   fcvt.d.w fa2, s1
// [Main]   fadd.d fa2, fa2, fa2
// [Main]   fdiv.d fa0, fa2, fa0
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa2, a0
// [Main]   fsub.d fa2, fa0, fa2
// [Main] 
// [Main] .yloop.208_21:
// [Main]   li a0, 1000
// [Main]   fmv.d.x fa0, zero
// [Main]   fmv.d fa4, fa0
// [Main]   fmv.d fa3, fa0
// [Main]   fmv.d fa5, fa0
// [Main] 
// [Main] .yloop.208_23:
// [Main]   beq a0, zero, .yloop.208_24
// [Main] 
// [Main] .yloop.208_25:
// [Main]   fsub.d fa0, fa0, fa5
// [Main]   fadd.d fa0, fa0, fa1
// [Main]   fadd.d fa4, fa4, fa4
// [Main]   fmadd.d fa3, fa4, fa3, fa2
// [Main]   fmul.d fa5, fa0, fa0
// [Main]   fmul.d fa6, fa3, fa3
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa4, a1
// [Main]   fmul.d fa4, fa4, fa4
// [Main]   fadd.d fa7, fa5, fa6
// [Main]   fle.d a1, fa4, fa7
// [Main]   beq a1, zero, .yloop.208_27
// [Main] 
// [Main] .yloop.208_26:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .yloop.208_28:
// [Main] 
// [Main] .yloop.208_29:
// [Main] 
// [Main] .yloop.208_13:
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .yloop.208_9
// [Main] 
// [Main] .yloop.208_10:
// [Main]   call minimbt_print_endline
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop.208_12:
// [Main] 
// [Main] .yloop.208_6:
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .yloop.208_2
// [Main] 
// [Main] .yloop.208_24:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .yloop.208_29
// [Main] 
// [Main] .yloop.208_27:
// [Main]   addi a0, a0, -1
// [Main]   fmv.d fa4, fa0
// [Main]   fmv.d fa0, fa5
// [Main]   fmv.d fa5, fa6
// [Main]   j .yloop.208_23
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.211
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mandelbrot.207
// [Main]   .type mandelbrot.207, @function
// [Main] # leaf false
// [Main] mandelbrot.207:
// [Main] .mandelbrot.207_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   call yloop.208
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.211
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=40)])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function main.211 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function yloop.208
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering control Jump(target=b12, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b9, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%16), BlockParam(bref=b9, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b29, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b29, args=[Insn(iref=%18)])
// [Wasm] Lowering control Jump(target=b29, args=[BlockParam(bref=b28, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b28, args=[Insn(iref=%29)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b23, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b23, args=[Insn(iref=%30), Insn(iref=%20), Insn(iref=%23), Insn(iref=%24), Insn(iref=%25), BlockParam(bref=b23, bpref=$b.5), BlockParam(bref=b23, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.1) -> $b23.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.2) -> $b23.$b.2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.3) -> $b23.$b.3
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.4) -> $b23.$b.4
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.5) -> $b23.$b.5
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.5) -> $b23.$b.5
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.6) -> $b23.$b.6
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.6) -> $b23.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[BlockParam(bref=b23, bpref=$b.3), BlockParam(bref=b23, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.3) -> $b23.$b.3
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.4) -> $b23.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%19), BlockParam(bref=b23, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.5) -> $b23.$b.5
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[BlockParam(bref=b23, bpref=$b.1), BlockParam(bref=b23, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.1) -> $b23.$b.1
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.1) -> $b23.$b.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%21), BlockParam(bref=b23, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.2) -> $b23.$b.2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%22), BlockParam(bref=b23, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.6) -> $b23.$b.6
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%20), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%23), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%24), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%26), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Branch(cond=Insn(iref=%28), t=b26, t_args=[], f=b27, f_args=[])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b23, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b24, t_args=[], f=b25, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Jump(target=b22, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%9), Insn(iref=%14)])
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.1) -> $b23.$b.1
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.2) -> $b23.$b.2
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.3) -> $b23.$b.3
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.4) -> $b23.$b.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.5) -> $b23.$b.5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b23, bpref=$b.6) -> $b23.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%5), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[FnParam(fref=f2, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%8), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b9, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%10), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%11), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%13), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b21, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b10, t_args=[], f=b11, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b8, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local BlockParam(bref=b23, bpref=$b.4) -> $b23.$b.4
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local BlockParam(bref=b23, bpref=$b.2) -> $b23.$b.2
// [Wasm] Local BlockParam(bref=b23, bpref=$b.3) -> $b23.$b.3
// [Wasm] Local BlockParam(bref=b23, bpref=$b.5) -> $b23.$b.5
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b23, bpref=$b.0) -> $b23.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b23, bpref=$b.6) -> $b23.$b.6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.1) -> $b9.$b.1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b23, bpref=$b.1) -> $b23.$b.1
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Lowered function yloop.208 to wasm
// [Wasm] Lowering function mandelbrot.207
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Int32(val=0), FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Lowered function mandelbrot.207 to wasm
// [KnfOpt] func_tre: mandelbrot.1 false
// [KnfOpt] func_tre: dbl.3 false
// [KnfOpt] func_tre: yloop.5 true
// [KnfOpt] func_tre: xloop.7 true
// [KnfOpt] func_tre: iloop.23 true
// [KnfOpt] func_tre: main.60 false
// [KnfOpt] freq: {mandelbrot.1: Once, dbl.3: Many(3), yloop.5: Once, yloop.142: Many(2), xloop.144: Once, xloop.147: Many(2), iloop.163: Once, iloop.171: Many(2), main.60: Once}
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision iloop.163 rejected
// [KnfOpt] Knf inline Some(dbl) let _158: Double = Unit
// [KnfOpt] let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _160: Double = FDiv(_158, _159)
// [KnfOpt] let _161: Double = Double(1)
// [KnfOpt] let ci.162: Double = FSub(_160, _161)
// [KnfOpt] let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
// [KnfOpt]   let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
// [KnfOpt]     let _179: Int = Int(0)
// [KnfOpt]     if (i.172 == _179) then {
// [KnfOpt]       let _180: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_180, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _181: Double = FSub(zr2.175, zi2.176)
// [KnfOpt]       let tr.182: Double = FAdd(_181, cr.177)
// [KnfOpt]       let _183: Double = FAdd(zr.173, zr.173)
// [KnfOpt]       let _184: Double = FMul(_183, zi.174)
// [KnfOpt]       let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt]       let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt]       let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt]       let _188: Double = Double(2)
// [KnfOpt]       let _189: Double = Double(2)
// [KnfOpt]       let _190: Double = FMul(_188, _189)
// [KnfOpt]       let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt]       if (_190 <= _191) then {
// [KnfOpt]         let _192: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _193: Int = Int(1)
// [KnfOpt]         let _194: Int = Sub(i.172, _193)
// [KnfOpt]         Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
// [KnfOpt] }
// [KnfOpt] let _195: Int = Int(1000)
// [KnfOpt] let _196: Double = Double(0)
// [KnfOpt] let _197: Double = Double(0)
// [KnfOpt] let _198: Double = Double(0)
// [KnfOpt] let _199: Double = Double(0)
// [KnfOpt] let _200: Unit = Apply(iloop.163, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision iloop.163 rejected
// [KnfOpt] Knf inline Some(dbl) let _152: Double = Unit
// [KnfOpt] let _153: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _154: Double = FDiv(_152, _153)
// [KnfOpt] let _155: Double = Double(1.5)
// [KnfOpt] let cr.156: Double = FSub(_154, _155)
// [KnfOpt] let _157: Double = ExtApply(minimbt_float_of_int, [y.149, ])
// [KnfOpt] let _158: Double = FAdd(_157, _157)
// [KnfOpt] let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _160: Double = FDiv(_158, _159)
// [KnfOpt] let _161: Double = Double(1)
// [KnfOpt] let ci.162: Double = FSub(_160, _161)
// [KnfOpt] let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
// [KnfOpt]   let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
// [KnfOpt]     let _179: Int = Int(0)
// [KnfOpt]     if (i.172 == _179) then {
// [KnfOpt]       let _180: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_180, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _181: Double = FSub(zr2.175, zi2.176)
// [KnfOpt]       let tr.182: Double = FAdd(_181, cr.177)
// [KnfOpt]       let _183: Double = FAdd(zr.173, zr.173)
// [KnfOpt]       let _184: Double = FMul(_183, zi.174)
// [KnfOpt]       let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt]       let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt]       let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt]       let _188: Double = Double(2)
// [KnfOpt]       let _189: Double = Double(2)
// [KnfOpt]       let _190: Double = FMul(_188, _189)
// [KnfOpt]       let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt]       if (_190 <= _191) then {
// [KnfOpt]         let _192: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _193: Int = Int(1)
// [KnfOpt]         let _194: Int = Sub(i.172, _193)
// [KnfOpt]         Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
// [KnfOpt] }
// [KnfOpt] let _195: Int = Int(1000)
// [KnfOpt] let _196: Double = Double(0)
// [KnfOpt] let _197: Double = Double(0)
// [KnfOpt] let _198: Double = Double(0)
// [KnfOpt] let _199: Double = Double(0)
// [KnfOpt] let _200: Unit = Apply(iloop.163, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision iloop.163 rejected
// [KnfOpt] Knf inline Some(dbl) let _158: Double = Unit
// [KnfOpt] let _159: Double = ExtApply(minimbt_float_of_int, [w.2, ])
// [KnfOpt] let _160: Double = FDiv(_158, _159)
// [KnfOpt] let _161: Double = Double(1)
// [KnfOpt] let ci.162: Double = FSub(_160, _161)
// [KnfOpt] let rec iloop.163: Unit = (i.164: Int, zr.165: Double, zi.166: Double, zr2.167: Double, zi2.168: Double, cr.169: Double, ci.170: Double) {
// [KnfOpt]   let join iloop.171: Unit = (i.172: Int, zr.173: Double, zi.174: Double, zr2.175: Double, zi2.176: Double, cr.177: Double, ci.178: Double) {
// [KnfOpt]     let _179: Int = Int(0)
// [KnfOpt]     if (i.172 == _179) then {
// [KnfOpt]       let _180: Int = Int(1)
// [KnfOpt]       ExtApply(minimbt_print_int, [_180, ])
// [KnfOpt]     } else {
// [KnfOpt]       let _181: Double = FSub(zr2.175, zi2.176)
// [KnfOpt]       let tr.182: Double = FAdd(_181, cr.177)
// [KnfOpt]       let _183: Double = FAdd(zr.173, zr.173)
// [KnfOpt]       let _184: Double = FMul(_183, zi.174)
// [KnfOpt]       let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt]       let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt]       let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt]       let _188: Double = Double(2)
// [KnfOpt]       let _189: Double = Double(2)
// [KnfOpt]       let _190: Double = FMul(_188, _189)
// [KnfOpt]       let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt]       if (_190 <= _191) then {
// [KnfOpt]         let _192: Int = Int(0)
// [KnfOpt]         ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt]       } else {
// [KnfOpt]         let _193: Int = Int(1)
// [KnfOpt]         let _194: Int = Sub(i.172, _193)
// [KnfOpt]         Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt]       }
// [KnfOpt]     }
// [KnfOpt]   }
// [KnfOpt]   Jump(iloop.171, [i.164, zr.165, zi.166, zr2.167, zi2.168, cr.169, ci.170, ])
// [KnfOpt] }
// [KnfOpt] let _195: Int = Int(1000)
// [KnfOpt] let _196: Double = Double(0)
// [KnfOpt] let _197: Double = Double(0)
// [KnfOpt] let _198: Double = Double(0)
// [KnfOpt] let _199: Double = Double(0)
// [KnfOpt] let _200: Unit = Apply(iloop.163, [_195, _196, _197, _198, _199, cr.156, ci.162, ])
// [KnfOpt] let _201: Int = Int(1)
// [KnfOpt] let _202: Int = Add(x.148, _201)
// [KnfOpt] Jump(xloop.147, [_202, y.149, ])
// [KnfOpt] Inline threshold 1
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision dbl.3 accepted
// [KnfOpt] Knf inline Some(dbl) let _183: Double = Unit
// [KnfOpt] let _184: Double = FMul(_183, zi.174)
// [KnfOpt] let ti.185: Double = FAdd(_184, ci.178)
// [KnfOpt] let zr2.186: Double = FMul(tr.182, tr.182)
// [KnfOpt] let zi2.187: Double = FMul(ti.185, ti.185)
// [KnfOpt] let _188: Double = Double(2)
// [KnfOpt] let _189: Double = Double(2)
// [KnfOpt] let _190: Double = FMul(_188, _189)
// [KnfOpt] let _191: Double = FAdd(zr2.186, zi2.187)
// [KnfOpt] if (_190 <= _191) then {
// [KnfOpt]   let _192: Int = Int(0)
// [KnfOpt]   ExtApply(minimbt_print_int, [_192, ])
// [KnfOpt] } else {
// [KnfOpt]   let _193: Int = Int(1)
// [KnfOpt]   let _194: Int = Sub(i.172, _193)
// [KnfOpt]   Jump(iloop.171, [_194, tr.182, ti.185, zr2.186, zi2.187, cr.177, ci.178, ])
// [KnfOpt] }
// [KnfOpt] Inline threshold 39
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 1
// [KnfOpt] Inline decision iloop.163 rejected
// [KnfOpt] Inline threshold 87
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 2
// [KnfOpt] Inline decision xloop.144 rejected
// [KnfOpt] Inline threshold 101
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision yloop.5 rejected
// [KnfOpt] Inline threshold 107
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 3
// [KnfOpt] Inline decision mandelbrot.1 rejected
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] xloop.209 is inlining Call(ty=Unit, f=f0, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%6), Insn(iref=%11)])
// [CoreOpt] shifted callee .fn iloop.210 #f0 : fn(int32, double, double, double, double, double, double) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b14 {
// [CoreOpt]   .bb #b14 () {
// [CoreOpt]     jump b15($f0, $f1, $f2, $f3, $f4, $f5, $f6)
// [CoreOpt]   }
// [CoreOpt]   .loop #b15 pre #Some(b14) header #b16 {
// [CoreOpt]     .block #b17
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b21
// [CoreOpt]     .block #b22
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %14: bool = eq($b16.0, 0)
// [CoreOpt]     br %14 b17() b18()
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %15: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b22(%15)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     let %16: double = sub($b16.3, $b16.4)
// [CoreOpt]     let %17: double = add(%16, $b16.5)
// [CoreOpt]     let %18: double = add($b16.1, $b16.1)
// [CoreOpt]     let %19: double = mul(%18, $b16.2)
// [CoreOpt]     let %20: double = add(%19, $b16.6)
// [CoreOpt]     let %21: double = mul(%17, %17)
// [CoreOpt]     let %22: double = mul(%20, %20)
// [CoreOpt]     let %23: double = mul(2, 2)
// [CoreOpt]     let %24: double = add(%21, %22)
// [CoreOpt]     let %25: bool = le(%23, %24)
// [CoreOpt]     br %25 b19() b20()
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     let %26: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b21(%26)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 () {
// [CoreOpt]     let %27: int32 = sub($b16.0, 1)
// [CoreOpt]     jump b16(%27, %17, %20, %21, %22, $b16.5, $b16.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (unit) {
// [CoreOpt]     jump b22($b21.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 (unit) {
// [CoreOpt]     return $b22.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] yloop.208 is inlining Call(ty=Unit, f=f1, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0), FnParam(fref=f2, fpref=$f.1)])
// [CoreOpt] shifted callee .fn xloop.209 #f1 : fn(int32, int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     jump b8($f0, $f1)
// [CoreOpt]   }
// [CoreOpt]   .loop #b8 pre #Some(b7) header #b9 {
// [CoreOpt]     .block #b10
// [CoreOpt]     .block #b11
// [CoreOpt]     .block #b12
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 (int32, int32) {
// [CoreOpt]     let %3: bool = le($f2, $b9.0)
// [CoreOpt]     br %3 b10() b11()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 () {
// [CoreOpt]     let %4: unit = ext_call minimbt_print_endline()
// [CoreOpt]     jump b12(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b11 () {
// [CoreOpt]     let %5: double = conv.i2d($b9.0)
// [CoreOpt]     let %6: double = add(%5, %5)
// [CoreOpt]     let %7: double = conv.i2d($f2)
// [CoreOpt]     let %8: double = div(%6, %7)
// [CoreOpt]     let %9: double = sub(%8, 1.5)
// [CoreOpt]     let %10: double = conv.i2d($b9.1)
// [CoreOpt]     let %11: double = add(%10, %10)
// [CoreOpt]     let %12: double = conv.i2d($f2)
// [CoreOpt]     let %13: double = div(%11, %12)
// [CoreOpt]     let %14: double = sub(%13, 1)
// [CoreOpt]     jump b21()
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 (unit) {
// [CoreOpt]     return $b12.0
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %16: int32 = add($b9.0, 1)
// [CoreOpt]     jump b9(%16, $b9.1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 () {
// [CoreOpt]     jump b22(1000, 0, 0, 0, 0, %9, %14)
// [CoreOpt]   }
// [CoreOpt]   .loop #b22 pre #Some(b21) header #b23 {
// [CoreOpt]     .block #b24
// [CoreOpt]     .block #b25
// [CoreOpt]     .block #b26
// [CoreOpt]     .block #b27
// [CoreOpt]     .block #b28
// [CoreOpt]     .block #b29
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %17: bool = eq($b23.0, 0)
// [CoreOpt]     br %17 b24() b25()
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 () {
// [CoreOpt]     let %18: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b29(%18)
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 () {
// [CoreOpt]     let %19: double = sub($b23.3, $b23.4)
// [CoreOpt]     let %20: double = add(%19, $b23.5)
// [CoreOpt]     let %21: double = add($b23.1, $b23.1)
// [CoreOpt]     let %22: double = mul(%21, $b23.2)
// [CoreOpt]     let %23: double = add(%22, $b23.6)
// [CoreOpt]     let %24: double = mul(%20, %20)
// [CoreOpt]     let %25: double = mul(%23, %23)
// [CoreOpt]     let %26: double = mul(2, 2)
// [CoreOpt]     let %27: double = add(%24, %25)
// [CoreOpt]     let %28: bool = le(%26, %27)
// [CoreOpt]     br %28 b26() b27()
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 () {
// [CoreOpt]     let %29: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b28(%29)
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 () {
// [CoreOpt]     let %30: int32 = sub($b23.0, 1)
// [CoreOpt]     jump b23(%30, %20, %23, %24, %25, $b23.5, $b23.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b28 (unit) {
// [CoreOpt]     jump b29($b28.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 (unit) {
// [CoreOpt]     jump b13($b29.0)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%7)
