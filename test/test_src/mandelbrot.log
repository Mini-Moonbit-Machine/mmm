// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main75l0_4"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r3 [label="t0", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r13;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:v3-> 2:a1-> 3:t0-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v2"
// [Asm]   comment = "v3<-a1;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main75l0_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   li v3, 40 ->   li a1, 40
// [Asm] subst   call yloop7.79l2_3 ->   call yloop7.79l2_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main75l0_4 ->   call main75l0_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b7, bpref=$b.1) -> v8, BlockParam(bref=b7, bpref=$b.0) -> v7, BlockParam(bref=b21, bpref=$b.3) -> fv24, Insn(iref=%8) -> fv14, BlockParam(bref=b10, bpref=$b.0) -> v47, Insn(iref=%10) -> fv16, Insn(iref=%27) -> fv37, Insn(iref=%14) -> fv20, Insn(iref=%25) -> fv35, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b26, bpref=$b.0) -> v41, Self(fref=f3) -> v0, Insn(iref=%4) -> v46, BlockParam(bref=b21, bpref=$b.6) -> fv27, BlockParam(bref=b21, bpref=$b.4) -> fv25, BlockParam(bref=b6, bpref=$b.0) -> v48, Insn(iref=%11) -> fv17, BlockParam(bref=b21, bpref=$b.1) -> fv22, Insn(iref=%26) -> fv36, Insn(iref=%6) -> fv12, BlockParam(bref=b21, bpref=$b.2) -> fv23, BlockParam(bref=b7, bpref=$b.2) -> v9, BlockParam(bref=b21, bpref=$b.5) -> fv26, Insn(iref=%28) -> v38, BlockParam(bref=b3, bpref=$b.0) -> v50, Insn(iref=%9) -> fv15, Insn(iref=%24) -> fv34, Insn(iref=%16) -> v45, BlockParam(bref=b0, bpref=$b.0) -> v4, BlockParam(bref=b0, bpref=$b.1) -> v5, Insn(iref=%29) -> v40, Insn(iref=%5) -> fv11, Insn(iref=%0) -> v6, Insn(iref=%19) -> fv29, BlockParam(bref=b13, bpref=$b.0) -> v44, Insn(iref=%3) -> v10, Insn(iref=%18) -> v42, Insn(iref=%13) -> fv19, Insn(iref=%7) -> fv13, BlockParam(bref=b27, bpref=$b.0) -> v43, Insn(iref=%22) -> fv32, Insn(iref=%17) -> v28, Insn(iref=%23) -> fv33, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> v49, Insn(iref=%20) -> fv30, Insn(iref=%30) -> v39, BlockParam(bref=b21, bpref=$b.0) -> v21, Insn(iref=%21) -> fv31, Insn(iref=%12) -> fv18
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%21), BlockParam(bref=b21, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b21, bpref=$b.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b7, bpref=$b.2), BlockParam(bref=b7, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v47, v4, v5, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v9]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [v5, zero, v7, v8, v4, v9, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v9]
// [Asm] move_origin: [v54]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v5, zero, v42, v7, v8, v4, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v42, v7, v8, v4, v9]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v5, zero, v7, v8, v4, v43, v9]
// [Asm] move_origin: [v42]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v43, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v5, zero, v7, v8, v4, v9, v40]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v9, v40]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v5, zero, v7, v8, v41, v4, v9]
// [Asm] move_origin: [v40]
// [Asm] defined: v41 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v50]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v49, zero]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v49]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero, v8, v45, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v8, v4, v9]
// [Asm] move_origin: [v45]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v9]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, zero, v9, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [fv29]
// [Asm] live_set: [fv23, v5, v21, v7, fv26, v9, fv22, zero, v8, fv29, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: [fv30]
// [Asm] live_set: [fv23, v5, v21, v7, fv30, fv26, v9, fv22, zero, v8, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv30 is F
// [Asm] defs: []
// [Asm] live_set: [fv23, v5, v21, v7, fv30, fv26, v9, fv22, zero, v8, v4, fv27]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [fv23, v5, v21, v7, fv30, fv26, v9, zero, v8, fa0, v4, fv27]
// [Asm] move_origin: [fv22]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv23, v5, v21, v7, fv30, fv26, v9, zero, v8, fa0, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv31]
// [Asm] live_set: [fv23, v5, v21, v7, fv30, fv26, v9, fv31, zero, v8, v4, fv27]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv31 is F
// [Asm] defs: []
// [Asm] live_set: [fv23, v5, v21, v7, fv30, fv26, v9, fv31, zero, v8, v4, fv27]
// [Asm] move_origin: []
// [Asm] defs: [fv33]
// [Asm] live_set: [v5, v21, v7, fv30, fv26, v9, zero, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [fv34]
// [Asm] live_set: [v5, v21, v7, fv30, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [fv35]
// [Asm] live_set: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [v60]
// [Asm] live_set: [v5, v21, v7, fv30, fv35, fv26, v9, v60, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [fv61]
// [Asm] live_set: [v5, v21, fv61, v7, fv30, fv35, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv61 is F
// [Asm] defs: [fv36]
// [Asm] live_set: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv36, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: [fv37]
// [Asm] live_set: [fv37, v5, v21, v7, fv30, fv35, fv26, v9, zero, fv36, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv34, fv33, v8, v4, v38, fv27]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v21, zero, fv34, v7, fv30, fv33, v8, v4, fv27, fv35, fv26, v9]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v50]
// [Asm] move_origin: [zero]
// [Asm] defined: v50 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v5, zero, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v5, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v4, v5, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v5, v7, fv30, fv35, fv26, v9, v39, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: [v39]
// [Asm] defined: v21 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [v5, v21, v7, fv35, fv26, v9, fv22, zero, fv34, v8, fv33, v4, fv27]
// [Asm] move_origin: [fv30]
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv23, v5, v21, v7, fv35, fv26, v9, fv22, zero, fv34, v8, v4, fv27]
// [Asm] move_origin: [fv33]
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv23, fv24, v5, v21, v7, fv35, fv26, v9, fv22, zero, v8, v4, fv27]
// [Asm] move_origin: [fv34]
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm] move_origin: [fv35]
// [Asm] defined: fv25 is F
// [Asm] defs: []
// [Asm] live_set: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm] move_origin: [fv26]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] move_origin: [fv27]
// [Asm] defs: []
// [Asm] live_set: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] move_origin: []
// [Asm] defs: [v69]
// [Asm] live_set: [v5, v69, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: [v69]
// [Asm] defined: v21 is X
// [Asm] defs: [fv70]
// [Asm] live_set: [fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv70 is F
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: [fv70]
// [Asm] defined: fv22 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [fv22, fv23, fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: [fv70]
// [Asm] defined: fv23 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [fv22, fv23, fv24, fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: [fv70]
// [Asm] defined: fv24 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] move_origin: [fv70]
// [Asm] defined: fv25 is F
// [Asm] defs: [fv26]
// [Asm] live_set: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, fv20, v4, fv26, v9]
// [Asm] move_origin: [fv15]
// [Asm] defined: fv26 is F
// [Asm] defs: [fv27]
// [Asm] live_set: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] move_origin: [fv20]
// [Asm] defined: fv27 is F
// [Asm] defs: [v48]
// [Asm] live_set: [v4, v5, v48, zero]
// [Asm] move_origin: [v47]
// [Asm] defined: v48 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [v5, zero, fv11, v8, v7, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, fv11, v8, v7, v4, v9]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, zero, v8, v7, fa0, v4, v9]
// [Asm] move_origin: [fv11]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, v8, v7, fa0, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [v5, zero, v8, v7, fv12, v4, v9]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv12 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, fv12, v4, v9]
// [Asm] move_origin: []
// [Asm] defs: [fv13]
// [Asm] live_set: [v5, zero, v8, v7, fv13, fv12, v4, v9]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [v5, zero, v8, v7, v4, fv14, v9]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [v78]
// [Asm] live_set: [v5, zero, v78, v8, v7, v4, fv14, v9]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [fv79]
// [Asm] live_set: [fv79, v5, zero, v8, v7, v4, fv14, v9]
// [Asm] move_origin: []
// [Asm] defined: fv79 is F
// [Asm] defs: [fv15]
// [Asm] live_set: [v5, zero, v8, v7, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv15 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [v5, zero, v8, v7, v4, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, fv15, fv16, v9]
// [Asm] move_origin: []
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, zero, v8, v7, fa0, v4, fv15, v9]
// [Asm] move_origin: [fv16]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, v8, v7, fa0, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [v5, zero, v8, v7, v4, fv15, fv17, v9]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv17 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, fv15, fv17, v9]
// [Asm] move_origin: []
// [Asm] defs: [fv18]
// [Asm] live_set: [v5, zero, v8, v7, v4, fv15, fv18, fv17, v9]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [v5, zero, v8, v7, fv19, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, v8, v7, fv19, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [fv72]
// [Asm] live_set: [v5, zero, v8, v7, fv19, v4, fv15, v9, fv72]
// [Asm] move_origin: []
// [Asm] defined: fv72 is F
// [Asm] defs: [fv20]
// [Asm] live_set: [v5, zero, v8, fv20, v7, v4, fv15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v5, zero, v7, v8, v4, v44, v9]
// [Asm] move_origin: [v43]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [fv22, fv24, fv23, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v5, zero, v7, v8, v4, v43, v9]
// [Asm] move_origin: [v41]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v3]
// [Asm] defined: v5 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of yloop7.79l2_3"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r38 [label="v2 ← a0", color=green];
// [Asm]   r33 [label="v69 ← a0", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v49 ← a0", color=green];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v60 ← a0", color=green];
// [Asm]   r35 [label="v78 ← a0", color=green];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r36 [label="v71 ← a0", color=green];
// [Asm]   r32 [label="v39 ← a0", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r24 [label="v40 ← a0", color=green];
// [Asm]   r31 [label="v50 ← a0", color=green];
// [Asm]   r39 [label="v3 ← a1", color=green];
// [Asm]   r17 [label="v47 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r37 [label="v44 ← a0", color=green];
// [Asm]   r20 [label="v8 ← s0", color=green];
// [Asm]   r23 [label="v43 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v45 ← a0", color=green];
// [Asm]   r1 [label="v4 ← s0", color=green];
// [Asm]   r28 [label="v21 ← s3", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r34 [label="v48 ← a0", color=green];
// [Asm]   r22 [label="v42 ← a0", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r30 [label="v38 ← a0", color=green];
// [Asm]   r25 [label="v41 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s1", color=green];
// [Asm]   r16 [label="v46 ← a0", color=green];
// [Asm]   r18 [label="v54 ← a0", color=green];
// [Asm]   r19 [label="v7 ← s2", color=green];
// [Asm]   r21 [label="v9 ← s1", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r2 -- r32;
// [Asm]   r20 -- r33;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r0 -- r28;
// [Asm]   r28 -- r30;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r20 -- r36;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r20 -- r30;
// [Asm]   r2 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r20 -- r22;
// [Asm]   r19 -- r29;
// [Asm]   r21 -- r33;
// [Asm]   r3 -- r39;
// [Asm]   r19 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r19 -- r36;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r9 -- r20;
// [Asm]   r1 -- r11;
// [Asm]   r2 -- r36;
// [Asm]   r18 -- r20;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r19 -- r30;
// [Asm]   r1 -- r34;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r20;
// [Asm]   r20 -- r29;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r19 -- r37;
// [Asm]   r0 -- r19;
// [Asm]   r20 -- r35;
// [Asm]   r6 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r19 -- r28;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r2 -- r14;
// [Asm]   r21 -- r30;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r25;
// [Asm]   r19 -- r33;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r30;
// [Asm]   r20 -- r28;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r11 -- r28;
// [Asm]   r19 -- r25;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r35;
// [Asm]   r14 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r13 -- r28;
// [Asm]   r19 -- r21;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r34;
// [Asm]   r12 -- r19;
// [Asm]   r4 -- r21;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r20 -- r32;
// [Asm]   r4 -- r28;
// [Asm]   r21 -- r32;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r28 -- r29;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r15 -- r28;
// [Asm]   r21 -- r37;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r20 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r20 -- r37;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r19 -- r24;
// [Asm]   r3 -- r28;
// [Asm]   r19 -- r35;
// [Asm]   r13 -- r20;
// [Asm]   r20 -- r25;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r8 -- r28;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r19 -- r32;
// [Asm]   r18 -- r19;
// [Asm]   r9 -- r38;
// [Asm]   r19 -- r23;
// [Asm]   r15 -- r21;
// [Asm]   r6 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r36;
// [Asm]   r9 -- r19;
// [Asm]   r38 -- r39;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:t0-> 1:v4-> 2:v5-> 3:zero-> 4:a0-> 19:v7-> 28:v21-> 5:t1-> 20:v8-> 21:v9-> 6:t2-> 7:t3-> 8:t4-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 29:v60-> 30:v38-> 18:v54-> 22:v42-> 23:v43-> 24:v40-> 25:v41-> 32:v39-> 33:v69-> 35:v78-> 36:v71-> 37:v44-> 27:v45-> 16:v46-> 34:v48-> 17:v47-> 26:v49-> 38:v2-> 39:v3-> 31:v50"
// [Asm]   comment = "v2<-a0;v69<-a0;v49<-a0;v60<-a0;v78<-a0;v71<-a0;v39<-a0;v40<-a0;v50<-a0;v3<-a1;v47<-a0;v44<-a0;v8<-s0;v43<-a0;v45<-a0;v4<-s0;v21<-s3;v48<-a0;v42<-a0;v38<-a0;v41<-a0;v5<-s1;v46<-a0;v54<-a0;v7<-s2;v9<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of yloop7.79l2_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r46 [label="fv72 ← fa1", color=green];
// [Asm]   r38 [label="fv12 ← fa0", color=green];
// [Asm]   r33 [label="fv25 ← fa2", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv33 ← fa3", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r44 [label="fv18 ← fa1", color=green];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r42 [label="fv16 ← fa0", color=green];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv61 ← fa0", color=green];
// [Asm]   r35 [label="fv15 ← fs1", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r36 [label="fv70 ← fa0", color=green];
// [Asm]   r24 [label="fv30 ← fs3", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r32 [label="fv24 ← fa1", color=green];
// [Asm]   r43 [label="fv17 ← fa0", color=green];
// [Asm]   r31 [label="fv37 ← fa4", color=green];
// [Asm]   r39 [label="fv13 ← fa1", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r37 [label="fv11 ← fa0", color=green];
// [Asm]   r20 [label="fv23 ← fs0", color=green];
// [Asm]   r23 [label="fv27 ← fs2", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv34 ← fa1", color=green];
// [Asm]   r40 [label="fv14 ← fa0", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv35 ← fa2", color=green];
// [Asm]   r41 [label="fv79 ← fa1", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv20 ← fa3", color=green];
// [Asm]   r22 [label="fv22 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv36 ← fa0", color=green];
// [Asm]   r45 [label="fv19 ← fa0", color=green];
// [Asm]   r25 [label="fv31 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv29 ← fa1", color=green];
// [Asm]   r21 [label="fv26 ← fs1", color=green];
// [Asm]   r18 -- r23;
// [Asm]   r2 -- r20;
// [Asm]   r21 -- r24;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r35;
// [Asm]   r20 -- r33;
// [Asm]   r23 -- r31;
// [Asm]   r5 -- r21;
// [Asm]   r14 -- r20;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r28 -- r32;
// [Asm]   r11 -- r35;
// [Asm]   r6 -- r35;
// [Asm]   r27 -- r29;
// [Asm]   r11 -- r14;
// [Asm]   r35 -- r42;
// [Asm]   r17 -- r35;
// [Asm]   r28 -- r30;
// [Asm]   r30 -- r31;
// [Asm]   r20 -- r34;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r18 -- r21;
// [Asm]   r27 -- r28;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r19 -- r21;
// [Asm]   r18 -- r35;
// [Asm]   r7 -- r35;
// [Asm]   r4 -- r35;
// [Asm]   r27 -- r30;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r20 -- r23;
// [Asm]   r12 -- r24;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r32 -- r35;
// [Asm]   r5 -- r35;
// [Asm]   r24 -- r31;
// [Asm]   r20 -- r22;
// [Asm]   r10 -- r20;
// [Asm]   r21 -- r33;
// [Asm]   r35 -- r44;
// [Asm]   r11 -- r13;
// [Asm]   r1 -- r21;
// [Asm]   r22 -- r34;
// [Asm]   r21 -- r27;
// [Asm]   r20 -- r32;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r21 -- r32;
// [Asm]   r22 -- r27;
// [Asm]   r23 -- r32;
// [Asm]   r24 -- r27;
// [Asm]   r8 -- r23;
// [Asm]   r20 -- r27;
// [Asm]   r28 -- r29;
// [Asm]   r9 -- r20;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r21;
// [Asm]   r12 -- r23;
// [Asm]   r32 -- r34;
// [Asm]   r15 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r13 -- r35;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r24 -- r25;
// [Asm]   r10 -- r35;
// [Asm]   r16 -- r24;
// [Asm]   r16 -- r23;
// [Asm]   r2 -- r23;
// [Asm]   r17 -- r20;
// [Asm]   r27 -- r31;
// [Asm]   r18 -- r24;
// [Asm]   r35 -- r36;
// [Asm]   r23 -- r29;
// [Asm]   r13 -- r24;
// [Asm]   r23 -- r33;
// [Asm]   r20 -- r24;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r20;
// [Asm]   r34 -- r35;
// [Asm]   r11 -- r17;
// [Asm]   r28 -- r31;
// [Asm]   r9 -- r35;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r5 -- r23;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r14 -- r23;
// [Asm]   r11 -- r16;
// [Asm]   r15 -- r35;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r21;
// [Asm]   r11 -- r12;
// [Asm]   r22 -- r26;
// [Asm]   r11 -- r23;
// [Asm]   r4 -- r20;
// [Asm]   r17 -- r24;
// [Asm]   r21 -- r34;
// [Asm]   r45 -- r46;
// [Asm]   r33 -- r35;
// [Asm]   r14 -- r24;
// [Asm]   r2 -- r11;
// [Asm]   r23 -- r27;
// [Asm]   r0 -- r35;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r20 -- r35;
// [Asm]   r22 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r13 -- r20;
// [Asm]   r20 -- r25;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r24 -- r30;
// [Asm]   r21 -- r23;
// [Asm]   r33 -- r34;
// [Asm]   r14 -- r35;
// [Asm]   r23 -- r26;
// [Asm]   r22 -- r35;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r35 -- r43;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r23 -- r25;
// [Asm]   r19 -- r23;
// [Asm]   r21 -- r31;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r15 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r13 -- r23;
// [Asm]   r23 -- r30;
// [Asm]   r22 -- r28;
// [Asm]   r14 -- r21;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r28;
// [Asm]   r9 -- r24;
// [Asm]   r26 -- r30;
// [Asm]   r34 -- r36;
// [Asm]   r16 -- r35;
// [Asm]   r8 -- r35;
// [Asm]   r10 -- r23;
// [Asm]   r22 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r35 -- r46;
// [Asm]   r2 -- r21;
// [Asm]   r21 -- r26;
// [Asm]   r15 -- r24;
// [Asm]   r40 -- r41;
// [Asm]   r22 -- r32;
// [Asm]   r26 -- r29;
// [Asm]   r35 -- r45;
// [Asm]   r20 -- r28;
// [Asm]   r26 -- r31;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r22 -- r33;
// [Asm]   r2 -- r35;
// [Asm]   r43 -- r44;
// [Asm]   r15 -- r20;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r11 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:ft0-> 11:fa0-> 20:fv23-> 21:fv26-> 23:fv27-> 24:fv30-> 1:ft1-> 2:ft2-> 3:ft3-> 35:fv15-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 22:fv22-> 27:fv34-> 28:fv35-> 26:fv33-> 29:fv61-> 30:fv36-> 31:fv37-> 32:fv24-> 33:fv25-> 34:fv20-> 19:fv29-> 25:fv31-> 36:fv70-> 42:fv16-> 43:fv17-> 44:fv18-> 45:fv19-> 46:fv72-> 37:fv11-> 38:fv12-> 39:fv13-> 40:fv14-> 41:fv79"
// [Asm]   comment = "fv72<-fa1;fv12<-fa0;fv25<-fa2;fv33<-fa3;fv18<-fa1;fv16<-fa0;fv61<-fa0;fv15<-fs1;fv70<-fa0;fv30<-fs3;fv24<-fa1;fv17<-fa0;fv37<-fa4;fv13<-fa1;fv11<-fa0;fv23<-fs0;fv27<-fs2;fv34<-fa1;fv14<-fa0;fv35<-fa2;fv79<-fa1;fv20<-fa3;fv22<-fa0;fv36<-fa0;fv19<-fa0;fv31<-fa0;fv29<-fa1;fv26<-fs1;"
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   mv v47, zero ->   mv a0, zero
// [Asm] subst   li v54, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   j .yloop7.79l2_3_27 ->   j .yloop7.79l2_3_27
// [Asm] subst   bge v7, v9, .yloop7.79l2_3_8 ->   bge s2, s1, .yloop7.79l2_3_8
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v49, v4, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v4, v49 ->   mv s0, a0
// [Asm] subst   j .yloop7.79l2_3_0 ->   j .yloop7.79l2_3_0
// [Asm] subst   addi v45, v7, 1 ->   addi a0, s2, 1
// [Asm] subst   mv v7, v45 ->   mv s2, a0
// [Asm] subst   j .yloop7.79l2_3_7 ->   j .yloop7.79l2_3_7
// [Asm] subst   fsub.d fv29, fv24, fv25 ->   fsub.d fa1, fa1, fa2
// [Asm] subst   fadd.d fv30, fv29, fv26 ->   fadd.d fs3, fa1, fs1
// [Asm] subst   call dbl4.77l1_0 ->   call dbl4.77l1_0
// [Asm] subst   fmadd.d fv33, fv31, fv23, fv27 ->   fmadd.d fa3, fa0, fs0, fs2
// [Asm] subst   fmul.d fv34, fv30, fv30 ->   fmul.d fa1, fs3, fs3
// [Asm] subst   fmul.d fv35, fv33, fv33 ->   fmul.d fa2, fa3, fa3
// [Asm] subst   li v60, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv61, v60 ->   fmv.d.x fa0, a0
// [Asm] subst   fmul.d fv36, fv61, fv61 ->   fmul.d fa0, fa0, fa0
// [Asm] subst   fmadd.d fv37, fv33, fv33, fv34 ->   fmadd.d fa4, fa3, fa3, fa1
// [Asm] subst   fle.d v38, fv36, fv37 ->   fle.d a0, fa0, fa4
// [Asm] subst   beq v38, zero, .yloop7.79l2_3_25 ->   beq a0, zero, .yloop7.79l2_3_25
// [Asm] subst   mv v50, zero ->   mv a0, zero
// [Asm] subst   mv v7, zero ->   mv s2, zero
// [Asm] subst   blt v4, v5, .yloop7.79l2_3_2 ->   blt s0, s1, .yloop7.79l2_3_2
// [Asm] subst   addi v39, v21, -1 ->   addi a0, s3, -1
// [Asm] subst   mv v21, v39 ->   mv s3, a0
// [Asm] subst   fmv.d fv22, fv30 ->   fmv.d fa0, fs3
// [Asm] subst   fmv.d fv23, fv33 ->   fmv.d fs0, fa3
// [Asm] subst   j .yloop7.79l2_3_21 ->   j .yloop7.79l2_3_21
// [Asm] subst   li v69, 1000 ->   li a0, 1000
// [Asm] subst   mv v21, v69 ->   mv s3, a0
// [Asm] subst   fmv.d.x fv70, zero ->   fmv.d.x fa0, zero
// [Asm] subst   fmv.d fv23, fv70 ->   fmv.d fs0, fa0
// [Asm] subst   fmv.d fv24, fv70 ->   fmv.d fa1, fa0
// [Asm] subst   fmv.d fv25, fv70 ->   fmv.d fa2, fa0
// [Asm] subst   fmv.d fv27, fv20 ->   fmv.d fs2, fa3
// [Asm] subst   fcvt.d.w fv11, v7 ->   fcvt.d.w fa0, s2
// [Asm] subst   call dbl4.77l1_0 ->   call dbl4.77l1_0
// [Asm] subst   fcvt.d.w fv13, v9 ->   fcvt.d.w fa1, s1
// [Asm] subst   fdiv.d fv14, fv12, fv13 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v78, 4609434218613702656 ->   li a0, 4609434218613702656
// [Asm] subst   fmv.d.x fv79, v78 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv15, fv14, fv79 ->   fsub.d fs1, fa0, fa1
// [Asm] subst   fcvt.d.w fv16, v8 ->   fcvt.d.w fa0, s0
// [Asm] subst   call dbl4.77l1_0 ->   call dbl4.77l1_0
// [Asm] subst   fcvt.d.w fv18, v9 ->   fcvt.d.w fa1, s1
// [Asm] subst   fdiv.d fv19, fv17, fv18 ->   fdiv.d fa0, fa0, fa1
// [Asm] subst   li v71, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv72, v71 ->   fmv.d.x fa1, a0
// [Asm] subst   fsub.d fv20, fv19, fv72 ->   fsub.d fa3, fa0, fa1
// [Asm] subst   beq v21, zero, .yloop7.79l2_3_22 ->   beq s3, zero, .yloop7.79l2_3_22
// [Asm] subst   mv v4, v2 ->   mv s0, a0
// [Asm] subst   mv v5, v3 ->   mv s1, a1
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> fv2, Insn(iref=%0) -> fv3
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: [fv2]
// [Asm] live_set: [fv2]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv2 is F
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of dbl4.77l1_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of dbl4.77l1_0"];
// [Asm]   r0 [label="fv2 ← fa0", color=green];
// [Asm]   r2 [label="fa0", color=blue];
// [Asm]   r1 [label="fv3 ← fa0", color=green];
// [Asm]   comment = "0:fv2-> 1:fv3-> 2:fa0"
// [Asm]   comment = "fv2<-fa0;fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fadd.d fv3, fv2, fv2 ->   fadd.d fa0, fa0, fa0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] dbl4.77l1_0:
// [Asm] # block info: defs: [fv2, fv3, fa0], uses: [fv2, fv3, fa0], upward_exposed: [fa0], params_defs: []
// [Asm] # live_in: [fa0], live_out: []
// [Asm] # block parameters: []
// [Asm] .dbl4.77l1_0_0:
// [Asm]   # save_ctx1  # live: [fa0]
// [Asm]   fmv.d fv2, fa0  # live: [fv2]
// [Asm]   fadd.d fv3, fv2, fv2  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main75l0_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main75l0_4:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a1, zero, a0, v3], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main75l0_4_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   li v3, 40  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call yloop7.79l2_3  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] yloop7.79l2_3:
// [Asm] # block info: defs: [v3, v4, v5, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_5:
// [Asm]   # save_ctx1  # live: [a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm]   mv v5, v3  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, v5], upward_exposed: [v4, v5], params_defs: [v4, v5]
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v4, v5]
// [Asm] .yloop7.79l2_3_0:
// [Asm] # control
// [Asm]   blt v4, v5, .yloop7.79l2_3_2  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v50]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_1:
// [Asm] # control
// [Asm]   mv v50, zero  # live: [v50]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v50], upward_exposed: [v50], params_defs: [v50]
// [Asm] # live_in: [v50], live_out: []
// [Asm] # block parameters: [v50]
// [Asm] .yloop7.79l2_3_3:
// [Asm] # control
// [Asm]   mv a0, v50  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_2:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v8, v9, v7], uses: [v4, v5, zero], upward_exposed: [v4, v5, zero], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v5, zero, v8, v7, v4, v9]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_12:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v4, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v4, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v4, v5, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, v7], upward_exposed: [v9, v7], params_defs: [v8, v9, v7]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v9], live_out: [v5, zero, v8, v7, v4, v9]
// [Asm] # block parameters: [v7, v8, v9]
// [Asm] .yloop7.79l2_3_7:
// [Asm] # control
// [Asm]   bge v7, v9, .yloop7.79l2_3_8  # live: [v7, v4, v5, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, fv20, fv19, ft0, ft1, fv12, a1, fv14, fv15, fv16, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, fv79, v71, ft9, a5, fa4, a0, v78, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, fv11, ft3, fa0, fv13, t4, t2, fv18, fv17, fv72], uses: [fv79, v71, v78, v7, fv19, fv12, fv14, fv16, v9, fv11, fa0, fv13, v8, fv18, fv17, fv72], upward_exposed: [v8, v9, v7], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v9], live_out: [v5, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_9:
// [Asm]   fcvt.d.w fv11, v7  # live: [v5, zero, fv11, v8, v7, v4, v9]
// [Asm]   # save_ctx2  # live: [v5, zero, fv11, v8, v7, v4, v9]
// [Asm]   fmv.d fa0, fv11  # live: [v5, zero, v8, v7, fa0, v4, v9]
// [Asm]   call dbl4.77l1_0  # live: [v5, zero, v8, v7, fa0, v4, v9]
// [Asm]   fmv.d fv12, fa0  # live: [v5, zero, v8, v7, fv12, v4, v9]
// [Asm]   # restore_ctx2  # live: [v5, zero, v8, v7, fv12, v4, v9]
// [Asm]   fcvt.d.w fv13, v9  # live: [v5, zero, v8, v7, fv13, fv12, v4, v9]
// [Asm]   fdiv.d fv14, fv12, fv13  # live: [v5, zero, v8, v7, v4, fv14, v9]
// [Asm]   li v78, 4609434218613702656  # live: [v5, zero, v78, v8, v7, v4, fv14, v9]
// [Asm]   fmv.d.x fv79, v78  # live: [fv79, v5, zero, v8, v7, v4, fv14, v9]
// [Asm]   fsub.d fv15, fv14, fv79  # live: [v5, zero, v8, v7, v4, fv15, v9]
// [Asm]   fcvt.d.w fv16, v8  # live: [v5, zero, v8, v7, v4, fv15, fv16, v9]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, fv15, fv16, v9]
// [Asm]   fmv.d fa0, fv16  # live: [v5, zero, v8, v7, fa0, v4, fv15, v9]
// [Asm]   call dbl4.77l1_0  # live: [v5, zero, v8, v7, fa0, v4, fv15, v9]
// [Asm]   fmv.d fv17, fa0  # live: [v5, zero, v8, v7, v4, fv15, fv17, v9]
// [Asm]   # restore_ctx2  # live: [v5, zero, v8, v7, v4, fv15, fv17, v9]
// [Asm]   fcvt.d.w fv18, v9  # live: [v5, zero, v8, v7, v4, fv15, fv18, fv17, v9]
// [Asm]   fdiv.d fv19, fv17, fv18  # live: [v5, zero, v8, v7, fv19, v4, fv15, v9]
// [Asm]   li v71, 4607182418800017408  # live: [v5, v71, zero, v8, v7, fv19, v4, fv15, v9]
// [Asm]   fmv.d.x fv72, v71  # live: [v5, zero, v8, v7, fv19, v4, fv15, v9, fv72]
// [Asm]   fsub.d fv20, fv19, fv72  # live: [v5, zero, v8, fv20, v7, v4, fv15, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [fv22, fv70, fv23, fv24, v69, v21, fv25, fv27, fv26], uses: [fv70, v69, fv15, zero, fv20], upward_exposed: [fv15, zero, fv20], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, fv20, v4, fv15, v9], live_out: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_29:
// [Asm] # control
// [Asm]   li v69, 1000  # live: [v5, v69, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   mv v21, v69  # live: [v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   fmv.d.x fv70, zero  # live: [fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   fmv.d fv22, fv70  # live: [fv22, fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   fmv.d fv23, fv70  # live: [fv22, fv23, fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   fmv.d fv24, fv70  # live: [fv22, fv23, fv24, fv70, v5, v21, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   fmv.d fv25, fv70  # live: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, fv20, v4, fv15, v9]
// [Asm]   fmv.d fv26, fv15  # live: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, fv20, v4, fv26, v9]
// [Asm]   fmv.d fv27, fv20  # live: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v21, zero], upward_exposed: [v21, zero], params_defs: [fv22, fv23, fv24, v21, fv25, fv27, fv26]
// [Asm] # live_in: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27], live_out: [fv24, fv23, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm] # block parameters: [v21, fv22, fv23, fv24, fv25, fv26, fv27]
// [Asm] .yloop7.79l2_3_21:
// [Asm] # control
// [Asm]   beq v21, zero, .yloop7.79l2_3_22  # live: [fv22, fv24, fv23, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, fv61, fv30, ft0, ft1, a1, fv35, fa1, v60, fa2, ft6, fv36, fa6, a4, a6, ft10, ft5, ft7, fv37, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, fv31, ft3, fv34, fv33, fa0, fv29, t4, v38, t2], uses: [fv37, fv24, fv23, fv61, fv30, fv26, v60, fv22, fv31, fv25, fv36, zero, fv34, fa0, fv33, fv29, v38, fv27], upward_exposed: [fv22, fv24, fv23, fv25, zero, fv27, fv26], params_defs: []
// [Asm] # live_in: [fv24, fv23, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27], live_out: [v5, v21, fv30, v7, fv35, v9, fv26, zero, fv34, fv33, v8, v4, fv27]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_23:
// [Asm]   fsub.d fv29, fv24, fv25  # live: [fv23, v5, v21, v7, fv26, v9, fv22, zero, v8, fv29, v4, fv27]
// [Asm]   fadd.d fv30, fv29, fv26  # live: [fv23, v5, v21, v7, fv30, fv26, v9, fv22, zero, v8, v4, fv27]
// [Asm]   # save_ctx2  # live: [fv23, v5, v21, v7, fv30, fv26, v9, fv22, zero, v8, v4, fv27]
// [Asm]   fmv.d fa0, fv22  # live: [fv23, v5, v21, v7, fv30, fv26, v9, zero, v8, fa0, v4, fv27]
// [Asm]   call dbl4.77l1_0  # live: [fv23, v5, v21, v7, fv30, fv26, v9, zero, v8, fa0, v4, fv27]
// [Asm]   fmv.d fv31, fa0  # live: [fv23, v5, v21, v7, fv30, fv26, v9, fv31, zero, v8, v4, fv27]
// [Asm]   # restore_ctx2  # live: [fv23, v5, v21, v7, fv30, fv26, v9, fv31, zero, v8, v4, fv27]
// [Asm]   fmadd.d fv33, fv31, fv23, fv27  # live: [v5, v21, v7, fv30, fv26, v9, zero, v8, fv33, v4, fv27]
// [Asm]   fmul.d fv34, fv30, fv30  # live: [v5, v21, v7, fv30, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm]   fmul.d fv35, fv33, fv33  # live: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm]   li v60, 4611686018427387904  # live: [v5, v21, v7, fv30, fv35, fv26, v9, v60, zero, fv34, v8, fv33, v4, fv27]
// [Asm]   fmv.d.x fv61, v60  # live: [v5, v21, fv61, v7, fv30, fv35, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm]   fmul.d fv36, fv61, fv61  # live: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv36, fv34, v8, fv33, v4, fv27]
// [Asm]   fmadd.d fv37, fv33, fv33, fv34  # live: [fv37, v5, v21, v7, fv30, fv35, fv26, v9, zero, fv36, fv34, v8, fv33, v4, fv27]
// [Asm]   fle.d v38, fv36, fv37  # live: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv34, fv33, v8, v4, v38, fv27]
// [Asm] # control
// [Asm]   beq v38, zero, .yloop7.79l2_3_25  # live: [v5, v21, zero, fv34, v7, fv30, fv33, v8, v4, fv27, fv35, fv26, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v41, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v40], uses: [zero, a0, v40], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v9], live_out: [v5, zero, v8, v7, v41, v4, v9]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_24:
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v9]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v7, v8, v4, v9]
// [Asm]   call minimbt_print_int  # live: [v5, zero, a0, v7, v8, v4, v9]
// [Asm]   mv v40, a0  # live: [v5, zero, v7, v8, v4, v9, v40]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v9, v40]
// [Asm] # control
// [Asm]   mv v41, v40  # live: [v5, zero, v7, v8, v41, v4, v9]
// [Asm] 
// [Asm] # block info: defs: [v43], uses: [v41], upward_exposed: [v41], params_defs: [v41]
// [Asm] # live_in: [v5, zero, v7, v8, v41, v4, v9], live_out: [v5, zero, v8, v7, v4, v43, v9]
// [Asm] # block parameters: [v41]
// [Asm] .yloop7.79l2_3_26:
// [Asm] # control
// [Asm]   mv v43, v41  # live: [v5, zero, v7, v8, v4, v43, v9]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [v43], upward_exposed: [v43], params_defs: [v43]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v43, v9], live_out: [v5, zero, v8, v7, v4, v44, v9]
// [Asm] # block parameters: [v43]
// [Asm] .yloop7.79l2_3_27:
// [Asm] # control
// [Asm]   mv v44, v43  # live: [v5, zero, v7, v8, v4, v44, v9]
// [Asm] 
// [Asm] # block info: defs: [v7, v45], uses: [v45, v8, v9, v7], upward_exposed: [v8, v9, v7], params_defs: [v44]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v44, v9], live_out: [v5, zero, v8, v7, v4, v9]
// [Asm] # block parameters: [v44]
// [Asm] .yloop7.79l2_3_13:
// [Asm]   addi v45, v7, 1  # live: [v5, zero, v8, v45, v4, v9]
// [Asm] # control
// [Asm]   mv v7, v45  # live: [v5, zero, v7, v8, v4, v9]
// [Asm]   mv v8, v8  # live: [v5, zero, v7, v8, v4, v9]
// [Asm]   mv v9, v9  # live: [v7, v4, v5, zero, v9, v8]
// [Asm]   j .yloop7.79l2_3_7  # live: [v7, v4, v5, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v47, ft7, ft4, v46, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v4, v5, zero], live_out: [v47, v4, v5, zero]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_8:
// [Asm]   # save_ctx2  # live: [v4, v5, zero]
// [Asm]   call minimbt_print_endline  # live: [v4, v5, zero, a0]
// [Asm]   mv v46, a0  # live: [v4, v5, zero]
// [Asm]   # restore_ctx2  # live: [v4, v5, zero]
// [Asm] # control
// [Asm]   mv v47, zero  # live: [v47, v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [v48], uses: [v47], upward_exposed: [v47], params_defs: [v47]
// [Asm] # live_in: [v47, v4, v5, zero], live_out: [v4, v5, v48, zero]
// [Asm] # block parameters: [v47]
// [Asm] .yloop7.79l2_3_10:
// [Asm] # control
// [Asm]   mv v48, v47  # live: [v4, v5, v48, zero]
// [Asm] 
// [Asm] # block info: defs: [v4, v49], uses: [v4, v5, v49], upward_exposed: [v4, v5], params_defs: [v48]
// [Asm] # live_in: [v4, v5, v48, zero], live_out: [v4, v5, zero]
// [Asm] # block parameters: [v48]
// [Asm] .yloop7.79l2_3_6:
// [Asm]   addi v49, v4, 1  # live: [v5, v49, zero]
// [Asm] # control
// [Asm]   mv v4, v49  # live: [v4, v5, zero]
// [Asm]   mv v5, v5  # live: [v4, v5, zero]
// [Asm]   j .yloop7.79l2_3_0  # live: [v4, v5, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v54, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v43, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v54, a0, v42], upward_exposed: [], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v9], live_out: [v5, zero, v8, v7, v4, v43, v9]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_22:
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v9]
// [Asm]   li v54, 1  # live: [v5, zero, v7, v8, v4, v9, v54]
// [Asm]   mv a0, v54  # live: [v5, zero, a0, v7, v8, v4, v9]
// [Asm]   call minimbt_print_int  # live: [v5, zero, a0, v7, v8, v4, v9]
// [Asm]   mv v42, a0  # live: [v5, zero, v42, v7, v8, v4, v9]
// [Asm]   # restore_ctx2  # live: [v5, zero, v42, v7, v8, v4, v9]
// [Asm] # control
// [Asm]   mv v43, v42  # live: [v5, zero, v7, v8, v4, v43, v9]
// [Asm]   j .yloop7.79l2_3_27  # live: [v5, zero, v7, v8, v4, v43, v9]
// [Asm] 
// [Asm] # block info: defs: [fv22, fv23, fv24, v21, fv25, v39], uses: [v21, fv34, fv33, fv30, fv27, fv35, fv26, v39], upward_exposed: [v21, fv34, fv33, fv30, fv27, fv35, fv26], params_defs: []
// [Asm] # live_in: [v5, v21, fv30, v7, fv35, v9, fv26, zero, fv34, fv33, v8, v4, fv27], live_out: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm] # block parameters: []
// [Asm] .yloop7.79l2_3_25:
// [Asm]   addi v39, v21, -1  # live: [v5, v7, fv30, fv35, fv26, v9, v39, zero, fv34, v8, fv33, v4, fv27]
// [Asm] # control
// [Asm]   mv v21, v39  # live: [v5, v21, v7, fv30, fv35, fv26, v9, zero, fv34, v8, fv33, v4, fv27]
// [Asm]   fmv.d fv22, fv30  # live: [v5, v21, v7, fv35, fv26, v9, fv22, zero, fv34, v8, fv33, v4, fv27]
// [Asm]   fmv.d fv23, fv33  # live: [fv23, v5, v21, v7, fv35, fv26, v9, fv22, zero, fv34, v8, v4, fv27]
// [Asm]   fmv.d fv24, fv34  # live: [fv23, fv24, v5, v21, v7, fv35, fv26, v9, fv22, zero, v8, v4, fv27]
// [Asm]   fmv.d fv25, fv35  # live: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm]   fmv.d fv26, fv26  # live: [fv23, fv24, v5, v21, v7, fv26, v9, fv22, fv25, zero, v8, v4, fv27]
// [Asm]   fmv.d fv27, fv27  # live: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm]   j .yloop7.79l2_3_21  # live: [fv22, fv23, fv24, v5, v21, fv25, zero, v7, v8, v4, fv27, fv26, v9]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("mandelbrot", Unit), args: [("w", Int)], body: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("dbl", Double), args: [("f", Double)], body: Prim(Var("f"), Var("f"), Add, kind=Some(Double))}, LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)])))
// [Knf] build_knf: Prim(Var("f"), Var("f"), Add, kind=Some(Double))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("yloop", Unit), args: [("y", Int)], body: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))}, App(Var("yloop"), [Int(0)]))
// [Knf] build_knf: If(LE(Var("w"), Var("y")), Unit, LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("xloop", Unit), args: [("x", Int), ("y", Int)], body: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Var("w"), Var("x")), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit), Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))))
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Unit)
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("cr", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double)), Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1.5), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("x")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1.5)
// [Knf] build_knf: Let(("ci", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double)), LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double)), Double(1), Sub, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])]), App(Var("float_of_int"), [Var("w")]), Div, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [App(Var("float_of_int"), [Var("y")])])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: App(Var("float_of_int"), [Var("y")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("float_of_int"), [Var("w")])
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Double(1)
// [Knf] build_knf: LetRec({name: ("iloop", Unit), args: [("i", Int), ("zr", Double), ("zi", Double), ("zr2", Double), ("zi2", Double), ("cr", Double), ("ci", Double)], body: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))}, Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])))
// [Knf] build_knf: If(Eq(Var("i"), Int(0)), App(Var("print_int"), [Int(1)]), Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("print_int"), [Int(1)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("tr", Var({val: Some(Double)})), Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double)), Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))))
// [Knf] build_knf: Prim(Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double)), Var("cr"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Sub, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Let(("ti", Var({val: Some(Double)})), Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double)), Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))))
// [Knf] build_knf: Prim(Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double)), Var("ci"), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("dbl"), [Var("zr")]), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("dbl"), [Var("zr")])
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("zr", Var({val: Some(Double)})), Var("tr"), Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))))
// [Knf] build_knf: Var("tr")
// [Knf] build_knf: Let(("zi", Var({val: Some(Double)})), Var("ti"), Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))))
// [Knf] build_knf: Var("ti")
// [Knf] build_knf: Let(("zr2", Var({val: Some(Double)})), Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double)), Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))))
// [Knf] build_knf: Prim(Var("zr"), Var("zr"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Let(("zi2", Var({val: Some(Double)})), Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double)), If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])))
// [Knf] build_knf: Prim(Var("zi"), Var("zi"), Mul, kind=Some(Double))
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: If(LE(Prim(Double(2), Double(2), Mul, kind=Some(Double)), Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))), App(Var("print_int"), [Int(0)]), App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")]))
// [Knf] build_knf: Prim(Double(2), Double(2), Mul, kind=Some(Double))
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Prim(Var("zr2"), Var("zi2"), Add, kind=Some(Double))
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: App(Var("print_int"), [Int(0)])
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("iloop"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("zr"), Var("zi"), Var("zr2"), Var("zi2"), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("zr")
// [Knf] build_knf: Var("zi")
// [Knf] build_knf: Var("zr2")
// [Knf] build_knf: Var("zi2")
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")]), App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")]))
// [Knf] build_knf: App(Var("iloop"), [Int(1000), Double(0), Double(0), Double(0), Double(0), Var("cr"), Var("ci")])
// [Knf] build_knf: Var("iloop")
// [Knf] build_knf: Int(1000)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: Var("cr")
// [Knf] build_knf: Var("ci")
// [Knf] build_knf: App(Var("xloop"), [Prim(Var("x"), Int(1), Add, kind=Some(Int)), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("xloop"), [Int(0), Var("y")]), App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("xloop"), [Int(0), Var("y")])
// [Knf] build_knf: Var("xloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("y")
// [Knf] build_knf: App(Var("yloop"), [Prim(Var("y"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Prim(Var("y"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("yloop"), [Int(0)])
// [Knf] build_knf: Var("yloop")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("mandelbrot"), [Int(40)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("mandelbrot"), [Int(40)])
// [Knf] build_knf: Var("mandelbrot")
// [Knf] build_knf: Int(40)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl dbl4.77l1_0
// [Main]   .type dbl4.77l1_0, @function
// [Main] # leaf true
// [Main] dbl4.77l1_0:
// [Main] .dbl4.77l1_0_0:
// [Main]   fadd.d fa0, fa0, fa0
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main75l0_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main75l0_4
// [Main]   .type main75l0_4, @function
// [Main] # leaf false
// [Main] main75l0_4:
// [Main] .main75l0_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a0, zero
// [Main]   li a1, 40
// [Main]   call yloop7.79l2_3
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl yloop7.79l2_3
// [Main]   .type yloop7.79l2_3, @function
// [Main] # leaf false
// [Main] yloop7.79l2_3:
// [Main] .yloop7.79l2_3_5:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   fsd fs0, 40(sp)
// [Main]   fsd fs1, 48(sp)
// [Main]   fsd fs2, 56(sp)
// [Main]   fsd fs3, 64(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .yloop7.79l2_3_0:
// [Main]   blt s0, s1, .yloop7.79l2_3_2
// [Main] 
// [Main] .yloop7.79l2_3_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop7.79l2_3_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   fld fs0, 40(sp)
// [Main]   fld fs1, 48(sp)
// [Main]   fld fs2, 56(sp)
// [Main]   fld fs3, 64(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .yloop7.79l2_3_2:
// [Main] 
// [Main] .yloop7.79l2_3_12:
// [Main]   mv s2, zero
// [Main] 
// [Main] .yloop7.79l2_3_7:
// [Main]   bge s2, s1, .yloop7.79l2_3_8
// [Main] 
// [Main] .yloop7.79l2_3_9:
// [Main]   fcvt.d.w fa0, s2
// [Main]   call dbl4.77l1_0
// [Main]   fcvt.d.w fa1, s1
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4609434218613702656
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fs1, fa0, fa1
// [Main]   fcvt.d.w fa0, s0
// [Main]   call dbl4.77l1_0
// [Main]   fcvt.d.w fa1, s1
// [Main]   fdiv.d fa0, fa0, fa1
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa1, a0
// [Main]   fsub.d fa3, fa0, fa1
// [Main] 
// [Main] .yloop7.79l2_3_29:
// [Main]   li a0, 1000
// [Main]   mv s3, a0
// [Main]   fmv.d.x fa0, zero
// [Main]   fmv.d fs0, fa0
// [Main]   fmv.d fa1, fa0
// [Main]   fmv.d fa2, fa0
// [Main]   fmv.d fs2, fa3
// [Main] 
// [Main] .yloop7.79l2_3_21:
// [Main]   beq s3, zero, .yloop7.79l2_3_22
// [Main] 
// [Main] .yloop7.79l2_3_23:
// [Main]   fsub.d fa1, fa1, fa2
// [Main]   fadd.d fs3, fa1, fs1
// [Main]   call dbl4.77l1_0
// [Main]   fmadd.d fa3, fa0, fs0, fs2
// [Main]   fmul.d fa1, fs3, fs3
// [Main]   fmul.d fa2, fa3, fa3
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   fmul.d fa0, fa0, fa0
// [Main]   fmadd.d fa4, fa3, fa3, fa1
// [Main]   fle.d a0, fa0, fa4
// [Main]   beq a0, zero, .yloop7.79l2_3_25
// [Main] 
// [Main] .yloop7.79l2_3_24:
// [Main]   mv a0, zero
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .yloop7.79l2_3_26:
// [Main] 
// [Main] .yloop7.79l2_3_27:
// [Main] 
// [Main] .yloop7.79l2_3_13:
// [Main]   addi a0, s2, 1
// [Main]   mv s2, a0
// [Main]   j .yloop7.79l2_3_7
// [Main] 
// [Main] .yloop7.79l2_3_8:
// [Main]   call minimbt_print_endline
// [Main]   mv a0, zero
// [Main] 
// [Main] .yloop7.79l2_3_10:
// [Main] 
// [Main] .yloop7.79l2_3_6:
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .yloop7.79l2_3_0
// [Main] 
// [Main] .yloop7.79l2_3_22:
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   j .yloop7.79l2_3_27
// [Main] 
// [Main] .yloop7.79l2_3_25:
// [Main]   addi a0, s3, -1
// [Main]   mv s3, a0
// [Main]   fmv.d fa0, fs3
// [Main]   fmv.d fs0, fa3
// [Main]   j .yloop7.79l2_3_21
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main75l0_4
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=0), Int32(val=40)])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function main75l0_4 to wasm
// [Wasm] Lowering function T$start_10
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_10 to wasm
// [Wasm] Lowering function yloop7.79l2_3
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%2), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering control Jump(target=b10, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b7, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Jump(target=b7, args=[Insn(iref=%16), BlockParam(bref=b7, bpref=$b.1), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=1)])
// [Wasm] Lowering control Jump(target=b27, args=[Insn(iref=%18)])
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Int32(val=0)])
// [Wasm] Lowering control Jump(target=b26, args=[Insn(iref=%29)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b21, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b21, args=[Insn(iref=%30), Insn(iref=%20), Insn(iref=%23), Insn(iref=%24), Insn(iref=%25), BlockParam(bref=b21, bpref=$b.5), BlockParam(bref=b21, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.1) -> $b21.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.2) -> $b21.$b.2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.3) -> $b21.$b.3
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.4) -> $b21.$b.4
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.5) -> $b21.$b.5
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.5) -> $b21.$b.5
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.6) -> $b21.$b.6
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.6) -> $b21.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[BlockParam(bref=b21, bpref=$b.3), BlockParam(bref=b21, bpref=$b.4)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.3) -> $b21.$b.3
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.4) -> $b21.$b.4
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%19), BlockParam(bref=b21, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.5) -> $b21.$b.5
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[BlockParam(bref=b21, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.1) -> $b21.$b.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%21), BlockParam(bref=b21, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.2) -> $b21.$b.2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%22), BlockParam(bref=b21, bpref=$b.6)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.6) -> $b21.$b.6
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%20), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%23), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=2), Double(val=2)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%24), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%26), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Branch(cond=Insn(iref=%28), t=b24, t_args=[], f=b25, f_args=[])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b21, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Branch(cond=Insn(iref=%17), t=b22, t_args=[], f=b23, f_args=[])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering control Jump(target=b28, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%9), Insn(iref=%14)])
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.1) -> $b21.$b.1
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.2) -> $b21.$b.2
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.3) -> $b21.$b.3
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.4) -> $b21.$b.4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.5) -> $b21.$b.5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b21, bpref=$b.6) -> $b21.$b.6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%8), Double(val=1.5)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b7, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=I2D, args=[BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Div, args=[Insn(iref=%11), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Sub, args=[Insn(iref=%13), Double(val=1)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b29, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b7, bpref=$b.2), BlockParam(bref=b7, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b11, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Lowering control Jump(target=b12, args=[])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local BlockParam(bref=b21, bpref=$b.3) -> $b21.$b.3
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b21, bpref=$b.6) -> $b21.$b.6
// [Wasm] Local BlockParam(bref=b21, bpref=$b.4) -> $b21.$b.4
// [Wasm] Local BlockParam(bref=b21, bpref=$b.1) -> $b21.$b.1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b21, bpref=$b.2) -> $b21.$b.2
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local BlockParam(bref=b21, bpref=$b.5) -> $b21.$b.5
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b21, bpref=$b.0) -> $b21.$b.0
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function yloop7.79l2_3 to wasm
// [Wasm] Lowering function dbl4.77l1_0
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function dbl4.77l1_0 to wasm
// [KnfOpt] freq: {mandelbrot1: Once, dbl4: Many, yloop7: Many, xloop10: Many, iloop29: Many, main75: Once}
// [KnfOpt] Knf inline Some(mandelbrot1)
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f1, args=[Insn(iref=%13), Insn(iref=%3), Insn(iref=%6), Insn(iref=%7), Insn(iref=%8), FnParam(fref=f1, fpref=$f.5), FnParam(fref=f1, fpref=$f.6)])
// [CoreOpt] eliminated tail rec call %14: Call(ty=Unit, f=f2, args=[Insn(iref=%13), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f3, args=[Insn(iref=%2), FnParam(fref=f3, fpref=$f.1)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Once, f3: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%12) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] xloop10.81l3_2 is inlining Call(ty=Unit, f=f1, args=[Int32(val=1000), Double(val=0), Double(val=0), Double(val=0), Double(val=0), Insn(iref=%6), Insn(iref=%11)])
// [CoreOpt] shifted callee .fn iloop29.97l4_1 #f1 : fn(int32, double, double, double, double, double, double) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b22 {
// [CoreOpt]   .bb #b14 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %14: bool = eq($b14.0, 0)
// [CoreOpt]     br %14 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %15: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b20(%15)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     let %16: double = sub($b14.3, $b14.4)
// [CoreOpt]     let %17: double = add(%16, $b14.5)
// [CoreOpt]     let %18: double = call f0($b14.1)
// [CoreOpt]     let %19: double = mul(%18, $b14.2)
// [CoreOpt]     let %20: double = add(%19, $b14.6)
// [CoreOpt]     let %21: double = mul(%17, %17)
// [CoreOpt]     let %22: double = mul(%20, %20)
// [CoreOpt]     let %23: double = mul(2, 2)
// [CoreOpt]     let %24: double = add(%21, %22)
// [CoreOpt]     let %25: bool = le(%23, %24)
// [CoreOpt]     br %25 b17() b18()
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 () {
// [CoreOpt]     let %26: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b19(%26)
// [CoreOpt]   }
// [CoreOpt]   .bb #b18 () {
// [CoreOpt]     let %27: int32 = sub($b14.0, 1)
// [CoreOpt]     jump b14(%27, %17, %20, %21, %22, $b14.5, $b14.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 (unit) {
// [CoreOpt]     jump b20($b19.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b20 (unit) {
// [CoreOpt]     return $b20.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b21 header #b14 {
// [CoreOpt]     .block #b20
// [CoreOpt]     .block #b18
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b19
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     jump b21($f0, $f1, $f2, $f3, $f4, $f5, $f6)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] yloop7.79l2_3 is inlining Call(ty=Unit, f=f2, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1)])
// [CoreOpt] shifted callee .fn xloop10.81l3_2 #f2 : fn(int32, int32, int32) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32) {
// [CoreOpt]     let %3: bool = le($b7.2, $b7.0)
// [CoreOpt]     br %3 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %4: unit = ext_call minimbt_print_endline()
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     let %5: double = conv.i2d($b7.0)
// [CoreOpt]     let %6: double = call f0(%5)
// [CoreOpt]     let %7: double = conv.i2d($b7.2)
// [CoreOpt]     let %8: double = div(%6, %7)
// [CoreOpt]     let %9: double = sub(%8, 1.5)
// [CoreOpt]     let %10: double = conv.i2d($b7.1)
// [CoreOpt]     let %11: double = call f0(%10)
// [CoreOpt]     let %12: double = conv.i2d($b7.2)
// [CoreOpt]     let %13: double = div(%11, %12)
// [CoreOpt]     let %14: double = sub(%13, 1)
// [CoreOpt]     jump b29()
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %16: int32 = add($b7.0, 1)
// [CoreOpt]     jump b7(%16, $b7.1, $b7.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b21 (int32, double, double, double, double, double, double) {
// [CoreOpt]     let %17: bool = eq($b21.0, 0)
// [CoreOpt]     br %17 b22() b23()
// [CoreOpt]   }
// [CoreOpt]   .bb #b22 () {
// [CoreOpt]     let %18: unit = ext_call minimbt_print_int(1)
// [CoreOpt]     jump b27(%18)
// [CoreOpt]   }
// [CoreOpt]   .bb #b23 () {
// [CoreOpt]     let %19: double = sub($b21.3, $b21.4)
// [CoreOpt]     let %20: double = add(%19, $b21.5)
// [CoreOpt]     let %21: double = call f0($b21.1)
// [CoreOpt]     let %22: double = mul(%21, $b21.2)
// [CoreOpt]     let %23: double = add(%22, $b21.6)
// [CoreOpt]     let %24: double = mul(%20, %20)
// [CoreOpt]     let %25: double = mul(%23, %23)
// [CoreOpt]     let %26: double = mul(2, 2)
// [CoreOpt]     let %27: double = add(%24, %25)
// [CoreOpt]     let %28: bool = le(%26, %27)
// [CoreOpt]     br %28 b24() b25()
// [CoreOpt]   }
// [CoreOpt]   .bb #b24 () {
// [CoreOpt]     let %29: unit = ext_call minimbt_print_int(0)
// [CoreOpt]     jump b26(%29)
// [CoreOpt]   }
// [CoreOpt]   .bb #b25 () {
// [CoreOpt]     let %30: int32 = sub($b21.0, 1)
// [CoreOpt]     jump b21(%30, %20, %23, %24, %25, $b21.5, $b21.6)
// [CoreOpt]   }
// [CoreOpt]   .bb #b26 (unit) {
// [CoreOpt]     jump b27($b26.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b27 (unit) {
// [CoreOpt]     jump b13($b27.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b28 header #b21 {
// [CoreOpt]     .block #b27
// [CoreOpt]     .block #b25
// [CoreOpt]     .block #b22
// [CoreOpt]     .block #b26
// [CoreOpt]     .block #b23
// [CoreOpt]     .block #b24
// [CoreOpt]   }
// [CoreOpt]   .bb #b29 () {
// [CoreOpt]     jump b28(1000, 0, 0, 0, 0, %9, %14)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f2
