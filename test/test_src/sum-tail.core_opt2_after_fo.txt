# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn sum.19 #f0 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    jump b1($f0, $f1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32, int32) {
    let %0: bool = le($b2.1, 0)
    br %0 b3() b4()
  }
  .bb #b3 () {
    jump b5($b2.0)
  }
  .bb #b4 () {
    let %1: int32 = add($b2.0, $b2.1)
    let %2: int32 = sub($b2.1, 1)
    jump b2(%1, %2)
  }
  .bb #b5 (int32) {
    return $b5.0
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main.20 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(0, 10000)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start
