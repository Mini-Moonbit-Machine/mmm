let rec adder4l1: Double = (y5.6: Int, x2.3: Double) {
  let _7: Double = ExtApply(minimbt_float_of_int, [y5.6, ])
  FAdd(x2.3, _7)
}
let rec make_adder1l0: Fun([Int], Double) = (x2.3: Double) {
  let rec adder4l1c0: Double = (y5.6: Int) {
    Apply(adder4l1, [y5.6, x2.3, ])
  }
  Var(adder4l1c0)
}
let rec main8l1: Var({val: Some(Unit)}) = () {
  let _9: Double = Double(2.14)
  let add.10: Fun([Int], Double) = Apply(make_adder1l0, [_9, ])
  let _11: Int = Int(1)
  let _12: Double = Apply(add.10, [_11, ])
  let _13: Int = ExtApply(minimbt_int_of_float, [_12, ])
  ExtApply(minimbt_print_int, [_13, ])
}
Apply(main8l1, [])