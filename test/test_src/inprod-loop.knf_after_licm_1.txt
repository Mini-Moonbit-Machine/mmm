let rec inprod.30: Double = (v1.3: Array[Double], v2.5: Array[Double], acc.7: Double, i.9: Int) {
  let _10: Int = Int(0)
  if (_10 <= i.9) then {
    let _11: Double = Get v1.3[i.9]
    let _12: Double = Get v2.5[i.9]
    let _13: Double = FMul(_11, _12)
    let _14: Double = FAdd(acc.7, _13)
    let _15: Int = Int(1)
    let _16: Int = Sub(i.9, _15)
    Apply(inprod.30, [v1.3, v2.5, _14, _16, ])
  } else {
    Var(acc.7)
  }
}
let rec main.31: Unit = () {
  let _18: Int = Int(3)
  let _19: Double = Double(1.23)
  let v1.20: Array[Double] = ExtApply(minimbt_create_float_array, [_18, _19, ])
  let _21: Int = Int(3)
  let _22: Double = Double(4.56)
  let v2.23: Array[Double] = ExtApply(minimbt_create_float_array, [_21, _22, ])
  let _24: Double = Double(1000000)
  let _25: Double = Double(0)
  let _26: Int = Int(2)
  let _27: Double = Apply(inprod.30, [v1.20, v2.23, _25, _26, ])
  let _28: Double = FMul(_24, _27)
  let _29: Int = ExtApply(minimbt_truncate, [_28, ])
  ExtApply(minimbt_print_int, [_29, ])
}
Apply(main.31, [])
