let rec getx.1: Double = (v.2: Tuple([Double, Double, Double])) {
  let (x.3: Var({val: Some(Double)}), _4: Var({val: Some(Double)}), _5: Var({val: Some(Double)})) = v.2
  Var(x.3)
}
let rec gety.6: Double = (v.7: Tuple([Double, Double, Double])) {
  let (_8: Var({val: Some(Double)}), y.9: Var({val: Some(Double)}), _10: Var({val: Some(Double)})) = v.7
  Var(y.9)
}
let rec getz.11: Double = (v.12: Tuple([Double, Double, Double])) {
  let (_13: Var({val: Some(Double)}), _14: Var({val: Some(Double)}), z.15: Var({val: Some(Double)})) = v.12
  Var(z.15)
}
let rec main.29: Var({val: Some(Unit)}) = () {
  let _30: Double = Double(1000000)
  let _31: Double = Double(1)
  let _32: Double = Double(2)
  let _33: Double = Double(3)
  let _34: Tuple([Double, Double, Double]) = Tuple([_31, _32, _33, ])
  let _35: Double = Double(4)
  let _36: Double = Double(5)
  let _37: Double = Double(6)
  let _38: Tuple([Double, Double, Double]) = Tuple([_35, _36, _37, ])
  let _60: Double = Apply(getx.1, [_34, ])
  let _61: Double = Apply(getx.1, [_38, ])
  let _62: Double = FMul(_60, _61)
  let _63: Double = Apply(gety.6, [_34, ])
  let _64: Double = Apply(gety.6, [_38, ])
  let _65: Double = FMul(_63, _64)
  let _66: Double = FAdd(_62, _65)
  let _67: Double = Apply(getz.11, [_34, ])
  let _68: Double = Apply(getz.11, [_38, ])
  let _69: Double = FMul(_67, _68)
  let _39: Double = FAdd(_66, _69)
  let _40: Double = FMul(_30, _39)
  let _41: Int = ExtApply(minimbt_truncate, [_40, ])
  ExtApply(minimbt_print_int, [_41, ])
}
Apply(main.29, [])