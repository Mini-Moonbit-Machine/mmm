let rec inprod.16: Double = (v1.17: Tuple([Double, Double, Double]), v2.18: Tuple([Double, Double, Double])) {
  let (x.135: Var({val: Some(Double)}), _136: Var({val: Some(Double)}), _137: Var({val: Some(Double)})) = v1.17
  let (x.183: Var({val: Some(Double)}), _184: Var({val: Some(Double)}), _185: Var({val: Some(Double)})) = v2.18
  let _21: Double = FMul(x.135, x.183)
  let (_207: Var({val: Some(Double)}), y.208: Var({val: Some(Double)}), _209: Var({val: Some(Double)})) = v1.17
  let (_219: Var({val: Some(Double)}), y.220: Var({val: Some(Double)}), _221: Var({val: Some(Double)})) = v2.18
  let _24: Double = FMul(y.208, y.220)
  let _25: Double = FAdd(_21, _24)
  let (_225: Var({val: Some(Double)}), _226: Var({val: Some(Double)}), z.227: Var({val: Some(Double)})) = v1.17
  let (_228: Var({val: Some(Double)}), _229: Var({val: Some(Double)}), z.230: Var({val: Some(Double)})) = v2.18
  let _28: Double = FMul(z.227, z.230)
  FAdd(_25, _28)
}
let rec main.29: Var({val: Some(Unit)}) = () {
  let _30: Double = Double(1000000)
  let _31: Double = Double(1)
  let _32: Double = Double(2)
  let _33: Double = Double(3)
  let _34: Tuple([Double, Double, Double]) = Tuple([_31, _32, _33, ])
  let _35: Double = Double(4)
  let _36: Double = Double(5)
  let _37: Double = Double(6)
  let _38: Tuple([Double, Double, Double]) = Tuple([_35, _36, _37, ])
  let _39: Double = Apply(inprod.16, [_34, _38, ])
  let _40: Double = FMul(_30, _39)
  let _41: Int = ExtApply(minimbt_truncate, [_40, ])
  ExtApply(minimbt_print_int, [_41, ])
}
Apply(main.29, [])let rec inprod.16: Double = (v1.17: Tuple([Double, Double, Double]), v2.18: Tuple([Double, Double, Double])) {
  let (x.135: Var({val: Some(Double)}), _136: Var({val: Some(Double)}), _137: Var({val: Some(Double)})) = v1.17
  let (x.183: Var({val: Some(Double)}), _184: Var({val: Some(Double)}), _185: Var({val: Some(Double)})) = v2.18
  let _21: Double = FMul(x.135, x.183)
  let (_207: Var({val: Some(Double)}), y.208: Var({val: Some(Double)}), _209: Var({val: Some(Double)})) = v1.17
  let (_219: Var({val: Some(Double)}), y.220: Var({val: Some(Double)}), _221: Var({val: Some(Double)})) = v2.18
  let _24: Double = FMul(y.208, y.220)
  let _25: Double = FAdd(_21, _24)
  let (_225: Var({val: Some(Double)}), _226: Var({val: Some(Double)}), z.227: Var({val: Some(Double)})) = v1.17
  let (_228: Var({val: Some(Double)}), _229: Var({val: Some(Double)}), z.230: Var({val: Some(Double)})) = v2.18
  let _28: Double = FMul(z.227, z.230)
  FAdd(_25, _28)
}
let rec main.29: Var({val: Some(Unit)}) = () {
  let _30: Double = Double(1000000)
  let _31: Double = Double(1)
  let _32: Double = Double(2)
  let _33: Double = Double(3)
  let _34: Tuple([Double, Double, Double]) = Tuple([_31, _32, _33, ])
  let _35: Double = Double(4)
  let _36: Double = Double(5)
  let _37: Double = Double(6)
  let _38: Tuple([Double, Double, Double]) = Tuple([_35, _36, _37, ])
  let _39: Double = Apply(inprod.16, [_34, _38, ])
  let _40: Double = FMul(_30, _39)
  let _41: Int = ExtApply(minimbt_truncate, [_40, ])
  ExtApply(minimbt_print_int, [_41, ])
}
Apply(main.29, [])