// [Knf] build_knf: LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Int(30)])])
// [Knf] build_knf: App(Var("fib"), [Int(30)])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Int(30)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function fib_1(n_3, k) {
// [Main]     const _4 = 1;
// [Main]     if (n_3 <= _4) {
// [Main]       return k(n_3)
// [Main]     } else {
// [Main]       const _5 = 1;
// [Main]       const _6 = n_3 - _5;
// [Main]       return $thunk(() => fib_1(_6, function (_7) {
// [Main]         const _8 = 2;
// [Main]         const _9 = n_3 - _8;
// [Main]         return $thunk(() => fib_1(_9, function (_10) {
// [Main]           return $thunk(() => $thunk(() => k(_7 + _10)))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_11(k) {
// [Main]     const _12 = 30;
// [Main]     return $thunk(() => fib_1(_12, function (_13) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_13))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_11(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("fib", Int), args: [("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None)) against Int
// [Typer] check: LE(Var("n"), Int(1)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=None)]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=None)]), Add, kind=None) against Int
// [Typer] check: App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("fib") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("n"), Int(2), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(2)
// [Typer] unify: Int and Int
// [Typer] check: Var("fib") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("fib"), [Int(30)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("fib"), [Int(30)]) against Int
// [Typer] infer: Int(30)
// [Typer] check: Var("fib") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
