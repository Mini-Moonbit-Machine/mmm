// [Asm] pre_assigned_registers: Insn(iref=%15) -> v20, Self(fref=f0) -> v0, Insn(iref=%9) -> v13, Insn(iref=%8) -> v12, Insn(iref=%10) -> v14, Insn(iref=%14) -> v18, BlockParam(bref=b8, bpref=$b.0) -> v19, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v8, Insn(iref=%0) -> v3, Insn(iref=%4) -> v7, Insn(iref=%3) -> v6, Insn(iref=%13) -> v17, Insn(iref=%7) -> v10, BlockParam(bref=b5, bpref=$b.0) -> v11, Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Insn(iref=%11) -> v15, Insn(iref=%6) -> v9, BlockParam(bref=b9, bpref=$b.0) -> v21, Insn(iref=%12) -> v16
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%8), Int32(val=1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Insn(iref=%1), Int32(val=1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=1)])
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v11]
// [Asm] move_origin: [v12]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v11]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v11, v14, v12]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v14, v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v12, a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v12, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v15, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v15, v12]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v15]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v15, a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v15, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v17, v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v17, v15]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v11]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v35, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v12, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v12]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v2]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v8, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, a0, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v7, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v2]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of fib1l0_0"];
// [Asm]   r0 [label="v11 ← s0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v37 ← a0", color=green];
// [Asm]   r6 [label="v12 ← s1", color=green];
// [Asm]   r13 [label="a1", color=blue];
// [Asm]   r4 [label="v19 ← a0", color=green];
// [Asm]   r29 [label="v7 ← s2", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v14 ← a0", color=green];
// [Asm]   r32 [label="v10 ← a0", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r24 [label="v4 ← s0", color=green];
// [Asm]   r31 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r20 [label="v15 ← s2", color=green];
// [Asm]   r23 [label="v18 ← a0", color=green];
// [Asm]   r3 [label="v21 ← a0", color=green];
// [Asm]   r27 [label="v28 ← a0", color=green];
// [Asm]   r1 [label="v2 ← s1", color=green];
// [Asm]   r28 [label="v6 ← a0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r22 [label="v17 ← a0", color=green];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r30 [label="v8 ← a0", color=green];
// [Asm]   r25 [label="v35 ← a0", color=green];
// [Asm]   r2 [label="v20 ← a0", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 [label="v16 ← a0", color=green];
// [Asm]   r12 -- r29;
// [Asm]   r0 -- r13;
// [Asm]   r14 -- r20;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r30;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r29 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r11 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r0 -- r16;
// [Asm]   r0 -- r6;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r16 -- r29;
// [Asm]   r1 -- r9;
// [Asm]   r10 -- r20;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r19 -- r29;
// [Asm]   r0 -- r9;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r8 -- r29;
// [Asm]   r18 -- r20;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r13 -- r29;
// [Asm]   r17 -- r20;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r13 -- r24;
// [Asm]   r0 -- r15;
// [Asm]   r7 -- r29;
// [Asm]   r6 -- r11;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r29;
// [Asm]   r6 -- r14;
// [Asm]   r7 -- r24;
// [Asm]   r29 -- r30;
// [Asm]   r9 -- r29;
// [Asm]   r18 -- r29;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r17 -- r24;
// [Asm]   r10 -- r29;
// [Asm]   r19 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r12;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r0 -- r19;
// [Asm]   r13 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r7 -- r19;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r6 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r0 -- r12;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r1 -- r14;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r15 -- r20;
// [Asm]   r0 -- r20;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r10 -- r24;
// [Asm]   r11 -- r29;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v11-> 1:v2-> 7:a0-> 8:t0-> 6:v12-> 9:t1-> 20:v15-> 10:t2-> 11:t3-> 24:v4-> 29:v7-> 12:t4-> 13:a1-> 14:a2-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 5:v14-> 21:v16-> 22:v17-> 25:v35-> 27:v28-> 28:v6-> 30:v8-> 31:v9-> 4:v19-> 23:v18-> 26:v37-> 32:v10-> 2:v20-> 3:v21"
// [Asm]   comment = "v11<-s0;v37<-a0;v12<-s1;v19<-a0;v7<-s2;v14<-a0;v10<-a0;v4<-s0;v9<-a0;v15<-s2;v18<-a0;v21<-a0;v28<-a0;v2<-s1;v6<-a0;v17<-a0;v8<-a0;v35<-a0;v20<-a0;v16<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of fib1l0_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   j .fib1l0_0_5 ->   j .fib1l0_0_5
// [Asm] subst   add v20, v11, v19 ->   add a0, s0, a0
// [Asm] subst   mv v19, v12 ->   mv a0, s1
// [Asm] subst   j .fib1l0_0_8 ->   j .fib1l0_0_8
// [Asm] subst   addi v14, v12, -1 ->   addi a0, s1, -1
// [Asm] subst   call fib1l0_0 ->   call fib1l0_0
// [Asm] subst   mv v15, a0 ->   mv s2, a0
// [Asm] subst   addi v16, v12, -2 ->   addi a0, s1, -2
// [Asm] subst   call fib1l0_0 ->   call fib1l0_0
// [Asm] subst   add v18, v15, v17 ->   add a0, s2, a0
// [Asm] subst   addi v4, v2, -1 ->   addi s0, s1, -1
// [Asm] subst   li v35, 1 ->   li a0, 1
// [Asm] subst   bge v35, v4, .fib1l0_0_3 ->   bge a0, s0, .fib1l0_0_3
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   li v37, 1 ->   li a0, 1
// [Asm] subst   bge v37, v2, .fib1l0_0_1 ->   bge a0, s1, .fib1l0_0_1
// [Asm] subst   addi v12, v2, -2 ->   addi s1, s1, -2
// [Asm] subst   li v28, 1 ->   li a0, 1
// [Asm] subst   bge v28, v12, .fib1l0_0_6 ->   bge a0, s1, .fib1l0_0_6
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v21, v2 ->   mv a0, s1
// [Asm] subst   j .fib1l0_0_9 ->   j .fib1l0_0_9
// [Asm] subst   addi v6, v4, -1 ->   addi a0, s0, -1
// [Asm] subst   call fib1l0_0 ->   call fib1l0_0
// [Asm] subst   mv v7, a0 ->   mv s2, a0
// [Asm] subst   addi v8, v4, -2 ->   addi a0, s0, -2
// [Asm] subst   call fib1l0_0 ->   call fib1l0_0
// [Asm] subst   add v10, v7, v9 ->   add a0, s2, a0
// [Asm] subst   mv v11, v10 ->   mv s0, a0
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main11l1_1 ->   call main11l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v5, BlockParam(bref=b3, bpref=$b.0) -> v8, Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Self(fref=f1) -> v0, Insn(iref=%6) -> v9, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%4) -> v6
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=30), Int32(val=1)])
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v4, v14]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v7]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v19, v20]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [v11]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main11l1_1"];
// [Asm]   r0 [label="v17 ← a0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r23 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="t0", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t3", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t1", color=blue];
// [Asm]   r1 [label="v3 ← a0", color=green];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t4", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r22 [label="v20 ← a1", color=green];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="t2", color=blue];
// [Asm]   r15 [label="v4 ← s0", color=green];
// [Asm]   r24 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v14 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r21 [label="v19 ← a0", color=green];
// [Asm]   r17 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r13 -- r15;
// [Asm]   r15 -- r17;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r2 -- r4;
// [Asm]   r8 -- r15;
// [Asm]   r9 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r2 -- r12;
// [Asm]   r12 -- r15;
// [Asm]   r2 -- r8;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r13;
// [Asm]   r11 -- r15;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r9;
// [Asm]   r21 -- r22;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r15;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v17-> 1:v3-> 2:a0-> 3:t0-> 15:v4-> 4:t1-> 5:t2-> 6:t3-> 7:t4-> 8:a1-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 16:v14-> 17:v5-> 18:v6-> 19:v7-> 20:v8-> 21:v19-> 22:v20-> 23:v9-> 24:v11"
// [Asm]   comment = "v17<-a0;v8<-a0;v9<-a0;v3<-a0;v20<-a1;v4<-s0;v11<-a0;v14<-a0;v6<-a0;v7<-a0;v19<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main11l1_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v17, 30 ->   li a0, 30
// [Asm] subst   addi v3, v17, -1 ->   addi a0, a0, -1
// [Asm] subst   call fib1l0_0 ->   call fib1l0_0
// [Asm] subst   mv v4, a0 ->   mv s0, a0
// [Asm] subst   li v14, 30 ->   li a0, 30
// [Asm] subst   addi v5, v14, -2 ->   addi a0, a0, -2
// [Asm] subst   call fib1l0_0 ->   call fib1l0_0
// [Asm] subst   add v7, v4, v6 ->   add a0, s0, a0
// [Asm] subst   li v19, 1 ->   li a0, 1
// [Asm] subst   li v20, 30 ->   li a1, 30
// [Asm] subst   bge v19, v20, .main11l1_1_1 ->   bge a0, a1, .main11l1_1_1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] subst   li v11, 30 ->   li a0, 30
// [Asm] subst   j .main11l1_1_3 ->   j .main11l1_1_3
// [Asm] before colored: # leaf false
// [Asm] fib1l0_0:
// [Asm] # block info: defs: [v37, v2], uses: [v37, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm] # control
// [Asm]   li v37, 1  # live: [v37, v2]
// [Asm]   bge v37, v2, .fib1l0_0_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v4, v35], uses: [v35, v4, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v4, v2]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_2:
// [Asm]   addi v4, v2, -1  # live: [v4, v2]
// [Asm] # control
// [Asm]   li v35, 1  # live: [v35, v4, v2]
// [Asm]   bge v35, v4, .fib1l0_0_3  # live: [v4, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v10, a0, v7, v8, v4, v6, v9], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4, v2], live_out: [v11, v2]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_4:
// [Asm]   addi v6, v4, -1  # live: [v4, v6, v2]
// [Asm]   # save_ctx2  # live: [v4, v6, v2]
// [Asm]   mv a0, v6  # live: [v4, a0, v2]
// [Asm]   call fib1l0_0  # live: [v4, a0, v2]
// [Asm]   mv v7, a0  # live: [v7, v4, v2]
// [Asm]   # restore_ctx2  # live: [v7, v4, v2]
// [Asm]   addi v8, v4, -2  # live: [v7, v8, v2]
// [Asm]   # save_ctx2  # live: [v7, v8, v2]
// [Asm]   mv a0, v8  # live: [v7, a0, v2]
// [Asm]   call fib1l0_0  # live: [v7, a0, v2]
// [Asm]   mv v9, a0  # live: [v7, v9, v2]
// [Asm]   # restore_ctx2  # live: [v7, v9, v2]
// [Asm]   add v10, v7, v9  # live: [v10, v2]
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11, v2]
// [Asm] 
// [Asm] # block info: defs: [v12, v28], uses: [v12, v28, v2], upward_exposed: [v2], params_defs: [v11]
// [Asm] # live_in: [v11, v2], live_out: [v11, v12]
// [Asm] # block parameters: [v11]
// [Asm] .fib1l0_0_5:
// [Asm]   addi v12, v2, -2  # live: [v11, v12]
// [Asm] # control
// [Asm]   li v28, 1  # live: [v11, v12, v28]
// [Asm]   bge v28, v12, .fib1l0_0_6  # live: [v11, v12]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v14, v16, v18, a0, v17, v15, v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v11, v12], live_out: [v19, v11]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_7:
// [Asm]   addi v14, v12, -1  # live: [v11, v14, v12]
// [Asm]   # save_ctx2  # live: [v11, v14, v12]
// [Asm]   mv a0, v14  # live: [v11, v12, a0]
// [Asm]   call fib1l0_0  # live: [v11, v12, a0]
// [Asm]   mv v15, a0  # live: [v11, v15, v12]
// [Asm]   # restore_ctx2  # live: [v11, v15, v12]
// [Asm]   addi v16, v12, -2  # live: [v11, v16, v15]
// [Asm]   # save_ctx2  # live: [v11, v16, v15]
// [Asm]   mv a0, v16  # live: [v11, v15, a0]
// [Asm]   call fib1l0_0  # live: [v11, v15, a0]
// [Asm]   mv v17, a0  # live: [v11, v17, v15]
// [Asm]   # restore_ctx2  # live: [v11, v17, v15]
// [Asm]   add v18, v15, v17  # live: [v11, v18]
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19, v11]
// [Asm] 
// [Asm] # block info: defs: [v21, v20], uses: [v11, v19, v20], upward_exposed: [v11, v19], params_defs: [v19]
// [Asm] # live_in: [v19, v11], live_out: [v21]
// [Asm] # block parameters: [v19]
// [Asm] .fib1l0_0_8:
// [Asm]   add v20, v11, v19  # live: [v20]
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v21, a0], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: []
// [Asm] # block parameters: [v21]
// [Asm] .fib1l0_0_9:
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_1:
// [Asm] # control
// [Asm]   mv v21, v2  # live: [v21]
// [Asm]   j .fib1l0_0_9  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v4], upward_exposed: [v4], params_defs: []
// [Asm] # live_in: [v4, v2], live_out: [v11, v2]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_3:
// [Asm] # control
// [Asm]   mv v11, v4  # live: [v11, v2]
// [Asm]   j .fib1l0_0_5  # live: [v11, v2]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v12], upward_exposed: [v12], params_defs: []
// [Asm] # live_in: [v11, v12], live_out: [v19, v11]
// [Asm] # block parameters: []
// [Asm] .fib1l0_0_6:
// [Asm] # control
// [Asm]   mv v19, v12  # live: [v19, v11]
// [Asm]   j .fib1l0_0_8  # live: [v19, v11]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main11l1_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main11l1_1:
// [Asm] # block info: defs: [v19, v20], uses: [v19, v20], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main11l1_1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v19, 1  # live: [v19]
// [Asm]   li v20, 30  # live: [v19, v20]
// [Asm]   bge v19, v20, .main11l1_1_1  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v14, v5, a0, v7, v4, v17, v6, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .main11l1_1_2:
// [Asm]   li v17, 30  # live: [v17]
// [Asm]   addi v3, v17, -1  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call fib1l0_0  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm]   li v14, 30  # live: [v4, v14]
// [Asm]   addi v5, v14, -2  # live: [v4, v5]
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   mv a0, v5  # live: [v4, a0]
// [Asm]   call fib1l0_0  # live: [v4, a0]
// [Asm]   mv v6, a0  # live: [v4, v6]
// [Asm]   # restore_ctx2  # live: [v4, v6]
// [Asm]   add v7, v4, v6  # live: [v7]
// [Asm] # control
// [Asm]   mv v8, v7  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, v9, v8], upward_exposed: [v8], params_defs: [v8]
// [Asm] # live_in: [v8], live_out: []
// [Asm] # block parameters: [v8]
// [Asm] .main11l1_1_3:
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11, v8], uses: [v11], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .main11l1_1_1:
// [Asm] # control
// [Asm]   li v11, 30  # live: [v11]
// [Asm]   mv v8, v11  # live: [v8]
// [Asm]   j .main11l1_1_3  # live: [v8]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Int(30)])])
// [Knf] build_knf: App(Var("fib"), [Int(30)])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Int(30)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl fib1l0_0
// [Main]   .type fib1l0_0, @function
// [Main] # leaf false
// [Main] fib1l0_0:
// [Main] .fib1l0_0_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s1, a0
// [Main]   li a0, 1
// [Main]   bge a0, s1, .fib1l0_0_1
// [Main] 
// [Main] .fib1l0_0_2:
// [Main]   addi s0, s1, -1
// [Main]   li a0, 1
// [Main]   bge a0, s0, .fib1l0_0_3
// [Main] 
// [Main] .fib1l0_0_4:
// [Main]   addi a0, s0, -1
// [Main]   call fib1l0_0
// [Main]   mv s2, a0
// [Main]   addi a0, s0, -2
// [Main]   call fib1l0_0
// [Main]   add a0, s2, a0
// [Main]   mv s0, a0
// [Main] 
// [Main] .fib1l0_0_5:
// [Main]   addi s1, s1, -2
// [Main]   li a0, 1
// [Main]   bge a0, s1, .fib1l0_0_6
// [Main] 
// [Main] .fib1l0_0_7:
// [Main]   addi a0, s1, -1
// [Main]   call fib1l0_0
// [Main]   mv s2, a0
// [Main]   addi a0, s1, -2
// [Main]   call fib1l0_0
// [Main]   add a0, s2, a0
// [Main] 
// [Main] .fib1l0_0_8:
// [Main]   add a0, s0, a0
// [Main] 
// [Main] .fib1l0_0_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .fib1l0_0_1:
// [Main]   mv a0, s1
// [Main]   j .fib1l0_0_9
// [Main] 
// [Main] .fib1l0_0_3:
// [Main]   j .fib1l0_0_5
// [Main] 
// [Main] .fib1l0_0_6:
// [Main]   mv a0, s1
// [Main]   j .fib1l0_0_8
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main11l1_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main11l1_1
// [Main]   .type main11l1_1, @function
// [Main] # leaf false
// [Main] main11l1_1:
// [Main] .main11l1_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 1
// [Main]   li a1, 30
// [Main]   bge a0, a1, .main11l1_1_1
// [Main] 
// [Main] .main11l1_1_2:
// [Main]   li a0, 30
// [Main]   addi a0, a0, -1
// [Main]   call fib1l0_0
// [Main]   mv s0, a0
// [Main]   li a0, 30
// [Main]   addi a0, a0, -2
// [Main]   call fib1l0_0
// [Main]   add a0, s0, a0
// [Main] 
// [Main] .main11l1_1_3:
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .main11l1_1_1:
// [Main]   li a0, 30
// [Main]   j .main11l1_1_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function fib1l0_0
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b9, args=[FnParam(fref=f0, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b5, bpref=$b.0), BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering control Jump(target=b9, args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%11), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b8, args=[Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Branch(cond=Insn(iref=%9), t=b6, t_args=[], f=b7, f_args=[])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b8, bpref=$b.0) -> $b8.$b.0
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b9, bpref=$b.0) -> $b9.$b.0
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function fib1l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function main11l1_1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering control Return(args=[Insn(iref=%6)])
// [Wasm] Lowering control Jump(target=b3, args=[Int32(val=30)])
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=30), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=30), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=30), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main11l1_1 to wasm
// [KnfOpt] freq: {fib1: Many(3), main11: Once}
// [KnfOpt] Inline threshold 3 17
// [KnfOpt] Knf inline Some(fib1)
// [KnfOpt] Inline threshold 3 17
// [KnfOpt] Knf inline Some(fib1)
// [KnfOpt] Inline threshold 3 17
// [KnfOpt] Knf inline Some(fib1)
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Multiple, f4: Once, f1: Once})
