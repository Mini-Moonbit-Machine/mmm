// [Knf] build_knf: LetRec({name: ("fib", Int), args: [("n", Int)], body: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, App(Var("main"), [])))
// [Knf] build_knf: If(LE(Var("n"), Int(1)), Var("n"), Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int)))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Prim(App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]), App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))]), Add, kind=Some(Int))
// [Knf] build_knf: App(Var("fib"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("fib"), [Prim(Var("n"), Int(2), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Prim(Var("n"), Int(2), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("fib"), [Int(30)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("fib"), [Int(30)])])
// [Knf] build_knf: App(Var("fib"), [Int(30)])
// [Knf] build_knf: Var("fib")
// [Knf] build_knf: Int(30)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function fib1(n2_3, k) {
// [Main]     const _4 = 1;
// [Main]     if (n2_3 <= _4) {
// [Main]       return k(n2_3)
// [Main]     } else {
// [Main]       const _5 = 1;
// [Main]       const _6 = n2_3 - _5;
// [Main]       return $thunk(() => fib1(_6, function (_7) {
// [Main]         const _8 = 2;
// [Main]         const _9 = n2_3 - _8;
// [Main]         return $thunk(() => fib1(_9, function (_10) {
// [Main]           return $thunk(() => $thunk(() => k(_7 + _10)))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main11(k) {
// [Main]     const _12 = 30;
// [Main]     return $thunk(() => fib1(_12, function (_13) {
// [Main]       return $thunk(() => k(minimbt_print_int($force(_13))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main11(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
