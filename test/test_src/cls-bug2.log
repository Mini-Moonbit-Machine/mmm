// [Knf] build_knf: LetRec({tyvars: [], name: ("f", Unit), args: [("n", Int)], body: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Unit), App(Var("print_int"), [Var("n")]), Let(("a", Array(Fun([Int], Unit))), Array(Int(1), Var("f")), Let(("a0", Fun([Int], Unit)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("f"), [Int(9)])}, App(Var("main"), [])))
// [Knf] build_knf: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Unit), App(Var("print_int"), [Var("n")]), Let(("a", Array(Fun([Int], Unit))), Array(Int(1), Var("f")), Let(("a0", Fun([Int], Unit)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))))
// [Knf] build_knf: If(LE(Int(0), Var("n")), Let(("t1", Unit), App(Var("print_int"), [Var("n")]), Let(("a", Array(Fun([Int], Unit))), Array(Int(1), Var("f")), Let(("a0", Fun([Int], Unit)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("t1", Unit), App(Var("print_int"), [Var("n")]), Let(("a", Array(Fun([Int], Unit))), Array(Int(1), Var("f")), Let(("a0", Fun([Int], Unit)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("print_int"), [Var("n")])
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("a", Array(Fun([Int], Unit))), Array(Int(1), Var("f")), Let(("a0", Fun([Int], Unit)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: Array(Int(1), Var("f"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Let(("a0", Fun([Int], Unit)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("a0")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: App(Var("f"), [Int(9)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("f"), [Int(9)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f_1(n_3, k) {
// [Main]     const _4 = 0;
// [Main]     if (_4 <= n_3) {
// [Main]       const t1_5 = minimbt_print_int($force(n_3));
// [Main]       const _6 = 1;
// [Main]       const a_7 = minimbt_create_ptr_array($force(_6), $force(f_1));
// [Main]       const _8 = 0;
// [Main]       const a0_9 = a_7[_8];
// [Main]       const _10 = 1;
// [Main]       const _11 = n_3 - _10;
// [Main]       return $thunk(() => a0_9(_11, k))
// [Main]     } else {
// [Main]       return k(null)
// [Main]     }
// [Main]   }
// [Main]   function main_12(k) {
// [Main]     const _13 = 9;
// [Main]     return $thunk(() => f_1(_13, k))
// [Main]   }
// [Main]   return $thunk(() => main_12(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Unit), args: [("n", Int)], body: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var({val: None})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: None})), Array(Int(1), Var("f")), Let(("a0", Var({val: None})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("f"), [Int(9)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var({val: None})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: None})), Array(Int(1), Var("f")), Let(("a0", Var({val: None})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))) against Unit
// [Typer] check: Not(LE(Int(0), Var("n"))) against Bool
// [Typer] check: LE(Int(0), Var("n")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("t1", Var({val: None})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: None})), Array(Int(1), Var("f")), Let(("a0", Var({val: None})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("n")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Let(("a", Var({val: None})), Array(Int(1), Var("f")), Let(("a0", Var({val: None})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] infer: Array(Int(1), Var("f"))
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Array(Fun([Int], Unit))
// [Typer] union: Var({val: None}) and Array(Fun([Int], Unit))
// [Typer] check: Let(("a0", Var({val: None})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Get(Var("a"), Int(0))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Fun([Int], Unit)))})))
// [Typer] inst result: Array(Fun([Int], Unit))
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Fun([Int], Unit)
// [Typer] union: Var({val: None}) and Fun([Int], Unit)
// [Typer] check: App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("a0") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Int], Unit))})))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("f"), [Int(9)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("f"), [Int(9)])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(9) against Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
