// [Main] function thunk_main(k) {
// [Main]   function f_1(n_3, k) {
// [Main]     const _4 = 0;
// [Main]     if (_4 <= n_3) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (t1_5) {
// [Main]         const _6 = 1;
// [Main]         return $thunk(() => $external(minimbt_create_ptr_array, function (a_7) {
// [Main]           const _8 = 0;
// [Main]           const a0_9 = a_7[_8];
// [Main]           const _10 = 1;
// [Main]           const _11 = n_3 - _10;
// [Main]           return $thunk(() => a0_9(_11, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         , _6, f_1))
// [Main]       }
// [Main]       , n_3))
// [Main]     } else {
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]   }
// [Main]   function main_12(k) {
// [Main]     const _13 = 9;
// [Main]     return $thunk(() => f_1(_13, function (x) {
// [Main]       return $thunk(() => k(x))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_12(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Unit), args: [("n", Int)], body: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("f"), [Int(9)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))) against Unit
// [Typer] check: Not(LE(Int(0), Var("n"))) against Bool
// [Typer] check: LE(Int(0), Var("n")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("n")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] infer: Array(Int(1), Var("f"))
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[(Int) -> Unit]
// [Typer] union: Var(None) and Array[(Int) -> Unit]
// [Typer] check: Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Get(Var("a"), Int(0))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Var(Array[(Int) -> Unit])))
// [Typer] inst result: Array[(Int) -> Unit]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and (Int) -> Unit
// [Typer] union: Var(None) and (Int) -> Unit
// [Typer] check: App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("a0") against (Int) -> Unit
// [Typer] inst: TypeScheme(([], Var((Int) -> Unit)))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("f"), [Int(9)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("f"), [Int(9)])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(9) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
