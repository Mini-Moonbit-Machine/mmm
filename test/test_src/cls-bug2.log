// [Knf] build_knf: LetRec({name: ("f", Unit), args: [("n", Int)], body: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: Some(Array(Fun([Int], Unit)))})), Array(Int(1), Var("f")), Let(("a0", Var({val: Some(Fun([Int], Unit))})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("f"), [Int(9)])}, App(Var("main"), [])))
// [Knf] build_knf: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: Some(Array(Fun([Int], Unit)))})), Array(Int(1), Var("f")), Let(("a0", Var({val: Some(Fun([Int], Unit))})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))))
// [Knf] build_knf: If(LE(Int(0), Var("n")), Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: Some(Array(Fun([Int], Unit)))})), Array(Int(1), Var("f")), Let(("a0", Var({val: Some(Fun([Int], Unit))})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("t1", Var({val: Some(Unit)})), App(Var("print_int"), [Var("n")]), Let(("a", Var({val: Some(Array(Fun([Int], Unit)))})), Array(Int(1), Var("f")), Let(("a0", Var({val: Some(Fun([Int], Unit))})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("print_int"), [Var("n")])
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Fun([Int], Unit)))})), Array(Int(1), Var("f")), Let(("a0", Var({val: Some(Fun([Int], Unit))})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: Array(Int(1), Var("f"))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Let(("a0", Var({val: Some(Fun([Int], Unit))})), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("a0")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("f"), [Int(9)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("f"), [Int(9)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(9)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f1(n2_3, k) {
// [Main]     const _4 = 0;
// [Main]     if (_4 <= n2_3) {
// [Main]       const t1_5 = minimbt_print_int($force(n2_3));
// [Main]       const _6 = 1;
// [Main]       const a_7 = minimbt_create_ptr_array($force(_6), $force(f1));
// [Main]       const _8 = 0;
// [Main]       const a0_9 = a_7[_8];
// [Main]       const _10 = 1;
// [Main]       const _11 = n2_3 - _10;
// [Main]       return $thunk(() => a0_9(_11, k))
// [Main]     } else {
// [Main]       return k(null)
// [Main]     }
// [Main]   }
// [Main]   function main12(k) {
// [Main]     const _13 = 9;
// [Main]     return $thunk(() => f1(_13, k))
// [Main]   }
// [Main]   return $thunk(() => main12(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
