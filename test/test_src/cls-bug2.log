// [Asm] LoweringOrder: [0, 2, 1, 3]
// [Asm] LoweringOrder: [[1, 2], [3], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 0), (b2, 1), (b3, 0)])
// [Asm] LoweringOrder: [b0, b1, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b0, 0), (b1, 1), (b2, 0), (b3, 2)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, Mem(fref=f0, mref=m1) -> v4, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v12, Insn(iref=%2) -> v7, Mem(fref=f0, mref=m0) -> v3, Insn(iref=%1) -> v6, Insn(iref=%6) -> v11, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v10, Insn(iref=%0) -> v5, Insn(iref=%4) -> v9
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f0, fpref=$f.0)])
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move: v12 <- zero
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, a0, v2]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 2 -> 3
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [s11, v2]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, s11, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v19, s11, v2]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v3, s11, v2]
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, v2]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v2]
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v9]
// [Asm] defined: v10 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v10, v13, v9]
// [Asm] defined: v13 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v10, v13]
// [Asm] move: s10 <- v9
// [Asm] defined: s10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v13]
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v13]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move: v12 <- v11
// [Asm] defined: v12 is X
// [Asm] Label("f.1") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("f.1") clobbered_f: @hashset.of([])
// [Asm] subst   mv v12, zero ->   mv a0, zero
// [Asm] subst   j .f.1_3 ->   j .f.1_3
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   blt v2, zero, .f.1_2 ->   blt s0, zero, .f.1_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v3, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a0, -8
// [Asm] subst   la v19, f.1 ->   la a1, f.1
// [Asm] subst   sd v19, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   addi v4, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a1, -8
// [Asm] subst   sd v3, 0(v4) ->   sd a0, 0(a1)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(a1)
// [Asm] subst   addi v10, v2, -1 ->   addi a2, s0, -1
// [Asm] subst   ld v13, 0(v9) ->   ld a1, 0(a0)
// [Asm] subst   mv s10, v9 ->   mv s10, a0
// [Asm] subst   mv a0, v10 ->   mv a0, a2
// [Asm] subst   jalr v13 ->   jalr a1
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v2, Self(fref=f1) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.12") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.12") clobbered_f: @hashset.of([])
// [Asm] subst   li v3, 9 ->   li a0, 9
// [Asm] subst   call f.1 ->   call f.1
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.12:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 9  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call f.1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.12  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] f.1:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: [s11, zero, v2]
// [Asm] # block parameters: []
// [Asm] .f.1_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .f.1_2  # live: [s11, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, v4, v6, ft7, v11, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v11, v10, a0, v13, v19, v4, s11, v9, v3], upward_exposed: [s11, v2], params_defs: []
// [Asm] # live_in: [s11, v2], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .f.1_1:
// [Asm]   # save_ctx2  # live: [s11, v2]
// [Asm]   mv a0, v2  # live: [s11, a0, v2]
// [Asm]   call minimbt_print_int  # live: [s11, a0, v2]
// [Asm]   mv v6, a0  # live: [s11, v2]
// [Asm]   # restore_ctx2  # live: [s11, v2]
// [Asm]   addi v3, s11, -8  # live: [v3, v2]
// [Asm]   andi s11, v3, -8  # live: [v3, s11, v2]
// [Asm]   la v19, f.1  # live: [v3, v19, s11, v2]
// [Asm]   sd v19, 0(v3)  # live: [v3, s11, v2]
// [Asm]   addi v4, s11, -8  # live: [v3, v4, v2]
// [Asm]   andi s11, v4, -8  # live: [v3, v4, v2]
// [Asm]   sd v3, 0(v4)  # live: [v4, v2]
// [Asm]   ld v9, 0(v4)  # live: [v9, v2]
// [Asm]   addi v10, v2, -1  # live: [v10, v9]
// [Asm]   ld v13, 0(v9)  # live: [v10, v13, v9]
// [Asm]   mv s10, v9  # live: [v10, v13]
// [Asm]   # save_ctx2  # live: [v10, v13]
// [Asm]   mv a0, v10  # live: [a0, v13]
// [Asm]   jalr v13  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .f.1_3:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .f.1_2:
// [Asm] # control
// [Asm]   mv v12, zero  # live: [v12]
// [Asm]   j .f.1_3  # live: [v12]
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.12
// [Main]   .type main.12, @function
// [Main] # leaf false
// [Main] main.12:
// [Main] .main.12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 9
// [Main]   call f.1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.12
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f.1
// [Main]   .type f.1, @function
// [Main] # leaf false
// [Main] f.1:
// [Main] .f.1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv s0, a0
// [Main]   blt s0, zero, .f.1_2
// [Main] 
// [Main] .f.1_1:
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   addi a0, s11, -8
// [Main]   andi s11, a0, -8
// [Main]   la a1, f.1
// [Main]   sd a1, 0(a0)
// [Main]   addi a1, s11, -8
// [Main]   andi s11, a1, -8
// [Main]   sd a0, 0(a1)
// [Main]   ld a0, 0(a1)
// [Main]   addi a2, s0, -1
// [Main]   ld a1, 0(a0)
// [Main]   mv s10, a0
// [Main]   mv a0, a2
// [Main]   jalr a1
// [Main] 
// [Main] .f.1_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .f.1_2:
// [Main]   mv a0, zero
// [Main]   j .f.1_3
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("f", Unit), args: [("n", Int)], body: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("f"), [Int(9)])}, Unit))
// [Typer] resolve: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))))
// [Typer] resolve: Not(LE(Int(0), Var("n")))
// [Typer] resolve: LE(Int(0), Var("n"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("n")
// [Typer] resolve: Unit
// [Typer] resolve: Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))
// [Typer] resolve: App(Var("print_int"), [Var("n")])
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))
// [Typer] resolve: Array(Int(1), Var("f"))
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("f")
// [Typer] resolve: Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("a0")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("f"), [Int(9)])}, Unit)
// [Typer] resolve: App(Var("f"), [Int(9)])
// [Typer] resolve: Int(9)
// [Typer] resolve: Var("f")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("f", Unit), args: [("n", Int)], body: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("f"), [Int(9)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Not(LE(Int(0), Var("n"))), Unit, Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))) against Unit
// [Typer] check: Not(LE(Int(0), Var("n"))) against Bool
// [Typer] check: LE(Int(0), Var("n")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("t1", Var(None)), App(Var("print_int"), [Var("n")]), Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("n")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("a", Var(None)), Array(Int(1), Var("f")), Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] infer: Array(Int(1), Var("f"))
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Array[(Int) -> Unit]
// [Typer] union: Var(None) and Array[(Int) -> Unit]
// [Typer] check: Let(("a0", Var(None)), Get(Var("a"), Int(0)), App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: Get(Var("a"), Int(0))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array[(Int) -> Unit]))
// [Typer] inst result: Array[(Int) -> Unit]
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and (Int) -> Unit
// [Typer] union: Var(None) and (Int) -> Unit
// [Typer] check: App(Var("a0"), [Prim(Var("n"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("a0") against (Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("f"), [Int(9)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("f"), [Int(9)])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(9) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {f.1: AsClosure, main.12: Once}
// [KnfOpt] freq: {f.1: AsClosure, main.12: Once}
// [KnfOpt] freq: {f.1: AsClosure, main.12: Once}
// [KnfOpt] Numbers of let rec: 2 3 1
// [KnfOpt] Give up lambda lifting because of too many let rec produced
// [KnfOpt] Tuple freq: {n.3: MayEscape, _6: MayEscape, f.1: MayEscape, _11: MayEscape, _13: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: MaybeInClosure, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.12 false true true true true
// [CoreOpt] allow_inline: false %0 f.1 false false true false true
// [CoreOpt] allow_inline: false %0 main.12 false true true true true
// [CoreOpt] allow_inline: false %0 f.1 false false true false true
// [CoreOpt] allow_inline: false %0 main.12 false true true true true
// [CoreOpt] allow_inline: false %0 f.1 false false true false true
// [CoreOpt] allow_inline: false %0 main.12 false true true true true
// [CoreOpt] allow_inline: false %0 f.1 false false true false true
// [CoreOpt] allow_inline: false %0 main.12 false true true true true
// [CoreOpt] allow_inline: false %0 f.1 false false true false true
// [CoreOpt] allow_inline: false %0 main.12 false true true true true
// [CoreOpt] allow_inline: false %0 f.1 false false true false true
