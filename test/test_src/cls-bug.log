// [Main] function thunk_main(k) {
// [Main]   function f_1(x_3, k) {
// [Main]     const _4 = 123;
// [Main]     return k(x_3 + _4)
// [Main]   }
// [Main]   function g_5(y_7, k) {
// [Main]     return k(f_1)
// [Main]   }
// [Main]   function main_8(k) {
// [Main]     const _9 = 456;
// [Main]     return $thunk(() => g_5(_9, function (_10) {
// [Main]       const _11 = 789;
// [Main]       return $thunk(() => _10(_11, function (_12) {
// [Main]         return $thunk(() => $thunk(() => k(minimbt_print_int($force(_12)))))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_8(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("x", Int)], body: Prim(Var("x"), Int(123), Add, kind=None)}, LetRec({tyvars: [], name: ("g", Fun([Int], Int)), args: [("y", Int)], body: Var("f")}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Int(123), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(123) against Int
// [Typer] check: LetRec({tyvars: [], name: ("g", Fun([Int], Int)), args: [("y", Int)], body: Var("f")}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Var("f") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(App(Var("g"), [Int(456)]), [Int(789)]) against Int
// [Typer] infer: Int(789)
// [Typer] check: App(Var("g"), [Int(456)]) against Fun([Int], Int)
// [Typer] infer: Int(456)
// [Typer] check: Var("g") against Fun([Int], Fun([Int], Int))
// [Typer] inst: TypeScheme(([], Fun([Int], Fun([Int], Int))))
// [Typer] inst result: Fun([Int], Fun([Int], Int))
// [Typer] unify: Fun([Int], Fun([Int], Int)) and Fun([Int], Fun([Int], Int))
// [Typer] unify: Int and Int
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
