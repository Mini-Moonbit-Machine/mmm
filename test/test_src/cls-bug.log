// [Knf] build_knf: LetRec({name: ("f", Int), args: [("x", Int)], body: Prim(Var("x"), Int(123), Add, kind=Some(Int))}, LetRec({name: ("g", Fun([Int], Int)), args: [("y", Int)], body: Var("f")}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])}, App(Var("main"), []))))
// [Knf] build_knf: Prim(Var("x"), Int(123), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(123)
// [Knf] build_knf: LetRec({name: ("g", Fun([Int], Int)), args: [("y", Int)], body: Var("f")}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])}, App(Var("main"), [])))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(App(Var("g"), [Int(456)]), [Int(789)])])
// [Knf] build_knf: App(App(Var("g"), [Int(456)]), [Int(789)])
// [Knf] build_knf: App(Var("g"), [Int(456)])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Int(456)
// [Knf] build_knf: Int(789)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function f1(x2_3, k) {
// [Main]     const _4 = 123;
// [Main]     return k(x2_3 + _4)
// [Main]   }
// [Main]   function g5(y6_7, k) {
// [Main]     return k(f1)
// [Main]   }
// [Main]   function main8(k) {
// [Main]     const _9 = 456;
// [Main]     return $thunk(() => g5(_9, function (_10) {
// [Main]       const _11 = 789;
// [Main]       return $thunk(() => _10(_11, function (_12) {
// [Main]         return $thunk(() => $thunk(() => k(minimbt_print_int($force(_12)))))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main8(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
