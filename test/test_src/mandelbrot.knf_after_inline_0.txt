let rec main75: Var({val: Some(Unit)}) = () {
  let _76: Int = Int(40)
  let rec dbl4.109: Double = (f5.110: Double) {
    FAdd(f5.110, f5.110)
  }
  let rec yloop7.111: Unit = (y8.112: Int) {
    if (_76 <= y8.112) then {
      Unit
    } else {
      let rec xloop10.113: Unit = (x11.114: Int, y13.115: Int) {
        if (_76 <= x11.114) then {
          let _116: Unit = ExtApply(minimbt_print_endline, [])
          Unit
        } else {
          let _117: Double = ExtApply(minimbt_float_of_int, [x11.114, ])
          let _118: Double = Apply(dbl4.109, [_117, ])
          let _119: Double = ExtApply(minimbt_float_of_int, [_76, ])
          let _120: Double = FDiv(_118, _119)
          let _121: Double = Double(1.5)
          let cr.122: Double = FSub(_120, _121)
          let _123: Double = ExtApply(minimbt_float_of_int, [y13.115, ])
          let _124: Double = Apply(dbl4.109, [_123, ])
          let _125: Double = ExtApply(minimbt_float_of_int, [_76, ])
          let _126: Double = FDiv(_124, _125)
          let _127: Double = Double(1)
          let ci.128: Double = FSub(_126, _127)
          let rec iloop29.129: Unit = (i30.130: Int, zr32.131: Double, zi34.132: Double, zr236.133: Double, zi238.134: Double, cr40.135: Double, ci42.136: Double) {
            let _137: Int = Int(0)
            if (i30.130 == _137) then {
              let _138: Int = Int(1)
              ExtApply(minimbt_print_int, [_138, ])
            } else {
              let _139: Double = FSub(zr236.133, zi238.134)
              let tr.140: Double = FAdd(_139, cr40.135)
              let _141: Double = Apply(dbl4.109, [zr32.131, ])
              let _142: Double = FMul(_141, zi34.132)
              let ti.143: Double = FAdd(_142, ci42.136)
              let zr2.144: Double = FMul(tr.140, tr.140)
              let zi2.145: Double = FMul(ti.143, ti.143)
              let _146: Double = Double(2)
              let _147: Double = Double(2)
              let _148: Double = FMul(_146, _147)
              let _149: Double = FAdd(zr2.144, zi2.145)
              if (_148 <= _149) then {
                let _150: Int = Int(0)
                ExtApply(minimbt_print_int, [_150, ])
              } else {
                let _151: Int = Int(1)
                let _152: Int = Sub(i30.130, _151)
                Apply(iloop29.129, [_152, tr.140, ti.143, zr2.144, zi2.145, cr40.135, ci42.136, ])
              }
            }
          }
          let _153: Int = Int(1000)
          let _154: Double = Double(0)
          let _155: Double = Double(0)
          let _156: Double = Double(0)
          let _157: Double = Double(0)
          let _158: Unit = Apply(iloop29.129, [_153, _154, _155, _156, _157, cr.122, ci.128, ])
          let _159: Int = Int(1)
          let _160: Int = Add(x11.114, _159)
          Apply(xloop10.113, [_160, y13.115, ])
        }
      }
      let _161: Int = Int(0)
      let _162: Unit = Apply(xloop10.113, [_161, y8.112, ])
      let _163: Int = Int(1)
      let _164: Int = Add(y8.112, _163)
      Apply(yloop7.111, [_164, ])
    }
  }
  let _165: Int = Int(0)
  Apply(yloop7.111, [_165, ])
}
Apply(main75, [])