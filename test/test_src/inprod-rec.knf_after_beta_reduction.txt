let rec inprod1: Double = (v12.3: Array(Double), v24.5: Array(Double), i6.7: Int) {
  let _8: Int = Int(0)
  if (_8 <= i6.7) then {
    let _9: Double = Get v12.3[i6.7]
    let _10: Double = Get v24.5[i6.7]
    let _11: Double = FMul(_9, _10)
    let _12: Int = Int(1)
    let _13: Int = Sub(i6.7, _12)
    let _27: Int = Int(0)
    let _14: Double = if (_27 <= _13) then {
      let _28: Double = Get v12.3[_13]
      let _29: Double = Get v24.5[_13]
      let _30: Double = FMul(_28, _29)
      let _31: Int = Int(1)
      let _32: Int = Sub(_13, _31)
      let _33: Double = Apply(inprod1, [v12.3, v24.5, _32, ])
      FAdd(_30, _33)
    } else {
      Double(0)
    }
    FAdd(_11, _14)
  } else {
    Double(0)
  }
}
let rec main15: Var({val: Some(Unit)}) = () {
  let _16: Int = Int(3)
  let _17: Double = Double(1.23)
  let v1.18: Array(Double) = ExtApply(minimbt_create_float_array, [_16, _17, ])
  let _19: Int = Int(3)
  let _20: Double = Double(4.56)
  let v2.21: Array(Double) = ExtApply(minimbt_create_float_array, [_19, _20, ])
  let _22: Double = Double(1000000)
  let _23: Int = Int(2)
  let _34: Int = Int(0)
  let _24: Double = if (_34 <= _23) then {
    let _35: Double = Get v1.18[_23]
    let _36: Double = Get v2.21[_23]
    let _37: Double = FMul(_35, _36)
    let _38: Int = Int(1)
    let _39: Int = Sub(_23, _38)
    let _40: Double = Apply(inprod1, [v1.18, v2.21, _39, ])
    FAdd(_37, _40)
  } else {
    Double(0)
  }
  let _25: Double = FMul(_22, _24)
  let _26: Int = ExtApply(minimbt_truncate, [_25, ])
  ExtApply(minimbt_print_int, [_26, ])
}
Apply(main15, [])