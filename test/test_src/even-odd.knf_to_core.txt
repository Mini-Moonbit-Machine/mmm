# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$f.2_2 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn T$t.1_0 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn T$start_8 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::1
    let %1: int32 = load_symbol ::0
    let %2: unit = call f5(%0, %1)
    return %2
  }
}
.fn even3l0_4 #f4 : fn(int32, int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: bool = eq($f0, 0)
    br %1 b3() b4()
  }
  .bb #b2 () {
    let %15: int32 = add($f0, 1)
    let %16: bool = le(0, %15)
    br %16 b12() b13()
  }
  .bb #b3 () {
    let %2: int32 = load_symbol ::0
    jump b11(%2)
  }
  .bb #b4 () {
    let %3: int32 = sub($f0, 1)
    let %4: bool = le(0, %3)
    br %4 b5() b6()
  }
  .bb #b5 () {
    let %5: bool = eq(%3, 0)
    br %5 b7() b8()
  }
  .bb #b6 () {
    let %11: int32 = add(%3, 1)
    let %12: int32 = load_symbol ::1
    let %13: int32 = load_symbol ::0
    let %14: int32 = call f4(%11, %12, %13)
    jump b10(%14)
  }
  .bb #b7 () {
    let %6: int32 = load_symbol ::1
    jump b9(%6)
  }
  .bb #b8 () {
    let %7: int32 = sub(%3, 1)
    let %8: int32 = load_symbol ::1
    let %9: int32 = load_symbol ::0
    let %10: int32 = call f4(%7, %8, %9)
    jump b9(%10)
  }
  .bb #b9 (int32) {
    jump b10($b9.0)
  }
  .bb #b10 (int32) {
    jump b11($b10.0)
  }
  .bb #b11 (int32) {
    jump b18($b11.0)
  }
  .bb #b12 () {
    let %17: bool = eq(%15, 0)
    br %17 b14() b15()
  }
  .bb #b13 () {
    let %23: int32 = add(%15, 1)
    let %24: int32 = load_symbol ::1
    let %25: int32 = load_symbol ::0
    let %26: int32 = call f4(%23, %24, %25)
    jump b17(%26)
  }
  .bb #b14 () {
    let %18: int32 = load_symbol ::1
    jump b16(%18)
  }
  .bb #b15 () {
    let %19: int32 = sub(%15, 1)
    let %20: int32 = load_symbol ::1
    let %21: int32 = load_symbol ::0
    let %22: int32 = call f4(%19, %20, %21)
    jump b16(%22)
  }
  .bb #b16 (int32) {
    jump b17($b16.0)
  }
  .bb #b17 (int32) {
    jump b18($b17.0)
  }
  .bb #b18 (int32) {
    return $b18.0
  }
}
.fn main21l1_5 #f5 : fn(int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::1
    let %1: int32 = load_symbol ::0
    let %2: int32 = call f4(789, %0, %1)
    let %3: unit = ext_call minimbt_print_int(%2)
    return %3
  }
}
.thunk ::0 t.1
.thunk ::1 f.2
.thunk ::2 start
