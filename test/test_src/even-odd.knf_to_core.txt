# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn odd6.25 #f4 : fn(int32, int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: bool = eq($f0, 0)
    br %1 b3() b4()
  }
  .bb #b2 () {
    let %7: int32 = add($f0, 1)
    let %8: int32 = load_symbol ::1
    let %9: int32 = load_symbol ::0
    let %10: int32 = call f5(%7, %8, %9)
    jump b6(%10)
  }
  .bb #b3 () {
    let %2: int32 = load_symbol ::1
    jump b5(%2)
  }
  .bb #b4 () {
    let %3: int32 = sub($f0, 1)
    let %4: int32 = load_symbol ::1
    let %5: int32 = load_symbol ::0
    let %6: int32 = call f5(%3, %4, %5)
    jump b5(%6)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.fn T$start #f10 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::1
    let %1: int32 = load_symbol ::0
    let %2: unit = call f6(%0, %1)
    return %2
  }
}
.fn T$t.1 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn main21.26 #f6 : fn(int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::1
    let %1: int32 = load_symbol ::0
    let %2: int32 = call f5(789, %0, %1)
    let %3: unit = ext_call minimbt_print_int(%2)
    return %3
  }
}
.fn T$f.2 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn even3.24 #f5 : fn(int32, int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = le(0, $f0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: bool = eq($f0, 0)
    br %1 b3() b4()
  }
  .bb #b2 () {
    let %7: int32 = add($f0, 1)
    let %8: int32 = load_symbol ::1
    let %9: int32 = load_symbol ::0
    let %10: int32 = call f4(%7, %8, %9)
    jump b6(%10)
  }
  .bb #b3 () {
    let %2: int32 = load_symbol ::0
    jump b5(%2)
  }
  .bb #b4 () {
    let %3: int32 = sub($f0, 1)
    let %4: int32 = load_symbol ::1
    let %5: int32 = load_symbol ::0
    let %6: int32 = call f4(%3, %4, %5)
    jump b5(%6)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
}
.thunk ::0 t.1
.thunk ::1 f.2
.thunk ::2 start

