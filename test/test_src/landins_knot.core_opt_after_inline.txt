# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn g.58 #f24 : fn(int32, int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::5
    let %1: int32 = add($f0, %0)
    return %1
  }
}
.fn T$_45 #f16 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: int32 = load_symbol ::2
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f14
    let _ = store closure(int32) -> int32 offset(%0, %1 * @ptr) <- f16.m0
    return ()
  }
}
.fn aux.54 #f8 : fn(int32, array[closure(int32) -> int32]) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: closure(int32) -> int32 = load closure(int32) -> int32 field(%0, 0 * @ptr)
    let %2: int32 = apply %1($f0)
    return %2
  }
}
.fn dummy.53 #f4 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0($f0)
    return %0
  }
}
.fn h.56 #f14 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: int32 = call f9($f0, %0)
    return %1
  }
}
.fn dummy.52 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.fn T$_44 #f12 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 0
  }
}
.fn T$arr.38 #f6 : fn() -> array[closure(int32) -> int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f4
    let _ = alloc <m1: array[closure(int32) -> int32] heap(%0)> <- [..] = f6.m0
    return f6.m1
  }
}
.fn main.59 #f25 : fn(int32, array[closure(int32) -> int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: unit = call f18(%0)
    let %2: int32 = load_symbol ::5
    let %3: int32 = call f24(10, %2)
    let %4: unit = ext_call minimbt_print_int(%3)
    let %5: int32 = load_symbol ::5
    let %6: int32 = call f24(31, %5)
    let %7: unit = ext_call minimbt_print_int(%6)
    return %7
  }
}
.fn h.55 #f9 : fn(int32, array[closure(int32) -> int32]) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: array[closure(int32) -> int32] = load_symbol ::1
    jump b5()
  }
  .bb #b3 (int32) {
    return $b3.0
  }
  .bb #b4 (int32) {
    let %4: int32 = mul($f0, $b4.0)
    jump b3(%4)
  }
  .bb #b5 () {
    let %5: array[closure(int32) -> int32] = load_symbol ::1
    let %6: closure(int32) -> int32 = load closure(int32) -> int32 field(%5, 0 * @ptr)
    let %7: int32 = apply %6(%1)
    jump b4(%7)
  }
}
.fn T$_26 #f20 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn T$_37 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$a.27 #f22 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::4
    let %1: array[closure(int32) -> int32] = load_symbol ::1
    let %2: int32 = call f9(%0, %1)
    return %2
  }
}
.fn T$start #f28 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::5
    let %1: array[closure(int32) -> int32] = load_symbol ::1
    let %2: unit = call f25(%0, %1)
    return %2
  }
}
.fn f1.57 #f18 : fn(array[closure(int32) -> int32]) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: int32 = call f9(5, %0)
    let %2: unit = ext_call minimbt_print_int(%1)
    return %2
  }
}
.thunk ::0 _37
.thunk ::1 arr.38
.thunk ::2 _44
.thunk ::3 _45
.thunk ::4 _26
.thunk ::5 a.27
.thunk ::6 start
