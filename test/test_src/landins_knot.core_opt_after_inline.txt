# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start_16 #f16 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f14()
    return %0
  }
}
.fn aux9.48_8 #f8 : closure(int32) -> int32
.freevars (array[closure(int32) -> int32])
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load closure(int32) -> int32 field(^1, 0 * @ptr)
    let %1: int32 = apply %0($f0)
    return %1
  }
}
.fn main37_14 #f14 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::0
    let %1: int32 = apply %0(5)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: int32 = load_symbol ::2
    let %4: int32 = add(10, %3)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %6: int32 = load_symbol ::2
    let %7: int32 = add(31, %6)
    let %8: unit = ext_call minimbt_print_int(%7)
    return %8
  }
}
.fn T$_32_10 #f10 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn g18_1 #f1 : fn(closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f4, [1] = $f0
    return f1.m0
  }
}
.fn T$factorial.28_6 #f6 : fn() -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f0
    let _ = alloc <m1: array[closure(int32) -> int32] heap(1)> <- [..] = f6.m0
    let _ = alloc <m2: closure(int32) -> int32 heap(2)> <- [0] = f8, [1] = f6.m1
    jump b5()
  }
  .bb #b1 (closure(int32) -> int32) {
    let _ = store closure(int32) -> int32 field(f6.m1, 0 * @ptr) <- $b1.0
    return $b1.0
  }
  .bb #b5 () {
    let _ = alloc <m5: closure(int32) -> int32 heap(2)> <- [0] = f4, [1] = f6.m2
    jump b1(f6.m5)
  }
}
.fn T$a.33_12 #f12 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let %2: int32 = apply %0(%1)
    return %2
  }
}
.fn h21_4 #f4 : closure(int32) -> int32
.freevars (closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = apply ^1(%1)
    let %3: int32 = mul($f0, %2)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn dummy1_0 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.thunk ::0 factorial.28
.thunk ::1 _32
.thunk ::2 a.33
.thunk ::3 start
