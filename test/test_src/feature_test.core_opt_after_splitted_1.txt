# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main1.36 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = conv.d2i.rtz(3)
    let %1: unit = ext_call minimbt_print_int(%0)
    let %2: int32 = conv.d2i.rtz(-1)
    let %3: unit = ext_call minimbt_print_int(%2)
    let %4: int32 = conv.d2i.rtz(2)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %6: int32 = conv.d2i.rtz(0.5)
    let %7: unit = ext_call minimbt_print_int(%6)
    let %8: bool = le(1, 2)
    br %8 b1() b2()
  }
  .bb #b1 () {
    let %9: unit = ext_call minimbt_print_int(1)
    jump b3(%9)
  }
  .bb #b2 () {
    let %10: unit = ext_call minimbt_print_int(0)
    jump b3(%10)
  }
  .bb #b3 (unit) {
    let %11: bool = eq(1, 1)
    br %11 b4() b5()
  }
  .bb #b4 () {
    let %12: unit = ext_call minimbt_print_int(1)
    jump b6(%12)
  }
  .bb #b5 () {
    let %13: unit = ext_call minimbt_print_int(0)
    jump b6(%13)
  }
  .bb #b6 (unit) {
    return $b6.0
  }
}
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.thunk ::0 start

