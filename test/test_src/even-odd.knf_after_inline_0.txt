let t.1: Int = Int(123)
let f.2: Int = Int(456)
let rec even3: Int = (x4.5: Int) {
  let _15: Int = Int(0)
  if (_15 <= x4.5) then {
    let _16: Int = Int(0)
    if (x4.5 == _16) then {
      Var(t.1)
    } else {
      let _17: Int = Int(1)
      let _18: Int = Sub(x4.5, _17)
      let _24: Int = Int(0)
      if (_24 <= _18) then {
        let _25: Int = Int(0)
        if (_18 == _25) then {
          Var(f.2)
        } else {
          let _26: Int = Int(1)
          let _27: Int = Sub(_18, _26)
          Apply(even3, [_27, ])
        }
      } else {
        let _28: Int = Int(1)
        let _29: Int = Add(_18, _28)
        Apply(even3, [_29, ])
      }
    }
  } else {
    let _19: Int = Int(1)
    let _20: Int = Add(x4.5, _19)
    let _30: Int = Int(0)
    if (_30 <= _20) then {
      let _31: Int = Int(0)
      if (_20 == _31) then {
        Var(f.2)
      } else {
        let _32: Int = Int(1)
        let _33: Int = Sub(_20, _32)
        Apply(even3, [_33, ])
      }
    } else {
      let _34: Int = Int(1)
      let _35: Int = Add(_20, _34)
      Apply(even3, [_35, ])
    }
  }
}
let rec main21: Var({val: Some(Unit)}) = () {
  let _22: Int = Int(789)
  let _23: Int = Apply(even3, [_22, ])
  ExtApply(minimbt_print_int, [_23, ])
}
Apply(main21, [])