# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main.68 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: (int32, int32, int32, int32, int32, int32, int32, int32, int32, int32) heap(10)> <- [0] = 1, [1] = 2, [2] = 3, [3] = 4, [4] = 5, [5] = 6, [6] = 7, [7] = 8, [8] = 9, [9] = 10
    let %1: int32 = call f0(f1.m0)
    let %2: unit = ext_call minimbt_print_int(%1)
    return ()
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn h.67 #f0 : fn((int32, int32, int32, int32, int32, int32, int32, int32, int32, int32)) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load int32 field($f0, 0 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %1: int32 = load int32 field($f0, 1 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %2: int32 = load int32 field($f0, 2 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %3: int32 = load int32 field($f0, 3 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %4: int32 = load int32 field($f0, 4 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %5: int32 = load int32 field($f0, 5 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %6: int32 = load int32 field($f0, 6 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %7: int32 = load int32 field($f0, 7 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %8: int32 = load int32 field($f0, 8 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    let %9: int32 = load int32 field($f0, 9 * @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @(@32, @32)))))))))))
    jump b1(1)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32) {
    let %10: int32 = add(%0, %1)
    let %11: int32 = add(%10, %2)
    let %12: int32 = add(%11, %3)
    let %13: int32 = add(%12, %4)
    let %14: int32 = add(%13, %5)
    let %15: int32 = add(%14, %6)
    let %16: int32 = add(%15, %7)
    let %17: int32 = add(%16, %8)
    let %18: int32 = add(%17, %9)
    let %19: bool = le($b2.0, 0)
    br %19 b3() b4()
  }
  .bb #b3 () {
    let %20: int32 = neg($b2.0)
    jump b2(%20)
  }
  .bb #b4 () {
    jump b5(%18)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.thunk ::0 start
