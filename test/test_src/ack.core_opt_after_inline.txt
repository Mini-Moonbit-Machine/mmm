# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn ack.19 #f0 : fn(int32, int32) -> int32
.freevars ()
.entry b8 {
  .bb #b0 (int32, int32) {
    let %0: bool = le($b0.0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = add($b0.1, 1)
    jump b6(%1)
  }
  .bb #b2 () {
    let %2: bool = le($b0.1, 0)
    br %2 b3() b4()
  }
  .bb #b3 () {
    let %3: int32 = sub($b0.0, 1)
    jump b0(%3, 1)
  }
  .bb #b4 () {
    let %5: int32 = sub($b0.0, 1)
    let %6: int32 = sub($b0.1, 1)
    let %7: int32 = call f0($b0.0, %6)
    jump b0(%5, %7)
  }
  .bb #b5 (int32) {
    jump b6($b5.0)
  }
  .bb #b6 (int32) {
    return $b6.0
  }
  .loop #b7 pre #Some(b8) header #b0 {
    .block #b6
    .block #b4
    .block #b1
    .block #b5
    .block #b2
    .block #b3
  }
  .bb #b8 () {
    jump b7($f0, $f1)
  }
}
.fn T$start #f4 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1()
    return %0
  }
}
.fn main.20 #f1 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(3, 8)
    let %1: unit = ext_call minimbt_print_int(%0)
    return %1
  }
}
.thunk ::0 start
