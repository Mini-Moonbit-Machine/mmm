let rec dbl4l1: Double = (f5.6: Double) {
  FAdd(f5.6, f5.6)
}
let rec xloop10l3: Unit = (x11.12: Int, y13.14: Int, w2.3: Int) {
  if (w2.3 <= x11.12) then {
    let _16: Unit = ExtApply(minimbt_print_endline, [])
    Unit
  } else {
    let _17: Double = ExtApply(minimbt_float_of_int, [x11.12, ])
    let _18: Double = Apply(dbl4l1, [_17, ])
    let _19: Double = ExtApply(minimbt_float_of_int, [w2.3, ])
    let _20: Double = FDiv(_18, _19)
    let _21: Double = Double(1.5)
    let cr.22: Double = FSub(_20, _21)
    let _23: Double = ExtApply(minimbt_float_of_int, [y13.14, ])
    let _24: Double = Apply(dbl4l1, [_23, ])
    let _25: Double = ExtApply(minimbt_float_of_int, [w2.3, ])
    let _26: Double = FDiv(_24, _25)
    let _27: Double = Double(1)
    let ci.28: Double = FSub(_26, _27)
    let rec iloop29: Unit = (i30.31: Int, zr32.33: Double, zi34.35: Double, zr236.37: Double, zi238.39: Double, cr40.41: Double, ci42.43: Double) {
      let _44: Int = Int(0)
      if (i30.31 == _44) then {
        let _45: Int = Int(1)
        ExtApply(minimbt_print_int, [_45, ])
      } else {
        let _46: Double = FSub(zr236.37, zi238.39)
        let tr.47: Double = FAdd(_46, cr40.41)
        let _48: Double = Apply(dbl4l1, [zr32.33, ])
        let _49: Double = FMul(_48, zi34.35)
        let ti.50: Double = FAdd(_49, ci42.43)
        let zr2.51: Double = FMul(tr.47, tr.47)
        let zi2.52: Double = FMul(ti.50, ti.50)
        let _53: Double = Double(2)
        let _54: Double = Double(2)
        let _55: Double = FMul(_53, _54)
        let _56: Double = FAdd(zr2.51, zi2.52)
        if (_55 <= _56) then {
          let _57: Int = Int(0)
          ExtApply(minimbt_print_int, [_57, ])
        } else {
          let _58: Int = Int(1)
          let _59: Int = Sub(i30.31, _58)
          Apply(iloop29, [_59, tr.47, ti.50, zr2.51, zi2.52, cr40.41, ci42.43, ])
        }
      }
    }
    let _60: Int = Int(1000)
    let _61: Double = Double(0)
    let _62: Double = Double(0)
    let _63: Double = Double(0)
    let _64: Double = Double(0)
    let _66: Unit = Apply(iloop29, [_60, _61, _62, _63, _64, cr.22, ci.28, ])
    let _67: Int = Int(1)
    let _68: Int = Add(x11.12, _67)
    Apply(xloop10l3, [_68, y13.14, w2.3, ])
  }
}
let rec yloop7l2: Unit = (y8.9: Int, w2.3: Int) {
  if (w2.3 <= y8.9) then {
    Unit
  } else {
    let _69: Int = Int(0)
    let _71: Unit = Apply(xloop10l3, [_69, y8.9, w2.3, ])
    let _72: Int = Int(1)
    let _73: Int = Add(y8.9, _72)
    Apply(yloop7l2, [_73, w2.3, ])
  }
}
let rec mandelbrot1l0: Unit = (w2.3: Int) {
  let _74: Int = Int(0)
  Apply(yloop7l2, [_74, w2.3, ])
}
let rec main75l1: Var({val: Some(Unit)}) = () {
  let _76: Int = Int(40)
  Apply(mandelbrot1l0, [_76, ])
}
Apply(main75l1, [])