let rec dbl.62l1: Double = (f.63: Double) {
  FAdd(f.63, f.63)
}
let rec iloop.82l4: Unit = (i.83: Int, zr.84: Double, zi.85: Double, zr2.86: Double, zi2.87: Double, cr.88: Double, ci.89: Double) {
  let _90: Int = Int(0)
  if (i.83 == _90) then {
    let _91: Int = Int(1)
    ExtApply(minimbt_print_int, [_91, ])
  } else {
    let _92: Double = FSub(zr2.86, zi2.87)
    let tr.93: Double = FAdd(_92, cr.88)
    let _94: Double = Apply(dbl.62l1, [zr.84, ])
    let _95: Double = FMul(_94, zi.85)
    let ti.96: Double = FAdd(_95, ci.89)
    let zr2.97: Double = FMul(tr.93, tr.93)
    let zi2.98: Double = FMul(ti.96, ti.96)
    let _99: Double = Double(2)
    let _100: Double = Double(2)
    let _101: Double = FMul(_99, _100)
    let _102: Double = FAdd(zr2.97, zi2.98)
    if (_101 <= _102) then {
      let _103: Int = Int(0)
      ExtApply(minimbt_print_int, [_103, ])
    } else {
      let _104: Int = Int(1)
      let _105: Int = Sub(i.83, _104)
      Apply(iloop.82l4, [_105, tr.93, ti.96, zr2.97, zi2.98, cr.88, ci.89, ])
    }
  }
}
let rec xloop.66l3: Unit = (x.67: Int, y.68: Int, _61: Int) {
  if (_61 <= x.67) then {
    let _69: Unit = ExtApply(minimbt_print_endline, [])
    Unit
  } else {
    let _70: Double = ExtApply(minimbt_float_of_int, [x.67, ])
    let _71: Double = Apply(dbl.62l1, [_70, ])
    let _72: Double = ExtApply(minimbt_float_of_int, [_61, ])
    let _73: Double = FDiv(_71, _72)
    let _74: Double = Double(1.5)
    let cr.75: Double = FSub(_73, _74)
    let _76: Double = ExtApply(minimbt_float_of_int, [y.68, ])
    let _77: Double = Apply(dbl.62l1, [_76, ])
    let _78: Double = ExtApply(minimbt_float_of_int, [_61, ])
    let _79: Double = FDiv(_77, _78)
    let _80: Double = Double(1)
    let ci.81: Double = FSub(_79, _80)
    let _106: Int = Int(1000)
    let _107: Double = Double(0)
    let _108: Double = Double(0)
    let _109: Double = Double(0)
    let _110: Double = Double(0)
    let _111: Unit = Apply(iloop.82l4, [_106, _107, _108, _109, _110, cr.75, ci.81, ])
    let _112: Int = Int(1)
    let _113: Int = Add(x.67, _112)
    Apply(xloop.66l3, [_113, y.68, _61, ])
  }
}
let rec yloop.64l2: Unit = (y.65: Int, _61: Int) {
  if (_61 <= y.65) then {
    Unit
  } else {
    let _114: Int = Int(0)
    let _115: Unit = Apply(xloop.66l3, [_114, y.65, _61, ])
    let _116: Int = Int(1)
    let _117: Int = Add(y.65, _116)
    Apply(yloop.64l2, [_117, _61, ])
  }
}
let rec main.60l0: Var({val: Some(Unit)}) = () {
  let _61: Int = Int(40)
  let _118: Int = Int(0)
  Apply(yloop.64l2, [_118, _61, ])
}
Apply(main.60l0, [])