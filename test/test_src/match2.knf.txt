let rec main.1: Unit = () {
  let _2: Bool = Bool(true)
  let _3: Bool = Bool(false)
  let _4: (Bool, Bool) = Tuple([_2, _3, ])
  let (_5: Var(None), _6: Var(None)) = _4
  let _7: Bool = Bool(true)
  let i.9: Int = if (_5 == _7) then {
    Int(1)
  } else {
    let _8: Bool = Bool(true)
    if (_6 == _8) then {
      Int(2)
    } else {
      Int(3)
    }
  }
  let _10: Int = Int(1)
  let _11: Int = if (i.9 <= _10) then {
    Bool(true)
  } else {
    Bool(false)
  }
  let _12: Int = Int(2)
  let _13: Int = if (i.9 <= _12) then {
    Bool(true)
  } else {
    Bool(false)
  }
  let _14: Int = Int(3)
  let _15: Int = if (i.9 <= _14) then {
    Bool(true)
  } else {
    Bool(false)
  }
  let _16: (Int, Int, Int) = Tuple([_11, _13, _15, ])
  let (_17: Var(None), _18: Var(None), _19: Var(None)) = _16
  let _20: Bool = Bool(true)
  let j.23: Int = if (_17 == _20) then {
    Int(1)
  } else {
    let _21: Bool = Bool(true)
    if (_18 == _21) then {
      Int(2)
    } else {
      let _22: Bool = Bool(true)
      if (_19 == _22) then {
        Int(3)
      } else {
        Int(4)
      }
    }
  }
  let _24: Int = Int(1)
  let _25: Int = Add(j.23, _24)
  let _26: Int = Int(2)
  let _27: Int = Add(j.23, _26)
  let _28: Int = Int(3)
  let _29: Int = Add(j.23, _28)
  let _30: (Int, Int, Int, Int) = Tuple([j.23, _25, _27, _29, ])
  let (_31: Var(None), _32: Var(None), _33: Var(None), _34: Var(None)) = _30
  let _35: Int = Int(1)
  let k.41: Int = if (_31 == _35) then {
    let _36: Int = Int(2)
    if (_32 == _36) then {
      let _37: Int = Int(3)
      if (_33 == _37) then {
        let _38: Int = Int(5)
        if (_34 == _38) then {
          Int(1)
        } else {
          let _39: Int = Int(6)
          if (_34 == _39) then {
            Int(2)
          } else {
            let _40: Int = Int(7)
            if (_34 == _40) then {
              Int(3)
            } else {
              Int(4)
            }
          }
        }
      } else {
        Int(4)
      }
    } else {
      Int(4)
    }
  } else {
    Int(4)
  }
  let _42: Int = Int(0)
  let _43: Int = Int(1)
  let _44: Int = Int(1)
  let _45: Int = Int(2)
  let _46: (Int, Int) = Tuple([_44, _45, ])
  let _47: Enum X { A(~0, ~0), B(Int, Int), C() } = Tuple([_43, _46, ])
  let _48: Int = Int(2)
  let _49: () = Tuple([])
  let _50: Enum X { A(~0, ~0), B(Int, Int), C() } = Tuple([_48, _49, ])
  let _51: (Enum X { A(Enum X { A(~0, ~0), B(Int, Int), C() }, ~0), B(Int, Int), C() }, Enum X { A(~0, ~0), B(Int, Int), C() }) = Tuple([_47, _50, ])
  let _52: Enum X { A(~0, ~0), B(Int, Int), C() } = Tuple([_42, _51, ])
  let _53: Int = Int(0)
  let (_54: Int, _55: (Enum X { A(Enum X { A(~0, ~0), B(Int, Int), C() }, ~0), B(Int, Int), C() }, Enum X { A(~0, ~0), B(Int, Int), C() })) = _52
  let m.90: Int = if (_54 == _53) then {
    let (_56: Enum X { A(~0, ~0), B(Int, Int), C() }, _57: Enum X { A(~0, ~0), B(Int, Int), C() }) = _55
    let _58: Int = Int(1)
    let (_59: Int, _60: (Int, Int)) = _57
    if (_59 == _58) then {
      let (_61: Int, _62: Int) = _60
      let _63: Int = Int(1)
      let (_64: Int, _65: (Int, Int)) = _56
      if (_64 == _63) then {
        let (_66: Int, _67: Int) = _65
        Int(1)
      } else {
        let _68: Int = Int(2)
        let (_69: Int, _70: ()) = _56
        if (_69 == _68) then {
          let () = _70
          Int(2)
        } else {
          ExtApply(minimbt_panic, [])
        }
      }
    } else {
      let _71: Int = Int(2)
      let (_72: Int, _73: ()) = _57
      if (_72 == _71) then {
        let () = _73
        let _74: Int = Int(1)
        let (_75: Int, _76: (Int, Int)) = _56
        if (_75 == _74) then {
          let (_77: Int, _78: Int) = _76
          let _79: Int = Int(1)
          if (_77 == _79) then {
            let _80: Int = Int(3)
            if (_78 == _80) then {
              Int(3)
            } else {
              let _81: Int = Int(2)
              if (_78 == _81) then {
                Int(4)
              } else {
                ExtApply(minimbt_panic, [])
              }
            }
          } else {
            ExtApply(minimbt_panic, [])
          }
        } else {
          ExtApply(minimbt_panic, [])
        }
      } else {
        ExtApply(minimbt_panic, [])
      }
    }
  } else {
    let _82: Int = Int(1)
    let (_83: Int, _84: (Int, Int)) = _52
    if (_83 == _82) then {
      let (_85: Int, _86: Int) = _84
      Int(5)
    } else {
      let _87: Int = Int(2)
      let (_88: Int, _89: ()) = _52
      if (_88 == _87) then {
        let () = _89
        Int(6)
      } else {
        ExtApply(minimbt_panic, [])
      }
    }
  }
  let _92: Unit = ExtApply(minimbt_print_int, [i.9, ])
  let _94: Unit = ExtApply(minimbt_print_int, [j.23, ])
  let _96: Unit = ExtApply(minimbt_print_int, [k.41, ])
  let _98: Unit = ExtApply(minimbt_print_int, [m.90, ])
  Unit
}
Apply(main.1, [])
