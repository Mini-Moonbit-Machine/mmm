// [Main] function thunk_main(k) {
// [Main]   function loop3_1(i_3, j_5, k_7, a_9, b_11, c_13, k) {
// [Main]     const _14 = 0;
// [Main]     if (_14 <= k_7) {
// [Main]       const _15 = c_13[i_3];
// [Main]       const _16 = c_13[i_3];
// [Main]       const _17 = _16[j_5];
// [Main]       const _18 = a_9[i_3];
// [Main]       const _19 = _18[k_7];
// [Main]       const _20 = b_11[k_7];
// [Main]       const _21 = _20[j_5];
// [Main]       const _22 = _19 * _21;
// [Main]       const _23 = _17 + _22;
// [Main]       const _25 = _15[j_5] = _23;
// [Main]       const _26 = 1;
// [Main]       const _27 = k_7 - _26;
// [Main]       return $thunk(() => loop3_1(i_3, j_5, _27, a_9, b_11, c_13, k))
// [Main]     } else {
// [Main]       return k(null)
// [Main]     }
// [Main]   }
// [Main]   function loop2_28(i_30, m_32, j_34, a_36, b_38, c_40, k) {
// [Main]     const _41 = 0;
// [Main]     if (_41 <= j_34) {
// [Main]       const _42 = 1;
// [Main]       const _43 = m_32 - _42;
// [Main]       return $thunk(() => loop3_1(i_30, j_34, _43, a_36, b_38, c_40, function (_45) {
// [Main]         const _46 = 1;
// [Main]         const _47 = j_34 - _46;
// [Main]         return $thunk(() => loop2_28(i_30, m_32, _47, a_36, b_38, c_40, k))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       return k(null)
// [Main]     }
// [Main]   }
// [Main]   function loop1_48(i_50, m_52, n_54, a_56, b_58, c_60, k) {
// [Main]     const _61 = 0;
// [Main]     if (_61 <= i_50) {
// [Main]       const _62 = 1;
// [Main]       const _63 = n_54 - _62;
// [Main]       return $thunk(() => loop2_28(i_50, m_52, _63, a_56, b_58, c_60, function (_65) {
// [Main]         const _66 = 1;
// [Main]         const _67 = i_50 - _66;
// [Main]         return $thunk(() => loop1_48(_67, m_52, n_54, a_56, b_58, c_60, k))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       return k(null)
// [Main]     }
// [Main]   }
// [Main]   function mul_68(l_70, m_72, n_74, a_76, b_78, c_80, k) {
// [Main]     const _81 = 1;
// [Main]     const _82 = l_70 - _81;
// [Main]     return $thunk(() => loop1_48(_82, m_72, n_74, a_76, b_78, c_80, function (_84) {
// [Main]       return $thunk(() => k(null))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_85(k) {
// [Main]     const _86 = 0;
// [Main]     const _87 = 0;
// [Main]     const dummy_88 = minimbt_create_float_array($force(_86), $force(_87));
// [Main]     function init_arr_89(i_91, n_93, mat_95, k) {
// [Main]       const _96 = 0;
// [Main]       if (_96 <= i_91) {
// [Main]         const _97 = 0;
// [Main]         const _98 = minimbt_create_float_array($force(n_93), $force(_97));
// [Main]         const _100 = mat_95[i_91] = _98;
// [Main]         const _101 = 1;
// [Main]         const _102 = i_91 - _101;
// [Main]         return $thunk(() => init_arr_89(_102, n_93, mat_95, k))
// [Main]       } else {
// [Main]         return k(null)
// [Main]       }
// [Main]     }
// [Main]     function make_arr_103(m_105, n_107, dummy_109, k) {
// [Main]       const mat_110 = minimbt_create_ptr_array($force(m_105), $force(dummy_109));
// [Main]       const _111 = 1;
// [Main]       const _112 = m_105 - _111;
// [Main]       return $thunk(() => init_arr_89(_112, n_107, mat_110, function (_114) {
// [Main]         return $thunk(() => k(mat_110))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     const _115 = 2;
// [Main]     const _116 = 3;
// [Main]     return $thunk(() => make_arr_103(_115, _116, dummy_88, function (a_117) {
// [Main]       const _118 = 3;
// [Main]       const _119 = 2;
// [Main]       return $thunk(() => make_arr_103(_118, _119, dummy_88, function (b_120) {
// [Main]         const _121 = 2;
// [Main]         const _122 = 2;
// [Main]         return $thunk(() => make_arr_103(_121, _122, dummy_88, function (c_123) {
// [Main]           const _124 = 0;
// [Main]           const _125 = a_117[_124];
// [Main]           const _126 = 0;
// [Main]           const _127 = 1;
// [Main]           const _129 = _125[_126] = _127;
// [Main]           const _130 = 0;
// [Main]           const _131 = a_117[_130];
// [Main]           const _132 = 1;
// [Main]           const _133 = 2;
// [Main]           const _135 = _131[_132] = _133;
// [Main]           const _136 = 0;
// [Main]           const _137 = a_117[_136];
// [Main]           const _138 = 2;
// [Main]           const _139 = 3;
// [Main]           const _141 = _137[_138] = _139;
// [Main]           const _142 = 1;
// [Main]           const _143 = a_117[_142];
// [Main]           const _144 = 0;
// [Main]           const _145 = 4;
// [Main]           const _147 = _143[_144] = _145;
// [Main]           const _148 = 1;
// [Main]           const _149 = a_117[_148];
// [Main]           const _150 = 1;
// [Main]           const _151 = 5;
// [Main]           const _153 = _149[_150] = _151;
// [Main]           const _154 = 1;
// [Main]           const _155 = a_117[_154];
// [Main]           const _156 = 2;
// [Main]           const _157 = 6;
// [Main]           const _159 = _155[_156] = _157;
// [Main]           const _160 = 0;
// [Main]           const _161 = b_120[_160];
// [Main]           const _162 = 0;
// [Main]           const _163 = 7;
// [Main]           const _165 = _161[_162] = _163;
// [Main]           const _166 = 0;
// [Main]           const _167 = b_120[_166];
// [Main]           const _168 = 1;
// [Main]           const _169 = 8;
// [Main]           const _171 = _167[_168] = _169;
// [Main]           const _172 = 1;
// [Main]           const _173 = b_120[_172];
// [Main]           const _174 = 0;
// [Main]           const _175 = 9;
// [Main]           const _177 = _173[_174] = _175;
// [Main]           const _178 = 1;
// [Main]           const _179 = b_120[_178];
// [Main]           const _180 = 1;
// [Main]           const _181 = 10;
// [Main]           const _183 = _179[_180] = _181;
// [Main]           const _184 = 2;
// [Main]           const _185 = b_120[_184];
// [Main]           const _186 = 0;
// [Main]           const _187 = 11;
// [Main]           const _189 = _185[_186] = _187;
// [Main]           const _190 = 2;
// [Main]           const _191 = b_120[_190];
// [Main]           const _192 = 1;
// [Main]           const _193 = 12;
// [Main]           const _195 = _191[_192] = _193;
// [Main]           const _196 = 2;
// [Main]           const _197 = 3;
// [Main]           const _198 = 2;
// [Main]           return $thunk(() => mul_68(_196, _197, _198, a_117, b_120, c_123, function (_200) {
// [Main]             const _201 = 0;
// [Main]             const _202 = c_123[_201];
// [Main]             const _203 = 0;
// [Main]             const _204 = _202[_203];
// [Main]             const _205 = minimbt_truncate($force(_204));
// [Main]             const _207 = minimbt_print_int($force(_205));
// [Main]             const _209 = minimbt_print_endline();
// [Main]             const _210 = 0;
// [Main]             const _211 = c_123[_210];
// [Main]             const _212 = 1;
// [Main]             const _213 = _211[_212];
// [Main]             const _214 = minimbt_truncate($force(_213));
// [Main]             const _216 = minimbt_print_int($force(_214));
// [Main]             const _218 = minimbt_print_endline();
// [Main]             const _219 = 1;
// [Main]             const _220 = c_123[_219];
// [Main]             const _221 = 0;
// [Main]             const _222 = _220[_221];
// [Main]             const _223 = minimbt_truncate($force(_222));
// [Main]             const _225 = minimbt_print_int($force(_223));
// [Main]             const _227 = minimbt_print_endline();
// [Main]             const _228 = 1;
// [Main]             const _229 = c_123[_228];
// [Main]             const _230 = 1;
// [Main]             const _231 = _229[_230];
// [Main]             const _232 = minimbt_truncate($force(_231));
// [Main]             const _234 = minimbt_print_int($force(_232));
// [Main]             return $thunk(() => $thunk(() => $thunk(() => $thunk(() => k(null)))))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_85(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: None})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: None})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("k")), Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("k")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])) against Unit
// [Typer] infer: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None))
// [Typer] infer: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)
// [Typer] infer: Get(Get(Var("c"), Var("i")), Var("j"))
// [Typer] infer: Get(Var("c"), Var("i"))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None)
// [Typer] infer: Get(Get(Var("a"), Var("i")), Var("k"))
// [Typer] infer: Get(Var("a"), Var("i"))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Get(Get(Var("b"), Var("k")), Var("j"))
// [Typer] infer: Get(Var("b"), Var("k"))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Get(Var("c"), Var("i")) against Array(Double)
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]) against Unit
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("k"), Int(1), Sub, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("loop3") against Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] unify: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit) and Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: None})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: None})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("j")), Let(("_", Var({val: None})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("j")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])) against Unit
// [Typer] infer: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] infer: Var("loop3")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]) against Unit
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("j"), Int(1), Sub, kind=None)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("loop2") against Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] unify: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit) and Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: None})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])) against Unit
// [Typer] infer: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] infer: Var("loop2")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("n"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("loop1") against Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] unify: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit) and Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: None})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var({val: None})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit) against Unit
// [Typer] infer: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Typer] infer: Var("loop1")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] check: Prim(Var("l"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("l") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("dummy", Var({val: None})), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Typer] infer: Array(Int(0), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Array(Double)
// [Typer] union: Var({val: None}) and Array(Double)
// [Typer] infer: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])) against Unit
// [Typer] infer: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Typer] infer: Array(Var("n"), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("mat") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("mat")
// [Typer] inst: TypeScheme(([], Array(Array(Double))))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Var("init_arr") against Fun([Int, Int, Array(Array(Double))], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Array(Array(Double))], Unit)
// [Typer] unify: Fun([Int, Int, Array(Array(Double))], Unit) and Fun([Int, Int, Array(Array(Double))], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] infer: LetRec({tyvars: [], name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Typer] typevars: []
// [Typer] check: Let(("mat", Var({val: None})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat"))) against Array(Array(Double))
// [Typer] infer: Array(Var("m"), Var("dummy"))
// [Typer] infer: Var("dummy")
// [Typer] inst: TypeScheme(([], Array(Double)))
// [Typer] inst result: Array(Double)
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] check: Let(("_", Var({val: None})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")) against Array(Array(Double))
// [Typer] infer: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")])
// [Typer] infer: Var("init_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Array(Array(Double))], Unit)
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("mat") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Var("mat") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] infer: Let(("a", Var({val: None})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Typer] infer: App(Var("make_arr"), [Int(2), Int(3), Var("dummy")])
// [Typer] infer: Var("make_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Array(Double)], Array(Array(Double)))))
// [Typer] inst result: Fun([Int, Int, Array(Double)], Array(Array(Double)))
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Var("dummy") against Array(Double)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Double))})))
// [Typer] inst result: Array(Double)
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] infer: Let(("b", Var({val: None})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Typer] infer: App(Var("make_arr"), [Int(3), Int(2), Var("dummy")])
// [Typer] infer: Var("make_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Array(Double)], Array(Array(Double)))))
// [Typer] inst result: Fun([Int, Int, Array(Double)], Array(Array(Double)))
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("dummy") against Array(Double)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Double))})))
// [Typer] inst result: Array(Double)
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] infer: Let(("c", Var({val: None})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Typer] infer: App(Var("make_arr"), [Int(2), Int(2), Var("dummy")])
// [Typer] infer: Var("make_arr")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Array(Double)], Array(Array(Double)))))
// [Typer] inst result: Fun([Int, Int, Array(Double)], Array(Array(Double)))
// [Typer] check: Int(2) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("dummy") against Array(Double)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Double))})))
// [Typer] inst result: Array(Double)
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Array(Array(Double))
// [Typer] union: Var({val: None}) and Array(Array(Double))
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Typer] infer: Double(1)
// [Typer] check: Get(Var("a"), Int(0)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Typer] infer: Double(2)
// [Typer] check: Get(Var("a"), Int(0)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Typer] infer: Double(3)
// [Typer] check: Get(Var("a"), Int(0)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Typer] infer: Double(4)
// [Typer] check: Get(Var("a"), Int(1)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Typer] infer: Double(5)
// [Typer] check: Get(Var("a"), Int(1)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Typer] infer: Double(6)
// [Typer] check: Get(Var("a"), Int(1)) against Array(Double)
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Typer] infer: Double(7)
// [Typer] check: Get(Var("b"), Int(0)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Typer] infer: Double(8)
// [Typer] check: Get(Var("b"), Int(0)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Typer] infer: Double(9)
// [Typer] check: Get(Var("b"), Int(1)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Typer] infer: Double(10)
// [Typer] check: Get(Var("b"), Int(1)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Typer] infer: Double(11)
// [Typer] check: Get(Var("b"), Int(2)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Typer] infer: Double(12)
// [Typer] check: Get(Var("b"), Int(2)) against Array(Double)
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Typer] infer: App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Typer] infer: Var("mul")
// [Typer] inst: TypeScheme(([], Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)))
// [Typer] inst result: Fun([Int, Int, Int, Array(Array(Double)), Array(Array(Double)), Array(Array(Double))], Unit)
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("a") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array(Array(Double))
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] unify: Array(Array(Double)) and Array(Array(Double))
// [Typer] unify: Array(Double) and Array(Double)
// [Typer] unify: Double and Double
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(0))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(1))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(0))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_endline"), []), Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Typer] infer: App(Var("print_endline"), [])
// [Typer] infer: Var("print_endline")
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Let(("_", Var({val: None})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(1))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Array(Double)))})))
// [Typer] inst result: Array(Array(Double))
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("truncate") against Fun([Double], Int)
// [Typer] inst: TypeScheme(([], Fun([Double], Int)))
// [Typer] inst result: Fun([Double], Int)
// [Typer] unify: Fun([Double], Int) and Fun([Double], Int)
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
