// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_12"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main85l3_5 ->   call main85l3_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, FnParam(fref=f4, fpref=$f.0) -> v2, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v5, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v6, FnParam(fref=f4, fpref=$f.2) -> v4
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v4, v5, a1, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, v5, a1, a0, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, v5, a1, a0, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of make_arr103l5_4"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="v11 ← a0", color=green];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="v5 ← s2", color=green];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r13;
// [Asm]   r0 -- r14;
// [Asm]   r7 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r7 -- r17;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r8 -- r17;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r8 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r8 -- r18;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r19;
// [Asm]   r0 -- r18;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 4:v3-> 7:v5-> 8:a0-> 5:v4-> 3:s11-> 6:v11-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:v7-> 20:v8"
// [Asm]   comment = "v2<-s0;v8<-a0;v11<-a0;v3<-s1;v5<-s2;v4<-a2;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of make_arr103l5_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   slliw v11, v2, 3 ->   slliw a0, s0, 3
// [Asm] subst   sub v5, s11, v11 ->   sub s2, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s2, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a0, v5 ->   mv a0, s2
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v7, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v5 ->   mv a2, s2
// [Asm] subst   call init_arr89l4_3 ->   call init_arr89l4_3
// [Asm] subst   mv a0, v5 ->   mv a0, s2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%41) -> fv44, Insn(iref=%33) -> v36, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%39) -> v42, Insn(iref=%4) -> v7, Insn(iref=%42) -> v45, Self(fref=f5) -> v0, Insn(iref=%44) -> v47, Insn(iref=%32) -> v35, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%31) -> fv34, Insn(iref=%35) -> v38, Insn(iref=%28) -> v31, Insn(iref=%38) -> v41, Insn(iref=%46) -> fv49, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%37) -> v40, Insn(iref=%45) -> v48, Insn(iref=%29) -> v32, Insn(iref=%5) -> v8, Insn(iref=%47) -> v50, Insn(iref=%19) -> v22, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Mem(fref=f5, mref=m0) -> v2, Insn(iref=%7) -> v10, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%48) -> v51, Insn(iref=%2) -> v5, Insn(iref=%20) -> v23, Insn(iref=%43) -> v46, Insn(iref=%30) -> v33, Insn(iref=%21) -> v24, Insn(iref=%34) -> v37, Insn(iref=%36) -> fv39, Insn(iref=%40) -> v43, Insn(iref=%12) -> v15
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v117]
// [Asm] live_set: [zero, v117, v2]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [v117]
// [Asm] defined: a0 is X
// [Asm] defs: [v118]
// [Asm] live_set: [v118, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v118 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, v2]
// [Asm] move_origin: [v118]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v114]
// [Asm] live_set: [zero, v4, v114, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: [v114]
// [Asm] defined: a0 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v115, zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v4, a1, v2]
// [Asm] move_origin: [v115]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v112]
// [Asm] live_set: [v112, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v112, v5, zero, a0, v4, v2]
// [Asm] move_origin: [v112]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v2]
// [Asm] move_origin: [v112]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [fv110]
// [Asm] live_set: [v5, zero, fv110, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv110 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v5, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [fv107]
// [Asm] live_set: [v5, zero, v4, v6, fv107, v9]
// [Asm] move_origin: []
// [Asm] defined: fv107 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v11, v5, zero, v103, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [fv104]
// [Asm] live_set: [v11, v5, zero, v4, v6, fv104]
// [Asm] move_origin: []
// [Asm] defined: fv104 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v5, zero, v13, v4, v6, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [fv101]
// [Asm] live_set: [v5, zero, v13, v4, fv101, v6]
// [Asm] move_origin: []
// [Asm] defined: fv101 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v5, zero, v97, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [fv98]
// [Asm] live_set: [fv98, v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: fv98 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [fv95]
// [Asm] live_set: [v5, zero, v4, v6, v17, fv95]
// [Asm] move_origin: []
// [Asm] defined: fv95 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v5, v91, zero, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [fv92]
// [Asm] live_set: [v5, fv92, zero, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv92 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v5, v21, zero, v88, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [fv89]
// [Asm] live_set: [v5, v21, zero, fv89, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv89 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v5, zero, v23, v85, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [fv86]
// [Asm] live_set: [fv86, v5, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv86 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v25, v5, v82, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [fv83]
// [Asm] live_set: [v25, v5, zero, v4, v6, fv83]
// [Asm] move_origin: []
// [Asm] defined: fv83 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v5, zero, v79, v27, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [fv80]
// [Asm] live_set: [v5, zero, v27, v4, v6, fv80]
// [Asm] move_origin: []
// [Asm] defined: fv80 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v5, zero, v29, v4, v6, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [fv77]
// [Asm] live_set: [v5, zero, v29, v4, v6, fv77]
// [Asm] move_origin: []
// [Asm] defined: fv77 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v74]
// [Asm] live_set: [v5, zero, v4, v6, v74]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v4, v6, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6, v31]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v6]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, a0, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v6]
// [Asm] move_origin: [v71]
// [Asm] defined: a1 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v5, zero, a0, v4, a1, v6]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, v4, a1, v6]
// [Asm] move_origin: [v72]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, v6, a1, a3]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, v6, a1, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v6, zero, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [fv34]
// [Asm] live_set: [v6, zero, fv34]
// [Asm] move_origin: []
// [Asm] defined: fv34 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v6, zero, v35]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v35]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v38, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [fv39]
// [Asm] live_set: [v6, zero, fv39]
// [Asm] move_origin: []
// [Asm] defined: fv39 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v6, zero, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v40]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v40]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v6, v43, zero]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [fv44]
// [Asm] live_set: [v6, fv44, zero]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v6, zero, v45]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v45]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v45]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v48, zero]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [fv49]
// [Asm] live_set: [fv49, zero]
// [Asm] move_origin: []
// [Asm] defined: fv49 is F
// [Asm] defs: [v50]
// [Asm] live_set: [zero, v50]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v50]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v50]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v51]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main85l3_5"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r46 [label="v29 ← a0", color=green];
// [Asm]   r33 [label="v97 ← a1", color=green];
// [Asm]   r59 [label="v41 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r44 [label="v27 ← a0", color=green];
// [Asm]   r53 [label="v33 ← a0", color=green];
// [Asm]   r56 [label="v37 ← a0", color=green];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r5 [label="v118 ← a1", color=green];
// [Asm]   r54 [label="v35 ← a0", color=green];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r43 [label="v82 ← a1", color=green];
// [Asm]   r31 [label="v100 ← a1", color=green];
// [Asm]   r39 [label="v88 ← a1", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r65 [label="v48 ← a0", color=green];
// [Asm]   r52 [label="v32 ← a0", color=green];
// [Asm]   r20 [label="v115 ← a1", color=green];
// [Asm]   r61 [label="v43 ← a0", color=green];
// [Asm]   r23 [label="v6 ← s0", color=green];
// [Asm]   r3 [label="v117 ← a0", color=green];
// [Asm]   r67 [label="v51 ← a0", color=green];
// [Asm]   r27 [label="v106 ← a1", color=green];
// [Asm]   r62 [label="v45 ← a0", color=green];
// [Asm]   r40 [label="v23 ← a0", color=green];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r58 [label="v40 ← a0", color=green];
// [Asm]   r34 [label="v17 ← a0", color=green];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r51 [label="v72 ← a2", color=green];
// [Asm]   r55 [label="v36 ← a0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r21 [label="v5 ← s2", color=green];
// [Asm]   r60 [label="v42 ← a0", color=green];
// [Asm]   r38 [label="v21 ← a0", color=green];
// [Asm]   r47 [label="v76 ← a1", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r42 [label="v25 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v103 ← a1", color=green];
// [Asm]   r35 [label="v94 ← a1", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r64 [label="v47 ← a0", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r36 [label="v19 ← a0", color=green];
// [Asm]   r66 [label="v50 ← a0", color=green];
// [Asm]   r32 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r49 [label="v31 ← a0", color=green];
// [Asm]   r57 [label="v38 ← a0", color=green];
// [Asm]   r48 [label="v74 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r37 [label="v91 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r41 [label="v85 ← a1", color=green];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r22 [label="v112 ← a0", color=green];
// [Asm]   r50 [label="v71 ← a1", color=green];
// [Asm]   r30 [label="v13 ← a0", color=green];
// [Asm]   r45 [label="v79 ← a1", color=green];
// [Asm]   r25 [label="v109 ← a1", color=green];
// [Asm]   r63 [label="v46 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r18 [label="v4 ← s1", color=green];
// [Asm]   r19 [label="v114 ← a0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r23 -- r36;
// [Asm]   r18 -- r49;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r30;
// [Asm]   r23 -- r46;
// [Asm]   r23 -- r51;
// [Asm]   r4 -- r51;
// [Asm]   r1 -- r57;
// [Asm]   r21 -- r38;
// [Asm]   r18 -- r42;
// [Asm]   r23 -- r56;
// [Asm]   r1 -- r45;
// [Asm]   r23 -- r35;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r45;
// [Asm]   r0 -- r16;
// [Asm]   r18 -- r44;
// [Asm]   r18 -- r34;
// [Asm]   r1 -- r50;
// [Asm]   r23 -- r53;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r21 -- r33;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r10 -- r18;
// [Asm]   r21 -- r48;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r1 -- r40;
// [Asm]   r8 -- r23;
// [Asm]   r18 -- r46;
// [Asm]   r23 -- r54;
// [Asm]   r23 -- r58;
// [Asm]   r1 -- r2;
// [Asm]   r21 -- r50;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r33;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r23 -- r55;
// [Asm]   r18 -- r37;
// [Asm]   r16 -- r21;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r39;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r23 -- r37;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r21 -- r46;
// [Asm]   r18 -- r43;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r23 -- r50;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r18 -- r40;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r21 -- r34;
// [Asm]   r4 -- r18;
// [Asm]   r23 -- r39;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r23 -- r45;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r23;
// [Asm]   r18 -- r39;
// [Asm]   r18 -- r51;
// [Asm]   r23 -- r26;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r32 -- r33;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r23 -- r30;
// [Asm]   r13 -- r23;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r8 -- r18;
// [Asm]   r23 -- r42;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r18 -- r47;
// [Asm]   r23 -- r40;
// [Asm]   r23 -- r59;
// [Asm]   r7 -- r18;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r20;
// [Asm]   r1 -- r54;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r42;
// [Asm]   r18 -- r23;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r43;
// [Asm]   r23 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r21 -- r35;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r63;
// [Asm]   r30 -- r31;
// [Asm]   r18 -- r27;
// [Asm]   r23 -- r52;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r42 -- r43;
// [Asm]   r1 -- r62;
// [Asm]   r1 -- r67;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r18 -- r50;
// [Asm]   r23 -- r64;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r15 -- r18;
// [Asm]   r18 -- r26;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r18 -- r30;
// [Asm]   r23 -- r32;
// [Asm]   r23 -- r41;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r50;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r23 -- r38;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r44;
// [Asm]   r21 -- r22;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r21 -- r37;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r23 -- r33;
// [Asm]   r17 -- r18;
// [Asm]   r23 -- r57;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r16;
// [Asm]   r23 -- r63;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r23 -- r49;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r21 -- r40;
// [Asm]   r18 -- r29;
// [Asm]   r23 -- r60;
// [Asm]   r14 -- r23;
// [Asm]   r46 -- r47;
// [Asm]   r1 -- r32;
// [Asm]   r23 -- r62;
// [Asm]   r6 -- r51;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r23 -- r34;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r1 -- r65;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r21 -- r47;
// [Asm]   r7 -- r9;
// [Asm]   r1 -- r66;
// [Asm]   r21 -- r44;
// [Asm]   r18 -- r36;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r18 -- r32;
// [Asm]   r23 -- r47;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r59;
// [Asm]   r23 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r61;
// [Asm]   r10 -- r23;
// [Asm]   r21 -- r42;
// [Asm]   r18 -- r48;
// [Asm]   r18 -- r41;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r51;
// [Asm]   r21 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r21 -- r41;
// [Asm]   r0 -- r12;
// [Asm]   r18 -- r38;
// [Asm]   r4 -- r17;
// [Asm]   r23 -- r43;
// [Asm]   r23 -- r44;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r23 -- r48;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v117-> 4:a0-> 5:v118-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 18:v4-> 21:v5-> 23:v6-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 51:v72-> 50:v71-> 20:v115-> 22:v112-> 24:v7-> 25:v109-> 26:v9-> 27:v106-> 28:v11-> 29:v103-> 30:v13-> 31:v100-> 32:v15-> 33:v97-> 34:v17-> 35:v94-> 36:v19-> 37:v91-> 38:v21-> 39:v88-> 40:v23-> 41:v85-> 42:v25-> 43:v82-> 44:v27-> 45:v79-> 46:v29-> 47:v76-> 48:v74-> 49:v31-> 19:v114-> 52:v32-> 53:v33-> 54:v35-> 55:v36-> 56:v37-> 57:v38-> 58:v40-> 59:v41-> 60:v42-> 61:v43-> 62:v45-> 63:v46-> 64:v47-> 65:v48-> 66:v50-> 67:v51"
// [Asm]   comment = "v2<-s0;v29<-a0;v97<-a1;v41<-a0;v9<-a0;v27<-a0;v33<-a0;v37<-a0;v118<-a1;v35<-a0;v7<-a0;v82<-a1;v100<-a1;v88<-a1;v48<-a0;v32<-a0;v115<-a1;v43<-a0;v6<-s0;v117<-a0;v51<-a0;v106<-a1;v45<-a0;v23<-a0;v40<-a0;v17<-a0;v72<-a2;v36<-a0;v5<-s2;v42<-a0;v21<-a0;v76<-a1;v25<-a0;v103<-a1;v94<-a1;v47<-a0;v19<-a0;v50<-a0;v15<-a0;v31<-a0;v38<-a0;v74<-a0;v91<-a1;v85<-a1;v11<-a0;v112<-a0;v71<-a1;v13<-a0;v79<-a1;v109<-a1;v46<-a0;v4<-s1;v114<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main85l3_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv44 ← fa0", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv89 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv80 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r32 [label="fv39 ← fa0", color=green];
// [Asm]   r24 [label="fv95 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r31 [label="fv34 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv107 ← fa0", color=green];
// [Asm]   r23 [label="fv98 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv86 ← fa0", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv83 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv49 ← fa0", color=green];
// [Asm]   r22 [label="fv101 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv77 ← fa0", color=green];
// [Asm]   r25 [label="fv92 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv110 ← fa0", color=green];
// [Asm]   r21 [label="fv104 ← fa0", color=green];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv110-> 20:fv107-> 21:fv104-> 22:fv101-> 23:fv98-> 24:fv95-> 25:fv92-> 26:fv89-> 27:fv86-> 28:fv83-> 29:fv80-> 30:fv77-> 31:fv34-> 32:fv39-> 33:fv44-> 34:fv49"
// [Asm]   comment = "fv44<-fa0;fv89<-fa0;fv80<-fa0;fv39<-fa0;fv95<-fa0;fv34<-fa0;fv107<-fa0;fv98<-fa0;fv86<-fa0;fv83<-fa0;fv49<-fa0;fv101<-fa0;fv77<-fa0;fv92<-fa0;fv110<-fa0;fv104<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v117, 2 ->   li a0, 2
// [Asm] subst   li v118, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr103l5_4 ->   call make_arr103l5_4
// [Asm] subst   mv v4, a0 ->   mv s1, a0
// [Asm] subst   li v114, 3 ->   li a0, 3
// [Asm] subst   li v115, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr103l5_4 ->   call make_arr103l5_4
// [Asm] subst   mv v5, a0 ->   mv s2, a0
// [Asm] subst   li v112, 2 ->   li a0, 2
// [Asm] subst   mv a1, v112 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr103l5_4 ->   call make_arr103l5_4
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v109, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv110, v109 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv110, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v106, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv107, v106 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv107, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v103, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv104, v103 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv104, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v100, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv101, v100 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv101, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v97, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv98, v97 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv98, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v94, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv95, v94 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv95, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v91, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv92, v91 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv92, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v88, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv89, v88 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv89, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v85, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv86, v85 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv86, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v82, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv83, v82 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv83, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v79, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv80, v79 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv80, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v76, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv77, v76 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv77, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v74, 2 ->   li a0, 2
// [Asm] subst   addi v31, v74, -1 ->   addi a0, a0, -1
// [Asm] subst   li v71, 3 ->   li a1, 3
// [Asm] subst   li v72, 2 ->   li a2, 2
// [Asm] subst   mv a3, v4 ->   mv a3, s1
// [Asm] subst   mv a4, v5 ->   mv a4, s2
// [Asm] subst   mv a5, v6 ->   mv a5, s0
// [Asm] subst   call loop148l2_2 ->   call loop148l2_2
// [Asm] subst   ld v33, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv34, 0(v33) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v35, fv34, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v38, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv39, 8(v38) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v40, fv39, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v43, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv44, 0(v43) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v45, fv44, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v48, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv49, 8(v48) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v50, fv49, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv46, BlockParam(bref=b7, bpref=$b.1) -> v18, BlockParam(bref=b7, bpref=$b.0) -> v17, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b14, bpref=$b.8) -> v38, BlockParam(bref=b10, bpref=$b.0) -> v24, Insn(iref=%8) -> v29, Insn(iref=%10) -> v42, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%14) -> v45, BlockParam(bref=b14, bpref=$b.0) -> v30, Insn(iref=%4) -> v23, FnParam(fref=f2, fpref=$f.5) -> v7, BlockParam(bref=b14, bpref=$b.7) -> v37, BlockParam(bref=b14, bpref=$b.3) -> v33, BlockParam(bref=b7, bpref=$b.3) -> v20, BlockParam(bref=b6, bpref=$b.0) -> v25, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v16, Insn(iref=%11) -> v39, Insn(iref=%6) -> v28, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b14, bpref=$b.1) -> v31, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b7, bpref=$b.2) -> v19, FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b17, bpref=$b.0) -> v40, BlockParam(bref=b3, bpref=$b.0) -> v15, BlockParam(bref=b14, bpref=$b.6) -> v36, Insn(iref=%16) -> fv47, Self(fref=f2) -> v0, BlockParam(bref=b7, bpref=$b.5) -> v22, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b14, bpref=$b.4) -> v34, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b14, bpref=$b.2) -> v32, Insn(iref=%5) -> v27, Insn(iref=%0) -> v14, Insn(iref=%19) -> v50, BlockParam(bref=b13, bpref=$b.0) -> v41, Insn(iref=%3) -> v26, Insn(iref=%18) -> v49, Insn(iref=%13) -> fv44, Insn(iref=%17) -> fv48, BlockParam(bref=b14, bpref=$b.5) -> v35, BlockParam(bref=b7, bpref=$b.4) -> v21, FnParam(fref=f2, fpref=$f.3) -> v5, Insn(iref=%12) -> fv43
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b14, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b7, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v21, v10, v13, v42, v22, v17, v12, v9, v18, zero, v20, v8]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v42, v22, v17, v12, v9, v18, zero, v20, v8]
// [Asm] move_origin: [v17]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v42, v22, v17, v12, v9, v18, zero, v20, v8]
// [Asm] move_origin: [v18]
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v42]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v21]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] move_origin: [v22]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v17, v12, v28, v9, v18, zero, v29, v20, v27, v8, v19]
// [Asm] move_origin: [v17]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v17, v12, v31, v28, v9, v18, zero, v29, v20, v27, v8, v19]
// [Asm] move_origin: [v19]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v18, zero, v29, v20, v8, v19]
// [Asm] move_origin: [v27]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v19]
// [Asm] move_origin: [v20]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v19, v34]
// [Asm] move_origin: [v21]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v35, v19, v34]
// [Asm] move_origin: [v22]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v35, v19, v34]
// [Asm] move_origin: [v28]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v29, v20, v8, v35, v19, v34]
// [Asm] move_origin: [v28]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v29]
// [Asm] defined: v38 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19, v40]
// [Asm] move_origin: [zero]
// [Asm] defined: v40 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v32, v37, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v10, v13, zero, v8, v24, v12, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v27, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v11, v71, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v27, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v9, v72, v18, zero, v20, v27, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v20, v27, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v68, v20, v27, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v69, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v27, v20, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v29, v27, v20, v8, v19]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v10, v13, zero, v26, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v26]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v10, v18, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, v18, v13, zero, v8, v19, v17, v12, v9]
// [Asm] move_origin: [v16]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, v18, v13, zero, v20, v8, v19, v17, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v21, v10, v18, v13, zero, v20, v8, v19, v17, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: v22 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v9, v33, v64, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v65, v17, v12, v31, v9, v33, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v61, v34]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [fv44]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm] move_origin: []
// [Asm] defined: fv44 is F
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v59, fv44, v34]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v45, v19, v38, fv44, v34]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v45, v19, v38, fv44, v34, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, v56, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [fv46]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, fv46, v18, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm] move_origin: []
// [Asm] defined: fv46 is F
// [Asm] defs: [fv48]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, fv48, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v21, v10, v13, v22, v30, v36, fv48, v37, v32, v17, v12, v52, v31, v33, v9, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v21, v10, v53, v13, v22, v30, v36, fv48, v37, v32, v17, v12, v31, v9, v33, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v9, v33, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v17, v12, v31, v33, v9, v18, zero, v20, v50, v8, v35, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v17, v12, v31, v33, v9, v18, zero, v20, v50, v8, v35, v19, v38, v34]
// [Asm] move_origin: [v30]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v17, v12, v31, v33, v9, v18, zero, v20, v50, v8, v35, v19, v38, v34]
// [Asm] move_origin: [v31]
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v50]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v33]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v34]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v35]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v36]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v37]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: [v38]
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v21, v10, v13, v22, v41, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v40]
// [Asm] defined: v41 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop148l2_2"];
// [Asm]   r0 [label="v42 ← a0", color=green];
// [Asm]   r46 [label="v15 ← a0", color=green];
// [Asm]   r38 [label="a2", color=blue];
// [Asm]   r33 [label="v68 ← t0", color=green];
// [Asm]   r59 [label="v50 ← t1", color=green];
// [Asm]   r9 [label="v18 ← a6", color=green];
// [Asm]   r26 [label="a0", color=blue];
// [Asm]   r47 [label="v26 ← a0", color=green];
// [Asm]   r6 [label="v17 ← a5", color=green];
// [Asm]   r44 [label="v6 ← a2", color=green];
// [Asm]   r13 [label="v19 ← a0", color=green];
// [Asm]   r42 [label="v4 ← a7", color=green];
// [Asm]   r53 [label="v59 ← s2", color=green];
// [Asm]   r4 [label="v13 ← a4", color=green];
// [Asm]   r29 [label="v16 ← a0", color=green];
// [Asm]   r35 [label="v2 ← t0", color=green];
// [Asm]   r56 [label="v56 ← s2", color=green];
// [Asm]   r7 [label="v12 ← a2", color=green];
// [Asm]   r10 [label="zero", color=blue];
// [Asm]   r8 [label="v9 ← a6", color=green];
// [Asm]   r5 [label="v22 ← a4", color=green];
// [Asm]   r36 [label="a5", color=blue];
// [Asm]   r54 [label="v45 ← s2", color=green];
// [Asm]   r15 [label="v28 ← a7", color=green];
// [Asm]   r24 [label="v37 ← s1", color=green];
// [Asm]   r32 [label="v72 ← a7", color=green];
// [Asm]   r49 [label="v65 ← s2", color=green];
// [Asm]   r57 [label="v52 ← s2", color=green];
// [Asm]   r43 [label="v5 ← a1", color=green];
// [Asm]   r31 [label="v71 ← a7", color=green];
// [Asm]   r39 [label="a1", color=blue];
// [Asm]   r17 [label="v27 ← t1", color=green];
// [Asm]   r52 [label="v58 ← s2", color=green];
// [Asm]   r12 [label="v8 ← a5", color=green];
// [Asm]   r48 [label="v64 ← s2", color=green];
// [Asm]   r37 [label="a4", color=blue];
// [Asm]   r20 [label="v33 ← t3", color=green];
// [Asm]   r23 [label="v36 ← a7", color=green];
// [Asm]   r3 [label="v10 ← a3", color=green];
// [Asm]   r27 [label="v40 ← a7", color=green];
// [Asm]   r1 [label="v11 ← a1", color=green];
// [Asm]   r40 [label="a3", color=blue];
// [Asm]   r41 [label="v3 ← a6", color=green];
// [Asm]   r28 [label="v25 ← a0", color=green];
// [Asm]   r11 [label="v20 ← a1", color=green];
// [Asm]   r58 [label="v53 ← s2", color=green];
// [Asm]   r34 [label="v69 ← t0", color=green];
// [Asm]   r22 [label="v35 ← s0", color=green];
// [Asm]   r14 [label="v30 ← t2", color=green];
// [Asm]   r50 [label="v61 ← s2", color=green];
// [Asm]   r30 [label="v24 ← a0", color=green];
// [Asm]   r51 [label="v62 ← s2", color=green];
// [Asm]   r45 [label="v7 ← a0", color=green];
// [Asm]   r25 [label="v38 ← t0", color=green];
// [Asm]   r55 [label="v55 ← s3", color=green];
// [Asm]   r2 [label="v21 ← a2", color=green];
// [Asm]   r16 [label="v29 ← t0", color=green];
// [Asm]   r18 [label="v31 ← a0", color=green];
// [Asm]   r19 [label="v32 ← t1", color=green];
// [Asm]   r21 [label="v34 ← t4", color=green];
// [Asm]   r60 [label="v41 ← a7", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r12 -- r25;
// [Asm]   r18 -- r49;
// [Asm]   r2 -- r31;
// [Asm]   r3 -- r52;
// [Asm]   r6 -- r48;
// [Asm]   r16 -- r20;
// [Asm]   r10 -- r53;
// [Asm]   r9 -- r53;
// [Asm]   r3 -- r15;
// [Asm]   r23 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r12 -- r57;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r18 -- r57;
// [Asm]   r7 -- r25;
// [Asm]   r35 -- r42;
// [Asm]   r23 -- r56;
// [Asm]   r3 -- r9;
// [Asm]   r25 -- r57;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r2 -- r51;
// [Asm]   r11 -- r55;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r32;
// [Asm]   r4 -- r57;
// [Asm]   r11 -- r19;
// [Asm]   r1 -- r50;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r34;
// [Asm]   r9 -- r56;
// [Asm]   r18 -- r59;
// [Asm]   r25 -- r48;
// [Asm]   r1 -- r9;
// [Asm]   r22 -- r25;
// [Asm]   r20 -- r22;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r8 -- r16;
// [Asm]   r1 -- r48;
// [Asm]   r2 -- r48;
// [Asm]   r10 -- r18;
// [Asm]   r21 -- r48;
// [Asm]   r10 -- r33;
// [Asm]   r35 -- r38;
// [Asm]   r25 -- r49;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r12 -- r54;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r12 -- r58;
// [Asm]   r5 -- r60;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r8 -- r59;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r12 -- r43;
// [Asm]   r14 -- r59;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r51;
// [Asm]   r35 -- r37;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r23 -- r55;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r14 -- r54;
// [Asm]   r6 -- r56;
// [Asm]   r24 -- r25;
// [Asm]   r40 -- r42;
// [Asm]   r6 -- r25;
// [Asm]   r14 -- r49;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r23 -- r50;
// [Asm]   r12 -- r34;
// [Asm]   r42 -- r44;
// [Asm]   r19 -- r48;
// [Asm]   r20 -- r52;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r2 -- r50;
// [Asm]   r5 -- r19;
// [Asm]   r21 -- r57;
// [Asm]   r6 -- r53;
// [Asm]   r11 -- r23;
// [Asm]   r13 -- r48;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r43 -- r45;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r11 -- r51;
// [Asm]   r16 -- r18;
// [Asm]   r12 -- r50;
// [Asm]   r6 -- r59;
// [Asm]   r13 -- r19;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r18 -- r51;
// [Asm]   r19 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r18 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r55;
// [Asm]   r12 -- r55;
// [Asm]   r7 -- r19;
// [Asm]   r38 -- r41;
// [Asm]   r2 -- r14;
// [Asm]   r11 -- r52;
// [Asm]   r14 -- r25;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r24;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r57;
// [Asm]   r13 -- r52;
// [Asm]   r15 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r15 -- r33;
// [Asm]   r5 -- r25;
// [Asm]   r35 -- r45;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r9 -- r58;
// [Asm]   r23 -- r59;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r10;
// [Asm]   r43 -- r44;
// [Asm]   r15 -- r19;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r56;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r6 -- r52;
// [Asm]   r20 -- r55;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r41 -- r45;
// [Asm]   r24 -- r51;
// [Asm]   r9 -- r25;
// [Asm]   r14 -- r20;
// [Asm]   r10 -- r60;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r22 -- r56;
// [Asm]   r22 -- r54;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r4 -- r58;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r32;
// [Asm]   r20 -- r56;
// [Asm]   r6 -- r54;
// [Asm]   r1 -- r17;
// [Asm]   r9 -- r31;
// [Asm]   r2 -- r16;
// [Asm]   r42 -- r43;
// [Asm]   r10 -- r47;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r60;
// [Asm]   r4 -- r22;
// [Asm]   r21 -- r54;
// [Asm]   r3 -- r18;
// [Asm]   r17 -- r33;
// [Asm]   r20 -- r58;
// [Asm]   r11 -- r53;
// [Asm]   r1 -- r31;
// [Asm]   r42 -- r45;
// [Asm]   r2 -- r59;
// [Asm]   r14 -- r19;
// [Asm]   r12 -- r52;
// [Asm]   r2 -- r54;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r56;
// [Asm]   r10 -- r20;
// [Asm]   r24 -- r59;
// [Asm]   r3 -- r30;
// [Asm]   r35 -- r44;
// [Asm]   r11 -- r48;
// [Asm]   r12 -- r28;
// [Asm]   r25 -- r52;
// [Asm]   r20 -- r59;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r11 -- r54;
// [Asm]   r9 -- r59;
// [Asm]   r3 -- r10;
// [Asm]   r12 -- r59;
// [Asm]   r4 -- r12;
// [Asm]   r24 -- r52;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r13 -- r57;
// [Asm]   r13 -- r22;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r10 -- r35;
// [Asm]   r4 -- r49;
// [Asm]   r24 -- r56;
// [Asm]   r7 -- r54;
// [Asm]   r16 -- r23;
// [Asm]   r12 -- r53;
// [Asm]   r24 -- r50;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r13 -- r24;
// [Asm]   r23 -- r57;
// [Asm]   r19 -- r57;
// [Asm]   r7 -- r52;
// [Asm]   r4 -- r16;
// [Asm]   r20 -- r24;
// [Asm]   r6 -- r11;
// [Asm]   r9 -- r57;
// [Asm]   r9 -- r60;
// [Asm]   r23 -- r49;
// [Asm]   r36 -- r44;
// [Asm]   r8 -- r56;
// [Asm]   r11 -- r57;
// [Asm]   r6 -- r49;
// [Asm]   r1 -- r23;
// [Asm]   r12 -- r51;
// [Asm]   r1 -- r53;
// [Asm]   r5 -- r48;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r11 -- r49;
// [Asm]   r16 -- r19;
// [Asm]   r8 -- r43;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r41;
// [Asm]   r2 -- r55;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r22 -- r24;
// [Asm]   r9 -- r51;
// [Asm]   r8 -- r54;
// [Asm]   r25 -- r55;
// [Asm]   r25 -- r58;
// [Asm]   r12 -- r42;
// [Asm]   r19 -- r56;
// [Asm]   r2 -- r57;
// [Asm]   r10 -- r28;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r15 -- r17;
// [Asm]   r7 -- r60;
// [Asm]   r5 -- r24;
// [Asm]   r8 -- r52;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r25 -- r59;
// [Asm]   r1 -- r59;
// [Asm]   r12 -- r49;
// [Asm]   r21 -- r25;
// [Asm]   r10 -- r23;
// [Asm]   r11 -- r50;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r47;
// [Asm]   r7 -- r11;
// [Asm]   r18 -- r48;
// [Asm]   r13 -- r53;
// [Asm]   r4 -- r47;
// [Asm]   r19 -- r52;
// [Asm]   r12 -- r30;
// [Asm]   r40 -- r41;
// [Asm]   r8 -- r58;
// [Asm]   r20 -- r49;
// [Asm]   r9 -- r32;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r11 -- r58;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r12 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r3 -- r54;
// [Asm]   r11 -- r27;
// [Asm]   r1 -- r3;
// [Asm]   r23 -- r48;
// [Asm]   r0 -- r7;
// [Asm]   r9 -- r54;
// [Asm]   r10 -- r21;
// [Asm]   r37 -- r41;
// [Asm]   r9 -- r50;
// [Asm]   r4 -- r52;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r3 -- r44;
// [Asm]   r14 -- r51;
// [Asm]   r4 -- r53;
// [Asm]   r12 -- r60;
// [Asm]   r8 -- r31;
// [Asm]   r7 -- r51;
// [Asm]   r2 -- r32;
// [Asm]   r12 -- r29;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r4 -- r34;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r57;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r59;
// [Asm]   r14 -- r57;
// [Asm]   r13 -- r32;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r22 -- r52;
// [Asm]   r5 -- r59;
// [Asm]   r25 -- r54;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r22 -- r59;
// [Asm]   r13 -- r31;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r9 -- r49;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r23 -- r53;
// [Asm]   r2 -- r34;
// [Asm]   r8 -- r45;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r20 -- r23;
// [Asm]   r18 -- r56;
// [Asm]   r2 -- r25;
// [Asm]   r6 -- r60;
// [Asm]   r2 -- r6;
// [Asm]   r22 -- r53;
// [Asm]   r14 -- r53;
// [Asm]   r5 -- r57;
// [Asm]   r11 -- r13;
// [Asm]   r13 -- r55;
// [Asm]   r10 -- r45;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r24 -- r58;
// [Asm]   r24 -- r57;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r18 -- r54;
// [Asm]   r2 -- r12;
// [Asm]   r23 -- r54;
// [Asm]   r8 -- r48;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r50;
// [Asm]   r23 -- r58;
// [Asm]   r41 -- r42;
// [Asm]   r13 -- r58;
// [Asm]   r4 -- r56;
// [Asm]   r21 -- r50;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r3 -- r49;
// [Asm]   r16 -- r21;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r25 -- r51;
// [Asm]   r17 -- r31;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r16 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r17 -- r34;
// [Asm]   r14 -- r15;
// [Asm]   r8 -- r30;
// [Asm]   r24 -- r53;
// [Asm]   r10 -- r59;
// [Asm]   r18 -- r24;
// [Asm]   r20 -- r51;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r13 -- r15;
// [Asm]   r20 -- r53;
// [Asm]   r37 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r25 -- r53;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r6 -- r33;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r22;
// [Asm]   r2 -- r52;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r48;
// [Asm]   r7 -- r48;
// [Asm]   r21 -- r56;
// [Asm]   r19 -- r58;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r35 -- r41;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r58;
// [Asm]   r21 -- r23;
// [Asm]   r10 -- r51;
// [Asm]   r9 -- r52;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r14 -- r50;
// [Asm]   r3 -- r57;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r20 -- r48;
// [Asm]   r4 -- r15;
// [Asm]   r35 -- r43;
// [Asm]   r12 -- r41;
// [Asm]   r23 -- r25;
// [Asm]   r12 -- r13;
// [Asm]   r12 -- r33;
// [Asm]   r22 -- r55;
// [Asm]   r10 -- r43;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r41 -- r44;
// [Asm]   r13 -- r23;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r11 -- r59;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r21 -- r59;
// [Asm]   r6 -- r57;
// [Asm]   r18 -- r58;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r24 -- r55;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r5 -- r56;
// [Asm]   r41 -- r43;
// [Asm]   r11 -- r34;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r7 -- r57;
// [Asm]   r10 -- r54;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r9 -- r48;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r19 -- r25;
// [Asm]   r20 -- r21;
// [Asm]   r7 -- r14;
// [Asm]   r1 -- r54;
// [Asm]   r8 -- r50;
// [Asm]   r18 -- r23;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r8 -- r57;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r14 -- r16;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r21 -- r53;
// [Asm]   r18 -- r55;
// [Asm]   r1 -- r4;
// [Asm]   r19 -- r51;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r3 -- r60;
// [Asm]   r14 -- r55;
// [Asm]   r13 -- r49;
// [Asm]   r11 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r2 -- r10;
// [Asm]   r7 -- r53;
// [Asm]   r25 -- r56;
// [Asm]   r11 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r13 -- r50;
// [Asm]   r23 -- r52;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r22 -- r50;
// [Asm]   r12 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r37 -- r42;
// [Asm]   r18 -- r50;
// [Asm]   r4 -- r21;
// [Asm]   r35 -- r39;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r10 -- r49;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r12 -- r44;
// [Asm]   r2 -- r33;
// [Asm]   r7 -- r55;
// [Asm]   r8 -- r17;
// [Asm]   r18 -- r52;
// [Asm]   r14 -- r56;
// [Asm]   r54 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r5 -- r53;
// [Asm]   r13 -- r54;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r13 -- r51;
// [Asm]   r1 -- r27;
// [Asm]   r36 -- r42;
// [Asm]   r14 -- r52;
// [Asm]   r6 -- r31;
// [Asm]   r22 -- r58;
// [Asm]   r8 -- r44;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r50;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r44;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r10 -- r55;
// [Asm]   r25 -- r50;
// [Asm]   r36 -- r41;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r16 -- r22;
// [Asm]   r2 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r13 -- r60;
// [Asm]   r6 -- r9;
// [Asm]   r12 -- r45;
// [Asm]   r17 -- r18;
// [Asm]   r1 -- r58;
// [Asm]   r24 -- r48;
// [Asm]   r19 -- r55;
// [Asm]   r4 -- r24;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r19 -- r54;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r7 -- r45;
// [Asm]   r9 -- r15;
// [Asm]   r14 -- r58;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r24 -- r49;
// [Asm]   r22 -- r57;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r6 -- r51;
// [Asm]   r5 -- r52;
// [Asm]   r24 -- r54;
// [Asm]   r8 -- r55;
// [Asm]   r19 -- r24;
// [Asm]   r12 -- r56;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r33;
// [Asm]   r14 -- r24;
// [Asm]   r18 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r10 -- r34;
// [Asm]   r8 -- r49;
// [Asm]   r22 -- r49;
// [Asm]   r4 -- r60;
// [Asm]   r20 -- r25;
// [Asm]   r13 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r13 -- r56;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r21 -- r52;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r10 -- r50;
// [Asm]   r19 -- r53;
// [Asm]   r11 -- r33;
// [Asm]   r13 -- r34;
// [Asm]   r18 -- r19;
// [Asm]   r19 -- r23;
// [Asm]   r19 -- r49;
// [Asm]   r8 -- r13;
// [Asm]   r12 -- r31;
// [Asm]   r15 -- r21;
// [Asm]   r2 -- r56;
// [Asm]   r10 -- r44;
// [Asm]   r10 -- r52;
// [Asm]   r20 -- r57;
// [Asm]   r35 -- r40;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r51;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r9 -- r55;
// [Asm]   r20 -- r54;
// [Asm]   r7 -- r58;
// [Asm]   r22 -- r48;
// [Asm]   r3 -- r59;
// [Asm]   r36 -- r43;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r48;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r14;
// [Asm]   r21 -- r55;
// [Asm]   r2 -- r19;
// [Asm]   r17 -- r32;
// [Asm]   r15 -- r16;
// [Asm]   r22 -- r51;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r48;
// [Asm]   r10 -- r24;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v42-> 1:v11-> 2:v21-> 3:v10-> 4:v13-> 6:v17-> 8:v9-> 10:zero-> 5:v22-> 7:v12-> 9:v18-> 11:v20-> 12:v8-> 13:v19-> 15:v28-> 16:v29-> 17:v27-> 14:v30-> 18:v31-> 19:v32-> 20:v33-> 21:v34-> 22:v35-> 23:v36-> 24:v37-> 25:v38-> 48:v64-> 49:v65-> 50:v61-> 51:v62-> 52:v58-> 53:v59-> 54:v45-> 55:v55-> 56:v56-> 57:v52-> 58:v53-> 59:v50-> 33:v68-> 34:v69-> 31:v71-> 32:v72-> 60:v41-> 27:v40-> 29:v16-> 28:v25-> 30:v24-> 45:v7-> 44:v6-> 43:v5-> 42:v4-> 41:v3-> 35:v2-> 47:v26-> 36:a5-> 37:a4-> 40:a3-> 38:a2-> 39:a1-> 26:a0-> 46:v15"
// [Asm]   comment = "v42<-a0;v15<-a0;v68<-t0;v50<-t1;v18<-a6;v26<-a0;v17<-a5;v6<-a2;v19<-a0;v4<-a7;v59<-s2;v13<-a4;v16<-a0;v2<-t0;v56<-s2;v12<-a2;v9<-a6;v22<-a4;v45<-s2;v28<-a7;v37<-s1;v72<-a7;v65<-s2;v52<-s2;v5<-a1;v71<-a7;v27<-t1;v58<-s2;v8<-a5;v64<-s2;v33<-t3;v36<-a7;v10<-a3;v40<-a7;v11<-a1;v3<-a6;v25<-a0;v20<-a1;v53<-s2;v69<-t0;v35<-s0;v30<-t2;v61<-s2;v24<-a0;v62<-s2;v7<-a0;v38<-t0;v55<-s3;v21<-a2;v29<-t0;v31<-a0;v32<-t1;v34<-t4;v41<-a7;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop148l2_2"];
// [Asm]   r0 [label="fv43 ← fa0", color=green];
// [Asm]   r2 [label="fv46 ← fa2", color=green];
// [Asm]   r1 [label="fv44 ← fa1", color=green];
// [Asm]   r3 [label="fv48 ← fa0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv43-> 1:fv44-> 2:fv46-> 3:fv48"
// [Asm]   comment = "fv43<-fa0;fv46<-fa2;fv44<-fa1;fv48<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v42, v19, -1 ->   addi a0, a0, -1
// [Asm] subst   j .loop148l2_2_7 ->   j .loop148l2_2_7
// [Asm] subst   mv v30, v17 ->   mv t2, a5
// [Asm] subst   mv v33, v20 ->   mv t3, a1
// [Asm] subst   mv v34, v21 ->   mv t4, a2
// [Asm] subst   mv v35, v22 ->   mv s0, a4
// [Asm] subst   mv v37, v28 ->   mv s1, a7
// [Asm] subst   ret ->   ret
// [Asm] subst   blt v19, zero, .loop148l2_2_9 ->   blt a0, zero, .loop148l2_2_9
// [Asm] subst   blt v8, zero, .loop148l2_2_2 ->   blt a5, zero, .loop148l2_2_2
// [Asm] subst   mv v40, zero ->   mv a7, zero
// [Asm] subst   addi v16, v10, -1 ->   addi a0, a3, -1
// [Asm] subst   blt v32, zero, .loop148l2_2_16 ->   blt t1, zero, .loop148l2_2_16
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   addi v27, v18, -1 ->   addi t1, a6, -1
// [Asm] subst   slliw v71, v17, 3 ->   slliw a7, a5, 3
// [Asm] subst   add v72, v22, v71 ->   add a7, a4, a7
// [Asm] subst   ld v28, 0(v72) ->   ld a7, 0(a7)
// [Asm] subst   slliw v68, v17, 3 ->   slliw t0, a5, 3
// [Asm] subst   add v69, v20, v68 ->   add t0, a1, t0
// [Asm] subst   ld v29, 0(v69) ->   ld t0, 0(t0)
// [Asm] subst   mv v2, a0 ->   mv t0, a0
// [Asm] subst   mv v3, a1 ->   mv a6, a1
// [Asm] subst   mv v4, a2 ->   mv a7, a2
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, a4 ->   mv a2, a4
// [Asm] subst   mv v7, a5 ->   mv a0, a5
// [Asm] subst   mv v8, v2 ->   mv a5, t0
// [Asm] subst   mv v10, v4 ->   mv a3, a7
// [Asm] subst   mv v13, v7 ->   mv a4, a0
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   addi v26, v8, -1 ->   addi a0, a5, -1
// [Asm] subst   mv v8, v26 ->   mv a5, a0
// [Asm] subst   j .loop148l2_2_0 ->   j .loop148l2_2_0
// [Asm] subst   slliw v64, v31, 3 ->   slliw s2, a0, 3
// [Asm] subst   add v65, v37, v64 ->   add s2, s1, s2
// [Asm] subst   fld fv43, 0(v65) ->   fld fa0, 0(s2)
// [Asm] subst   slliw v61, v32, 3 ->   slliw s2, t1, 3
// [Asm] subst   add v62, v38, v61 ->   add s2, t0, s2
// [Asm] subst   fld fv44, 0(v62) ->   fld fa1, 0(s2)
// [Asm] subst   slliw v58, v32, 3 ->   slliw s2, t1, 3
// [Asm] subst   add v59, v34, v58 ->   add s2, t4, s2
// [Asm] subst   ld v45, 0(v59) ->   ld s2, 0(s2)
// [Asm] subst   slliw v55, v31, 3 ->   slliw s3, a0, 3
// [Asm] subst   add v56, v45, v55 ->   add s2, s2, s3
// [Asm] subst   fld fv46, 0(v56) ->   fld fa2, 0(s2)
// [Asm] subst   fmadd.d fv48, fv44, fv46, fv43 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v52, v31, 3 ->   slliw s2, a0, 3
// [Asm] subst   add v53, v36, v52 ->   add s2, a7, s2
// [Asm] subst   fsd fv48, 0(v53) ->   fsd fa0, 0(s2)
// [Asm] subst   addi v50, v32, -1 ->   addi t1, t1, -1
// [Asm] subst   j .loop148l2_2_14 ->   j .loop148l2_2_14
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, Insn(iref=%3) -> v13, Mem(fref=f3, mref=m0) -> v5, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v8, Self(fref=f3) -> v0, Insn(iref=%0) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v7, v8, v6, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v7, s11, zero, v13, v8]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v13]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr89l4_3"];
// [Asm]   r0 [label="v17 ← a0", color=green];
// [Asm]   r3 [label="v8 ← a2", color=green];
// [Asm]   r9 [label="v16 ← a4", color=green];
// [Asm]   r6 [label="v5 ← a0", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v6 ← a3", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="v10 ← a0", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v13 ← a0", color=green];
// [Asm]   r14 [label="v3 ← a1", color=green];
// [Asm]   r8 [label="v15 ← a4", color=green];
// [Asm]   r5 [label="s11", color=blue];
// [Asm]   r15 [label="v4 ← a0", color=green];
// [Asm]   r2 [label="v7 ← a1", color=green];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v2 ← a3", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r12 -- r15;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r14;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r14 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r5 -- r15;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v17-> 1:zero-> 2:v7-> 3:v8-> 4:v6-> 5:s11-> 6:v5-> 8:v15-> 9:v16-> 7:a1-> 10:v13-> 15:v4-> 12:v2-> 14:v3-> 13:a2-> 11:v10-> 16:a0"
// [Asm]   comment = "v17<-a0;v8<-a2;v16<-a4;v5<-a0;v6<-a3;v10<-a0;v13<-a0;v3<-a1;v15<-a4;v4<-a0;v7<-a1;v2<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr89l4_3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v17, v7, 3 ->   slliw a0, a1, 3
// [Asm] subst   sub v5, s11, v17 ->   sub a0, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   slliw v15, v6, 3 ->   slliw a4, a3, 3
// [Asm] subst   add v16, v8, v15 ->   add a4, a2, a4
// [Asm] subst   sd v5, 0(v16) ->   sd a0, 0(a4)
// [Asm] subst   addi v13, v6, -1 ->   addi a0, a3, -1
// [Asm] subst   mv v6, v13 ->   mv a3, a0
// [Asm] subst   j .init_arr89l4_3_0 ->   j .init_arr89l4_3_0
// [Asm] subst   blt v6, zero, .init_arr89l4_3_2 ->   blt a3, zero, .init_arr89l4_3_2
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v2, a0 ->   mv a3, a0
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v8, v4 ->   mv a2, a0
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main85l3_5:
// [Asm] # block info: defs: [v100, v2, v76, fv86, v91, v79, fv39, fv89, a1, s11, fa1, fv80, v33, fv95, v51, fv92, v82, fa2, ft6, a4, fa6, v27, v50, a6, ft10, ft5, v6, v117, fv83, fv77, ft4, v5, ft9, fa4, ft2, v37, v17, v43, fv104, a3, v31, a7, fa7, v48, fa3, fv110, ft3, fv34, v45, t2, v40, v25, t1, v13, v42, v7, ft0, ft1, v32, v41, fv107, v115, v109, v106, fv98, v97, v29, v103, v19, v4, v47, v74, ft7, v11, v71, v46, v21, a5, a0, v36, v88, a2, v114, fv101, v9, ft8, v118, t3, t0, v112, v94, v72, fa5, v23, v85, fa0, v35, t4, v38, fv49, v15, fv44], uses: [v2, fv86, v91, v79, fv39, fv89, a1, s11, fv80, v33, fv95, fv92, v82, v27, a4, v50, v6, v117, fv83, fv77, v5, v17, v43, a3, fv104, v31, v48, fv110, fv34, v45, v40, v25, v13, v7, fv107, v115, v109, v106, fv98, v97, v29, zero, v19, v103, v4, v74, v11, v71, v21, a5, a0, v88, a2, v114, fv101, v9, v118, v112, v94, v72, v23, v85, v35, v38, fv49, v15, fv44, v100, v76], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main85l3_5_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v117, 2  # live: [zero, v117, v2]
// [Asm]   mv a0, v117  # live: [zero, a0, v2]
// [Asm]   li v118, 3  # live: [v118, zero, a0, v2]
// [Asm]   mv a1, v118  # live: [zero, a0, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, a2, a1, v2]
// [Asm]   call make_arr103l5_4  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [zero, v4, v2]
// [Asm]   # save_ctx2  # live: [zero, v4, v2]
// [Asm]   li v114, 3  # live: [zero, v4, v114, v2]
// [Asm]   mv a0, v114  # live: [zero, a0, v4, v2]
// [Asm]   li v115, 2  # live: [v115, zero, a0, v4, v2]
// [Asm]   mv a1, v115  # live: [zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v4, a2, a1, v2]
// [Asm]   call make_arr103l5_4  # live: [zero, a0, v4, v2]
// [Asm]   mv v5, a0  # live: [v5, zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   li v112, 2  # live: [v112, v5, zero, v4, v2]
// [Asm]   mv a0, v112  # live: [v112, v5, zero, a0, v4, v2]
// [Asm]   mv a1, v112  # live: [v5, zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, v4, a2, a1]
// [Asm]   call make_arr103l5_4  # live: [v5, zero, a0, v4]
// [Asm]   mv v6, a0  # live: [v5, zero, v4, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   ld v7, 0(v4)  # live: [v5, zero, v7, v4, v6]
// [Asm]   li v109, 4607182418800017408  # live: [v109, v5, zero, v7, v4, v6]
// [Asm]   fmv.d.x fv110, v109  # live: [v5, zero, fv110, v7, v4, v6]
// [Asm]   fsd fv110, 0(v7)  # live: [v5, zero, v4, v6]
// [Asm]   ld v9, 0(v4)  # live: [v5, zero, v4, v6, v9]
// [Asm]   li v106, 4611686018427387904  # live: [v106, v5, zero, v4, v6, v9]
// [Asm]   fmv.d.x fv107, v106  # live: [v5, zero, v4, v6, fv107, v9]
// [Asm]   fsd fv107, 8(v9)  # live: [v5, zero, v4, v6]
// [Asm]   ld v11, 0(v4)  # live: [v11, v5, zero, v4, v6]
// [Asm]   li v103, 4613937818241073152  # live: [v11, v5, zero, v103, v4, v6]
// [Asm]   fmv.d.x fv104, v103  # live: [v11, v5, zero, v4, v6, fv104]
// [Asm]   fsd fv104, 16(v11)  # live: [v5, zero, v4, v6]
// [Asm]   ld v13, 8(v4)  # live: [v5, zero, v13, v4, v6]
// [Asm]   li v100, 4616189618054758400  # live: [v5, zero, v13, v4, v6, v100]
// [Asm]   fmv.d.x fv101, v100  # live: [v5, zero, v13, v4, fv101, v6]
// [Asm]   fsd fv101, 0(v13)  # live: [v5, zero, v4, v6]
// [Asm]   ld v15, 8(v4)  # live: [v5, zero, v4, v6, v15]
// [Asm]   li v97, 4617315517961601024  # live: [v5, zero, v97, v4, v6, v15]
// [Asm]   fmv.d.x fv98, v97  # live: [fv98, v5, zero, v4, v6, v15]
// [Asm]   fsd fv98, 8(v15)  # live: [v5, zero, v4, v6]
// [Asm]   ld v17, 8(v4)  # live: [v5, zero, v4, v6, v17]
// [Asm]   li v94, 4618441417868443648  # live: [v94, v5, zero, v4, v6, v17]
// [Asm]   fmv.d.x fv95, v94  # live: [v5, zero, v4, v6, v17, fv95]
// [Asm]   fsd fv95, 16(v17)  # live: [v5, zero, v4, v6]
// [Asm]   ld v19, 0(v5)  # live: [v5, zero, v19, v4, v6]
// [Asm]   li v91, 4619567317775286272  # live: [v5, v91, zero, v19, v4, v6]
// [Asm]   fmv.d.x fv92, v91  # live: [v5, fv92, zero, v19, v4, v6]
// [Asm]   fsd fv92, 0(v19)  # live: [v5, zero, v4, v6]
// [Asm]   ld v21, 0(v5)  # live: [v5, v21, zero, v4, v6]
// [Asm]   li v88, 4620693217682128896  # live: [v5, v21, zero, v88, v4, v6]
// [Asm]   fmv.d.x fv89, v88  # live: [v5, v21, zero, fv89, v4, v6]
// [Asm]   fsd fv89, 8(v21)  # live: [v5, zero, v4, v6]
// [Asm]   ld v23, 8(v5)  # live: [v5, zero, v23, v4, v6]
// [Asm]   li v85, 4621256167635550208  # live: [v5, zero, v23, v85, v4, v6]
// [Asm]   fmv.d.x fv86, v85  # live: [fv86, v5, zero, v23, v4, v6]
// [Asm]   fsd fv86, 0(v23)  # live: [v5, zero, v4, v6]
// [Asm]   ld v25, 8(v5)  # live: [v25, v5, zero, v4, v6]
// [Asm]   li v82, 4621819117588971520  # live: [v25, v5, v82, zero, v4, v6]
// [Asm]   fmv.d.x fv83, v82  # live: [v25, v5, zero, v4, v6, fv83]
// [Asm]   fsd fv83, 8(v25)  # live: [v5, zero, v4, v6]
// [Asm]   ld v27, 16(v5)  # live: [v5, zero, v27, v4, v6]
// [Asm]   li v79, 4622382067542392832  # live: [v5, zero, v79, v27, v4, v6]
// [Asm]   fmv.d.x fv80, v79  # live: [v5, zero, v27, v4, v6, fv80]
// [Asm]   fsd fv80, 0(v27)  # live: [v5, zero, v4, v6]
// [Asm]   ld v29, 16(v5)  # live: [v5, zero, v29, v4, v6]
// [Asm]   li v76, 4622945017495814144  # live: [v5, zero, v29, v4, v6, v76]
// [Asm]   fmv.d.x fv77, v76  # live: [v5, zero, v29, v4, v6, fv77]
// [Asm]   fsd fv77, 8(v29)  # live: [v5, zero, v4, v6]
// [Asm]   li v74, 2  # live: [v5, zero, v4, v6, v74]
// [Asm]   addi v31, v74, -1  # live: [v5, zero, v4, v6, v31]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v6, v31]
// [Asm]   mv a0, v31  # live: [v5, zero, a0, v4, v6]
// [Asm]   li v71, 3  # live: [v5, v71, zero, a0, v4, v6]
// [Asm]   mv a1, v71  # live: [v5, zero, a0, v4, a1, v6]
// [Asm]   li v72, 2  # live: [v72, v5, zero, a0, v4, a1, v6]
// [Asm]   mv a2, v72  # live: [v5, zero, a0, a2, v4, a1, v6]
// [Asm]   mv a3, v4  # live: [v5, zero, a0, a2, v6, a1, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, v6, a1, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm]   call loop148l2_2  # live: [v6, zero, a0]
// [Asm]   mv v32, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v33, 0(v6)  # live: [v6, zero, v33]
// [Asm]   fld fv34, 0(v33)  # live: [v6, zero, fv34]
// [Asm]   fcvt.w.d v35, fv34, rtz  # live: [v6, zero, v35]
// [Asm]   # save_ctx2  # live: [v6, zero, v35]
// [Asm]   mv a0, v35  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v36, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v37, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v38, 0(v6)  # live: [v38, v6, zero]
// [Asm]   fld fv39, 8(v38)  # live: [v6, zero, fv39]
// [Asm]   fcvt.w.d v40, fv39, rtz  # live: [v6, zero, v40]
// [Asm]   # save_ctx2  # live: [v6, zero, v40]
// [Asm]   mv a0, v40  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v41, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v42, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v43, 8(v6)  # live: [v6, v43, zero]
// [Asm]   fld fv44, 0(v43)  # live: [v6, fv44, zero]
// [Asm]   fcvt.w.d v45, fv44, rtz  # live: [v6, zero, v45]
// [Asm]   # save_ctx2  # live: [v6, zero, v45]
// [Asm]   mv a0, v45  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v46, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v47, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v48, 8(v6)  # live: [v48, zero]
// [Asm]   fld fv49, 8(v48)  # live: [fv49, zero]
// [Asm]   fcvt.w.d v50, fv49, rtz  # live: [zero, v50]
// [Asm]   # save_ctx2  # live: [zero, v50]
// [Asm]   mv a0, v50  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v51, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_12:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_12_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main85l3_5  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] make_arr103l5_4:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, v5, a0, v7, a2, v4, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .make_arr103l5_4_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, v3]
// [Asm]   slliw v11, v2, 3  # live: [v2, v11, v4, s11, v3]
// [Asm]   sub v5, s11, v11  # live: [v2, v4, v5, v3]
// [Asm]   andi s11, v5, -8  # live: [v2, v4, v5, v3]
// [Asm]   mv a1, v2  # live: [v2, v4, v5, a1, v3]
// [Asm]   mv a0, v5  # live: [v2, v4, v5, a1, a0, v3]
// [Asm]   mv a2, v4  # live: [v2, a2, v5, a1, a0, v3]
// [Asm]   call memseti64  # live: [v2, v5, v3]
// [Asm]   addi v7, v2, -1  # live: [v7, v5, v3]
// [Asm]   # save_ctx2  # live: [v7, v5, v3]
// [Asm]   mv a0, v7  # live: [v5, a0, v3]
// [Asm]   mv a1, v3  # live: [v5, a1, a0]
// [Asm]   mv a2, v5  # live: [a2, v5, a1, a0]
// [Asm]   call init_arr89l4_3  # live: [v5, a0]
// [Asm]   mv v8, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_12  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_arr89l4_3:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, zero], upward_exposed: [v6, zero], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .init_arr89l4_3_0:
// [Asm] # control
// [Asm]   blt v6, zero, .init_arr89l4_3_2  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v5, v16, v13, v17, a1, v6, s11, v15], uses: [v5, v16, v13, v8, v7, v17, v6, s11, v15], upward_exposed: [v8, v6, s11, v7], params_defs: []
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_1:
// [Asm]   slliw v17, v7, 3  # live: [zero, v7, v8, v6, v17, s11]
// [Asm]   sub v5, s11, v17  # live: [v5, zero, v7, v8, v6]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v7, v8, v6, s11]
// [Asm]   mv a1, v7  # live: [v5, zero, v7, v8, v6, s11]
// [Asm]   slliw v15, v6, 3  # live: [v5, zero, v7, v8, v6, s11, v15]
// [Asm]   add v16, v8, v15  # live: [v5, v16, zero, v7, v8, v6, s11]
// [Asm]   sd v5, 0(v16)  # live: [v7, v6, s11, zero, v8]
// [Asm]   addi v13, v6, -1  # live: [v7, s11, zero, v13, v8]
// [Asm] # control
// [Asm]   mv v6, v13  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, s11, zero, v8]
// [Asm]   j .init_arr89l4_3_0  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr89l4_3_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] loop148l2_2:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_5:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop148l2_2_0:
// [Asm] # control
// [Asm]   blt v8, zero, .loop148l2_2_2  # live: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_1:
// [Asm]   addi v16, v10, -1  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v19, v17, v18, v21, v20, v22], uses: [v11, v16, v12, v9, v13, v8], upward_exposed: [v11, v16, v12, v9, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v16, v10, v13, zero, v8, v12, v9], live_out: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_12:
// [Asm] # control
// [Asm]   mv v17, v8  # live: [v11, v16, v10, v13, zero, v8, v17, v12, v9]
// [Asm]   mv v18, v9  # live: [v11, v16, v10, v18, v13, zero, v8, v17, v12, v9]
// [Asm]   mv v19, v16  # live: [v11, v10, v18, v13, zero, v8, v19, v17, v12, v9]
// [Asm]   mv v20, v11  # live: [v11, v10, v18, v13, zero, v20, v8, v19, v17, v12, v9]
// [Asm]   mv v21, v12  # live: [v11, v21, v10, v18, v13, zero, v20, v8, v19, v17, v12, v9]
// [Asm]   mv v22, v13  # live: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v19, zero], upward_exposed: [v19, zero], params_defs: [v19, v17, v18, v21, v20, v22]
// [Asm] # live_in: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19], live_out: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] # block parameters: [v17, v18, v19, v20, v21, v22]
// [Asm] .loop148l2_2_7:
// [Asm] # control
// [Asm]   blt v19, zero, .loop148l2_2_9  # live: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v72, v71, v69, v68, v29, v27, v28], uses: [v72, v71, v69, v18, v68, v22, v20, v17], upward_exposed: [v17, v18, v22, v20], params_defs: []
// [Asm] # live_in: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19], live_out: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v29, v27, v20, v8, v19]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_8:
// [Asm]   addi v27, v18, -1  # live: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v27, v8, v19]
// [Asm]   slliw v71, v17, 3  # live: [v11, v71, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v27, v8, v19]
// [Asm]   add v72, v22, v71  # live: [v11, v21, v10, v13, v22, v17, v12, v9, v72, v18, zero, v20, v27, v8, v19]
// [Asm]   ld v28, 0(v72)  # live: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v20, v27, v8, v19]
// [Asm]   slliw v68, v17, 3  # live: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v68, v20, v27, v8, v19]
// [Asm]   add v69, v20, v68  # live: [v11, v69, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v27, v20, v8, v19]
// [Asm]   ld v29, 0(v69)  # live: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v29, v27, v20, v8, v19]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v30, v35, v36, v32, v37, v38, v31, v33, v34], uses: [v21, v29, v22, v27, v20, v19, v17, v28], upward_exposed: [v21, v29, v22, v27, v20, v19, v17, v28], params_defs: []
// [Asm] # live_in: [v11, v21, v10, v13, v22, v17, v12, v28, v9, v18, zero, v29, v20, v27, v8, v19], live_out: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_19:
// [Asm] # control
// [Asm]   mv v30, v17  # live: [v11, v21, v10, v13, v30, v22, v17, v12, v28, v9, v18, zero, v29, v20, v27, v8, v19]
// [Asm]   mv v31, v19  # live: [v11, v21, v10, v13, v30, v22, v17, v12, v31, v28, v9, v18, zero, v29, v20, v27, v8, v19]
// [Asm]   mv v32, v27  # live: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v18, zero, v29, v20, v8, v19]
// [Asm]   mv v33, v20  # live: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v19]
// [Asm]   mv v34, v21  # live: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v19, v34]
// [Asm]   mv v35, v22  # live: [v11, v21, v10, v13, v30, v22, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v35, v19, v34]
// [Asm]   mv v36, v28  # live: [v11, v21, v10, v13, v30, v22, v36, v32, v17, v12, v31, v28, v9, v33, v18, zero, v29, v20, v8, v35, v19, v34]
// [Asm]   mv v37, v28  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v29, v20, v8, v35, v19, v34]
// [Asm]   mv v38, v29  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v32, zero], upward_exposed: [v32, zero], params_defs: [v30, v35, v36, v32, v37, v38, v31, v33, v34]
// [Asm] # live_in: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34], live_out: [v11, v21, v10, v13, v30, v22, v36, v32, v37, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] # block parameters: [v30, v31, v32, v33, v34, v35, v36, v37, v38]
// [Asm] .loop148l2_2_14:
// [Asm] # control
// [Asm]   blt v32, zero, .loop148l2_2_16  # live: [v11, v21, v10, v13, v30, v22, v36, v32, v37, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] 
// [Asm] # block info: defs: [v62, v58, v53, fv48, v65, v32, v52, v64, fv46, v56, fv43, v50, v45, v59, v61, fv44, v55], uses: [v62, v58, v53, v30, v36, fv48, v37, v65, v32, v52, v31, v64, v33, fv46, v56, fv43, v50, v45, v35, v59, v38, v61, fv44, v55, v34], upward_exposed: [v30, v36, v35, v37, v32, v38, v31, v34, v33], params_defs: []
// [Asm] # live_in: [v11, v21, v10, v13, v30, v22, v36, v32, v37, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34], live_out: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_15:
// [Asm]   slliw v64, v31, 3  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v9, v33, v64, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   add v65, v37, v64  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v65, v17, v12, v31, v9, v33, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   fld fv43, 0(v65)  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v34]
// [Asm]   slliw v61, v32, 3  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v61, v34]
// [Asm]   add v62, v38, v61  # live: [v11, v62, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v34]
// [Asm]   fld fv44, 0(v62)  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm]   slliw v58, v32, 3  # live: [v11, v58, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm]   add v59, v34, v58  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v19, v38, v59, fv44, v34]
// [Asm]   ld v45, 0(v59)  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v45, v19, v38, fv44, v34]
// [Asm]   slliw v55, v31, 3  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, fv43, v35, v8, v45, v19, v38, fv44, v34, v55]
// [Asm]   add v56, v45, v55  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, v18, v56, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm]   fld fv46, 0(v56)  # live: [v11, v21, v10, v13, v22, v30, v36, v37, v32, v17, v12, v31, v33, v9, fv46, v18, zero, v20, fv43, v35, v8, v19, v38, fv44, v34]
// [Asm]   fmadd.d fv48, fv44, fv46, fv43  # live: [v11, v21, v10, v13, v22, v30, v36, fv48, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm]   slliw v52, v31, 3  # live: [v11, v21, v10, v13, v22, v30, v36, fv48, v37, v32, v17, v12, v52, v31, v33, v9, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm]   add v53, v36, v52  # live: [v11, v21, v10, v53, v13, v22, v30, v36, fv48, v37, v32, v17, v12, v31, v9, v33, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm]   fsd fv48, 0(v53)  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v9, v33, v18, zero, v20, v8, v35, v19, v38, v34]
// [Asm]   addi v50, v32, -1  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v17, v12, v31, v33, v9, v18, zero, v20, v50, v8, v35, v19, v38, v34]
// [Asm] # control
// [Asm]   mv v30, v30  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v17, v12, v31, v33, v9, v18, zero, v20, v50, v8, v35, v19, v38, v34]
// [Asm]   mv v31, v31  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v17, v12, v31, v33, v9, v18, zero, v20, v50, v8, v35, v19, v38, v34]
// [Asm]   mv v32, v50  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   mv v33, v33  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   mv v34, v34  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   mv v35, v35  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   mv v36, v36  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   mv v37, v37  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   mv v38, v38  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm]   j .loop148l2_2_14  # live: [v11, v21, v10, v13, v30, v22, v36, v37, v32, v17, v12, v31, v33, v9, v18, zero, v20, v35, v8, v19, v38, v34]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop148l2_2_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v24, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_9:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v11, v10, v13, zero, v8, v24, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v24, v12, v9], live_out: [v25, v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v24]
// [Asm] .loop148l2_2_10:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25, v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v26, v8], uses: [v11, v10, v26, v13, v8, v12, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: [v25]
// [Asm] # live_in: [v25, v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v25]
// [Asm] .loop148l2_2_6:
// [Asm]   addi v26, v8, -1  # live: [v11, v10, v13, zero, v26, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v26  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop148l2_2_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v40], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19], live_out: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19, v40]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_16:
// [Asm] # control
// [Asm]   mv v40, zero  # live: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19, v40]
// [Asm] 
// [Asm] # block info: defs: [v41], uses: [v40], upward_exposed: [v40], params_defs: [v40]
// [Asm] # live_in: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19, v40], live_out: [v11, v21, v10, v13, v22, v41, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] # block parameters: [v40]
// [Asm] .loop148l2_2_17:
// [Asm] # control
// [Asm]   mv v41, v40  # live: [v11, v21, v10, v13, v22, v41, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] 
// [Asm] # block info: defs: [v19, v42], uses: [v18, v21, v42, v20, v22, v19, v17], upward_exposed: [v19, v17, v18, v21, v20, v22], params_defs: [v41]
// [Asm] # live_in: [v11, v21, v10, v13, v22, v41, v17, v12, v9, v18, zero, v20, v8, v19], live_out: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm] # block parameters: [v41]
// [Asm] .loop148l2_2_13:
// [Asm]   addi v42, v19, -1  # live: [v11, v21, v10, v13, v42, v22, v17, v12, v9, v18, zero, v20, v8]
// [Asm] # control
// [Asm]   mv v17, v17  # live: [v11, v21, v10, v13, v42, v22, v17, v12, v9, v18, zero, v20, v8]
// [Asm]   mv v18, v18  # live: [v11, v21, v10, v13, v42, v22, v17, v12, v9, v18, zero, v20, v8]
// [Asm]   mv v19, v42  # live: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v20, v20  # live: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v21, v21  # live: [v11, v21, v10, v13, v22, v17, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v22, v22  # live: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm]   j .loop148l2_2_7  # live: [v11, v21, v10, v18, v13, zero, v22, v20, v8, v19, v17, v12, v9]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(3), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(3), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("mul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main85l3_5
// [Main]   .type main85l3_5, @function
// [Main] # leaf false
// [Main] main85l3_5:
// [Main] .main85l3_5_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   call make_arr103l5_4
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   call make_arr103l5_4
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   call make_arr103l5_4
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   li a1, 3
// [Main]   li a2, 2
// [Main]   mv a3, s1
// [Main]   mv a4, s2
// [Main]   mv a5, s0
// [Main]   call loop148l2_2
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_12
// [Main]   .type T$start_12, @function
// [Main] # leaf false
// [Main] T$start_12:
// [Main] .T$start_12_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main85l3_5
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl make_arr103l5_4
// [Main]   .type make_arr103l5_4, @function
// [Main] # leaf false
// [Main] make_arr103l5_4:
// [Main] .make_arr103l5_4_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   slliw a0, s0, 3
// [Main]   sub s2, s11, a0
// [Main]   andi s11, s2, -8
// [Main]   mv a1, s0
// [Main]   mv a0, s2
// [Main]   call memseti64
// [Main]   addi a0, s0, -1
// [Main]   mv a1, s1
// [Main]   mv a2, s2
// [Main]   call init_arr89l4_3
// [Main]   mv a0, s2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_12
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr89l4_3
// [Main]   .type init_arr89l4_3, @function
// [Main] # leaf false
// [Main] init_arr89l4_3:
// [Main] .init_arr89l4_3_5:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a3, a0
// [Main]   mv a0, a2
// [Main]   mv a2, a0
// [Main] 
// [Main] .init_arr89l4_3_0:
// [Main]   blt a3, zero, .init_arr89l4_3_2
// [Main] 
// [Main] .init_arr89l4_3_1:
// [Main]   slliw a0, a1, 3
// [Main]   sub a0, s11, a0
// [Main]   andi s11, a0, -8
// [Main]   slliw a4, a3, 3
// [Main]   add a4, a2, a4
// [Main]   sd a0, 0(a4)
// [Main]   addi a0, a3, -1
// [Main]   mv a3, a0
// [Main]   j .init_arr89l4_3_0
// [Main] 
// [Main] .init_arr89l4_3_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr89l4_3_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop148l2_2
// [Main]   .type loop148l2_2, @function
// [Main] # leaf true
// [Main] loop148l2_2:
// [Main] .loop148l2_2_5:
// [Main]   addi sp, sp, -32
// [Main]   sd s0, 0(sp)
// [Main]   sd s1, 8(sp)
// [Main]   sd s2, 16(sp)
// [Main]   sd s3, 24(sp)
// [Main]   mv t0, a0
// [Main]   mv a6, a1
// [Main]   mv a7, a2
// [Main]   mv a1, a3
// [Main]   mv a2, a4
// [Main]   mv a0, a5
// [Main]   mv a5, t0
// [Main]   mv a3, a7
// [Main]   mv a4, a0
// [Main] 
// [Main] .loop148l2_2_0:
// [Main]   blt a5, zero, .loop148l2_2_2
// [Main] 
// [Main] .loop148l2_2_1:
// [Main]   addi a0, a3, -1
// [Main] 
// [Main] .loop148l2_2_12:
// [Main] 
// [Main] .loop148l2_2_7:
// [Main]   blt a0, zero, .loop148l2_2_9
// [Main] 
// [Main] .loop148l2_2_8:
// [Main]   addi t1, a6, -1
// [Main]   slliw a7, a5, 3
// [Main]   add a7, a4, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a5, 3
// [Main]   add t0, a1, t0
// [Main]   ld t0, 0(t0)
// [Main] 
// [Main] .loop148l2_2_19:
// [Main]   mv t2, a5
// [Main]   mv t3, a1
// [Main]   mv t4, a2
// [Main]   mv s0, a4
// [Main]   mv s1, a7
// [Main] 
// [Main] .loop148l2_2_14:
// [Main]   blt t1, zero, .loop148l2_2_16
// [Main] 
// [Main] .loop148l2_2_15:
// [Main]   slliw s2, a0, 3
// [Main]   add s2, s1, s2
// [Main]   fld fa0, 0(s2)
// [Main]   slliw s2, t1, 3
// [Main]   add s2, t0, s2
// [Main]   fld fa1, 0(s2)
// [Main]   slliw s2, t1, 3
// [Main]   add s2, t4, s2
// [Main]   ld s2, 0(s2)
// [Main]   slliw s3, a0, 3
// [Main]   add s2, s2, s3
// [Main]   fld fa2, 0(s2)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw s2, a0, 3
// [Main]   add s2, a7, s2
// [Main]   fsd fa0, 0(s2)
// [Main]   addi t1, t1, -1
// [Main]   j .loop148l2_2_14
// [Main] 
// [Main] .loop148l2_2_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop148l2_2_3:
// [Main]   ld s0, 0(sp)
// [Main]   ld s1, 8(sp)
// [Main]   ld s2, 16(sp)
// [Main]   ld s3, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .loop148l2_2_9:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop148l2_2_10:
// [Main] 
// [Main] .loop148l2_2_6:
// [Main]   addi a0, a5, -1
// [Main]   mv a5, a0
// [Main]   j .loop148l2_2_0
// [Main] 
// [Main] .loop148l2_2_16:
// [Main]   mv a7, zero
// [Main] 
// [Main] .loop148l2_2_17:
// [Main] 
// [Main] .loop148l2_2_13:
// [Main]   addi a0, a0, -1
// [Main]   j .loop148l2_2_7
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start_12
// [Wasm] Lowering insn Call(ty=Unit, f=f5, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_12 to wasm
// [Wasm] Lowering function make_arr103l5_4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m0, fills=[Init(val=FnParam(fref=f4, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%1), FnParam(fref=f4, fpref=$f.1), Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowered function make_arr103l5_4 to wasm
// [Wasm] Lowering function main85l3_5
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f4, args=[Int32(val=2), Int32(val=3), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f4, args=[Int32(val=3), Int32(val=2), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f4, args=[Int32(val=2), Int32(val=2), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%4), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%6), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%8), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Insn(iref=%28), Int32(val=3), Int32(val=2), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%30), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%35), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%36)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%37)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%40), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%41)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%42)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%45), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%46)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%47)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main85l3_5 to wasm
// [Wasm] Lowering function loop148l2_2
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b14, bpref=$b.7), offset=BlockParam(bref=b14, bpref=$b.1), width=@64))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b14, bpref=$b.8), offset=BlockParam(bref=b14, bpref=$b.2), width=@64))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b14, bpref=$b.4), offset=BlockParam(bref=b14, bpref=$b.2), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%14), offset=BlockParam(bref=b14, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b14, bpref=$b.6), offset=BlockParam(bref=b14, bpref=$b.1), width=@64), val=Insn(iref=%17))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b14, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b14, args=[BlockParam(bref=b14, bpref=$b.0), BlockParam(bref=b14, bpref=$b.1), Insn(iref=%19), BlockParam(bref=b14, bpref=$b.3), BlockParam(bref=b14, bpref=$b.4), BlockParam(bref=b14, bpref=$b.5), BlockParam(bref=b14, bpref=$b.6), BlockParam(bref=b14, bpref=$b.7), BlockParam(bref=b14, bpref=$b.8)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b7, args=[BlockParam(bref=b7, bpref=$b.0), BlockParam(bref=b7, bpref=$b.1), Insn(iref=%10), BlockParam(bref=b7, bpref=$b.3), BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b17, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b14, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b7, bpref=$b.0), BlockParam(bref=b7, bpref=$b.2), Insn(iref=%5), BlockParam(bref=b7, bpref=$b.3), BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.5), Insn(iref=%6), Insn(iref=%6), Insn(iref=%8)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b7, bpref=$b.5), offset=BlockParam(bref=b7, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b7, bpref=$b.3), offset=BlockParam(bref=b7, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b19, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b10, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b12, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Local BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Local BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Local BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Local BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function loop148l2_2 to wasm
// [Wasm] Lowering function init_arr89l4_3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr), val=Mem(fref=f3, mref=m0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr89l4_3 to wasm
// [KnfOpt] freq: {loop31: Many(2), loop228: Many(2), loop148: Many(2), mul68: Once, main85: Once, init_arr89: Many(2), make_arr103: Many(3)}
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision loop31 rejected
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision loop31 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision loop228 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision loop228 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision loop148 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision loop148 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_arr89 rejected
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision init_arr89 rejected
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr103 rejected
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr103 rejected
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr103 rejected
// [KnfOpt] Knf inline Some(mul68)
// [KnfOpt] Numbers of let rec: 6 6 0
// [KnfOpt] hoist: _15
// [KnfOpt] hoist: _16
// [KnfOpt] hoist: _18
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %7: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), Insn(iref=%6), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f2, args=[Insn(iref=%3), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f3, args=[Insn(iref=%3), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%8), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6), FnParam(fref=f0, fpref=$f.7), FnParam(fref=f0, fpref=$f.8)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Multiple, f1: Once, f5: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] loop228l1_1 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), Insn(iref=%2), Insn(iref=%3), Insn(iref=%4)])
// [CoreOpt] shifted callee .fn loop31l0_0 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %7: bool = le(0, $b7.2)
// [CoreOpt]     br %7 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %8: double = load double offset($b7.7, $b7.1 * @64)
// [CoreOpt]     let %9: double = load double offset($b7.8, $b7.2 * @64)
// [CoreOpt]     let %10: array[double] = load array[double] offset($b7.4, $b7.2 * @ptr)
// [CoreOpt]     let %11: double = load double offset(%10, $b7.1 * @64)
// [CoreOpt]     let %12: double = mul(%9, %11)
// [CoreOpt]     let %13: double = add(%8, %12)
// [CoreOpt]     let _ = store double offset($b7.6, $b7.1 * @64) <- %13
// [CoreOpt]     let %15: int32 = sub($b7.2, 1)
// [CoreOpt]     jump b7($b7.0, $b7.1, %15, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] loop148l2_2 is inlining Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [CoreOpt] shifted callee .fn loop228l1_1 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) {
// [CoreOpt]     let %4: bool = le(0, $b7.2)
// [CoreOpt]     br %4 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %5: int32 = sub($b7.1, 1)
// [CoreOpt]     let %6: array[double] = load array[double] offset($b7.5, $b7.0 * @ptr)
// [CoreOpt]     let %7: array[double] = load array[double] offset($b7.5, $b7.0 * @ptr)
// [CoreOpt]     let %8: array[double] = load array[double] offset($b7.3, $b7.0 * @ptr)
// [CoreOpt]     jump b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %10: int32 = sub($b7.2, 1)
// [CoreOpt]     jump b7($b7.0, $b7.1, %10, $b7.3, $b7.4, $b7.5)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %11: bool = le(0, $b14.2)
// [CoreOpt]     br %11 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %12: double = load double offset($b14.7, $b14.1 * @64)
// [CoreOpt]     let %13: double = load double offset($b14.8, $b14.2 * @64)
// [CoreOpt]     let %14: array[double] = load array[double] offset($b14.4, $b14.2 * @ptr)
// [CoreOpt]     let %15: double = load double offset(%14, $b14.1 * @64)
// [CoreOpt]     let %16: double = mul(%13, %15)
// [CoreOpt]     let %17: double = add(%12, %16)
// [CoreOpt]     let _ = store double offset($b14.6, $b14.1 * @64) <- %17
// [CoreOpt]     let %19: int32 = sub($b14.2, 1)
// [CoreOpt]     jump b14($b14.0, $b14.1, %19, $b14.3, $b14.4, $b14.5, $b14.6, $b14.7, $b14.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b17(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (unit) {
// [CoreOpt]     jump b13($b17.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b18 pre #Some(b19) header #b14 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b18($b7.0, $b7.2, %5, $b7.3, $b7.4, $b7.5, %6, %7, %8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
// [CoreOpt] LVN subst Insn(iref=%7) with Insn(iref=%6)
