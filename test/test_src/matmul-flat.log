// [Asm] pre_assigned_registers: FnParam(fref=f12, fpref=$f.1) -> v3, FnParam(fref=f12, fpref=$f.0) -> v2, FnParam(fref=f12, fpref=$f.2) -> v4, Insn(iref=%2) -> v9, Self(fref=f12) -> v0, FreeVar(fvref=^1) -> v5, Insn(iref=%1) -> v8, Mem(fref=f12, mref=m0) -> v6, Insn(iref=%0) -> v7
// [Asm] defs: []
// [Asm] live_set: [a0, a2, a1, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0, v0, a2, a1, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v5, v13, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v5, v14, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, v4, v6, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, v4, v6, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, a0, v4, v6, a1, v2]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, a0, a2, v6, a1, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v6, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v8, v6, v5, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v8, v6, v10, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v10, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, v10, a0, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v6, a1, v10, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v6, a1, v10, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of make_arr103_12"];
// [Asm]   r0 [label="v0 ← a3", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="s10", color=blue];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v13 ← a0", color=green];
// [Asm]   r6 [label="v3 ← s1", color=green];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="s11", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="v6 ← s3", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v14 ← a0", color=green];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="v5 ← s2", color=green];
// [Asm]   r5 [label="v2 ← s0", color=green];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r24 [label="v10 ← a3", color=green];
// [Asm]   r25 [label="v9 ← a0", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r11 -- r15;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r6 -- r14;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r5 -- r13;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r11;
// [Asm]   r6 -- r12;
// [Asm]   r22 -- r24;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r22 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r1 -- r24;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v0-> 1:a0-> 2:a2-> 3:a1-> 5:v2-> 6:v3-> 7:v4-> 8:v5-> 11:v6-> 4:s11-> 9:v13-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 24:v10-> 10:v14-> 22:v8-> 23:s10-> 25:v9"
// [Asm]   comment = "v0<-a3;v13<-a0;v3<-s1;v6<-s3;v4<-a2;v14<-a0;v8<-a0;v5<-s2;v2<-s0;v10<-a3;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of make_arr103_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v0, s10 ->   mv a3, s10
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   ld v5, 8(v0) ->   ld s2, 8(a3)
// [Asm] subst   slliw v13, v2, 3 ->   slliw a0, s0, 3
// [Asm] subst   sub v14, s11, v13 ->   sub a0, s11, a0
// [Asm] subst   andi v6, v14, -8 ->   andi s3, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, s3
// [Asm] subst   mv a1, v2 ->   mv a1, s0
// [Asm] subst   mv a0, v6 ->   mv a0, s3
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v8, v2, -1 ->   addi a0, s0, -1
// [Asm] subst   mv s10, v5 ->   mv s10, s2
// [Asm] subst   ld v10, 0(v5) ->   ld a3, 0(s2)
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a2, v6 ->   mv a2, s3
// [Asm] subst   jalr v10 ->   jalr a3
// [Asm] subst   mv a0, v6 ->   mv a0, s3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v20, Insn(iref=%41) -> v46, Insn(iref=%33) -> v38, Insn(iref=%8) -> v13, Insn(iref=%10) -> v15, Insn(iref=%27) -> v32, Insn(iref=%14) -> v19, Insn(iref=%25) -> v30, Insn(iref=%39) -> v44, Insn(iref=%4) -> v9, Mem(fref=f4, mref=m2) -> v4, Insn(iref=%49) -> v54, Insn(iref=%42) -> fv47, Insn(iref=%44) -> v49, Insn(iref=%32) -> fv37, Insn(iref=%1) -> v6, Insn(iref=%11) -> v16, Insn(iref=%26) -> v31, Insn(iref=%6) -> v11, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%31) -> v36, Insn(iref=%35) -> v40, Insn(iref=%28) -> v33, Insn(iref=%38) -> v43, Insn(iref=%46) -> v51, Insn(iref=%9) -> v14, Insn(iref=%16) -> v21, Insn(iref=%24) -> v29, Insn(iref=%37) -> fv42, Insn(iref=%45) -> v50, Insn(iref=%29) -> v34, Insn(iref=%5) -> v10, Insn(iref=%47) -> fv52, Insn(iref=%19) -> v24, Insn(iref=%0) -> v5, Insn(iref=%3) -> v8, Insn(iref=%18) -> v23, Insn(iref=%13) -> v18, Insn(iref=%7) -> v12, Insn(iref=%22) -> v27, Insn(iref=%17) -> v22, Insn(iref=%23) -> v28, Insn(iref=%48) -> v53, Insn(iref=%2) -> v7, Insn(iref=%20) -> v25, Insn(iref=%43) -> v48, Insn(iref=%30) -> v35, Mem(fref=f4, mref=m1) -> v3, Self(fref=f4) -> v0, Insn(iref=%21) -> v26, Insn(iref=%34) -> v39, Insn(iref=%36) -> v41, Insn(iref=%40) -> v45, Insn(iref=%12) -> v17
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v130]
// [Asm] live_set: [v130, zero]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [fv132]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv132 is F
// [Asm] defs: [v127]
// [Asm] live_set: [v127, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, s11, v2]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v129]
// [Asm] live_set: [v3, zero, s11, v129, v2]
// [Asm] move_origin: []
// [Asm] defined: v129 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v124]
// [Asm] live_set: [v3, v124, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v124 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, v4, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v3, zero, v126, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v120]
// [Asm] live_set: [zero, v120, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v120, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v121]
// [Asm] live_set: [v121, zero, v120, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v121 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v120, v4, v2]
// [Asm] move_origin: [v121]
// [Asm] defined: a0 is X
// [Asm] defs: [v122]
// [Asm] live_set: [zero, a0, v120, v4, v122, v2]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v120, v4, a1, v2]
// [Asm] move_origin: [v122]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v120, v4, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v8, v4, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v116, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: []
// [Asm] live_set: [v116, zero, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v117]
// [Asm] live_set: [v116, zero, v8, v4, v117, v2]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v116, zero, a0, v8, v4, v2]
// [Asm] move_origin: [v117]
// [Asm] defined: a0 is X
// [Asm] defs: [v118]
// [Asm] live_set: [v116, v118, zero, a0, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v118 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v116, zero, a0, v8, v4, a1, v2]
// [Asm] move_origin: [v118]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v116, zero, a0, v8, v4, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v8, v4, v9, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v4, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v8, v4, v9, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v113]
// [Asm] live_set: [zero, v8, v9, v113, v2]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v9, v113, v2]
// [Asm] move_origin: []
// [Asm] defs: [v114]
// [Asm] live_set: [zero, v8, v114, v9, v113, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v8, v114, v9, v113, v2]
// [Asm] move_origin: [v114]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v8, a1, v9, v113, v2]
// [Asm] move_origin: [v114]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v8, a2, a1, v9, v113]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v110]
// [Asm] live_set: [v11, v10, zero, v110, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v110 is X
// [Asm] defs: [fv111]
// [Asm] live_set: [fv111, v11, v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: fv111 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v10, zero, v13, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v10, zero, v13, v8, v107, v9]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [fv108]
// [Asm] live_set: [fv108, v10, zero, v13, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: fv108 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v10, zero, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v10, zero, v8, v104, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v104 is X
// [Asm] defs: [fv105]
// [Asm] live_set: [fv105, v10, zero, v8, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv105 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v10, zero, v8, v17, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v10, zero, v8, v17, v9, v101]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [fv102]
// [Asm] live_set: [v10, zero, v8, v17, fv102, v9]
// [Asm] move_origin: []
// [Asm] defined: fv102 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v10, zero, v8, v19, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v10, zero, v8, v19, v9, v98]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: [fv99]
// [Asm] live_set: [v10, fv99, zero, v8, v19, v9]
// [Asm] move_origin: []
// [Asm] defined: fv99 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v10, v21, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v10, v21, zero, v8, v95, v9]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [fv96]
// [Asm] live_set: [v10, v21, zero, v8, fv96, v9]
// [Asm] move_origin: []
// [Asm] defined: fv96 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v10, zero, v23, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v10, zero, v23, v8, v92, v9]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [fv93]
// [Asm] live_set: [v10, zero, v23, v8, v9, fv93]
// [Asm] move_origin: []
// [Asm] defined: fv93 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v25, v10, zero, v8, v9, v89]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [fv90]
// [Asm] live_set: [v25, v10, zero, v8, fv90, v9]
// [Asm] move_origin: []
// [Asm] defined: fv90 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v10, zero, v27, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v10, zero, v27, v8, v86, v9]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [fv87]
// [Asm] live_set: [v10, zero, v27, v8, fv87, v9]
// [Asm] move_origin: []
// [Asm] defined: fv87 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v10, zero, v29, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v10, zero, v29, v8, v83, v9]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [fv84]
// [Asm] live_set: [v10, zero, v29, v8, fv84, v9]
// [Asm] move_origin: []
// [Asm] defined: fv84 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v10, zero, v8, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v10, zero, v8, v80, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: [fv81]
// [Asm] live_set: [v10, zero, v8, v31, v9, fv81]
// [Asm] move_origin: []
// [Asm] defined: fv81 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v10, zero, v8, v9, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v10, zero, v77, v8, v9, v33]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [fv78]
// [Asm] live_set: [fv78, v10, zero, v8, v9, v33]
// [Asm] move_origin: []
// [Asm] defined: fv78 is F
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v74]
// [Asm] live_set: [v10, zero, v8, v74, v9]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v10, zero, a0, v8, v74, v9]
// [Asm] move_origin: [v74]
// [Asm] defined: a0 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v10, v75, zero, a0, v8, v74, v9]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v10, zero, a0, v8, a1, v74, v9]
// [Asm] move_origin: [v75]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v10, zero, a0, v8, a2, a1, v9]
// [Asm] move_origin: [v74]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v10, zero, a0, a2, a1, a3, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v10, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v9]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v10, a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v10]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v10, zero, v36]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [fv37]
// [Asm] live_set: [fv37, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v38, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v38, v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: [v38]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v41, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [fv42]
// [Asm] live_set: [v10, zero, fv42]
// [Asm] move_origin: []
// [Asm] defined: fv42 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v43, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v43, v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: [v43]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [v10, fv47, zero]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: [v48]
// [Asm] live_set: [v10, v48, zero]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v48, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: [v48]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v10, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: []
// [Asm] defs: [v51]
// [Asm] live_set: [zero, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [fv52]
// [Asm] live_set: [fv52, zero]
// [Asm] move_origin: []
// [Asm] defined: fv52 is F
// [Asm] defs: [v53]
// [Asm] live_set: [v53, zero]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v53, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v53]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v54]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main85l0_4"];
// [Asm]   r0 [label="v130 ← a0", color=green];
// [Asm]   r46 [label="v95 ← a1", color=green];
// [Asm]   r33 [label="v114 ← a0", color=green];
// [Asm]   r59 [label="v74 ← a0", color=green];
// [Asm]   r76 [label="v54 ← a0", color=green];
// [Asm]   r9 [label="v126 ← a1", color=green];
// [Asm]   r26 [label="a7", color=blue];
// [Asm]   r44 [label="v98 ← a1", color=green];
// [Asm]   r53 [label="v29 ← a0", color=green];
// [Asm]   r56 [label="v80 ← a1", color=green];
// [Asm]   r10 [label="s10", color=blue];
// [Asm]   r5 [label="v3 ← a0", color=green];
// [Asm]   r54 [label="v83 ← a1", color=green];
// [Asm]   r24 [label="a5", color=blue];
// [Asm]   r43 [label="v19 ← a0", color=green];
// [Asm]   r31 [label="v9 ← s3", color=green];
// [Asm]   r39 [label="v15 ← a0", color=green];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r52 [label="v86 ← a1", color=green];
// [Asm]   r65 [label="v40 ← a0", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r61 [label="v35 ← a0", color=green];
// [Asm]   r23 [label="a4", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r67 [label="v43 ← a0", color=green];
// [Asm]   r75 [label="v53 ← a0", color=green];
// [Asm]   r27 [label="v8 ← s2", color=green];
// [Asm]   r62 [label="v36 ← a0", color=green];
// [Asm]   r40 [label="v104 ← a1", color=green];
// [Asm]   r11 [label="v120 ← a3", color=green];
// [Asm]   r58 [label="v77 ← a1", color=green];
// [Asm]   r34 [label="v10 ← s0", color=green];
// [Asm]   r14 [label="v122 ← a1", color=green];
// [Asm]   r51 [label="v27 ← a0", color=green];
// [Asm]   r55 [label="v31 ← a0", color=green];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r60 [label="v75 ← a1", color=green];
// [Asm]   r73 [label="v50 ← a0", color=green];
// [Asm]   r38 [label="v107 ← a1", color=green];
// [Asm]   r72 [label="v49 ← a0", color=green];
// [Asm]   r47 [label="v23 ← a0", color=green];
// [Asm]   r6 [label="v129 ← a1", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r42 [label="v101 ← a1", color=green];
// [Asm]   r4 [label="v127 ← a0", color=green];
// [Asm]   r29 [label="v117 ← a0", color=green];
// [Asm]   r35 [label="v11 ← a0", color=green];
// [Asm]   r7 [label="v124 ← a1", color=green];
// [Asm]   r64 [label="v39 ← a0", color=green];
// [Asm]   r8 [label="v4 ← s1", color=green];
// [Asm]   r36 [label="v110 ← a1", color=green];
// [Asm]   r66 [label="v41 ← a0", color=green];
// [Asm]   r32 [label="v113 ← a3", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r49 [label="v25 ← a0", color=green];
// [Asm]   r74 [label="v51 ← a0", color=green];
// [Asm]   r57 [label="v33 ← a0", color=green];
// [Asm]   r68 [label="v44 ← a0", color=green];
// [Asm]   r70 [label="v46 ← a0", color=green];
// [Asm]   r48 [label="v92 ← a1", color=green];
// [Asm]   r12 [label="v121 ← a0", color=green];
// [Asm]   r37 [label="v13 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r41 [label="v17 ← a0", color=green];
// [Asm]   r28 [label="v116 ← a3", color=green];
// [Asm]   r71 [label="v48 ← a0", color=green];
// [Asm]   r22 [label="a3", color=blue];
// [Asm]   r69 [label="v45 ← a0", color=green];
// [Asm]   r50 [label="v89 ← a1", color=green];
// [Asm]   r30 [label="v118 ← a1", color=green];
// [Asm]   r45 [label="v21 ← a0", color=green];
// [Asm]   r25 [label="a6", color=blue];
// [Asm]   r63 [label="v38 ← a0", color=green];
// [Asm]   r2 [label="v2 ← s0", color=green];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r8 -- r31;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r27 -- r57;
// [Asm]   r1 -- r26;
// [Asm]   r34 -- r71;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r57;
// [Asm]   r13 -- r32;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r15 -- r31;
// [Asm]   r31 -- r45;
// [Asm]   r34 -- r40;
// [Asm]   r27 -- r36;
// [Asm]   r27 -- r51;
// [Asm]   r28 -- r30;
// [Asm]   r1 -- r45;
// [Asm]   r20 -- r34;
// [Asm]   r13 -- r31;
// [Asm]   r57 -- r58;
// [Asm]   r1 -- r52;
// [Asm]   r27 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r27 -- r34;
// [Asm]   r34 -- r42;
// [Asm]   r3 -- r5;
// [Asm]   r18 -- r34;
// [Asm]   r1 -- r68;
// [Asm]   r1 -- r50;
// [Asm]   r8 -- r12;
// [Asm]   r31 -- r35;
// [Asm]   r34 -- r69;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r13 -- r30;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r34 -- r73;
// [Asm]   r8 -- r16;
// [Asm]   r1 -- r48;
// [Asm]   r31 -- r55;
// [Asm]   r1 -- r64;
// [Asm]   r59 -- r60;
// [Asm]   r11 -- r13;
// [Asm]   r22 -- r34;
// [Asm]   r34 -- r56;
// [Asm]   r1 -- r40;
// [Asm]   r27 -- r50;
// [Asm]   r22 -- r27;
// [Asm]   r2 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r10 -- r31;
// [Asm]   r27 -- r54;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r41 -- r42;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r51;
// [Asm]   r23 -- r24;
// [Asm]   r27 -- r46;
// [Asm]   r1 -- r11;
// [Asm]   r39 -- r40;
// [Asm]   r31 -- r58;
// [Asm]   r15 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r27 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r17 -- r31;
// [Asm]   r1 -- r35;
// [Asm]   r17 -- r27;
// [Asm]   r16 -- r24;
// [Asm]   r27 -- r45;
// [Asm]   r17 -- r34;
// [Asm]   r8 -- r30;
// [Asm]   r27 -- r31;
// [Asm]   r51 -- r52;
// [Asm]   r26 -- r34;
// [Asm]   r27 -- r40;
// [Asm]   r53 -- r54;
// [Asm]   r27 -- r42;
// [Asm]   r13 -- r15;
// [Asm]   r34 -- r41;
// [Asm]   r31 -- r60;
// [Asm]   r27 -- r60;
// [Asm]   r2 -- r26;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r75;
// [Asm]   r27 -- r41;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r8 -- r27;
// [Asm]   r1 -- r55;
// [Asm]   r16 -- r32;
// [Asm]   r47 -- r48;
// [Asm]   r27 -- r48;
// [Asm]   r15 -- r59;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r34 -- r48;
// [Asm]   r1 -- r22;
// [Asm]   r19 -- r34;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r31 -- r41;
// [Asm]   r1 -- r13;
// [Asm]   r21 -- r34;
// [Asm]   r27 -- r53;
// [Asm]   r34 -- r39;
// [Asm]   r34 -- r49;
// [Asm]   r2 -- r11;
// [Asm]   r34 -- r59;
// [Asm]   r31 -- r42;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r34 -- r58;
// [Asm]   r13 -- r19;
// [Asm]   r34 -- r68;
// [Asm]   r34 -- r38;
// [Asm]   r34 -- r67;
// [Asm]   r27 -- r43;
// [Asm]   r31 -- r46;
// [Asm]   r31 -- r40;
// [Asm]   r27 -- r38;
// [Asm]   r34 -- r63;
// [Asm]   r31 -- r37;
// [Asm]   r2 -- r14;
// [Asm]   r32 -- r33;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r13 -- r23;
// [Asm]   r31 -- r44;
// [Asm]   r27 -- r47;
// [Asm]   r1 -- r29;
// [Asm]   r24 -- r34;
// [Asm]   r13 -- r14;
// [Asm]   r25 -- r34;
// [Asm]   r8 -- r18;
// [Asm]   r34 -- r70;
// [Asm]   r1 -- r72;
// [Asm]   r25 -- r31;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r15 -- r34;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r15 -- r24;
// [Asm]   r34 -- r64;
// [Asm]   r2 -- r30;
// [Asm]   r8 -- r26;
// [Asm]   r27 -- r33;
// [Asm]   r31 -- r56;
// [Asm]   r31 -- r33;
// [Asm]   r26 -- r31;
// [Asm]   r2 -- r9;
// [Asm]   r43 -- r44;
// [Asm]   r2 -- r27;
// [Asm]   r1 -- r54;
// [Asm]   r34 -- r72;
// [Asm]   r27 -- r52;
// [Asm]   r31 -- r47;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r2 -- r20;
// [Asm]   r1 -- r76;
// [Asm]   r31 -- r59;
// [Asm]   r23 -- r31;
// [Asm]   r27 -- r59;
// [Asm]   r34 -- r50;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r71;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r27 -- r44;
// [Asm]   r27 -- r29;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r34 -- r46;
// [Asm]   r27 -- r55;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r34 -- r43;
// [Asm]   r27 -- r49;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r63;
// [Asm]   r2 -- r10;
// [Asm]   r27 -- r32;
// [Asm]   r1 -- r69;
// [Asm]   r31 -- r36;
// [Asm]   r19 -- r31;
// [Asm]   r18 -- r27;
// [Asm]   r22 -- r31;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r13 -- r28;
// [Asm]   r34 -- r51;
// [Asm]   r34 -- r62;
// [Asm]   r27 -- r39;
// [Asm]   r1 -- r62;
// [Asm]   r31 -- r50;
// [Asm]   r31 -- r39;
// [Asm]   r1 -- r67;
// [Asm]   r27 -- r30;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r46;
// [Asm]   r1 -- r31;
// [Asm]   r16 -- r34;
// [Asm]   r31 -- r51;
// [Asm]   r2 -- r33;
// [Asm]   r24 -- r31;
// [Asm]   r8 -- r17;
// [Asm]   r19 -- r27;
// [Asm]   r34 -- r55;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r1 -- r27;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r13 -- r22;
// [Asm]   r34 -- r65;
// [Asm]   r1 -- r49;
// [Asm]   r8 -- r11;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r44;
// [Asm]   r31 -- r34;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r14;
// [Asm]   r15 -- r28;
// [Asm]   r34 -- r61;
// [Asm]   r16 -- r23;
// [Asm]   r34 -- r60;
// [Asm]   r31 -- r53;
// [Asm]   r2 -- r23;
// [Asm]   r55 -- r56;
// [Asm]   r16 -- r27;
// [Asm]   r27 -- r37;
// [Asm]   r16 -- r22;
// [Asm]   r35 -- r36;
// [Asm]   r13 -- r60;
// [Asm]   r13 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r1 -- r58;
// [Asm]   r20 -- r31;
// [Asm]   r34 -- r52;
// [Asm]   r34 -- r44;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r19;
// [Asm]   r25 -- r27;
// [Asm]   r13 -- r26;
// [Asm]   r1 -- r32;
// [Asm]   r31 -- r48;
// [Asm]   r34 -- r57;
// [Asm]   r34 -- r53;
// [Asm]   r1 -- r15;
// [Asm]   r23 -- r34;
// [Asm]   r1 -- r60;
// [Asm]   r31 -- r38;
// [Asm]   r45 -- r46;
// [Asm]   r10 -- r27;
// [Asm]   r31 -- r57;
// [Asm]   r1 -- r65;
// [Asm]   r23 -- r27;
// [Asm]   r1 -- r66;
// [Asm]   r16 -- r28;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r31 -- r52;
// [Asm]   r13 -- r20;
// [Asm]   r22 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r15 -- r32;
// [Asm]   r8 -- r28;
// [Asm]   r34 -- r54;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r27 -- r56;
// [Asm]   r13 -- r34;
// [Asm]   r21 -- r31;
// [Asm]   r8 -- r13;
// [Asm]   r34 -- r45;
// [Asm]   r31 -- r54;
// [Asm]   r34 -- r37;
// [Asm]   r1 -- r59;
// [Asm]   r34 -- r66;
// [Asm]   r27 -- r58;
// [Asm]   r34 -- r36;
// [Asm]   r1 -- r74;
// [Asm]   r22 -- r23;
// [Asm]   r2 -- r21;
// [Asm]   r34 -- r47;
// [Asm]   r31 -- r49;
// [Asm]   r1 -- r73;
// [Asm]   r31 -- r32;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r36;
// [Asm]   r31 -- r43;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r19;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r49 -- r50;
// [Asm]   r13 -- r27;
// [Asm]   comment = "0:v130-> 1:zero-> 2:v2-> 3:s11-> 5:v3-> 6:v129-> 7:v124-> 8:v4-> 9:v126-> 11:v120-> 12:v121-> 13:a0-> 14:v122-> 15:a1-> 16:a2-> 22:a3-> 23:a4-> 24:a5-> 27:v8-> 31:v9-> 34:v10-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 25:a6-> 26:a7-> 28:v116-> 32:v113-> 30:v118-> 29:v117-> 33:v114-> 59:v74-> 60:v75-> 10:s10-> 35:v11-> 36:v110-> 37:v13-> 38:v107-> 39:v15-> 40:v104-> 41:v17-> 42:v101-> 43:v19-> 44:v98-> 45:v21-> 46:v95-> 47:v23-> 48:v92-> 49:v25-> 50:v89-> 51:v27-> 52:v86-> 53:v29-> 54:v83-> 55:v31-> 56:v80-> 57:v33-> 58:v77-> 4:v127-> 61:v35-> 62:v36-> 63:v38-> 64:v39-> 65:v40-> 66:v41-> 67:v43-> 68:v44-> 69:v45-> 70:v46-> 71:v48-> 72:v49-> 73:v50-> 74:v51-> 75:v53-> 76:v54"
// [Asm]   comment = "v130<-a0;v95<-a1;v114<-a0;v74<-a0;v54<-a0;v126<-a1;v98<-a1;v29<-a0;v80<-a1;v3<-a0;v83<-a1;v19<-a0;v9<-s3;v15<-a0;v86<-a1;v40<-a0;v35<-a0;v43<-a0;v53<-a0;v8<-s2;v36<-a0;v104<-a1;v120<-a3;v77<-a1;v10<-s0;v122<-a1;v27<-a0;v31<-a0;v75<-a1;v50<-a0;v107<-a1;v49<-a0;v23<-a0;v129<-a1;v101<-a1;v127<-a0;v117<-a0;v11<-a0;v124<-a1;v39<-a0;v4<-s1;v110<-a1;v41<-a0;v113<-a3;v25<-a0;v51<-a0;v33<-a0;v44<-a0;v46<-a0;v92<-a1;v121<-a0;v13<-a0;v17<-a0;v116<-a3;v48<-a0;v45<-a0;v89<-a1;v118<-a1;v21<-a0;v38<-a0;v2<-s0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main85l0_4"];
// [Asm]   r0 [label="fv132 ← fa0", color=green];
// [Asm]   r33 [label="fv42 ← fa0", color=green];
// [Asm]   r9 [label="ft8", color=blue];
// [Asm]   r26 [label="fv93 ← fa0", color=green];
// [Asm]   r6 [label="ft5", color=blue];
// [Asm]   r13 [label="fa1", color=blue];
// [Asm]   r4 [label="ft3", color=blue];
// [Asm]   r29 [label="fv84 ← fa0", color=green];
// [Asm]   r35 [label="fv52 ← fa0", color=green];
// [Asm]   r7 [label="ft6", color=blue];
// [Asm]   r10 [label="ft9", color=blue];
// [Asm]   r8 [label="ft7", color=blue];
// [Asm]   r5 [label="ft4", color=blue];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r32 [label="fv37 ← fa0", color=green];
// [Asm]   r24 [label="fv99 ← fa0", color=green];
// [Asm]   r31 [label="fv78 ← fa0", color=green];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r12 [label="fa0", color=blue];
// [Asm]   r20 [label="fv111 ← fa0", color=green];
// [Asm]   r23 [label="fv102 ← fa0", color=green];
// [Asm]   r3 [label="ft2", color=blue];
// [Asm]   r27 [label="fv90 ← fa0", color=green];
// [Asm]   r1 [label="ft0", color=blue];
// [Asm]   r28 [label="fv87 ← fa0", color=green];
// [Asm]   r11 [label="ft10", color=blue];
// [Asm]   r34 [label="fv47 ← fa0", color=green];
// [Asm]   r22 [label="fv105 ← fa0", color=green];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r30 [label="fv81 ← fa0", color=green];
// [Asm]   r25 [label="fv96 ← fa0", color=green];
// [Asm]   r2 [label="ft1", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r21 [label="fv108 ← fa0", color=green];
// [Asm]   comment = "0:fv132-> 1:ft0-> 2:ft1-> 3:ft2-> 4:ft3-> 5:ft4-> 6:ft5-> 7:ft6-> 8:ft7-> 9:ft8-> 10:ft9-> 11:ft10-> 12:fa0-> 13:fa1-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 18:fa6-> 19:fa7-> 20:fv111-> 21:fv108-> 22:fv105-> 23:fv102-> 24:fv99-> 25:fv96-> 26:fv93-> 27:fv90-> 28:fv87-> 29:fv84-> 30:fv81-> 31:fv78-> 32:fv37-> 33:fv42-> 34:fv47-> 35:fv52"
// [Asm]   comment = "fv132<-fa0;fv42<-fa0;fv93<-fa0;fv84<-fa0;fv52<-fa0;fv37<-fa0;fv99<-fa0;fv78<-fa0;fv111<-fa0;fv102<-fa0;fv90<-fa0;fv87<-fa0;fv47<-fa0;fv105<-fa0;fv81<-fa0;fv96<-fa0;fv108<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v130, s11, 0 ->   addi a0, s11, 0
// [Asm] subst   andi v2, v130, -8 ->   andi s0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   fmv.d.x fv132, zero ->   fmv.d.x fa0, zero
// [Asm] subst   addi v127, s11, -8 ->   addi a0, s11, -8
// [Asm] subst   andi v3, v127, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a0
// [Asm] subst   la v129, init_arr89_10 ->   la a1, init_arr89_10
// [Asm] subst   sd v129, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   addi v124, s11, -16 ->   addi a1, s11, -16
// [Asm] subst   andi v4, v124, -8 ->   andi s1, a1, -8
// [Asm] subst   mv s11, v4 ->   mv s11, s1
// [Asm] subst   la v126, make_arr103_12 ->   la a1, make_arr103_12
// [Asm] subst   sd v126, 0(v4) ->   sd a1, 0(s1)
// [Asm] subst   sd v3, 8(v4) ->   sd a0, 8(s1)
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v120, 0(v4) ->   ld a3, 0(s1)
// [Asm] subst   li v121, 2 ->   li a0, 2
// [Asm] subst   li v122, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   jalr v120 ->   jalr a3
// [Asm] subst   mv v8, a0 ->   mv s2, a0
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v116, 0(v4) ->   ld a3, 0(s1)
// [Asm] subst   li v117, 3 ->   li a0, 3
// [Asm] subst   li v118, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   jalr v116 ->   jalr a3
// [Asm] subst   mv v9, a0 ->   mv s3, a0
// [Asm] subst   mv s10, v4 ->   mv s10, s1
// [Asm] subst   ld v113, 0(v4) ->   ld a3, 0(s1)
// [Asm] subst   li v114, 2 ->   li a0, 2
// [Asm] subst   mv a1, v114 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   jalr v113 ->   jalr a3
// [Asm] subst   mv v10, a0 ->   mv s0, a0
// [Asm] subst   ld v11, 0(v8) ->   ld a0, 0(s2)
// [Asm] subst   li v110, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv111, v110 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv111, 0(v11) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v13, 0(v8) ->   ld a0, 0(s2)
// [Asm] subst   li v107, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv108, v107 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv108, 8(v13) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v15, 0(v8) ->   ld a0, 0(s2)
// [Asm] subst   li v104, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv105, v104 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv105, 16(v15) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v17, 8(v8) ->   ld a0, 8(s2)
// [Asm] subst   li v101, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv102, v101 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv102, 0(v17) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v19, 8(v8) ->   ld a0, 8(s2)
// [Asm] subst   li v98, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv99, v98 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv99, 8(v19) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v21, 8(v8) ->   ld a0, 8(s2)
// [Asm] subst   li v95, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv96, v95 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv96, 16(v21) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v23, 0(v9) ->   ld a0, 0(s3)
// [Asm] subst   li v92, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv93, v92 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv93, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 0(v9) ->   ld a0, 0(s3)
// [Asm] subst   li v89, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv90, v89 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv90, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 8(v9) ->   ld a0, 8(s3)
// [Asm] subst   li v86, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv87, v86 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv87, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 8(v9) ->   ld a0, 8(s3)
// [Asm] subst   li v83, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv84, v83 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv84, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v31, 16(v9) ->   ld a0, 16(s3)
// [Asm] subst   li v80, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv81, v80 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv81, 0(v31) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v33, 16(v9) ->   ld a0, 16(s3)
// [Asm] subst   li v77, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv78, v77 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv78, 8(v33) ->   fsd fa0, 8(a0)
// [Asm] subst   li v74, 2 ->   li a0, 2
// [Asm] subst   li v75, 3 ->   li a1, 3
// [Asm] subst   mv a2, v74 ->   mv a2, a0
// [Asm] subst   mv a3, v8 ->   mv a3, s2
// [Asm] subst   mv a4, v9 ->   mv a4, s3
// [Asm] subst   mv a5, v10 ->   mv a5, s0
// [Asm] subst   call mul68_3 ->   call mul68_3
// [Asm] subst   ld v36, 0(v10) ->   ld a0, 0(s0)
// [Asm] subst   fld fv37, 0(v36) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v38, fv37, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v41, 0(v10) ->   ld a0, 0(s0)
// [Asm] subst   fld fv42, 8(v41) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v43, fv42, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v46, 8(v10) ->   ld a0, 8(s0)
// [Asm] subst   fld fv47, 0(v46) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v48, fv47, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v51, 8(v10) ->   ld a0, 8(s0)
// [Asm] subst   fld fv52, 8(v51) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v53, fv52, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.4) -> v6, FnParam(fref=f1, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v15, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v8, FnParam(fref=f1, fpref=$f.5) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, Insn(iref=%0) -> v14, Insn(iref=%3) -> v18, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.2) -> v4, Insn(iref=%2) -> v17, Insn(iref=%1) -> v16, Self(fref=f1) -> v0
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v16, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v16, v10, v13, zero, a0, v8, a1, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a2, a1, v12, v9]
// [Asm] move_origin: [v16]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v18, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v18, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v18, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop228_1"];
// [Asm]   r0 [label="v15 ← a0", color=green];
// [Asm]   r20 [label="v16 ← a2", color=green];
// [Asm]   r23 [label="t2", color=blue];
// [Asm]   r3 [label="a5", color=blue];
// [Asm]   r9 [label="v3 ← a1", color=green];
// [Asm]   r26 [label="a6", color=blue];
// [Asm]   r27 [label="a7", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="v7 ← a5", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v18 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r28 [label="v17 ← a0", color=green];
// [Asm]   r11 [label="v5 ← a3", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="t1", color=blue];
// [Asm]   r14 [label="v8 ← s0", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r24 [label="t3", color=blue];
// [Asm]   r15 [label="v9 ← s1", color=green];
// [Asm]   r25 [label="t4", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="v10 ← s2", color=green];
// [Asm]   r18 [label="v12 ← s4", color=green];
// [Asm]   r19 [label="v13 ← s5", color=green];
// [Asm]   r17 [label="v11 ← s3", color=green];
// [Asm]   r21 [label="t0", color=blue];
// [Asm]   r12 [label="v6 ← a4", color=green];
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r18 -- r23;
// [Asm]   r10 -- r14;
// [Asm]   r16 -- r20;
// [Asm]   r14 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r27;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r18 -- r21;
// [Asm]   r4 -- r27;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r14;
// [Asm]   r18 -- r28;
// [Asm]   r4 -- r21;
// [Asm]   r3 -- r8;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r18 -- r26;
// [Asm]   r8 -- r17;
// [Asm]   r19 -- r29;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r19 -- r27;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r17 -- r22;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r18 -- r20;
// [Asm]   r5 -- r14;
// [Asm]   r15 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r16 -- r24;
// [Asm]   r17 -- r27;
// [Asm]   r15 -- r28;
// [Asm]   r4 -- r14;
// [Asm]   r16 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r16 -- r22;
// [Asm]   r17 -- r20;
// [Asm]   r18 -- r24;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r4 -- r23;
// [Asm]   r14 -- r26;
// [Asm]   r17 -- r29;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r15 -- r26;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r18 -- r29;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r14 -- r23;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r17 -- r26;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r17 -- r24;
// [Asm]   r4 -- r20;
// [Asm]   r19 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r14 -- r29;
// [Asm]   r18 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r16 -- r26;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r19 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r16 -- r28;
// [Asm]   r5 -- r11;
// [Asm]   r15 -- r27;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r19 -- r28;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r7 -- r19;
// [Asm]   r18 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r19 -- r23;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r9;
// [Asm]   r15 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r14 -- r25;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r16;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r19 -- r25;
// [Asm]   r7 -- r14;
// [Asm]   r17 -- r28;
// [Asm]   comment = "0:v15-> 1:a0-> 3:a5-> 4:zero-> 5:a4-> 6:a2-> 7:a1-> 8:a3-> 14:v8-> 15:v9-> 16:v10-> 17:v11-> 18:v12-> 19:v13-> 20:v16-> 21:t0-> 22:t1-> 23:t2-> 24:t3-> 25:t4-> 26:a6-> 27:a7-> 28:v17-> 2:v2-> 9:v3-> 10:v4-> 11:v5-> 12:v6-> 13:v7-> 29:v18"
// [Asm]   comment = "v15<-a0;v16<-a2;v3<-a1;v7<-a5;v18<-a0;v17<-a0;v5<-a3;v4<-a2;v8<-s0;v9<-s1;v2<-a0;v10<-s2;v12<-s4;v13<-s5;v11<-s3;v6<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop228_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v8, v2 ->   mv s0, a0
// [Asm] subst   mv v9, v3 ->   mv s1, a1
// [Asm] subst   mv v10, v4 ->   mv s2, a2
// [Asm] subst   mv v11, v5 ->   mv s3, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s5, a5
// [Asm] subst   blt v10, zero, .loop228_1_2 ->   blt s2, zero, .loop228_1_2
// [Asm] subst   addi v16, v9, -1 ->   addi a2, s1, -1
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   mv a1, v10 ->   mv a1, s2
// [Asm] subst   mv a3, v11 ->   mv a3, s3
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s5
// [Asm] subst   call loop31_0 ->   call loop31_0
// [Asm] subst   addi v18, v10, -1 ->   addi a0, s2, -1
// [Asm] subst   mv v10, v18 ->   mv s2, a0
// [Asm] subst   j .loop228_1_0 ->   j .loop228_1_0
// [Asm] pre_assigned_registers: FnParam(fref=f10, fpref=$f.2) -> v4, Insn(iref=%3) -> v13, Mem(fref=f10, mref=m0) -> v5, FnParam(fref=f10, fpref=$f.0) -> v2, FnParam(fref=f10, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Self(fref=f10) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Insn(iref=%0) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v3, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: [v17]
// [Asm] live_set: [zero, v7, v8, v6, v17, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v7, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v5, zero, v7, v8, fv20, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v7, v8, fv20, v6, a1, s11, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, fv20, v6, a1, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, zero, a0, v7, v8, fa0, v6, a1, s11, v3]
// [Asm] move_origin: [fv20]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v7, v8, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13, v7, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v7, v8, v6, s11, v3]
// [Asm] move_origin: [v13]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7, v8, v6, s11, v3]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v7, v3, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr89_10"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="a5", color=blue];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="v4 ← a1", color=green];
// [Asm]   r26 [label="v15 ← a0", color=green];
// [Asm]   r27 [label="v16 ← a0", color=green];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="v17 ← a0", color=green];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="v10 ← a0", color=green];
// [Asm]   r28 [label="v13 ← a0", color=green];
// [Asm]   r11 [label="v7 ← s0", color=green];
// [Asm]   r7 [label="v2 ← a0", color=green];
// [Asm]   r10 [label="v6 ← s1", color=green];
// [Asm]   r22 [label="a4", color=blue];
// [Asm]   r14 [label="v18 ← a0", color=green];
// [Asm]   r8 [label="v3 ← s0", color=green];
// [Asm]   r5 [label="s11", color=blue];
// [Asm]   r24 [label="a6", color=blue];
// [Asm]   r15 [label="v5 ← s3", color=green];
// [Asm]   r25 [label="a7", color=blue];
// [Asm]   r2 [label="v0 ← a3", color=green];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="a3", color=blue];
// [Asm]   r12 [label="v8 ← s2", color=green];
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r10 -- r26;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r3 -- r11;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r15 -- r25;
// [Asm]   r12 -- r19;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r24;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r12 -- r28;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r10;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r15 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r0 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r10 -- r25;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r11 -- r25;
// [Asm]   r10 -- r17;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r0 -- r15;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r20;
// [Asm]   r15 -- r26;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r27;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r23;
// [Asm]   r6 -- r16;
// [Asm]   r11 -- r22;
// [Asm]   r10 -- r27;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r26;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r12;
// [Asm]   r15 -- r27;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r16;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r11 -- r26;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r5 -- r27;
// [Asm]   r12 -- r27;
// [Asm]   r12 -- r17;
// [Asm]   r11 -- r27;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r11 -- r28;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r26;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:a0-> 2:v0-> 4:a1-> 5:s11-> 6:zero-> 8:v3-> 10:v6-> 12:v8-> 3:a2-> 11:v7-> 15:v5-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:a3-> 22:a4-> 23:a5-> 24:a6-> 25:a7-> 26:v15-> 27:v16-> 13:v17-> 7:v2-> 9:v4-> 14:v18-> 28:v13-> 1:v10"
// [Asm]   comment = "v4<-a1;v15<-a0;v16<-a0;v17<-a0;v10<-a0;v13<-a0;v7<-s0;v2<-a0;v6<-s1;v18<-a0;v3<-s0;v5<-s3;v0<-a3;v8<-s2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr89_10"];
// [Asm]   r0 [label="fv20 ← fa0", color=green];
// [Asm]   r3 [label="ft1", color=blue];
// [Asm]   r9 [label="ft7", color=blue];
// [Asm]   r6 [label="ft4", color=blue];
// [Asm]   r13 [label="fa1", color=blue];
// [Asm]   r4 [label="ft2", color=blue];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   r11 [label="ft9", color=blue];
// [Asm]   r7 [label="ft5", color=blue];
// [Asm]   r10 [label="ft8", color=blue];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r8 [label="ft6", color=blue];
// [Asm]   r5 [label="ft3", color=blue];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r2 [label="ft0", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r12 [label="ft10", color=blue];
// [Asm]   comment = "0:fv20-> 1:fa0-> 2:ft0-> 3:ft1-> 4:ft2-> 5:ft3-> 6:ft4-> 7:ft5-> 8:ft6-> 9:ft7-> 10:ft8-> 11:ft9-> 12:ft10-> 13:fa1-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 18:fa6-> 19:fa7"
// [Asm]   comment = "fv20<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   mv v0, s10 ->   mv a3, s10
// [Asm] subst   mv v3, a1 ->   mv s0, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   mv v6, v2 ->   mv s1, a0
// [Asm] subst   mv v8, v4 ->   mv s2, a1
// [Asm] subst   slliw v17, v3, 3 ->   slliw a0, s0, 3
// [Asm] subst   sub v18, s11, v17 ->   sub a0, s11, a0
// [Asm] subst   andi v5, v18, -8 ->   andi s3, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s3
// [Asm] subst   fmv.d.x fv20, zero ->   fmv.d.x fa0, zero
// [Asm] subst   mv a1, v3 ->   mv a1, s0
// [Asm] subst   mv a0, v5 ->   mv a0, s3
// [Asm] subst   call memsetf64 ->   call memsetf64
// [Asm] subst   slliw v15, v6, 3 ->   slliw a0, s1, 3
// [Asm] subst   add v16, v8, v15 ->   add a0, s2, a0
// [Asm] subst   sd v5, 0(v16) ->   sd s3, 0(a0)
// [Asm] subst   addi v13, v6, -1 ->   addi a0, s1, -1
// [Asm] subst   mv v6, v13 ->   mv s1, a0
// [Asm] subst   j .init_arr89_10_0 ->   j .init_arr89_10_0
// [Asm] subst   blt v6, zero, .init_arr89_10_2 ->   blt s1, zero, .init_arr89_10_2
// [Asm] pre_assigned_registers: FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v15, Self(fref=f2) -> v0, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, Insn(iref=%0) -> v14, FnParam(fref=f2, fpref=$f.5) -> v7, Insn(iref=%3) -> v18, Insn(iref=%2) -> v17, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v16, FnParam(fref=f2, fpref=$f.0) -> v2, FnParam(fref=f2, fpref=$f.2) -> v4, FnParam(fref=f2, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v16, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v16, v10, v13, zero, a0, v8, a1, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a2, a1, v12, v9]
// [Asm] move_origin: [v16]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, v13, zero, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop148_2"];
// [Asm]   r0 [label="v16 ← a2", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r23 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v13 ← s2", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v5 ← a3", color=green];
// [Asm]   r27 [label="v6 ← a4", color=green];
// [Asm]   r6 [label="v12 ← s4", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="v7 ← a5", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="v9 ← s5", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v18 ← a0", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v8 ← s3", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r24 [label="v3 ← a1", color=green];
// [Asm]   r25 [label="v4 ← a2", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r21 [label="v17 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r12;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r25 -- r28;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r27 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r10 -- r12;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r24 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r23 -- r24;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r11 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r25 -- r27;
// [Asm]   r13 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r1 -- r13;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r12;
// [Asm]   r24 -- r28;
// [Asm]   r13 -- r25;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r23 -- r26;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r13 -- r23;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r23 -- r28;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r2 -- r27;
// [Asm]   r10 -- r24;
// [Asm]   r13 -- r27;
// [Asm]   r12 -- r26;
// [Asm]   comment = "0:v16-> 1:v11-> 2:v10-> 3:v13-> 4:zero-> 5:v8-> 6:v12-> 7:v9-> 8:a0-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a6-> 20:a7-> 21:v17-> 22:v18-> 23:v2-> 24:v3-> 25:v4-> 26:v5-> 27:v6-> 28:v7-> 29:v15"
// [Asm]   comment = "v16<-a2;v2<-a0;v13<-s2;v5<-a3;v6<-a4;v12<-s4;v15<-a0;v11<-s0;v7<-a5;v9<-s5;v18<-a0;v8<-s3;v3<-a1;v4<-a2;v10<-s1;v17<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop148_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   blt v8, zero, .loop148_2_2 ->   blt s3, zero, .loop148_2_2
// [Asm] subst   addi v16, v10, -1 ->   addi a2, s1, -1
// [Asm] subst   mv a0, v8 ->   mv a0, s3
// [Asm] subst   mv a1, v9 ->   mv a1, s5
// [Asm] subst   mv a3, v11 ->   mv a3, s0
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call loop228_1 ->   call loop228_1
// [Asm] subst   addi v18, v8, -1 ->   addi a0, s3, -1
// [Asm] subst   mv v8, v18 ->   mv s3, a0
// [Asm] subst   j .loop148_2_0 ->   j .loop148_2_0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v8, v2 ->   mv s3, a0
// [Asm] subst   mv v9, v3 ->   mv s5, a1
// [Asm] subst   mv v10, v4 ->   mv s1, a2
// [Asm] subst   mv v11, v5 ->   mv s0, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s2, a5
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, FnParam(fref=f3, fpref=$f.4) -> v6, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%1) -> v9, FnParam(fref=f3, fpref=$f.3) -> v5, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%0) -> v8
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v7, v4, a1, v6]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v7, a2, a1, v6]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [zero, a0, v7, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, v7, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v7]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mul68_3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="a7", color=blue];
// [Asm]   r3 [label="a4", color=blue];
// [Asm]   r9 [label="v5 ← a3", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="a5", color=blue];
// [Asm]   r11 [label="v7 ← a5", color=green];
// [Asm]   r7 [label="v3 ← a1", color=green];
// [Asm]   r10 [label="v6 ← a4", color=green];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="v4 ← a2", color=green];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="a6", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="v8 ← a0", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v2-> 1:a5-> 2:zero-> 3:a4-> 4:a2-> 5:a1-> 6:a3-> 7:v3-> 8:v4-> 9:v5-> 10:v6-> 11:v7-> 13:a0-> 12:v8-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:a6-> 20:a7-> 21:v9"
// [Asm]   comment = "v2<-a0;v5<-a3;v7<-a5;v3<-a1;v6<-a4;v4<-a2;v9<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mul68_3"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v8, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   call loop148_2 ->   call loop148_2
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main85l0_4 ->   call main85l0_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.5) -> v7, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b3, bpref=$b.0) -> v15, Insn(iref=%9) -> fv24, Insn(iref=%8) -> fv23, Insn(iref=%10) -> v25, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> fv20, Insn(iref=%0) -> v14, Insn(iref=%4) -> v19, Insn(iref=%3) -> fv18, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> fv22, Insn(iref=%2) -> v17, FnParam(fref=f0, fpref=$f.4) -> v6, Insn(iref=%1) -> v16, Insn(iref=%11) -> v26, Insn(iref=%6) -> v21
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%7)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v10, v49, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v10, v13, zero, v50, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v16, v46, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v47, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v17, v43, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, fv18, v9, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v41, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v19, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v19, v37, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v38, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv20, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv20, v12, fv18, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv20, v35, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v16, v10, v21, v13, zero, v8, fv20, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v16, v10, v21, v13, zero, v8, fv20, v12, fv18, v31, v9]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv20, v32, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [v11, fv22, v16, v10, v13, zero, v8, fv20, v12, fv18, v9]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: [fv24]
// [Asm] live_set: [v11, fv24, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv24 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v11, fv24, v16, v10, v13, zero, v8, v12, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, fv24, v10, v13, zero, v29, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v13, zero, v26, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v26, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v26, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v26]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop31_0"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r38 [label="v5 ← a1", color=green];
// [Asm]   r33 [label="a2", color=blue];
// [Asm]   r9 [label="v9 ← a6", color=green];
// [Asm]   r26 [label="v32 ← a7", color=green];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="v47 ← a7", color=green];
// [Asm]   r4 [label="v10 ← a2", color=green];
// [Asm]   r29 [label="v26 ← a0", color=green];
// [Asm]   r35 [label="a3", color=blue];
// [Asm]   r7 [label="v8 ← a4", color=green];
// [Asm]   r10 [label="v50 ← a0", color=green];
// [Asm]   r8 [label="v12 ← a5", color=green];
// [Asm]   r5 [label="v13 ← a3", color=green];
// [Asm]   r36 [label="v3 ← a6", color=green];
// [Asm]   r32 [label="a4", color=blue];
// [Asm]   r15 [label="v43 ← t0", color=green];
// [Asm]   r24 [label="v21 ← a7", color=green];
// [Asm]   r31 [label="a5", color=blue];
// [Asm]   r39 [label="v6 ← a3", color=green];
// [Asm]   r17 [label="v40 ← a7", color=green];
// [Asm]   r12 [label="v46 ← a7", color=green];
// [Asm]   r37 [label="v4 ← a2", color=green];
// [Asm]   r20 [label="v37 ← t0", color=green];
// [Asm]   r23 [label="v35 ← a7", color=green];
// [Asm]   r3 [label="v11 ← a1", color=green];
// [Asm]   r27 [label="v28 ← a7", color=green];
// [Asm]   r1 [label="v15 ← a0", color=green];
// [Asm]   r40 [label="v7 ← a0", color=green];
// [Asm]   r28 [label="v29 ← a0", color=green];
// [Asm]   r11 [label="v16 ← a0", color=green];
// [Asm]   r34 [label="a1", color=blue];
// [Asm]   r22 [label="v34 ← a7", color=green];
// [Asm]   r14 [label="v17 ← a7", color=green];
// [Asm]   r30 [label="v2 ← a7", color=green];
// [Asm]   r25 [label="v31 ← t0", color=green];
// [Asm]   r2 [label="v49 ← a0", color=green];
// [Asm]   r16 [label="v44 ← a7", color=green];
// [Asm]   r18 [label="v41 ← a7", color=green];
// [Asm]   r19 [label="v19 ← a7", color=green];
// [Asm]   r21 [label="v38 ← a7", color=green];
// [Asm]   r37 -- r39;
// [Asm]   r32 -- r36;
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r26;
// [Asm]   r7 -- r27;
// [Asm]   r30 -- r34;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r3 -- r39;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r38;
// [Asm]   r8 -- r23;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r39 -- r40;
// [Asm]   r35 -- r37;
// [Asm]   r11 -- r15;
// [Asm]   r6 -- r23;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r9 -- r39;
// [Asm]   r14 -- r15;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r36 -- r40;
// [Asm]   r3 -- r25;
// [Asm]   r11 -- r20;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r30 -- r35;
// [Asm]   r8 -- r27;
// [Asm]   r7 -- r24;
// [Asm]   r9 -- r40;
// [Asm]   r30 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r33 -- r36;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r31 -- r37;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r38 -- r40;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r6 -- r38;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r36 -- r38;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r9 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r9 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r40;
// [Asm]   r30 -- r38;
// [Asm]   r37 -- r38;
// [Asm]   r30 -- r40;
// [Asm]   r30 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r31 -- r36;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r4 -- r40;
// [Asm]   r3 -- r18;
// [Asm]   r31 -- r39;
// [Asm]   r9 -- r18;
// [Asm]   r37 -- r40;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r29;
// [Asm]   r30 -- r39;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r30 -- r33;
// [Asm]   r11 -- r25;
// [Asm]   r36 -- r37;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r32 -- r37;
// [Asm]   r11 -- r17;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r36 -- r39;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r31 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r30 -- r37;
// [Asm]   r6 -- r24;
// [Asm]   r7 -- r28;
// [Asm]   r32 -- r38;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r38;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r6 -- r28;
// [Asm]   r8 -- r40;
// [Asm]   r7 -- r11;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r30 -- r36;
// [Asm]   r11 -- r26;
// [Asm]   r9 -- r16;
// [Asm]   r4 -- r39;
// [Asm]   r5 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r11 -- r27;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:a0-> 1:v15-> 2:v49-> 3:v11-> 4:v10-> 5:v13-> 6:zero-> 7:v8-> 8:v12-> 9:v9-> 10:v50-> 11:v16-> 12:v46-> 13:v47-> 14:v17-> 15:v43-> 16:v44-> 17:v40-> 18:v41-> 19:v19-> 20:v37-> 21:v38-> 22:v34-> 23:v35-> 24:v21-> 25:v31-> 26:v32-> 27:v28-> 28:v29-> 29:v26-> 40:v7-> 39:v6-> 38:v5-> 37:v4-> 36:v3-> 30:v2-> 31:a5-> 32:a4-> 35:a3-> 33:a2-> 34:a1"
// [Asm]   comment = "v5<-a1;v9<-a6;v32<-a7;v47<-a7;v10<-a2;v26<-a0;v8<-a4;v50<-a0;v12<-a5;v13<-a3;v3<-a6;v43<-t0;v21<-a7;v6<-a3;v40<-a7;v46<-a7;v4<-a2;v37<-t0;v35<-a7;v11<-a1;v28<-a7;v15<-a0;v7<-a0;v29<-a0;v16<-a0;v34<-a7;v17<-a7;v2<-a7;v31<-t0;v49<-a0;v44<-a7;v41<-a7;v19<-a7;v38<-a7;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop31_0"];
// [Asm]   r0 [label="fv18 ← fa0", color=green];
// [Asm]   r2 [label="fv22 ← fa2", color=green];
// [Asm]   r1 [label="fv20 ← fa1", color=green];
// [Asm]   r3 [label="fv24 ← fa0", color=green];
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv18-> 1:fv20-> 2:fv22-> 3:fv24"
// [Asm]   comment = "fv18<-fa0;fv22<-fa2;fv20<-fa1;fv24<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   slliw v49, v8, 3 ->   slliw a0, a4, 3
// [Asm] subst   add v50, v13, v49 ->   add a0, a3, a0
// [Asm] subst   ld v16, 0(v50) ->   ld a0, 0(a0)
// [Asm] subst   slliw v46, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v47, v13, v46 ->   add a7, a3, a7
// [Asm] subst   ld v17, 0(v47) ->   ld a7, 0(a7)
// [Asm] subst   slliw v43, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v44, v17, v43 ->   add a7, a7, t0
// [Asm] subst   fld fv18, 0(v44) ->   fld fa0, 0(a7)
// [Asm] subst   slliw v40, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v41, v11, v40 ->   add a7, a1, a7
// [Asm] subst   ld v19, 0(v41) ->   ld a7, 0(a7)
// [Asm] subst   slliw v37, v10, 3 ->   slliw t0, a2, 3
// [Asm] subst   add v38, v19, v37 ->   add a7, a7, t0
// [Asm] subst   fld fv20, 0(v38) ->   fld fa1, 0(a7)
// [Asm] subst   slliw v34, v10, 3 ->   slliw a7, a2, 3
// [Asm] subst   add v35, v12, v34 ->   add a7, a5, a7
// [Asm] subst   ld v21, 0(v35) ->   ld a7, 0(a7)
// [Asm] subst   slliw v31, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v32, v21, v31 ->   add a7, a7, t0
// [Asm] subst   fld fv22, 0(v32) ->   fld fa2, 0(a7)
// [Asm] subst   fmadd.d fv24, fv20, fv22, fv18 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v28, v9, 3 ->   slliw a7, a6, 3
// [Asm] subst   add v29, v16, v28 ->   add a0, a0, a7
// [Asm] subst   fsd fv24, 0(v29) ->   fsd fa0, 0(a0)
// [Asm] subst   addi v26, v10, -1 ->   addi a0, a2, -1
// [Asm] subst   mv v10, v26 ->   mv a2, a0
// [Asm] subst   j .loop31_0_0 ->   j .loop31_0_0
// [Asm] subst   blt v10, zero, .loop31_0_2 ->   blt a2, zero, .loop31_0_2
// [Asm] subst   mv v2, a0 ->   mv a7, a0
// [Asm] subst   mv v3, a1 ->   mv a6, a1
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, a4 ->   mv a3, a4
// [Asm] subst   mv v7, a5 ->   mv a0, a5
// [Asm] subst   mv v8, v2 ->   mv a4, a7
// [Asm] subst   mv v12, v6 ->   mv a5, a3
// [Asm] subst   mv v13, v7 ->   mv a3, a0
// [Asm] before colored: # leaf false
// [Asm] init_arr89_10:
// [Asm] # block info: defs: [v2, v7, v8, v0, v4, v6, v3], uses: [v2, a0, a2, v4, a1, s10, v3], upward_exposed: [a2, a1, s10, a0], params_defs: []
// [Asm] # live_in: [a0, zero, a2, a1, s11, s10], live_out: [zero, v8, v7, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .init_arr89_10_4:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v3, v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v3, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, zero], upward_exposed: [v6, zero], params_defs: [v8, v6, v7]
// [Asm] # live_in: [zero, v7, v8, v6, s11, v3], live_out: [zero, v8, v7, v6, s11, v3]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .init_arr89_10_0:
// [Asm] # control
// [Asm]   blt v6, zero, .init_arr89_10_2  # live: [v7, v3, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v13, fv20, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v16, a0, v13, fv20, v7, v17, a1, s11, v18, zero, fa0, v8, v6, v15, v3], upward_exposed: [zero, v8, v7, v6, s11, v3], params_defs: []
// [Asm] # live_in: [zero, v7, v8, v6, s11, v3], live_out: [zero, v8, v7, v6, s11, v3]
// [Asm] # block parameters: []
// [Asm] .init_arr89_10_1:
// [Asm]   slliw v17, v3, 3  # live: [zero, v7, v8, v6, v17, s11, v3]
// [Asm]   sub v18, s11, v17  # live: [v18, zero, v7, v8, v6, v3]
// [Asm]   andi v5, v18, -8  # live: [v5, zero, v7, v8, v6, v3]
// [Asm]   mv s11, v5  # live: [v5, zero, v7, v8, v6, s11, v3]
// [Asm]   fmv.d.x fv20, zero  # live: [v5, zero, v7, v8, fv20, v6, s11, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, v7, v8, fv20, v6, a1, s11, v3]
// [Asm]   mv a0, v5  # live: [v5, zero, a0, v7, v8, fv20, v6, a1, s11, v3]
// [Asm]   fmv.d fa0, fv20  # live: [v5, zero, a0, v7, v8, fa0, v6, a1, s11, v3]
// [Asm]   call memsetf64  # live: [v5, zero, v7, v8, v6, s11, v3]
// [Asm]   slliw v15, v6, 3  # live: [v5, zero, v7, v8, v6, s11, v15, v3]
// [Asm]   add v16, v8, v15  # live: [v5, v16, zero, v7, v8, v6, s11, v3]
// [Asm]   sd v5, 0(v16)  # live: [zero, v7, v8, v6, s11, v3]
// [Asm]   addi v13, v6, -1  # live: [zero, v13, v7, v8, s11, v3]
// [Asm] # control
// [Asm]   mv v6, v13  # live: [zero, v7, v8, v6, s11, v3]
// [Asm]   mv v7, v7  # live: [zero, v7, v8, v6, s11, v3]
// [Asm]   mv v8, v8  # live: [v7, v3, v6, s11, zero, v8]
// [Asm]   j .init_arr89_10_0  # live: [v7, v3, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr89_10_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr89_10_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] loop228_1:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228_1_4:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop228_1_0:
// [Asm] # control
// [Asm]   blt v10, zero, .loop228_1_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v16, v10, a5, v13, a0, a2, a1, v12, a3, v9, v18, a4, v8], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228_1_1:
// [Asm]   addi v16, v9, -1  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   mv a0, v8  # live: [v11, v16, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv a1, v10  # live: [v11, v16, v10, v13, zero, a0, v8, a1, v12, v9]
// [Asm]   mv a2, v16  # live: [v11, v10, v13, zero, a0, v8, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, v13, zero, a0, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   call loop31_0  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv v17, a0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v18, v10, -1  # live: [v11, v18, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v8  # live: [v11, v18, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v18, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop228_1_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop228_1_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop228_1_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] loop148_2:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148_2_4:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop148_2_0:
// [Asm] # control
// [Asm]   blt v8, zero, .loop148_2_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v16, v10, a5, v13, a0, a2, a1, v12, a3, v9, v18, a4, v8], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148_2_1:
// [Asm]   addi v16, v10, -1  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   mv a0, v8  # live: [v11, v16, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv a1, v9  # live: [v11, v16, v10, v13, zero, a0, v8, a1, v12, v9]
// [Asm]   mv a2, v16  # live: [v11, v10, v13, zero, a0, v8, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, v13, zero, a0, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, v13, zero, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   call loop228_1  # live: [v11, v10, v13, zero, a0, v8, v12, v9]
// [Asm]   mv v17, a0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v18, v8, -1  # live: [v11, v10, v18, v13, zero, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v18  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop148_2_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop148_2_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop148_2_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main85l0_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] mul68_3:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a5, a0, v7, a2, a1, a3, zero, a4, v8, v4, v6, v3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: []
// [Asm] # block parameters: []
// [Asm] .mul68_3_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   addi v8, v2, -1  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   mv a0, v8  # live: [v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, a0, v7, v4, a1, v6]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, v7, a2, a1, v6]
// [Asm]   mv a3, v5  # live: [zero, a0, v7, a2, a1, v6, a3]
// [Asm]   mv a4, v6  # live: [zero, a0, a4, v7, a2, a1, a3]
// [Asm]   mv a5, v7  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call loop148_2  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main85l0_4:
// [Asm] # block info: defs: [fv84, a1, s11, fv47, v44, fa1, fa2, v50, a6, ft10, v117, ft4, fv78, v10, ft9, v110, v92, v43, a7, fv108, v48, fv132, v40, v25, fv52, ft0, ft1, v41, v86, v98, fv93, v130, v29, v8, v89, v121, v21, v53, a2, v114, v9, ft8, t3, fa5, v23, v77, fv90, t4, v80, v15, v2, v95, v33, v51, fv99, ft6, fa6, a4, v27, fv96, ft5, v129, v54, v116, fv37, v49, fa4, ft2, v17, a3, v31, v113, v101, fa7, v75, fa3, ft3, fv42, v45, v104, t2, v3, fv111, t1, fv105, v127, v13, v120, v107, fv81, v126, v19, v4, v74, v122, ft7, v11, v46, a5, a0, v36, s10, v39, v118, t0, v124, fa0, v35, fv87, v38, v83, fv102], uses: [v95, fv84, a1, s11, fv47, v33, v51, fv99, v27, a4, fv96, v117, v129, v116, fv37, fv78, v10, v110, v92, v17, v43, a3, v31, v113, v101, fv108, v75, v48, fv42, v104, v3, fv111, v25, fv52, fv105, v127, v13, v120, v107, v41, v86, fv81, v98, fv93, v130, zero, v126, v29, v8, v19, v4, v74, v89, v122, v11, v46, v121, v21, v53, a5, a0, v36, v114, a2, v9, v118, v124, v23, v77, fv90, fv87, v80, v38, v83, v15, fv102, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main85l0_4_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v130, s11, 0  # live: [v130, zero]
// [Asm]   andi v2, v130, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [zero, s11, v2]
// [Asm]   fmv.d.x fv132, zero  # live: [zero, s11, v2]
// [Asm]   addi v127, s11, -8  # live: [v127, zero, v2]
// [Asm]   andi v3, v127, -8  # live: [v3, zero, v2]
// [Asm]   mv s11, v3  # live: [v3, zero, s11, v2]
// [Asm]   la v129, init_arr89_10  # live: [v3, zero, s11, v129, v2]
// [Asm]   sd v129, 0(v3)  # live: [v3, zero, s11, v2]
// [Asm]   addi v124, s11, -16  # live: [v3, v124, zero, v2]
// [Asm]   andi v4, v124, -8  # live: [v3, zero, v4, v2]
// [Asm]   mv s11, v4  # live: [v3, zero, v4, v2]
// [Asm]   la v126, make_arr103_12  # live: [v3, zero, v126, v4, v2]
// [Asm]   sd v126, 0(v4)  # live: [v3, zero, v4, v2]
// [Asm]   sd v3, 8(v4)  # live: [zero, v4, v2]
// [Asm]   mv s10, v4  # live: [zero, v4, v2]
// [Asm]   ld v120, 0(v4)  # live: [zero, v120, v4, v2]
// [Asm]   # save_ctx2  # live: [zero, v120, v4, v2]
// [Asm]   li v121, 2  # live: [v121, zero, v120, v4, v2]
// [Asm]   mv a0, v121  # live: [zero, a0, v120, v4, v2]
// [Asm]   li v122, 3  # live: [zero, a0, v120, v4, v122, v2]
// [Asm]   mv a1, v122  # live: [zero, a0, v120, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v120, v4, a2, a1, v2]
// [Asm]   jalr v120  # live: [zero, a0, v4, v2]
// [Asm]   mv v8, a0  # live: [zero, v8, v4, v2]
// [Asm]   # restore_ctx2  # live: [zero, v8, v4, v2]
// [Asm]   mv s10, v4  # live: [zero, v8, v4, v2]
// [Asm]   ld v116, 0(v4)  # live: [v116, zero, v8, v4, v2]
// [Asm]   # save_ctx2  # live: [v116, zero, v8, v4, v2]
// [Asm]   li v117, 3  # live: [v116, zero, v8, v4, v117, v2]
// [Asm]   mv a0, v117  # live: [v116, zero, a0, v8, v4, v2]
// [Asm]   li v118, 2  # live: [v116, v118, zero, a0, v8, v4, v2]
// [Asm]   mv a1, v118  # live: [v116, zero, a0, v8, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [v116, zero, a0, v8, v4, a2, a1, v2]
// [Asm]   jalr v116  # live: [zero, a0, v8, v4, v2]
// [Asm]   mv v9, a0  # live: [zero, v8, v4, v9, v2]
// [Asm]   # restore_ctx2  # live: [zero, v8, v4, v9, v2]
// [Asm]   mv s10, v4  # live: [zero, v8, v4, v9, v2]
// [Asm]   ld v113, 0(v4)  # live: [zero, v8, v9, v113, v2]
// [Asm]   # save_ctx2  # live: [zero, v8, v9, v113, v2]
// [Asm]   li v114, 2  # live: [zero, v8, v114, v9, v113, v2]
// [Asm]   mv a0, v114  # live: [zero, a0, v8, v114, v9, v113, v2]
// [Asm]   mv a1, v114  # live: [zero, a0, v8, a1, v9, v113, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v8, a2, a1, v9, v113]
// [Asm]   jalr v113  # live: [zero, a0, v8, v9]
// [Asm]   mv v10, a0  # live: [v10, zero, v8, v9]
// [Asm]   # restore_ctx2  # live: [v10, zero, v8, v9]
// [Asm]   ld v11, 0(v8)  # live: [v11, v10, zero, v8, v9]
// [Asm]   li v110, 4607182418800017408  # live: [v11, v10, zero, v110, v8, v9]
// [Asm]   fmv.d.x fv111, v110  # live: [fv111, v11, v10, zero, v8, v9]
// [Asm]   fsd fv111, 0(v11)  # live: [v10, zero, v8, v9]
// [Asm]   ld v13, 0(v8)  # live: [v10, zero, v13, v8, v9]
// [Asm]   li v107, 4611686018427387904  # live: [v10, zero, v13, v8, v107, v9]
// [Asm]   fmv.d.x fv108, v107  # live: [fv108, v10, zero, v13, v8, v9]
// [Asm]   fsd fv108, 8(v13)  # live: [v10, zero, v8, v9]
// [Asm]   ld v15, 0(v8)  # live: [v10, zero, v8, v15, v9]
// [Asm]   li v104, 4613937818241073152  # live: [v10, zero, v8, v104, v15, v9]
// [Asm]   fmv.d.x fv105, v104  # live: [fv105, v10, zero, v8, v15, v9]
// [Asm]   fsd fv105, 16(v15)  # live: [v10, zero, v8, v9]
// [Asm]   ld v17, 8(v8)  # live: [v10, zero, v8, v17, v9]
// [Asm]   li v101, 4616189618054758400  # live: [v10, zero, v8, v17, v9, v101]
// [Asm]   fmv.d.x fv102, v101  # live: [v10, zero, v8, v17, fv102, v9]
// [Asm]   fsd fv102, 0(v17)  # live: [v10, zero, v8, v9]
// [Asm]   ld v19, 8(v8)  # live: [v10, zero, v8, v19, v9]
// [Asm]   li v98, 4617315517961601024  # live: [v10, zero, v8, v19, v9, v98]
// [Asm]   fmv.d.x fv99, v98  # live: [v10, fv99, zero, v8, v19, v9]
// [Asm]   fsd fv99, 8(v19)  # live: [v10, zero, v8, v9]
// [Asm]   ld v21, 8(v8)  # live: [v10, v21, zero, v8, v9]
// [Asm]   li v95, 4618441417868443648  # live: [v10, v21, zero, v8, v95, v9]
// [Asm]   fmv.d.x fv96, v95  # live: [v10, v21, zero, v8, fv96, v9]
// [Asm]   fsd fv96, 16(v21)  # live: [v10, zero, v8, v9]
// [Asm]   ld v23, 0(v9)  # live: [v10, zero, v23, v8, v9]
// [Asm]   li v92, 4619567317775286272  # live: [v10, zero, v23, v8, v92, v9]
// [Asm]   fmv.d.x fv93, v92  # live: [v10, zero, v23, v8, v9, fv93]
// [Asm]   fsd fv93, 0(v23)  # live: [v10, zero, v8, v9]
// [Asm]   ld v25, 0(v9)  # live: [v25, v10, zero, v8, v9]
// [Asm]   li v89, 4620693217682128896  # live: [v25, v10, zero, v8, v9, v89]
// [Asm]   fmv.d.x fv90, v89  # live: [v25, v10, zero, v8, fv90, v9]
// [Asm]   fsd fv90, 8(v25)  # live: [v10, zero, v8, v9]
// [Asm]   ld v27, 8(v9)  # live: [v10, zero, v27, v8, v9]
// [Asm]   li v86, 4621256167635550208  # live: [v10, zero, v27, v8, v86, v9]
// [Asm]   fmv.d.x fv87, v86  # live: [v10, zero, v27, v8, fv87, v9]
// [Asm]   fsd fv87, 0(v27)  # live: [v10, zero, v8, v9]
// [Asm]   ld v29, 8(v9)  # live: [v10, zero, v29, v8, v9]
// [Asm]   li v83, 4621819117588971520  # live: [v10, zero, v29, v8, v83, v9]
// [Asm]   fmv.d.x fv84, v83  # live: [v10, zero, v29, v8, fv84, v9]
// [Asm]   fsd fv84, 8(v29)  # live: [v10, zero, v8, v9]
// [Asm]   ld v31, 16(v9)  # live: [v10, zero, v8, v31, v9]
// [Asm]   li v80, 4622382067542392832  # live: [v10, zero, v8, v80, v31, v9]
// [Asm]   fmv.d.x fv81, v80  # live: [v10, zero, v8, v31, v9, fv81]
// [Asm]   fsd fv81, 0(v31)  # live: [v10, zero, v8, v9]
// [Asm]   ld v33, 16(v9)  # live: [v10, zero, v8, v9, v33]
// [Asm]   li v77, 4622945017495814144  # live: [v10, zero, v77, v8, v9, v33]
// [Asm]   fmv.d.x fv78, v77  # live: [fv78, v10, zero, v8, v9, v33]
// [Asm]   fsd fv78, 8(v33)  # live: [v10, zero, v8, v9]
// [Asm]   # save_ctx2  # live: [v10, zero, v8, v9]
// [Asm]   li v74, 2  # live: [v10, zero, v8, v74, v9]
// [Asm]   mv a0, v74  # live: [v10, zero, a0, v8, v74, v9]
// [Asm]   li v75, 3  # live: [v10, v75, zero, a0, v8, v74, v9]
// [Asm]   mv a1, v75  # live: [v10, zero, a0, v8, a1, v74, v9]
// [Asm]   mv a2, v74  # live: [v10, zero, a0, v8, a2, a1, v9]
// [Asm]   mv a3, v8  # live: [v10, zero, a0, a2, a1, a3, v9]
// [Asm]   mv a4, v9  # live: [v10, zero, a0, a4, a2, a1, a3]
// [Asm]   mv a5, v10  # live: [v10, a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call mul68_3  # live: [v10, zero, a0]
// [Asm]   mv v35, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   ld v36, 0(v10)  # live: [v10, zero, v36]
// [Asm]   fld fv37, 0(v36)  # live: [fv37, v10, zero]
// [Asm]   fcvt.w.d v38, fv37, rtz  # live: [v38, v10, zero]
// [Asm]   # save_ctx2  # live: [v38, v10, zero]
// [Asm]   mv a0, v38  # live: [v10, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v10, zero, a0]
// [Asm]   mv v39, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   # save_ctx2  # live: [v10, zero]
// [Asm]   call minimbt_print_endline  # live: [v10, zero, a0]
// [Asm]   mv v40, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   ld v41, 0(v10)  # live: [v41, v10, zero]
// [Asm]   fld fv42, 8(v41)  # live: [v10, zero, fv42]
// [Asm]   fcvt.w.d v43, fv42, rtz  # live: [v43, v10, zero]
// [Asm]   # save_ctx2  # live: [v43, v10, zero]
// [Asm]   mv a0, v43  # live: [v10, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v10, zero, a0]
// [Asm]   mv v44, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   # save_ctx2  # live: [v10, zero]
// [Asm]   call minimbt_print_endline  # live: [v10, zero, a0]
// [Asm]   mv v45, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   ld v46, 8(v10)  # live: [v46, v10, zero]
// [Asm]   fld fv47, 0(v46)  # live: [v10, fv47, zero]
// [Asm]   fcvt.w.d v48, fv47, rtz  # live: [v10, v48, zero]
// [Asm]   # save_ctx2  # live: [v10, v48, zero]
// [Asm]   mv a0, v48  # live: [v10, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v10, zero, a0]
// [Asm]   mv v49, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   # save_ctx2  # live: [v10, zero]
// [Asm]   call minimbt_print_endline  # live: [v10, zero, a0]
// [Asm]   mv v50, a0  # live: [v10, zero]
// [Asm]   # restore_ctx2  # live: [v10, zero]
// [Asm]   ld v51, 8(v10)  # live: [zero, v51]
// [Asm]   fld fv52, 8(v51)  # live: [fv52, zero]
// [Asm]   fcvt.w.d v53, fv52, rtz  # live: [v53, zero]
// [Asm]   # save_ctx2  # live: [v53, zero]
// [Asm]   mv a0, v53  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v54, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] make_arr103_12:
// [Asm] # block info: defs: [v2, t1, v14, v13, v0, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v14, v5, v10, a0, v13, v0, a2, a1, s11, s10, v8, v4, v6, v2], upward_exposed: [a2, a1, s11, s10, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, s10, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .make_arr103_12_0:
// [Asm]   # save_ctx1  # live: [a0, a2, a1, s11, s10]
// [Asm]   mv v0, s10  # live: [a0, v0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [v0, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, v0, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, v0, v4, s11, v2]
// [Asm]   ld v5, 8(v0)  # live: [v3, v5, v4, s11, v2]
// [Asm]   slliw v13, v2, 3  # live: [v3, v5, v13, v4, s11, v2]
// [Asm]   sub v14, s11, v13  # live: [v3, v5, v14, v4, v2]
// [Asm]   andi v6, v14, -8  # live: [v3, v5, v4, v6, v2]
// [Asm]   mv s11, v6  # live: [v3, v5, v4, v6, v2]
// [Asm]   mv a1, v2  # live: [v3, v5, v4, v6, a1, v2]
// [Asm]   mv a0, v6  # live: [v3, v5, a0, v4, v6, a1, v2]
// [Asm]   mv a2, v4  # live: [v3, v5, a0, a2, v6, a1, v2]
// [Asm]   call memseti64  # live: [v2, v6, v5, v3]
// [Asm]   addi v8, v2, -1  # live: [v8, v6, v5, v3]
// [Asm]   mv s10, v5  # live: [v8, v6, v5, v3]
// [Asm]   ld v10, 0(v5)  # live: [v8, v6, v10, v3]
// [Asm]   # save_ctx2  # live: [v8, v6, v10, v3]
// [Asm]   mv a0, v8  # live: [v6, v10, a0, v3]
// [Asm]   mv a1, v3  # live: [v6, a1, v10, a0]
// [Asm]   mv a2, v6  # live: [a2, v6, a1, v10, a0]
// [Asm]   jalr v10  # live: [v6, a0]
// [Asm]   mv v9, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] loop31_0:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop31_0_4:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop31_0_0:
// [Asm] # control
// [Asm]   blt v10, zero, .loop31_0_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [fv24, v16, v46, v49, v21, v10, v26, fv20, v41, v37, v32, v43, v17, v31, v44, v28, fv22, v29, v50, v35, v19, v47, v38, fv18, v34, v40], uses: [fv24, v16, v13, v26, fv20, v41, v32, v12, v44, v28, fv22, v29, v50, v8, v19, v47, v34, v11, v46, v49, v10, v21, v37, v43, v17, v31, v9, v35, v38, fv18, v40], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop31_0_1:
// [Asm]   slliw v49, v8, 3  # live: [v11, v10, v49, v13, zero, v8, v12, v9]
// [Asm]   add v50, v13, v49  # live: [v11, v10, v13, zero, v50, v8, v12, v9]
// [Asm]   ld v16, 0(v50)  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   slliw v46, v8, 3  # live: [v11, v16, v46, v10, v13, zero, v8, v12, v9]
// [Asm]   add v47, v13, v46  # live: [v11, v16, v10, v13, zero, v8, v47, v12, v9]
// [Asm]   ld v17, 0(v47)  # live: [v11, v16, v10, v13, zero, v8, v17, v12, v9]
// [Asm]   slliw v43, v9, 3  # live: [v11, v16, v10, v13, zero, v8, v17, v43, v12, v9]
// [Asm]   add v44, v17, v43  # live: [v11, v16, v10, v13, zero, v8, v12, v44, v9]
// [Asm]   fld fv18, 0(v44)  # live: [v11, v16, v10, v13, zero, v8, v12, fv18, v9]
// [Asm]   slliw v40, v8, 3  # live: [v11, v16, v10, v13, zero, v8, v12, fv18, v9, v40]
// [Asm]   add v41, v11, v40  # live: [v11, v16, v10, v13, zero, v8, v41, v12, fv18, v9]
// [Asm]   ld v19, 0(v41)  # live: [v11, v16, v10, v13, zero, v8, v19, v12, fv18, v9]
// [Asm]   slliw v37, v10, 3  # live: [v11, v16, v10, v13, zero, v8, v19, v37, v12, fv18, v9]
// [Asm]   add v38, v19, v37  # live: [v11, v16, v10, v13, zero, v8, v38, v12, fv18, v9]
// [Asm]   fld fv20, 0(v38)  # live: [v11, v16, v10, v13, zero, v8, fv20, v12, fv18, v9]
// [Asm]   slliw v34, v10, 3  # live: [v11, v16, v10, v13, zero, v8, fv20, v12, fv18, v9, v34]
// [Asm]   add v35, v12, v34  # live: [v11, v16, v10, v13, zero, v8, fv20, v35, v12, fv18, v9]
// [Asm]   ld v21, 0(v35)  # live: [v11, v16, v10, v21, v13, zero, v8, fv20, v12, fv18, v9]
// [Asm]   slliw v31, v9, 3  # live: [v11, v16, v10, v21, v13, zero, v8, fv20, v12, fv18, v31, v9]
// [Asm]   add v32, v21, v31  # live: [v11, v16, v10, v13, zero, v8, fv20, v32, v12, fv18, v9]
// [Asm]   fld fv22, 0(v32)  # live: [v11, fv22, v16, v10, v13, zero, v8, fv20, v12, fv18, v9]
// [Asm]   fmadd.d fv24, fv20, fv22, fv18  # live: [v11, fv24, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   slliw v28, v9, 3  # live: [v11, fv24, v16, v10, v13, zero, v8, v12, v28, v9]
// [Asm]   add v29, v16, v28  # live: [v11, fv24, v10, v13, zero, v29, v8, v12, v9]
// [Asm]   fsd fv24, 0(v29)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v26, v10, -1  # live: [v11, v13, zero, v26, v8, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v8  # live: [v11, v13, zero, v26, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v13, zero, v26, v8, v12, v9]
// [Asm]   mv v10, v26  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop31_0_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop31_0_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop31_0_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(3), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(3), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("mul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memsetf64
// [Main]   .type memsetf64, @function
// [Main] memsetf64:
// [Main]   blez a1, .memsetf64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memsetf64_b0:
// [Main]   fsd fa0, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memsetf64_b0
// [Main] .memsetf64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr89_10
// [Main]   .type init_arr89_10, @function
// [Main] # leaf false
// [Main] init_arr89_10:
// [Main] .init_arr89_10_4:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv a3, s10
// [Main]   mv s0, a1
// [Main]   mv a1, a2
// [Main]   mv s1, a0
// [Main]   mv s2, a1
// [Main] 
// [Main] .init_arr89_10_0:
// [Main]   blt s1, zero, .init_arr89_10_2
// [Main] 
// [Main] .init_arr89_10_1:
// [Main]   slliw a0, s0, 3
// [Main]   sub a0, s11, a0
// [Main]   andi s3, a0, -8
// [Main]   mv s11, s3
// [Main]   fmv.d.x fa0, zero
// [Main]   mv a1, s0
// [Main]   mv a0, s3
// [Main]   call memsetf64
// [Main]   slliw a0, s1, 3
// [Main]   add a0, s2, a0
// [Main]   sd s3, 0(a0)
// [Main]   addi a0, s1, -1
// [Main]   mv s1, a0
// [Main]   j .init_arr89_10_0
// [Main] 
// [Main] .init_arr89_10_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr89_10_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop228_1
// [Main]   .type loop228_1, @function
// [Main] # leaf false
// [Main] loop228_1:
// [Main] .loop228_1_4:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main]   mv s5, a5
// [Main] 
// [Main] .loop228_1_0:
// [Main]   blt s2, zero, .loop228_1_2
// [Main] 
// [Main] .loop228_1_1:
// [Main]   addi a2, s1, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s2
// [Main]   mv a3, s3
// [Main]   mv a4, s4
// [Main]   mv a5, s5
// [Main]   call loop31_0
// [Main]   addi a0, s2, -1
// [Main]   mv s2, a0
// [Main]   j .loop228_1_0
// [Main] 
// [Main] .loop228_1_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop228_1_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop148_2
// [Main]   .type loop148_2, @function
// [Main] # leaf false
// [Main] loop148_2:
// [Main] .loop148_2_4:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s3, a0
// [Main]   mv s5, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .loop148_2_0:
// [Main]   blt s3, zero, .loop148_2_2
// [Main] 
// [Main] .loop148_2_1:
// [Main]   addi a2, s1, -1
// [Main]   mv a0, s3
// [Main]   mv a1, s5
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call loop228_1
// [Main]   addi a0, s3, -1
// [Main]   mv s3, a0
// [Main]   j .loop148_2_0
// [Main] 
// [Main] .loop148_2_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop148_2_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main85l0_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mul68_3
// [Main]   .type mul68_3, @function
// [Main] # leaf false
// [Main] mul68_3:
// [Main] .mul68_3_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, a0, -1
// [Main]   call loop148_2
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main85l0_4
// [Main]   .type main85l0_4, @function
// [Main] # leaf false
// [Main] main85l0_4:
// [Main] .main85l0_4_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   addi a0, s11, 0
// [Main]   andi s0, a0, -8
// [Main]   mv s11, s0
// [Main]   fmv.d.x fa0, zero
// [Main]   addi a0, s11, -8
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, init_arr89_10
// [Main]   sd a1, 0(a0)
// [Main]   addi a1, s11, -16
// [Main]   andi s1, a1, -8
// [Main]   mv s11, s1
// [Main]   la a1, make_arr103_12
// [Main]   sd a1, 0(s1)
// [Main]   sd a0, 8(s1)
// [Main]   mv s10, s1
// [Main]   ld a3, 0(s1)
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   jalr a3
// [Main]   mv s2, a0
// [Main]   mv s10, s1
// [Main]   ld a3, 0(s1)
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   jalr a3
// [Main]   mv s3, a0
// [Main]   mv s10, s1
// [Main]   ld a3, 0(s1)
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   jalr a3
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s3)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s3)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s3)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s3)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s3)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s3)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, a0
// [Main]   mv a3, s2
// [Main]   mv a4, s3
// [Main]   mv a5, s0
// [Main]   call mul68_3
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl make_arr103_12
// [Main]   .type make_arr103_12, @function
// [Main] # leaf false
// [Main] make_arr103_12:
// [Main] .make_arr103_12_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv a3, s10
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   ld s2, 8(a3)
// [Main]   slliw a0, s0, 3
// [Main]   sub a0, s11, a0
// [Main]   andi s3, a0, -8
// [Main]   mv s11, s3
// [Main]   mv a1, s0
// [Main]   mv a0, s3
// [Main]   call memseti64
// [Main]   addi a0, s0, -1
// [Main]   mv s10, s2
// [Main]   ld a3, 0(s2)
// [Main]   mv a1, s1
// [Main]   mv a2, s3
// [Main]   jalr a3
// [Main]   mv a0, s3
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop31_0
// [Main]   .type loop31_0, @function
// [Main] # leaf true
// [Main] loop31_0:
// [Main] .loop31_0_4:
// [Main]   mv a7, a0
// [Main]   mv a6, a1
// [Main]   mv a1, a3
// [Main]   mv a3, a4
// [Main]   mv a0, a5
// [Main]   mv a4, a7
// [Main]   mv a5, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .loop31_0_0:
// [Main]   blt a2, zero, .loop31_0_2
// [Main] 
// [Main] .loop31_0_1:
// [Main]   slliw a0, a4, 3
// [Main]   add a0, a3, a0
// [Main]   ld a0, 0(a0)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a3, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa0, 0(a7)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a1, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a2, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa1, 0(a7)
// [Main]   slliw a7, a2, 3
// [Main]   add a7, a5, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa2, 0(a7)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw a7, a6, 3
// [Main]   add a0, a0, a7
// [Main]   fsd fa0, 0(a0)
// [Main]   addi a0, a2, -1
// [Main]   mv a2, a0
// [Main]   j .loop31_0_0
// [Main] 
// [Main] .loop31_0_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop31_0_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function make_arr103_12
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m0, fills=[Init(val=FnParam(fref=f12, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f12, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Apply(ty=Unit, f=FreeVar(fvref=^1), args=[Insn(iref=%1), FnParam(fref=f12, fpref=$f.1), Mem(fref=f12, mref=m0)])
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name FreeVar(fvref=^1) -> $^1
// [Wasm] Lowering control Return(args=[Mem(fref=f12, mref=m0)])
// [Wasm] Get Local name Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f12, fpref=$f.2) -> $$f.2
// [Wasm] Local FreeVar(fvref=^1) -> $^1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f12, mref=m0) -> $f12.m0
// [Wasm] Lowered function make_arr103_12 to wasm
// [Wasm] Lowering function main85l0_4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32, Array(elem=Array(elem=Double))], ty=Unit), mref=m1, fills=[Field(index=0, val=Fn(fref=f10))])
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=ClosureFn(params=[Int32, Int32, Array(elem=Double)], ty=Array(elem=Array(elem=Double))), mref=m2, fills=[Field(index=0, val=Fn(fref=f12)), Field(index=1, val=Mem(fref=f4, mref=m1))])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Apply(ty=Array(elem=Array(elem=Double)), f=Mem(fref=f4, mref=m2), args=[Int32(val=2), Int32(val=3), Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Apply(ty=Array(elem=Array(elem=Double)), f=Mem(fref=f4, mref=m2), args=[Int32(val=3), Int32(val=2), Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Apply(ty=Array(elem=Array(elem=Double)), f=Mem(fref=f4, mref=m2), args=[Int32(val=2), Int32(val=2), Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%6), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%8), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%4), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%4), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%4), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%4), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%4), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%4), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%28), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=2), Int32(val=3), Int32(val=2), Insn(iref=%3), Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%5), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%31), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%33)])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%5), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%36), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%37)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%38)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%5), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%41), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%42)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%43)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%5), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%46), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%47)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%48)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main85l0_4 to wasm
// [Wasm] Lowering function loop228_1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function loop228_1 to wasm
// [Wasm] Lowering function init_arr89_10
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=0))])
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr), val=Mem(fref=f10, mref=m0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f10, fpref=$f.0), FnParam(fref=f10, fpref=$f.1), FnParam(fref=f10, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f10, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f10, mref=m0) -> $f10.m0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr89_10 to wasm
// [Wasm] Lowering function loop148_2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function loop148_2 to wasm
// [Wasm] Lowering function mul68_3
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Insn(iref=%0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function mul68_3 to wasm
// [Wasm] Lowering function T$start_14
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_14 to wasm
// [Wasm] Lowering function loop31_0
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%2), offset=BlockParam(bref=b0, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%4), offset=BlockParam(bref=b0, bpref=$b.2), width=@64))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.4), offset=BlockParam(bref=b0, bpref=$b.2), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%6), offset=BlockParam(bref=b0, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%3), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%1), offset=BlockParam(bref=b0, bpref=$b.1), width=@64), val=Insn(iref=%9))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%11), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function loop31_0 to wasm
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), Insn(iref=%3), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %4: Apply(ty=Unit, f=Self(fref=f10), args=[Insn(iref=%3), FnParam(fref=f10, fpref=$f.1), FnParam(fref=f10, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f2, args=[Insn(iref=%3), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%11), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5)])
