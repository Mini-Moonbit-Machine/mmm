// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.341 ->   call main.341
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b2, bpref=$b.0) -> v8, BlockParam(bref=b2, bpref=$b.4) -> v12, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.5) -> v7, Insn(iref=%9) -> fv23, BlockParam(bref=b2, bpref=$b.1) -> v9, Insn(iref=%8) -> fv22, Insn(iref=%10) -> v24, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b2, bpref=$b.2) -> v10, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> fv19, Insn(iref=%0) -> v14, Insn(iref=%4) -> v18, Insn(iref=%3) -> fv17, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, BlockParam(bref=b2, bpref=$b.5) -> v13, Insn(iref=%7) -> fv21, BlockParam(bref=b5, bpref=$b.0) -> v15, FnParam(fref=f0, fpref=$f.4) -> v6, Insn(iref=%1) -> v16, Insn(iref=%11) -> v25, BlockParam(bref=b2, bpref=$b.3) -> v11, Insn(iref=%6) -> v20
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%7)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.2)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v10, v13, zero, v8, v45, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v16, v10, v13, zero, v42, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v43, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9, fv17, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9, fv17, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v10, v18, v13, zero, v8, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v16, v10, v18, v13, zero, v8, v36, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v37, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17, v33]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v16, v10, v13, zero, v20, v8, fv19, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v16, v10, v13, zero, v20, v30, v8, fv19, v12, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv19, v12, v31, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v11, fv23, v16, v10, v13, zero, v27, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v11, fv23, v10, v13, zero, v8, v12, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v25]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop3.340"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r33 [label="v3 ← a6", color=green];
// [Asm]   r9 [label="v9 ← a6", color=green];
// [Asm]   r26 [label="v25 ← a0", color=green];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r13 [label="v43 ← a7", color=green];
// [Asm]   r4 [label="v10 ← a2", color=green];
// [Asm]   r29 [label="a4", color=blue];
// [Asm]   r35 [label="v5 ← a1", color=green];
// [Asm]   r7 [label="v8 ← a4", color=green];
// [Asm]   r10 [label="v46 ← a0", color=green];
// [Asm]   r8 [label="v12 ← a5", color=green];
// [Asm]   r5 [label="v13 ← a3", color=green];
// [Asm]   r36 [label="v6 ← a3", color=green];
// [Asm]   r24 [label="v27 ← a7", color=green];
// [Asm]   r32 [label="a3", color=blue];
// [Asm]   r15 [label="v40 ← a7", color=green];
// [Asm]   r31 [label="a1", color=blue];
// [Asm]   r17 [label="v36 ← t0", color=green];
// [Asm]   r12 [label="v42 ← a7", color=green];
// [Asm]   r37 [label="v7 ← a0", color=green];
// [Asm]   r20 [label="v34 ← a7", color=green];
// [Asm]   r23 [label="v31 ← a7", color=green];
// [Asm]   r3 [label="v11 ← a1", color=green];
// [Asm]   r27 [label="v2 ← a7", color=green];
// [Asm]   r1 [label="v15 ← a0", color=green];
// [Asm]   r28 [label="a5", color=blue];
// [Asm]   r11 [label="v16 ← a0", color=green];
// [Asm]   r34 [label="v4 ← a2", color=green];
// [Asm]   r22 [label="v30 ← t0", color=green];
// [Asm]   r14 [label="v39 ← a7", color=green];
// [Asm]   r30 [label="a2", color=blue];
// [Asm]   r25 [label="v28 ← a0", color=green];
// [Asm]   r2 [label="v45 ← a0", color=green];
// [Asm]   r16 [label="v18 ← a7", color=green];
// [Asm]   r18 [label="v37 ← a7", color=green];
// [Asm]   r19 [label="v33 ← a7", color=green];
// [Asm]   r21 [label="v20 ← a7", color=green];
// [Asm]   r5 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r27 -- r36;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r5 -- r18;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r3 -- r37;
// [Asm]   r27 -- r28;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r11 -- r18;
// [Asm]   r3 -- r26;
// [Asm]   r27 -- r34;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r8;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r9 -- r23;
// [Asm]   r29 -- r33;
// [Asm]   r9 -- r12;
// [Asm]   r8 -- r23;
// [Asm]   r28 -- r33;
// [Asm]   r2 -- r5;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r32 -- r34;
// [Asm]   r35 -- r37;
// [Asm]   r11 -- r15;
// [Asm]   r27 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r4 -- r14;
// [Asm]   r27 -- r31;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r11 -- r20;
// [Asm]   r34 -- r35;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r7 -- r24;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r7 -- r20;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r33 -- r36;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r28 -- r36;
// [Asm]   r8 -- r20;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r4 -- r36;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r27 -- r33;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r9 -- r21;
// [Asm]   r28 -- r34;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r21;
// [Asm]   r9 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r5 -- r8;
// [Asm]   r27 -- r29;
// [Asm]   r27 -- r32;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r4 -- r35;
// [Asm]   r16 -- r17;
// [Asm]   r27 -- r30;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r37;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r21 -- r22;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r9;
// [Asm]   r27 -- r37;
// [Asm]   r30 -- r33;
// [Asm]   r29 -- r35;
// [Asm]   r36 -- r37;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r4 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r8 -- r19;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r34 -- r37;
// [Asm]   r7 -- r33;
// [Asm]   r34 -- r36;
// [Asm]   r7 -- r11;
// [Asm]   r28 -- r35;
// [Asm]   r9 -- r37;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r29 -- r34;
// [Asm]   r9 -- r16;
// [Asm]   r3 -- r36;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r3;
// [Asm]   r11 -- r21;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:a0-> 1:v15-> 2:v45-> 3:v11-> 4:v10-> 5:v13-> 6:zero-> 7:v8-> 8:v12-> 9:v9-> 10:v46-> 11:v16-> 12:v42-> 13:v43-> 14:v39-> 15:v40-> 16:v18-> 17:v36-> 18:v37-> 19:v33-> 20:v34-> 21:v20-> 22:v30-> 23:v31-> 24:v27-> 25:v28-> 26:v25-> 37:v7-> 36:v6-> 35:v5-> 34:v4-> 33:v3-> 27:v2-> 28:a5-> 29:a4-> 32:a3-> 30:a2-> 31:a1"
// [Asm]   comment = "v3<-a6;v9<-a6;v25<-a0;v43<-a7;v10<-a2;v5<-a1;v8<-a4;v46<-a0;v12<-a5;v13<-a3;v6<-a3;v27<-a7;v40<-a7;v36<-t0;v42<-a7;v7<-a0;v34<-a7;v31<-a7;v11<-a1;v2<-a7;v15<-a0;v16<-a0;v4<-a2;v30<-t0;v39<-a7;v28<-a0;v45<-a0;v18<-a7;v37<-a7;v33<-a7;v20<-a7;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop3.340"];
// [Asm]   r0 [label="fv17 ← fa0", color=green];
// [Asm]   r2 [label="fv21 ← fa2", color=green];
// [Asm]   r1 [label="fv19 ← fa1", color=green];
// [Asm]   r3 [label="fv23 ← fa0", color=green];
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv17-> 1:fv19-> 2:fv21-> 3:fv23"
// [Asm]   comment = "fv17<-fa0;fv21<-fa2;fv19<-fa1;fv23<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   blt v10, zero, .loop3.340_4 ->   blt a2, zero, .loop3.340_4
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   slliw v45, v8, 3 ->   slliw a0, a4, 3
// [Asm] subst   add v46, v13, v45 ->   add a0, a3, a0
// [Asm] subst   ld v16, 0(v46) ->   ld a0, 0(a0)
// [Asm] subst   slliw v42, v9, 3 ->   slliw a7, a6, 3
// [Asm] subst   add v43, v16, v42 ->   add a7, a0, a7
// [Asm] subst   fld fv17, 0(v43) ->   fld fa0, 0(a7)
// [Asm] subst   slliw v39, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v40, v11, v39 ->   add a7, a1, a7
// [Asm] subst   ld v18, 0(v40) ->   ld a7, 0(a7)
// [Asm] subst   slliw v36, v10, 3 ->   slliw t0, a2, 3
// [Asm] subst   add v37, v18, v36 ->   add a7, a7, t0
// [Asm] subst   fld fv19, 0(v37) ->   fld fa1, 0(a7)
// [Asm] subst   slliw v33, v10, 3 ->   slliw a7, a2, 3
// [Asm] subst   add v34, v12, v33 ->   add a7, a5, a7
// [Asm] subst   ld v20, 0(v34) ->   ld a7, 0(a7)
// [Asm] subst   slliw v30, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v31, v20, v30 ->   add a7, a7, t0
// [Asm] subst   fld fv21, 0(v31) ->   fld fa2, 0(a7)
// [Asm] subst   fmadd.d fv23, fv19, fv21, fv17 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v27, v9, 3 ->   slliw a7, a6, 3
// [Asm] subst   add v28, v16, v27 ->   add a0, a0, a7
// [Asm] subst   fsd fv23, 0(v28) ->   fsd fa0, 0(a0)
// [Asm] subst   addi v25, v10, -1 ->   addi a0, a2, -1
// [Asm] subst   mv v10, v25 ->   mv a2, a0
// [Asm] subst   j .loop3.340_2 ->   j .loop3.340_2
// [Asm] subst   mv v2, a0 ->   mv a7, a0
// [Asm] subst   mv v3, a1 ->   mv a6, a1
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, a4 ->   mv a3, a4
// [Asm] subst   mv v7, a5 ->   mv a0, a5
// [Asm] subst   mv v8, v2 ->   mv a4, a7
// [Asm] subst   mv v12, v6 ->   mv a5, a3
// [Asm] subst   mv v13, v7 ->   mv a3, a0
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v14, BlockParam(bref=b2, bpref=$b.0) -> v9, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v13, Insn(iref=%2) -> v12, Insn(iref=%1) -> v8, BlockParam(bref=b2, bpref=$b.1) -> v10, Mem(fref=f1, mref=m0) -> v5, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v6, BlockParam(bref=b2, bpref=$b.2) -> v11, Insn(iref=%5) -> v16, Insn(iref=%0) -> v7, Insn(iref=%4) -> v15
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v10, zero, v20, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v5, v10, zero, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, zero, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v5, v10, zero, v6, s11, v9]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v10, v18, zero, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v5, v10, zero, v19, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v5, v16, v10, zero, s11]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move_origin: [v16]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v5]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, zero, v23, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, zero, v4, a1, s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, zero, v9, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, s11, zero, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of make_arr.342"];
// [Asm]   r0 [label="v20 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v10 ← a1", color=green];
// [Asm]   r9 [label="v18 ← a4", color=green];
// [Asm]   r26 [label="t2", color=blue];
// [Asm]   r27 [label="t3", color=blue];
// [Asm]   r6 [label="v9 ← a3", color=green];
// [Asm]   r13 [label="v2 ← s2", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v11 ← a2", color=green];
// [Asm]   r29 [label="v8 ← a0", color=green];
// [Asm]   r28 [label="t4", color=blue];
// [Asm]   r11 [label="v16 ← a0", color=green];
// [Asm]   r7 [label="v6 ← a0", color=green];
// [Asm]   r10 [label="v19 ← a4", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r5 [label="s11", color=blue];
// [Asm]   r24 [label="t0", color=blue];
// [Asm]   r15 [label="v3 ← s1", color=green];
// [Asm]   r25 [label="t1", color=blue];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r16 [label="v4 ← a2", color=green];
// [Asm]   r18 [label="a0", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r17 [label="v23 ← a0", color=green];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r12 [label="v13 ← a0", color=green];
// [Asm]   r5 -- r21;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r13 -- r28;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r15 -- r18;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r15 -- r23;
// [Asm]   r13 -- r22;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r14 -- r15;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r4 -- r16;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r14 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r15 -- r26;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r13 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r13 -- r14;
// [Asm]   r8 -- r18;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r1 -- r3;
// [Asm]   r15 -- r20;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r15 -- r19;
// [Asm]   r2 -- r27;
// [Asm]   r13 -- r27;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v20-> 1:v11-> 3:v10-> 4:zero-> 5:s11-> 6:v9-> 2:v5-> 7:v6-> 9:v18-> 10:v19-> 8:a1-> 11:v16-> 15:v3-> 13:v2-> 14:a2-> 18:a0-> 16:v4-> 17:v23-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:t0-> 25:t1-> 26:t2-> 27:t3-> 28:t4-> 29:v8-> 12:v13"
// [Asm]   comment = "v20<-a0;v10<-a1;v18<-a4;v9<-a3;v2<-s2;v11<-a2;v8<-a0;v16<-a0;v6<-a0;v19<-a4;v3<-s1;v5<-s0;v4<-a2;v23<-a0;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of make_arr.342"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v20, v10, 3 ->   slliw a0, a1, 3
// [Asm] subst   sub v6, s11, v20 ->   sub a0, s11, a0
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a0, -8
// [Asm] subst   slliw v18, v9, 3 ->   slliw a4, a3, 3
// [Asm] subst   add v19, v11, v18 ->   add a4, a2, a4
// [Asm] subst   sd v6, 0(v19) ->   sd a0, 0(a4)
// [Asm] subst   addi v16, v9, -1 ->   addi a0, a3, -1
// [Asm] subst   mv v9, v16 ->   mv a3, a0
// [Asm] subst   j .make_arr.342_2 ->   j .make_arr.342_2
// [Asm] subst   mv v13, v5 ->   mv a0, s0
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   slliw v23, v2, 3 ->   slliw a0, s2, 3
// [Asm] subst   sub v5, s11, v23 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s2
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v8, v2, -1 ->   addi a0, s2, -1
// [Asm] subst   mv v9, v8 ->   mv a3, a0
// [Asm] subst   mv v10, v3 ->   mv a1, s1
// [Asm] subst   mv v11, v5 ->   mv a2, s0
// [Asm] subst   blt v9, zero, .make_arr.342_4 ->   blt a3, zero, .make_arr.342_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%41) -> v44, Insn(iref=%33) -> v69, Insn(iref=%8) -> v11, BlockParam(bref=b10, bpref=$b.0) -> v58, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%25) -> v28, Insn(iref=%39) -> v42, Insn(iref=%4) -> v7, Insn(iref=%49) -> v52, Insn(iref=%42) -> fv45, Insn(iref=%26) -> v29, Insn(iref=%31) -> v66, Insn(iref=%38) -> v41, Insn(iref=%16) -> v19, Self(fref=f2) -> v0, BlockParam(bref=b2, bpref=$b.1) -> v33, Insn(iref=%53) -> v56, Insn(iref=%54) -> v57, BlockParam(bref=b2, bpref=$b.2) -> v34, Insn(iref=%5) -> v8, Insn(iref=%19) -> v22, Insn(iref=%13) -> v16, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%7) -> v10, BlockParam(bref=b2, bpref=$b.5) -> v37, Insn(iref=%23) -> v26, Insn(iref=%48) -> v51, Insn(iref=%20) -> v23, BlockParam(bref=b2, bpref=$b.3) -> v35, Insn(iref=%34) -> v70, Insn(iref=%36) -> v39, BlockParam(bref=b6, bpref=$b.1) -> v61, BlockParam(bref=b2, bpref=$b.0) -> v32, BlockParam(bref=b2, bpref=$b.4) -> v36, BlockParam(bref=b6, bpref=$b.3) -> v63, Insn(iref=%50) -> v53, Insn(iref=%14) -> v17, Insn(iref=%51) -> v54, BlockParam(bref=b6, bpref=$b.4) -> v64, Insn(iref=%52) -> fv55, Insn(iref=%44) -> v47, Insn(iref=%32) -> v68, BlockParam(bref=b6, bpref=$b.0) -> v60, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%6) -> v9, Insn(iref=%35) -> v67, Insn(iref=%28) -> v31, Insn(iref=%46) -> v49, Insn(iref=%9) -> v12, Insn(iref=%24) -> v27, Insn(iref=%37) -> fv40, Insn(iref=%45) -> v48, Insn(iref=%29) -> v38, Insn(iref=%47) -> fv50, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%2) -> v5, BlockParam(bref=b6, bpref=$b.5) -> v65, Insn(iref=%43) -> v46, Insn(iref=%30) -> v59, BlockParam(bref=b6, bpref=$b.2) -> v62, Insn(iref=%21) -> v24, Insn(iref=%40) -> v43, Insn(iref=%12) -> v15
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b6, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v59]
// [Asm] live_set: [v36, v32, v37, v33, zero, v35, v59, v6, v34]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v36, v32, v37, v33, v60, zero, v35, v59, v6, v34]
// [Asm] move_origin: [v32]
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v36, v32, v37, v33, v60, zero, v35, v59, v6, v61, v34]
// [Asm] move_origin: [v33]
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v36, v32, v37, v33, v60, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v59]
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v62, v36, v32, v37, v33, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v35]
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v62, v36, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v36]
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v37]
// [Asm] defined: v65 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v62, a0, v36, v65, v32, v37, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm] move_origin: [v60]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v62, a0, v36, v65, v32, v37, a1, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm] move_origin: [v62]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v62, a0, v36, v65, v32, v37, a2, a1, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v68]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v62, a0, v36, v65, v32, v37, a2, a1, a3, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v63]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v62, a0, v36, v65, v32, v37, a2, a1, a3, v33, v64, v60, v63, zero, a4, v35, v6, v61, v34]
// [Asm] move_origin: [v64]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v62, a5, a0, v36, v65, v32, v37, a2, a1, a3, v33, v64, v60, v63, zero, a4, v35, v6, v61, v34]
// [Asm] move_origin: [v65]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v62, a0, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v69]
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [a0]
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: []
// [Asm] defs: [v70]
// [Asm] live_set: [v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v70, v61, v34]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: []
// [Asm] live_set: [v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v70, v61, v34]
// [Asm] move_origin: [v60]
// [Asm] defs: []
// [Asm] live_set: [v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v70, v61, v34]
// [Asm] move_origin: [v61]
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v70]
// [Asm] defined: v62 is X
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v63]
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v64]
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: [v65]
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v58]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v34, v33]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [fv40]
// [Asm] live_set: [v6, zero, fv40]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v41, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v41, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v41]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [v6, v44, zero]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv45]
// [Asm] live_set: [v6, fv45, zero]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, v46, zero]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v46, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v46]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v48]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v48 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v49]
// [Asm] live_set: [v6, v49, zero]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [fv50]
// [Asm] live_set: [fv50, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: fv50 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v6, zero, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v51]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v51]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v52]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v52 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v53]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v53 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v54]
// [Asm] live_set: [zero, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [fv55]
// [Asm] live_set: [fv55, zero]
// [Asm] move_origin: []
// [Asm] defined: fv55 is F
// [Asm] defs: [v56]
// [Asm] live_set: [v56, zero]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v56, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v56]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v57]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v58]
// [Asm] move_origin: [zero]
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v140]
// [Asm] live_set: [zero, v140, v2]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [v140]
// [Asm] defined: a0 is X
// [Asm] defs: [v141]
// [Asm] live_set: [zero, a0, v141, v2]
// [Asm] move_origin: []
// [Asm] defined: v141 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, v2]
// [Asm] move_origin: [v141]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v137]
// [Asm] live_set: [zero, v4, v137, v2]
// [Asm] move_origin: []
// [Asm] defined: v137 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: [v137]
// [Asm] defined: a0 is X
// [Asm] defs: [v138]
// [Asm] live_set: [zero, a0, v4, v138, v2]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v4, a1, v2]
// [Asm] move_origin: [v138]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v135]
// [Asm] live_set: [v5, zero, v4, v135, v2]
// [Asm] move_origin: []
// [Asm] defined: v135 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v135, v2]
// [Asm] move_origin: [v135]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v2]
// [Asm] move_origin: [v135]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v132]
// [Asm] live_set: [v5, zero, v7, v4, v6, v132]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: [fv133]
// [Asm] live_set: [v5, zero, v7, v4, v6, fv133]
// [Asm] move_origin: []
// [Asm] defined: fv133 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v129]
// [Asm] live_set: [v5, zero, v4, v6, v9, v129]
// [Asm] move_origin: []
// [Asm] defined: v129 is X
// [Asm] defs: [fv130]
// [Asm] live_set: [v5, fv130, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: fv130 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v11, v5, zero, v126, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: [fv127]
// [Asm] live_set: [fv127, v11, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv127 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v5, zero, v13, v123, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [fv124]
// [Asm] live_set: [v5, zero, v13, v4, fv124, v6]
// [Asm] move_origin: []
// [Asm] defined: fv124 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v5, zero, v120, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: [fv121]
// [Asm] live_set: [v5, zero, v4, v6, v15, fv121]
// [Asm] move_origin: []
// [Asm] defined: fv121 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v117]
// [Asm] live_set: [v5, zero, v4, v6, v17, v117]
// [Asm] move_origin: []
// [Asm] defined: v117 is X
// [Asm] defs: [fv118]
// [Asm] live_set: [v5, zero, v4, v6, v17, fv118]
// [Asm] move_origin: []
// [Asm] defined: fv118 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v114]
// [Asm] live_set: [v5, zero, v19, v4, v114, v6]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [fv115]
// [Asm] live_set: [v5, zero, fv115, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv115 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v111]
// [Asm] live_set: [v5, v21, zero, v4, v6, v111]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [fv112]
// [Asm] live_set: [v5, v21, zero, fv112, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv112 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v108]
// [Asm] live_set: [v5, zero, v23, v4, v6, v108]
// [Asm] move_origin: []
// [Asm] defined: v108 is X
// [Asm] defs: [fv109]
// [Asm] live_set: [v5, zero, v23, v4, fv109, v6]
// [Asm] move_origin: []
// [Asm] defined: fv109 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v25, v5, zero, v105, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [fv106]
// [Asm] live_set: [v25, v5, zero, v4, v6, fv106]
// [Asm] move_origin: []
// [Asm] defined: fv106 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v102]
// [Asm] live_set: [v5, zero, v27, v4, v6, v102]
// [Asm] move_origin: []
// [Asm] defined: v102 is X
// [Asm] defs: [fv103]
// [Asm] live_set: [v5, zero, v27, v4, v6, fv103]
// [Asm] move_origin: []
// [Asm] defined: fv103 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v99]
// [Asm] live_set: [v5, v99, zero, v29, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v99 is X
// [Asm] defs: [fv100]
// [Asm] live_set: [v5, zero, v29, fv100, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv100 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v97]
// [Asm] live_set: [v5, zero, v97, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v4, v6, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v32, v4, v6]
// [Asm] move_origin: [v31]
// [Asm] defined: v32 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v5, zero, v95, v32, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v95 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v5, zero, v32, v4, v6, v33]
// [Asm] move_origin: [v95]
// [Asm] defined: v33 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v5, v96, zero, v32, v4, v6, v33]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, zero, v32, v4, v6, v33, v34]
// [Asm] move_origin: [v96]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v35, v32, v6, v33, v34]
// [Asm] move_origin: [v4]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [zero, v35, v36, v32, v6, v33, v34]
// [Asm] move_origin: [v5]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v6]
// [Asm] defined: v37 is X
// [Asm] defs: [v67]
// [Asm] live_set: [zero, v67, v35, v36, v37, v6, v33, v34]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v32]
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v67]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v33]
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v34]
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v35]
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v36]
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: [v37]
// [Asm] defs: []
// [Asm] live_set: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.341"];
// [Asm]   r0 [label="v59 ← a0", color=green];
// [Asm]   r46 [label="v58 ← a0", color=green];
// [Asm]   r33 [label="v42 ← a0", color=green];
// [Asm]   r76 [label="v27 ← a0", color=green];
// [Asm]   r59 [label="v129 ← a1", color=green];
// [Asm]   r9 [label="v60 ← s1", color=green];
// [Asm]   r26 [label="t2", color=blue];
// [Asm]   r44 [label="v56 ← a0", color=green];
// [Asm]   r53 [label="v138 ← a1", color=green];
// [Asm]   r56 [label="v7 ← a0", color=green];
// [Asm]   r10 [label="v61 ← s3", color=green];
// [Asm]   r5 [label="zero", color=blue];
// [Asm]   r54 [label="v5 ← s0", color=green];
// [Asm]   r24 [label="t0", color=blue];
// [Asm]   r43 [label="v54 ← a0", color=green];
// [Asm]   r80 [label="v97 ← a0", color=green];
// [Asm]   r31 [label="v39 ← a0", color=green];
// [Asm]   r39 [label="v49 ← a0", color=green];
// [Asm]   r17 [label="a1", color=blue];
// [Asm]   r52 [label="v137 ← a0", color=green];
// [Asm]   r65 [label="v120 ← a1", color=green];
// [Asm]   r79 [label="v99 ← a1", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r61 [label="v126 ← a1", color=green];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v37 ← s2", color=green];
// [Asm]   r82 [label="v95 ← a0", color=green];
// [Asm]   r67 [label="v117 ← a1", color=green];
// [Asm]   r75 [label="v105 ← a1", color=green];
// [Asm]   r27 [label="t3", color=blue];
// [Asm]   r77 [label="v102 ← a1", color=green];
// [Asm]   r62 [label="v13 ← a0", color=green];
// [Asm]   r40 [label="v51 ← a0", color=green];
// [Asm]   r11 [label="v62 ← s6", color=green];
// [Asm]   r58 [label="v9 ← a0", color=green];
// [Asm]   r34 [label="v43 ← a0", color=green];
// [Asm]   r83 [label="v96 ← a0", color=green];
// [Asm]   r14 [label="v65 ← s7", color=green];
// [Asm]   r51 [label="v4 ← s4", color=green];
// [Asm]   r78 [label="v29 ← a0", color=green];
// [Asm]   r55 [label="v135 ← a0", color=green];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r60 [label="v11 ← a0", color=green];
// [Asm]   r73 [label="v108 ← a1", color=green];
// [Asm]   r38 [label="v48 ← a0", color=green];
// [Asm]   r72 [label="v23 ← a0", color=green];
// [Asm]   r47 [label="v2 ← s1", color=green];
// [Asm]   r6 [label="v35 ← s4", color=green];
// [Asm]   r13 [label="v64 ← s0", color=green];
// [Asm]   r42 [label="v53 ← a0", color=green];
// [Asm]   r4 [label="v33 ← s3", color=green];
// [Asm]   r29 [label="v69 ← a0", color=green];
// [Asm]   r35 [label="v44 ← a0", color=green];
// [Asm]   r7 [label="v6 ← s2", color=green];
// [Asm]   r64 [label="v15 ← a0", color=green];
// [Asm]   r8 [label="v34 ← s5", color=green];
// [Asm]   r36 [label="v46 ← a0", color=green];
// [Asm]   r66 [label="v17 ← a0", color=green];
// [Asm]   r15 [label="v68 ← a2", color=green];
// [Asm]   r32 [label="v41 ← a0", color=green];
// [Asm]   r49 [label="v140 ← a0", color=green];
// [Asm]   r74 [label="v25 ← a0", color=green];
// [Asm]   r57 [label="v132 ← a1", color=green];
// [Asm]   r68 [label="v19 ← a0", color=green];
// [Asm]   r70 [label="v21 ← a0", color=green];
// [Asm]   r12 [label="v63 ← s4", color=green];
// [Asm]   r48 [label="s11", color=blue];
// [Asm]   r37 [label="v47 ← a0", color=green];
// [Asm]   r1 [label="v36 ← s0", color=green];
// [Asm]   r41 [label="v52 ← a0", color=green];
// [Asm]   r28 [label="t4", color=blue];
// [Asm]   r71 [label="v111 ← a1", color=green];
// [Asm]   r69 [label="v114 ← a1", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r84 [label="v67 ← a0", color=green];
// [Asm]   r50 [label="v141 ← a1", color=green];
// [Asm]   r30 [label="v70 ← a0", color=green];
// [Asm]   r45 [label="v57 ← a0", color=green];
// [Asm]   r25 [label="t1", color=blue];
// [Asm]   r63 [label="v123 ← a1", color=green];
// [Asm]   r2 [label="v32 ← s1", color=green];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r81 [label="v31 ← a0", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r54 -- r78;
// [Asm]   r5 -- r69;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r26;
// [Asm]   r51 -- r83;
// [Asm]   r3 -- r15;
// [Asm]   r23 -- r51;
// [Asm]   r3 -- r16;
// [Asm]   r4 -- r51;
// [Asm]   r27 -- r51;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r72;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r9;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r65;
// [Asm]   r2 -- r51;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r64 -- r65;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r5 -- r35;
// [Asm]   r13 -- r30;
// [Asm]   r5 -- r6;
// [Asm]   r54 -- r76;
// [Asm]   r8 -- r16;
// [Asm]   r7 -- r79;
// [Asm]   r10 -- r18;
// [Asm]   r56 -- r57;
// [Asm]   r51 -- r70;
// [Asm]   r4 -- r83;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r60;
// [Asm]   r19 -- r47;
// [Asm]   r27 -- r54;
// [Asm]   r10 -- r22;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r51 -- r69;
// [Asm]   r47 -- r55;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r12 -- r23;
// [Asm]   r5 -- r51;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r5 -- r36;
// [Asm]   r54 -- r81;
// [Asm]   r6 -- r25;
// [Asm]   r54 -- r66;
// [Asm]   r4 -- r13;
// [Asm]   r51 -- r81;
// [Asm]   r3 -- r25;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r74 -- r75;
// [Asm]   r16 -- r51;
// [Asm]   r72 -- r73;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r5 -- r19;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r16 -- r50;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r54 -- r71;
// [Asm]   r54 -- r80;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r5 -- r38;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r19;
// [Asm]   r7 -- r75;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r18 -- r51;
// [Asm]   r5 -- r74;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r47 -- r51;
// [Asm]   r26 -- r54;
// [Asm]   r14 -- r25;
// [Asm]   r27 -- r47;
// [Asm]   r54 -- r79;
// [Asm]   r9 -- r24;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r5 -- r68;
// [Asm]   r8 -- r18;
// [Asm]   r54 -- r64;
// [Asm]   r3 -- r29;
// [Asm]   r51 -- r80;
// [Asm]   r7 -- r36;
// [Asm]   r5 -- r81;
// [Asm]   r51 -- r78;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r54 -- r56;
// [Asm]   r11 -- r28;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r51 -- r77;
// [Asm]   r11 -- r29;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r24 -- r51;
// [Asm]   r9 -- r25;
// [Asm]   r14 -- r20;
// [Asm]   r5 -- r63;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r22 -- r54;
// [Asm]   r7 -- r56;
// [Asm]   r7 -- r77;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r4 -- r54;
// [Asm]   r10 -- r13;
// [Asm]   r51 -- r72;
// [Asm]   r10 -- r19;
// [Asm]   r54 -- r74;
// [Asm]   r6 -- r54;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r47 -- r52;
// [Asm]   r51 -- r53;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r21 -- r54;
// [Asm]   r76 -- r77;
// [Asm]   r3 -- r18;
// [Asm]   r14 -- r30;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r51 -- r66;
// [Asm]   r2 -- r54;
// [Asm]   r10 -- r20;
// [Asm]   r3 -- r30;
// [Asm]   r54 -- r77;
// [Asm]   r5 -- r83;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r54 -- r82;
// [Asm]   r3 -- r13;
// [Asm]   r58 -- r59;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r63;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r5 -- r80;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r29;
// [Asm]   r4 -- r84;
// [Asm]   r5 -- r7;
// [Asm]   r51 -- r65;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r6;
// [Asm]   r16 -- r23;
// [Asm]   r7 -- r54;
// [Asm]   r14 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r7 -- r82;
// [Asm]   r10 -- r17;
// [Asm]   r13 -- r24;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r9 -- r29;
// [Asm]   r24 -- r47;
// [Asm]   r8 -- r19;
// [Asm]   r5 -- r79;
// [Asm]   r13 -- r26;
// [Asm]   r16 -- r19;
// [Asm]   r7 -- r71;
// [Asm]   r54 -- r72;
// [Asm]   r54 -- r83;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r21 -- r47;
// [Asm]   r16 -- r28;
// [Asm]   r13 -- r25;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r7 -- r73;
// [Asm]   r8 -- r54;
// [Asm]   r2 -- r28;
// [Asm]   r23 -- r47;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r51 -- r61;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r28 -- r47;
// [Asm]   r15 -- r17;
// [Asm]   r7 -- r60;
// [Asm]   r3 -- r84;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r20 -- r47;
// [Asm]   r10 -- r23;
// [Asm]   r7 -- r11;
// [Asm]   r60 -- r61;
// [Asm]   r1 -- r84;
// [Asm]   r7 -- r39;
// [Asm]   r12 -- r30;
// [Asm]   r51 -- r58;
// [Asm]   r11 -- r26;
// [Asm]   r9 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r68;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r7 -- r69;
// [Asm]   r51 -- r79;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r21;
// [Asm]   r54 -- r57;
// [Asm]   r12 -- r18;
// [Asm]   r54 -- r61;
// [Asm]   r11 -- r21;
// [Asm]   r47 -- r53;
// [Asm]   r4 -- r19;
// [Asm]   r17 -- r47;
// [Asm]   r68 -- r69;
// [Asm]   r7 -- r51;
// [Asm]   r12 -- r29;
// [Asm]   r5 -- r82;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r1 -- r30;
// [Asm]   r47 -- r50;
// [Asm]   r5 -- r72;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r5 -- r59;
// [Asm]   r7 -- r84;
// [Asm]   r25 -- r54;
// [Asm]   r51 -- r55;
// [Asm]   r51 -- r71;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r5 -- r29;
// [Asm]   r18 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r27;
// [Asm]   r51 -- r63;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r51 -- r76;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r62;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r57;
// [Asm]   r2 -- r83;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r38;
// [Asm]   r18 -- r54;
// [Asm]   r2 -- r12;
// [Asm]   r54 -- r60;
// [Asm]   r23 -- r54;
// [Asm]   r5 -- r67;
// [Asm]   r17 -- r54;
// [Asm]   r51 -- r54;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r25;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r55;
// [Asm]   r5 -- r66;
// [Asm]   r16 -- r21;
// [Asm]   r12 -- r21;
// [Asm]   r25 -- r51;
// [Asm]   r7 -- r42;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r16 -- r24;
// [Asm]   r4 -- r14;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r14 -- r15;
// [Asm]   r8 -- r30;
// [Asm]   r54 -- r68;
// [Asm]   r51 -- r52;
// [Asm]   r16 -- r47;
// [Asm]   r7 -- r76;
// [Asm]   r20 -- r51;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r29;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r11 -- r20;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r51 -- r68;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r5 -- r71;
// [Asm]   r22 -- r47;
// [Asm]   r47 -- r48;
// [Asm]   r8 -- r9;
// [Asm]   r54 -- r67;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r11 -- r12;
// [Asm]   r10 -- r29;
// [Asm]   r11 -- r22;
// [Asm]   r7 -- r74;
// [Asm]   r6 -- r22;
// [Asm]   r8 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r13;
// [Asm]   r51 -- r67;
// [Asm]   r5 -- r28;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r13 -- r23;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r51 -- r64;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r5 -- r70;
// [Asm]   r1 -- r25;
// [Asm]   r13 -- r17;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r7 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r18 -- r47;
// [Asm]   r51 -- r73;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r57;
// [Asm]   r54 -- r62;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r54 -- r63;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r54 -- r70;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r41;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r8 -- r84;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r9 -- r27;
// [Asm]   r7 -- r40;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r19 -- r51;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r28 -- r54;
// [Asm]   r54 -- r75;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r5 -- r49;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r19 -- r21;
// [Asm]   r12 -- r19;
// [Asm]   r7 -- r83;
// [Asm]   r51 -- r60;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r51 -- r82;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r8 -- r17;
// [Asm]   r54 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r5 -- r75;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r25 -- r47;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r70;
// [Asm]   r1 -- r27;
// [Asm]   r70 -- r71;
// [Asm]   r78 -- r79;
// [Asm]   r10 -- r30;
// [Asm]   r51 -- r57;
// [Asm]   r7 -- r61;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r54 -- r65;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r2 -- r24;
// [Asm]   r13 -- r21;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r13 -- r29;
// [Asm]   r51 -- r56;
// [Asm]   r4 -- r9;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r5 -- r34;
// [Asm]   r7 -- r64;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r17 -- r18;
// [Asm]   r54 -- r59;
// [Asm]   r4 -- r24;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r51 -- r62;
// [Asm]   r51 -- r74;
// [Asm]   r11 -- r17;
// [Asm]   r28 -- r51;
// [Asm]   r19 -- r54;
// [Asm]   r5 -- r20;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r66 -- r67;
// [Asm]   r5 -- r77;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r62 -- r63;
// [Asm]   r7 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r5 -- r52;
// [Asm]   r5 -- r84;
// [Asm]   r5 -- r44;
// [Asm]   r24 -- r54;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r30;
// [Asm]   r3 -- r28;
// [Asm]   r14 -- r29;
// [Asm]   r47 -- r54;
// [Asm]   r16 -- r26;
// [Asm]   r14 -- r24;
// [Asm]   r16 -- r53;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r26 -- r47;
// [Asm]   r13 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r66;
// [Asm]   r7 -- r28;
// [Asm]   r26 -- r51;
// [Asm]   r6 -- r8;
// [Asm]   r5 -- r64;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r17 -- r51;
// [Asm]   r5 -- r37;
// [Asm]   r16 -- r54;
// [Asm]   r47 -- r49;
// [Asm]   r2 -- r21;
// [Asm]   r21 -- r51;
// [Asm]   r54 -- r69;
// [Asm]   r54 -- r58;
// [Asm]   r6 -- r17;
// [Asm]   r20 -- r54;
// [Asm]   r51 -- r59;
// [Asm]   r7 -- r58;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r54 -- r73;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r15 -- r16;
// [Asm]   r22 -- r51;
// [Asm]   r2 -- r3;
// [Asm]   r51 -- r75;
// [Asm]   r10 -- r24;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v59-> 1:v36-> 2:v32-> 3:v37-> 4:v33-> 5:zero-> 6:v35-> 8:v34-> 7:v6-> 9:v60-> 10:v61-> 11:v62-> 15:v68-> 16:a0-> 17:a1-> 12:v63-> 13:v64-> 14:v65-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:t0-> 25:t1-> 54:v5-> 26:t2-> 51:v4-> 27:t3-> 28:t4-> 47:v2-> 29:v69-> 30:v70-> 84:v67-> 83:v96-> 82:v95-> 53:v138-> 55:v135-> 56:v7-> 57:v132-> 58:v9-> 59:v129-> 60:v11-> 61:v126-> 62:v13-> 63:v123-> 64:v15-> 65:v120-> 66:v17-> 67:v117-> 68:v19-> 69:v114-> 70:v21-> 71:v111-> 72:v23-> 73:v108-> 74:v25-> 75:v105-> 76:v27-> 77:v102-> 78:v29-> 79:v99-> 80:v97-> 81:v31-> 50:v141-> 52:v137-> 31:v39-> 32:v41-> 33:v42-> 34:v43-> 35:v44-> 36:v46-> 37:v47-> 38:v48-> 39:v49-> 40:v51-> 41:v52-> 42:v53-> 48:s11-> 49:v140-> 43:v54-> 44:v56-> 45:v57-> 46:v58"
// [Asm]   comment = "v59<-a0;v58<-a0;v42<-a0;v27<-a0;v129<-a1;v60<-s1;v56<-a0;v138<-a1;v7<-a0;v61<-s3;v5<-s0;v54<-a0;v97<-a0;v39<-a0;v49<-a0;v137<-a0;v120<-a1;v99<-a1;v126<-a1;v37<-s2;v95<-a0;v117<-a1;v105<-a1;v102<-a1;v13<-a0;v51<-a0;v62<-s6;v9<-a0;v43<-a0;v96<-a0;v65<-s7;v4<-s4;v29<-a0;v135<-a0;v11<-a0;v108<-a1;v48<-a0;v23<-a0;v2<-s1;v35<-s4;v64<-s0;v53<-a0;v33<-s3;v69<-a0;v44<-a0;v6<-s2;v15<-a0;v34<-s5;v46<-a0;v17<-a0;v68<-a2;v41<-a0;v140<-a0;v25<-a0;v132<-a1;v19<-a0;v21<-a0;v63<-s4;v47<-a0;v36<-s0;v52<-a0;v111<-a1;v114<-a1;v67<-a0;v141<-a1;v70<-a0;v57<-a0;v123<-a1;v32<-s1;v31<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.341"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv103 ← fa0", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv124 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv115 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r24 [label="fv130 ← fa0", color=green];
// [Asm]   r32 [label="fv106 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r31 [label="fv109 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv45 ← fa0", color=green];
// [Asm]   r23 [label="fv133 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv121 ← fa0", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv118 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv100 ← fa0", color=green];
// [Asm]   r22 [label="fv55 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv112 ← fa0", color=green];
// [Asm]   r25 [label="fv127 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv40 ← fa0", color=green];
// [Asm]   r21 [label="fv50 ← fa0", color=green];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv40-> 20:fv45-> 21:fv50-> 22:fv55-> 23:fv133-> 24:fv130-> 25:fv127-> 26:fv124-> 27:fv121-> 28:fv118-> 29:fv115-> 30:fv112-> 31:fv109-> 32:fv106-> 33:fv103-> 34:fv100"
// [Asm]   comment = "fv103<-fa0;fv124<-fa0;fv115<-fa0;fv130<-fa0;fv106<-fa0;fv109<-fa0;fv45<-fa0;fv133<-fa0;fv121<-fa0;fv118<-fa0;fv100<-fa0;fv55<-fa0;fv112<-fa0;fv127<-fa0;fv40<-fa0;fv50<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v59, v34, -1 ->   addi a0, s5, -1
// [Asm] subst   mv v62, v59 ->   mv s6, a0
// [Asm] subst   mv v65, v37 ->   mv s7, s2
// [Asm] subst   addi v68, v61, -1 ->   addi a2, s3, -1
// [Asm] subst   mv a0, v60 ->   mv a0, s1
// [Asm] subst   mv a1, v62 ->   mv a1, s6
// [Asm] subst   mv a3, v63 ->   mv a3, s4
// [Asm] subst   mv a4, v64 ->   mv a4, s0
// [Asm] subst   mv a5, v65 ->   mv a5, s7
// [Asm] subst   call loop3.340 ->   call loop3.340
// [Asm] subst   addi v70, v62, -1 ->   addi a0, s6, -1
// [Asm] subst   mv v62, v70 ->   mv s6, a0
// [Asm] subst   j .main.341_6 ->   j .main.341_6
// [Asm] subst   ret ->   ret
// [Asm] subst   bge v32, zero, .main.341_3 ->   bge s1, zero, .main.341_3
// [Asm] subst   ld v39, 0(v6) ->   ld a0, 0(s2)
// [Asm] subst   fld fv40, 0(v39) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v41, fv40, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v44, 0(v6) ->   ld a0, 0(s2)
// [Asm] subst   fld fv45, 8(v44) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v46, fv45, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v49, 8(v6) ->   ld a0, 8(s2)
// [Asm] subst   fld fv50, 0(v49) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v51, fv50, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v54, 8(v6) ->   ld a0, 8(s2)
// [Asm] subst   fld fv55, 8(v54) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v56, fv55, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv v58, zero ->   mv a0, zero
// [Asm] subst   blt v62, zero, .main.341_8 ->   blt s6, zero, .main.341_8
// [Asm] subst   addi v2, s11, 0 ->   addi s1, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s1, -8
// [Asm] subst   li v140, 2 ->   li a0, 2
// [Asm] subst   li v141, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s1
// [Asm] subst   call make_arr.342 ->   call make_arr.342
// [Asm] subst   mv v4, a0 ->   mv s4, a0
// [Asm] subst   li v137, 3 ->   li a0, 3
// [Asm] subst   li v138, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s1
// [Asm] subst   call make_arr.342 ->   call make_arr.342
// [Asm] subst   mv v5, a0 ->   mv s0, a0
// [Asm] subst   li v135, 2 ->   li a0, 2
// [Asm] subst   mv a1, v135 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s1
// [Asm] subst   call make_arr.342 ->   call make_arr.342
// [Asm] subst   mv v6, a0 ->   mv s2, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s4)
// [Asm] subst   li v132, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv133, v132 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv133, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s4)
// [Asm] subst   li v129, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv130, v129 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv130, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s4)
// [Asm] subst   li v126, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv127, v126 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv127, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s4)
// [Asm] subst   li v123, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv124, v123 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv124, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s4)
// [Asm] subst   li v120, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv121, v120 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv121, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s4)
// [Asm] subst   li v117, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv118, v117 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv118, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s0)
// [Asm] subst   li v114, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv115, v114 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv115, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s0)
// [Asm] subst   li v111, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv112, v111 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv112, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s0)
// [Asm] subst   li v108, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv109, v108 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv109, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s0)
// [Asm] subst   li v105, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv106, v105 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv106, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s0)
// [Asm] subst   li v102, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv103, v102 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv103, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s0)
// [Asm] subst   li v99, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv100, v99 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv100, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v97, 2 ->   li a0, 2
// [Asm] subst   addi v31, v97, -1 ->   addi a0, a0, -1
// [Asm] subst   mv v32, v31 ->   mv s1, a0
// [Asm] subst   li v95, 3 ->   li a0, 3
// [Asm] subst   mv v33, v95 ->   mv s3, a0
// [Asm] subst   li v96, 2 ->   li a0, 2
// [Asm] subst   mv v34, v96 ->   mv s5, a0
// [Asm] subst   addi v67, v32, -1 ->   addi a0, s1, -1
// [Asm] subst   mv v32, v67 ->   mv s1, a0
// [Asm] subst   j .main.341_2 ->   j .main.341_2
// [Asm] before colored: # leaf true
// [Asm] loop3.340:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop3.340_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop3.340_2:
// [Asm] # control
// [Asm]   blt v10, zero, .loop3.340_4  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v40, v25, fv23, v16, v46, v10, v42, v30, v36, fv19, v37, v43, v31, v28, v33, v39, v18, v20, v27, v45, fv17, v34, fv21], uses: [v25, fv23, v16, v13, v42, fv19, v12, v28, v33, v20, v27, v8, v34, fv21, v11, v46, v10, v30, v36, v37, v43, v31, v9, v39, v18, v45, fv17, v40], upward_exposed: [v11, v10, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop3.340_3:
// [Asm]   slliw v45, v8, 3  # live: [v11, v10, v13, zero, v8, v45, v12, v9]
// [Asm]   add v46, v13, v45  # live: [v11, v46, v10, v13, zero, v8, v12, v9]
// [Asm]   ld v16, 0(v46)  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   slliw v42, v9, 3  # live: [v11, v16, v10, v13, zero, v42, v8, v12, v9]
// [Asm]   add v43, v16, v42  # live: [v11, v16, v10, v13, zero, v8, v43, v12, v9]
// [Asm]   fld fv17, 0(v43)  # live: [v11, v16, v10, v13, zero, v8, v12, v9, fv17]
// [Asm]   slliw v39, v8, 3  # live: [v11, v16, v10, v13, zero, v8, v12, v9, fv17, v39]
// [Asm]   add v40, v11, v39  # live: [v11, v16, v10, v13, zero, v8, v12, v9, fv17, v40]
// [Asm]   ld v18, 0(v40)  # live: [v11, v16, v10, v18, v13, zero, v8, v12, v9, fv17]
// [Asm]   slliw v36, v10, 3  # live: [v11, v16, v10, v18, v13, zero, v8, v36, v12, v9, fv17]
// [Asm]   add v37, v18, v36  # live: [v11, v16, v10, v13, zero, v8, v37, v12, v9, fv17]
// [Asm]   fld fv19, 0(v37)  # live: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17]
// [Asm]   slliw v33, v10, 3  # live: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17, v33]
// [Asm]   add v34, v12, v33  # live: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17, v34]
// [Asm]   ld v20, 0(v34)  # live: [v11, v16, v10, v13, zero, v20, v8, fv19, v12, v9, fv17]
// [Asm]   slliw v30, v9, 3  # live: [v11, v16, v10, v13, zero, v20, v30, v8, fv19, v12, v9, fv17]
// [Asm]   add v31, v20, v30  # live: [v11, v16, v10, v13, zero, v8, fv19, v12, v31, v9, fv17]
// [Asm]   fld fv21, 0(v31)  # live: [v11, v16, v10, v13, zero, v8, fv19, v12, v9, fv17, fv21]
// [Asm]   fmadd.d fv23, fv19, fv21, fv17  # live: [v11, fv23, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   slliw v27, v9, 3  # live: [v11, fv23, v16, v10, v13, zero, v27, v8, v12, v9]
// [Asm]   add v28, v16, v27  # live: [v11, fv23, v10, v13, zero, v8, v12, v28, v9]
// [Asm]   fsd fv23, 0(v28)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v25, v10, -1  # live: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v8  # live: [v11, v25, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v25, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v25  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop3.340_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop3.340_4:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop3.340_5:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.341  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.341:
// [Asm] # block info: defs: [fv112, v95, a1, s11, fa1, v33, fa2, v99, ft6, a4, v27, fa6, a6, fv100, ft5, ft10, v6, v117, v102, v129, v137, ft4, fv130, v5, ft9, fa4, v123, ft2, v141, v37, v17, a3, v31, a7, fa7, fa3, v96, fv115, ft3, fv124, t2, v140, fv106, v132, v25, t1, v13, v120, v7, ft0, ft1, v32, v108, fv133, v126, v29, v97, v19, v105, fv109, v4, v34, ft7, v11, v21, a5, a0, v36, a2, v114, v111, fv121, v9, v138, ft8, fv118, fv127, t3, t0, fa5, v23, fa0, v35, t4, v15, fv103, v135, v2], uses: [fv112, v95, a1, s11, v99, v27, fv100, v6, v117, v102, v129, v137, v5, fv130, v123, v141, v17, v31, v96, fv115, fv124, v140, fv106, v132, v25, v13, v120, v7, v108, fv133, v126, v29, v97, v105, v19, fv109, v4, v11, v21, a0, a2, v114, v111, fv121, v9, v138, fv118, fv127, v23, v15, fv103, v135, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [zero, v36, v35, v32, v37, v6, v33, v34]
// [Asm] # block parameters: []
// [Asm] .main.341_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v140, 2  # live: [zero, v140, v2]
// [Asm]   mv a0, v140  # live: [zero, a0, v2]
// [Asm]   li v141, 3  # live: [zero, a0, v141, v2]
// [Asm]   mv a1, v141  # live: [zero, a0, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, a2, a1, v2]
// [Asm]   call make_arr.342  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [zero, v4, v2]
// [Asm]   # save_ctx2  # live: [zero, v4, v2]
// [Asm]   li v137, 3  # live: [zero, v4, v137, v2]
// [Asm]   mv a0, v137  # live: [zero, a0, v4, v2]
// [Asm]   li v138, 2  # live: [zero, a0, v4, v138, v2]
// [Asm]   mv a1, v138  # live: [zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v4, a2, a1, v2]
// [Asm]   call make_arr.342  # live: [zero, a0, v4, v2]
// [Asm]   mv v5, a0  # live: [v5, zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   li v135, 2  # live: [v5, zero, v4, v135, v2]
// [Asm]   mv a0, v135  # live: [v5, zero, a0, v4, v135, v2]
// [Asm]   mv a1, v135  # live: [v5, zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, v4, a2, a1]
// [Asm]   call make_arr.342  # live: [v5, zero, a0, v4]
// [Asm]   mv v6, a0  # live: [v5, zero, v4, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   ld v7, 0(v4)  # live: [v5, zero, v7, v4, v6]
// [Asm]   li v132, 4607182418800017408  # live: [v5, zero, v7, v4, v6, v132]
// [Asm]   fmv.d.x fv133, v132  # live: [v5, zero, v7, v4, v6, fv133]
// [Asm]   fsd fv133, 0(v7)  # live: [v5, zero, v4, v6]
// [Asm]   ld v9, 0(v4)  # live: [v5, zero, v4, v6, v9]
// [Asm]   li v129, 4611686018427387904  # live: [v5, zero, v4, v6, v9, v129]
// [Asm]   fmv.d.x fv130, v129  # live: [v5, fv130, zero, v4, v6, v9]
// [Asm]   fsd fv130, 8(v9)  # live: [v5, zero, v4, v6]
// [Asm]   ld v11, 0(v4)  # live: [v11, v5, zero, v4, v6]
// [Asm]   li v126, 4613937818241073152  # live: [v11, v5, zero, v126, v4, v6]
// [Asm]   fmv.d.x fv127, v126  # live: [fv127, v11, v5, zero, v4, v6]
// [Asm]   fsd fv127, 16(v11)  # live: [v5, zero, v4, v6]
// [Asm]   ld v13, 8(v4)  # live: [v5, zero, v13, v4, v6]
// [Asm]   li v123, 4616189618054758400  # live: [v5, zero, v13, v123, v4, v6]
// [Asm]   fmv.d.x fv124, v123  # live: [v5, zero, v13, v4, fv124, v6]
// [Asm]   fsd fv124, 0(v13)  # live: [v5, zero, v4, v6]
// [Asm]   ld v15, 8(v4)  # live: [v5, zero, v4, v6, v15]
// [Asm]   li v120, 4617315517961601024  # live: [v5, zero, v120, v4, v6, v15]
// [Asm]   fmv.d.x fv121, v120  # live: [v5, zero, v4, v6, v15, fv121]
// [Asm]   fsd fv121, 8(v15)  # live: [v5, zero, v4, v6]
// [Asm]   ld v17, 8(v4)  # live: [v5, zero, v4, v6, v17]
// [Asm]   li v117, 4618441417868443648  # live: [v5, zero, v4, v6, v17, v117]
// [Asm]   fmv.d.x fv118, v117  # live: [v5, zero, v4, v6, v17, fv118]
// [Asm]   fsd fv118, 16(v17)  # live: [v5, zero, v4, v6]
// [Asm]   ld v19, 0(v5)  # live: [v5, zero, v19, v4, v6]
// [Asm]   li v114, 4619567317775286272  # live: [v5, zero, v19, v4, v114, v6]
// [Asm]   fmv.d.x fv115, v114  # live: [v5, zero, fv115, v19, v4, v6]
// [Asm]   fsd fv115, 0(v19)  # live: [v5, zero, v4, v6]
// [Asm]   ld v21, 0(v5)  # live: [v5, v21, zero, v4, v6]
// [Asm]   li v111, 4620693217682128896  # live: [v5, v21, zero, v4, v6, v111]
// [Asm]   fmv.d.x fv112, v111  # live: [v5, v21, zero, fv112, v4, v6]
// [Asm]   fsd fv112, 8(v21)  # live: [v5, zero, v4, v6]
// [Asm]   ld v23, 8(v5)  # live: [v5, zero, v23, v4, v6]
// [Asm]   li v108, 4621256167635550208  # live: [v5, zero, v23, v4, v6, v108]
// [Asm]   fmv.d.x fv109, v108  # live: [v5, zero, v23, v4, fv109, v6]
// [Asm]   fsd fv109, 0(v23)  # live: [v5, zero, v4, v6]
// [Asm]   ld v25, 8(v5)  # live: [v25, v5, zero, v4, v6]
// [Asm]   li v105, 4621819117588971520  # live: [v25, v5, zero, v105, v4, v6]
// [Asm]   fmv.d.x fv106, v105  # live: [v25, v5, zero, v4, v6, fv106]
// [Asm]   fsd fv106, 8(v25)  # live: [v5, zero, v4, v6]
// [Asm]   ld v27, 16(v5)  # live: [v5, zero, v27, v4, v6]
// [Asm]   li v102, 4622382067542392832  # live: [v5, zero, v27, v4, v6, v102]
// [Asm]   fmv.d.x fv103, v102  # live: [v5, zero, v27, v4, v6, fv103]
// [Asm]   fsd fv103, 0(v27)  # live: [v5, zero, v4, v6]
// [Asm]   ld v29, 16(v5)  # live: [v5, zero, v29, v4, v6]
// [Asm]   li v99, 4622945017495814144  # live: [v5, v99, zero, v29, v4, v6]
// [Asm]   fmv.d.x fv100, v99  # live: [v5, zero, v29, fv100, v4, v6]
// [Asm]   fsd fv100, 8(v29)  # live: [v5, zero, v4, v6]
// [Asm]   li v97, 2  # live: [v5, zero, v97, v4, v6]
// [Asm]   addi v31, v97, -1  # live: [v5, zero, v4, v6, v31]
// [Asm] # control
// [Asm]   mv v32, v31  # live: [v5, zero, v32, v4, v6]
// [Asm]   li v95, 3  # live: [v5, zero, v95, v32, v4, v6]
// [Asm]   mv v33, v95  # live: [v5, zero, v32, v4, v6, v33]
// [Asm]   li v96, 2  # live: [v5, v96, zero, v32, v4, v6, v33]
// [Asm]   mv v34, v96  # live: [v5, zero, v32, v4, v6, v33, v34]
// [Asm]   mv v35, v4  # live: [v5, zero, v35, v32, v6, v33, v34]
// [Asm]   mv v36, v5  # live: [zero, v35, v36, v32, v6, v33, v34]
// [Asm]   mv v37, v6  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v32, zero], upward_exposed: [v32, zero], params_defs: [v36, v32, v37, v33, v34, v35]
// [Asm] # live_in: [zero, v35, v36, v32, v37, v6, v33, v34], live_out: [zero, v36, v35, v32, v37, v6, v34, v33]
// [Asm] # block parameters: [v32, v33, v34, v35, v36, v37]
// [Asm] .main.341_2:
// [Asm] # control
// [Asm]   bge v32, zero, .main.341_3  # live: [zero, v35, v36, v32, v37, v6, v34, v33]
// [Asm] 
// [Asm] # block info: defs: [t1, v58, v42, v41, ft0, ft1, fv55, a1, v44, fa1, fv40, v51, fa2, ft6, a4, fa6, a6, ft5, ft10, v47, v57, v54, ft7, ft4, fv45, v46, ft9, v49, v53, a5, fa4, a0, ft2, a2, v43, v52, a3, v39, ft8, t3, fa7, fv50, a7, t0, fa5, v48, v56, fa3, ft3, fa0, t4, t2], uses: [fv45, v46, v49, a0, v41, fv55, v44, v39, fv40, v51, fv50, v56, zero, v6, v54], upward_exposed: [v6, zero], params_defs: []
// [Asm] # live_in: [v6, zero], live_out: [v58]
// [Asm] # block parameters: []
// [Asm] .main.341_4:
// [Asm]   ld v39, 0(v6)  # live: [v6, zero, v39]
// [Asm]   fld fv40, 0(v39)  # live: [v6, zero, fv40]
// [Asm]   fcvt.w.d v41, fv40, rtz  # live: [v41, v6, zero]
// [Asm]   # save_ctx2  # live: [v41, v6, zero]
// [Asm]   mv a0, v41  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v42, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v43, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v44, 0(v6)  # live: [v6, v44, zero]
// [Asm]   fld fv45, 8(v44)  # live: [v6, fv45, zero]
// [Asm]   fcvt.w.d v46, fv45, rtz  # live: [v6, v46, zero]
// [Asm]   # save_ctx2  # live: [v6, v46, zero]
// [Asm]   mv a0, v46  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v47, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v48, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v49, 8(v6)  # live: [v6, v49, zero]
// [Asm]   fld fv50, 0(v49)  # live: [fv50, v6, zero]
// [Asm]   fcvt.w.d v51, fv50, rtz  # live: [v6, zero, v51]
// [Asm]   # save_ctx2  # live: [v6, zero, v51]
// [Asm]   mv a0, v51  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v52, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v53, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v54, 8(v6)  # live: [zero, v54]
// [Asm]   fld fv55, 8(v54)  # live: [fv55, zero]
// [Asm]   fcvt.w.d v56, fv55, rtz  # live: [v56, zero]
// [Asm]   # save_ctx2  # live: [v56, zero]
// [Asm]   mv a0, v56  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v57, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v58, zero  # live: [v58]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v58, a0], upward_exposed: [v58], params_defs: [v58]
// [Asm] # live_in: [v58], live_out: []
// [Asm] # block parameters: [v58]
// [Asm] .main.341_10:
// [Asm] # control
// [Asm]   mv a0, v58  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v62, v63, v59, v65, v61, v64, v60], uses: [v36, v35, v32, v59, v37, v34, v33], upward_exposed: [v36, v32, v37, v34, v33, v35], params_defs: []
// [Asm] # live_in: [zero, v35, v36, v32, v37, v6, v34, v33], live_out: [v62, v36, v65, v32, v37, v64, v33, v60, v63, zero, v35, v6, v61, v34]
// [Asm] # block parameters: []
// [Asm] .main.341_3:
// [Asm]   addi v59, v34, -1  # live: [v36, v32, v37, v33, zero, v35, v59, v6, v34]
// [Asm] # control
// [Asm]   mv v60, v32  # live: [v36, v32, v37, v33, v60, zero, v35, v59, v6, v34]
// [Asm]   mv v61, v33  # live: [v36, v32, v37, v33, v60, zero, v35, v59, v6, v61, v34]
// [Asm]   mv v62, v59  # live: [v62, v36, v32, v37, v33, v60, zero, v35, v6, v61, v34]
// [Asm]   mv v63, v35  # live: [v62, v36, v32, v37, v33, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv v64, v36  # live: [v62, v36, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv v65, v37  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v62, zero], upward_exposed: [v62, zero], params_defs: [v62, v63, v65, v61, v64, v60]
// [Asm] # live_in: [v62, v36, v65, v32, v37, v64, v33, v60, v63, zero, v35, v6, v61, v34], live_out: [v62, v36, v65, v32, v37, v64, v33, v60, v63, zero, v35, v6, v61, v34]
// [Asm] # block parameters: [v60, v61, v62, v63, v64, v65]
// [Asm] .main.341_6:
// [Asm] # control
// [Asm]   blt v62, zero, .main.341_8  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] 
// [Asm] # block info: defs: [t1, v69, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft10, ft5, ft7, v62, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, v68, ft3, fa0, t4, t2, v70], uses: [v62, a5, a0, v65, a2, a1, a3, v64, v60, v63, v68, a4, v70, v61], upward_exposed: [v62, v63, v65, v61, v64, v60], params_defs: []
// [Asm] # live_in: [v62, v36, v65, v32, v37, v64, v33, v60, v63, zero, v35, v6, v61, v34], live_out: [v62, v36, v65, v32, v37, v64, v33, v60, v63, zero, v35, v6, v61, v34]
// [Asm] # block parameters: []
// [Asm] .main.341_7:
// [Asm]   addi v68, v61, -1  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm]   # save_ctx2  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm]   mv a0, v60  # live: [v62, a0, v36, v65, v32, v37, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm]   mv a1, v62  # live: [v62, a0, v36, v65, v32, v37, a1, v33, v64, v60, v63, zero, v68, v35, v6, v61, v34]
// [Asm]   mv a2, v68  # live: [v62, a0, v36, v65, v32, v37, a2, a1, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv a3, v63  # live: [v62, a0, v36, v65, v32, v37, a2, a1, a3, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv a4, v64  # live: [v62, a0, v36, v65, v32, v37, a2, a1, a3, v33, v64, v60, v63, zero, a4, v35, v6, v61, v34]
// [Asm]   mv a5, v65  # live: [v62, a5, a0, v36, v65, v32, v37, a2, a1, a3, v33, v64, v60, v63, zero, a4, v35, v6, v61, v34]
// [Asm]   call loop3.340  # live: [v62, a0, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv v69, a0  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   # restore_ctx2  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   addi v70, v62, -1  # live: [v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v70, v61, v34]
// [Asm] # control
// [Asm]   mv v60, v60  # live: [v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v70, v61, v34]
// [Asm]   mv v61, v61  # live: [v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v70, v61, v34]
// [Asm]   mv v62, v70  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv v63, v63  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv v64, v64  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   mv v65, v65  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm]   j .main.341_6  # live: [v62, v36, v65, v32, v37, v33, v64, v60, v63, zero, v35, v6, v61, v34]
// [Asm] 
// [Asm] # block info: defs: [v32, v67], uses: [v67, v35, v36, v32, v37, v33, v34], upward_exposed: [v36, v32, v37, v33, v34, v35], params_defs: []
// [Asm] # live_in: [zero, v35, v36, v32, v37, v6, v33, v34], live_out: [zero, v36, v35, v32, v37, v6, v33, v34]
// [Asm] # block parameters: []
// [Asm] .main.341_8:
// [Asm]   addi v67, v32, -1  # live: [zero, v67, v35, v36, v37, v6, v33, v34]
// [Asm] # control
// [Asm]   mv v32, v67  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm]   mv v33, v33  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm]   mv v34, v34  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm]   mv v35, v35  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm]   mv v36, v36  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm]   mv v37, v37  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm]   j .main.341_2  # live: [zero, v35, v36, v32, v37, v6, v33, v34]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] make_arr.342:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2, v3], uses: [v3, v5, a0, v23, v8, a2, v4, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: []
// [Asm] .make_arr.342_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, v2]
// [Asm]   slliw v23, v2, 3  # live: [v3, zero, v23, v4, s11, v2]
// [Asm]   sub v5, s11, v23  # live: [v3, v5, zero, v4, v2]
// [Asm]   andi s11, v5, -8  # live: [v3, v5, zero, v4, s11, v2]
// [Asm]   mv a1, v2  # live: [v3, v5, zero, v4, a1, s11, v2]
// [Asm]   mv a0, v5  # live: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, v4  # live: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti64  # live: [v2, v5, s11, zero, v3]
// [Asm]   addi v8, v2, -1  # live: [v8, v5, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v5, s11, zero, v9, v3]
// [Asm]   mv v10, v3  # live: [v5, v10, s11, zero, v9]
// [Asm]   mv v11, v5  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [v11, v10, v9]
// [Asm] # live_in: [v11, v5, v10, zero, s11, v9], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: [v9, v10, v11]
// [Asm] .make_arr.342_2:
// [Asm] # control
// [Asm]   blt v9, zero, .make_arr.342_4  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v16, v18, v20, v19, v6, a1, s11, v9], uses: [v11, v16, v10, v18, v20, v19, v6, s11, v9], upward_exposed: [v11, v10, s11, v9], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, s11, v9], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: []
// [Asm] .make_arr.342_3:
// [Asm]   slliw v20, v10, 3  # live: [v11, v5, v10, zero, v20, s11, v9]
// [Asm]   sub v6, s11, v20  # live: [v11, v5, v10, zero, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [v11, v5, v10, zero, v6, s11, v9]
// [Asm]   mv a1, v10  # live: [v11, v5, v10, zero, v6, s11, v9]
// [Asm]   slliw v18, v9, 3  # live: [v11, v5, v10, v18, zero, v6, s11, v9]
// [Asm]   add v19, v11, v18  # live: [v11, v5, v10, zero, v19, v6, s11, v9]
// [Asm]   sd v6, 0(v19)  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   addi v16, v9, -1  # live: [v11, v5, v16, v10, zero, s11]
// [Asm] # control
// [Asm]   mv v9, v16  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   mv v10, v10  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   mv v11, v11  # live: [v11, v5, v10, s11, zero, v9]
// [Asm]   j .make_arr.342_2  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v5], upward_exposed: [v5], params_defs: []
// [Asm] # live_in: [v5], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .make_arr.342_4:
// [Asm] # control
// [Asm]   mv v13, v5  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .make_arr.342_5:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(3), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(3), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("mul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%11), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4), BlockParam(bref=b2, bpref=$b.5)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5)]) already set
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%5), BlockParam(bref=b2, bpref=$b.1), BlockParam(bref=b2, bpref=$b.2)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Mem(fref=f1, mref=m0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Insn(iref=%1), FnParam(fref=f1, fpref=$f.1), Mem(fref=f1, mref=m0)]) already set
// [Core] b7 control: Jump(target=b6, args=[BlockParam(bref=b6, bpref=$b.0), BlockParam(bref=b6, bpref=$b.1), Insn(iref=%34), BlockParam(bref=b6, bpref=$b.3), BlockParam(bref=b6, bpref=$b.4), BlockParam(bref=b6, bpref=$b.5)]) already set
// [Core] b8 control: Jump(target=b2, args=[Insn(iref=%35), BlockParam(bref=b2, bpref=$b.1), BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4), BlockParam(bref=b2, bpref=$b.5)]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%31), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b9 control: Panic -> Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Core] b3 control: Jump(target=b5, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%30), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4), BlockParam(bref=b2, bpref=$b.5)]) already set
// [Core] b4 control: Panic -> Jump(target=b10, args=[Unit])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%29), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b10 control: Panic -> Return(args=[BlockParam(bref=b10, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Insn(iref=%28), Int32(val=3), Int32(val=2), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop3.340
// [Main]   .type loop3.340, @function
// [Main] # leaf true
// [Main] loop3.340:
// [Main] .loop3.340_0:
// [Main]   mv a7, a0
// [Main]   mv a6, a1
// [Main]   mv a1, a3
// [Main]   mv a3, a4
// [Main]   mv a0, a5
// [Main]   mv a4, a7
// [Main]   mv a5, a3
// [Main]   mv a3, a0
// [Main] 
// [Main] .loop3.340_2:
// [Main]   blt a2, zero, .loop3.340_4
// [Main] 
// [Main] .loop3.340_3:
// [Main]   slliw a0, a4, 3
// [Main]   add a0, a3, a0
// [Main]   ld a0, 0(a0)
// [Main]   slliw a7, a6, 3
// [Main]   add a7, a0, a7
// [Main]   fld fa0, 0(a7)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a1, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a2, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa1, 0(a7)
// [Main]   slliw a7, a2, 3
// [Main]   add a7, a5, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa2, 0(a7)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw a7, a6, 3
// [Main]   add a0, a0, a7
// [Main]   fsd fa0, 0(a0)
// [Main]   addi a0, a2, -1
// [Main]   mv a2, a0
// [Main]   j .loop3.340_2
// [Main] 
// [Main] .loop3.340_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop3.340_5:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.341
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.341
// [Main]   .type main.341, @function
// [Main] # leaf false
// [Main] main.341:
// [Main] .main.341_0:
// [Main]   addi sp, sp, -80
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   addi s1, s11, 0
// [Main]   andi s11, s1, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s1
// [Main]   call make_arr.342
// [Main]   mv s4, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s1
// [Main]   call make_arr.342
// [Main]   mv s0, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s1
// [Main]   call make_arr.342
// [Main]   mv s2, a0
// [Main]   ld a0, 0(s4)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s4)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s4)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s4)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s4)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s4)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s0)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s0)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s0)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s0)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s0)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s0)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   mv s3, a0
// [Main]   li a0, 2
// [Main]   mv s5, a0
// [Main] 
// [Main] .main.341_2:
// [Main]   bge s1, zero, .main.341_3
// [Main] 
// [Main] .main.341_4:
// [Main]   ld a0, 0(s2)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s2)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s2)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s2)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main] 
// [Main] .main.341_10:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   addi sp, sp, 80
// [Main]   ret
// [Main] 
// [Main] .main.341_3:
// [Main]   addi a0, s5, -1
// [Main]   mv s6, a0
// [Main]   mv s7, s2
// [Main] 
// [Main] .main.341_6:
// [Main]   blt s6, zero, .main.341_8
// [Main] 
// [Main] .main.341_7:
// [Main]   addi a2, s3, -1
// [Main]   mv a0, s1
// [Main]   mv a1, s6
// [Main]   mv a3, s4
// [Main]   mv a4, s0
// [Main]   mv a5, s7
// [Main]   call loop3.340
// [Main]   addi a0, s6, -1
// [Main]   mv s6, a0
// [Main]   j .main.341_6
// [Main] 
// [Main] .main.341_8:
// [Main]   addi a0, s1, -1
// [Main]   mv s1, a0
// [Main]   j .main.341_2
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl make_arr.342
// [Main]   .type make_arr.342, @function
// [Main] # leaf false
// [Main] make_arr.342:
// [Main] .make_arr.342_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   slliw a0, s2, 3
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s2
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   addi a0, s2, -1
// [Main]   mv a3, a0
// [Main]   mv a1, s1
// [Main]   mv a2, s0
// [Main] 
// [Main] .make_arr.342_2:
// [Main]   blt a3, zero, .make_arr.342_4
// [Main] 
// [Main] .make_arr.342_3:
// [Main]   slliw a0, a1, 3
// [Main]   sub a0, s11, a0
// [Main]   andi s11, a0, -8
// [Main]   slliw a4, a3, 3
// [Main]   add a4, a2, a4
// [Main]   sd a0, 0(a4)
// [Main]   addi a0, a3, -1
// [Main]   mv a3, a0
// [Main]   j .make_arr.342_2
// [Main] 
// [Main] .make_arr.342_4:
// [Main]   mv a0, s0
// [Main] 
// [Main] .make_arr.342_5:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function loop3.340
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b2, bpref=$b.5), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%1), offset=BlockParam(bref=b2, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b2, bpref=$b.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%4), offset=BlockParam(bref=b2, bpref=$b.2), width=@64))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b2, bpref=$b.4), offset=BlockParam(bref=b2, bpref=$b.2), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%6), offset=BlockParam(bref=b2, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%3), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%1), offset=BlockParam(bref=b2, bpref=$b.1), width=@64), val=Insn(iref=%9))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b2, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%11), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4), BlockParam(bref=b2, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function loop3.340 to wasm
// [Wasm] Lowering function make_arr.342
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Zero])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b2, bpref=$b.2), offset=BlockParam(bref=b2, bpref=$b.0), width=@ptr), val=Mem(fref=f1, mref=m1))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%5), BlockParam(bref=b2, bpref=$b.1), BlockParam(bref=b2, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m0, fills=[Init(val=FnParam(fref=f1, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%1), FnParam(fref=f1, fpref=$f.1), Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Lowered function make_arr.342 to wasm
// [Wasm] Lowering function main.341
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b6, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.1) -> $b6.$b.1
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b6, bpref=$b.0), BlockParam(bref=b6, bpref=$b.2), Insn(iref=%32), BlockParam(bref=b6, bpref=$b.3), BlockParam(bref=b6, bpref=$b.4), BlockParam(bref=b6, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.2) -> $b6.$b.2
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.3) -> $b6.$b.3
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.4) -> $b6.$b.4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.5) -> $b6.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b6, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.2) -> $b6.$b.2
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b6, bpref=$b.0), BlockParam(bref=b6, bpref=$b.1), Insn(iref=%34), BlockParam(bref=b6, bpref=$b.3), BlockParam(bref=b6, bpref=$b.4), BlockParam(bref=b6, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.1) -> $b6.$b.1
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.1) -> $b6.$b.1
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.2) -> $b6.$b.2
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.3) -> $b6.$b.3
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.3) -> $b6.$b.3
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.4) -> $b6.$b.4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.4) -> $b6.$b.4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.5) -> $b6.$b.5
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.5) -> $b6.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%35), BlockParam(bref=b2, bpref=$b.1), BlockParam(bref=b2, bpref=$b.2), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4), BlockParam(bref=b2, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b6, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.2) -> $b6.$b.2
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Branch(cond=Insn(iref=%31), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b2, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b5, args=[BlockParam(bref=b2, bpref=$b.0), BlockParam(bref=b2, bpref=$b.1), Insn(iref=%30), BlockParam(bref=b2, bpref=$b.3), BlockParam(bref=b2, bpref=$b.4), BlockParam(bref=b2, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.1) -> $b6.$b.1
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.2) -> $b6.$b.2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.3) -> $b6.$b.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.4) -> $b6.$b.4
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.5) -> $b6.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%36), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%37)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%38)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%41), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%42)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%43)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%46), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%47)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%48)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%51), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%52)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%53)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Jump(target=b10, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Branch(cond=Insn(iref=%29), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f1, args=[Int32(val=2), Int32(val=3), Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f1, args=[Int32(val=3), Int32(val=2), Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f1, args=[Int32(val=2), Int32(val=2), Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%4), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%6), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%8), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%28), Int32(val=3), Int32(val=2), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Local BlockParam(bref=b6, bpref=$b.1) -> $b6.$b.1
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local BlockParam(bref=b2, bpref=$b.4) -> $b2.$b.4
// [Wasm] Local BlockParam(bref=b6, bpref=$b.3) -> $b6.$b.3
// [Wasm] Local BlockParam(bref=b10, bpref=$b.0) -> $b10.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b6, bpref=$b.4) -> $b6.$b.4
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local BlockParam(bref=b2, bpref=$b.2) -> $b2.$b.2
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.5) -> $b2.$b.5
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local BlockParam(bref=b6, bpref=$b.5) -> $b6.$b.5
// [Wasm] Local BlockParam(bref=b2, bpref=$b.3) -> $b2.$b.3
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b6, bpref=$b.2) -> $b6.$b.2
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.341 to wasm
// [KnfOpt] func_tre: loop3.1 true
// [KnfOpt] func_tre: loop2.21 true
// [KnfOpt] func_tre: loop1.34 true
// [KnfOpt] func_tre: mul.47 false
// [KnfOpt] func_tre: main.57 false
// [KnfOpt] func_tre: init_arr.61 true
// [KnfOpt] func_tre: make_arr.71 false
// [KnfOpt] freq: {loop3.1: Once, loop3.179: Many(2), loop2.21: Once, loop2.199: Many(2), loop1.34: Once, loop1.212: Many(2), mul.47: Once, main.57: Once, init_arr.61: Once, init_arr.225: Many(2), make_arr.71: Many(3)}
// [KnfOpt] Knf inline Some(loop3) let _209: Unit = Unit
// [KnfOpt] let _210: Int = Int(1)
// [KnfOpt] let _211: Int = Sub(j.202, _210)
// [KnfOpt] Jump(loop2.199, [i.200, m.201, _211, a.203, b.204, c.205, ])
// [KnfOpt] Knf inline Some(loop2) let _222: Unit = Unit
// [KnfOpt] let _223: Int = Int(1)
// [KnfOpt] let _224: Int = Sub(i.213, _223)
// [KnfOpt] Jump(loop1.212, [_224, m.214, n.215, a.216, b.217, c.218, ])
// [KnfOpt] Knf inline Some(loop1) let _56: Unit = Unit
// [KnfOpt] Unit
// [KnfOpt] Knf inline Some(init_arr) let _78: Unit = Unit
// [KnfOpt] Var(mat.75)
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Knf inline Some(mul) let _151: Unit = Unit
// [KnfOpt] let _152: Int = Int(0)
// [KnfOpt] let _153: Array(Double) = Get c.87[_152]
// [KnfOpt] let _154: Int = Int(0)
// [KnfOpt] let _155: Double = Get _153[_154]
// [KnfOpt] let _156: Int = ExtApply(minimbt_truncate, [_155, ])
// [KnfOpt] let _157: Unit = ExtApply(minimbt_print_int, [_156, ])
// [KnfOpt] let _158: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _159: Int = Int(0)
// [KnfOpt] let _160: Array(Double) = Get c.87[_159]
// [KnfOpt] let _161: Int = Int(1)
// [KnfOpt] let _162: Double = Get _160[_161]
// [KnfOpt] let _163: Int = ExtApply(minimbt_truncate, [_162, ])
// [KnfOpt] let _164: Unit = ExtApply(minimbt_print_int, [_163, ])
// [KnfOpt] let _165: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _166: Int = Int(1)
// [KnfOpt] let _167: Array(Double) = Get c.87[_166]
// [KnfOpt] let _168: Int = Int(0)
// [KnfOpt] let _169: Double = Get _167[_168]
// [KnfOpt] let _170: Int = ExtApply(minimbt_truncate, [_169, ])
// [KnfOpt] let _171: Unit = ExtApply(minimbt_print_int, [_170, ])
// [KnfOpt] let _172: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _173: Int = Int(1)
// [KnfOpt] let _174: Array(Double) = Get c.87[_173]
// [KnfOpt] let _175: Int = Int(1)
// [KnfOpt] let _176: Double = Get _174[_175]
// [KnfOpt] let _177: Int = ExtApply(minimbt_truncate, [_176, ])
// [KnfOpt] let _178: Unit = ExtApply(minimbt_print_int, [_177, ])
// [KnfOpt] Unit
// [KnfOpt] freq: {loop3.1: Once, loop3.179: Many(2), loop2.21: Zero, loop2.199: Many(2), loop3.235: Many(2), loop1.34: Once, loop1.212: Many(2), loop2.255: Many(2), main.57: Once, make_arr.71: Many(3), init_arr.281: Many(2)}
// [KnfOpt] Knf inline Some(loop3) let _265: Unit = Unit
// [KnfOpt] let _266: Int = Int(1)
// [KnfOpt] let _267: Int = Sub(j.258, _266)
// [KnfOpt] Jump(loop2.255, [i.256, m.257, _267, a.259, b.260, c.261, ])
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 3 25
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Knf inline Some(loop1) let _293: Unit = Unit
// [KnfOpt] let _151: Unit = Unit
// [KnfOpt] let _152: Int = Int(0)
// [KnfOpt] let _153: Array(Double) = Get c.87[_152]
// [KnfOpt] let _154: Int = Int(0)
// [KnfOpt] let _155: Double = Get _153[_154]
// [KnfOpt] let _156: Int = ExtApply(minimbt_truncate, [_155, ])
// [KnfOpt] let _157: Unit = ExtApply(minimbt_print_int, [_156, ])
// [KnfOpt] let _158: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _159: Int = Int(0)
// [KnfOpt] let _160: Array(Double) = Get c.87[_159]
// [KnfOpt] let _161: Int = Int(1)
// [KnfOpt] let _162: Double = Get _160[_161]
// [KnfOpt] let _163: Int = ExtApply(minimbt_truncate, [_162, ])
// [KnfOpt] let _164: Unit = ExtApply(minimbt_print_int, [_163, ])
// [KnfOpt] let _165: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _166: Int = Int(1)
// [KnfOpt] let _167: Array(Double) = Get c.87[_166]
// [KnfOpt] let _168: Int = Int(0)
// [KnfOpt] let _169: Double = Get _167[_168]
// [KnfOpt] let _170: Int = ExtApply(minimbt_truncate, [_169, ])
// [KnfOpt] let _171: Unit = ExtApply(minimbt_print_int, [_170, ])
// [KnfOpt] let _172: Unit = ExtApply(minimbt_print_endline, [])
// [KnfOpt] let _173: Int = Int(1)
// [KnfOpt] let _174: Array(Double) = Get c.87[_173]
// [KnfOpt] let _175: Int = Int(1)
// [KnfOpt] let _176: Double = Get _174[_175]
// [KnfOpt] let _177: Int = ExtApply(minimbt_truncate, [_176, ])
// [KnfOpt] let _178: Unit = ExtApply(minimbt_print_int, [_177, ])
// [KnfOpt] Unit
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f1: Multiple, f2: Once})
// [CoreOpt] LVN subst Insn(iref=%2) with Insn(iref=%1)
