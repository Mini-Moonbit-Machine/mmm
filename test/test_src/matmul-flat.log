// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0, 8, 3, 5, 6, 1, 4]
// [Asm] LoweringOrder: [[8], [7], [4, 5], [6], [1], [], [3]]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 0), (b1, 1), (b8, 0), (b5, 1), (b3, 0), (b0, 0)])
// [Asm] LoweringOrder: [b0, b8, b3, b4, b5, b6, b1]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b4, 3), (b1, 2), (b8, 1), (b5, 0), (b3, 2), (b0, 0)])
// [Asm] pre_assigned_registers: BlockParam(bref=b1, bpref=$b.0) -> v14, FnParam(fref=f4, fpref=$f.0) -> v2, Mem(fref=f4, mref=m3) -> v6, BlockParam(bref=b3, bpref=$b.0) -> v9, BlockParam(bref=b3, bpref=$b.1) -> v10, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v17, Insn(iref=%0) -> v7, Insn(iref=%4) -> v15, Insn(iref=%3) -> v12, Insn(iref=%7) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v13, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%1) -> v8, BlockParam(bref=b3, bpref=$b.2) -> v11, Self(fref=f4) -> v0, Insn(iref=%6) -> v18, Mem(fref=f4, mref=m0) -> v5
// [Asm] succs: [3]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b3, bpref=$b.0), width=@64))
// [Asm] succs: []
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [1]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [4, 5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b3, bpref=$b.0)])
// [Asm] succs: [7]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [8]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] defs: [v9]
// [Asm] live_set: [v5, s11, zero, v9, v3]
// [Asm] move: v9 <- v8
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, s11, zero, v9]
// [Asm] move: v10 <- v3
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move: v11 <- v5
// [Asm] defined: v11 is X
// [Asm] skip edge 7 -> 3
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a2, a1, s11]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a2, a1, s11, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, a2, s11, v2]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, zero, v4, s11, v2]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, zero, v23, v4, s11, v2]
// [Asm] defined: v23 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, zero, v4, v2]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v5, zero, v4, s11, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v3, v5, zero, v4, a1, s11, v2]
// [Asm] move: a1 <- v2
// [Asm] defined: a1 is X
// [Asm] skip edge 11 -> 9
// [Asm] defs: [a0]
// [Asm] live_set: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] skip edge 8 -> 3
// [Asm] defs: [a2]
// [Asm] live_set: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm] move: a2 <- v4
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, s11, zero, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v5, s11, zero, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v5, v10, zero, v20, s11, v9]
// [Asm] defined: v20 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v11, v5, v10, zero, v6, v9]
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v11, v5, v10, zero, v6, s11, v9]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v10, v18, zero, s11]
// [Asm] defined: v18 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move: v9 <- v18
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, zero, s11, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v10, s11, zero, v9]
// [Asm] defs: [v13]
// [Asm] live_set: [v5, v13]
// [Asm] move: v13 <- zero
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v5]
// [Asm] move: v14 <- v13
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("make_arr.243") clobbered_x: @hashset.of([a0, s1, s2, a2, s0, a1, a3])
// [Asm] Label("make_arr.243") clobbered_f: @hashset.of([])
// [Asm] subst   blt v9, zero, .make_arr.243_5 ->   blt a0, zero, .make_arr.243_5
// [Asm] subst   mv v10, v3 ->   mv a1, s1
// [Asm] subst   mv v11, v5 ->   mv a3, s0
// [Asm] subst   mv v2, a0 ->   mv s2, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   slliw v23, v2, 3 ->   slliw a0, s2, 3
// [Asm] subst   sub v5, s11, v23 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, s2
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   call memseti64 ->   call memseti64
// [Asm] subst   addi v8, v2, -1 ->   addi a0, s2, -1
// [Asm] subst   slliw v20, v10, 3 ->   slliw a2, a1, 3
// [Asm] subst   sub v6, s11, v20 ->   sub a2, s11, a2
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a2, -8
// [Asm] subst   th.surd v6, v11, v9, 3 ->   th.surd a2, a3, a0, 3
// [Asm] subst   addi v18, v9, -1 ->   addi a0, a0, -1
// [Asm] subst   j .make_arr.243_3 ->   j .make_arr.243_3
// [Asm] subst   mv v13, zero ->   mv a0, zero
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%41) -> v44, Insn(iref=%33) -> v36, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%39) -> v42, Insn(iref=%4) -> v7, Insn(iref=%42) -> v45, Self(fref=f5) -> v0, Insn(iref=%44) -> v47, Insn(iref=%32) -> v35, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%31) -> v34, Insn(iref=%35) -> fv38, Insn(iref=%28) -> v31, Insn(iref=%38) -> v41, Insn(iref=%46) -> v49, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%37) -> v40, Insn(iref=%45) -> fv48, Insn(iref=%29) -> v32, Insn(iref=%5) -> v8, Insn(iref=%47) -> v50, Insn(iref=%19) -> v22, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Mem(fref=f5, mref=m0) -> v2, Insn(iref=%7) -> v10, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%2) -> v5, Insn(iref=%20) -> v23, Insn(iref=%43) -> v46, Insn(iref=%30) -> fv33, Insn(iref=%21) -> v24, Insn(iref=%34) -> v37, Insn(iref=%36) -> v39, Insn(iref=%40) -> fv43, Insn(iref=%12) -> v15
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [v115]
// [Asm] live_set: [v115, zero, v2]
// [Asm] defined: v115 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move: a0 <- v115
// [Asm] defined: a0 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v116, zero, a0, v2]
// [Asm] defined: v116 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, v2]
// [Asm] move: a1 <- v116
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, a2, a1, v2]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] defs: [v112]
// [Asm] live_set: [v112, zero, v4, v2]
// [Asm] defined: v112 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move: a0 <- v112
// [Asm] defined: a0 is X
// [Asm] defs: [v113]
// [Asm] live_set: [zero, a0, v4, v113, v2]
// [Asm] defined: v113 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v4, a1, v2]
// [Asm] move: a1 <- v113
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, v2]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] skip edge 7 -> 1
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] defs: [v110]
// [Asm] live_set: [v5, zero, v110, v4, v2]
// [Asm] defined: v110 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v110, v4, v2]
// [Asm] move: a0 <- v110
// [Asm] defined: a0 is X
// [Asm] skip edge 4 -> 22
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v2]
// [Asm] move: a1 <- v110
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6]
// [Asm] defined: v7 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v5, zero, v7, v107, v4, v6]
// [Asm] defined: v107 is X
// [Asm] defs: [fv108]
// [Asm] live_set: [fv108, v5, zero, v7, v4, v6]
// [Asm] defined: fv108 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, v6, v9]
// [Asm] defined: v9 is X
// [Asm] defs: [v104]
// [Asm] live_set: [v5, zero, v104, v4, v6, v9]
// [Asm] defined: v104 is X
// [Asm] defs: [fv105]
// [Asm] live_set: [fv105, v5, zero, v4, v6, v9]
// [Asm] defined: fv105 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v11, v5, zero, v4, v6, v101]
// [Asm] defined: v101 is X
// [Asm] defs: [fv102]
// [Asm] live_set: [v11, v5, zero, v4, v6, fv102]
// [Asm] defined: fv102 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, v6]
// [Asm] defined: v13 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v5, zero, v13, v4, v6, v98]
// [Asm] defined: v98 is X
// [Asm] defs: [fv99]
// [Asm] live_set: [v5, fv99, zero, v13, v4, v6]
// [Asm] defined: fv99 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, v15]
// [Asm] defined: v15 is X
// [Asm] defs: [v95]
// [Asm] live_set: [v5, zero, v95, v4, v6, v15]
// [Asm] defined: v95 is X
// [Asm] defs: [fv96]
// [Asm] live_set: [v5, zero, fv96, v4, v6, v15]
// [Asm] defined: fv96 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17]
// [Asm] defined: v17 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v5, zero, v92, v4, v6, v17]
// [Asm] defined: v92 is X
// [Asm] defs: [fv93]
// [Asm] live_set: [v5, zero, v4, v6, v17, fv93]
// [Asm] defined: fv93 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v19, v4, v6]
// [Asm] defined: v19 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v5, zero, v19, v4, v6, v89]
// [Asm] defined: v89 is X
// [Asm] defs: [fv90]
// [Asm] live_set: [v5, zero, fv90, v19, v4, v6]
// [Asm] defined: fv90 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v4, v6]
// [Asm] defined: v21 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v5, v21, zero, v4, v6, v86]
// [Asm] defined: v86 is X
// [Asm] defs: [fv87]
// [Asm] live_set: [v5, v21, zero, fv87, v4, v6]
// [Asm] defined: fv87 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v4, v6]
// [Asm] defined: v23 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v5, zero, v23, v4, v6, v83]
// [Asm] defined: v83 is X
// [Asm] defs: [fv84]
// [Asm] live_set: [v5, zero, v23, v4, fv84, v6]
// [Asm] defined: fv84 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v4, v6]
// [Asm] defined: v25 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v25, v5, zero, v4, v80, v6]
// [Asm] defined: v80 is X
// [Asm] defs: [fv81]
// [Asm] live_set: [v25, v5, zero, v4, v6, fv81]
// [Asm] defined: fv81 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v4, v6]
// [Asm] defined: v27 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v5, zero, v27, v77, v4, v6]
// [Asm] defined: v77 is X
// [Asm] defs: [fv78]
// [Asm] live_set: [v5, fv78, zero, v27, v4, v6]
// [Asm] defined: fv78 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v4, v6]
// [Asm] defined: v29 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v5, zero, v29, v4, v6, v74]
// [Asm] defined: v74 is X
// [Asm] defs: [fv75]
// [Asm] live_set: [v5, zero, v29, v4, fv75, v6]
// [Asm] defined: fv75 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] defs: [v70]
// [Asm] live_set: [v5, zero, v4, v6, v70]
// [Asm] defined: v70 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v6]
// [Asm] move: a0 <- v70
// [Asm] defined: a0 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, a0, v4, v6]
// [Asm] defined: v71 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v6]
// [Asm] move: a1 <- v71
// [Asm] defined: a1 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v5, zero, a0, v4, a1, v6]
// [Asm] defined: v72 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, v4, a1, v6]
// [Asm] move: a2 <- v72
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, v6, a1, a3]
// [Asm] move: a3 <- v4
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, v6, a1, a3]
// [Asm] move: a4 <- v5
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm] move: a5 <- v6
// [Asm] defined: a5 is X
// [Asm] skip edge 15 -> 23
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v6, zero]
// [Asm] move: v31 <- a0
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v6, zero]
// [Asm] defined: v32 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [v6, zero, fv33]
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v6, zero, v34]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move: a0 <- v34
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v6, zero]
// [Asm] move: v35 <- a0
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v6, zero]
// [Asm] move: v36 <- a0
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v6, zero]
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [v6, zero, fv38]
// [Asm] defined: fv38 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v6, zero, v39]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v39]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move: a0 <- v39
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v6, zero]
// [Asm] move: v40 <- a0
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v6, zero]
// [Asm] move: v41 <- a0
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero, v42]
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v6, zero, fv43]
// [Asm] defined: fv43 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v6, v44, zero]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v44, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move: a0 <- v44
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v6, zero]
// [Asm] move: v45 <- a0
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, zero]
// [Asm] move: v46 <- a0
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] defs: [v47]
// [Asm] live_set: [v47, zero]
// [Asm] defined: v47 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [fv48, zero]
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v49, zero]
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v49, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v49
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [zero]
// [Asm] move: v50 <- a0
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.241") clobbered_x: @hashset.of([s2, a2, s0, a1, a0, s1])
// [Asm] Label("main.241") clobbered_f: @hashset.of([fa0])
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v115, 2 ->   li a0, 2
// [Asm] subst   li v116, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr.243 ->   call make_arr.243
// [Asm] subst   mv v4, a0 ->   mv s1, a0
// [Asm] subst   li v112, 3 ->   li a0, 3
// [Asm] subst   li v113, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr.243 ->   call make_arr.243
// [Asm] subst   mv v5, a0 ->   mv s2, a0
// [Asm] subst   li v110, 2 ->   li a0, 2
// [Asm] subst   mv a1, v110 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr.243 ->   call make_arr.243
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v107, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv108, v107 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv108, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v104, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv105, v104 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv105, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v101, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv102, v101 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv102, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v98, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv99, v98 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv99, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v95, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv96, v95 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv96, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v92, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv93, v92 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv93, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v89, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv90, v89 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv90, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v86, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv87, v86 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv87, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v83, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv84, v83 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv84, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v80, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv81, v80 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv81, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v77, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv78, v77 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv78, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v74, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv75, v74 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv75, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v70, 1 ->   li a0, 1
// [Asm] subst   li v71, 3 ->   li a1, 3
// [Asm] subst   li v72, 2 ->   li a2, 2
// [Asm] subst   mv a3, v4 ->   mv a3, s1
// [Asm] subst   mv a4, v5 ->   mv a4, s2
// [Asm] subst   mv a5, v6 ->   mv a5, s0
// [Asm] subst   call loop1.240 ->   call loop1.240
// [Asm] subst   ld v32, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv33, 0(v32) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v34, fv33, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v37, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv38, 8(v37) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v39, fv38, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v42, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv43, 0(v42) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v44, fv43, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v47, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv48, 8(v47) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v49, fv48, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 3, 1, 12, 7, 9, 10, 6, 8, 19, 14, 16, 17, 13, 15]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [12], [11], [8, 9], [10], [6], [0], [19], [18], [15, 16], [17], [13], [7], [14]]
// [Asm] LoweringOrder: HashMap::of([(b8, 0), (b9, 3), (b16, 1), (b19, 0), (b13, 1), (b15, 0), (b1, 0), (b2, 5), (b6, 3), (b12, 0), (b17, 1), (b0, 0), (b10, 3), (b5, 0), (b14, 0), (b3, 5), (b7, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b12, b7, b8, b19, b14, b15, b16, b17, b13, b9, b10, b6, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b8, 5), (b9, 0), (b16, 0), (b19, 6), (b13, 2), (b15, 8), (b1, 2), (b2, 0), (b6, 2), (b12, 3), (b17, 1), (b0, 1), (b10, 1), (b5, 0), (b14, 7), (b3, 1), (b7, 4)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv52, BlockParam(bref=b7, bpref=$b.1) -> v21, Insn(iref=%33) -> v49, BlockParam(bref=b7, bpref=$b.0) -> v20, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b14, bpref=$b.8) -> v42, BlockParam(bref=b10, bpref=$b.0) -> v30, Insn(iref=%8) -> v33, Insn(iref=%10) -> v46, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%14) -> v51, BlockParam(bref=b14, bpref=$b.0) -> v34, Insn(iref=%4) -> v19, FnParam(fref=f2, fpref=$f.5) -> v7, BlockParam(bref=b7, bpref=$b.6) -> v26, BlockParam(bref=b14, bpref=$b.7) -> v41, BlockParam(bref=b14, bpref=$b.3) -> v37, BlockParam(bref=b7, bpref=$b.3) -> v23, BlockParam(bref=b6, bpref=$b.0) -> v31, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v16, Insn(iref=%11) -> v43, Insn(iref=%6) -> v32, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b14, bpref=$b.1) -> v35, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b7, bpref=$b.2) -> v22, FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b17, bpref=$b.0) -> v44, BlockParam(bref=b3, bpref=$b.0) -> v15, BlockParam(bref=b14, bpref=$b.6) -> v40, Insn(iref=%16) -> fv53, Self(fref=f2) -> v0, Insn(iref=%37) -> v17, BlockParam(bref=b7, bpref=$b.5) -> v25, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b14, bpref=$b.4) -> v38, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b14, bpref=$b.2) -> v36, BlockParam(bref=b7, bpref=$b.8) -> v28, Insn(iref=%0) -> v14, Insn(iref=%19) -> v56, BlockParam(bref=b13, bpref=$b.0) -> v45, Insn(iref=%18) -> v55, Insn(iref=%13) -> fv50, Insn(iref=%7) -> v29, Insn(iref=%17) -> fv54, BlockParam(bref=b7, bpref=$b.7) -> v27, Insn(iref=%2) -> v18, BlockParam(bref=b14, bpref=$b.5) -> v39, BlockParam(bref=b7, bpref=$b.4) -> v24, Insn(iref=%34) -> v47, FnParam(fref=f2, fpref=$f.3) -> v5, Insn(iref=%12) -> fv48
// [Asm] succs: [14]
// [Asm] critical edges for b15: []
// [Asm] critical color seq for b15: []
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b14, bpref=$b.2), width=@64))
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b14, bpref=$b.1), width=@64))
// [Asm] succs: [7]
// [Asm] critical edges for b13: []
// [Asm] critical color seq for b13: []
// [Asm] succs: [13]
// [Asm] critical edges for b17: []
// [Asm] critical color seq for b17: []
// [Asm] succs: [17]
// [Asm] critical edges for b16: []
// [Asm] critical color seq for b16: []
// [Asm] succs: [15, 16]
// [Asm] critical edges for b14: []
// [Asm] critical color seq for b14: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b14, bpref=$b.2)])
// [Asm] succs: [18]
// [Asm] critical edges for b19: []
// [Asm] critical color seq for b19: []
// [Asm] succs: [19]
// [Asm] critical edges for b8: []
// [Asm] critical color seq for b8: []
// [Asm] succs: [0]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b10: []
// [Asm] critical color seq for b10: []
// [Asm] succs: [10]
// [Asm] critical edges for b9: []
// [Asm] critical color seq for b9: []
// [Asm] succs: [8, 9]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b7, bpref=$b.2)])
// [Asm] succs: [11]
// [Asm] critical edges for b12: []
// [Asm] critical color seq for b12: []
// [Asm] succs: [12]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@64))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v16, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move: v20 <- v8
// [Asm] defined: v20 is X
// [Asm] skip edge 1 -> 0
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v16, v21, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move: v21 <- v9
// [Asm] defined: v21 is X
// [Asm] skip edge 11 -> 7
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move: v22 <- v16
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move: v23 <- v11
// [Asm] defined: v23 is X
// [Asm] skip edge 13 -> 2
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move: v24 <- v12
// [Asm] defined: v24 is X
// [Asm] skip edge 14 -> 6
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move: v25 <- v13
// [Asm] defined: v25 is X
// [Asm] skip edge 15 -> 5
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move: v26 <- v18
// [Asm] defined: v26 is X
// [Asm] skip edge 16 -> 8
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, zero, v23, v27, v20, v8, v19]
// [Asm] move: v27 <- v18
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v28 <- v19
// [Asm] defined: v28 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move: v15 <- zero
// [Asm] defined: v15 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v10, v13, zero, v32, v12, v9]
// [Asm] defined: v32 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v8 <- v32
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v12 <- v12
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v13
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, v13, zero, v30, v8, v12, v9]
// [Asm] move: v30 <- zero
// [Asm] defined: v30 is X
// [Asm] skip edge 21 -> 9
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v20 <- v20
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v21 <- v21
// [Asm] defs: [v22]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v22 <- v46
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v23 <- v23
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v24 <- v24
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v25 <- v25
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v26 <- v26
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v27 <- v27
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move: v28 <- v28
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] defs: [fv48]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] defined: fv48 is F
// [Asm] defs: [fv50]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] defined: fv50 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, v51, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] defined: v51 is X
// [Asm] defs: [fv52]
// [Asm] live_set: [v25, fv52, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] defined: fv52 is F
// [Asm] defs: [fv54]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv54, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] defined: fv54 is F
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v41, v37, v12, v24, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] defs: [v56]
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v34 <- v34
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v35 <- v35
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v36 <- v56
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v37 <- v37
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v38 <- v38
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v39 <- v39
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v40 <- v40
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v41 <- v41
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v42 <- v42
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v45, v8]
// [Asm] move: v45 <- v44
// [Asm] defined: v45 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v16 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v18, v10, v13, zero, v8, v12, v9]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move: v6 <- a4
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move: v7 <- a5
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move: v8 <- v2
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move: v9 <- v3
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move: v10 <- v4
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move: v11 <- v5
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move: v12 <- v6
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move: v13 <- v7
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] defs: [v33]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v20, v27, v23, v8]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v8, v34]
// [Asm] move: v34 <- v20
// [Asm] defined: v34 is X
// [Asm] skip edge 26 -> 1
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v35, v8, v34]
// [Asm] move: v35 <- v22
// [Asm] defined: v35 is X
// [Asm] skip edge 24 -> 12
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm] move: v36 <- v33
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm] move: v37 <- v23
// [Asm] defined: v37 is X
// [Asm] skip edge 28 -> 13
// [Asm] defs: [v38]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm] move: v38 <- v24
// [Asm] defined: v38 is X
// [Asm] skip edge 30 -> 14
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm] move: v39 <- v25
// [Asm] defined: v39 is X
// [Asm] skip edge 29 -> 15
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v40 <- v26
// [Asm] defined: v40 is X
// [Asm] skip edge 31 -> 16
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v41 <- v27
// [Asm] defined: v41 is X
// [Asm] skip edge 23 -> 17
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move: v42 <- v28
// [Asm] defined: v42 is X
// [Asm] skip edge 25 -> 18
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v31, v9]
// [Asm] move: v31 <- v30
// [Asm] defined: v31 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8]
// [Asm] move: v44 <- zero
// [Asm] defined: v44 is X
// [Asm] skip edge 34 -> 9
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v15
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("loop1.240") clobbered_x: @hashset.of([t1, a5, a0, s1, s2, a2, a1, a3, t3, a7, t0, a4, a6, t4, s0, t2])
// [Asm] Label("loop1.240") clobbered_f: @hashset.of([fa2, fa1, fa0])
// [Asm] subst   mv v27, v18 ->   mv t1, a7
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   addi v32, v8, -1 ->   addi a0, a0, -1
// [Asm] subst   j .loop1.240_0 ->   j .loop1.240_0
// [Asm] subst   blt v22, zero, .loop1.240_9 ->   blt a2, zero, .loop1.240_9
// [Asm] subst   blt v8, zero, .loop1.240_2 ->   blt a0, zero, .loop1.240_2
// [Asm] subst   mv v30, zero ->   mv a2, zero
// [Asm] subst   addi v46, v22, -1 ->   addi a2, a2, -1
// [Asm] subst   j .loop1.240_7 ->   j .loop1.240_7
// [Asm] subst   th.flurd fv48, v41, v35, 3 ->   th.flurd fa0, t1, a2, 3
// [Asm] subst   th.flurd fv50, v42, v36, 3 ->   th.flurd fa1, t0, t2, 3
// [Asm] subst   th.lurd v51, v38, v36, 3 ->   th.lurd t3, s2, t2, 3
// [Asm] subst   th.flurd fv52, v51, v35, 3 ->   th.flurd fa2, t3, a2, 3
// [Asm] subst   fmadd.d fv54, fv50, fv52, fv48 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   th.fsurd fv54, v40, v35, 3 ->   th.fsurd fa0, a7, a2, 3
// [Asm] subst   addi v56, v36, -1 ->   addi t2, t2, -1
// [Asm] subst   j .loop1.240_14 ->   j .loop1.240_14
// [Asm] subst   addi v16, v10, -1 ->   addi a2, a3, -1
// [Asm] subst   th.lurd v18, v13, v8, 3 ->   th.lurd a7, a4, a0, 3
// [Asm] subst   th.lurd v19, v11, v8, 3 ->   th.lurd t0, a1, a0, 3
// [Asm] subst   mv v3, a1 ->   mv a6, a1
// [Asm] subst   mv v4, a2 ->   mv a7, a2
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v7, a5 ->   mv a2, a5
// [Asm] subst   mv v10, v4 ->   mv a3, a7
// [Asm] subst   mv v12, v6 ->   mv a5, a4
// [Asm] subst   mv v13, v7 ->   mv a4, a2
// [Asm] subst   blt v36, zero, .loop1.240_16 ->   blt t2, zero, .loop1.240_16
// [Asm] subst   addi v33, v21, -1 ->   addi t2, a6, -1
// [Asm] subst   mv v34, v20 ->   mv t4, a0
// [Asm] subst   mv v37, v23 ->   mv s0, a1
// [Asm] subst   mv v38, v24 ->   mv s2, a5
// [Asm] subst   mv v39, v25 ->   mv s1, a4
// [Asm] subst   mv v44, zero ->   mv t2, zero
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.241:
// [Asm] # block info: defs: [v83, v15, fv102, v2, v95, fv84, a1, s11, v44, fa1, fv38, fa2, fv99, ft6, fa6, a4, v27, v50, fv96, a6, ft5, ft10, v6, v116, ft4, v5, fv78, ft9, v49, fa4, v110, ft2, v92, v37, v17, a3, v31, v113, v101, a7, fa7, fv108, fa3, ft3, fv43, v45, v104, t2, v40, v25, t1, fv105, v13, v42, v7, v107, ft0, ft1, fv75, v32, v41, v86, fv81, fv93, v98, v115, v29, v19, v4, v47, v74, v89, v34, ft7, v11, v71, v46, v21, a5, a0, v36, fv48, a2, v9, v39, ft8, t3, v112, t0, v72, fa5, v23, v77, fa0, fv33, v35, fv87, fv90, v80, t4, v70], uses: [v2, v95, fv84, a1, s11, v44, fv38, fv99, v27, a4, fv96, v6, v116, v5, fv78, v49, v110, v92, v37, v17, a3, v113, v101, fv108, fv43, v104, v25, fv105, v13, v42, v7, v107, fv75, v32, v86, fv81, fv93, v98, v115, v29, zero, v19, v4, v47, v74, v89, v34, v11, v71, v21, a5, a0, fv48, a2, v9, v39, v112, v72, v23, v77, fv33, fv87, fv90, v80, v70, v83, v15, fv102], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.241_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v115, 2  # live: [v115, zero, v2]
// [Asm]   mv a0, v115  # live: [zero, a0, v2]
// [Asm]   li v116, 3  # live: [v116, zero, a0, v2]
// [Asm]   mv a1, v116  # live: [zero, a0, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, a2, a1, v2]
// [Asm]   call make_arr.243  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [zero, v4, v2]
// [Asm]   # save_ctx2  # live: [zero, v4, v2]
// [Asm]   li v112, 3  # live: [v112, zero, v4, v2]
// [Asm]   mv a0, v112  # live: [zero, a0, v4, v2]
// [Asm]   li v113, 2  # live: [zero, a0, v4, v113, v2]
// [Asm]   mv a1, v113  # live: [zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v4, a2, a1, v2]
// [Asm]   call make_arr.243  # live: [zero, a0, v4, v2]
// [Asm]   mv v5, a0  # live: [v5, zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   li v110, 2  # live: [v5, zero, v110, v4, v2]
// [Asm]   mv a0, v110  # live: [v5, zero, a0, v110, v4, v2]
// [Asm]   mv a1, v110  # live: [v5, zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, v4, a2, a1]
// [Asm]   call make_arr.243  # live: [v5, zero, a0, v4]
// [Asm]   mv v6, a0  # live: [v5, zero, v4, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   ld v7, 0(v4)  # live: [v5, zero, v7, v4, v6]
// [Asm]   li v107, 4607182418800017408  # live: [v5, zero, v7, v107, v4, v6]
// [Asm]   fmv.d.x fv108, v107  # live: [fv108, v5, zero, v7, v4, v6]
// [Asm]   fsd fv108, 0(v7)  # live: [v5, zero, v4, v6]
// [Asm]   ld v9, 0(v4)  # live: [v5, zero, v4, v6, v9]
// [Asm]   li v104, 4611686018427387904  # live: [v5, zero, v104, v4, v6, v9]
// [Asm]   fmv.d.x fv105, v104  # live: [fv105, v5, zero, v4, v6, v9]
// [Asm]   fsd fv105, 8(v9)  # live: [v5, zero, v4, v6]
// [Asm]   ld v11, 0(v4)  # live: [v11, v5, zero, v4, v6]
// [Asm]   li v101, 4613937818241073152  # live: [v11, v5, zero, v4, v6, v101]
// [Asm]   fmv.d.x fv102, v101  # live: [v11, v5, zero, v4, v6, fv102]
// [Asm]   fsd fv102, 16(v11)  # live: [v5, zero, v4, v6]
// [Asm]   ld v13, 8(v4)  # live: [v5, zero, v13, v4, v6]
// [Asm]   li v98, 4616189618054758400  # live: [v5, zero, v13, v4, v6, v98]
// [Asm]   fmv.d.x fv99, v98  # live: [v5, fv99, zero, v13, v4, v6]
// [Asm]   fsd fv99, 0(v13)  # live: [v5, zero, v4, v6]
// [Asm]   ld v15, 8(v4)  # live: [v5, zero, v4, v6, v15]
// [Asm]   li v95, 4617315517961601024  # live: [v5, zero, v95, v4, v6, v15]
// [Asm]   fmv.d.x fv96, v95  # live: [v5, zero, fv96, v4, v6, v15]
// [Asm]   fsd fv96, 8(v15)  # live: [v5, zero, v4, v6]
// [Asm]   ld v17, 8(v4)  # live: [v5, zero, v4, v6, v17]
// [Asm]   li v92, 4618441417868443648  # live: [v5, zero, v92, v4, v6, v17]
// [Asm]   fmv.d.x fv93, v92  # live: [v5, zero, v4, v6, v17, fv93]
// [Asm]   fsd fv93, 16(v17)  # live: [v5, zero, v4, v6]
// [Asm]   ld v19, 0(v5)  # live: [v5, zero, v19, v4, v6]
// [Asm]   li v89, 4619567317775286272  # live: [v5, zero, v19, v4, v6, v89]
// [Asm]   fmv.d.x fv90, v89  # live: [v5, zero, fv90, v19, v4, v6]
// [Asm]   fsd fv90, 0(v19)  # live: [v5, zero, v4, v6]
// [Asm]   ld v21, 0(v5)  # live: [v5, v21, zero, v4, v6]
// [Asm]   li v86, 4620693217682128896  # live: [v5, v21, zero, v4, v6, v86]
// [Asm]   fmv.d.x fv87, v86  # live: [v5, v21, zero, fv87, v4, v6]
// [Asm]   fsd fv87, 8(v21)  # live: [v5, zero, v4, v6]
// [Asm]   ld v23, 8(v5)  # live: [v5, zero, v23, v4, v6]
// [Asm]   li v83, 4621256167635550208  # live: [v5, zero, v23, v4, v6, v83]
// [Asm]   fmv.d.x fv84, v83  # live: [v5, zero, v23, v4, fv84, v6]
// [Asm]   fsd fv84, 0(v23)  # live: [v5, zero, v4, v6]
// [Asm]   ld v25, 8(v5)  # live: [v25, v5, zero, v4, v6]
// [Asm]   li v80, 4621819117588971520  # live: [v25, v5, zero, v4, v80, v6]
// [Asm]   fmv.d.x fv81, v80  # live: [v25, v5, zero, v4, v6, fv81]
// [Asm]   fsd fv81, 8(v25)  # live: [v5, zero, v4, v6]
// [Asm]   ld v27, 16(v5)  # live: [v5, zero, v27, v4, v6]
// [Asm]   li v77, 4622382067542392832  # live: [v5, zero, v27, v77, v4, v6]
// [Asm]   fmv.d.x fv78, v77  # live: [v5, fv78, zero, v27, v4, v6]
// [Asm]   fsd fv78, 0(v27)  # live: [v5, zero, v4, v6]
// [Asm]   ld v29, 16(v5)  # live: [v5, zero, v29, v4, v6]
// [Asm]   li v74, 4622945017495814144  # live: [v5, zero, v29, v4, v6, v74]
// [Asm]   fmv.d.x fv75, v74  # live: [v5, zero, v29, v4, fv75, v6]
// [Asm]   fsd fv75, 8(v29)  # live: [v5, zero, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   li v70, 1  # live: [v5, zero, v4, v6, v70]
// [Asm]   mv a0, v70  # live: [v5, zero, a0, v4, v6]
// [Asm]   li v71, 3  # live: [v5, v71, zero, a0, v4, v6]
// [Asm]   mv a1, v71  # live: [v5, zero, a0, v4, a1, v6]
// [Asm]   li v72, 2  # live: [v72, v5, zero, a0, v4, a1, v6]
// [Asm]   mv a2, v72  # live: [v5, zero, a0, a2, v4, a1, v6]
// [Asm]   mv a3, v4  # live: [v5, zero, a0, a2, v6, a1, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, v6, a1, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm]   call loop1.240  # live: [v6, zero, a0]
// [Asm]   mv v31, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v32, 0(v6)  # live: [v32, v6, zero]
// [Asm]   fld fv33, 0(v32)  # live: [v6, zero, fv33]
// [Asm]   fcvt.w.d v34, fv33, rtz  # live: [v6, zero, v34]
// [Asm]   # save_ctx2  # live: [v6, zero, v34]
// [Asm]   mv a0, v34  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v35, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v36, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v37, 0(v6)  # live: [v37, v6, zero]
// [Asm]   fld fv38, 8(v37)  # live: [v6, zero, fv38]
// [Asm]   fcvt.w.d v39, fv38, rtz  # live: [v6, zero, v39]
// [Asm]   # save_ctx2  # live: [v6, zero, v39]
// [Asm]   mv a0, v39  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v40, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v41, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v42, 8(v6)  # live: [v6, zero, v42]
// [Asm]   fld fv43, 0(v42)  # live: [v6, zero, fv43]
// [Asm]   fcvt.w.d v44, fv43, rtz  # live: [v6, v44, zero]
// [Asm]   # save_ctx2  # live: [v6, v44, zero]
// [Asm]   mv a0, v44  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v45, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v46, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v47, 8(v6)  # live: [v47, zero]
// [Asm]   fld fv48, 8(v47)  # live: [fv48, zero]
// [Asm]   fcvt.w.d v49, fv48, rtz  # live: [v49, zero]
// [Asm]   # save_ctx2  # live: [v49, zero]
// [Asm]   mv a0, v49  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v50, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] make_arr.243:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2, v3], uses: [v5, a0, v23, a2, v4, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v3, v5, s11, zero, v8]
// [Asm] # block parameters: []
// [Asm] .make_arr.243_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a2, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v3, zero, a2, s11, v2]
// [Asm]   mv v4, a2  # live: [v3, zero, v4, s11, v2]
// [Asm]   slliw v23, v2, 3  # live: [v3, zero, v23, v4, s11, v2]
// [Asm]   sub v5, s11, v23  # live: [v3, v5, zero, v4, v2]
// [Asm]   andi s11, v5, -8  # live: [v3, v5, zero, v4, s11, v2]
// [Asm]   mv a1, v2  # live: [v3, v5, zero, v4, a1, s11, v2]
// [Asm]   mv a0, v5  # live: [v3, v5, zero, a0, v4, a1, s11, v2]
// [Asm]   mv a2, v4  # live: [v3, v5, zero, a0, a2, a1, s11, v2]
// [Asm]   call memseti64  # live: [v2, v5, s11, zero, v3]
// [Asm]   addi v8, v2, -1  # live: [v8, v5, s11, zero, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v11, v10, v9], uses: [v3, v5, v8], upward_exposed: [v3, v5, v8], params_defs: []
// [Asm] # live_in: [v8, v5, s11, zero, v3], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: []
// [Asm] .make_arr.243_8:
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v5, s11, zero, v9, v3]
// [Asm]   mv v10, v3  # live: [v5, v10, s11, zero, v9]
// [Asm]   mv v11, v5  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v9, zero], upward_exposed: [v9, zero], params_defs: [v11, v10, v9]
// [Asm] # live_in: [v11, v5, v10, zero, s11, v9], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: [v9, v10, v11]
// [Asm] .make_arr.243_3:
// [Asm] # control
// [Asm]   blt v9, zero, .make_arr.243_5  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v6, s11, v18, v9, v20], uses: [v11, v10, v18, v20, v6, s11, v9], upward_exposed: [v11, v10, s11, v9], params_defs: []
// [Asm] # live_in: [v11, v5, v10, zero, s11, v9], live_out: [v11, v5, v10, zero, s11, v9]
// [Asm] # block parameters: []
// [Asm] .make_arr.243_4:
// [Asm]   slliw v20, v10, 3  # live: [v11, v5, v10, zero, v20, s11, v9]
// [Asm]   sub v6, s11, v20  # live: [v11, v5, v10, zero, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [v11, v5, v10, zero, v6, s11, v9]
// [Asm]   th.surd v6, v11, v9, 3  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   addi v18, v9, -1  # live: [v11, v5, v10, v18, zero, s11]
// [Asm] # control
// [Asm]   mv v9, v18  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   mv v10, v10  # live: [v11, v5, v10, zero, s11, v9]
// [Asm]   mv v11, v11  # live: [v11, v5, v10, s11, zero, v9]
// [Asm]   j .make_arr.243_3  # live: [v11, v5, v10, s11, zero, v9]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v5, zero], live_out: [v5, v13]
// [Asm] # block parameters: []
// [Asm] .make_arr.243_5:
// [Asm] # control
// [Asm]   mv v13, zero  # live: [v5, v13]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [v13], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v5, v13], live_out: [v14, v5]
// [Asm] # block parameters: [v13]
// [Asm] .make_arr.243_6:
// [Asm] # control
// [Asm]   mv v14, v13  # live: [v14, v5]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v5, a0], upward_exposed: [v5], params_defs: [v14]
// [Asm] # live_in: [v14, v5], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .make_arr.243_1:
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] loop1.240:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.240_5:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop1.240_0:
// [Asm] # control
// [Asm]   blt v8, zero, .loop1.240_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v19, v16, v18], uses: [v11, v10, v13, v8], upward_exposed: [v11, v10, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.240_1:
// [Asm]   addi v16, v10, -1  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   th.lurd v18, v13, v8, 3  # live: [v11, v16, v18, v10, v13, zero, v8, v12, v9]
// [Asm]   th.lurd v19, v11, v8, 3  # live: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v25, v21, v26, v23, v20, v22, v27, v24, v28], uses: [v11, v16, v18, v13, v8, v19, v12, v9], upward_exposed: [v11, v16, v18, v13, v8, v19, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] # block parameters: []
// [Asm] .loop1.240_12:
// [Asm] # control
// [Asm]   mv v20, v8  # live: [v11, v16, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v21, v9  # live: [v11, v16, v21, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v22, v16  # live: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v23, v11  # live: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v24, v12  # live: [v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v25, v13  # live: [v25, v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v26, v18  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v27, v18  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, zero, v23, v27, v20, v8, v19]
// [Asm]   mv v28, v19  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v22], upward_exposed: [zero, v22], params_defs: [v25, v21, v26, v23, v20, v22, v27, v24, v28]
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8]
// [Asm] # block parameters: [v20, v21, v22, v23, v24, v25, v26, v27, v28]
// [Asm] .loop1.240_7:
// [Asm] # control
// [Asm]   blt v22, zero, .loop1.240_9  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v21], upward_exposed: [v21], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v20, v27, v23, v8]
// [Asm] # block parameters: []
// [Asm] .loop1.240_8:
// [Asm]   addi v33, v21, -1  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v20, v27, v23, v8]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v42, v36, v35, v37, v38, v41, v34, v39, v40], uses: [v25, v26, v23, v20, v22, v27, v24, v28, v33], upward_exposed: [v25, v26, v23, v20, v22, v27, v24, v28, v33], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v27, v23, v20, v8], live_out: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # block parameters: []
// [Asm] .loop1.240_19:
// [Asm] # control
// [Asm]   mv v34, v20  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v8, v34]
// [Asm]   mv v35, v22  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v35, v8, v34]
// [Asm]   mv v36, v33  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm]   mv v37, v23  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm]   mv v38, v24  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm]   mv v39, v25  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm]   mv v40, v26  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v41, v27  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v42, v28  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v36], upward_exposed: [zero, v36], params_defs: [v42, v36, v35, v37, v38, v41, v34, v39, v40]
// [Asm] # live_in: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40], live_out: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # block parameters: [v34, v35, v36, v37, v38, v39, v40, v41, v42]
// [Asm] .loop1.240_14:
// [Asm] # control
// [Asm]   blt v36, zero, .loop1.240_16  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [fv50, fv52, v56, fv54, v36, fv48, v51], uses: [fv52, v42, v36, fv54, fv48, v41, v37, v39, v51, fv50, v56, v35, v38, v34, v40], upward_exposed: [v42, v36, v35, v38, v41, v37, v34, v39, v40], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40], live_out: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # block parameters: []
// [Asm] .loop1.240_15:
// [Asm]   th.flurd fv48, v41, v35, 3  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   th.flurd fv50, v42, v36, 3  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   th.lurd v51, v38, v36, 3  # live: [v25, v42, v26, v13, v22, v41, v12, v28, v51, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   th.flurd fv52, v51, v35, 3  # live: [v25, fv52, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   fmadd.d fv54, fv50, fv52, fv48  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv54, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   th.fsurd fv54, v40, v35, 3  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v41, v37, v12, v24, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   addi v56, v36, -1  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # control
// [Asm]   mv v34, v34  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v35, v35  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v36, v56  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v37, v37  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v38, v38  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v39, v39  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v40, v40  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v41, v41  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v42, v42  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   j .loop1.240_14  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8]
// [Asm] # block parameters: []
// [Asm] .loop1.240_16:
// [Asm] # control
// [Asm]   mv v44, zero  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v45, v8]
// [Asm] # block parameters: [v44]
// [Asm] .loop1.240_17:
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v45, v8]
// [Asm] 
// [Asm] # block info: defs: [v46, v22], uses: [v25, v46, v21, v26, v23, v22, v20, v27, v24, v28], upward_exposed: [v25, v21, v26, v23, v22, v20, v27, v24, v28], params_defs: [v45]
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v45, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] # block parameters: [v45]
// [Asm] .loop1.240_13:
// [Asm]   addi v46, v22, -1  # live: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] # control
// [Asm]   mv v20, v20  # live: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v21, v21  # live: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v22, v46  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v23, v23  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v24, v24  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v25, v25  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v26, v26  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v27, v27  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v28, v28  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   j .loop1.240_7  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v13, zero, v30, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.240_9:
// [Asm] # control
// [Asm]   mv v30, zero  # live: [v11, v10, v13, zero, v30, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v11, v10, v13, zero, v30, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v31, v9]
// [Asm] # block parameters: [v30]
// [Asm] .loop1.240_10:
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v11, v10, v13, zero, v8, v12, v31, v9]
// [Asm] 
// [Asm] # block info: defs: [v32, v8], uses: [v11, v10, v13, v8, v32, v12, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: [v31]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v31, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v31]
// [Asm] .loop1.240_6:
// [Asm]   addi v32, v8, -1  # live: [v11, v10, v13, zero, v32, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v32  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop1.240_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop1.240_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop1.240_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.241  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti64
// [Main]   .type memseti64, @function
// [Main] memseti64:
// [Main]   blez a1, .memseti64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memseti64_b0:
// [Main]   sd a2, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memseti64_b0
// [Main] .memseti64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.241
// [Main]   .type main.241, @function
// [Main] # leaf false
// [Main] main.241:
// [Main] .main.241_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   call make_arr.243
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   call make_arr.243
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   call make_arr.243
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 1
// [Main]   li a1, 3
// [Main]   li a2, 2
// [Main]   mv a3, s1
// [Main]   mv a4, s2
// [Main]   mv a5, s0
// [Main]   call loop1.240
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl make_arr.243
// [Main]   .type make_arr.243, @function
// [Main] # leaf false
// [Main] make_arr.243:
// [Main] .make_arr.243_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s2, a0
// [Main]   mv s1, a1
// [Main]   slliw a0, s2, 3
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, s2
// [Main]   mv a0, s0
// [Main]   call memseti64
// [Main]   addi a0, s2, -1
// [Main] 
// [Main] .make_arr.243_8:
// [Main]   mv a1, s1
// [Main]   mv a3, s0
// [Main] 
// [Main] .make_arr.243_3:
// [Main]   blt a0, zero, .make_arr.243_5
// [Main] 
// [Main] .make_arr.243_4:
// [Main]   slliw a2, a1, 3
// [Main]   sub a2, s11, a2
// [Main]   andi s11, a2, -8
// [Main]   th.surd a2, a3, a0, 3
// [Main]   addi a0, a0, -1
// [Main]   j .make_arr.243_3
// [Main] 
// [Main] .make_arr.243_5:
// [Main]   mv a0, zero
// [Main] 
// [Main] .make_arr.243_6:
// [Main] 
// [Main] .make_arr.243_1:
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop1.240
// [Main]   .type loop1.240, @function
// [Main] # leaf true
// [Main] loop1.240:
// [Main] .loop1.240_5:
// [Main]   addi sp, sp, -32
// [Main]   sd s0, 0(sp)
// [Main]   sd s1, 8(sp)
// [Main]   sd s2, 16(sp)
// [Main]   mv a6, a1
// [Main]   mv a7, a2
// [Main]   mv a1, a3
// [Main]   mv a2, a5
// [Main]   mv a3, a7
// [Main]   mv a5, a4
// [Main]   mv a4, a2
// [Main] 
// [Main] .loop1.240_0:
// [Main]   blt a0, zero, .loop1.240_2
// [Main] 
// [Main] .loop1.240_1:
// [Main]   addi a2, a3, -1
// [Main]   th.lurd a7, a4, a0, 3
// [Main]   th.lurd t0, a1, a0, 3
// [Main] 
// [Main] .loop1.240_12:
// [Main]   mv t1, a7
// [Main] 
// [Main] .loop1.240_7:
// [Main]   blt a2, zero, .loop1.240_9
// [Main] 
// [Main] .loop1.240_8:
// [Main]   addi t2, a6, -1
// [Main] 
// [Main] .loop1.240_19:
// [Main]   mv t4, a0
// [Main]   mv s0, a1
// [Main]   mv s2, a5
// [Main]   mv s1, a4
// [Main] 
// [Main] .loop1.240_14:
// [Main]   blt t2, zero, .loop1.240_16
// [Main] 
// [Main] .loop1.240_15:
// [Main]   th.flurd fa0, t1, a2, 3
// [Main]   th.flurd fa1, t0, t2, 3
// [Main]   th.lurd t3, s2, t2, 3
// [Main]   th.flurd fa2, t3, a2, 3
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   th.fsurd fa0, a7, a2, 3
// [Main]   addi t2, t2, -1
// [Main]   j .loop1.240_14
// [Main] 
// [Main] .loop1.240_16:
// [Main]   mv t2, zero
// [Main] 
// [Main] .loop1.240_17:
// [Main] 
// [Main] .loop1.240_13:
// [Main]   addi a2, a2, -1
// [Main]   j .loop1.240_7
// [Main] 
// [Main] .loop1.240_9:
// [Main]   mv a2, zero
// [Main] 
// [Main] .loop1.240_10:
// [Main] 
// [Main] .loop1.240_6:
// [Main]   addi a0, a0, -1
// [Main]   j .loop1.240_0
// [Main] 
// [Main] .loop1.240_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.240_3:
// [Main]   ld s0, 0(sp)
// [Main]   ld s1, 8(sp)
// [Main]   ld s2, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.241
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("j")), Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)))))
// [Typer] resolve: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)
// [Typer] resolve: LE(Int(0), Var("k"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("k")
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]))
// [Typer] resolve: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None))
// [Typer] resolve: Get(Var("c"), Var("i"))
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)
// [Typer] resolve: Get(Get(Var("c"), Var("i")), Var("j"))
// [Typer] resolve: Get(Var("c"), Var("i"))
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None)
// [Typer] resolve: Get(Get(Var("a"), Var("i")), Var("k"))
// [Typer] resolve: Get(Var("a"), Var("i"))
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("k")
// [Typer] resolve: Get(Get(Var("b"), Var("k")), Var("j"))
// [Typer] resolve: Get(Var("b"), Var("k"))
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("j")
// [Typer] resolve: App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Prim(Var("k"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("loop3")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("j")), Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit))))
// [Typer] resolve: If(LE(Int(0), Var("j")), Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)
// [Typer] resolve: LE(Int(0), Var("j"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("j")
// [Typer] resolve: Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]))
// [Typer] resolve: App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Prim(Var("m"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("m")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("loop3")
// [Typer] resolve: App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("m")
// [Typer] resolve: Prim(Var("j"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("j")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("loop2")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)))
// [Typer] resolve: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)
// [Typer] resolve: LE(Int(0), Var("i"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]))
// [Typer] resolve: App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("m")
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("loop2")
// [Typer] resolve: App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("loop1")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit))
// [Typer] resolve: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)
// [Typer] resolve: App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Prim(Var("l"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("l")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("loop1")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)
// [Typer] resolve: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Typer] resolve: Array(Int(0), Double(0))
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Typer] resolve: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)
// [Typer] resolve: LE(Int(0), Var("i"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")]))
// [Typer] resolve: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Typer] resolve: Var("mat")
// [Typer] resolve: Var("i")
// [Typer] resolve: Array(Var("n"), Double(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Double(0)
// [Typer] resolve: App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])
// [Typer] resolve: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("mat")
// [Typer] resolve: Var("init_arr")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Typer] resolve: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))
// [Typer] resolve: Array(Var("m"), Var("dummy"))
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("dummy")
// [Typer] resolve: Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat"))
// [Typer] resolve: App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")])
// [Typer] resolve: Prim(Var("m"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("m")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("mat")
// [Typer] resolve: Var("init_arr")
// [Typer] resolve: Var("mat")
// [Typer] resolve: Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Typer] resolve: App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Var("dummy")
// [Typer] resolve: Var("make_arr")
// [Typer] resolve: Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Typer] resolve: App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")])
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("dummy")
// [Typer] resolve: Var("make_arr")
// [Typer] resolve: Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Typer] resolve: App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("dummy")
// [Typer] resolve: Var("make_arr")
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(1)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(2)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Typer] resolve: Get(Var("a"), Int(0))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(2)
// [Typer] resolve: Double(3)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Typer] resolve: Get(Var("a"), Int(1))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(4)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Typer] resolve: Get(Var("a"), Int(1))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(5)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Typer] resolve: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Typer] resolve: Get(Var("a"), Int(1))
// [Typer] resolve: Var("a")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(2)
// [Typer] resolve: Double(6)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Typer] resolve: Get(Var("b"), Int(0))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(7)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Typer] resolve: Get(Var("b"), Int(0))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(8)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Typer] resolve: Get(Var("b"), Int(1))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(9)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Typer] resolve: Get(Var("b"), Int(1))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(10)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Typer] resolve: Get(Var("b"), Int(2))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(0)
// [Typer] resolve: Double(11)
// [Typer] resolve: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Typer] resolve: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Typer] resolve: Get(Var("b"), Int(2))
// [Typer] resolve: Var("b")
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(1)
// [Typer] resolve: Double(12)
// [Typer] resolve: Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Typer] resolve: App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("mul")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])
// [Typer] resolve: Get(Get(Var("c"), Int(0)), Int(0))
// [Typer] resolve: Get(Var("c"), Int(0))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Typer] resolve: App(Var("print_endline"), targs=None, [])
// [Typer] resolve: Var("print_endline")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])
// [Typer] resolve: Get(Get(Var("c"), Int(0)), Int(1))
// [Typer] resolve: Get(Var("c"), Int(0))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Typer] resolve: App(Var("print_endline"), targs=None, [])
// [Typer] resolve: Var("print_endline")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])
// [Typer] resolve: Get(Get(Var("c"), Int(1)), Int(0))
// [Typer] resolve: Get(Var("c"), Int(1))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Typer] resolve: App(Var("print_endline"), targs=None, [])
// [Typer] resolve: Var("print_endline")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Typer] resolve: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])
// [Typer] resolve: Get(Get(Var("c"), Int(1)), Int(1))
// [Typer] resolve: Get(Var("c"), Int(1))
// [Typer] resolve: Var("c")
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("truncate")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("j")), Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("k")), Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("k")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])) against Unit
// [Typer] infer: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None))
// [Typer] infer: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None), Add, kind=None)
// [Typer] infer: Get(Get(Var("c"), Var("i")), Var("j"))
// [Typer] infer: Get(Var("c"), Var("i"))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=None)
// [Typer] infer: Get(Get(Var("a"), Var("i")), Var("k"))
// [Typer] infer: Get(Var("a"), Var("i"))
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Get(Get(Var("b"), Var("k")), Var("j"))
// [Typer] infer: Get(Var("b"), Var("k"))
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Var("k") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Get(Var("c"), Var("i")) against Array[Double]
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]) against Unit
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("k"), Int(1), Sub, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] unify: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit and (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("j")), Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("j")), Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("j")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])) against Unit
// [Typer] infer: App(Var("loop3"), targs=None, [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("j") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]) against Unit
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("j"), Int(1), Sub, kind=None)
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] unify: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit and (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])) against Unit
// [Typer] infer: App(Var("loop2"), targs=None, [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=None), Var("a"), Var("b"), Var("c")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Prim(Var("n"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("loop1"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] unify: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit and (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array[Array[Double]]), ("b", Array[Array[Double]]), ("c", Array[Array[Double]])], body: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit) against Unit
// [Typer] infer: App(Var("loop1"), targs=None, [Prim(Var("l"), Int(1), Sub, kind=None), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] check: Prim(Var("l"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("l") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("dummy", Var(None)), Array(Int(0), Double(0)), LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Typer] infer: Array(Int(0), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Array[Double]
// [Typer] union: Var(None) and Array[Double]
// [Typer] infer: LetRec({tyvars: [], name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array[Array[Double]])], body: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit)}, LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("i")), Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])), Unit) against Unit
// [Typer] check: LE(Int(0), Var("i")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")])) against Unit
// [Typer] infer: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Typer] infer: Array(Var("n"), Double(0))
// [Typer] infer: Double(0)
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("mat") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("init_arr"), targs=None, [Prim(Var("i"), Int(1), Sub, kind=None), Var("n"), Var("mat")]) against Unit
// [Typer] infer: Prim(Var("i"), Int(1), Sub, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("mat")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] inst: TypeScheme(([], (Int, Int, Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Array[Array[Double]]) -> Unit
// [Typer] unify: (Int, Int, Array[Array[Double]]) -> Unit and (Int, Int, Array[Array[Double]]) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] infer: LetRec({tyvars: [], name: ("make_arr", Array[Array[Double]]), args: [("m", Int), ("n", Int), ("dummy", Array[Double])], body: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Typer] typevars: []
// [Typer] check: Let(("mat", Var(None)), Array(Var("m"), Var("dummy")), Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat"))) against Array[Array[Double]]
// [Typer] infer: Array(Var("m"), Var("dummy"))
// [Typer] infer: Var("dummy")
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] check: Let(("_", Var(None)), App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")]), Var("mat")) against Array[Array[Double]]
// [Typer] infer: App(Var("init_arr"), targs=None, [Prim(Var("m"), Int(1), Sub, kind=None), Var("n"), Var("mat")])
// [Typer] inst: TypeScheme(([], (Int, Int, Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Array[Array[Double]]) -> Unit
// [Typer] check: Prim(Var("m"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("m") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Var("n") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("mat") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("mat") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] infer: Let(("a", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")]), Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Typer] infer: App(Var("make_arr"), targs=None, [Int(2), Int(3), Var("dummy")])
// [Typer] inst: TypeScheme(([], (Int, Int, Array[Double]) -> Array[Array[Double]]))
// [Typer] inst result: (Int, Int, Array[Double]) -> Array[Array[Double]]
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Var("dummy") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] infer: Let(("b", Var(None)), App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")]), Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Typer] infer: App(Var("make_arr"), targs=None, [Int(3), Int(2), Var("dummy")])
// [Typer] inst: TypeScheme(([], (Int, Int, Array[Double]) -> Array[Array[Double]]))
// [Typer] inst result: (Int, Int, Array[Double]) -> Array[Array[Double]]
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("dummy") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] infer: Let(("c", Var(None)), App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")]), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Typer] infer: App(Var("make_arr"), targs=None, [Int(2), Int(2), Var("dummy")])
// [Typer] inst: TypeScheme(([], (Int, Int, Array[Double]) -> Array[Array[Double]]))
// [Typer] inst result: (Int, Int, Array[Double]) -> Array[Array[Double]]
// [Typer] check: Int(2) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("dummy") against Array[Double]
// [Typer] inst: TypeScheme(([], Array[Double]))
// [Typer] inst result: Array[Double]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Array[Array[Double]]
// [Typer] union: Var(None) and Array[Array[Double]]
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Typer] infer: Double(1)
// [Typer] check: Get(Var("a"), Int(0)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Typer] infer: Double(2)
// [Typer] check: Get(Var("a"), Int(0)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Typer] infer: Double(3)
// [Typer] check: Get(Var("a"), Int(0)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Typer] infer: Double(4)
// [Typer] check: Get(Var("a"), Int(1)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Typer] infer: Double(5)
// [Typer] check: Get(Var("a"), Int(1)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Typer] infer: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Typer] infer: Double(6)
// [Typer] check: Get(Var("a"), Int(1)) against Array[Double]
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Typer] infer: Double(7)
// [Typer] check: Get(Var("b"), Int(0)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Typer] infer: Double(8)
// [Typer] check: Get(Var("b"), Int(0)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Typer] infer: Double(9)
// [Typer] check: Get(Var("b"), Int(1)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Typer] infer: Double(10)
// [Typer] check: Get(Var("b"), Int(1)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Typer] infer: Double(11)
// [Typer] check: Get(Var("b"), Int(2)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Typer] infer: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Typer] infer: Double(12)
// [Typer] check: Get(Var("b"), Int(2)) against Array[Double]
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Int(2) against Int
// [Typer] check: Int(1) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Typer] infer: App(Var("mul"), targs=None, [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit))
// [Typer] inst result: (Int, Int, Int, Array[Array[Double]], Array[Array[Double]], Array[Array[Double]]) -> Unit
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Var("a") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("b") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] check: Var("c") against Array[Array[Double]]
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] unify: Array[Array[Double]] and Array[Array[Double]]
// [Typer] unify: Array[Double] and Array[Double]
// [Typer] unify: Double and Double
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(0))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Typer] infer: App(Var("print_endline"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(0)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(0)), Int(1))
// [Typer] infer: Get(Var("c"), Int(0))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Typer] infer: App(Var("print_endline"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(0))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(0))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(1) against Int
// [Typer] check: Int(0) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_endline"), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Typer] infer: App(Var("print_endline"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), targs=None, [Get(Get(Var("c"), Int(1)), Int(1))]) against Int
// [Typer] infer: Get(Get(Var("c"), Int(1)), Int(1))
// [Typer] infer: Get(Var("c"), Int(1))
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Array[Array[Double]]))
// [Typer] inst result: Array[Array[Double]]
// [Typer] check: Int(1) against Int
// [Typer] check: Int(1) against Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {loop3.1: Many(2), loop2.28: Many(2), loop1.48: Many(2), mul.68: Once, main.85: Once, init_arr.89: Many(2), make_arr.103: Many(3)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(mul)
// [KnfOpt] freq: {loop3.1: Many(2), loop2.28: Many(2), loop1.48: Many(2), main.85: Once, init_arr.89: Many(2), make_arr.103: Many(3)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {loop3.1: Many(2), loop2.28: Many(2), loop1.48: Many(2), main.85: Once, init_arr.89: Many(2), make_arr.103: Many(3)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 6 6 0
// [KnfOpt] hoist: _15
// [KnfOpt] hoist: _16
// [KnfOpt] hoist: _18
// [KnfOpt] hoist: _247
// [KnfOpt] hoist: _248
// [KnfOpt] hoist: _249
// [KnfOpt] Tuple freq: {_23: MayEscape, i.3: MayEscape, j.5: MayEscape, _27: MayEscape, a.9: MayEscape, b.11: MayEscape, c.13: MayEscape, _15: MayEscape, _16: MayEscape, _18: MayEscape, i.30: MayEscape, j.34: MayEscape, _43: MayEscape, a.36: MayEscape, b.38: MayEscape, c.40: MayEscape, _247: MayEscape, _248: MayEscape, _249: MayEscape, m.32: MayEscape, _47: MayEscape, i.50: MayEscape, m.52: MayEscape, _63: MayEscape, a.56: MayEscape, b.58: MayEscape, c.60: MayEscape, _253: MayEscape, _254: MayEscape, _255: MayEscape, _67: MayEscape, n.54: MayEscape, n.93: MayEscape, _97: MayEscape, _98: MayEscape, _102: MayEscape, mat.95: MayEscape, m.105: MayEscape, dummy.109: MayEscape, _112: MayEscape, n.107: MayEscape, mat.110: MayEscape, _86: MayEscape, _87: MayEscape, _115: MayEscape, _116: MayEscape, dummy.88: MayEscape, _118: MayEscape, _119: MayEscape, _121: MayEscape, _122: MayEscape, _127: MayEscape, _133: MayEscape, _139: MayEscape, _145: MayEscape, _151: MayEscape, _157: MayEscape, _163: MayEscape, _169: MayEscape, _175: MayEscape, _181: MayEscape, _187: MayEscape, _193: MayEscape, _236: MayEscape, _197: MayEscape, _198: MayEscape, a.117: MayEscape, b.120: MayEscape, c.123: MayEscape, _204: MayEscape, _205: MayEscape, _213: MayEscape, _214: MayEscape, _222: MayEscape, _223: MayEscape, _231: MayEscape, _232: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), Insn(iref=%3), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5), FnParam(fref=f1, fpref=$f.6), FnParam(fref=f1, fpref=$f.7), FnParam(fref=f1, fpref=$f.8)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Unit, f=f2, args=[Insn(iref=%6), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f3, args=[Insn(iref=%3), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%8), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6), FnParam(fref=f0, fpref=$f.7), FnParam(fref=f0, fpref=$f.8)])
// [CoreOpt] Call frequnce: FnCallFreq({f12: Once, f4: Multiple, f1: Once, f5: Once, f2: Once, f3: Once, f0: Once})
// [CoreOpt] allow_inline: false %0 main.241 false true true false true
// [CoreOpt] allow_inline: true %2 init_arr.242 true true true false true
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b1, bpref=$b.0)
// [CoreOpt] allow_inline: false %2 init_arr.242 true true false false true
// [CoreOpt] allow_inline: true %2 loop3.238 true true true false true
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %2 loop3.238 true true false false true
// [CoreOpt] allow_inline: false %1 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %2 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %3 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.240 false true true false true
// [CoreOpt] allow_inline: true %5 loop2.239 true true true false true
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %5 loop2.239 true true false false true
// [CoreOpt] allow_inline: false %0 main.241 false true true false true
// [CoreOpt] allow_inline: true %2 init_arr.242 true true true false true
// [CoreOpt] make_arr.243 is inlining Call(ty=Unit, f=f3, args=[Insn(iref=%1), FnParam(fref=f4, fpref=$f.1), Mem(fref=f4, mref=m0)])
// [CoreOpt] shifted callee .fn init_arr.242 #f3 : fn(int32, int32, array[array[double]]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b8 {
// [CoreOpt]   .bb #b3 (int32, int32, array[array[double]]) {
// [CoreOpt]     let %3: bool = le(0, $b3.0)
// [CoreOpt]     br %3 b4() b5()
// [CoreOpt]   }
// [CoreOpt]   .bb #b4 () {
// [CoreOpt]     let _ = alloc <m3: array[double] heap($b3.1)> <- [..] = 0
// [CoreOpt]     let _ = store array[double] offset($b3.2, $b3.0 * @ptr) <- f3.m3
// [CoreOpt]     let %6: int32 = sub($b3.0, 1)
// [CoreOpt]     jump b3(%6, $b3.1, $b3.2)
// [CoreOpt]   }
// [CoreOpt]   .bb #b5 () {
// [CoreOpt]     jump b6(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b6 (unit) {
// [CoreOpt]     return $b6.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b7 pre #Some(b8) header #b3 {
// [CoreOpt]     .block #b4
// [CoreOpt]     .block #b5
// [CoreOpt]     .block #b6
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     jump b7($f0, $f1, $f2)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: true %2 loop3.238 true true true false true
// [CoreOpt] loop2.239 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7), BlockParam(bref=b0, bpref=$b.8)])
// [CoreOpt] shifted callee .fn loop3.238 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %4: bool = le(0, $b7.2)
// [CoreOpt]     br %4 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %5: double = load double offset($b7.7, $b7.1 * @64)
// [CoreOpt]     let %6: double = load double offset($b7.8, $b7.2 * @64)
// [CoreOpt]     let %7: array[double] = load array[double] offset($b7.4, $b7.2 * @ptr)
// [CoreOpt]     let %8: double = load double offset(%7, $b7.1 * @64)
// [CoreOpt]     let %9: double = mul(%6, %8)
// [CoreOpt]     let %10: double = add(%5, %9)
// [CoreOpt]     let _ = store double offset($b7.6, $b7.1 * @64) <- %10
// [CoreOpt]     let %12: int32 = sub($b7.2, 1)
// [CoreOpt]     jump b7($b7.0, $b7.1, %12, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %1 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %2 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %3 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.240 false true true false true
// [CoreOpt] allow_inline: true %5 loop2.239 true true true false true
// [CoreOpt] loop1.240 is inlining Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), Insn(iref=%2), Insn(iref=%3), Insn(iref=%4)])
// [CoreOpt] shifted callee .fn loop2.239 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %7: bool = le(0, $b7.2)
// [CoreOpt]     br %7 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %8: int32 = sub($b7.1, 1)
// [CoreOpt]     jump b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %10: int32 = sub($b7.2, 1)
// [CoreOpt]     jump b7($b7.0, $b7.1, %10, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %11: bool = le(0, $b14.2)
// [CoreOpt]     br %11 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %12: double = load double offset($b14.7, $b14.1 * @64)
// [CoreOpt]     let %13: double = load double offset($b14.8, $b14.2 * @64)
// [CoreOpt]     let %14: array[double] = load array[double] offset($b14.4, $b14.2 * @ptr)
// [CoreOpt]     let %15: double = load double offset(%14, $b14.1 * @64)
// [CoreOpt]     let %16: double = mul(%13, %15)
// [CoreOpt]     let %17: double = add(%12, %16)
// [CoreOpt]     let _ = store double offset($b14.6, $b14.1 * @64) <- %17
// [CoreOpt]     let %19: int32 = sub($b14.2, 1)
// [CoreOpt]     jump b14($b14.0, $b14.1, %19, $b14.3, $b14.4, $b14.5, $b14.6, $b14.7, $b14.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b17(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (unit) {
// [CoreOpt]     jump b13($b17.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b18 pre #Some(b19) header #b14 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b18($b7.0, $b7.2, %8, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f3
// [CoreOpt] Remove dead function: f0
// [CoreOpt] allow_inline: false %0 main.241 false true true false true
// [CoreOpt] allow_inline: false %1 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %2 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %3 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.240 false true true false true
// [CoreOpt] allow_inline: false %0 main.241 false true true false true
// [CoreOpt] allow_inline: false %1 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %2 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %3 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.240 false true true false true
// [CoreOpt] allow_inline: false %0 main.241 false true true false true
// [CoreOpt] allow_inline: false %1 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %2 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %3 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.240 false true true false true
// [CoreOpt] allow_inline: false %0 main.241 false true true false true
// [CoreOpt] allow_inline: false %1 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %2 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %3 make_arr.243 false false true false true
// [CoreOpt] allow_inline: false %28 loop1.240 false true true false true
// [CoreOpt] LVN subst Insn(iref=%3) with Insn(iref=%2)
// [CoreOpt2] LVN subst Insn(iref=%31) with Insn(iref=%33)
// [CoreOpt2] LVN subst Insn(iref=%28) with Insn(iref=%34)
// [CoreOpt2] LVN subst Insn(iref=%24) with Insn(iref=%34)
// [CoreOpt2] LVN subst Insn(iref=%36) with Insn(iref=%37)
