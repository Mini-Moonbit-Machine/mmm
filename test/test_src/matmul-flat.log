// [Asm] pre_assigned_registers: Insn(iref=%15) -> v18, Insn(iref=%41) -> v44, Insn(iref=%33) -> v36, Mem(fref=f6, mref=m0) -> v2, Insn(iref=%8) -> v11, Insn(iref=%10) -> v13, Insn(iref=%27) -> v30, Insn(iref=%14) -> v17, Insn(iref=%25) -> v28, Insn(iref=%39) -> v42, Self(fref=f6) -> v0, Insn(iref=%4) -> v7, Insn(iref=%42) -> v45, Insn(iref=%44) -> v47, Insn(iref=%32) -> v35, Insn(iref=%1) -> v4, Insn(iref=%11) -> v14, Insn(iref=%26) -> v29, Insn(iref=%6) -> v9, Insn(iref=%31) -> v34, Insn(iref=%35) -> fv38, Insn(iref=%28) -> v31, Insn(iref=%38) -> v41, Insn(iref=%46) -> v49, Insn(iref=%9) -> v12, Insn(iref=%16) -> v19, Insn(iref=%24) -> v27, Insn(iref=%37) -> v40, Insn(iref=%45) -> fv48, Insn(iref=%29) -> v32, Insn(iref=%5) -> v8, Insn(iref=%47) -> v50, Insn(iref=%19) -> v22, Insn(iref=%0) -> v3, Insn(iref=%3) -> v6, Insn(iref=%18) -> v21, Insn(iref=%13) -> v16, Insn(iref=%7) -> v10, Insn(iref=%22) -> v25, Insn(iref=%17) -> v20, Insn(iref=%23) -> v26, Insn(iref=%2) -> v5, Insn(iref=%20) -> v23, Insn(iref=%43) -> v46, Insn(iref=%30) -> fv33, Insn(iref=%21) -> v24, Insn(iref=%34) -> v37, Insn(iref=%36) -> v39, Insn(iref=%40) -> fv43, Insn(iref=%12) -> v15
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v114]
// [Asm] live_set: [zero, v114, v2]
// [Asm] move_origin: []
// [Asm] defined: v114 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [v114]
// [Asm] defined: a0 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v115, zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, a1, v2]
// [Asm] move_origin: [v115]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v111]
// [Asm] live_set: [zero, v4, v111, v2]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: [v111]
// [Asm] defined: a0 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v112, zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, a0, v4, a1, v2]
// [Asm] move_origin: [v112]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [zero, a0, v4, a2, a1, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v5, zero, v4, v2]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v109, v5, zero, a0, v4, v2]
// [Asm] move_origin: [v109]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v2]
// [Asm] move_origin: [v109]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v5, zero, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [fv107]
// [Asm] live_set: [v5, zero, v7, v4, v6, fv107]
// [Asm] move_origin: []
// [Asm] defined: fv107 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v5, zero, v103, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [fv104]
// [Asm] live_set: [v5, zero, v4, v6, fv104, v9]
// [Asm] move_origin: []
// [Asm] defined: fv104 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v11, v5, zero, v4, v6, v100]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [fv101]
// [Asm] live_set: [v11, v5, zero, v4, fv101, v6]
// [Asm] move_origin: []
// [Asm] defined: fv101 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v5, zero, v13, v97, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [fv98]
// [Asm] live_set: [fv98, v5, zero, v13, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv98 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, zero, v4, v6, v15]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [fv95]
// [Asm] live_set: [v5, zero, v4, v6, v15, fv95]
// [Asm] move_origin: []
// [Asm] defined: fv95 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v5, v91, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [fv92]
// [Asm] live_set: [v5, fv92, zero, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: fv92 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v5, zero, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v5, zero, v19, v88, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [fv89]
// [Asm] live_set: [v5, zero, fv89, v19, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv89 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v5, v21, zero, v85, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [fv86]
// [Asm] live_set: [fv86, v5, v21, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: fv86 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v5, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v5, v82, zero, v23, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [fv83]
// [Asm] live_set: [v5, zero, v23, v4, v6, fv83]
// [Asm] move_origin: []
// [Asm] defined: fv83 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v25, v5, zero, v79, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [fv80]
// [Asm] live_set: [v25, v5, zero, v4, v6, fv80]
// [Asm] move_origin: []
// [Asm] defined: fv80 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v5, zero, v27, v4, v6, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [fv77]
// [Asm] live_set: [v5, zero, v27, v4, v6, fv77]
// [Asm] move_origin: []
// [Asm] defined: fv77 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v5, zero, v29, v4, v6, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [fv74]
// [Asm] live_set: [v5, zero, v29, v4, v6, fv74]
// [Asm] move_origin: []
// [Asm] defined: fv74 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [v70]
// [Asm] live_set: [v5, zero, v4, v6, v70]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v6, v70]
// [Asm] move_origin: [v70]
// [Asm] defined: a0 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v5, v71, zero, a0, v4, v6, v70]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v6, v70]
// [Asm] move_origin: [v71]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, v4, a1, v6]
// [Asm] move_origin: [v70]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, v6, a1, a3]
// [Asm] move_origin: [v4]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, v6, a1, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v31]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [v6, zero, fv33]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v34]
// [Asm] live_set: [v6, zero, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v34]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v37, v6, zero]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [v6, zero, fv38]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: [v39]
// [Asm] live_set: [v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero, v39]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v39]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v6, zero, v42]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v6, zero, fv43]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v6, v44, zero]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v44, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: [v44]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v6, zero]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v47, zero]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [fv48, zero]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v49, zero]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v49, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v49]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.183"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r46 [label="v29 ← a0", color=green];
// [Asm]   r33 [label="v94 ← a1", color=green];
// [Asm]   r59 [label="v42 ← a0", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r44 [label="v27 ← a0", color=green];
// [Asm]   r53 [label="v35 ← a0", color=green];
// [Asm]   r56 [label="v39 ← a0", color=green];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r5 [label="v115 ← a1", color=green];
// [Asm]   r54 [label="v36 ← a0", color=green];
// [Asm]   r24 [label="v7 ← a0", color=green];
// [Asm]   r43 [label="v79 ← a1", color=green];
// [Asm]   r31 [label="v97 ← a1", color=green];
// [Asm]   r39 [label="v85 ← a1", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r65 [label="v50 ← a0", color=green];
// [Asm]   r52 [label="v34 ← a0", color=green];
// [Asm]   r20 [label="v112 ← a1", color=green];
// [Asm]   r61 [label="v45 ← a0", color=green];
// [Asm]   r23 [label="v6 ← s0", color=green];
// [Asm]   r3 [label="v114 ← a0", color=green];
// [Asm]   r27 [label="v103 ← a1", color=green];
// [Asm]   r62 [label="v46 ← a0", color=green];
// [Asm]   r40 [label="v23 ← a0", color=green];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r58 [label="v41 ← a0", color=green];
// [Asm]   r34 [label="v17 ← a0", color=green];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r51 [label="v32 ← a0", color=green];
// [Asm]   r55 [label="v37 ← a0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r21 [label="v5 ← s2", color=green];
// [Asm]   r60 [label="v44 ← a0", color=green];
// [Asm]   r38 [label="v21 ← a0", color=green];
// [Asm]   r47 [label="v73 ← a1", color=green];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r42 [label="v25 ← a0", color=green];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r29 [label="v100 ← a1", color=green];
// [Asm]   r35 [label="v91 ← a1", color=green];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r64 [label="v49 ← a0", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r36 [label="v19 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r32 [label="v15 ← a0", color=green];
// [Asm]   r49 [label="v71 ← a1", color=green];
// [Asm]   r57 [label="v40 ← a0", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r48 [label="v70 ← a0", color=green];
// [Asm]   r37 [label="v88 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r41 [label="v82 ← a1", color=green];
// [Asm]   r22 [label="v109 ← a0", color=green];
// [Asm]   r50 [label="v31 ← a0", color=green];
// [Asm]   r30 [label="v13 ← a0", color=green];
// [Asm]   r45 [label="v76 ← a1", color=green];
// [Asm]   r25 [label="v106 ← a1", color=green];
// [Asm]   r63 [label="v47 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r18 [label="v4 ← s1", color=green];
// [Asm]   r19 [label="v111 ← a0", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r23 -- r36;
// [Asm]   r18 -- r49;
// [Asm]   r6 -- r48;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r30;
// [Asm]   r23 -- r46;
// [Asm]   r23 -- r51;
// [Asm]   r1 -- r57;
// [Asm]   r21 -- r38;
// [Asm]   r18 -- r42;
// [Asm]   r23 -- r56;
// [Asm]   r1 -- r45;
// [Asm]   r23 -- r35;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r45;
// [Asm]   r0 -- r16;
// [Asm]   r18 -- r44;
// [Asm]   r18 -- r34;
// [Asm]   r1 -- r50;
// [Asm]   r23 -- r53;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r27;
// [Asm]   r21 -- r33;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r10 -- r18;
// [Asm]   r21 -- r48;
// [Asm]   r0 -- r9;
// [Asm]   r9 -- r23;
// [Asm]   r1 -- r40;
// [Asm]   r8 -- r23;
// [Asm]   r18 -- r46;
// [Asm]   r23 -- r54;
// [Asm]   r23 -- r58;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r33;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r15 -- r23;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r23 -- r55;
// [Asm]   r18 -- r37;
// [Asm]   r16 -- r21;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r39;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r6 -- r23;
// [Asm]   r23 -- r37;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r21 -- r46;
// [Asm]   r18 -- r43;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r23 -- r29;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r1 -- r43;
// [Asm]   r34 -- r35;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r23 -- r50;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r18 -- r40;
// [Asm]   r1 -- r13;
// [Asm]   r11 -- r23;
// [Asm]   r21 -- r34;
// [Asm]   r4 -- r18;
// [Asm]   r23 -- r39;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r23 -- r45;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r23;
// [Asm]   r18 -- r39;
// [Asm]   r23 -- r26;
// [Asm]   r4 -- r15;
// [Asm]   r23 -- r25;
// [Asm]   r32 -- r33;
// [Asm]   r21 -- r30;
// [Asm]   r0 -- r3;
// [Asm]   r23 -- r30;
// [Asm]   r13 -- r23;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r48 -- r49;
// [Asm]   r8 -- r18;
// [Asm]   r23 -- r42;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r61;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r18 -- r47;
// [Asm]   r23 -- r40;
// [Asm]   r23 -- r59;
// [Asm]   r7 -- r18;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r20;
// [Asm]   r1 -- r54;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r42;
// [Asm]   r18 -- r23;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r43;
// [Asm]   r23 -- r31;
// [Asm]   r0 -- r13;
// [Asm]   r21 -- r35;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r63;
// [Asm]   r30 -- r31;
// [Asm]   r18 -- r27;
// [Asm]   r23 -- r52;
// [Asm]   r44 -- r45;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r42 -- r43;
// [Asm]   r1 -- r62;
// [Asm]   r9 -- r18;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r15 -- r18;
// [Asm]   r18 -- r26;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r18 -- r30;
// [Asm]   r23 -- r32;
// [Asm]   r23 -- r41;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r28 -- r29;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r23 -- r38;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r18 -- r31;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r44;
// [Asm]   r21 -- r22;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r49;
// [Asm]   r21 -- r37;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r23 -- r33;
// [Asm]   r17 -- r18;
// [Asm]   r23 -- r57;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r23 -- r49;
// [Asm]   r1 -- r23;
// [Asm]   r1 -- r53;
// [Asm]   r21 -- r40;
// [Asm]   r18 -- r29;
// [Asm]   r23 -- r60;
// [Asm]   r14 -- r23;
// [Asm]   r46 -- r47;
// [Asm]   r1 -- r32;
// [Asm]   r23 -- r62;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r23 -- r34;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r60;
// [Asm]   r1 -- r65;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r21 -- r47;
// [Asm]   r7 -- r9;
// [Asm]   r21 -- r44;
// [Asm]   r18 -- r36;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r8;
// [Asm]   r18 -- r32;
// [Asm]   r23 -- r47;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r18 -- r19;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r59;
// [Asm]   r23 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r61;
// [Asm]   r10 -- r23;
// [Asm]   r21 -- r42;
// [Asm]   r18 -- r48;
// [Asm]   r18 -- r41;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r26;
// [Asm]   r40 -- r41;
// [Asm]   r21 -- r41;
// [Asm]   r0 -- r12;
// [Asm]   r18 -- r38;
// [Asm]   r4 -- r17;
// [Asm]   r23 -- r43;
// [Asm]   r23 -- r44;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r23 -- r48;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v114-> 4:a0-> 5:v115-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 18:v4-> 21:v5-> 23:v6-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 48:v70-> 49:v71-> 20:v112-> 22:v109-> 24:v7-> 25:v106-> 26:v9-> 27:v103-> 28:v11-> 29:v100-> 30:v13-> 31:v97-> 32:v15-> 33:v94-> 34:v17-> 35:v91-> 36:v19-> 37:v88-> 38:v21-> 39:v85-> 40:v23-> 41:v82-> 42:v25-> 43:v79-> 44:v27-> 45:v76-> 46:v29-> 47:v73-> 19:v111-> 50:v31-> 51:v32-> 52:v34-> 53:v35-> 54:v36-> 55:v37-> 56:v39-> 57:v40-> 58:v41-> 59:v42-> 60:v44-> 61:v45-> 62:v46-> 63:v47-> 64:v49-> 65:v50"
// [Asm]   comment = "v2<-s0;v29<-a0;v94<-a1;v42<-a0;v9<-a0;v27<-a0;v35<-a0;v39<-a0;v115<-a1;v36<-a0;v7<-a0;v79<-a1;v97<-a1;v85<-a1;v50<-a0;v34<-a0;v112<-a1;v45<-a0;v6<-s0;v114<-a0;v103<-a1;v46<-a0;v23<-a0;v41<-a0;v17<-a0;v32<-a0;v37<-a0;v5<-s2;v44<-a0;v21<-a0;v73<-a1;v25<-a0;v100<-a1;v91<-a1;v49<-a0;v19<-a0;v15<-a0;v71<-a1;v40<-a0;v70<-a0;v88<-a1;v11<-a0;v82<-a1;v109<-a0;v31<-a0;v13<-a0;v76<-a1;v106<-a1;v47<-a0;v4<-s1;v111<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.183"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r33 [label="fv43 ← fa0", color=green];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r26 [label="fv86 ← fa0", color=green];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r29 [label="fv77 ← fa0", color=green];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r32 [label="fv38 ← fa0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r24 [label="fv92 ← fa0", color=green];
// [Asm]   r31 [label="fv33 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r20 [label="fv104 ← fa0", color=green];
// [Asm]   r23 [label="fv95 ← fa0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r27 [label="fv83 ← fa0", color=green];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r28 [label="fv80 ← fa0", color=green];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r34 [label="fv48 ← fa0", color=green];
// [Asm]   r22 [label="fv98 ← fa0", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r30 [label="fv74 ← fa0", color=green];
// [Asm]   r25 [label="fv89 ← fa0", color=green];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv107 ← fa0", color=green];
// [Asm]   r21 [label="fv101 ← fa0", color=green];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv107-> 20:fv104-> 21:fv101-> 22:fv98-> 23:fv95-> 24:fv92-> 25:fv89-> 26:fv86-> 27:fv83-> 28:fv80-> 29:fv77-> 30:fv74-> 31:fv33-> 32:fv38-> 33:fv43-> 34:fv48"
// [Asm]   comment = "fv43<-fa0;fv86<-fa0;fv77<-fa0;fv38<-fa0;fv92<-fa0;fv33<-fa0;fv104<-fa0;fv95<-fa0;fv83<-fa0;fv80<-fa0;fv48<-fa0;fv98<-fa0;fv74<-fa0;fv89<-fa0;fv107<-fa0;fv101<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v114, 2 ->   li a0, 2
// [Asm] subst   li v115, 3 ->   li a1, 3
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr.185 ->   call make_arr.185
// [Asm] subst   mv v4, a0 ->   mv s1, a0
// [Asm] subst   li v111, 3 ->   li a0, 3
// [Asm] subst   li v112, 2 ->   li a1, 2
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr.185 ->   call make_arr.185
// [Asm] subst   mv v5, a0 ->   mv s2, a0
// [Asm] subst   li v109, 2 ->   li a0, 2
// [Asm] subst   mv a1, v109 ->   mv a1, a0
// [Asm] subst   mv a2, v2 ->   mv a2, s0
// [Asm] subst   call make_arr.185 ->   call make_arr.185
// [Asm] subst   mv v6, a0 ->   mv s0, a0
// [Asm] subst   ld v7, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v106, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv107, v106 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv107, 0(v7) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v9, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v103, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv104, v103 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv104, 8(v9) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v11, 0(v4) ->   ld a0, 0(s1)
// [Asm] subst   li v100, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv101, v100 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv101, 16(v11) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v13, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v97, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv98, v97 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv98, 0(v13) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v15, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v94, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv95, v94 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv95, 8(v15) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v17, 8(v4) ->   ld a0, 8(s1)
// [Asm] subst   li v91, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv92, v91 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv92, 16(v17) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v19, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v88, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv89, v88 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv89, 0(v19) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v21, 0(v5) ->   ld a0, 0(s2)
// [Asm] subst   li v85, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv86, v85 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv86, 8(v21) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v23, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v82, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv83, v82 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv83, 0(v23) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v25, 8(v5) ->   ld a0, 8(s2)
// [Asm] subst   li v79, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv80, v79 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv80, 8(v25) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v27, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v76, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv77, v76 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv77, 0(v27) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v29, 16(v5) ->   ld a0, 16(s2)
// [Asm] subst   li v73, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv74, v73 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv74, 8(v29) ->   fsd fa0, 8(a0)
// [Asm] subst   li v70, 2 ->   li a0, 2
// [Asm] subst   li v71, 3 ->   li a1, 3
// [Asm] subst   mv a2, v70 ->   mv a2, a0
// [Asm] subst   mv a3, v4 ->   mv a3, s1
// [Asm] subst   mv a4, v5 ->   mv a4, s2
// [Asm] subst   mv a5, v6 ->   mv a5, s0
// [Asm] subst   call mul.182 ->   call mul.182
// [Asm] subst   ld v32, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv33, 0(v32) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v34, fv33, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v37, 0(v6) ->   ld a0, 0(s0)
// [Asm] subst   fld fv38, 8(v37) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v39, fv38, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v42, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv43, 0(v42) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v44, fv43, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v47, 8(v6) ->   ld a0, 8(s0)
// [Asm] subst   fld fv48, 8(v47) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v49, fv48, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v14, FnParam(fref=f4, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v13, Insn(iref=%1) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v6, Self(fref=f4) -> v0, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, Mem(fref=f4, mref=m0) -> v5, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%0) -> v9, Insn(iref=%4) -> v12
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.0), width=@64))
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, s11, zero, v7]
// [Asm] move_origin: [v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v8, v6]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v7, v8, v6, s11]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v7, v8, v6, s11]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v7, v8, v6, v17, s11]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v7, v14, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v7]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, v6, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [zero]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr.184"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="v8 ← a2", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="v17 ← a4", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v5 ← a3", color=green];
// [Asm]   r7 [label="v6 ← a0", color=green];
// [Asm]   r10 [label="v18 ← a3", color=green];
// [Asm]   r14 [label="v14 ← a0", color=green];
// [Asm]   r8 [label="v7 ← a1", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="v10 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r12 [label="v16 ← a4", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r13;
// [Asm]   r3 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r11;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r7 -- r9;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   comment = "0:v2-> 1:a2-> 5:v3-> 3:s11-> 4:zero-> 6:v4-> 7:v6-> 2:a1-> 8:v7-> 9:v8-> 11:v5-> 12:v16-> 13:v17-> 10:v18-> 14:v14-> 15:v10-> 16:a0"
// [Asm]   comment = "v2<-a0;v8<-a2;v4<-a2;v17<-a4;v5<-a3;v6<-a0;v18<-a3;v14<-a0;v7<-a1;v3<-a1;v10<-a0;v16<-a4;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr.184"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   blt v6, zero, .init_arr.184_2 ->   blt a0, zero, .init_arr.184_2
// [Asm] subst   slliw v18, v7, 3 ->   slliw a3, a1, 3
// [Asm] subst   sub v5, s11, v18 ->   sub a3, s11, a3
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a3, -8
// [Asm] subst   slliw v16, v6, 3 ->   slliw a4, a0, 3
// [Asm] subst   add v17, v8, v16 ->   add a4, a2, a4
// [Asm] subst   sd v5, 0(v17) ->   sd a3, 0(a4)
// [Asm] subst   addi v14, v6, -1 ->   addi a0, a0, -1
// [Asm] subst   j .init_arr.184_0 ->   j .init_arr.184_0
// [Asm] subst   mv v10, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v6, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, FnParam(fref=f5, fpref=$f.0) -> v2, Mem(fref=f5, mref=m0) -> v5, Self(fref=f5) -> v0, FnParam(fref=f5, fpref=$f.2) -> v4, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, s11, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v5, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v5, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, a0, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, v5, a1, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of make_arr.185"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v11 ← a1", color=green];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="v3 ← a3", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="v5 ← s0", color=green];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r8 [label="v7 ← a0", color=green];
// [Asm]   r5 [label="v4 ← a1", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r9 -- r14;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r7 -- r19;
// [Asm]   r4 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r9 -- r19;
// [Asm]   r7 -- r16;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r8;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r3 -- r5;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r9 -- r18;
// [Asm]   r7 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   comment = "0:v2-> 1:a2-> 2:a1-> 4:v3-> 7:v5-> 9:a0-> 3:s11-> 5:v4-> 6:v11-> 8:v7-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:v8"
// [Asm]   comment = "v2<-a0;v8<-a0;v11<-a1;v3<-a3;v5<-s0;v7<-a0;v4<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of make_arr.185"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   slliw v11, v2, 3 ->   slliw a1, a0, 3
// [Asm] subst   sub v5, s11, v11 ->   sub s0, s11, a1
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v2 ->   mv a1, a0
// [Asm] subst   addi v7, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   mv a1, v3 ->   mv a1, a3
// [Asm] subst   mv a2, v5 ->   mv a2, s0
// [Asm] subst   call init_arr.184 ->   call init_arr.184
// [Asm] subst   mv a0, v5 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv52, BlockParam(bref=b7, bpref=$b.1) -> v21, Insn(iref=%33) -> v49, BlockParam(bref=b7, bpref=$b.0) -> v20, BlockParam(bref=b0, bpref=$b.5) -> v13, BlockParam(bref=b14, bpref=$b.8) -> v42, BlockParam(bref=b10, bpref=$b.0) -> v30, Insn(iref=%8) -> v33, Insn(iref=%10) -> v46, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%14) -> v51, BlockParam(bref=b14, bpref=$b.0) -> v34, Insn(iref=%4) -> v19, FnParam(fref=f2, fpref=$f.5) -> v7, BlockParam(bref=b7, bpref=$b.6) -> v26, BlockParam(bref=b14, bpref=$b.7) -> v41, BlockParam(bref=b14, bpref=$b.3) -> v37, BlockParam(bref=b7, bpref=$b.3) -> v23, BlockParam(bref=b6, bpref=$b.0) -> v31, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v16, Insn(iref=%11) -> v43, Insn(iref=%6) -> v32, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b14, bpref=$b.1) -> v35, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b7, bpref=$b.2) -> v22, FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b17, bpref=$b.0) -> v44, BlockParam(bref=b3, bpref=$b.0) -> v15, BlockParam(bref=b14, bpref=$b.6) -> v40, Insn(iref=%16) -> fv53, Self(fref=f2) -> v0, Insn(iref=%37) -> v17, BlockParam(bref=b7, bpref=$b.5) -> v25, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b14, bpref=$b.4) -> v38, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b14, bpref=$b.2) -> v36, BlockParam(bref=b7, bpref=$b.8) -> v28, Insn(iref=%0) -> v14, Insn(iref=%19) -> v56, BlockParam(bref=b13, bpref=$b.0) -> v45, Insn(iref=%18) -> v55, Insn(iref=%13) -> fv50, Insn(iref=%7) -> v29, Insn(iref=%17) -> fv54, BlockParam(bref=b7, bpref=$b.7) -> v27, Insn(iref=%2) -> v18, BlockParam(bref=b14, bpref=$b.5) -> v39, BlockParam(bref=b7, bpref=$b.4) -> v24, Insn(iref=%34) -> v47, FnParam(fref=f2, fpref=$f.3) -> v5, Insn(iref=%12) -> fv48
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b14, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b7, bpref=$b.2)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [zero]
// [Asm] defined: v44 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v16, v10, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v16, v10, v75, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v18, v10, v13, zero, v8, v17, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v16, v18, v10, v13, zero, v8, v12, v9, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v25, v42, v26, v13, v22, v67, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v49, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, v64, zero, v20, v27, v8, v47, v34, v11, v21, v10, v49, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [fv50]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v49, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: fv50 is F
// [Asm] defs: [v62]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v62, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, v51, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, v60, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [fv52]
// [Asm] live_set: [v25, fv52, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: fv52 is F
// [Asm] defs: [fv54]
// [Asm] live_set: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv54, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: fv54 is F
// [Asm] defs: [v58]
// [Asm] live_set: [v25, v58, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv54, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v41, v37, v12, v24, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v34]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v35]
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v56]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v37]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v38]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v39]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v40]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v41]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v42]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v45, v8]
// [Asm] move_origin: [v44]
// [Asm] defined: v45 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v10, v13, zero, v30, v8, v12, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v30 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v10, v13, zero, v32, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v32]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v16, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v8]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v16, v21, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v9]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v20, v8, v19]
// [Asm] move_origin: [v16]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move_origin: [v11]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move_origin: [v12]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move_origin: [v13]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, zero, v23, v27, v20, v8, v19]
// [Asm] move_origin: [v18]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v19]
// [Asm] defined: v28 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v20]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v21]
// [Asm] defs: [v22]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v46]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v23]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v24]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v25]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v26]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v27]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: [v28]
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v8, v34]
// [Asm] move_origin: [v20]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v35, v8, v34]
// [Asm] move_origin: [v22]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm] move_origin: [v33]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm] move_origin: [v23]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm] move_origin: [v24]
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm] move_origin: [v25]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v26]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v27]
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] move_origin: [v28]
// [Asm] defined: v42 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v20, v27, v23, v8]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v31, v9]
// [Asm] move_origin: [v30]
// [Asm] defined: v31 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop1.181"];
// [Asm]   r0 [label="v44 ← a0", color=green];
// [Asm]   r46 [label="a0", color=blue];
// [Asm]   r38 [label="v51 ← t4", color=green];
// [Asm]   r33 [label="v40 ← a5", color=green];
// [Asm]   r59 [label="v31 ← a0", color=green];
// [Asm]   r9 [label="v12 ← a7", color=green];
// [Asm]   r26 [label="v41 ← t1", color=green];
// [Asm]   r47 [label="v2 ← t0", color=green];
// [Asm]   r6 [label="v13 ← a1", color=green];
// [Asm]   r44 [label="v32 ← a0", color=green];
// [Asm]   r13 [label="v23 ← a2", color=green];
// [Asm]   r53 [label="v3 ← a7", color=green];
// [Asm]   r42 [label="v45 ← a0", color=green];
// [Asm]   r4 [label="v10 ← a4", color=green];
// [Asm]   r29 [label="v37 ← s1", color=green];
// [Asm]   r35 [label="v49 ← t4", color=green];
// [Asm]   r7 [label="v22 ← a6", color=green];
// [Asm]   r56 [label="v6 ← a1", color=green];
// [Asm]   r10 [label="v28 ← t0", color=green];
// [Asm]   r8 [label="v24 ← a7", color=green];
// [Asm]   r5 [label="v26 ← a5", color=green];
// [Asm]   r54 [label="v4 ← a6", color=green];
// [Asm]   r36 [label="v64 ← s4", color=green];
// [Asm]   r24 [label="v47 ← a0", color=green];
// [Asm]   r15 [label="v20 ← t2", color=green];
// [Asm]   r32 [label="v38 ← s3", color=green];
// [Asm]   r49 [label="a4", color=blue];
// [Asm]   r57 [label="v7 ← a0", color=green];
// [Asm]   r43 [label="v30 ← a0", color=green];
// [Asm]   r31 [label="v35 ← a6", color=green];
// [Asm]   r39 [label="v60 ← t4", color=green];
// [Asm]   r17 [label="v16 ← a6", color=green];
// [Asm]   r52 [label="a3", color=blue];
// [Asm]   r48 [label="a5", color=blue];
// [Asm]   r12 [label="zero", color=blue];
// [Asm]   r37 [label="v62 ← t4", color=green];
// [Asm]   r20 [label="v18 ← a5", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="v21 ← a3", color=green];
// [Asm]   r27 [label="v34 ← s0", color=green];
// [Asm]   r1 [label="v25 ← a1", color=green];
// [Asm]   r40 [label="v58 ← a0", color=green];
// [Asm]   r28 [label="v36 ← t3", color=green];
// [Asm]   r41 [label="v56 ← a0", color=green];
// [Asm]   r11 [label="v9 ← a3", color=green];
// [Asm]   r58 [label="v33 ← a0", color=green];
// [Asm]   r34 [label="v67 ← t4", color=green];
// [Asm]   r22 [label="v19 ← a0", color=green];
// [Asm]   r14 [label="v27 ← t1", color=green];
// [Asm]   r50 [label="a2", color=blue];
// [Asm]   r30 [label="v39 ← s2", color=green];
// [Asm]   r51 [label="a1", color=blue];
// [Asm]   r45 [label="v46 ← a0", color=green];
// [Asm]   r25 [label="v42 ← t0", color=green];
// [Asm]   r2 [label="v11 ← a2", color=green];
// [Asm]   r55 [label="v5 ← a2", color=green];
// [Asm]   r16 [label="v8 ← t2", color=green];
// [Asm]   r18 [label="v17 ← a0", color=green];
// [Asm]   r19 [label="v75 ← a5", color=green];
// [Asm]   r21 [label="v73 ← a0", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r15 -- r39;
// [Asm]   r2 -- r38;
// [Asm]   r2 -- r31;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r26;
// [Asm]   r28 -- r32;
// [Asm]   r11 -- r35;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r12 -- r57;
// [Asm]   r8 -- r36;
// [Asm]   r15 -- r31;
// [Asm]   r27 -- r36;
// [Asm]   r7 -- r25;
// [Asm]   r28 -- r30;
// [Asm]   r4 -- r44;
// [Asm]   r29 -- r41;
// [Asm]   r14 -- r40;
// [Asm]   r3 -- r9;
// [Asm]   r15 -- r42;
// [Asm]   r9 -- r26;
// [Asm]   r27 -- r28;
// [Asm]   r11 -- r55;
// [Asm]   r2 -- r7;
// [Asm]   r27 -- r34;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r15 -- r25;
// [Asm]   r17 -- r19;
// [Asm]   r4 -- r57;
// [Asm]   r11 -- r19;
// [Asm]   r14 -- r34;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r31 -- r35;
// [Asm]   r3 -- r8;
// [Asm]   r8 -- r34;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r16 -- r36;
// [Asm]   r26 -- r27;
// [Asm]   r32 -- r35;
// [Asm]   r5 -- r35;
// [Asm]   r20 -- r22;
// [Asm]   r13 -- r30;
// [Asm]   r25 -- r29;
// [Asm]   r5 -- r6;
// [Asm]   r13 -- r33;
// [Asm]   r8 -- r16;
// [Asm]   r3 -- r39;
// [Asm]   r56 -- r57;
// [Asm]   r16 -- r33;
// [Asm]   r10 -- r33;
// [Asm]   r29 -- r33;
// [Asm]   r9 -- r12;
// [Asm]   r12 -- r54;
// [Asm]   r5 -- r58;
// [Asm]   r5 -- r32;
// [Asm]   r12 -- r58;
// [Asm]   r29 -- r40;
// [Asm]   r1 -- r2;
// [Asm]   r28 -- r33;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r47 -- r55;
// [Asm]   r11 -- r43;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r15 -- r37;
// [Asm]   r31 -- r58;
// [Asm]   r32 -- r34;
// [Asm]   r14 -- r36;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r1 -- r5;
// [Asm]   r25 -- r37;
// [Asm]   r1 -- r35;
// [Asm]   r24 -- r25;
// [Asm]   r9 -- r39;
// [Asm]   r49 -- r54;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r26 -- r38;
// [Asm]   r0 -- r15;
// [Asm]   r27 -- r40;
// [Asm]   r16 -- r30;
// [Asm]   r3 -- r25;
// [Asm]   r28 -- r31;
// [Asm]   r6 -- r41;
// [Asm]   r2 -- r4;
// [Asm]   r27 -- r41;
// [Asm]   r16 -- r32;
// [Asm]   r29 -- r30;
// [Asm]   r12 -- r34;
// [Asm]   r9 -- r40;
// [Asm]   r15 -- r35;
// [Asm]   r16 -- r43;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r31 -- r41;
// [Asm]   r47 -- r56;
// [Asm]   r9 -- r30;
// [Asm]   r33 -- r35;
// [Asm]   r32 -- r40;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r5 -- r11;
// [Asm]   r24 -- r29;
// [Asm]   r8 -- r25;
// [Asm]   r5 -- r38;
// [Asm]   r11 -- r37;
// [Asm]   r16 -- r18;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r59;
// [Asm]   r10 -- r16;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r14 -- r33;
// [Asm]   r49 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r31 -- r40;
// [Asm]   r4 -- r55;
// [Asm]   r12 -- r55;
// [Asm]   r2 -- r14;
// [Asm]   r47 -- r51;
// [Asm]   r14 -- r25;
// [Asm]   r24 -- r34;
// [Asm]   r16 -- r56;
// [Asm]   r9 -- r24;
// [Asm]   r13 -- r14;
// [Asm]   r10 -- r15;
// [Asm]   r12 -- r22;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r35;
// [Asm]   r9 -- r36;
// [Asm]   r11 -- r41;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r15 -- r34;
// [Asm]   r4 -- r36;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r15 -- r33;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r6 -- r38;
// [Asm]   r31 -- r33;
// [Asm]   r9 -- r58;
// [Asm]   r13 -- r39;
// [Asm]   r10 -- r32;
// [Asm]   r4 -- r10;
// [Asm]   r54 -- r56;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r27;
// [Asm]   r48 -- r56;
// [Asm]   r11 -- r56;
// [Asm]   r26 -- r32;
// [Asm]   r11 -- r29;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r11 -- r44;
// [Asm]   r12 -- r35;
// [Asm]   r24 -- r39;
// [Asm]   r25 -- r28;
// [Asm]   r15 -- r41;
// [Asm]   r2 -- r45;
// [Asm]   r9 -- r25;
// [Asm]   r4 -- r41;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r16 -- r55;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r4 -- r58;
// [Asm]   r30 -- r40;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r53 -- r57;
// [Asm]   r24 -- r32;
// [Asm]   r3 -- r32;
// [Asm]   r27 -- r32;
// [Asm]   r31 -- r36;
// [Asm]   r29 -- r31;
// [Asm]   r5 -- r42;
// [Asm]   r9 -- r45;
// [Asm]   r9 -- r31;
// [Asm]   r47 -- r52;
// [Asm]   r2 -- r16;
// [Asm]   r13 -- r28;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r27 -- r39;
// [Asm]   r9 -- r41;
// [Asm]   r14 -- r39;
// [Asm]   r31 -- r39;
// [Asm]   r4 -- r35;
// [Asm]   r14 -- r30;
// [Asm]   r1 -- r31;
// [Asm]   r14 -- r28;
// [Asm]   r26 -- r41;
// [Asm]   r2 -- r59;
// [Asm]   r4 -- r33;
// [Asm]   r24 -- r31;
// [Asm]   r3 -- r30;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r12 -- r40;
// [Asm]   r11 -- r54;
// [Asm]   r9 -- r59;
// [Asm]   r3 -- r10;
// [Asm]   r12 -- r59;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r0 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r16 -- r42;
// [Asm]   r52 -- r54;
// [Asm]   r10 -- r35;
// [Asm]   r12 -- r53;
// [Asm]   r15 -- r38;
// [Asm]   r14 -- r22;
// [Asm]   r55 -- r56;
// [Asm]   r27 -- r37;
// [Asm]   r6 -- r32;
// [Asm]   r30 -- r33;
// [Asm]   r11 -- r25;
// [Asm]   r17 -- r20;
// [Asm]   r25 -- r33;
// [Asm]   r13 -- r24;
// [Asm]   r53 -- r55;
// [Asm]   r16 -- r31;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r25 -- r36;
// [Asm]   r29 -- r32;
// [Asm]   r4 -- r5;
// [Asm]   r12 -- r38;
// [Asm]   r9 -- r57;
// [Asm]   r13 -- r42;
// [Asm]   r15 -- r26;
// [Asm]   r11 -- r57;
// [Asm]   r49 -- r55;
// [Asm]   r28 -- r37;
// [Asm]   r6 -- r14;
// [Asm]   r12 -- r36;
// [Asm]   r15 -- r22;
// [Asm]   r9 -- r29;
// [Asm]   r14 -- r42;
// [Asm]   r26 -- r36;
// [Asm]   r13 -- r26;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r33 -- r39;
// [Asm]   r10 -- r41;
// [Asm]   r4 -- r30;
// [Asm]   r16 -- r40;
// [Asm]   r10 -- r27;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r38;
// [Asm]   r24 -- r30;
// [Asm]   r1 -- r39;
// [Asm]   r9 -- r44;
// [Asm]   r12 -- r42;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r9 -- r34;
// [Asm]   r9 -- r38;
// [Asm]   r15 -- r17;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r33;
// [Asm]   r9 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r25 -- r41;
// [Asm]   r11 -- r39;
// [Asm]   r26 -- r30;
// [Asm]   r24 -- r35;
// [Asm]   r7 -- r11;
// [Asm]   r9 -- r37;
// [Asm]   r12 -- r39;
// [Asm]   r7 -- r39;
// [Asm]   r14 -- r45;
// [Asm]   r30 -- r36;
// [Asm]   r12 -- r30;
// [Asm]   r12 -- r37;
// [Asm]   r11 -- r26;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r32;
// [Asm]   r4 -- r39;
// [Asm]   r11 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r9 -- r19;
// [Asm]   r31 -- r32;
// [Asm]   r12 -- r27;
// [Asm]   r11 -- r27;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r54 -- r57;
// [Asm]   r12 -- r18;
// [Asm]   r11 -- r21;
// [Asm]   r33 -- r38;
// [Asm]   r47 -- r53;
// [Asm]   r4 -- r19;
// [Asm]   r52 -- r53;
// [Asm]   r48 -- r54;
// [Asm]   r8 -- r31;
// [Asm]   r2 -- r32;
// [Asm]   r48 -- r53;
// [Asm]   r12 -- r29;
// [Asm]   r33 -- r40;
// [Asm]   r12 -- r32;
// [Asm]   r32 -- r36;
// [Asm]   r26 -- r39;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r47 -- r50;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r13 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r15 -- r45;
// [Asm]   r15 -- r36;
// [Asm]   r1 -- r45;
// [Asm]   r55 -- r57;
// [Asm]   r47 -- r57;
// [Asm]   r13 -- r31;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r11 -- r45;
// [Asm]   r2 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r15 -- r58;
// [Asm]   r10 -- r40;
// [Asm]   r30 -- r34;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r8 -- r45;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r13 -- r38;
// [Asm]   r28 -- r39;
// [Asm]   r16 -- r29;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r38;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r45;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r25 -- r32;
// [Asm]   r16 -- r37;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r13 -- r41;
// [Asm]   r10 -- r31;
// [Asm]   r13 -- r58;
// [Asm]   r4 -- r56;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r1;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r16 -- r41;
// [Asm]   r4 -- r25;
// [Asm]   r2 -- r36;
// [Asm]   r13 -- r35;
// [Asm]   r16 -- r21;
// [Asm]   r27 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r7 -- r42;
// [Asm]   r28 -- r38;
// [Asm]   r16 -- r38;
// [Asm]   r16 -- r24;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r14 -- r37;
// [Asm]   r15 -- r30;
// [Asm]   r14 -- r15;
// [Asm]   r8 -- r30;
// [Asm]   r27 -- r31;
// [Asm]   r14 -- r32;
// [Asm]   r26 -- r34;
// [Asm]   r3 -- r45;
// [Asm]   r53 -- r54;
// [Asm]   r7 -- r29;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r16 -- r58;
// [Asm]   r11 -- r20;
// [Asm]   r1 -- r8;
// [Asm]   r3 -- r38;
// [Asm]   r30 -- r35;
// [Asm]   r1 -- r34;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r47 -- r48;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r33 -- r36;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r13;
// [Asm]   r10 -- r29;
// [Asm]   r14 -- r41;
// [Asm]   r11 -- r22;
// [Asm]   r6 -- r22;
// [Asm]   r28 -- r36;
// [Asm]   r8 -- r20;
// [Asm]   r24 -- r28;
// [Asm]   r6 -- r20;
// [Asm]   r14 -- r35;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r44;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r12 -- r41;
// [Asm]   r27 -- r38;
// [Asm]   r12 -- r13;
// [Asm]   r31 -- r37;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r16 -- r57;
// [Asm]   r32 -- r33;
// [Asm]   r25 -- r35;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r50 -- r53;
// [Asm]   r4 -- r32;
// [Asm]   r11 -- r59;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r25 -- r34;
// [Asm]   r16 -- r35;
// [Asm]   r5 -- r45;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r25 -- r31;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r33 -- r41;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r11 -- r34;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r27 -- r33;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r16;
// [Asm]   r26 -- r31;
// [Asm]   r30 -- r41;
// [Asm]   r2 -- r35;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r28 -- r34;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r26 -- r33;
// [Asm]   r5 -- r41;
// [Asm]   r0 -- r13;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r14 -- r38;
// [Asm]   r9 -- r27;
// [Asm]   r26 -- r40;
// [Asm]   r7 -- r40;
// [Asm]   r30 -- r38;
// [Asm]   r27 -- r29;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r11 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r32;
// [Asm]   r1 -- r20;
// [Asm]   r16 -- r59;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r10 -- r58;
// [Asm]   r3 -- r34;
// [Asm]   r29 -- r36;
// [Asm]   r32 -- r41;
// [Asm]   r12 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r27 -- r30;
// [Asm]   r13 -- r37;
// [Asm]   r9 -- r18;
// [Asm]   r13 -- r40;
// [Asm]   r29 -- r38;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r16 -- r34;
// [Asm]   r6 -- r13;
// [Asm]   r25 -- r39;
// [Asm]   r12 -- r44;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r25 -- r38;
// [Asm]   r10 -- r37;
// [Asm]   r3 -- r4;
// [Asm]   r54 -- r55;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r8 -- r37;
// [Asm]   r24 -- r36;
// [Asm]   r7 -- r10;
// [Asm]   r17 -- r22;
// [Asm]   r24 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r8 -- r39;
// [Asm]   r30 -- r39;
// [Asm]   r10 -- r30;
// [Asm]   r6 -- r45;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r48 -- r55;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r14 -- r31;
// [Asm]   r16 -- r39;
// [Asm]   r12 -- r47;
// [Asm]   r31 -- r34;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r24 -- r37;
// [Asm]   r11 -- r30;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r5 -- r34;
// [Asm]   r29 -- r35;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r12 -- r45;
// [Asm]   r28 -- r40;
// [Asm]   r17 -- r18;
// [Asm]   r1 -- r58;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r40;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r32 -- r37;
// [Asm]   r15 -- r29;
// [Asm]   r4 -- r37;
// [Asm]   r9 -- r15;
// [Asm]   r2 -- r18;
// [Asm]   r16 -- r45;
// [Asm]   r6 -- r44;
// [Asm]   r14 -- r58;
// [Asm]   r12 -- r15;
// [Asm]   r13 -- r45;
// [Asm]   r25 -- r27;
// [Asm]   r4 -- r59;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r9 -- r42;
// [Asm]   r31 -- r38;
// [Asm]   r12 -- r56;
// [Asm]   r3 -- r28;
// [Asm]   r8 -- r38;
// [Asm]   r7 -- r30;
// [Asm]   r47 -- r54;
// [Asm]   r14 -- r29;
// [Asm]   r8 -- r33;
// [Asm]   r14 -- r24;
// [Asm]   r16 -- r26;
// [Asm]   r16 -- r53;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r10 -- r34;
// [Asm]   r6 -- r40;
// [Asm]   r30 -- r37;
// [Asm]   r13 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r15 -- r32;
// [Asm]   r32 -- r38;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r53 -- r56;
// [Asm]   r11 -- r42;
// [Asm]   r26 -- r35;
// [Asm]   r11 -- r33;
// [Asm]   r13 -- r34;
// [Asm]   r18 -- r19;
// [Asm]   r4 -- r45;
// [Asm]   r8 -- r13;
// [Asm]   r12 -- r31;
// [Asm]   r5 -- r37;
// [Asm]   r32 -- r39;
// [Asm]   r2 -- r56;
// [Asm]   r29 -- r37;
// [Asm]   r16 -- r54;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r27 -- r58;
// [Asm]   r15 -- r40;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r47 -- r49;
// [Asm]   r28 -- r35;
// [Asm]   r29 -- r39;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r29 -- r34;
// [Asm]   r7 -- r58;
// [Asm]   r11 -- r38;
// [Asm]   r26 -- r37;
// [Asm]   r26 -- r29;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r25 -- r40;
// [Asm]   r24 -- r33;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:v44-> 1:v25-> 2:v11-> 3:v21-> 4:v10-> 5:v26-> 7:v22-> 8:v24-> 10:v28-> 14:v27-> 15:v20-> 6:v13-> 9:v12-> 11:v9-> 12:zero-> 13:v23-> 16:v8-> 24:v47-> 28:v36-> 34:v67-> 25:v42-> 26:v41-> 27:v34-> 29:v37-> 30:v39-> 31:v35-> 32:v38-> 33:v40-> 35:v49-> 36:v64-> 37:v62-> 38:v51-> 39:v60-> 40:v58-> 41:v56-> 58:v33-> 42:v45-> 22:v19-> 45:v46-> 20:v18-> 17:v16-> 18:v17-> 19:v75-> 21:v73-> 59:v31-> 43:v30-> 44:v32-> 57:v7-> 56:v6-> 55:v5-> 54:v4-> 53:v3-> 47:v2-> 48:a5-> 49:a4-> 52:a3-> 50:a2-> 51:a1-> 23:v15-> 46:a0"
// [Asm]   comment = "v44<-a0;v51<-t4;v40<-a5;v31<-a0;v12<-a7;v41<-t1;v2<-t0;v13<-a1;v32<-a0;v23<-a2;v3<-a7;v45<-a0;v10<-a4;v37<-s1;v49<-t4;v22<-a6;v6<-a1;v28<-t0;v24<-a7;v26<-a5;v4<-a6;v64<-s4;v47<-a0;v20<-t2;v38<-s3;v7<-a0;v30<-a0;v35<-a6;v60<-t4;v16<-a6;v62<-t4;v18<-a5;v15<-a0;v21<-a3;v34<-s0;v25<-a1;v58<-a0;v36<-t3;v56<-a0;v9<-a3;v33<-a0;v67<-t4;v19<-a0;v27<-t1;v39<-s2;v46<-a0;v42<-t0;v11<-a2;v5<-a2;v8<-t2;v17<-a0;v75<-a5;v73<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop1.181"];
// [Asm]   r0 [label="fv48 ← fa0", color=green];
// [Asm]   r2 [label="fv52 ← fa2", color=green];
// [Asm]   r1 [label="fv50 ← fa1", color=green];
// [Asm]   r3 [label="fv54 ← fa0", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv48-> 1:fv50-> 2:fv52-> 3:fv54"
// [Asm]   comment = "fv48<-fa0;fv52<-fa2;fv50<-fa1;fv54<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v44, zero ->   mv a0, zero
// [Asm] subst   addi v16, v10, -1 ->   addi a6, a4, -1
// [Asm] subst   slliw v17, v8, 3 ->   slliw a0, t2, 3
// [Asm] subst   add v75, v13, v17 ->   add a5, a1, a0
// [Asm] subst   ld v18, 0(v75) ->   ld a5, 0(a5)
// [Asm] subst   add v73, v11, v17 ->   add a0, a2, a0
// [Asm] subst   ld v19, 0(v73) ->   ld a0, 0(a0)
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   slliw v47, v35, 3 ->   slliw a0, a6, 3
// [Asm] subst   add v67, v41, v47 ->   add t4, t1, a0
// [Asm] subst   fld fv48, 0(v67) ->   fld fa0, 0(t4)
// [Asm] subst   slliw v49, v36, 3 ->   slliw t4, t3, 3
// [Asm] subst   add v64, v42, v49 ->   add s4, t0, t4
// [Asm] subst   fld fv50, 0(v64) ->   fld fa1, 0(s4)
// [Asm] subst   add v62, v38, v49 ->   add t4, s3, t4
// [Asm] subst   ld v51, 0(v62) ->   ld t4, 0(t4)
// [Asm] subst   add v60, v51, v47 ->   add t4, t4, a0
// [Asm] subst   fld fv52, 0(v60) ->   fld fa2, 0(t4)
// [Asm] subst   fmadd.d fv54, fv50, fv52, fv48 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   add v58, v40, v47 ->   add a0, a5, a0
// [Asm] subst   fsd fv54, 0(v58) ->   fsd fa0, 0(a0)
// [Asm] subst   addi v56, v36, -1 ->   addi a0, t3, -1
// [Asm] subst   mv v36, v56 ->   mv t3, a0
// [Asm] subst   j .loop1.181_14 ->   j .loop1.181_14
// [Asm] subst   mv v30, zero ->   mv a0, zero
// [Asm] subst   addi v32, v8, -1 ->   addi a0, t2, -1
// [Asm] subst   mv v8, v32 ->   mv t2, a0
// [Asm] subst   j .loop1.181_0 ->   j .loop1.181_0
// [Asm] subst   blt v36, zero, .loop1.181_16 ->   blt t3, zero, .loop1.181_16
// [Asm] subst   mv v27, v18 ->   mv t1, a5
// [Asm] subst   mv v28, v19 ->   mv t0, a0
// [Asm] subst   addi v46, v22, -1 ->   addi a0, a6, -1
// [Asm] subst   mv v22, v46 ->   mv a6, a0
// [Asm] subst   j .loop1.181_7 ->   j .loop1.181_7
// [Asm] subst   blt v8, zero, .loop1.181_2 ->   blt t2, zero, .loop1.181_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v2, a0 ->   mv t0, a0
// [Asm] subst   mv v3, a1 ->   mv a7, a1
// [Asm] subst   mv v4, a2 ->   mv a6, a2
// [Asm] subst   mv v5, a3 ->   mv a2, a3
// [Asm] subst   mv v6, a4 ->   mv a1, a4
// [Asm] subst   mv v7, a5 ->   mv a0, a5
// [Asm] subst   mv v8, v2 ->   mv t2, t0
// [Asm] subst   mv v9, v3 ->   mv a3, a7
// [Asm] subst   mv v10, v4 ->   mv a4, a6
// [Asm] subst   mv v12, v6 ->   mv a7, a1
// [Asm] subst   mv v13, v7 ->   mv a1, a0
// [Asm] subst   blt v22, zero, .loop1.181_9 ->   blt a6, zero, .loop1.181_9
// [Asm] subst   mv v34, v20 ->   mv s0, t2
// [Asm] subst   mv v36, v33 ->   mv t3, a0
// [Asm] subst   mv v37, v23 ->   mv s1, a2
// [Asm] subst   mv v38, v24 ->   mv s3, a7
// [Asm] subst   mv v39, v25 ->   mv s2, a1
// [Asm] subst   addi v33, v21, -1 ->   addi a0, a3, -1
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, FnParam(fref=f3, fpref=$f.4) -> v6, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%1) -> v9, FnParam(fref=f3, fpref=$f.3) -> v5, FnParam(fref=f3, fpref=$f.0) -> v2, FnParam(fref=f3, fpref=$f.5) -> v7, Self(fref=f3) -> v0, Insn(iref=%0) -> v8
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v4, v6, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v7, v4, a1, v6]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v7, a2, a1, v6]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [zero, a0, v7, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, v7, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v7]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of mul.182"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r3 [label="a4", color=blue];
// [Asm]   r9 [label="v5 ← a3", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="a5", color=blue];
// [Asm]   r11 [label="v7 ← a5", color=green];
// [Asm]   r7 [label="v3 ← a1", color=green];
// [Asm]   r10 [label="v6 ← a4", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="v4 ← a2", color=green];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r12 [label="v8 ← a0", color=green];
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r5 -- r10;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r7;
// [Asm]   r8 -- r9;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r13;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r11;
// [Asm]   r3 -- r5;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r9 -- r11;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r11 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r9 -- r12;
// [Asm]   r13 -- r14;
// [Asm]   r2 -- r12;
// [Asm]   r10 -- r11;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v2-> 1:a5-> 2:zero-> 3:a4-> 4:a2-> 5:a1-> 6:a3-> 7:v3-> 8:v4-> 9:v5-> 10:v6-> 11:v7-> 13:a0-> 12:v8-> 14:a6-> 15:a7-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:v9"
// [Asm]   comment = "v2<-a0;v5<-a3;v7<-a5;v3<-a1;v6<-a4;v4<-a2;v9<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of mul.182"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v8, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   call loop1.181 ->   call loop1.181
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.183 ->   call main.183
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.183:
// [Asm] # block info: defs: [v76, fv86, v91, v79, fv89, a1, s11, v44, fa1, fv80, fv74, fv95, fv38, v73, v82, fv92, fa2, ft6, fa6, v27, a4, v50, a6, ft5, ft10, v6, fv83, fv77, ft4, v5, ft9, v49, fa4, ft2, v37, v17, fv104, a3, v31, fa7, a7, fa3, ft3, fv43, v45, t2, v40, v25, t1, v13, v42, v7, ft0, ft1, v32, v41, fv107, v115, v109, v106, fv98, v97, v29, v103, v19, v4, v47, v34, ft7, v11, v71, v46, v21, a5, a0, v36, v88, fv48, a2, fv101, v114, v111, v9, v39, ft8, t3, t0, v94, v112, fa5, v23, fa0, v85, fv33, v35, t4, v70, v15, v100, v2], uses: [v2, fv86, v91, v79, fv89, a1, s11, v44, fv80, fv74, fv95, fv38, v73, v82, fv92, v27, a4, v6, fv83, fv77, v5, v49, v37, v17, fv104, a3, fv43, v25, v13, v42, v7, v32, fv107, v106, fv98, v115, v109, v97, v29, zero, v103, v19, v4, v47, v34, v11, v71, v21, a5, a0, v88, fv48, a2, fv101, v114, v111, v9, v39, v94, v112, v23, v85, fv33, v70, v15, v100, v76], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.183_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   li v114, 2  # live: [zero, v114, v2]
// [Asm]   mv a0, v114  # live: [zero, a0, v2]
// [Asm]   li v115, 3  # live: [v115, zero, a0, v2]
// [Asm]   mv a1, v115  # live: [zero, a0, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, a2, a1, v2]
// [Asm]   call make_arr.185  # live: [zero, a0, v2]
// [Asm]   mv v4, a0  # live: [zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [zero, v4, v2]
// [Asm]   # save_ctx2  # live: [zero, v4, v2]
// [Asm]   li v111, 3  # live: [zero, v4, v111, v2]
// [Asm]   mv a0, v111  # live: [zero, a0, v4, v2]
// [Asm]   li v112, 2  # live: [v112, zero, a0, v4, v2]
// [Asm]   mv a1, v112  # live: [zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [zero, a0, v4, a2, a1, v2]
// [Asm]   call make_arr.185  # live: [zero, a0, v4, v2]
// [Asm]   mv v5, a0  # live: [v5, zero, v4, v2]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v2]
// [Asm]   li v109, 2  # live: [v109, v5, zero, v4, v2]
// [Asm]   mv a0, v109  # live: [v109, v5, zero, a0, v4, v2]
// [Asm]   mv a1, v109  # live: [v5, zero, a0, v4, a1, v2]
// [Asm]   mv a2, v2  # live: [v5, zero, a0, v4, a2, a1]
// [Asm]   call make_arr.185  # live: [v5, zero, a0, v4]
// [Asm]   mv v6, a0  # live: [v5, zero, v4, v6]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   ld v7, 0(v4)  # live: [v5, zero, v7, v4, v6]
// [Asm]   li v106, 4607182418800017408  # live: [v106, v5, zero, v7, v4, v6]
// [Asm]   fmv.d.x fv107, v106  # live: [v5, zero, v7, v4, v6, fv107]
// [Asm]   fsd fv107, 0(v7)  # live: [v5, zero, v4, v6]
// [Asm]   ld v9, 0(v4)  # live: [v5, zero, v4, v6, v9]
// [Asm]   li v103, 4611686018427387904  # live: [v5, zero, v103, v4, v6, v9]
// [Asm]   fmv.d.x fv104, v103  # live: [v5, zero, v4, v6, fv104, v9]
// [Asm]   fsd fv104, 8(v9)  # live: [v5, zero, v4, v6]
// [Asm]   ld v11, 0(v4)  # live: [v11, v5, zero, v4, v6]
// [Asm]   li v100, 4613937818241073152  # live: [v11, v5, zero, v4, v6, v100]
// [Asm]   fmv.d.x fv101, v100  # live: [v11, v5, zero, v4, fv101, v6]
// [Asm]   fsd fv101, 16(v11)  # live: [v5, zero, v4, v6]
// [Asm]   ld v13, 8(v4)  # live: [v5, zero, v13, v4, v6]
// [Asm]   li v97, 4616189618054758400  # live: [v5, zero, v13, v97, v4, v6]
// [Asm]   fmv.d.x fv98, v97  # live: [fv98, v5, zero, v13, v4, v6]
// [Asm]   fsd fv98, 0(v13)  # live: [v5, zero, v4, v6]
// [Asm]   ld v15, 8(v4)  # live: [v5, zero, v4, v6, v15]
// [Asm]   li v94, 4617315517961601024  # live: [v94, v5, zero, v4, v6, v15]
// [Asm]   fmv.d.x fv95, v94  # live: [v5, zero, v4, v6, v15, fv95]
// [Asm]   fsd fv95, 8(v15)  # live: [v5, zero, v4, v6]
// [Asm]   ld v17, 8(v4)  # live: [v5, zero, v4, v6, v17]
// [Asm]   li v91, 4618441417868443648  # live: [v5, v91, zero, v4, v6, v17]
// [Asm]   fmv.d.x fv92, v91  # live: [v5, fv92, zero, v4, v6, v17]
// [Asm]   fsd fv92, 16(v17)  # live: [v5, zero, v4, v6]
// [Asm]   ld v19, 0(v5)  # live: [v5, zero, v19, v4, v6]
// [Asm]   li v88, 4619567317775286272  # live: [v5, zero, v19, v88, v4, v6]
// [Asm]   fmv.d.x fv89, v88  # live: [v5, zero, fv89, v19, v4, v6]
// [Asm]   fsd fv89, 0(v19)  # live: [v5, zero, v4, v6]
// [Asm]   ld v21, 0(v5)  # live: [v5, v21, zero, v4, v6]
// [Asm]   li v85, 4620693217682128896  # live: [v5, v21, zero, v85, v4, v6]
// [Asm]   fmv.d.x fv86, v85  # live: [fv86, v5, v21, zero, v4, v6]
// [Asm]   fsd fv86, 8(v21)  # live: [v5, zero, v4, v6]
// [Asm]   ld v23, 8(v5)  # live: [v5, zero, v23, v4, v6]
// [Asm]   li v82, 4621256167635550208  # live: [v5, v82, zero, v23, v4, v6]
// [Asm]   fmv.d.x fv83, v82  # live: [v5, zero, v23, v4, v6, fv83]
// [Asm]   fsd fv83, 0(v23)  # live: [v5, zero, v4, v6]
// [Asm]   ld v25, 8(v5)  # live: [v25, v5, zero, v4, v6]
// [Asm]   li v79, 4621819117588971520  # live: [v25, v5, zero, v79, v4, v6]
// [Asm]   fmv.d.x fv80, v79  # live: [v25, v5, zero, v4, v6, fv80]
// [Asm]   fsd fv80, 8(v25)  # live: [v5, zero, v4, v6]
// [Asm]   ld v27, 16(v5)  # live: [v5, zero, v27, v4, v6]
// [Asm]   li v76, 4622382067542392832  # live: [v5, zero, v27, v4, v6, v76]
// [Asm]   fmv.d.x fv77, v76  # live: [v5, zero, v27, v4, v6, fv77]
// [Asm]   fsd fv77, 0(v27)  # live: [v5, zero, v4, v6]
// [Asm]   ld v29, 16(v5)  # live: [v5, zero, v29, v4, v6]
// [Asm]   li v73, 4622945017495814144  # live: [v5, zero, v29, v4, v6, v73]
// [Asm]   fmv.d.x fv74, v73  # live: [v5, zero, v29, v4, v6, fv74]
// [Asm]   fsd fv74, 8(v29)  # live: [v5, zero, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v4, v6]
// [Asm]   li v70, 2  # live: [v5, zero, v4, v6, v70]
// [Asm]   mv a0, v70  # live: [v5, zero, a0, v4, v6, v70]
// [Asm]   li v71, 3  # live: [v5, v71, zero, a0, v4, v6, v70]
// [Asm]   mv a1, v71  # live: [v5, zero, a0, v4, a1, v6, v70]
// [Asm]   mv a2, v70  # live: [v5, zero, a0, a2, v4, a1, v6]
// [Asm]   mv a3, v4  # live: [v5, zero, a0, a2, v6, a1, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, v6, a1, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, v6, a1, a3]
// [Asm]   call mul.182  # live: [v6, zero, a0]
// [Asm]   mv v31, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v32, 0(v6)  # live: [v32, v6, zero]
// [Asm]   fld fv33, 0(v32)  # live: [v6, zero, fv33]
// [Asm]   fcvt.w.d v34, fv33, rtz  # live: [v6, zero, v34]
// [Asm]   # save_ctx2  # live: [v6, zero, v34]
// [Asm]   mv a0, v34  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v35, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v36, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v37, 0(v6)  # live: [v37, v6, zero]
// [Asm]   fld fv38, 8(v37)  # live: [v6, zero, fv38]
// [Asm]   fcvt.w.d v39, fv38, rtz  # live: [v6, zero, v39]
// [Asm]   # save_ctx2  # live: [v6, zero, v39]
// [Asm]   mv a0, v39  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v40, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v41, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v42, 8(v6)  # live: [v6, zero, v42]
// [Asm]   fld fv43, 0(v42)  # live: [v6, zero, fv43]
// [Asm]   fcvt.w.d v44, fv43, rtz  # live: [v6, v44, zero]
// [Asm]   # save_ctx2  # live: [v6, v44, zero]
// [Asm]   mv a0, v44  # live: [v6, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v6, zero, a0]
// [Asm]   mv v45, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   # save_ctx2  # live: [v6, zero]
// [Asm]   call minimbt_print_endline  # live: [v6, zero, a0]
// [Asm]   mv v46, a0  # live: [v6, zero]
// [Asm]   # restore_ctx2  # live: [v6, zero]
// [Asm]   ld v47, 8(v6)  # live: [v47, zero]
// [Asm]   fld fv48, 8(v47)  # live: [fv48, zero]
// [Asm]   fcvt.w.d v49, fv48, rtz  # live: [v49, zero]
// [Asm]   # save_ctx2  # live: [v49, zero]
// [Asm]   mv a0, v49  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v50, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] make_arr.185:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v11, v5, a0, v7, a2, a1, s11, v2], upward_exposed: [a2, a1, s11, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .make_arr.185_0:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, v3]
// [Asm]   mv v4, a2  # live: [v2, s11, v3]
// [Asm]   slliw v11, v2, 3  # live: [v2, v11, s11, v3]
// [Asm]   sub v5, s11, v11  # live: [v2, v5, v3]
// [Asm]   andi s11, v5, -8  # live: [v2, v5, v3]
// [Asm]   mv a1, v2  # live: [v2, v5, v3]
// [Asm]   addi v7, v2, -1  # live: [v7, v5, v3]
// [Asm]   # save_ctx2  # live: [v7, v5, v3]
// [Asm]   mv a0, v7  # live: [v5, a0, v3]
// [Asm]   mv a1, v3  # live: [v5, a1, a0]
// [Asm]   mv a2, v5  # live: [a2, v5, a1, a0]
// [Asm]   call init_arr.184  # live: [v5, a0]
// [Asm]   mv v8, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_arr.184:
// [Asm] # block info: defs: [v3, v7, v8, v4, v6, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr.184_5:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, s11, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, s11, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v6, zero], upward_exposed: [v6, zero], params_defs: [v8, v6, v7]
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: [v6, v7, v8]
// [Asm] .init_arr.184_0:
// [Asm] # control
// [Asm]   blt v6, zero, .init_arr.184_2  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v5, v16, v14, v18, a1, v17, v6, s11], uses: [v5, v16, v14, v18, v8, v7, v6, v17, s11], upward_exposed: [v8, v6, s11, v7], params_defs: []
// [Asm] # live_in: [v7, v6, s11, zero, v8], live_out: [v8, v6, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr.184_1:
// [Asm]   slliw v18, v7, 3  # live: [v18, zero, v7, v8, v6, s11]
// [Asm]   sub v5, s11, v18  # live: [v5, zero, v7, v8, v6]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v7, v8, v6, s11]
// [Asm]   mv a1, v7  # live: [v5, zero, v7, v8, v6, s11]
// [Asm]   slliw v16, v6, 3  # live: [v5, v16, zero, v7, v8, v6, s11]
// [Asm]   add v17, v8, v16  # live: [v5, zero, v7, v8, v6, v17, s11]
// [Asm]   sd v5, 0(v17)  # live: [v7, v6, s11, zero, v8]
// [Asm]   addi v14, v6, -1  # live: [v7, v14, s11, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v14  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v7, v7  # live: [v7, v6, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, v6, s11, zero, v8]
// [Asm]   j .init_arr.184_0  # live: [v7, v6, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .init_arr.184_2:
// [Asm] # control
// [Asm]   mv v10, zero  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .init_arr.184_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.183  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] mul.182:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v5, a5, a0, v7, a2, a1, a3, zero, a4, v8, v4, v6, v3], upward_exposed: [a5, a0, zero, a4, a2, a1, a3], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: []
// [Asm] # block parameters: []
// [Asm] .mul.182_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm]   addi v8, v2, -1  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   mv a0, v8  # live: [v5, zero, a0, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, a0, v7, v4, a1, v6]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, v7, a2, a1, v6]
// [Asm]   mv a3, v5  # live: [zero, a0, v7, a2, a1, v6, a3]
// [Asm]   mv a4, v6  # live: [zero, a0, a4, v7, a2, a1, a3]
// [Asm]   mv a5, v7  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call loop1.181  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] loop1.181:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.181_5:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop1.181_0:
// [Asm] # control
// [Asm]   blt v8, zero, .loop1.181_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v19, v16, v17, v75, v18, v73], uses: [v11, v10, v75, v13, v8, v17, v73], upward_exposed: [v11, v10, v13, v8], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.181_1:
// [Asm]   addi v16, v10, -1  # live: [v11, v16, v10, v13, zero, v8, v12, v9]
// [Asm]   slliw v17, v8, 3  # live: [v11, v16, v10, v13, zero, v8, v17, v12, v9]
// [Asm]   add v75, v13, v17  # live: [v11, v16, v10, v75, v13, zero, v8, v17, v12, v9]
// [Asm]   ld v18, 0(v75)  # live: [v11, v16, v18, v10, v13, zero, v8, v17, v12, v9]
// [Asm]   add v73, v11, v17  # live: [v11, v16, v18, v10, v13, zero, v8, v12, v9, v73]
// [Asm]   ld v19, 0(v73)  # live: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v25, v21, v26, v23, v20, v22, v27, v24, v28], uses: [v11, v16, v18, v13, v8, v19, v12, v9], upward_exposed: [v11, v16, v18, v13, v8, v19, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v16, v18, v10, v13, zero, v8, v19, v12, v9], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] # block parameters: []
// [Asm] .loop1.181_12:
// [Asm] # control
// [Asm]   mv v20, v8  # live: [v11, v16, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v21, v9  # live: [v11, v16, v21, v10, v13, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v22, v16  # live: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v20, v8, v19]
// [Asm]   mv v23, v11  # live: [v11, v21, v10, v13, v22, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v24, v12  # live: [v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v25, v13  # live: [v25, v11, v21, v10, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v26, v18  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, v18, zero, v23, v20, v8, v19]
// [Asm]   mv v27, v18  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v9, zero, v23, v27, v20, v8, v19]
// [Asm]   mv v28, v19  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v22], upward_exposed: [zero, v22], params_defs: [v25, v21, v26, v23, v20, v22, v27, v24, v28]
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8]
// [Asm] # block parameters: [v20, v21, v22, v23, v24, v25, v26, v27, v28]
// [Asm] .loop1.181_7:
// [Asm] # control
// [Asm]   blt v22, zero, .loop1.181_9  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v21], upward_exposed: [v21], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v20, v27, v23, v8]
// [Asm] # block parameters: []
// [Asm] .loop1.181_8:
// [Asm]   addi v33, v21, -1  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v20, v27, v23, v8]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v42, v36, v35, v37, v38, v41, v34, v39, v40], uses: [v25, v26, v23, v20, v22, v27, v24, v28, v33], upward_exposed: [v25, v26, v23, v20, v22, v27, v24, v28, v33], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v33, v9, zero, v27, v23, v20, v8], live_out: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # block parameters: []
// [Asm] .loop1.181_19:
// [Asm] # control
// [Asm]   mv v34, v20  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v8, v34]
// [Asm]   mv v35, v22  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, v33, zero, v23, v20, v27, v35, v8, v34]
// [Asm]   mv v36, v33  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm]   mv v37, v23  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v34]
// [Asm]   mv v38, v24  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm]   mv v39, v25  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34]
// [Asm]   mv v40, v26  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v41, v27  # live: [v25, v11, v21, v10, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v42, v28  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v36], upward_exposed: [zero, v36], params_defs: [v42, v36, v35, v37, v38, v41, v34, v39, v40]
// [Asm] # live_in: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40], live_out: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # block parameters: [v34, v35, v36, v37, v38, v39, v40, v41, v42]
// [Asm] .loop1.181_14:
// [Asm] # control
// [Asm]   blt v36, zero, .loop1.181_16  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [v62, fv52, v58, v49, v67, fv54, v36, fv48, v64, v60, v51, fv50, v56, v47], uses: [v62, fv52, v58, v49, v42, v67, v36, fv54, fv48, v41, v37, v64, v60, v39, v51, fv50, v56, v35, v47, v38, v34, v40], upward_exposed: [v42, v36, v35, v38, v41, v37, v34, v39, v40], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40], live_out: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # block parameters: []
// [Asm] .loop1.181_15:
// [Asm]   slliw v47, v35, 3  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   add v67, v41, v47  # live: [v25, v42, v26, v13, v22, v67, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   fld fv48, 0(v67)  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   slliw v49, v36, 3  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v49, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   add v64, v42, v49  # live: [v25, v42, v26, v13, v22, v41, v12, v28, v64, zero, v20, v27, v8, v47, v34, v11, v21, v10, v49, v36, fv48, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   fld fv50, 0(v64)  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v49, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   add v62, v38, v49  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v62, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   ld v51, 0(v62)  # live: [v25, v42, v26, v13, v22, v41, v12, v28, v51, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   add v60, v51, v47  # live: [v25, v42, v26, v13, v22, v41, v12, v28, v60, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   fld fv52, 0(v60)  # live: [v25, fv52, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv48, v37, v24, v9, v39, fv50, v23, v35, v38, v40]
// [Asm]   fmadd.d fv54, fv50, fv52, fv48  # live: [v25, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v47, v34, v11, v21, v10, v36, fv54, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   add v58, v40, v47  # live: [v25, v58, v42, v26, v13, v22, v41, v12, v28, zero, v20, v27, v8, v34, v11, v21, v10, v36, fv54, v37, v24, v9, v39, v23, v35, v38, v40]
// [Asm]   fsd fv54, 0(v58)  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v41, v37, v12, v24, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   addi v56, v36, -1  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] # control
// [Asm]   mv v34, v34  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v35, v35  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v37, v41, v24, v12, v28, v9, v39, v56, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v36, v56  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v37, v37  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v38, v38  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v39, v39  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v40, v40  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v41, v41  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   mv v42, v42  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm]   j .loop1.181_14  # live: [v25, v11, v21, v10, v42, v26, v13, v22, v36, v37, v41, v24, v12, v28, v9, v39, zero, v23, v20, v27, v35, v8, v38, v34, v40]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .loop1.181_2:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v15, a0], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: []
// [Asm] # block parameters: [v15]
// [Asm] .loop1.181_3:
// [Asm] # control
// [Asm]   mv a0, v15  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v13, zero, v30, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop1.181_9:
// [Asm] # control
// [Asm]   mv v30, zero  # live: [v11, v10, v13, zero, v30, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v31], uses: [v30], upward_exposed: [v30], params_defs: [v30]
// [Asm] # live_in: [v11, v10, v13, zero, v30, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v31, v9]
// [Asm] # block parameters: [v30]
// [Asm] .loop1.181_10:
// [Asm] # control
// [Asm]   mv v31, v30  # live: [v11, v10, v13, zero, v8, v12, v31, v9]
// [Asm] 
// [Asm] # block info: defs: [v32, v8], uses: [v11, v10, v13, v8, v32, v12, v9], upward_exposed: [v11, v10, v12, v9, v13, v8], params_defs: [v31]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v31, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v31]
// [Asm] .loop1.181_6:
// [Asm]   addi v32, v8, -1  # live: [v11, v10, v13, zero, v32, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v32  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop1.181_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v44], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8]
// [Asm] # block parameters: []
// [Asm] .loop1.181_16:
// [Asm] # control
// [Asm]   mv v44, zero  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v44], upward_exposed: [v44], params_defs: [v44]
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v44, v9, zero, v23, v27, v20, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v45, v8]
// [Asm] # block parameters: [v44]
// [Asm] .loop1.181_17:
// [Asm] # control
// [Asm]   mv v45, v44  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v45, v8]
// [Asm] 
// [Asm] # block info: defs: [v46, v22], uses: [v25, v46, v21, v26, v23, v22, v20, v27, v24, v28], upward_exposed: [v25, v21, v26, v23, v22, v20, v27, v24, v28], params_defs: [v45]
// [Asm] # live_in: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v20, v27, v23, v45, v8], live_out: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] # block parameters: [v45]
// [Asm] .loop1.181_13:
// [Asm]   addi v46, v22, -1  # live: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] # control
// [Asm]   mv v20, v20  # live: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v21, v21  # live: [v25, v11, v46, v21, v10, v26, v13, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v22, v46  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v23, v23  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v24, v24  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v25, v25  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v26, v26  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v27, v27  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   mv v28, v28  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm]   j .loop1.181_7  # live: [v25, v11, v21, v10, v26, v13, v22, v24, v12, v28, v9, zero, v23, v27, v20, v8]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(3), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(3), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("mul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%9)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%7)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%4)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f5, mref=m0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.183
// [Main]   .type main.183, @function
// [Main] # leaf false
// [Main] main.183:
// [Main] .main.183_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, s0
// [Main]   call make_arr.185
// [Main]   mv s1, a0
// [Main]   li a0, 3
// [Main]   li a1, 2
// [Main]   mv a2, s0
// [Main]   call make_arr.185
// [Main]   mv s2, a0
// [Main]   li a0, 2
// [Main]   mv a1, a0
// [Main]   mv a2, s0
// [Main]   call make_arr.185
// [Main]   mv s0, a0
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   li a1, 3
// [Main]   mv a2, a0
// [Main]   mv a3, s1
// [Main]   mv a4, s2
// [Main]   mv a5, s0
// [Main]   call mul.182
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s0)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl make_arr.185
// [Main]   .type make_arr.185, @function
// [Main] # leaf false
// [Main] make_arr.185:
// [Main] .make_arr.185_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a3, a1
// [Main]   mv a1, a2
// [Main]   slliw a1, a0, 3
// [Main]   sub s0, s11, a1
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a0
// [Main]   addi a0, a0, -1
// [Main]   mv a1, a3
// [Main]   mv a2, s0
// [Main]   call init_arr.184
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr.184
// [Main]   .type init_arr.184, @function
// [Main] # leaf false
// [Main] init_arr.184:
// [Main] .init_arr.184_5:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main] 
// [Main] .init_arr.184_0:
// [Main]   blt a0, zero, .init_arr.184_2
// [Main] 
// [Main] .init_arr.184_1:
// [Main]   slliw a3, a1, 3
// [Main]   sub a3, s11, a3
// [Main]   andi s11, a3, -8
// [Main]   slliw a4, a0, 3
// [Main]   add a4, a2, a4
// [Main]   sd a3, 0(a4)
// [Main]   addi a0, a0, -1
// [Main]   j .init_arr.184_0
// [Main] 
// [Main] .init_arr.184_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr.184_3:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.183
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl mul.182
// [Main]   .type mul.182, @function
// [Main] # leaf false
// [Main] mul.182:
// [Main] .mul.182_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, a0, -1
// [Main]   call loop1.181
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop1.181
// [Main]   .type loop1.181, @function
// [Main] # leaf true
// [Main] loop1.181:
// [Main] .loop1.181_5:
// [Main]   addi sp, sp, -48
// [Main]   sd s0, 0(sp)
// [Main]   sd s1, 8(sp)
// [Main]   sd s2, 16(sp)
// [Main]   sd s3, 24(sp)
// [Main]   sd s4, 32(sp)
// [Main]   mv t0, a0
// [Main]   mv a7, a1
// [Main]   mv a6, a2
// [Main]   mv a2, a3
// [Main]   mv a1, a4
// [Main]   mv a0, a5
// [Main]   mv t2, t0
// [Main]   mv a3, a7
// [Main]   mv a4, a6
// [Main]   mv a7, a1
// [Main]   mv a1, a0
// [Main] 
// [Main] .loop1.181_0:
// [Main]   blt t2, zero, .loop1.181_2
// [Main] 
// [Main] .loop1.181_1:
// [Main]   addi a6, a4, -1
// [Main]   slliw a0, t2, 3
// [Main]   add a5, a1, a0
// [Main]   ld a5, 0(a5)
// [Main]   add a0, a2, a0
// [Main]   ld a0, 0(a0)
// [Main] 
// [Main] .loop1.181_12:
// [Main]   mv t1, a5
// [Main]   mv t0, a0
// [Main] 
// [Main] .loop1.181_7:
// [Main]   blt a6, zero, .loop1.181_9
// [Main] 
// [Main] .loop1.181_8:
// [Main]   addi a0, a3, -1
// [Main] 
// [Main] .loop1.181_19:
// [Main]   mv s0, t2
// [Main]   mv t3, a0
// [Main]   mv s1, a2
// [Main]   mv s3, a7
// [Main]   mv s2, a1
// [Main] 
// [Main] .loop1.181_14:
// [Main]   blt t3, zero, .loop1.181_16
// [Main] 
// [Main] .loop1.181_15:
// [Main]   slliw a0, a6, 3
// [Main]   add t4, t1, a0
// [Main]   fld fa0, 0(t4)
// [Main]   slliw t4, t3, 3
// [Main]   add s4, t0, t4
// [Main]   fld fa1, 0(s4)
// [Main]   add t4, s3, t4
// [Main]   ld t4, 0(t4)
// [Main]   add t4, t4, a0
// [Main]   fld fa2, 0(t4)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   add a0, a5, a0
// [Main]   fsd fa0, 0(a0)
// [Main]   addi a0, t3, -1
// [Main]   mv t3, a0
// [Main]   j .loop1.181_14
// [Main] 
// [Main] .loop1.181_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.181_3:
// [Main]   ld s0, 0(sp)
// [Main]   ld s1, 8(sp)
// [Main]   ld s2, 16(sp)
// [Main]   ld s3, 24(sp)
// [Main]   ld s4, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .loop1.181_9:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.181_10:
// [Main] 
// [Main] .loop1.181_6:
// [Main]   addi a0, t2, -1
// [Main]   mv t2, a0
// [Main]   j .loop1.181_0
// [Main] 
// [Main] .loop1.181_16:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop1.181_17:
// [Main] 
// [Main] .loop1.181_13:
// [Main]   addi a0, a6, -1
// [Main]   mv a6, a0
// [Main]   j .loop1.181_7
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.183
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f5, args=[Int32(val=2), Int32(val=3), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f5, args=[Int32(val=3), Int32(val=2), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Array(elem=Array(elem=Double)), f=f5, args=[Int32(val=2), Int32(val=2), Mem(fref=f6, mref=m0)])
// [Wasm] Get Local name Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%4), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%6), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%8), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%1), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%2), index=2, width=@ptr))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=2), Int32(val=3), Int32(val=2), Insn(iref=%1), Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%29), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=0, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%34), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%35)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%36)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%39), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%40)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%41)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Insn(iref=%3), index=1, width=@ptr))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%44), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%45)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%46)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Mem(fref=f6, mref=m0) -> $f6.m0
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main.183 to wasm
// [Wasm] Lowering function init_arr.184
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Zero])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr), val=Mem(fref=f4, mref=m0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f4, fpref=$f.0), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function init_arr.184 to wasm
// [Wasm] Lowering function make_arr.185
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m0, fills=[Init(val=FnParam(fref=f5, fpref=$f.2))])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[Insn(iref=%1), FnParam(fref=f5, fpref=$f.1), Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f5, mref=m0)])
// [Wasm] Get Local name Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f5, mref=m0) -> $f5.m0
// [Wasm] Lowered function make_arr.185 to wasm
// [Wasm] Lowering function loop1.181
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b14, bpref=$b.7), offset=BlockParam(bref=b14, bpref=$b.1), width=@64))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b14, bpref=$b.8), offset=BlockParam(bref=b14, bpref=$b.2), width=@64))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b14, bpref=$b.4), offset=BlockParam(bref=b14, bpref=$b.2), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%14), offset=BlockParam(bref=b14, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%13), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%12), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=BlockParam(bref=b14, bpref=$b.6), offset=BlockParam(bref=b14, bpref=$b.1), width=@64), val=Insn(iref=%17))
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b14, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b14, args=[BlockParam(bref=b14, bpref=$b.0), BlockParam(bref=b14, bpref=$b.1), Insn(iref=%19), BlockParam(bref=b14, bpref=$b.3), BlockParam(bref=b14, bpref=$b.4), BlockParam(bref=b14, bpref=$b.5), BlockParam(bref=b14, bpref=$b.6), BlockParam(bref=b14, bpref=$b.7), BlockParam(bref=b14, bpref=$b.8)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b7, args=[BlockParam(bref=b7, bpref=$b.0), BlockParam(bref=b7, bpref=$b.1), Insn(iref=%10), BlockParam(bref=b7, bpref=$b.3), BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.5), BlockParam(bref=b7, bpref=$b.6), BlockParam(bref=b7, bpref=$b.7), BlockParam(bref=b7, bpref=$b.8)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.6) -> $b7.$b.6
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.6) -> $b7.$b.6
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.7) -> $b7.$b.7
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.7) -> $b7.$b.7
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.8) -> $b7.$b.8
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.8) -> $b7.$b.8
// [Wasm] Lowering control Jump(target=b13, args=[BlockParam(bref=b17, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b17, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b14, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Branch(cond=Insn(iref=%11), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b18, args=[BlockParam(bref=b7, bpref=$b.0), BlockParam(bref=b7, bpref=$b.2), Insn(iref=%8), BlockParam(bref=b7, bpref=$b.3), BlockParam(bref=b7, bpref=$b.4), BlockParam(bref=b7, bpref=$b.5), BlockParam(bref=b7, bpref=$b.6), BlockParam(bref=b7, bpref=$b.7), BlockParam(bref=b7, bpref=$b.8)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.6) -> $b7.$b.6
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.7) -> $b7.$b.7
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.8) -> $b7.$b.8
// [Wasm] Get Local name BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b7, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b19, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%6), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b10, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b10, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b7, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b8, t_args=[], f=b9, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b11, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), Insn(iref=%2), Insn(iref=%2), Insn(iref=%4)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.6) -> $b7.$b.6
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.7) -> $b7.$b.7
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b7, bpref=$b.8) -> $b7.$b.8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b12, args=[])
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b7, bpref=$b.1) -> $b7.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.0) -> $b7.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local BlockParam(bref=b14, bpref=$b.8) -> $b14.$b.8
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b14, bpref=$b.0) -> $b14.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local BlockParam(bref=b14, bpref=$b.7) -> $b14.$b.7
// [Wasm] Local BlockParam(bref=b7, bpref=$b.6) -> $b7.$b.6
// [Wasm] Local BlockParam(bref=b14, bpref=$b.3) -> $b14.$b.3
// [Wasm] Local BlockParam(bref=b7, bpref=$b.3) -> $b7.$b.3
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b14, bpref=$b.1) -> $b14.$b.1
// [Wasm] Local BlockParam(bref=b7, bpref=$b.2) -> $b7.$b.2
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local BlockParam(bref=b14, bpref=$b.6) -> $b14.$b.6
// [Wasm] Local BlockParam(bref=b7, bpref=$b.5) -> $b7.$b.5
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b14, bpref=$b.4) -> $b14.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local BlockParam(bref=b14, bpref=$b.2) -> $b14.$b.2
// [Wasm] Local BlockParam(bref=b7, bpref=$b.8) -> $b7.$b.8
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local BlockParam(bref=b7, bpref=$b.7) -> $b7.$b.7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local BlockParam(bref=b14, bpref=$b.5) -> $b14.$b.5
// [Wasm] Local BlockParam(bref=b7, bpref=$b.4) -> $b7.$b.4
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function loop1.181 to wasm
// [Wasm] Lowering function mul.182
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f3, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Insn(iref=%0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2), FnParam(fref=f3, fpref=$f.3), FnParam(fref=f3, fpref=$f.4), FnParam(fref=f3, fpref=$f.5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function mul.182 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: loop3.1 true
// [KnfOpt] func_tre: loop2.21 true
// [KnfOpt] func_tre: loop1.34 true
// [KnfOpt] func_tre: mul.47 false
// [KnfOpt] func_tre: main.57 false
// [KnfOpt] func_tre: init_arr.61 true
// [KnfOpt] func_tre: make_arr.71 false
// [KnfOpt] freq: {loop3.1: Many(2), loop2.21: Many(2), loop1.34: Many(2), mul.47: Once, main.57: Once, init_arr.61: Many(2), make_arr.71: Many(3)}
// [KnfOpt] Inline threshold 29
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision loop3.1 rejected
// [KnfOpt] Inline threshold 29
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision loop3.1 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision loop2.21 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision loop2.21 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision loop1.34 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision loop1.34 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_arr.61 rejected
// [KnfOpt] Inline threshold 15
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision init_arr.61 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 9
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision make_arr.71 rejected
// [KnfOpt] Inline threshold 7
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision mul.47 rejected
// [KnfOpt] Numbers of let rec: 7 7 0
// [KnfOpt] hoist: _9
// [KnfOpt] hoist: _10
// [KnfOpt] hoist: _12
// [KnfOpt] hoist: _189
// [KnfOpt] hoist: _190
// [KnfOpt] hoist: _191
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f4, args=[Insn(iref=%3), FnParam(fref=f4, fpref=$f.1), FnParam(fref=f4, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %4: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), Insn(iref=%3), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5), FnParam(fref=f1, fpref=$f.6), FnParam(fref=f1, fpref=$f.7), FnParam(fref=f1, fpref=$f.8)])
// [CoreOpt] eliminated tail rec call %7: Call(ty=Unit, f=f2, args=[Insn(iref=%6), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%8), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5), FnParam(fref=f0, fpref=$f.6), FnParam(fref=f0, fpref=$f.7), FnParam(fref=f0, fpref=$f.8)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Once, f1: Once, f5: Multiple, f2: Once, f3: Once, f14: Once, f0: Once})
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%2) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%5) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] loop2.180 is inlining Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), BlockParam(bref=b0, bpref=$b.6), BlockParam(bref=b0, bpref=$b.7), BlockParam(bref=b0, bpref=$b.8)])
// [CoreOpt] shifted callee .fn loop3.179 #f0 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %4: bool = le(0, $b7.2)
// [CoreOpt]     br %4 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %5: double = load double offset($b7.7, $b7.1 * @64)
// [CoreOpt]     let %6: double = load double offset($b7.8, $b7.2 * @64)
// [CoreOpt]     let %7: array[double] = load array[double] offset($b7.4, $b7.2 * @ptr)
// [CoreOpt]     let %8: double = load double offset(%7, $b7.1 * @64)
// [CoreOpt]     let %9: double = mul(%6, %8)
// [CoreOpt]     let %10: double = add(%5, %9)
// [CoreOpt]     let _ = store double offset($b7.6, $b7.1 * @64) <- %10
// [CoreOpt]     let %12: int32 = sub($b7.2, 1)
// [CoreOpt]     jump b7($b7.0, $b7.1, %12, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] loop1.181 is inlining Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%1), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5), Insn(iref=%2), Insn(iref=%3), Insn(iref=%4)])
// [CoreOpt] shifted callee .fn loop2.180 #f1 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) -> unit
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b12 {
// [CoreOpt]   .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %7: bool = le(0, $b7.2)
// [CoreOpt]     br %7 b8() b9()
// [CoreOpt]   }
// [CoreOpt]   .bb #b8 () {
// [CoreOpt]     let %8: int32 = sub($b7.1, 1)
// [CoreOpt]     jump b19()
// [CoreOpt]   }
// [CoreOpt]   .bb #b9 () {
// [CoreOpt]     jump b10(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b10 (unit) {
// [CoreOpt]     return $b10.0
// [CoreOpt]   }
// [CoreOpt]   .loop #b11 pre #Some(b12) header #b7 {
// [CoreOpt]     .block #b8
// [CoreOpt]     .block #b9
// [CoreOpt]     .block #b10
// [CoreOpt]   }
// [CoreOpt]   .bb #b12 () {
// [CoreOpt]     jump b11($f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b13 (unit) {
// [CoreOpt]     let %10: int32 = sub($b7.2, 1)
// [CoreOpt]     jump b7($b7.0, $b7.1, %10, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b14 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
// [CoreOpt]     let %11: bool = le(0, $b14.2)
// [CoreOpt]     br %11 b15() b16()
// [CoreOpt]   }
// [CoreOpt]   .bb #b15 () {
// [CoreOpt]     let %12: double = load double offset($b14.7, $b14.1 * @64)
// [CoreOpt]     let %13: double = load double offset($b14.8, $b14.2 * @64)
// [CoreOpt]     let %14: array[double] = load array[double] offset($b14.4, $b14.2 * @ptr)
// [CoreOpt]     let %15: double = load double offset(%14, $b14.1 * @64)
// [CoreOpt]     let %16: double = mul(%13, %15)
// [CoreOpt]     let %17: double = add(%12, %16)
// [CoreOpt]     let _ = store double offset($b14.6, $b14.1 * @64) <- %17
// [CoreOpt]     let %19: int32 = sub($b14.2, 1)
// [CoreOpt]     jump b14($b14.0, $b14.1, %19, $b14.3, $b14.4, $b14.5, $b14.6, $b14.7, $b14.8)
// [CoreOpt]   }
// [CoreOpt]   .bb #b16 () {
// [CoreOpt]     jump b17(())
// [CoreOpt]   }
// [CoreOpt]   .bb #b17 (unit) {
// [CoreOpt]     jump b13($b17.0)
// [CoreOpt]   }
// [CoreOpt]   .loop #b18 pre #Some(b19) header #b14 {
// [CoreOpt]     .block #b15
// [CoreOpt]     .block #b16
// [CoreOpt]     .block #b17
// [CoreOpt]   }
// [CoreOpt]   .bb #b19 () {
// [CoreOpt]     jump b18($b7.0, $b7.2, %8, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] Remove dead function: f0
// [CoreOpt] LVN subst Insn(iref=%3) with Insn(iref=%2)
// [CoreOpt2] LVN subst Insn(iref=%31) with Insn(iref=%33)
// [CoreOpt2] LVN subst Insn(iref=%28) with Insn(iref=%34)
// [CoreOpt2] LVN subst Insn(iref=%24) with Insn(iref=%34)
// [CoreOpt2] LVN subst Insn(iref=%36) with Insn(iref=%37)
