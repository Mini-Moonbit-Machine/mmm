// [Asm] pre_assigned_registers: Insn(iref=%15) -> v21, Insn(iref=%41) -> v47, Insn(iref=%33) -> v39, Insn(iref=%8) -> v14, Insn(iref=%10) -> v16, Insn(iref=%27) -> v33, Insn(iref=%50) -> v56, Insn(iref=%14) -> v20, Insn(iref=%25) -> v31, Insn(iref=%39) -> v45, Insn(iref=%51) -> v57, Insn(iref=%4) -> v10, Mem(fref=f4, mref=m2) -> v4, Insn(iref=%49) -> v55, Insn(iref=%52) -> fv58, Insn(iref=%42) -> fv48, Insn(iref=%44) -> v50, Insn(iref=%32) -> v38, Insn(iref=%1) -> v7, Insn(iref=%11) -> v17, Insn(iref=%26) -> v32, Insn(iref=%6) -> v12, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%31) -> v37, Insn(iref=%35) -> v41, Mem(fref=f4, mref=m3) -> v5, Insn(iref=%28) -> v34, Insn(iref=%38) -> v44, Insn(iref=%46) -> v52, Insn(iref=%9) -> v15, Insn(iref=%16) -> v22, Insn(iref=%24) -> v30, Insn(iref=%37) -> fv43, Insn(iref=%53) -> v59, Insn(iref=%45) -> v51, Insn(iref=%29) -> v35, Insn(iref=%54) -> v60, Insn(iref=%5) -> v11, Insn(iref=%47) -> fv53, Insn(iref=%19) -> v25, Insn(iref=%0) -> v6, Insn(iref=%3) -> v9, Insn(iref=%18) -> v24, Insn(iref=%13) -> v19, Insn(iref=%7) -> v13, Insn(iref=%22) -> v28, Insn(iref=%17) -> v23, Insn(iref=%23) -> v29, Insn(iref=%48) -> v54, Insn(iref=%2) -> v8, Insn(iref=%20) -> v26, Insn(iref=%43) -> v49, Insn(iref=%30) -> v36, Mem(fref=f4, mref=m1) -> v3, Self(fref=f4) -> v0, Insn(iref=%21) -> v27, Insn(iref=%34) -> v40, Insn(iref=%36) -> v42, Insn(iref=%40) -> v46, Insn(iref=%12) -> v18
// [Asm] defs: []
// [Asm] live_set: [zero, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [fv137]
// [Asm] live_set: [zero, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv137 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v133]
// [Asm] live_set: [v2, zero, v133, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, s11, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [v131]
// [Asm] live_set: [v2, zero, a0, s11, v131, v3]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, a0, a1, s11, v3]
// [Asm] move_origin: [v131]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, a2, a1, s11, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v128]
// [Asm] live_set: [v2, zero, v4, s11, v128, v3]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v11, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v4, s11, v3]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [v126]
// [Asm] live_set: [v2, zero, a0, v126, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, a0, v4, a1, s11, v3]
// [Asm] move_origin: [v126]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, a0, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v123]
// [Asm] live_set: [v5, zero, v123, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v5, v14, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v14, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v3]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: [v121]
// [Asm] live_set: [v5, v121, zero, a0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v121 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v3]
// [Asm] move_origin: [v121]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v4, a2, a1, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v5, v16, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v118]
// [Asm] live_set: [v118, v5, v16, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v118 is X
// [Asm] defs: [fv119]
// [Asm] live_set: [v5, v16, zero, v4, fv119, v3]
// [Asm] move_origin: []
// [Asm] defined: fv119 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v115]
// [Asm] live_set: [v115, v5, v18, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v115 is X
// [Asm] defs: [fv116]
// [Asm] live_set: [v5, v18, zero, fv116, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv116 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v112, v5, zero, v20, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [fv113]
// [Asm] live_set: [v5, zero, fv113, v20, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv113 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v5, zero, v22, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v5, zero, v22, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: [fv110]
// [Asm] live_set: [v5, zero, fv110, v22, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv110 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v5, zero, v4, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v5, zero, v4, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [fv107]
// [Asm] live_set: [v5, zero, v4, fv107, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: fv107 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v5, zero, v26, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v103]
// [Asm] live_set: [v5, zero, v26, v103, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v103 is X
// [Asm] defs: [fv104]
// [Asm] live_set: [v5, zero, v26, v4, fv104, v3]
// [Asm] move_origin: []
// [Asm] defined: fv104 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v4, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v5, zero, v4, v28, v100, v3]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [fv101]
// [Asm] live_set: [v5, zero, v4, fv101, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: fv101 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v30, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v5, zero, v97, v30, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [fv98]
// [Asm] live_set: [fv98, v5, zero, v30, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv98 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v4, v32, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v94, v5, zero, v4, v32, v3]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: [fv95]
// [Asm] live_set: [v5, zero, v4, v32, fv95, v3]
// [Asm] move_origin: []
// [Asm] defined: fv95 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v5, zero, v4, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v91]
// [Asm] live_set: [v5, v91, zero, v4, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v91 is X
// [Asm] defs: [fv92]
// [Asm] live_set: [v5, fv92, zero, v4, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: fv92 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v36, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v5, zero, v36, v88, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [fv89]
// [Asm] live_set: [v5, zero, v36, fv89, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv89 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v38]
// [Asm] live_set: [v5, zero, v4, v38, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v5, zero, v85, v4, v38, v3]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [fv86]
// [Asm] live_set: [fv86, v5, zero, v4, v38, v3]
// [Asm] move_origin: []
// [Asm] defined: fv86 is F
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v83]
// [Asm] live_set: [v5, zero, v4, v83, v3]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: []
// [Asm] live_set: [v40, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v4, v3]
// [Asm] move_origin: [v40]
// [Asm] defined: a0 is X
// [Asm] defs: [v80]
// [Asm] live_set: [v5, zero, a0, v4, v80, v3]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v4, a1, v3]
// [Asm] move_origin: [v80]
// [Asm] defined: a1 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v5, zero, a0, v4, v81, a1, v3]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, a2, v4, a1, v3]
// [Asm] move_origin: [v81]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, v4, a1, a3]
// [Asm] move_origin: [v3]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v4]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v5, a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v41 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v42]
// [Asm] live_set: [v5, zero, v42]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [v5, zero, fv43]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v44, zero]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v44, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: [v44]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v45 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v47, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [fv48]
// [Asm] live_set: [fv48, v5, zero]
// [Asm] move_origin: []
// [Asm] defined: fv48 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v49, zero]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v49, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: [v49]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v50]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v51]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v51 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v52]
// [Asm] live_set: [v5, v52, zero]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [fv53]
// [Asm] live_set: [v5, fv53, zero]
// [Asm] move_origin: []
// [Asm] defined: fv53 is F
// [Asm] defs: [v54]
// [Asm] live_set: [v5, zero, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v54]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: [v54]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v55]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v56]
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v57]
// [Asm] live_set: [v57, zero]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [fv58]
// [Asm] live_set: [zero, fv58]
// [Asm] move_origin: []
// [Asm] defined: fv58 is F
// [Asm] defs: [v59]
// [Asm] live_set: [v59, zero]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: []
// [Asm] live_set: [v59, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v59]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v60]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main85l3_4"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r46 [label="v97 ← a1", color=green];
// [Asm]   r33 [label="v18 ← a0", color=green];
// [Asm]   r59 [label="v41 ← a0", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r26 [label="v5 ← s3", color=green];
// [Asm]   r44 [label="v100 ← a1", color=green];
// [Asm]   r53 [label="v38 ← a0", color=green];
// [Asm]   r56 [label="v40 ← a0", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r5 [label="v8 ← a0", color=green];
// [Asm]   r54 [label="v85 ← a1", color=green];
// [Asm]   r24 [label="v126 ← a1", color=green];
// [Asm]   r43 [label="v28 ← a0", color=green];
// [Asm]   r31 [label="v16 ← a0", color=green];
// [Asm]   r39 [label="v24 ← a0", color=green];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r52 [label="v88 ← a1", color=green];
// [Asm]   r65 [label="v49 ← a0", color=green];
// [Asm]   r20 [label="v9 ← a0", color=green];
// [Asm]   r61 [label="v44 ← a0", color=green];
// [Asm]   r23 [label="v11 ← a0", color=green];
// [Asm]   r3 [label="v3 ← s1", color=green];
// [Asm]   r67 [label="v51 ← a0", color=green];
// [Asm]   r27 [label="v123 ← a0", color=green];
// [Asm]   r62 [label="v45 ← a0", color=green];
// [Asm]   r40 [label="v106 ← a1", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r58 [label="v81 ← a2", color=green];
// [Asm]   r34 [label="v115 ← a1", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r51 [label="v36 ← a0", color=green];
// [Asm]   r55 [label="v83 ← a0", color=green];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r21 [label="v4 ← s2", color=green];
// [Asm]   r60 [label="v42 ← a0", color=green];
// [Asm]   r73 [label="v59 ← a0", color=green];
// [Asm]   r38 [label="v109 ← a1", color=green];
// [Asm]   r72 [label="v57 ← a0", color=green];
// [Asm]   r47 [label="v32 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r42 [label="v103 ← a1", color=green];
// [Asm]   r4 [label="v133 ← a0", color=green];
// [Asm]   r29 [label="v121 ← a1", color=green];
// [Asm]   r35 [label="v20 ← a0", color=green];
// [Asm]   r7 [label="v131 ← a1", color=green];
// [Asm]   r64 [label="v47 ← a0", color=green];
// [Asm]   r8 [label="a1", color=blue];
// [Asm]   r36 [label="v112 ← a1", color=green];
// [Asm]   r66 [label="v50 ← a0", color=green];
// [Asm]   r32 [label="v118 ← a1", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r49 [label="v34 ← a0", color=green];
// [Asm]   r57 [label="v80 ← a1", color=green];
// [Asm]   r74 [label="v60 ← a0", color=green];
// [Asm]   r68 [label="v52 ← a0", color=green];
// [Asm]   r70 [label="v55 ← a0", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r48 [label="v94 ← a1", color=green];
// [Asm]   r37 [label="v22 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r41 [label="v26 ← a0", color=green];
// [Asm]   r28 [label="v14 ← a0", color=green];
// [Asm]   r71 [label="v56 ← a0", color=green];
// [Asm]   r69 [label="v54 ← a0", color=green];
// [Asm]   r22 [label="v128 ← a0", color=green];
// [Asm]   r50 [label="v91 ← a1", color=green];
// [Asm]   r30 [label="v15 ← a0", color=green];
// [Asm]   r45 [label="v30 ← a0", color=green];
// [Asm]   r25 [label="v12 ← a0", color=green];
// [Asm]   r63 [label="v46 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r21 -- r24;
// [Asm]   r26 -- r42;
// [Asm]   r26 -- r46;
// [Asm]   r3 -- r52;
// [Asm]   r26 -- r39;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r57;
// [Asm]   r26 -- r57;
// [Asm]   r3 -- r53;
// [Asm]   r21 -- r38;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r42;
// [Asm]   r26 -- r44;
// [Asm]   r1 -- r45;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r9 -- r26;
// [Asm]   r1 -- r52;
// [Asm]   r18 -- r21;
// [Asm]   r26 -- r43;
// [Asm]   r0 -- r23;
// [Asm]   r3 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r33;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r68;
// [Asm]   r1 -- r50;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r48;
// [Asm]   r26 -- r64;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r26 -- r48;
// [Asm]   r26 -- r71;
// [Asm]   r0 -- r26;
// [Asm]   r21 -- r33;
// [Asm]   r8 -- r16;
// [Asm]   r1 -- r48;
// [Asm]   r1 -- r64;
// [Asm]   r3 -- r39;
// [Asm]   r21 -- r48;
// [Asm]   r0 -- r9;
// [Asm]   r26 -- r70;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r41 -- r42;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r21 -- r50;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r51;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r39 -- r40;
// [Asm]   r3 -- r49;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r21 -- r39;
// [Asm]   r12 -- r21;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r35;
// [Asm]   r3 -- r46;
// [Asm]   r21 -- r46;
// [Asm]   r0 -- r18;
// [Asm]   r51 -- r52;
// [Asm]   r26 -- r34;
// [Asm]   r26 -- r38;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r53 -- r54;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r14 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r26 -- r63;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r1 -- r55;
// [Asm]   r21 -- r28;
// [Asm]   r47 -- r48;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r22;
// [Asm]   r0 -- r14;
// [Asm]   r21 -- r57;
// [Asm]   r1 -- r13;
// [Asm]   r21 -- r34;
// [Asm]   r21 -- r56;
// [Asm]   r2 -- r11;
// [Asm]   r26 -- r56;
// [Asm]   r0 -- r19;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r58;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r3 -- r50;
// [Asm]   r6 -- r19;
// [Asm]   r3 -- r57;
// [Asm]   r26 -- r68;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r26 -- r54;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r1 -- r29;
// [Asm]   r6 -- r57;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r1 -- r72;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r1 -- r61;
// [Asm]   r2 -- r17;
// [Asm]   r26 -- r50;
// [Asm]   r26 -- r61;
// [Asm]   r8 -- r26;
// [Asm]   r26 -- r31;
// [Asm]   r2 -- r9;
// [Asm]   r26 -- r52;
// [Asm]   r43 -- r44;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r26 -- r53;
// [Asm]   r1 -- r54;
// [Asm]   r26 -- r32;
// [Asm]   r26 -- r65;
// [Asm]   r9 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r21 -- r43;
// [Asm]   r26 -- r33;
// [Asm]   r0 -- r13;
// [Asm]   r21 -- r35;
// [Asm]   r17 -- r21;
// [Asm]   r26 -- r55;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r71;
// [Asm]   r26 -- r59;
// [Asm]   r1 -- r37;
// [Asm]   r26 -- r45;
// [Asm]   r2 -- r15;
// [Asm]   r26 -- r40;
// [Asm]   r3 -- r43;
// [Asm]   r21 -- r53;
// [Asm]   r10 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r37 -- r38;
// [Asm]   r0 -- r17;
// [Asm]   r3 -- r56;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r26 -- r58;
// [Asm]   r1 -- r56;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r63;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r1 -- r69;
// [Asm]   r26 -- r66;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r16;
// [Asm]   r3 -- r24;
// [Asm]   r19 -- r21;
// [Asm]   r21 -- r54;
// [Asm]   r3 -- r18;
// [Asm]   r1 -- r62;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r1 -- r67;
// [Asm]   r16 -- r17;
// [Asm]   r1 -- r70;
// [Asm]   r1 -- r46;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r26 -- r41;
// [Asm]   r26 -- r49;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r26 -- r69;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r21;
// [Asm]   r0 -- r11;
// [Asm]   r1 -- r49;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r44;
// [Asm]   r21 -- r36;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r21 -- r37;
// [Asm]   r2 -- r23;
// [Asm]   r3 -- r58;
// [Asm]   r6 -- r58;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r26 -- r67;
// [Asm]   r26 -- r62;
// [Asm]   r1 -- r58;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r26;
// [Asm]   r2 -- r18;
// [Asm]   r9 -- r15;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r53;
// [Asm]   r21 -- r40;
// [Asm]   r26 -- r36;
// [Asm]   r13 -- r26;
// [Asm]   r17 -- r26;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r3 -- r47;
// [Asm]   r1 -- r60;
// [Asm]   r6 -- r16;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r1 -- r65;
// [Asm]   r16 -- r26;
// [Asm]   r19 -- r26;
// [Asm]   r21 -- r47;
// [Asm]   r1 -- r66;
// [Asm]   r21 -- r44;
// [Asm]   r6 -- r26;
// [Asm]   r26 -- r47;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r26 -- r51;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r21 -- r52;
// [Asm]   r26 -- r35;
// [Asm]   r21 -- r31;
// [Asm]   r15 -- r17;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r59;
// [Asm]   r21 -- r25;
// [Asm]   r26 -- r30;
// [Asm]   r1 -- r74;
// [Asm]   r3 -- r55;
// [Asm]   r21 -- r42;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r21 -- r49;
// [Asm]   r21 -- r51;
// [Asm]   r6 -- r17;
// [Asm]   r21 -- r26;
// [Asm]   r3 -- r14;
// [Asm]   r11 -- r26;
// [Asm]   r21 -- r41;
// [Asm]   r8 -- r58;
// [Asm]   r9 -- r16;
// [Asm]   r0 -- r12;
// [Asm]   r26 -- r37;
// [Asm]   r3 -- r36;
// [Asm]   r26 -- r29;
// [Asm]   r1 -- r73;
// [Asm]   r31 -- r32;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r21 -- r55;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r49 -- r50;
// [Asm]   r10 -- r21;
// [Asm]   r26 -- r60;
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r26;
// [Asm]   r3 -- r44;
// [Asm]   comment = "0:v2-> 1:zero-> 2:s11-> 3:v3-> 4:v133-> 5:v8-> 6:a0-> 7:v131-> 8:a1-> 9:a2-> 15:a3-> 16:a4-> 17:a5-> 21:v4-> 26:v5-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 18:a6-> 19:a7-> 24:v126-> 58:v81-> 22:v128-> 23:v11-> 25:v12-> 29:v121-> 57:v80-> 20:v9-> 27:v123-> 28:v14-> 30:v15-> 31:v16-> 32:v118-> 33:v18-> 34:v115-> 35:v20-> 36:v112-> 37:v22-> 38:v109-> 39:v24-> 40:v106-> 41:v26-> 42:v103-> 43:v28-> 44:v100-> 45:v30-> 46:v97-> 47:v32-> 48:v94-> 49:v34-> 50:v91-> 51:v36-> 52:v88-> 53:v38-> 54:v85-> 55:v83-> 56:v40-> 59:v41-> 60:v42-> 61:v44-> 62:v45-> 63:v46-> 64:v47-> 65:v49-> 66:v50-> 67:v51-> 68:v52-> 69:v54-> 70:v55-> 71:v56-> 72:v57-> 73:v59-> 74:v60"
// [Asm]   comment = "v2<-s0;v97<-a1;v18<-a0;v41<-a0;v5<-s3;v100<-a1;v38<-a0;v40<-a0;v8<-a0;v85<-a1;v126<-a1;v28<-a0;v16<-a0;v24<-a0;v88<-a1;v49<-a0;v9<-a0;v44<-a0;v11<-a0;v3<-s1;v51<-a0;v123<-a0;v45<-a0;v106<-a1;v81<-a2;v115<-a1;v36<-a0;v83<-a0;v4<-s2;v42<-a0;v59<-a0;v109<-a1;v57<-a0;v32<-a0;v103<-a1;v133<-a0;v121<-a1;v20<-a0;v131<-a1;v47<-a0;v112<-a1;v50<-a0;v118<-a1;v34<-a0;v80<-a1;v60<-a0;v52<-a0;v55<-a0;v94<-a1;v22<-a0;v26<-a0;v14<-a0;v56<-a0;v54<-a0;v128<-a0;v91<-a1;v15<-a0;v30<-a0;v12<-a0;v46<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main85l3_4"];
// [Asm]   r0 [label="fv137 ← fa0", color=green];
// [Asm]   r33 [label="fv48 ← fa0", color=green];
// [Asm]   r9 [label="ft8", color=blue];
// [Asm]   r26 [label="fv101 ← fa0", color=green];
// [Asm]   r6 [label="ft5", color=blue];
// [Asm]   r13 [label="fa1", color=blue];
// [Asm]   r4 [label="ft3", color=blue];
// [Asm]   r29 [label="fv92 ← fa0", color=green];
// [Asm]   r35 [label="fv58 ← fa0", color=green];
// [Asm]   r7 [label="ft6", color=blue];
// [Asm]   r10 [label="ft9", color=blue];
// [Asm]   r8 [label="ft7", color=blue];
// [Asm]   r5 [label="ft4", color=blue];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r32 [label="fv43 ← fa0", color=green];
// [Asm]   r24 [label="fv107 ← fa0", color=green];
// [Asm]   r31 [label="fv86 ← fa0", color=green];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r12 [label="fa0", color=blue];
// [Asm]   r20 [label="fv119 ← fa0", color=green];
// [Asm]   r23 [label="fv110 ← fa0", color=green];
// [Asm]   r3 [label="ft2", color=blue];
// [Asm]   r27 [label="fv98 ← fa0", color=green];
// [Asm]   r1 [label="ft0", color=blue];
// [Asm]   r28 [label="fv95 ← fa0", color=green];
// [Asm]   r11 [label="ft10", color=blue];
// [Asm]   r34 [label="fv53 ← fa0", color=green];
// [Asm]   r22 [label="fv113 ← fa0", color=green];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r30 [label="fv89 ← fa0", color=green];
// [Asm]   r25 [label="fv104 ← fa0", color=green];
// [Asm]   r2 [label="ft1", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r21 [label="fv116 ← fa0", color=green];
// [Asm]   comment = "0:fv137-> 1:ft0-> 2:ft1-> 3:ft2-> 4:ft3-> 5:ft4-> 6:ft5-> 7:ft6-> 8:ft7-> 9:ft8-> 10:ft9-> 11:ft10-> 12:fa0-> 13:fa1-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 18:fa6-> 19:fa7-> 20:fv119-> 21:fv116-> 22:fv113-> 23:fv110-> 24:fv107-> 25:fv104-> 26:fv101-> 27:fv98-> 28:fv95-> 29:fv92-> 30:fv89-> 31:fv86-> 32:fv43-> 33:fv48-> 34:fv53-> 35:fv58"
// [Asm]   comment = "fv137<-fa0;fv48<-fa0;fv101<-fa0;fv92<-fa0;fv58<-fa0;fv43<-fa0;fv107<-fa0;fv86<-fa0;fv119<-fa0;fv110<-fa0;fv98<-fa0;fv95<-fa0;fv53<-fa0;fv113<-fa0;fv89<-fa0;fv104<-fa0;fv116<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, 0 ->   addi s0, s11, 0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   fmv.d.x fv137, zero ->   fmv.d.x fa0, zero
// [Asm] subst   addi v3, s11, -16 ->   addi s1, s11, -16
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s1, -8
// [Asm] subst   sd v2, 0(v3) ->   sd s0, 0(s1)
// [Asm] subst   sd v2, 8(v3) ->   sd s0, 8(s1)
// [Asm] subst   li v133, 2 ->   li a0, 2
// [Asm] subst   addi v8, v133, -1 ->   addi a0, a0, -1
// [Asm] subst   li v131, 3 ->   li a1, 3
// [Asm] subst   mv a2, v3 ->   mv a2, s1
// [Asm] subst   call init_arr89l4_3 ->   call init_arr89l4_3
// [Asm] subst   addi v4, s11, -24 ->   addi s2, s11, -24
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s2, -8
// [Asm] subst   sd v2, 0(v4) ->   sd s0, 0(s2)
// [Asm] subst   sd v2, 8(v4) ->   sd s0, 8(s2)
// [Asm] subst   sd v2, 16(v4) ->   sd s0, 16(s2)
// [Asm] subst   li v128, 3 ->   li a0, 3
// [Asm] subst   addi v11, v128, -1 ->   addi a0, a0, -1
// [Asm] subst   li v126, 2 ->   li a1, 2
// [Asm] subst   mv a2, v4 ->   mv a2, s2
// [Asm] subst   call init_arr89l4_3 ->   call init_arr89l4_3
// [Asm] subst   addi v5, s11, -16 ->   addi s3, s11, -16
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s3, -8
// [Asm] subst   sd v2, 0(v5) ->   sd s0, 0(s3)
// [Asm] subst   sd v2, 8(v5) ->   sd s0, 8(s3)
// [Asm] subst   li v123, 2 ->   li a0, 2
// [Asm] subst   addi v14, v123, -1 ->   addi a0, a0, -1
// [Asm] subst   li v121, 2 ->   li a1, 2
// [Asm] subst   mv a2, v5 ->   mv a2, s3
// [Asm] subst   call init_arr89l4_3 ->   call init_arr89l4_3
// [Asm] subst   ld v16, 0(v3) ->   ld a0, 0(s1)
// [Asm] subst   li v118, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv119, v118 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv119, 0(v16) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v18, 0(v3) ->   ld a0, 0(s1)
// [Asm] subst   li v115, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv116, v115 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv116, 8(v18) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v20, 0(v3) ->   ld a0, 0(s1)
// [Asm] subst   li v112, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv113, v112 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv113, 16(v20) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v22, 8(v3) ->   ld a0, 8(s1)
// [Asm] subst   li v109, 4616189618054758400 ->   li a1, 4616189618054758400
// [Asm] subst   fmv.d.x fv110, v109 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv110, 0(v22) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v24, 8(v3) ->   ld a0, 8(s1)
// [Asm] subst   li v106, 4617315517961601024 ->   li a1, 4617315517961601024
// [Asm] subst   fmv.d.x fv107, v106 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv107, 8(v24) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v26, 8(v3) ->   ld a0, 8(s1)
// [Asm] subst   li v103, 4618441417868443648 ->   li a1, 4618441417868443648
// [Asm] subst   fmv.d.x fv104, v103 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv104, 16(v26) ->   fsd fa0, 16(a0)
// [Asm] subst   ld v28, 0(v4) ->   ld a0, 0(s2)
// [Asm] subst   li v100, 4619567317775286272 ->   li a1, 4619567317775286272
// [Asm] subst   fmv.d.x fv101, v100 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv101, 0(v28) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v30, 0(v4) ->   ld a0, 0(s2)
// [Asm] subst   li v97, 4620693217682128896 ->   li a1, 4620693217682128896
// [Asm] subst   fmv.d.x fv98, v97 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv98, 8(v30) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v32, 8(v4) ->   ld a0, 8(s2)
// [Asm] subst   li v94, 4621256167635550208 ->   li a1, 4621256167635550208
// [Asm] subst   fmv.d.x fv95, v94 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv95, 0(v32) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v34, 8(v4) ->   ld a0, 8(s2)
// [Asm] subst   li v91, 4621819117588971520 ->   li a1, 4621819117588971520
// [Asm] subst   fmv.d.x fv92, v91 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv92, 8(v34) ->   fsd fa0, 8(a0)
// [Asm] subst   ld v36, 16(v4) ->   ld a0, 16(s2)
// [Asm] subst   li v88, 4622382067542392832 ->   li a1, 4622382067542392832
// [Asm] subst   fmv.d.x fv89, v88 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv89, 0(v36) ->   fsd fa0, 0(a0)
// [Asm] subst   ld v38, 16(v4) ->   ld a0, 16(s2)
// [Asm] subst   li v85, 4622945017495814144 ->   li a1, 4622945017495814144
// [Asm] subst   fmv.d.x fv86, v85 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv86, 8(v38) ->   fsd fa0, 8(a0)
// [Asm] subst   li v83, 2 ->   li a0, 2
// [Asm] subst   addi v40, v83, -1 ->   addi a0, a0, -1
// [Asm] subst   li v80, 3 ->   li a1, 3
// [Asm] subst   li v81, 2 ->   li a2, 2
// [Asm] subst   mv a3, v3 ->   mv a3, s1
// [Asm] subst   mv a4, v4 ->   mv a4, s2
// [Asm] subst   mv a5, v5 ->   mv a5, s3
// [Asm] subst   call loop148l2_2 ->   call loop148l2_2
// [Asm] subst   ld v42, 0(v5) ->   ld a0, 0(s3)
// [Asm] subst   fld fv43, 0(v42) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v44, fv43, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v47, 0(v5) ->   ld a0, 0(s3)
// [Asm] subst   fld fv48, 8(v47) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v49, fv48, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v52, 8(v5) ->   ld a0, 8(s3)
// [Asm] subst   fld fv53, 0(v52) ->   fld fa0, 0(a0)
// [Asm] subst   fcvt.w.d v54, fv53, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call minimbt_print_endline ->   call minimbt_print_endline
// [Asm] subst   ld v57, 8(v5) ->   ld a0, 8(s3)
// [Asm] subst   fld fv58, 8(v57) ->   fld fa0, 8(a0)
// [Asm] subst   fcvt.w.d v59, fv58, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v30, FnParam(fref=f1, fpref=$f.0) -> v2, FnParam(fref=f1, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.5) -> v13, Insn(iref=%8) -> v22, Insn(iref=%10) -> fv24, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%14) -> v28, Insn(iref=%4) -> v18, Insn(iref=%1) -> v15, Insn(iref=%11) -> fv25, Insn(iref=%6) -> v20, BlockParam(bref=b9, bpref=$b.0) -> v33, FnParam(fref=f1, fpref=$f.4) -> v6, Insn(iref=%9) -> fv23, Insn(iref=%16) -> v31, BlockParam(bref=b0, bpref=$b.0) -> v8, FnParam(fref=f1, fpref=$f.5) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b8, bpref=$b.0) -> v32, Insn(iref=%5) -> fv19, Insn(iref=%0) -> v14, Insn(iref=%19) -> v36, Insn(iref=%3) -> v17, Insn(iref=%18) -> v35, Insn(iref=%13) -> v27, FnParam(fref=f1, fpref=$f.1) -> v3, Insn(iref=%7) -> fv21, FnParam(fref=f1, fpref=$f.2) -> v4, BlockParam(bref=b5, bpref=$b.0) -> v29, Insn(iref=%17) -> v34, Insn(iref=%2) -> v16, Self(fref=f1) -> v0, Insn(iref=%12) -> v26
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%15)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%7), Insn(iref=%9)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v32]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defs: [v64]
// [Asm] live_set: [v11, v10, zero, v13, v8, v15, v12, v9, v64]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v11, v10, zero, v13, v8, v65, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v13, v8, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v11, v10, zero, v13, v8, v17, v15, v12, v61, v9]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v62, v10, zero, v13, v8, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, zero, v13, v8, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v11, v58, v10, v18, zero, v13, v8, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v10, zero, v13, v8, v59, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v10, zero, v13, v8, fv19, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v55]
// [Asm] live_set: [v11, v10, zero, v13, v8, fv19, v17, v15, v12, v9, v55]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v10, v56, zero, v13, v8, fv19, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v13, v20, v8, fv19, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v11, v10, zero, v13, v20, v8, fv19, v17, v15, v12, v52, v9]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v10, v53, zero, v13, v8, fv19, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v10, zero, v13, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [v49]
// [Asm] live_set: [v11, v10, v49, zero, v13, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v10, zero, v13, v50, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v10, zero, v13, v22, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v11, v46, v10, zero, v13, v22, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v10, zero, v13, v8, fv19, v47, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v10, zero, v13, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv25]
// [Asm] live_set: [v11, v10, zero, v13, fv25, v8, v17, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [v43]
// [Asm] live_set: [v11, v10, zero, v13, fv25, v8, v17, v43, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v10, zero, v13, fv25, v8, v12, v15, v44, v9]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v10, zero, v13, v27, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v27, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, v13, a0, v27, v8, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, zero, v13, a0, v27, v8, a1, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, a2, a1, v12, v9]
// [Asm] move_origin: [v27]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v28, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v28, v9]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] move_origin: [v28]
// [Asm] defined: v29 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [zero]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v13, zero, v30, v8, v12, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v30, v8, v12, v9, v34]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v13, zero, a0, v30, v8, v12, v9, v34]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v13, zero, a0, v30, v8, a1, v12, v9, v34]
// [Asm] move_origin: [v30]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v13, zero, a0, v30, v8, a2, a1, v12, v9]
// [Asm] move_origin: [v34]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v13, zero, a0, v30, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v13, zero, a0, v30, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, a5, v13, zero, a0, v30, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v13, zero, a0, v30, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v13, zero, v8, v36, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v8, v36, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v8, v36, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v36]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v33]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [zero]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop228l1_1"];
// [Asm]   r0 [label="v29 ← a0", color=green];
// [Asm]   r46 [label="v30 ← s1", color=green];
// [Asm]   r38 [label="t1", color=blue];
// [Asm]   r33 [label="a2", color=blue];
// [Asm]   r9 [label="v33 ← a0", color=green];
// [Asm]   r26 [label="v46 ← a3", color=green];
// [Asm]   r47 [label="v35 ← a0", color=green];
// [Asm]   r6 [label="v12 ← s4", color=green];
// [Asm]   r44 [label="v28 ← a0", color=green];
// [Asm]   r13 [label="v61 ← a2", color=green];
// [Asm]   r42 [label="a6", color=blue];
// [Asm]   r53 [label="v5 ← a3", color=green];
// [Asm]   r4 [label="v13 ← s2", color=green];
// [Asm]   r29 [label="v44 ← a1", color=green];
// [Asm]   r35 [label="a4", color=blue];
// [Asm]   r7 [label="v9 ← s5", color=green];
// [Asm]   r10 [label="v64 ← a1", color=green];
// [Asm]   r8 [label="v15 ← a0", color=green];
// [Asm]   r5 [label="v8 ← s3", color=green];
// [Asm]   r36 [label="a5", color=blue];
// [Asm]   r54 [label="v6 ← a4", color=green];
// [Asm]   r24 [label="v50 ← a2", color=green];
// [Asm]   r15 [label="v18 ← a2", color=green];
// [Asm]   r32 [label="a1", color=blue];
// [Asm]   r49 [label="v32 ← a0", color=green];
// [Asm]   r43 [label="a7", color=blue];
// [Asm]   r31 [label="a0", color=blue];
// [Asm]   r39 [label="t2", color=blue];
// [Asm]   r17 [label="v59 ← a2", color=green];
// [Asm]   r52 [label="v4 ← a2", color=green];
// [Asm]   r12 [label="v17 ← a1", color=green];
// [Asm]   r48 [label="v36 ← a0", color=green];
// [Asm]   r37 [label="t0", color=blue];
// [Asm]   r20 [label="v20 ← a2", color=green];
// [Asm]   r23 [label="v49 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v47 ← a2", color=green];
// [Asm]   r40 [label="t3", color=blue];
// [Asm]   r1 [label="v11 ← s0", color=green];
// [Asm]   r28 [label="v43 ← a2", color=green];
// [Asm]   r41 [label="t4", color=blue];
// [Asm]   r11 [label="v65 ← a1", color=green];
// [Asm]   r34 [label="a3", color=blue];
// [Asm]   r22 [label="v53 ← a2", color=green];
// [Asm]   r14 [label="v62 ← a2", color=green];
// [Asm]   r50 [label="v2 ← a0", color=green];
// [Asm]   r30 [label="v27 ← a2", color=green];
// [Asm]   r51 [label="v3 ← a1", color=green];
// [Asm]   r45 [label="v34 ← a2", color=green];
// [Asm]   r25 [label="v22 ← a2", color=green];
// [Asm]   r2 [label="v10 ← s1", color=green];
// [Asm]   r55 [label="v7 ← a5", color=green];
// [Asm]   r16 [label="v58 ← a3", color=green];
// [Asm]   r18 [label="v55 ← a2", color=green];
// [Asm]   r19 [label="v56 ← a2", color=green];
// [Asm]   r21 [label="v52 ← a3", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r3 -- r52;
// [Asm]   r2 -- r38;
// [Asm]   r2 -- r31;
// [Asm]   r6 -- r48;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r53;
// [Asm]   r31 -- r45;
// [Asm]   r7 -- r25;
// [Asm]   r4 -- r44;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r31;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r50 -- r55;
// [Asm]   r31 -- r35;
// [Asm]   r3 -- r48;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r32 -- r35;
// [Asm]   r5 -- r35;
// [Asm]   r5 -- r6;
// [Asm]   r33 -- r50;
// [Asm]   r8 -- r16;
// [Asm]   r1 -- r48;
// [Asm]   r3 -- r39;
// [Asm]   r5 -- r32;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r54;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r2 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r12 -- r23;
// [Asm]   r32 -- r34;
// [Asm]   r5 -- r51;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r38;
// [Asm]   r3 -- r35;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r35;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r25;
// [Asm]   r34 -- r35;
// [Asm]   r6 -- r41;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r55;
// [Asm]   r7 -- r20;
// [Asm]   r5 -- r19;
// [Asm]   r31 -- r41;
// [Asm]   r6 -- r46;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r5 -- r38;
// [Asm]   r35 -- r50;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r31 -- r46;
// [Asm]   r7 -- r22;
// [Asm]   r31 -- r40;
// [Asm]   r7 -- r19;
// [Asm]   r2 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r4 -- r36;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r25;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r17;
// [Asm]   r31 -- r33;
// [Asm]   r6 -- r38;
// [Asm]   r4 -- r10;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r7 -- r46;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   r36 -- r51;
// [Asm]   r5 -- r12;
// [Asm]   r4 -- r41;
// [Asm]   r34 -- r50;
// [Asm]   r6 -- r36;
// [Asm]   r1 -- r37;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r34 -- r46;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r32;
// [Asm]   r31 -- r36;
// [Asm]   r5 -- r42;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r51 -- r53;
// [Asm]   r34 -- r51;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r31 -- r39;
// [Asm]   r4 -- r35;
// [Asm]   r1 -- r31;
// [Asm]   r2 -- r54;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r50 -- r51;
// [Asm]   r12 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r43 -- r46;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r52 -- r54;
// [Asm]   r7 -- r54;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r53 -- r55;
// [Asm]   r4 -- r16;
// [Asm]   r7 -- r52;
// [Asm]   r6 -- r11;
// [Asm]   r34 -- r52;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r8 -- r19;
// [Asm]   r46 -- r47;
// [Asm]   r35 -- r53;
// [Asm]   r1 -- r15;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r42 -- r46;
// [Asm]   r4 -- r30;
// [Asm]   r2 -- r55;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r24;
// [Asm]   r1 -- r39;
// [Asm]   r32 -- r45;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r34 -- r36;
// [Asm]   r3 -- r55;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r7 -- r39;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r43;
// [Asm]   r4 -- r39;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r3 -- r54;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r0 -- r7;
// [Asm]   r5 -- r30;
// [Asm]   r33 -- r51;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r52 -- r53;
// [Asm]   r3 -- r44;
// [Asm]   r2 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r32 -- r36;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r6 -- r35;
// [Asm]   r1 -- r30;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r36 -- r46;
// [Asm]   r51 -- r55;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r45;
// [Asm]   r38 -- r46;
// [Asm]   r5 -- r47;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r24;
// [Asm]   r52 -- r55;
// [Asm]   r2 -- r25;
// [Asm]   r40 -- r46;
// [Asm]   r2 -- r6;
// [Asm]   r32 -- r46;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r51 -- r54;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r25;
// [Asm]   r5 -- r55;
// [Asm]   r35 -- r52;
// [Asm]   r2 -- r36;
// [Asm]   r6 -- r55;
// [Asm]   r12 -- r21;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r36 -- r53;
// [Asm]   r4 -- r14;
// [Asm]   r3 -- r46;
// [Asm]   r51 -- r52;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r53 -- r54;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r43;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r3 -- r38;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r47;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r33 -- r36;
// [Asm]   r1 -- r13;
// [Asm]   r50 -- r54;
// [Asm]   r7 -- r48;
// [Asm]   r35 -- r51;
// [Asm]   r6 -- r22;
// [Asm]   r31 -- r42;
// [Asm]   r8 -- r20;
// [Asm]   r33 -- r46;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r2 -- r44;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r39 -- r46;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r31 -- r37;
// [Asm]   r32 -- r33;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r50 -- r53;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r29;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r35 -- r46;
// [Asm]   r1 -- r25;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r1 -- r54;
// [Asm]   r36 -- r52;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r38;
// [Asm]   r37 -- r46;
// [Asm]   r5 -- r41;
// [Asm]   r7 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r6 -- r47;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r36 -- r54;
// [Asm]   r30 -- r31;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r1 -- r20;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r4 -- r40;
// [Asm]   r4 -- r42;
// [Asm]   r3 -- r51;
// [Asm]   r3 -- r34;
// [Asm]   r12 -- r19;
// [Asm]   r1 -- r46;
// [Asm]   r4 -- r21;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r2 -- r33;
// [Asm]   r7 -- r55;
// [Asm]   r8 -- r17;
// [Asm]   r54 -- r55;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r43;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r5 -- r53;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r50 -- r52;
// [Asm]   r1 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r22;
// [Asm]   r6 -- r45;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r5 -- r14;
// [Asm]   r1 -- r44;
// [Asm]   r2 -- r24;
// [Asm]   r31 -- r34;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r53;
// [Asm]   r35 -- r36;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r24;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r2 -- r18;
// [Asm]   r4 -- r37;
// [Asm]   r7 -- r45;
// [Asm]   r6 -- r44;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r32;
// [Asm]   r7 -- r13;
// [Asm]   r5 -- r52;
// [Asm]   r36 -- r50;
// [Asm]   r5 -- r44;
// [Asm]   r31 -- r38;
// [Asm]   r45 -- r46;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r40;
// [Asm]   r1 -- r28;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r4 -- r46;
// [Asm]   r41 -- r46;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r32 -- r50;
// [Asm]   r5 -- r37;
// [Asm]   r6 -- r42;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r41;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r36;
// [Asm]   r31 -- r43;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r26;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v29-> 1:v11-> 2:v10-> 3:zero-> 4:v13-> 5:v8-> 6:v12-> 7:v9-> 8:v15-> 10:v64-> 11:v65-> 12:v17-> 13:v61-> 14:v62-> 15:v18-> 16:v58-> 17:v59-> 18:v55-> 19:v56-> 20:v20-> 21:v52-> 22:v53-> 23:v49-> 24:v50-> 25:v22-> 26:v46-> 27:v47-> 28:v43-> 29:v44-> 30:v27-> 31:a0-> 32:a1-> 33:a2-> 34:a3-> 35:a4-> 36:a5-> 46:v30-> 37:t0-> 38:t1-> 39:t2-> 40:t3-> 41:t4-> 42:a6-> 43:a7-> 45:v34-> 44:v28-> 47:v35-> 48:v36-> 50:v2-> 51:v3-> 52:v4-> 53:v5-> 54:v6-> 55:v7-> 9:v33-> 49:v32"
// [Asm]   comment = "v29<-a0;v30<-s1;v33<-a0;v46<-a3;v35<-a0;v12<-s4;v28<-a0;v61<-a2;v5<-a3;v13<-s2;v44<-a1;v9<-s5;v64<-a1;v15<-a0;v8<-s3;v6<-a4;v50<-a2;v18<-a2;v32<-a0;v59<-a2;v4<-a2;v17<-a1;v36<-a0;v20<-a2;v49<-a2;v47<-a2;v11<-s0;v43<-a2;v65<-a1;v53<-a2;v62<-a2;v2<-a0;v27<-a2;v3<-a1;v34<-a2;v22<-a2;v10<-s1;v7<-a5;v58<-a3;v55<-a2;v56<-a2;v52<-a3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop228l1_1"];
// [Asm]   r0 [label="fv19 ← fa0", color=green];
// [Asm]   r20 [label="fa5", color=blue];
// [Asm]   r3 [label="fv25 ← fa0", color=green];
// [Asm]   r9 [label="ft5", color=blue];
// [Asm]   r6 [label="ft2", color=blue];
// [Asm]   r13 [label="ft9", color=blue];
// [Asm]   r4 [label="ft0", color=blue];
// [Asm]   r1 [label="fv21 ← fa1", color=green];
// [Asm]   r11 [label="ft7", color=blue];
// [Asm]   r7 [label="ft3", color=blue];
// [Asm]   r10 [label="ft6", color=blue];
// [Asm]   r22 [label="fa7", color=blue];
// [Asm]   r14 [label="ft10", color=blue];
// [Asm]   r8 [label="ft4", color=blue];
// [Asm]   r5 [label="ft1", color=blue];
// [Asm]   r15 [label="fa0", color=blue];
// [Asm]   r2 [label="fv23 ← fa2", color=green];
// [Asm]   r16 [label="fa1", color=blue];
// [Asm]   r18 [label="fa3", color=blue];
// [Asm]   r19 [label="fa4", color=blue];
// [Asm]   r21 [label="fa6", color=blue];
// [Asm]   r17 [label="fa2", color=blue];
// [Asm]   r12 [label="ft8", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv19-> 1:fv21-> 2:fv23-> 3:fv25-> 4:ft0-> 5:ft1-> 6:ft2-> 7:ft3-> 8:ft4-> 9:ft5-> 10:ft6-> 11:ft7-> 12:ft8-> 13:ft9-> 14:ft10-> 15:fa0-> 16:fa1-> 17:fa2-> 18:fa3-> 19:fa4-> 20:fa5-> 21:fa6-> 22:fa7"
// [Asm]   comment = "fv19<-fa0;fv25<-fa0;fv21<-fa1;fv23<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v29, zero ->   mv a0, zero
// [Asm] subst   j .loop228l1_1_5 ->   j .loop228l1_1_5
// [Asm] subst   addi v15, v9, -1 ->   addi a0, s5, -1
// [Asm] subst   blt v15, zero, .loop228l1_1_4 ->   blt a0, zero, .loop228l1_1_4
// [Asm] subst   j .loop228l1_1_9 ->   j .loop228l1_1_9
// [Asm] subst   slliw v64, v8, 3 ->   slliw a1, s3, 3
// [Asm] subst   add v65, v13, v64 ->   add a1, s2, a1
// [Asm] subst   ld v17, 0(v65) ->   ld a1, 0(a1)
// [Asm] subst   slliw v61, v8, 3 ->   slliw a2, s3, 3
// [Asm] subst   add v62, v13, v61 ->   add a2, s2, a2
// [Asm] subst   ld v18, 0(v62) ->   ld a2, 0(a2)
// [Asm] subst   slliw v58, v10, 3 ->   slliw a3, s1, 3
// [Asm] subst   add v59, v18, v58 ->   add a2, a2, a3
// [Asm] subst   fld fv19, 0(v59) ->   fld fa0, 0(a2)
// [Asm] subst   slliw v55, v8, 3 ->   slliw a2, s3, 3
// [Asm] subst   add v56, v11, v55 ->   add a2, s0, a2
// [Asm] subst   ld v20, 0(v56) ->   ld a2, 0(a2)
// [Asm] subst   slliw v52, v15, 3 ->   slliw a3, a0, 3
// [Asm] subst   add v53, v20, v52 ->   add a2, a2, a3
// [Asm] subst   fld fv21, 0(v53) ->   fld fa1, 0(a2)
// [Asm] subst   slliw v49, v15, 3 ->   slliw a2, a0, 3
// [Asm] subst   add v50, v12, v49 ->   add a2, s4, a2
// [Asm] subst   ld v22, 0(v50) ->   ld a2, 0(a2)
// [Asm] subst   slliw v46, v10, 3 ->   slliw a3, s1, 3
// [Asm] subst   add v47, v22, v46 ->   add a2, a2, a3
// [Asm] subst   fld fv23, 0(v47) ->   fld fa2, 0(a2)
// [Asm] subst   fmadd.d fv25, fv21, fv23, fv19 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v43, v10, 3 ->   slliw a2, s1, 3
// [Asm] subst   add v44, v17, v43 ->   add a1, a1, a2
// [Asm] subst   fsd fv25, 0(v44) ->   fsd fa0, 0(a1)
// [Asm] subst   addi v27, v15, -1 ->   addi a2, a0, -1
// [Asm] subst   mv a0, v8 ->   mv a0, s3
// [Asm] subst   mv a1, v10 ->   mv a1, s1
// [Asm] subst   mv a3, v11 ->   mv a3, s0
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call loop31l0_0 ->   call loop31l0_0
// [Asm] subst   mv v33, zero ->   mv a0, zero
// [Asm] subst   addi v34, v9, -1 ->   addi a2, s5, -1
// [Asm] subst   mv a0, v8 ->   mv a0, s3
// [Asm] subst   mv a1, v30 ->   mv a1, s1
// [Asm] subst   mv a3, v11 ->   mv a3, s0
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s2
// [Asm] subst   call loop31l0_0 ->   call loop31l0_0
// [Asm] subst   addi v36, v30, -1 ->   addi a0, s1, -1
// [Asm] subst   mv v10, v36 ->   mv s1, a0
// [Asm] subst   j .loop228l1_1_0 ->   j .loop228l1_1_0
// [Asm] subst   addi v30, v10, -1 ->   addi s1, s1, -1
// [Asm] subst   blt v30, zero, .loop228l1_1_7 ->   blt s1, zero, .loop228l1_1_7
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v32, zero ->   mv a0, zero
// [Asm] subst   mv v8, v2 ->   mv s3, a0
// [Asm] subst   mv v9, v3 ->   mv s5, a1
// [Asm] subst   mv v10, v4 ->   mv s1, a2
// [Asm] subst   mv v11, v5 ->   mv s0, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s2, a5
// [Asm] subst   blt v10, zero, .loop228l1_1_2 ->   blt s1, zero, .loop228l1_1_2
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main85l3_4 ->   call main85l3_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f2, fpref=$f.4) -> v6, BlockParam(bref=b0, bpref=$b.5) -> v13, Insn(iref=%9) -> v26, Self(fref=f2) -> v0, Insn(iref=%8) -> v23, Insn(iref=%10) -> v27, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, BlockParam(bref=b8, bpref=$b.0) -> v24, Insn(iref=%5) -> v19, Insn(iref=%0) -> v14, Insn(iref=%4) -> v18, FnParam(fref=f2, fpref=$f.5) -> v7, Insn(iref=%3) -> v17, Insn(iref=%7) -> v22, BlockParam(bref=b5, bpref=$b.0) -> v21, Insn(iref=%2) -> v16, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v15, Insn(iref=%11) -> v28, Insn(iref=%6) -> v20, FnParam(fref=f2, fpref=$f.0) -> v2, BlockParam(bref=b9, bpref=$b.0) -> v25, FnParam(fref=f2, fpref=$f.2) -> v4, FnParam(fref=f2, fpref=$f.3) -> v5
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%7)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [zero]
// [Asm] defined: v25 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, v13, v17, v12, v9, zero, v8, v15]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, v17, v12, v9, zero, v8, v15]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, a0, v17, v12, v9, zero, v8, v15]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v13, a0, a1, v17, v12, v9, zero, v8, v15]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, a0, a2, a1, v12, v9, zero, v8, v15]
// [Asm] move_origin: [v17]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, a0, a2, a1, a3, v12, v9, zero, v8, v15]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, a0, a2, a1, a3, v12, v9, zero, a4, v8, v15]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, a0, a2, a1, a3, v12, v9, zero, a4, v8, v15]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v13, v8, v19, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v19, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, v19, v12, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, v19, a1, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, a2, a1, v12, v9]
// [Asm] move_origin: [v19]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, zero, v13, a0, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, zero, v13, v20, v8, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v20, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v10, v13, zero, v26, v22, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v26, v22, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v10, v13, zero, a0, v26, v22, v12, v9]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v11, v10, v13, zero, a0, v26, v22, a1, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v11, v10, v13, zero, a0, v22, a2, a1, v12, v9]
// [Asm] move_origin: [v26]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v11, v10, v13, zero, a0, v22, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v11, v10, v13, zero, a0, v22, a4, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v11, v10, a5, v13, zero, a0, v22, a4, a2, a1, a3, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defined: a5 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v10, v13, zero, a0, v22, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v10, v13, zero, v12, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v28]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [zero]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop148l2_2"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r33 [label="v21 ← a0", color=green];
// [Asm]   r9 [label="v3 ← a1", color=green];
// [Asm]   r26 [label="t3", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="v7 ← a5", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="a7", color=blue];
// [Asm]   r35 [label="v27 ← a0", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="v4 ← a2", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r36 [label="v28 ← a0", color=green];
// [Asm]   r15 [label="v9 ← s1", color=green];
// [Asm]   r24 [label="t1", color=blue];
// [Asm]   r32 [label="v20 ← a0", color=green];
// [Asm]   r31 [label="v19 ← a2", color=green];
// [Asm]   r17 [label="v11 ← s3", color=green];
// [Asm]   r12 [label="v6 ← a4", color=green];
// [Asm]   r37 [label="v24 ← a0", color=green];
// [Asm]   r20 [label="v22 ← s0", color=green];
// [Asm]   r23 [label="t0", color=blue];
// [Asm]   r3 [label="a5", color=blue];
// [Asm]   r27 [label="t4", color=blue];
// [Asm]   r1 [label="v25 ← a0", color=green];
// [Asm]   r28 [label="a6", color=blue];
// [Asm]   r11 [label="v5 ← a3", color=green];
// [Asm]   r34 [label="v26 ← a2", color=green];
// [Asm]   r22 [label="v15 ← s6", color=green];
// [Asm]   r14 [label="v8 ← s0", color=green];
// [Asm]   r30 [label="v18 ← a0", color=green];
// [Asm]   r25 [label="t2", color=blue];
// [Asm]   r2 [label="v2 ← a0", color=green];
// [Asm]   r16 [label="v10 ← s2", color=green];
// [Asm]   r18 [label="v12 ← s4", color=green];
// [Asm]   r19 [label="v13 ← s5", color=green];
// [Asm]   r21 [label="v17 ← a2", color=green];
// [Asm]   r16 -- r20;
// [Asm]   r3 -- r15;
// [Asm]   r4 -- r34;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r15 -- r31;
// [Asm]   r5 -- r17;
// [Asm]   r5 -- r22;
// [Asm]   r17 -- r35;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r28;
// [Asm]   r15 -- r36;
// [Asm]   r20 -- r34;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r18 -- r21;
// [Asm]   r0 -- r23;
// [Asm]   r2 -- r7;
// [Asm]   r18 -- r35;
// [Asm]   r0 -- r16;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r17 -- r19;
// [Asm]   r18 -- r34;
// [Asm]   r4 -- r31;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r18 -- r28;
// [Asm]   r3 -- r8;
// [Asm]   r20 -- r23;
// [Asm]   r16 -- r29;
// [Asm]   r16 -- r36;
// [Asm]   r22 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r19 -- r29;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r12;
// [Asm]   r16 -- r33;
// [Asm]   r19 -- r22;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r22 -- r27;
// [Asm]   r19 -- r36;
// [Asm]   r20 -- r27;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r18 -- r33;
// [Asm]   r11 -- r15;
// [Asm]   r15 -- r23;
// [Asm]   r18 -- r20;
// [Asm]   r16 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r17 -- r31;
// [Asm]   r16 -- r24;
// [Asm]   r17 -- r27;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r30;
// [Asm]   r14 -- r15;
// [Asm]   r17 -- r34;
// [Asm]   r14 -- r32;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r4 -- r13;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r19;
// [Asm]   r16 -- r30;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r23;
// [Asm]   r14 -- r26;
// [Asm]   r17 -- r29;
// [Asm]   r2 -- r4;
// [Asm]   r20 -- r26;
// [Asm]   r19 -- r30;
// [Asm]   r16 -- r32;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r34;
// [Asm]   r11 -- r16;
// [Asm]   r15 -- r35;
// [Asm]   r19 -- r34;
// [Asm]   r0 -- r14;
// [Asm]   r7 -- r20;
// [Asm]   r20 -- r29;
// [Asm]   r13 -- r16;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r22 -- r26;
// [Asm]   r17 -- r24;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r6 -- r22;
// [Asm]   r17 -- r25;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r0 -- r19;
// [Asm]   r20 -- r35;
// [Asm]   r16 -- r18;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r0 -- r31;
// [Asm]   r7 -- r17;
// [Asm]   r6 -- r19;
// [Asm]   r19 -- r28;
// [Asm]   r7 -- r22;
// [Asm]   r14 -- r33;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r7 -- r19;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r4 -- r32;
// [Asm]   r22 -- r28;
// [Asm]   r14 -- r25;
// [Asm]   r14 -- r21;
// [Asm]   r7 -- r15;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r16 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r10 -- r11;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r19 -- r33;
// [Asm]   r15 -- r34;
// [Asm]   r4 -- r36;
// [Asm]   r8 -- r10;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r15 -- r33;
// [Asm]   r12 -- r16;
// [Asm]   r20 -- r28;
// [Asm]   r12 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r15 -- r20;
// [Asm]   r19 -- r25;
// [Asm]   r15 -- r19;
// [Asm]   r0 -- r20;
// [Asm]   r7 -- r14;
// [Asm]   r18 -- r23;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r14 -- r16;
// [Asm]   r14 -- r27;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r17;
// [Asm]   r18 -- r25;
// [Asm]   r10 -- r13;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r18 -- r27;
// [Asm]   r19 -- r31;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r17 -- r36;
// [Asm]   r17 -- r33;
// [Asm]   r4 -- r35;
// [Asm]   r16 -- r17;
// [Asm]   r14 -- r30;
// [Asm]   r4 -- r21;
// [Asm]   r16 -- r34;
// [Asm]   r14 -- r28;
// [Asm]   r14 -- r19;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r4 -- r33;
// [Asm]   r18 -- r26;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r19 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r17 -- r22;
// [Asm]   r18 -- r30;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r14 -- r31;
// [Asm]   r18 -- r31;
// [Asm]   r3 -- r7;
// [Asm]   r21 -- r22;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r15 -- r28;
// [Asm]   r16 -- r23;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r22;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r17 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r16 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r4 -- r16;
// [Asm]   r20 -- r24;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r14 -- r18;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r15 -- r29;
// [Asm]   r15 -- r26;
// [Asm]   r5 -- r20;
// [Asm]   r0 -- r24;
// [Asm]   r6 -- r14;
// [Asm]   r18 -- r29;
// [Asm]   r15 -- r22;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r19;
// [Asm]   r14 -- r23;
// [Asm]   r3 -- r12;
// [Asm]   r17 -- r26;
// [Asm]   r22 -- r29;
// [Asm]   r16 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r4 -- r20;
// [Asm]   r19 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r30;
// [Asm]   r19 -- r35;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r16 -- r26;
// [Asm]   r18 -- r22;
// [Asm]   r19 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r16 -- r28;
// [Asm]   r15 -- r27;
// [Asm]   r18 -- r36;
// [Asm]   r22 -- r24;
// [Asm]   r20 -- r25;
// [Asm]   r15 -- r32;
// [Asm]   r6 -- r8;
// [Asm]   r18 -- r32;
// [Asm]   r4 -- r11;
// [Asm]   r17 -- r23;
// [Asm]   r19 -- r32;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r19 -- r23;
// [Asm]   r15 -- r17;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r31;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r17 -- r30;
// [Asm]   r4 -- r26;
// [Asm]   r17 -- r32;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r15 -- r16;
// [Asm]   r2 -- r3;
// [Asm]   r17 -- r28;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   comment = "0:a0-> 3:a5-> 4:zero-> 5:a4-> 6:a2-> 7:a1-> 8:a3-> 14:v8-> 15:v9-> 16:v10-> 17:v11-> 18:v12-> 19:v13-> 22:v15-> 20:v22-> 21:v17-> 23:t0-> 24:t1-> 25:t2-> 26:t3-> 27:t4-> 28:a6-> 29:a7-> 31:v19-> 34:v26-> 30:v18-> 32:v20-> 33:v21-> 35:v27-> 2:v2-> 9:v3-> 10:v4-> 11:v5-> 12:v6-> 13:v7-> 36:v28-> 1:v25-> 37:v24"
// [Asm]   comment = "v21<-a0;v3<-a1;v7<-a5;v27<-a0;v4<-a2;v28<-a0;v9<-s1;v20<-a0;v19<-a2;v11<-s3;v6<-a4;v24<-a0;v22<-s0;v25<-a0;v5<-a3;v26<-a2;v15<-s6;v8<-s0;v18<-a0;v2<-a0;v10<-s2;v12<-s4;v13<-s5;v17<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop148l2_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   j .loop148l2_2_9 ->   j .loop148l2_2_9
// [Asm] subst   mv v8, v2 ->   mv s0, a0
// [Asm] subst   mv v9, v3 ->   mv s1, a1
// [Asm] subst   mv v10, v4 ->   mv s2, a2
// [Asm] subst   mv v11, v5 ->   mv s3, a3
// [Asm] subst   mv v12, v6 ->   mv s4, a4
// [Asm] subst   mv v13, v7 ->   mv s5, a5
// [Asm] subst   addi v22, v8, -1 ->   addi s0, s0, -1
// [Asm] subst   blt v22, zero, .loop148l2_2_7 ->   blt s0, zero, .loop148l2_2_7
// [Asm] subst   mv v25, zero ->   mv a0, zero
// [Asm] subst   addi v17, v9, -1 ->   addi a2, s1, -1
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   mv a1, v15 ->   mv a1, s6
// [Asm] subst   mv a3, v11 ->   mv a3, s3
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s5
// [Asm] subst   call loop31l0_0 ->   call loop31l0_0
// [Asm] subst   addi v19, v15, -1 ->   addi a2, s6, -1
// [Asm] subst   mv a0, v8 ->   mv a0, s0
// [Asm] subst   mv a1, v9 ->   mv a1, s1
// [Asm] subst   mv a3, v11 ->   mv a3, s3
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s5
// [Asm] subst   call loop228l1_1 ->   call loop228l1_1
// [Asm] subst   addi v26, v10, -1 ->   addi a2, s2, -1
// [Asm] subst   mv a0, v22 ->   mv a0, s0
// [Asm] subst   mv a1, v9 ->   mv a1, s1
// [Asm] subst   mv a3, v11 ->   mv a3, s3
// [Asm] subst   mv a4, v12 ->   mv a4, s4
// [Asm] subst   mv a5, v13 ->   mv a5, s5
// [Asm] subst   call loop228l1_1 ->   call loop228l1_1
// [Asm] subst   addi v28, v22, -1 ->   addi a0, s0, -1
// [Asm] subst   mv v8, v28 ->   mv s0, a0
// [Asm] subst   j .loop148l2_2_0 ->   j .loop148l2_2_0
// [Asm] subst   mv v24, zero ->   mv a0, zero
// [Asm] subst   blt v8, zero, .loop148l2_2_2 ->   blt s0, zero, .loop148l2_2_2
// [Asm] subst   addi v15, v10, -1 ->   addi s6, s2, -1
// [Asm] subst   blt v15, zero, .loop148l2_2_4 ->   blt s6, zero, .loop148l2_2_4
// [Asm] subst   mv v21, zero ->   mv a0, zero
// [Asm] subst   j .loop148l2_2_5 ->   j .loop148l2_2_5
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.2) -> v4, Mem(fref=f3, mref=m0) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f3, fpref=$f.0) -> v2, BlockParam(bref=b0, bpref=$b.2) -> v9, Insn(iref=%5) -> v17, Self(fref=f3) -> v0, Insn(iref=%0) -> v10, Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, Insn(iref=%7) -> v19, BlockParam(bref=b5, bpref=$b.0) -> v15, BlockParam(bref=b6, bpref=$b.0) -> v16, FnParam(fref=f3, fpref=$f.1) -> v3, Mem(fref=f3, mref=m1) -> v6, Insn(iref=%2) -> v12, Insn(iref=%1) -> v11, Insn(iref=%6) -> v18
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%3)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, s11, zero, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, s11, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v29]
// [Asm] live_set: [zero, v29, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero, v7, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [fv31]
// [Asm] live_set: [v5, fv31, zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [a1]
// [Asm] live_set: [v5, fv31, zero, v7, v8, a1, s11, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v5, fv31, zero, a0, v7, v8, a1, s11, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [v5, zero, a0, v7, v8, fa0, a1, s11, v9]
// [Asm] move_origin: [fv31]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v7, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v7, v8, s11, v28, v9]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v8, s11, zero, v13, v9]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v13, v9]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [zero]
// [Asm] defined: v16 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [zero]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v13, v23, v8, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v6]
// [Asm] live_set: [zero, v13, v8, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v13, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [fv25]
// [Asm] live_set: [zero, v13, fv25, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v13, fv25, v8, v6, a1, s11, v9]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, v13, a0, fv25, v8, v6, a1, s11, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [fa0]
// [Asm] live_set: [zero, v13, a0, fa0, v8, v6, a1, s11, v9]
// [Asm] move_origin: [fv25]
// [Asm] defined: fa0 is F
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v13, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero, v13, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [zero, v13, v22, v8, v6, s11, v9]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, v9, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, s11, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v19]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, v9, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v16]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of init_arr89l4_3"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r9 [label="v9 ← s2", color=green];
// [Asm]   r26 [label="v16 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a2", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r29 [label="v6 ← s3", color=green];
// [Asm]   r7 [label="v7 ← s0", color=green];
// [Asm]   r10 [label="v29 ← a0", color=green];
// [Asm]   r8 [label="v8 ← s1", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r24 [label="v28 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r32 [label="v19 ← a0", color=green];
// [Asm]   r31 [label="v22 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a0", color=blue];
// [Asm]   r20 [label="a5", color=blue];
// [Asm]   r23 [label="v27 ← a0", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r28 [label="v23 ← a0", color=green];
// [Asm]   r11 [label="v5 ← s3", color=green];
// [Asm]   r22 [label="a7", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r30 [label="v21 ← a0", color=green];
// [Asm]   r25 [label="v13 ← s0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a3", color=blue];
// [Asm]   r19 [label="a4", color=blue];
// [Asm]   r21 [label="a6", color=blue];
// [Asm]   r8 -- r31;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r25 -- r28;
// [Asm]   r9 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r18 -- r25;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r32;
// [Asm]   r3 -- r11;
// [Asm]   r29 -- r31;
// [Asm]   r9 -- r31;
// [Asm]   r3 -- r24;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r31;
// [Asm]   r15 -- r25;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r16 -- r29;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r3 -- r30;
// [Asm]   r19 -- r29;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r9 -- r23;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r8 -- r23;
// [Asm]   r3 -- r10;
// [Asm]   r4 -- r12;
// [Asm]   r4 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r11 -- r15;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r8 -- r32;
// [Asm]   r0 -- r4;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r13 -- r29;
// [Asm]   r4 -- r9;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r17;
// [Asm]   r15 -- r29;
// [Asm]   r4 -- r23;
// [Asm]   r1 -- r8;
// [Asm]   r17 -- r29;
// [Asm]   r2 -- r4;
// [Asm]   r9 -- r15;
// [Asm]   r7 -- r24;
// [Asm]   r9 -- r29;
// [Asm]   r18 -- r29;
// [Asm]   r29 -- r30;
// [Asm]   r8 -- r19;
// [Asm]   r21 -- r29;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r3 -- r12;
// [Asm]   r22 -- r29;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r20 -- r29;
// [Asm]   r11 -- r12;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r22;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r14 -- r29;
// [Asm]   r2 -- r11;
// [Asm]   r17 -- r25;
// [Asm]   r7 -- r9;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r25;
// [Asm]   r13 -- r25;
// [Asm]   r20 -- r25;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r7 -- r22;
// [Asm]   r2 -- r29;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r3 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r14 -- r25;
// [Asm]   r1 -- r29;
// [Asm]   r7 -- r15;
// [Asm]   r21 -- r25;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r25 -- r31;
// [Asm]   r1 -- r25;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r32;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r9 -- r13;
// [Asm]   r2 -- r3;
// [Asm]   r19 -- r25;
// [Asm]   r3 -- r23;
// [Asm]   r7 -- r14;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:v2-> 1:a2-> 3:s11-> 4:zero-> 5:v3-> 6:v4-> 7:v7-> 8:v8-> 2:a1-> 9:v9-> 11:v5-> 12:a0-> 25:v13-> 29:v6-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a3-> 19:a4-> 20:a5-> 21:a6-> 22:a7-> 23:v27-> 24:v28-> 30:v21-> 31:v22-> 10:v29-> 28:v23-> 32:v19-> 26:v16-> 27:v15"
// [Asm]   comment = "v2<-a0;v9<-s2;v16<-a0;v4<-a2;v6<-s3;v7<-s0;v29<-a0;v8<-s1;v3<-a1;v28<-a0;v19<-a0;v22<-a0;v27<-a0;v15<-a0;v23<-a0;v5<-s3;v21<-a0;v13<-s0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of init_arr89l4_3"];
// [Asm]   r0 [label="fv31 ← fa0", color=green];
// [Asm]   r20 [label="fv25 ← fa0", color=green];
// [Asm]   r3 [label="ft1", color=blue];
// [Asm]   r9 [label="ft7", color=blue];
// [Asm]   r6 [label="ft4", color=blue];
// [Asm]   r13 [label="fa1", color=blue];
// [Asm]   r4 [label="ft2", color=blue];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   r11 [label="ft9", color=blue];
// [Asm]   r7 [label="ft5", color=blue];
// [Asm]   r10 [label="ft8", color=blue];
// [Asm]   r14 [label="fa2", color=blue];
// [Asm]   r8 [label="ft6", color=blue];
// [Asm]   r5 [label="ft3", color=blue];
// [Asm]   r15 [label="fa3", color=blue];
// [Asm]   r2 [label="ft0", color=blue];
// [Asm]   r16 [label="fa4", color=blue];
// [Asm]   r18 [label="fa6", color=blue];
// [Asm]   r19 [label="fa7", color=blue];
// [Asm]   r17 [label="fa5", color=blue];
// [Asm]   r12 [label="ft10", color=blue];
// [Asm]   comment = "0:fv31-> 1:fa0-> 2:ft0-> 3:ft1-> 4:ft2-> 5:ft3-> 6:ft4-> 7:ft5-> 8:ft6-> 9:ft7-> 10:ft8-> 11:ft9-> 12:ft10-> 13:fa1-> 14:fa2-> 15:fa3-> 16:fa4-> 17:fa5-> 18:fa6-> 19:fa7-> 20:fv25"
// [Asm]   comment = "fv31<-fa0;fv25<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   mv v9, v4 ->   mv s2, a2
// [Asm] subst   slliw v29, v8, 3 ->   slliw a0, s1, 3
// [Asm] subst   sub v5, s11, v29 ->   sub s3, s11, a0
// [Asm] subst   andi s11, v5, -8 ->   andi s11, s3, -8
// [Asm] subst   fmv.d.x fv31, zero ->   fmv.d.x fa0, zero
// [Asm] subst   mv a1, v8 ->   mv a1, s1
// [Asm] subst   mv a0, v5 ->   mv a0, s3
// [Asm] subst   call memsetf64 ->   call memsetf64
// [Asm] subst   slliw v27, v7, 3 ->   slliw a0, s0, 3
// [Asm] subst   add v28, v9, v27 ->   add a0, s2, a0
// [Asm] subst   sd v5, 0(v28) ->   sd s3, 0(a0)
// [Asm] subst   addi v13, v7, -1 ->   addi s0, s0, -1
// [Asm] subst   blt v13, zero, .init_arr89l4_3_4 ->   blt s0, zero, .init_arr89l4_3_4
// [Asm] subst   blt v7, zero, .init_arr89l4_3_2 ->   blt s0, zero, .init_arr89l4_3_2
// [Asm] subst   mv v16, zero ->   mv a0, zero
// [Asm] subst   mv v15, zero ->   mv a0, zero
// [Asm] subst   j .init_arr89l4_3_6 ->   j .init_arr89l4_3_6
// [Asm] subst   slliw v23, v8, 3 ->   slliw a0, s1, 3
// [Asm] subst   sub v6, s11, v23 ->   sub s3, s11, a0
// [Asm] subst   andi s11, v6, -8 ->   andi s11, s3, -8
// [Asm] subst   fmv.d.x fv25, zero ->   fmv.d.x fa0, zero
// [Asm] subst   mv a1, v8 ->   mv a1, s1
// [Asm] subst   mv a0, v6 ->   mv a0, s3
// [Asm] subst   call memsetf64 ->   call memsetf64
// [Asm] subst   slliw v21, v13, 3 ->   slliw a0, s0, 3
// [Asm] subst   add v22, v9, v21 ->   add a0, s2, a0
// [Asm] subst   sd v6, 0(v22) ->   sd s3, 0(a0)
// [Asm] subst   addi v19, v13, -1 ->   addi a0, s0, -1
// [Asm] subst   mv v7, v19 ->   mv s0, a0
// [Asm] subst   j .init_arr89l4_3_0 ->   j .init_arr89l4_3_0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv31, FnParam(fref=f0, fpref=$f.5) -> v7, BlockParam(bref=b0, bpref=$b.5) -> v13, Insn(iref=%8) -> fv22, Insn(iref=%10) -> v24, BlockParam(bref=b0, bpref=$b.4) -> v12, BlockParam(bref=b0, bpref=$b.3) -> v11, Insn(iref=%14) -> v30, Insn(iref=%4) -> v18, BlockParam(bref=b6, bpref=$b.0) -> v28, Insn(iref=%1) -> v15, Insn(iref=%11) -> v25, Insn(iref=%6) -> v20, Self(fref=f0) -> v0, Insn(iref=%9) -> fv23, Insn(iref=%16) -> v32, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v8, BlockParam(bref=b0, bpref=$b.1) -> v9, BlockParam(bref=b0, bpref=$b.2) -> v10, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> fv19, Insn(iref=%0) -> v14, Insn(iref=%19) -> fv35, Insn(iref=%3) -> fv17, Insn(iref=%18) -> v34, Insn(iref=%13) -> v29, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> fv21, BlockParam(bref=b5, bpref=$b.0) -> v27, Insn(iref=%22) -> v38, Insn(iref=%17) -> fv33, Insn(iref=%23) -> v39, Insn(iref=%2) -> v16, FnParam(fref=f0, fpref=$f.4) -> v6, Insn(iref=%20) -> fv36, Insn(iref=%21) -> fv37, Insn(iref=%12) -> v26
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%17), Insn(iref=%19)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%11)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%7)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [zero]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v28]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v11, v25, v62, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v11, v25, v63, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v25, v13, zero, v29, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v11, v25, v13, zero, v29, v8, v59, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v11, v25, v13, zero, v29, v8, v12, v9, v60]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v25, v13, zero, v29, v30, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v11, v25, v56, v13, zero, v29, v30, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v11, v25, v13, zero, v29, v8, v12, v57, v9]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [fv31]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: [v53]
// [Asm] live_set: [v11, v25, v53, fv31, v13, zero, v29, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, v12, v9, v54]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, v32, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v50, v8, v32, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, v12, v9, v51]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [fv33]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv33 is F
// [Asm] defs: [v47]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, fv33, v47, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v11, v25, v48, fv31, v13, zero, v29, v8, fv33, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, v44, v9, v34]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, fv33, v45, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [fv35]
// [Asm] live_set: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, fv35, v9]
// [Asm] move_origin: []
// [Asm] defined: fv35 is F
// [Asm] defs: [fv37]
// [Asm] live_set: [v11, v25, fv37, v13, zero, v29, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: fv37 is F
// [Asm] defs: [v41]
// [Asm] live_set: [v11, v25, fv37, v13, zero, v29, v8, v41, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v11, v25, fv37, v13, zero, v42, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v11, v13, zero, v8, v12, v9, v39]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v8, v12, v9, v39]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v11, v13, zero, v8, v12, v9, v39]
// [Asm] move_origin: [v9]
// [Asm] defs: [v10]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v39]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v12]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v13]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v87]
// [Asm] live_set: [v11, v87, v10, zero, v13, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v87 is X
// [Asm] defs: [v88]
// [Asm] live_set: [v11, v10, zero, v13, v8, v88, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v88 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v84]
// [Asm] live_set: [v11, v10, zero, v13, v8, v84, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v84 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v11, v10, zero, v13, v8, v85, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v81]
// [Asm] live_set: [v11, v16, v10, zero, v13, v8, v81, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v81 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v11, v82, v10, zero, v13, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [fv17]
// [Asm] live_set: [v11, v10, zero, v13, v8, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v78]
// [Asm] live_set: [v11, v10, zero, v13, v78, v8, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v11, v10, zero, v13, v79, v8, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v10, v18, zero, v13, v8, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v11, v10, v18, v75, zero, v13, v8, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v15, v9, fv17, v76]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v11, v10, v13, zero, v8, fv19, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: [v72]
// [Asm] live_set: [v11, v72, v10, v13, zero, v8, fv19, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v11, v10, v13, zero, v8, fv19, v12, v15, v9, fv17, v73]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v10, v13, zero, v20, v8, fv19, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v11, v69, v10, v13, zero, v20, v8, fv19, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v11, v10, v13, zero, v8, fv19, v70, v12, v15, v9, fv17]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [v11, v10, v13, zero, v8, fv19, v12, v15, v9, fv17, fv21]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: [fv23]
// [Asm] live_set: [v11, fv23, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [v66]
// [Asm] live_set: [v11, v66, fv23, v10, v13, zero, v8, v12, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v11, fv23, v10, v13, zero, v67, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28]
// [Asm] move_origin: [zero]
// [Asm] defined: v28 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v28]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: [v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v4]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero, v8, v7, v6, v9]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: [v6]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of loop31l0_0"];
// [Asm]   r0 [label="v27 ← a0", color=green];
// [Asm]   r46 [label="v20 ← a7", color=green];
// [Asm]   r38 [label="v82 ← a7", color=green];
// [Asm]   r33 [label="v15 ← a2", color=green];
// [Asm]   r59 [label="v4 ← a0", color=green];
// [Asm]   r9 [label="v9 ← a6", color=green];
// [Asm]   r26 [label="v45 ← a7", color=green];
// [Asm]   r47 [label="v69 ← t0", color=green];
// [Asm]   r6 [label="zero", color=blue];
// [Asm]   r44 [label="v72 ← a7", color=green];
// [Asm]   r13 [label="v60 ← a7", color=green];
// [Asm]   r53 [label="a5", color=blue];
// [Asm]   r42 [label="v75 ← t0", color=green];
// [Asm]   r4 [label="v25 ← a2", color=green];
// [Asm]   r29 [label="v39 ← a0", color=green];
// [Asm]   r35 [label="v85 ← a7", color=green];
// [Asm]   r7 [label="v8 ← a4", color=green];
// [Asm]   r56 [label="a1", color=blue];
// [Asm]   r10 [label="v63 ← a0", color=green];
// [Asm]   r8 [label="v12 ← a5", color=green];
// [Asm]   r5 [label="v13 ← a3", color=green];
// [Asm]   r54 [label="a4", color=blue];
// [Asm]   r36 [label="v16 ← a7", color=green];
// [Asm]   r15 [label="v56 ← t0", color=green];
// [Asm]   r32 [label="v88 ← a2", color=green];
// [Asm]   r24 [label="v34 ← a7", color=green];
// [Asm]   r49 [label="v66 ← a7", color=green];
// [Asm]   r57 [label="a3", color=blue];
// [Asm]   r43 [label="v76 ← a7", color=green];
// [Asm]   r31 [label="v87 ← a2", color=green];
// [Asm]   r39 [label="v78 ← a7", color=green];
// [Asm]   r17 [label="v53 ← a7", color=green];
// [Asm]   r52 [label="v2 ← a7", color=green];
// [Asm]   r12 [label="v59 ← a7", color=green];
// [Asm]   r48 [label="v70 ← a7", color=green];
// [Asm]   r37 [label="v81 ← t0", color=green];
// [Asm]   r20 [label="v50 ← t0", color=green];
// [Asm]   r61 [label="v6 ← a3", color=green];
// [Asm]   r23 [label="v48 ← a7", color=green];
// [Asm]   r3 [label="v11 ← a1", color=green];
// [Asm]   r27 [label="v41 ← a7", color=green];
// [Asm]   r62 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="v28 ← a0", color=green];
// [Asm]   r40 [label="v79 ← a7", color=green];
// [Asm]   r28 [label="v42 ← a0", color=green];
// [Asm]   r41 [label="v18 ← a7", color=green];
// [Asm]   r11 [label="v29 ← a0", color=green];
// [Asm]   r58 [label="v3 ← a6", color=green];
// [Asm]   r34 [label="v84 ← a7", color=green];
// [Asm]   r22 [label="v47 ← a7", color=green];
// [Asm]   r14 [label="v30 ← a7", color=green];
// [Asm]   r50 [label="v67 ← a2", color=green];
// [Asm]   r51 [label="a0", color=blue];
// [Asm]   r30 [label="v10 ← a0", color=green];
// [Asm]   r45 [label="v73 ← a7", color=green];
// [Asm]   r25 [label="v44 ← t0", color=green];
// [Asm]   r55 [label="a2", color=blue];
// [Asm]   r2 [label="v62 ← a0", color=green];
// [Asm]   r16 [label="v57 ← a7", color=green];
// [Asm]   r18 [label="v54 ← a7", color=green];
// [Asm]   r19 [label="v32 ← a7", color=green];
// [Asm]   r21 [label="v51 ← a7", color=green];
// [Asm]   r60 [label="v5 ← a1", color=green];
// [Asm]   r3 -- r44;
// [Asm]   r52 -- r53;
// [Asm]   r8 -- r31;
// [Asm]   r58 -- r61;
// [Asm]   r33 -- r40;
// [Asm]   r6 -- r48;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r33;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r35;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r8 -- r36;
// [Asm]   r11 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r22;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r5 -- r18;
// [Asm]   r30 -- r61;
// [Asm]   r57 -- r59;
// [Asm]   r3 -- r9;
// [Asm]   r5 -- r47;
// [Asm]   r3 -- r11;
// [Asm]   r57 -- r58;
// [Asm]   r9 -- r26;
// [Asm]   r5 -- r29;
// [Asm]   r3 -- r37;
// [Asm]   r9 -- r17;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r9 -- r49;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r27;
// [Asm]   r30 -- r34;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r9 -- r14;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r3 -- r48;
// [Asm]   r33 -- r42;
// [Asm]   r8 -- r24;
// [Asm]   r8 -- r34;
// [Asm]   r52 -- r55;
// [Asm]   r3 -- r8;
// [Asm]   r9 -- r62;
// [Asm]   r6 -- r60;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r61 -- r62;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r16;
// [Asm]   r52 -- r62;
// [Asm]   r11 -- r13;
// [Asm]   r59 -- r60;
// [Asm]   r3 -- r39;
// [Asm]   r9 -- r23;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r59;
// [Asm]   r7 -- r38;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r54 -- r60;
// [Asm]   r8 -- r48;
// [Asm]   r41 -- r42;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r9 -- r20;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r49;
// [Asm]   r11 -- r15;
// [Asm]   r30 -- r50;
// [Asm]   r6 -- r50;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r9 -- r39;
// [Asm]   r3 -- r46;
// [Asm]   r14 -- r15;
// [Asm]   r8 -- r30;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r25;
// [Asm]   r59 -- r61;
// [Asm]   r4 -- r13;
// [Asm]   r58 -- r62;
// [Asm]   r3 -- r19;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r3 -- r25;
// [Asm]   r11 -- r20;
// [Asm]   r6 -- r62;
// [Asm]   r4 -- r23;
// [Asm]   r33 -- r49;
// [Asm]   r3 -- r38;
// [Asm]   r6 -- r41;
// [Asm]   r2 -- r4;
// [Asm]   r30 -- r35;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r9 -- r40;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r33;
// [Asm]   r8 -- r9;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r61;
// [Asm]   r11 -- r12;
// [Asm]   r5 -- r19;
// [Asm]   r33 -- r36;
// [Asm]   r6 -- r46;
// [Asm]   r11 -- r23;
// [Asm]   r9 -- r30;
// [Asm]   r11 -- r22;
// [Asm]   r33 -- r35;
// [Asm]   r30 -- r47;
// [Asm]   r4 -- r18;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r49;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r42;
// [Asm]   r8 -- r25;
// [Asm]   r33 -- r46;
// [Asm]   r8 -- r47;
// [Asm]   r33 -- r45;
// [Asm]   r5 -- r38;
// [Asm]   r6 -- r59;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r22;
// [Asm]   r58 -- r60;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r6 -- r19;
// [Asm]   r30 -- r43;
// [Asm]   r6 -- r27;
// [Asm]   r7 -- r22;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r28;
// [Asm]   r3 -- r21;
// [Asm]   r5 -- r9;
// [Asm]   r8 -- r15;
// [Asm]   r30 -- r48;
// [Asm]   r7 -- r15;
// [Asm]   r9 -- r24;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r5 -- r45;
// [Asm]   r9 -- r36;
// [Asm]   r3 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r7 -- r36;
// [Asm]   r33 -- r41;
// [Asm]   r7 -- r41;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r39;
// [Asm]   r5 -- r39;
// [Asm]   r8 -- r26;
// [Asm]   r5 -- r25;
// [Asm]   r7 -- r16;
// [Asm]   r6 -- r38;
// [Asm]   r9 -- r46;
// [Asm]   r7 -- r18;
// [Asm]   r9 -- r48;
// [Asm]   r2 -- r9;
// [Asm]   r30 -- r41;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r59 -- r62;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r23;
// [Asm]   r8 -- r50;
// [Asm]   r7 -- r46;
// [Asm]   r30 -- r62;
// [Asm]   r9 -- r21;
// [Asm]   r6 -- r52;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r21;
// [Asm]   r5 -- r41;
// [Asm]   r33 -- r43;
// [Asm]   r9 -- r25;
// [Asm]   r30 -- r42;
// [Asm]   r53 -- r58;
// [Asm]   r7 -- r21;
// [Asm]   r6 -- r36;
// [Asm]   r6 -- r47;
// [Asm]   r9 -- r27;
// [Asm]   r3 -- r43;
// [Asm]   r5 -- r8;
// [Asm]   r7 -- r40;
// [Asm]   r30 -- r38;
// [Asm]   r52 -- r59;
// [Asm]   r30 -- r40;
// [Asm]   r30 -- r31;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r42;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r9 -- r41;
// [Asm]   r3 -- r34;
// [Asm]   r9 -- r18;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r7 -- r34;
// [Asm]   r52 -- r61;
// [Asm]   r3 -- r30;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r53 -- r59;
// [Asm]   r9 -- r28;
// [Asm]   r8 -- r37;
// [Asm]   r3 -- r13;
// [Asm]   r58 -- r59;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r18;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r3 -- r40;
// [Asm]   r2 -- r8;
// [Asm]   r9 -- r59;
// [Asm]   r3 -- r10;
// [Asm]   r60 -- r62;
// [Asm]   r4 -- r12;
// [Asm]   r6 -- r31;
// [Asm]   r8 -- r44;
// [Asm]   r3 -- r27;
// [Asm]   r8 -- r39;
// [Asm]   r8 -- r29;
// [Asm]   r30 -- r39;
// [Asm]   r7 -- r61;
// [Asm]   r6 -- r45;
// [Asm]   r8 -- r22;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r21;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r3 -- r61;
// [Asm]   r52 -- r54;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r6 -- r61;
// [Asm]   r9 -- r47;
// [Asm]   r4 -- r9;
// [Asm]   r30 -- r46;
// [Asm]   r30 -- r33;
// [Asm]   r6 -- r32;
// [Asm]   r30 -- r49;
// [Asm]   r5 -- r34;
// [Asm]   r11 -- r25;
// [Asm]   r36 -- r37;
// [Asm]   r6 -- r58;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r52 -- r60;
// [Asm]   r55 -- r58;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r54 -- r59;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r11 -- r17;
// [Asm]   r9 -- r35;
// [Asm]   r9 -- r60;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r6 -- r49;
// [Asm]   r9 -- r15;
// [Asm]   r30 -- r44;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r52 -- r57;
// [Asm]   r9 -- r29;
// [Asm]   r6 -- r44;
// [Asm]   r8 -- r19;
// [Asm]   r7 -- r26;
// [Asm]   r46 -- r47;
// [Asm]   r3 -- r12;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r8 -- r43;
// [Asm]   r9 -- r42;
// [Asm]   r4 -- r20;
// [Asm]   r5 -- r44;
// [Asm]   r3 -- r47;
// [Asm]   r6 -- r16;
// [Asm]   r33 -- r39;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r38;
// [Asm]   r3 -- r28;
// [Asm]   r33 -- r48;
// [Asm]   r8 -- r33;
// [Asm]   r53 -- r60;
// [Asm]   r7 -- r9;
// [Asm]   r5 -- r16;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r40;
// [Asm]   r30 -- r37;
// [Asm]   r8 -- r49;
// [Asm]   r6 -- r24;
// [Asm]   r7 -- r28;
// [Asm]   r9 -- r44;
// [Asm]   r52 -- r56;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r33 -- r47;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r9 -- r34;
// [Asm]   r30 -- r45;
// [Asm]   r9 -- r38;
// [Asm]   r5 -- r46;
// [Asm]   r7 -- r60;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r53 -- r61;
// [Asm]   r9 -- r33;
// [Asm]   r5 -- r37;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r52 -- r58;
// [Asm]   r8 -- r40;
// [Asm]   r9 -- r43;
// [Asm]   r6 -- r42;
// [Asm]   r7 -- r11;
// [Asm]   r7 -- r47;
// [Asm]   r9 -- r37;
// [Asm]   r60 -- r61;
// [Asm]   r3 -- r41;
// [Asm]   r54 -- r58;
// [Asm]   r6 -- r17;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r43;
// [Asm]   r30 -- r60;
// [Asm]   r30 -- r36;
// [Asm]   r7 -- r58;
// [Asm]   r11 -- r26;
// [Asm]   r9 -- r16;
// [Asm]   r7 -- r31;
// [Asm]   r9 -- r32;
// [Asm]   r3 -- r36;
// [Asm]   r5 -- r27;
// [Asm]   r9 -- r19;
// [Asm]   r4 -- r17;
// [Asm]   r33 -- r44;
// [Asm]   r11 -- r27;
// [Asm]   r7 -- r50;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r46;
// [Asm]   r9 -- r50;
// [Asm]   r11 -- r21;
// [Asm]   r33 -- r38;
// [Asm]   r5 -- r40;
// [Asm]   r4 -- r19;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v27-> 1:v28-> 2:v62-> 3:v11-> 4:v25-> 5:v13-> 6:zero-> 7:v8-> 8:v12-> 9:v9-> 10:v63-> 11:v29-> 12:v59-> 13:v60-> 14:v30-> 15:v56-> 16:v57-> 17:v53-> 18:v54-> 19:v32-> 20:v50-> 21:v51-> 22:v47-> 23:v48-> 24:v34-> 25:v44-> 26:v45-> 27:v41-> 28:v42-> 29:v39-> 30:v10-> 31:v87-> 32:v88-> 33:v15-> 34:v84-> 35:v85-> 36:v16-> 37:v81-> 38:v82-> 39:v78-> 40:v79-> 41:v18-> 42:v75-> 43:v76-> 44:v72-> 45:v73-> 46:v20-> 47:v69-> 48:v70-> 49:v66-> 50:v67-> 62:v7-> 61:v6-> 60:v5-> 59:v4-> 58:v3-> 52:v2-> 53:a5-> 54:a4-> 57:a3-> 55:a2-> 56:a1-> 51:a0"
// [Asm]   comment = "v27<-a0;v20<-a7;v82<-a7;v15<-a2;v4<-a0;v9<-a6;v45<-a7;v69<-t0;v72<-a7;v60<-a7;v75<-t0;v25<-a2;v39<-a0;v85<-a7;v8<-a4;v63<-a0;v12<-a5;v13<-a3;v16<-a7;v56<-t0;v88<-a2;v34<-a7;v66<-a7;v76<-a7;v87<-a2;v78<-a7;v53<-a7;v2<-a7;v59<-a7;v70<-a7;v81<-t0;v50<-t0;v6<-a3;v48<-a7;v11<-a1;v41<-a7;v7<-a2;v28<-a0;v79<-a7;v42<-a0;v18<-a7;v29<-a0;v3<-a6;v84<-a7;v47<-a7;v30<-a7;v67<-a2;v10<-a0;v73<-a7;v44<-t0;v62<-a0;v57<-a7;v54<-a7;v32<-a7;v51<-a7;v5<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of loop31l0_0"];
// [Asm]   r0 [label="fv31 ← fa0", color=green];
// [Asm]   r6 [label="fv21 ← fa2", color=green];
// [Asm]   r5 [label="fv19 ← fa1", color=green];
// [Asm]   r4 [label="fv17 ← fa0", color=green];
// [Asm]   r1 [label="fv33 ← fa1", color=green];
// [Asm]   r3 [label="fv37 ← fa0", color=green];
// [Asm]   r7 [label="fv23 ← fa0", color=green];
// [Asm]   r2 [label="fv35 ← fa2", color=green];
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r6;
// [Asm]   r0 -- r1;
// [Asm]   r4 -- r5;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:fv31-> 1:fv33-> 2:fv35-> 3:fv37-> 4:fv17-> 5:fv19-> 6:fv21-> 7:fv23"
// [Asm]   comment = "fv31<-fa0;fv21<-fa2;fv19<-fa1;fv17<-fa0;fv33<-fa1;fv37<-fa0;fv23<-fa0;fv35<-fa2;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v27, zero ->   mv a0, zero
// [Asm] subst   blt v10, zero, .loop31l0_0_2 ->   blt a0, zero, .loop31l0_0_2
// [Asm] subst   j .loop31l0_0_6 ->   j .loop31l0_0_6
// [Asm] subst   slliw v62, v8, 3 ->   slliw a0, a4, 3
// [Asm] subst   add v63, v13, v62 ->   add a0, a3, a0
// [Asm] subst   ld v29, 0(v63) ->   ld a0, 0(a0)
// [Asm] subst   slliw v59, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v60, v13, v59 ->   add a7, a3, a7
// [Asm] subst   ld v30, 0(v60) ->   ld a7, 0(a7)
// [Asm] subst   slliw v56, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v57, v30, v56 ->   add a7, a7, t0
// [Asm] subst   fld fv31, 0(v57) ->   fld fa0, 0(a7)
// [Asm] subst   slliw v53, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v54, v11, v53 ->   add a7, a1, a7
// [Asm] subst   ld v32, 0(v54) ->   ld a7, 0(a7)
// [Asm] subst   slliw v50, v25, 3 ->   slliw t0, a2, 3
// [Asm] subst   add v51, v32, v50 ->   add a7, a7, t0
// [Asm] subst   fld fv33, 0(v51) ->   fld fa1, 0(a7)
// [Asm] subst   slliw v47, v25, 3 ->   slliw a7, a2, 3
// [Asm] subst   add v48, v12, v47 ->   add a7, a5, a7
// [Asm] subst   ld v34, 0(v48) ->   ld a7, 0(a7)
// [Asm] subst   slliw v44, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v45, v34, v44 ->   add a7, a7, t0
// [Asm] subst   fld fv35, 0(v45) ->   fld fa2, 0(a7)
// [Asm] subst   fmadd.d fv37, fv33, fv35, fv31 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v41, v9, 3 ->   slliw a7, a6, 3
// [Asm] subst   add v42, v29, v41 ->   add a0, a0, a7
// [Asm] subst   fsd fv37, 0(v42) ->   fsd fa0, 0(a0)
// [Asm] subst   addi v39, v25, -1 ->   addi a0, a2, -1
// [Asm] subst   j .loop31l0_0_0 ->   j .loop31l0_0_0
// [Asm] subst   slliw v87, v8, 3 ->   slliw a2, a4, 3
// [Asm] subst   add v88, v13, v87 ->   add a2, a3, a2
// [Asm] subst   ld v15, 0(v88) ->   ld a2, 0(a2)
// [Asm] subst   slliw v84, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v85, v13, v84 ->   add a7, a3, a7
// [Asm] subst   ld v16, 0(v85) ->   ld a7, 0(a7)
// [Asm] subst   slliw v81, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v82, v16, v81 ->   add a7, a7, t0
// [Asm] subst   fld fv17, 0(v82) ->   fld fa0, 0(a7)
// [Asm] subst   slliw v78, v8, 3 ->   slliw a7, a4, 3
// [Asm] subst   add v79, v11, v78 ->   add a7, a1, a7
// [Asm] subst   ld v18, 0(v79) ->   ld a7, 0(a7)
// [Asm] subst   slliw v75, v10, 3 ->   slliw t0, a0, 3
// [Asm] subst   add v76, v18, v75 ->   add a7, a7, t0
// [Asm] subst   fld fv19, 0(v76) ->   fld fa1, 0(a7)
// [Asm] subst   slliw v72, v10, 3 ->   slliw a7, a0, 3
// [Asm] subst   add v73, v12, v72 ->   add a7, a5, a7
// [Asm] subst   ld v20, 0(v73) ->   ld a7, 0(a7)
// [Asm] subst   slliw v69, v9, 3 ->   slliw t0, a6, 3
// [Asm] subst   add v70, v20, v69 ->   add a7, a7, t0
// [Asm] subst   fld fv21, 0(v70) ->   fld fa2, 0(a7)
// [Asm] subst   fmadd.d fv23, fv19, fv21, fv17 ->   fmadd.d fa0, fa1, fa2, fa0
// [Asm] subst   slliw v66, v9, 3 ->   slliw a7, a6, 3
// [Asm] subst   add v67, v15, v66 ->   add a2, a2, a7
// [Asm] subst   fsd fv23, 0(v67) ->   fsd fa0, 0(a2)
// [Asm] subst   addi v25, v10, -1 ->   addi a2, a0, -1
// [Asm] subst   blt v25, zero, .loop31l0_0_4 ->   blt a2, zero, .loop31l0_0_4
// [Asm] subst   mv v28, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v2, a0 ->   mv a7, a0
// [Asm] subst   mv v3, a1 ->   mv a6, a1
// [Asm] subst   mv v4, a2 ->   mv a0, a2
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, a4 ->   mv a3, a4
// [Asm] subst   mv v7, a5 ->   mv a2, a5
// [Asm] subst   mv v8, v2 ->   mv a4, a7
// [Asm] subst   mv v12, v6 ->   mv a5, a3
// [Asm] subst   mv v13, v7 ->   mv a3, a2
// [Asm] before colored: # leaf true
// [Asm] loop31l0_0:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop31l0_0_8:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop31l0_0_0:
// [Asm] # control
// [Asm]   blt v10, zero, .loop31l0_0_2  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v66, v25, fv23, v16, v69, v87, v79, v67, v78, fv19, v88, v73, v72, v82, v18, v75, v20, v85, v84, v81, v70, v15, fv17, fv21, v76], uses: [v25, fv23, v16, v69, v79, v13, v67, fv19, v12, v73, v82, zero, v20, v8, v81, fv21, v11, v66, v87, v10, v78, v88, v9, v72, v18, v75, v85, v84, v70, v15, fv17, v76], upward_exposed: [v11, v10, v13, zero, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop31l0_0_1:
// [Asm]   slliw v87, v8, 3  # live: [v11, v87, v10, zero, v13, v8, v12, v9]
// [Asm]   add v88, v13, v87  # live: [v11, v10, zero, v13, v8, v88, v12, v9]
// [Asm]   ld v15, 0(v88)  # live: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm]   slliw v84, v8, 3  # live: [v11, v10, zero, v13, v8, v84, v12, v15, v9]
// [Asm]   add v85, v13, v84  # live: [v11, v10, zero, v13, v8, v85, v12, v15, v9]
// [Asm]   ld v16, 0(v85)  # live: [v11, v16, v10, zero, v13, v8, v12, v15, v9]
// [Asm]   slliw v81, v9, 3  # live: [v11, v16, v10, zero, v13, v8, v81, v12, v15, v9]
// [Asm]   add v82, v16, v81  # live: [v11, v82, v10, zero, v13, v8, v12, v15, v9]
// [Asm]   fld fv17, 0(v82)  # live: [v11, v10, zero, v13, v8, v12, v15, v9, fv17]
// [Asm]   slliw v78, v8, 3  # live: [v11, v10, zero, v13, v78, v8, v12, v15, v9, fv17]
// [Asm]   add v79, v11, v78  # live: [v11, v10, zero, v13, v79, v8, v12, v15, v9, fv17]
// [Asm]   ld v18, 0(v79)  # live: [v11, v10, v18, zero, v13, v8, v12, v15, v9, fv17]
// [Asm]   slliw v75, v10, 3  # live: [v11, v10, v18, v75, zero, v13, v8, v12, v15, v9, fv17]
// [Asm]   add v76, v18, v75  # live: [v11, v10, v13, zero, v8, v12, v15, v9, fv17, v76]
// [Asm]   fld fv19, 0(v76)  # live: [v11, v10, v13, zero, v8, fv19, v12, v15, v9, fv17]
// [Asm]   slliw v72, v10, 3  # live: [v11, v72, v10, v13, zero, v8, fv19, v12, v15, v9, fv17]
// [Asm]   add v73, v12, v72  # live: [v11, v10, v13, zero, v8, fv19, v12, v15, v9, fv17, v73]
// [Asm]   ld v20, 0(v73)  # live: [v11, v10, v13, zero, v20, v8, fv19, v12, v15, v9, fv17]
// [Asm]   slliw v69, v9, 3  # live: [v11, v69, v10, v13, zero, v20, v8, fv19, v12, v15, v9, fv17]
// [Asm]   add v70, v20, v69  # live: [v11, v10, v13, zero, v8, fv19, v70, v12, v15, v9, fv17]
// [Asm]   fld fv21, 0(v70)  # live: [v11, v10, v13, zero, v8, fv19, v12, v15, v9, fv17, fv21]
// [Asm]   fmadd.d fv23, fv19, fv21, fv17  # live: [v11, fv23, v10, v13, zero, v8, v12, v15, v9]
// [Asm]   slliw v66, v9, 3  # live: [v11, v66, fv23, v10, v13, zero, v8, v12, v15, v9]
// [Asm]   add v67, v15, v66  # live: [v11, fv23, v10, v13, zero, v67, v8, v12, v9]
// [Asm]   fsd fv23, 0(v67)  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   addi v25, v10, -1  # live: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] # control
// [Asm]   blt v25, zero, .loop31l0_0_4  # live: [v11, v25, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v62, fv37, v53, v10, v42, v30, v32, v41, v44, fv35, v60, v39, v51, v63, v56, v48, fv31, v29, v50, fv33, v45, v47, v59, v57, v54, v34], uses: [v25, v13, v42, v32, v41, v12, v44, fv35, v60, v51, v63, v29, v50, v8, v47, v59, v57, v54, v34, v62, v11, fv37, v53, v30, v9, v39, v56, v48, fv31, v45, fv33], upward_exposed: [v11, v25, v13, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v25, v13, zero, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop31l0_0_3:
// [Asm]   slliw v62, v8, 3  # live: [v11, v25, v62, v13, zero, v8, v12, v9]
// [Asm]   add v63, v13, v62  # live: [v11, v25, v63, v13, zero, v8, v12, v9]
// [Asm]   ld v29, 0(v63)  # live: [v11, v25, v13, zero, v29, v8, v12, v9]
// [Asm]   slliw v59, v8, 3  # live: [v11, v25, v13, zero, v29, v8, v59, v12, v9]
// [Asm]   add v60, v13, v59  # live: [v11, v25, v13, zero, v29, v8, v12, v9, v60]
// [Asm]   ld v30, 0(v60)  # live: [v11, v25, v13, zero, v29, v30, v8, v12, v9]
// [Asm]   slliw v56, v9, 3  # live: [v11, v25, v56, v13, zero, v29, v30, v8, v12, v9]
// [Asm]   add v57, v30, v56  # live: [v11, v25, v13, zero, v29, v8, v12, v57, v9]
// [Asm]   fld fv31, 0(v57)  # live: [v11, v25, fv31, v13, zero, v29, v8, v12, v9]
// [Asm]   slliw v53, v8, 3  # live: [v11, v25, v53, fv31, v13, zero, v29, v8, v12, v9]
// [Asm]   add v54, v11, v53  # live: [v11, v25, fv31, v13, zero, v29, v8, v12, v9, v54]
// [Asm]   ld v32, 0(v54)  # live: [v11, v25, fv31, v13, zero, v29, v8, v32, v12, v9]
// [Asm]   slliw v50, v25, 3  # live: [v11, v25, fv31, v13, zero, v29, v50, v8, v32, v12, v9]
// [Asm]   add v51, v32, v50  # live: [v11, v25, fv31, v13, zero, v29, v8, v12, v9, v51]
// [Asm]   fld fv33, 0(v51)  # live: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, v9]
// [Asm]   slliw v47, v25, 3  # live: [v11, v25, fv31, v13, zero, v29, v8, fv33, v47, v12, v9]
// [Asm]   add v48, v12, v47  # live: [v11, v25, v48, fv31, v13, zero, v29, v8, fv33, v12, v9]
// [Asm]   ld v34, 0(v48)  # live: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, v9, v34]
// [Asm]   slliw v44, v9, 3  # live: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, v44, v9, v34]
// [Asm]   add v45, v34, v44  # live: [v11, v25, fv31, v13, zero, v29, v8, fv33, v45, v12, v9]
// [Asm]   fld fv35, 0(v45)  # live: [v11, v25, fv31, v13, zero, v29, v8, fv33, v12, fv35, v9]
// [Asm]   fmadd.d fv37, fv33, fv35, fv31  # live: [v11, v25, fv37, v13, zero, v29, v8, v12, v9]
// [Asm]   slliw v41, v9, 3  # live: [v11, v25, fv37, v13, zero, v29, v8, v41, v12, v9]
// [Asm]   add v42, v29, v41  # live: [v11, v25, fv37, v13, zero, v42, v8, v12, v9]
// [Asm]   fsd fv37, 0(v42)  # live: [v11, v25, v13, zero, v8, v12, v9]
// [Asm]   addi v39, v25, -1  # live: [v11, v13, zero, v8, v12, v9, v39]
// [Asm] # control
// [Asm]   mv v8, v8  # live: [v11, v13, zero, v8, v12, v9, v39]
// [Asm]   mv v9, v9  # live: [v11, v13, zero, v8, v12, v9, v39]
// [Asm]   mv v10, v39  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop31l0_0_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v28]
// [Asm] # block parameters: []
// [Asm] .loop31l0_0_2:
// [Asm] # control
// [Asm]   mv v28, zero  # live: [v28]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v28, a0], upward_exposed: [v28], params_defs: [v28]
// [Asm] # live_in: [v28], live_out: []
// [Asm] # block parameters: [v28]
// [Asm] .loop31l0_0_6:
// [Asm] # control
// [Asm]   mv a0, v28  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v27]
// [Asm] # block parameters: []
// [Asm] .loop31l0_0_4:
// [Asm] # control
// [Asm]   mv v27, zero  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v28], uses: [v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: [v28]
// [Asm] # block parameters: [v27]
// [Asm] .loop31l0_0_5:
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28]
// [Asm]   j .loop31l0_0_6  # live: [v28]
// [Asm] 
// [Asm] # leaf false
// [Asm] loop228l1_1:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_11:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v10, zero], upward_exposed: [v10, zero], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop228l1_1_0:
// [Asm] # control
// [Asm]   blt v10, zero, .loop228l1_1_2  # live: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v15, v9, zero], upward_exposed: [v9, zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_1:
// [Asm]   addi v15, v9, -1  # live: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] # control
// [Asm]   blt v15, zero, .loop228l1_1_4  # live: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v58, v22, a1, v44, v28, fa1, v64, fa2, fv25, ft6, v50, v27, a4, v20, fa6, a6, v59, ft10, ft5, v62, ft4, v49, ft9, fa4, ft2, v43, v17, v52, a3, a7, fa7, fa3, ft3, t2, v61, v55, fv23, t1, fv19, ft0, ft1, v29, v47, fv21, ft7, v46, v53, a5, a0, v65, a2, ft8, t3, t0, v18, v56, fa5, fa0, t4], uses: [fv23, v58, v13, v22, fv19, a1, v12, v44, v28, v64, fv25, v20, v50, v27, a4, v8, v59, v47, fv21, v62, v11, v46, v49, v10, v53, a5, a0, v65, a2, v43, v17, v52, a3, v18, v56, v61, v15, v55], upward_exposed: [v11, v10, v13, v8, v15, v12], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_3:
// [Asm]   slliw v64, v8, 3  # live: [v11, v10, zero, v13, v8, v15, v12, v9, v64]
// [Asm]   add v65, v13, v64  # live: [v11, v10, zero, v13, v8, v65, v15, v12, v9]
// [Asm]   ld v17, 0(v65)  # live: [v11, v10, zero, v13, v8, v17, v15, v12, v9]
// [Asm]   slliw v61, v8, 3  # live: [v11, v10, zero, v13, v8, v17, v15, v12, v61, v9]
// [Asm]   add v62, v13, v61  # live: [v11, v62, v10, zero, v13, v8, v17, v15, v12, v9]
// [Asm]   ld v18, 0(v62)  # live: [v11, v10, v18, zero, v13, v8, v17, v15, v12, v9]
// [Asm]   slliw v58, v10, 3  # live: [v11, v58, v10, v18, zero, v13, v8, v17, v15, v12, v9]
// [Asm]   add v59, v18, v58  # live: [v11, v10, zero, v13, v8, v59, v17, v15, v12, v9]
// [Asm]   fld fv19, 0(v59)  # live: [v11, v10, zero, v13, v8, fv19, v17, v15, v12, v9]
// [Asm]   slliw v55, v8, 3  # live: [v11, v10, zero, v13, v8, fv19, v17, v15, v12, v9, v55]
// [Asm]   add v56, v11, v55  # live: [v11, v10, v56, zero, v13, v8, fv19, v17, v15, v12, v9]
// [Asm]   ld v20, 0(v56)  # live: [v11, v10, zero, v13, v20, v8, fv19, v17, v15, v12, v9]
// [Asm]   slliw v52, v15, 3  # live: [v11, v10, zero, v13, v20, v8, fv19, v17, v15, v12, v52, v9]
// [Asm]   add v53, v20, v52  # live: [v11, v10, v53, zero, v13, v8, fv19, v17, v15, v12, v9]
// [Asm]   fld fv21, 0(v53)  # live: [v11, v10, zero, v13, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm]   slliw v49, v15, 3  # live: [v11, v10, v49, zero, v13, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm]   add v50, v12, v49  # live: [v11, v10, zero, v13, v50, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm]   ld v22, 0(v50)  # live: [v11, v10, zero, v13, v22, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm]   slliw v46, v10, 3  # live: [v11, v46, v10, zero, v13, v22, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm]   add v47, v22, v46  # live: [v11, v10, zero, v13, v8, fv19, v47, v17, v15, v12, v9, fv21]
// [Asm]   fld fv23, 0(v47)  # live: [v11, fv23, v10, zero, v13, v8, fv19, v17, v15, v12, v9, fv21]
// [Asm]   fmadd.d fv25, fv21, fv23, fv19  # live: [v11, v10, zero, v13, fv25, v8, v17, v15, v12, v9]
// [Asm]   slliw v43, v10, 3  # live: [v11, v10, zero, v13, fv25, v8, v17, v43, v15, v12, v9]
// [Asm]   add v44, v17, v43  # live: [v11, v10, zero, v13, fv25, v8, v12, v15, v44, v9]
// [Asm]   fsd fv25, 0(v44)  # live: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm]   addi v27, v15, -1  # live: [v11, v10, zero, v13, v27, v8, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v13, v27, v8, v12, v9]
// [Asm]   mv a0, v8  # live: [v11, v10, zero, v13, a0, v27, v8, v12, v9]
// [Asm]   mv a1, v10  # live: [v11, v10, zero, v13, a0, v27, v8, a1, v12, v9]
// [Asm]   mv a2, v27  # live: [v11, v10, zero, v13, a0, v8, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, zero, v13, a0, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   call loop31l0_0  # live: [v11, v10, zero, v13, a0, v8, v12, v9]
// [Asm]   mv v28, a0  # live: [v11, v10, zero, v13, v8, v12, v28, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v13, v8, v12, v28, v9]
// [Asm] # control
// [Asm]   mv v29, v28  # live: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v30], uses: [v10, zero, v30], upward_exposed: [v10, zero], params_defs: [v29]
// [Asm] # live_in: [v11, v10, v29, zero, v13, v8, v12, v9], live_out: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] # block parameters: [v29]
// [Asm] .loop228l1_1_5:
// [Asm]   addi v30, v10, -1  # live: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] # control
// [Asm]   blt v30, zero, .loop228l1_1_7  # live: [v11, v13, zero, v30, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v34, ft7, ft4, ft9, v10, a5, fa4, a0, v36, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, v35, t4, t2], uses: [v11, a5, v13, a0, v30, v36, a2, a1, a3, v12, v9, a4, v8, v34], upward_exposed: [v11, v13, v30, v8, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v13, zero, v30, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_6:
// [Asm]   addi v34, v9, -1  # live: [v11, v13, zero, v30, v8, v12, v9, v34]
// [Asm]   # save_ctx2  # live: [v11, v13, zero, v30, v8, v12, v9, v34]
// [Asm]   mv a0, v8  # live: [v11, v13, zero, a0, v30, v8, v12, v9, v34]
// [Asm]   mv a1, v30  # live: [v11, v13, zero, a0, v30, v8, a1, v12, v9, v34]
// [Asm]   mv a2, v34  # live: [v11, v13, zero, a0, v30, v8, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v13, zero, a0, v30, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v13, zero, a0, v30, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, a5, v13, zero, a0, v30, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   call loop31l0_0  # live: [v11, v13, zero, a0, v30, v8, v12, v9]
// [Asm]   mv v35, a0  # live: [v11, v13, zero, v30, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v13, zero, v30, v8, v12, v9]
// [Asm]   addi v36, v30, -1  # live: [v11, v13, zero, v8, v36, v12, v9]
// [Asm] # control
// [Asm]   mv v8, v8  # live: [v11, v13, zero, v8, v36, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v13, zero, v8, v36, v12, v9]
// [Asm]   mv v10, v36  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop228l1_1_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_2:
// [Asm] # control
// [Asm]   mv v33, zero  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v33, a0], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v33], live_out: []
// [Asm] # block parameters: [v33]
// [Asm] .loop228l1_1_9:
// [Asm] # control
// [Asm]   mv a0, v33  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v29], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_4:
// [Asm] # control
// [Asm]   mv v29, zero  # live: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm]   j .loop228l1_1_5  # live: [v11, v10, v29, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v32], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v32]
// [Asm] # block parameters: []
// [Asm] .loop228l1_1_7:
// [Asm] # control
// [Asm]   mv v32, zero  # live: [v32]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v32], upward_exposed: [v32], params_defs: [v32]
// [Asm] # live_in: [v32], live_out: [v33]
// [Asm] # block parameters: [v32]
// [Asm] .loop228l1_1_8:
// [Asm] # control
// [Asm]   mv v33, v32  # live: [v33]
// [Asm]   j .loop228l1_1_9  # live: [v33]
// [Asm] 
// [Asm] # leaf false
// [Asm] main85l3_4:
// [Asm] # block info: defs: [fv86, v91, v22, fv89, a1, s11, v44, fa1, fv95, fv92, fa2, fv58, v20, v50, a6, ft10, v59, fv119, ft4, v5, ft9, v123, fv104, a7, fv43, fv116, v40, v14, v16, v42, ft0, ft1, v32, v41, v12, v106, fv98, v97, v8, v47, v34, v121, v30, fv101, a2, v9, ft8, t3, fv137, v112, fa5, v56, v85, t4, v80, v15, v131, v2, fv113, v28, v60, v51, ft6, fa6, a4, ft5, v54, v49, fa4, v133, ft2, a3, v52, fa7, fa3, fv110, ft3, v45, t2, fv53, v55, v3, t1, v26, fv107, v115, v109, v126, v103, v4, v81, v128, v57, ft7, v11, v46, a5, a0, v36, v88, fv48, v24, v118, t0, v94, v18, fa0, v38, v83, v100], uses: [fv86, v91, fv113, v22, fv89, a1, s11, v28, v44, fv95, fv92, fv58, v20, a4, v59, fv119, v54, v5, v49, v123, v133, fv104, a3, v52, fv110, fv43, fv116, fv53, v3, v40, v14, v16, v26, v42, v32, fv107, v115, v109, v106, fv98, zero, v126, v97, v8, v103, v4, v81, v47, v128, v57, v34, v11, v121, a5, a0, v30, v36, v88, fv48, fv101, a2, v24, v118, v112, v94, v18, v85, v38, v80, v83, v131, v100, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main85l3_4_0:
// [Asm]   # save_ctx1  # live: [zero, s11]
// [Asm]   addi v2, s11, 0  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, s11, v2]
// [Asm]   fmv.d.x fv137, zero  # live: [zero, s11, v2]
// [Asm]   addi v3, s11, -16  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, s11, v3]
// [Asm]   sd v2, 0(v3)  # live: [v2, zero, s11, v3]
// [Asm]   sd v2, 8(v3)  # live: [v2, zero, s11, v3]
// [Asm]   li v133, 2  # live: [v2, zero, v133, s11, v3]
// [Asm]   addi v8, v133, -1  # live: [v2, zero, v8, s11, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v8, s11, v3]
// [Asm]   mv a0, v8  # live: [v2, zero, a0, s11, v3]
// [Asm]   li v131, 3  # live: [v2, zero, a0, s11, v131, v3]
// [Asm]   mv a1, v131  # live: [v2, zero, a0, a1, s11, v3]
// [Asm]   mv a2, v3  # live: [v2, zero, a0, a2, a1, s11, v3]
// [Asm]   call init_arr89l4_3  # live: [v2, zero, a0, s11, v3]
// [Asm]   mv v9, a0  # live: [v2, zero, s11, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, s11, v3]
// [Asm]   addi v4, s11, -24  # live: [v2, zero, v4, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, zero, v4, s11, v3]
// [Asm]   sd v2, 0(v4)  # live: [v2, zero, v4, s11, v3]
// [Asm]   sd v2, 8(v4)  # live: [v2, zero, v4, s11, v3]
// [Asm]   sd v2, 16(v4)  # live: [v2, zero, v4, s11, v3]
// [Asm]   li v128, 3  # live: [v2, zero, v4, s11, v128, v3]
// [Asm]   addi v11, v128, -1  # live: [v2, v11, zero, v4, s11, v3]
// [Asm]   # save_ctx2  # live: [v2, v11, zero, v4, s11, v3]
// [Asm]   mv a0, v11  # live: [v2, zero, a0, v4, s11, v3]
// [Asm]   li v126, 2  # live: [v2, zero, a0, v126, v4, s11, v3]
// [Asm]   mv a1, v126  # live: [v2, zero, a0, v4, a1, s11, v3]
// [Asm]   mv a2, v4  # live: [v2, zero, a0, v4, a2, a1, s11, v3]
// [Asm]   call init_arr89l4_3  # live: [v2, zero, a0, v4, s11, v3]
// [Asm]   mv v12, a0  # live: [v2, zero, v4, s11, v3]
// [Asm]   # restore_ctx2  # live: [v2, zero, v4, s11, v3]
// [Asm]   addi v5, s11, -16  # live: [v2, v5, zero, v4, v3]
// [Asm]   andi s11, v5, -8  # live: [v2, v5, zero, v4, v3]
// [Asm]   sd v2, 0(v5)  # live: [v2, v5, zero, v4, v3]
// [Asm]   sd v2, 8(v5)  # live: [v5, zero, v4, v3]
// [Asm]   li v123, 2  # live: [v5, zero, v123, v4, v3]
// [Asm]   addi v14, v123, -1  # live: [v5, v14, zero, v4, v3]
// [Asm]   # save_ctx2  # live: [v5, v14, zero, v4, v3]
// [Asm]   mv a0, v14  # live: [v5, zero, a0, v4, v3]
// [Asm]   li v121, 2  # live: [v5, v121, zero, a0, v4, v3]
// [Asm]   mv a1, v121  # live: [v5, zero, a0, v4, a1, v3]
// [Asm]   mv a2, v5  # live: [v5, zero, a0, v4, a2, a1, v3]
// [Asm]   call init_arr89l4_3  # live: [v5, zero, a0, v4, v3]
// [Asm]   mv v15, a0  # live: [v5, zero, v4, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v4, v3]
// [Asm]   ld v16, 0(v3)  # live: [v5, v16, zero, v4, v3]
// [Asm]   li v118, 4607182418800017408  # live: [v118, v5, v16, zero, v4, v3]
// [Asm]   fmv.d.x fv119, v118  # live: [v5, v16, zero, v4, fv119, v3]
// [Asm]   fsd fv119, 0(v16)  # live: [v5, zero, v4, v3]
// [Asm]   ld v18, 0(v3)  # live: [v5, v18, zero, v4, v3]
// [Asm]   li v115, 4611686018427387904  # live: [v115, v5, v18, zero, v4, v3]
// [Asm]   fmv.d.x fv116, v115  # live: [v5, v18, zero, fv116, v4, v3]
// [Asm]   fsd fv116, 8(v18)  # live: [v5, zero, v4, v3]
// [Asm]   ld v20, 0(v3)  # live: [v5, zero, v20, v4, v3]
// [Asm]   li v112, 4613937818241073152  # live: [v112, v5, zero, v20, v4, v3]
// [Asm]   fmv.d.x fv113, v112  # live: [v5, zero, fv113, v20, v4, v3]
// [Asm]   fsd fv113, 16(v20)  # live: [v5, zero, v4, v3]
// [Asm]   ld v22, 8(v3)  # live: [v5, zero, v22, v4, v3]
// [Asm]   li v109, 4616189618054758400  # live: [v109, v5, zero, v22, v4, v3]
// [Asm]   fmv.d.x fv110, v109  # live: [v5, zero, fv110, v22, v4, v3]
// [Asm]   fsd fv110, 0(v22)  # live: [v5, zero, v4, v3]
// [Asm]   ld v24, 8(v3)  # live: [v5, zero, v4, v24, v3]
// [Asm]   li v106, 4617315517961601024  # live: [v106, v5, zero, v4, v24, v3]
// [Asm]   fmv.d.x fv107, v106  # live: [v5, zero, v4, fv107, v24, v3]
// [Asm]   fsd fv107, 8(v24)  # live: [v5, zero, v4, v3]
// [Asm]   ld v26, 8(v3)  # live: [v5, zero, v26, v4, v3]
// [Asm]   li v103, 4618441417868443648  # live: [v5, zero, v26, v103, v4, v3]
// [Asm]   fmv.d.x fv104, v103  # live: [v5, zero, v26, v4, fv104, v3]
// [Asm]   fsd fv104, 16(v26)  # live: [v5, zero, v4, v3]
// [Asm]   ld v28, 0(v4)  # live: [v5, zero, v4, v28, v3]
// [Asm]   li v100, 4619567317775286272  # live: [v5, zero, v4, v28, v100, v3]
// [Asm]   fmv.d.x fv101, v100  # live: [v5, zero, v4, fv101, v28, v3]
// [Asm]   fsd fv101, 0(v28)  # live: [v5, zero, v4, v3]
// [Asm]   ld v30, 0(v4)  # live: [v5, zero, v30, v4, v3]
// [Asm]   li v97, 4620693217682128896  # live: [v5, zero, v97, v30, v4, v3]
// [Asm]   fmv.d.x fv98, v97  # live: [fv98, v5, zero, v30, v4, v3]
// [Asm]   fsd fv98, 8(v30)  # live: [v5, zero, v4, v3]
// [Asm]   ld v32, 8(v4)  # live: [v5, zero, v4, v32, v3]
// [Asm]   li v94, 4621256167635550208  # live: [v94, v5, zero, v4, v32, v3]
// [Asm]   fmv.d.x fv95, v94  # live: [v5, zero, v4, v32, fv95, v3]
// [Asm]   fsd fv95, 0(v32)  # live: [v5, zero, v4, v3]
// [Asm]   ld v34, 8(v4)  # live: [v5, zero, v4, v34, v3]
// [Asm]   li v91, 4621819117588971520  # live: [v5, v91, zero, v4, v34, v3]
// [Asm]   fmv.d.x fv92, v91  # live: [v5, fv92, zero, v4, v34, v3]
// [Asm]   fsd fv92, 8(v34)  # live: [v5, zero, v4, v3]
// [Asm]   ld v36, 16(v4)  # live: [v5, zero, v36, v4, v3]
// [Asm]   li v88, 4622382067542392832  # live: [v5, zero, v36, v88, v4, v3]
// [Asm]   fmv.d.x fv89, v88  # live: [v5, zero, v36, fv89, v4, v3]
// [Asm]   fsd fv89, 0(v36)  # live: [v5, zero, v4, v3]
// [Asm]   ld v38, 16(v4)  # live: [v5, zero, v4, v38, v3]
// [Asm]   li v85, 4622945017495814144  # live: [v5, zero, v85, v4, v38, v3]
// [Asm]   fmv.d.x fv86, v85  # live: [fv86, v5, zero, v4, v38, v3]
// [Asm]   fsd fv86, 8(v38)  # live: [v5, zero, v4, v3]
// [Asm]   li v83, 2  # live: [v5, zero, v4, v83, v3]
// [Asm]   addi v40, v83, -1  # live: [v40, v5, zero, v4, v3]
// [Asm]   # save_ctx2  # live: [v40, v5, zero, v4, v3]
// [Asm]   mv a0, v40  # live: [v5, zero, a0, v4, v3]
// [Asm]   li v80, 3  # live: [v5, zero, a0, v4, v80, v3]
// [Asm]   mv a1, v80  # live: [v5, zero, a0, v4, a1, v3]
// [Asm]   li v81, 2  # live: [v5, zero, a0, v4, v81, a1, v3]
// [Asm]   mv a2, v81  # live: [v5, zero, a0, a2, v4, a1, v3]
// [Asm]   mv a3, v3  # live: [v5, zero, a0, a2, v4, a1, a3]
// [Asm]   mv a4, v4  # live: [v5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv a5, v5  # live: [v5, a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call loop148l2_2  # live: [v5, zero, a0]
// [Asm]   mv v41, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   ld v42, 0(v5)  # live: [v5, zero, v42]
// [Asm]   fld fv43, 0(v42)  # live: [v5, zero, fv43]
// [Asm]   fcvt.w.d v44, fv43, rtz  # live: [v5, v44, zero]
// [Asm]   # save_ctx2  # live: [v5, v44, zero]
// [Asm]   mv a0, v44  # live: [v5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v5, zero, a0]
// [Asm]   mv v45, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   # save_ctx2  # live: [v5, zero]
// [Asm]   call minimbt_print_endline  # live: [v5, zero, a0]
// [Asm]   mv v46, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   ld v47, 0(v5)  # live: [v47, v5, zero]
// [Asm]   fld fv48, 8(v47)  # live: [fv48, v5, zero]
// [Asm]   fcvt.w.d v49, fv48, rtz  # live: [v5, v49, zero]
// [Asm]   # save_ctx2  # live: [v5, v49, zero]
// [Asm]   mv a0, v49  # live: [v5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v5, zero, a0]
// [Asm]   mv v50, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   # save_ctx2  # live: [v5, zero]
// [Asm]   call minimbt_print_endline  # live: [v5, zero, a0]
// [Asm]   mv v51, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   ld v52, 8(v5)  # live: [v5, v52, zero]
// [Asm]   fld fv53, 0(v52)  # live: [v5, fv53, zero]
// [Asm]   fcvt.w.d v54, fv53, rtz  # live: [v5, zero, v54]
// [Asm]   # save_ctx2  # live: [v5, zero, v54]
// [Asm]   mv a0, v54  # live: [v5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v5, zero, a0]
// [Asm]   mv v55, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   # save_ctx2  # live: [v5, zero]
// [Asm]   call minimbt_print_endline  # live: [v5, zero, a0]
// [Asm]   mv v56, a0  # live: [v5, zero]
// [Asm]   # restore_ctx2  # live: [v5, zero]
// [Asm]   ld v57, 8(v5)  # live: [v57, zero]
// [Asm]   fld fv58, 8(v57)  # live: [zero, fv58]
// [Asm]   fcvt.w.d v59, fv58, rtz  # live: [v59, zero]
// [Asm]   # save_ctx2  # live: [v59, zero]
// [Asm]   mv a0, v59  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v60, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main85l3_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] init_arr89l4_3:
// [Asm] # block info: defs: [v3, v7, v8, v4, v9, v2], uses: [v3, a2, v4, a1, a0, v2], upward_exposed: [a2, a1, a0], params_defs: []
// [Asm] # live_in: [a2, a1, s11, a0, zero], live_out: [v8, s11, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_8:
// [Asm]   # save_ctx1  # live: [a2, a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, s11, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, s11, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, s11, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v7], upward_exposed: [zero, v7], params_defs: [v8, v9, v7]
// [Asm] # live_in: [v7, s11, v9, zero, v8], live_out: [v7, s11, zero, v9, v8]
// [Asm] # block parameters: [v7, v8, v9]
// [Asm] .init_arr89l4_3_0:
// [Asm] # control
// [Asm]   blt v7, zero, .init_arr89l4_3_2  # live: [v8, s11, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, v28, fa1, fa2, v29, ft6, a4, fa6, v27, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, fv31, ft3, fa0, t4, t2], uses: [v5, a0, v13, v7, a1, s11, v28, v9, fv31, v29, zero, v27, v8, fa0], upward_exposed: [v7, s11, zero, v9, v8], params_defs: []
// [Asm] # live_in: [v8, s11, zero, v9, v7], live_out: [v8, s11, zero, v13, v9]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_1:
// [Asm]   slliw v29, v8, 3  # live: [zero, v29, v7, v8, s11, v9]
// [Asm]   sub v5, s11, v29  # live: [v5, zero, v7, v8, v9]
// [Asm]   andi s11, v5, -8  # live: [v5, zero, v7, v8, s11, v9]
// [Asm]   fmv.d.x fv31, zero  # live: [v5, fv31, zero, v7, v8, s11, v9]
// [Asm]   mv a1, v8  # live: [v5, fv31, zero, v7, v8, a1, s11, v9]
// [Asm]   mv a0, v5  # live: [v5, fv31, zero, a0, v7, v8, a1, s11, v9]
// [Asm]   fmv.d fa0, fv31  # live: [v5, zero, a0, v7, v8, fa0, a1, s11, v9]
// [Asm]   call memsetf64  # live: [v5, zero, v7, v8, s11, v9]
// [Asm]   slliw v27, v7, 3  # live: [v5, zero, v27, v7, v8, s11, v9]
// [Asm]   add v28, v9, v27  # live: [v5, zero, v7, v8, s11, v28, v9]
// [Asm]   sd v5, 0(v28)  # live: [v7, s11, zero, v9, v8]
// [Asm]   addi v13, v7, -1  # live: [v8, s11, zero, v13, v9]
// [Asm] # control
// [Asm]   blt v13, zero, .init_arr89l4_3_4  # live: [v8, s11, zero, v13, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v22, v7, ft0, ft1, a1, s11, fa1, fa2, fv25, ft6, a4, fa6, a6, v19, ft5, ft10, v6, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, v23, fa0, t4, t2], uses: [v21, a0, v13, v22, a1, s11, v9, zero, fv25, v23, fa0, v8, v19, v6], upward_exposed: [v8, s11, zero, v13, v9], params_defs: []
// [Asm] # live_in: [v8, s11, zero, v13, v9], live_out: [v8, s11, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_3:
// [Asm]   slliw v23, v8, 3  # live: [zero, v13, v23, v8, s11, v9]
// [Asm]   sub v6, s11, v23  # live: [zero, v13, v8, v6, v9]
// [Asm]   andi s11, v6, -8  # live: [zero, v13, v8, v6, s11, v9]
// [Asm]   fmv.d.x fv25, zero  # live: [zero, v13, fv25, v8, v6, s11, v9]
// [Asm]   mv a1, v8  # live: [zero, v13, fv25, v8, v6, a1, s11, v9]
// [Asm]   mv a0, v6  # live: [zero, v13, a0, fv25, v8, v6, a1, s11, v9]
// [Asm]   fmv.d fa0, fv25  # live: [zero, v13, a0, fa0, v8, v6, a1, s11, v9]
// [Asm]   call memsetf64  # live: [zero, v13, v8, v6, s11, v9]
// [Asm]   slliw v21, v13, 3  # live: [v21, zero, v13, v8, v6, s11, v9]
// [Asm]   add v22, v9, v21  # live: [zero, v13, v22, v8, v6, s11, v9]
// [Asm]   sd v6, 0(v22)  # live: [v8, s11, v9, zero, v13]
// [Asm]   addi v19, v13, -1  # live: [v19, s11, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v7, v19  # live: [v7, s11, v9, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, s11, v9, zero, v8]
// [Asm]   mv v9, v9  # live: [v7, s11, v9, zero, v8]
// [Asm]   j .init_arr89l4_3_0  # live: [v7, s11, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_2:
// [Asm] # control
// [Asm]   mv v16, zero  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v16, a0], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: []
// [Asm] # block parameters: [v16]
// [Asm] .init_arr89l4_3_6:
// [Asm] # control
// [Asm]   mv a0, v16  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v15]
// [Asm] # block parameters: []
// [Asm] .init_arr89l4_3_4:
// [Asm] # control
// [Asm]   mv v15, zero  # live: [v15]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v15], upward_exposed: [v15], params_defs: [v15]
// [Asm] # live_in: [v15], live_out: [v16]
// [Asm] # block parameters: [v15]
// [Asm] .init_arr89l4_3_5:
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v16]
// [Asm]   j .init_arr89l4_3_6  # live: [v16]
// [Asm] 
// [Asm] # leaf false
// [Asm] loop148l2_2:
// [Asm] # block info: defs: [v2, v11, v5, v10, v13, v7, v8, v4, v6, v12, v9, v3], uses: [v3, v5, a5, a0, a4, v7, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_11:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv v9, v3  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm]   mv v10, v4  # live: [v5, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v11, v5  # live: [v11, v10, zero, v8, v7, v6, v9]
// [Asm]   mv v12, v6  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm]   mv v13, v7  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v8], upward_exposed: [zero, v8], params_defs: [v11, v10, v12, v9, v13, v8]
// [Asm] # live_in: [v11, v10, v13, zero, v8, v12, v9], live_out: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] # block parameters: [v8, v9, v10, v11, v12, v13]
// [Asm] .loop148l2_2_0:
// [Asm] # control
// [Asm]   blt v8, zero, .loop148l2_2_2  # live: [v11, v10, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v15], uses: [v10, v15, zero], upward_exposed: [v10, zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_1:
// [Asm]   addi v15, v10, -1  # live: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] # control
// [Asm]   blt v15, zero, .loop148l2_2_4  # live: [v11, v10, v13, zero, v8, v15, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft5, ft10, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, a5, v13, a0, a2, v17, a1, v12, a3, v9, a4, v20, v8, v19, v15], upward_exposed: [v11, v13, v8, v15, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v8, v15, v12, v9], live_out: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_3:
// [Asm]   addi v17, v9, -1  # live: [v11, v10, v13, v17, v12, v9, zero, v8, v15]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, v17, v12, v9, zero, v8, v15]
// [Asm]   mv a0, v8  # live: [v11, v10, v13, a0, v17, v12, v9, zero, v8, v15]
// [Asm]   mv a1, v15  # live: [v11, v10, v13, a0, a1, v17, v12, v9, zero, v8, v15]
// [Asm]   mv a2, v17  # live: [v11, v10, v13, a0, a2, a1, v12, v9, zero, v8, v15]
// [Asm]   mv a3, v11  # live: [v11, v10, v13, a0, a2, a1, a3, v12, v9, zero, v8, v15]
// [Asm]   mv a4, v12  # live: [v11, v10, v13, a0, a2, a1, a3, v12, v9, zero, a4, v8, v15]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, v13, a0, a2, a1, a3, v12, v9, zero, a4, v8, v15]
// [Asm]   call loop31l0_0  # live: [v11, v10, zero, v13, a0, v8, v12, v15, v9]
// [Asm]   mv v18, a0  # live: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v13, v8, v12, v15, v9]
// [Asm]   addi v19, v15, -1  # live: [v11, v10, zero, v13, v8, v19, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, zero, v13, v8, v19, v12, v9]
// [Asm]   mv a0, v8  # live: [v11, v10, zero, v13, a0, v8, v19, v12, v9]
// [Asm]   mv a1, v9  # live: [v11, v10, zero, v13, a0, v8, v19, a1, v12, v9]
// [Asm]   mv a2, v19  # live: [v11, v10, zero, v13, a0, v8, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, zero, v13, a0, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, zero, v13, a0, a4, v8, a2, a1, a3, v12, v9]
// [Asm]   call loop228l1_1  # live: [v11, v10, zero, v13, a0, v8, v12, v9]
// [Asm]   mv v20, a0  # live: [v11, v10, zero, v13, v20, v8, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, zero, v13, v20, v8, v12, v9]
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [zero, v22, v8], upward_exposed: [zero, v8], params_defs: [v21]
// [Asm] # live_in: [v11, v21, v10, zero, v13, v8, v12, v9], live_out: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] # block parameters: [v21]
// [Asm] .loop148l2_2_5:
// [Asm]   addi v22, v8, -1  # live: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] # control
// [Asm]   blt v22, zero, .loop148l2_2_7  # live: [v11, v10, v13, zero, v22, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [t1, v26, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, v27, v8, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, a5, v26, v13, a0, v22, a2, a1, a3, v12, v28, v9, a4], upward_exposed: [v11, v10, v13, v22, v12, v9], params_defs: []
// [Asm] # live_in: [v11, v10, v13, zero, v22, v12, v9], live_out: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_6:
// [Asm]   addi v26, v10, -1  # live: [v11, v10, v13, zero, v26, v22, v12, v9]
// [Asm]   # save_ctx2  # live: [v11, v10, v13, zero, v26, v22, v12, v9]
// [Asm]   mv a0, v22  # live: [v11, v10, v13, zero, a0, v26, v22, v12, v9]
// [Asm]   mv a1, v9  # live: [v11, v10, v13, zero, a0, v26, v22, a1, v12, v9]
// [Asm]   mv a2, v26  # live: [v11, v10, v13, zero, a0, v22, a2, a1, v12, v9]
// [Asm]   mv a3, v11  # live: [v11, v10, v13, zero, a0, v22, a2, a1, a3, v12, v9]
// [Asm]   mv a4, v12  # live: [v11, v10, v13, zero, a0, v22, a4, a2, a1, a3, v12, v9]
// [Asm]   mv a5, v13  # live: [v11, v10, a5, v13, zero, a0, v22, a4, a2, a1, a3, v12, v9]
// [Asm]   call loop228l1_1  # live: [v11, v10, v13, zero, a0, v22, v12, v9]
// [Asm]   mv v27, a0  # live: [v11, v10, v13, zero, v22, v12, v9]
// [Asm]   # restore_ctx2  # live: [v11, v10, v13, zero, v22, v12, v9]
// [Asm]   addi v28, v22, -1  # live: [v11, v10, v13, zero, v12, v28, v9]
// [Asm] # control
// [Asm]   mv v8, v28  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v11, v11  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v12, v12  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   mv v13, v13  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm]   j .loop148l2_2_0  # live: [v11, v10, v13, zero, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v25]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_2:
// [Asm] # control
// [Asm]   mv v25, zero  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v25, a0], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: []
// [Asm] # block parameters: [v25]
// [Asm] .loop148l2_2_9:
// [Asm] # control
// [Asm]   mv a0, v25  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v13, v8, v12, v9], live_out: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_4:
// [Asm] # control
// [Asm]   mv v21, zero  # live: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm]   j .loop148l2_2_5  # live: [v11, v21, v10, zero, v13, v8, v12, v9]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v24]
// [Asm] # block parameters: []
// [Asm] .loop148l2_2_7:
// [Asm] # control
// [Asm]   mv v24, zero  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .loop148l2_2_8:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm]   j .loop148l2_2_9  # live: [v25]
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("loop3", Unit), args: [("i", Int), ("j", Int), ("k", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: If(LE(Int(0), Var("k")), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: Put(Get(Var("c"), Var("i")), Var("j"), Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double)))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("c"), Var("i")), Var("j")), Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("c"), Var("i")), Var("j"))
// [Knf] build_knf: Get(Var("c"), Var("i"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Get(Get(Var("a"), Var("i")), Var("k")), Get(Get(Var("b"), Var("k")), Var("j")), Mul, kind=Some(Double))
// [Knf] build_knf: Get(Get(Var("a"), Var("i")), Var("k"))
// [Knf] build_knf: Get(Var("a"), Var("i"))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Get(Get(Var("b"), Var("k")), Var("j"))
// [Knf] build_knf: Get(Var("b"), Var("k"))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("k"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("k"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop2", Unit), args: [("i", Int), ("m", Int), ("j", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: If(LE(Int(0), Var("j")), Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop3"), [Var("i"), Var("j"), Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop3")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("j"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("j"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("loop1", Unit), args: [("i", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)}, LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")]), App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]))
// [Knf] build_knf: App(Var("loop2"), [Var("i"), Var("m"), Prim(Var("n"), Int(1), Sub, kind=Some(Int)), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop2")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("mul", Unit), args: [("l", Int), ("m", Int), ("n", Int), ("a", Array(Array(Double))), ("b", Array(Array(Double))), ("c", Array(Array(Double)))], body: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")]), Unit)
// [Knf] build_knf: App(Var("loop1"), [Prim(Var("l"), Int(1), Sub, kind=Some(Int)), Var("m"), Var("n"), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("loop1")
// [Knf] build_knf: Prim(Var("l"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("dummy", Var({val: Some(Array(Double))})), Array(Int(0), Double(0)), LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))))
// [Knf] build_knf: Array(Int(0), Double(0))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(0)
// [Knf] build_knf: LetRec({name: ("init_arr", Unit), args: [("i", Int), ("n", Int), ("mat", Array(Array(Double)))], body: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)}, LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))))
// [Knf] build_knf: If(LE(Int(0), Var("i")), Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])), Unit)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("mat"), Var("i"), Array(Var("n"), Double(0))), App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]))
// [Knf] build_knf: Put(Var("mat"), Var("i"), Array(Var("n"), Double(0)))
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Array(Var("n"), Double(0))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Double(0)
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("i"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("i"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("make_arr", Array(Array(Double))), args: [("m", Int), ("n", Int), ("dummy", Array(Double))], body: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))}, Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))))
// [Knf] build_knf: Let(("mat", Var({val: Some(Array(Array(Double)))})), Array(Var("m"), Var("dummy")), Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat")))
// [Knf] build_knf: Array(Var("m"), Var("dummy"))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")]), Var("mat"))
// [Knf] build_knf: App(Var("init_arr"), [Prim(Var("m"), Int(1), Sub, kind=Some(Int)), Var("n"), Var("mat")])
// [Knf] build_knf: Var("init_arr")
// [Knf] build_knf: Prim(Var("m"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Var("mat")
// [Knf] build_knf: Let(("a", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(3), Var("dummy")]), Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(3), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("b", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(3), Int(2), Var("dummy")]), Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(3), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("c", Var({val: Some(Array(Array(Double)))})), App(Var("make_arr"), [Int(2), Int(2), Var("dummy")]), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))))
// [Knf] build_knf: App(Var("make_arr"), [Int(2), Int(2), Var("dummy")])
// [Knf] build_knf: Var("make_arr")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(0), Double(1)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(0), Double(1))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(1), Double(2)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(1), Double(2))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(0)), Int(2), Double(3)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(0)), Int(2), Double(3))
// [Knf] build_knf: Get(Var("a"), Int(0))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(0), Double(4)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(0), Double(4))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(1), Double(5)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(1), Double(5))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("a"), Int(1)), Int(2), Double(6)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))))
// [Knf] build_knf: Put(Get(Var("a"), Int(1)), Int(2), Double(6))
// [Knf] build_knf: Get(Var("a"), Int(1))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(0), Double(7)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(0), Double(7))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(7)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(0)), Int(1), Double(8)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(0)), Int(1), Double(8))
// [Knf] build_knf: Get(Var("b"), Int(0))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(8)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(0), Double(9)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(0), Double(9))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(9)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(1)), Int(1), Double(10)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(1)), Int(1), Double(10))
// [Knf] build_knf: Get(Var("b"), Int(1))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(10)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(0), Double(11)), Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(0), Double(11))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Double(11)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Get(Var("b"), Int(2)), Int(1), Double(12)), Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))))
// [Knf] build_knf: Put(Get(Var("b"), Int(2)), Int(1), Double(12))
// [Knf] build_knf: Get(Var("b"), Int(2))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(12)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))))
// [Knf] build_knf: App(Var("mul"), [Int(2), Int(3), Int(2), Var("a"), Var("b"), Var("c")])
// [Knf] build_knf: Var("mul")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(0)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(0)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(0))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(0))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(0))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_endline"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit))
// [Knf] build_knf: App(Var("print_endline"), [])
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])]), Unit)
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])])
// [Knf] build_knf: App(Var("truncate"), [Get(Get(Var("c"), Int(1)), Int(1))])
// [Knf] build_knf: Get(Get(Var("c"), Int(1)), Int(1))
// [Knf] build_knf: Get(Var("c"), Int(1))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memsetf64
// [Main]   .type memsetf64, @function
// [Main] memsetf64:
// [Main]   blez a1, .memsetf64_b1
// [Main]   slli a1, a1, 3
// [Main]   add a1, a1, a0
// [Main] .memsetf64_b0:
// [Main]   fsd fa0, 0(a0)
// [Main]   addi a0, a0, 8
// [Main]   bne a0, a1, .memsetf64_b0
// [Main] .memsetf64_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop31l0_0
// [Main]   .type loop31l0_0, @function
// [Main] # leaf true
// [Main] loop31l0_0:
// [Main] .loop31l0_0_8:
// [Main]   mv a7, a0
// [Main]   mv a6, a1
// [Main]   mv a0, a2
// [Main]   mv a1, a3
// [Main]   mv a3, a4
// [Main]   mv a2, a5
// [Main]   mv a4, a7
// [Main]   mv a5, a3
// [Main]   mv a3, a2
// [Main] 
// [Main] .loop31l0_0_0:
// [Main]   blt a0, zero, .loop31l0_0_2
// [Main] 
// [Main] .loop31l0_0_1:
// [Main]   slliw a2, a4, 3
// [Main]   add a2, a3, a2
// [Main]   ld a2, 0(a2)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a3, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa0, 0(a7)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a1, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a0, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa1, 0(a7)
// [Main]   slliw a7, a0, 3
// [Main]   add a7, a5, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa2, 0(a7)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw a7, a6, 3
// [Main]   add a2, a2, a7
// [Main]   fsd fa0, 0(a2)
// [Main]   addi a2, a0, -1
// [Main]   blt a2, zero, .loop31l0_0_4
// [Main] 
// [Main] .loop31l0_0_3:
// [Main]   slliw a0, a4, 3
// [Main]   add a0, a3, a0
// [Main]   ld a0, 0(a0)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a3, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa0, 0(a7)
// [Main]   slliw a7, a4, 3
// [Main]   add a7, a1, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a2, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa1, 0(a7)
// [Main]   slliw a7, a2, 3
// [Main]   add a7, a5, a7
// [Main]   ld a7, 0(a7)
// [Main]   slliw t0, a6, 3
// [Main]   add a7, a7, t0
// [Main]   fld fa2, 0(a7)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw a7, a6, 3
// [Main]   add a0, a0, a7
// [Main]   fsd fa0, 0(a0)
// [Main]   addi a0, a2, -1
// [Main]   j .loop31l0_0_0
// [Main] 
// [Main] .loop31l0_0_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop31l0_0_6:
// [Main]   ret
// [Main] 
// [Main] .loop31l0_0_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop31l0_0_5:
// [Main]   j .loop31l0_0_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop228l1_1
// [Main]   .type loop228l1_1, @function
// [Main] # leaf false
// [Main] loop228l1_1:
// [Main] .loop228l1_1_11:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   mv s3, a0
// [Main]   mv s5, a1
// [Main]   mv s1, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main] 
// [Main] .loop228l1_1_0:
// [Main]   blt s1, zero, .loop228l1_1_2
// [Main] 
// [Main] .loop228l1_1_1:
// [Main]   addi a0, s5, -1
// [Main]   blt a0, zero, .loop228l1_1_4
// [Main] 
// [Main] .loop228l1_1_3:
// [Main]   slliw a1, s3, 3
// [Main]   add a1, s2, a1
// [Main]   ld a1, 0(a1)
// [Main]   slliw a2, s3, 3
// [Main]   add a2, s2, a2
// [Main]   ld a2, 0(a2)
// [Main]   slliw a3, s1, 3
// [Main]   add a2, a2, a3
// [Main]   fld fa0, 0(a2)
// [Main]   slliw a2, s3, 3
// [Main]   add a2, s0, a2
// [Main]   ld a2, 0(a2)
// [Main]   slliw a3, a0, 3
// [Main]   add a2, a2, a3
// [Main]   fld fa1, 0(a2)
// [Main]   slliw a2, a0, 3
// [Main]   add a2, s4, a2
// [Main]   ld a2, 0(a2)
// [Main]   slliw a3, s1, 3
// [Main]   add a2, a2, a3
// [Main]   fld fa2, 0(a2)
// [Main]   fmadd.d fa0, fa1, fa2, fa0
// [Main]   slliw a2, s1, 3
// [Main]   add a1, a1, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   addi a2, a0, -1
// [Main]   mv a0, s3
// [Main]   mv a1, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call loop31l0_0
// [Main] 
// [Main] .loop228l1_1_5:
// [Main]   addi s1, s1, -1
// [Main]   blt s1, zero, .loop228l1_1_7
// [Main] 
// [Main] .loop228l1_1_6:
// [Main]   addi a2, s5, -1
// [Main]   mv a0, s3
// [Main]   mv a1, s1
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call loop31l0_0
// [Main]   addi a0, s1, -1
// [Main]   mv s1, a0
// [Main]   j .loop228l1_1_0
// [Main] 
// [Main] .loop228l1_1_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop228l1_1_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .loop228l1_1_4:
// [Main]   mv a0, zero
// [Main]   j .loop228l1_1_5
// [Main] 
// [Main] .loop228l1_1_7:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop228l1_1_8:
// [Main]   j .loop228l1_1_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main85l3_4
// [Main]   .type main85l3_4, @function
// [Main] # leaf false
// [Main] main85l3_4:
// [Main] .main85l3_4_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   addi s0, s11, 0
// [Main]   andi s11, s0, -8
// [Main]   fmv.d.x fa0, zero
// [Main]   addi s1, s11, -16
// [Main]   andi s11, s1, -8
// [Main]   sd s0, 0(s1)
// [Main]   sd s0, 8(s1)
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   li a1, 3
// [Main]   mv a2, s1
// [Main]   call init_arr89l4_3
// [Main]   addi s2, s11, -24
// [Main]   andi s11, s2, -8
// [Main]   sd s0, 0(s2)
// [Main]   sd s0, 8(s2)
// [Main]   sd s0, 16(s2)
// [Main]   li a0, 3
// [Main]   addi a0, a0, -1
// [Main]   li a1, 2
// [Main]   mv a2, s2
// [Main]   call init_arr89l4_3
// [Main]   addi s3, s11, -16
// [Main]   andi s11, s3, -8
// [Main]   sd s0, 0(s3)
// [Main]   sd s0, 8(s3)
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   li a1, 2
// [Main]   mv a2, s3
// [Main]   call init_arr89l4_3
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 0(s1)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4616189618054758400
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4617315517961601024
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s1)
// [Main]   li a1, 4618441417868443648
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4619567317775286272
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 0(s2)
// [Main]   li a1, 4620693217682128896
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621256167635550208
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 8(s2)
// [Main]   li a1, 4621819117588971520
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622382067542392832
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   ld a0, 16(s2)
// [Main]   li a1, 4622945017495814144
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a0, 2
// [Main]   addi a0, a0, -1
// [Main]   li a1, 3
// [Main]   li a2, 2
// [Main]   mv a3, s1
// [Main]   mv a4, s2
// [Main]   mv a5, s3
// [Main]   call loop148l2_2
// [Main]   ld a0, 0(s3)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 0(s3)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s3)
// [Main]   fld fa0, 0(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   call minimbt_print_endline
// [Main]   ld a0, 8(s3)
// [Main]   fld fa0, 8(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main85l3_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl init_arr89l4_3
// [Main]   .type init_arr89l4_3, @function
// [Main] # leaf false
// [Main] init_arr89l4_3:
// [Main] .init_arr89l4_3_8:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main] 
// [Main] .init_arr89l4_3_0:
// [Main]   blt s0, zero, .init_arr89l4_3_2
// [Main] 
// [Main] .init_arr89l4_3_1:
// [Main]   slliw a0, s1, 3
// [Main]   sub s3, s11, a0
// [Main]   andi s11, s3, -8
// [Main]   fmv.d.x fa0, zero
// [Main]   mv a1, s1
// [Main]   mv a0, s3
// [Main]   call memsetf64
// [Main]   slliw a0, s0, 3
// [Main]   add a0, s2, a0
// [Main]   sd s3, 0(a0)
// [Main]   addi s0, s0, -1
// [Main]   blt s0, zero, .init_arr89l4_3_4
// [Main] 
// [Main] .init_arr89l4_3_3:
// [Main]   slliw a0, s1, 3
// [Main]   sub s3, s11, a0
// [Main]   andi s11, s3, -8
// [Main]   fmv.d.x fa0, zero
// [Main]   mv a1, s1
// [Main]   mv a0, s3
// [Main]   call memsetf64
// [Main]   slliw a0, s0, 3
// [Main]   add a0, s2, a0
// [Main]   sd s3, 0(a0)
// [Main]   addi a0, s0, -1
// [Main]   mv s0, a0
// [Main]   j .init_arr89l4_3_0
// [Main] 
// [Main] .init_arr89l4_3_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr89l4_3_6:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .init_arr89l4_3_4:
// [Main]   mv a0, zero
// [Main] 
// [Main] .init_arr89l4_3_5:
// [Main]   j .init_arr89l4_3_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl loop148l2_2
// [Main]   .type loop148l2_2, @function
// [Main] # leaf false
// [Main] loop148l2_2:
// [Main] .loop148l2_2_11:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv s2, a2
// [Main]   mv s3, a3
// [Main]   mv s4, a4
// [Main]   mv s5, a5
// [Main] 
// [Main] .loop148l2_2_0:
// [Main]   blt s0, zero, .loop148l2_2_2
// [Main] 
// [Main] .loop148l2_2_1:
// [Main]   addi s6, s2, -1
// [Main]   blt s6, zero, .loop148l2_2_4
// [Main] 
// [Main] .loop148l2_2_3:
// [Main]   addi a2, s1, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s6
// [Main]   mv a3, s3
// [Main]   mv a4, s4
// [Main]   mv a5, s5
// [Main]   call loop31l0_0
// [Main]   addi a2, s6, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a3, s3
// [Main]   mv a4, s4
// [Main]   mv a5, s5
// [Main]   call loop228l1_1
// [Main] 
// [Main] .loop148l2_2_5:
// [Main]   addi s0, s0, -1
// [Main]   blt s0, zero, .loop148l2_2_7
// [Main] 
// [Main] .loop148l2_2_6:
// [Main]   addi a2, s2, -1
// [Main]   mv a0, s0
// [Main]   mv a1, s1
// [Main]   mv a3, s3
// [Main]   mv a4, s4
// [Main]   mv a5, s5
// [Main]   call loop228l1_1
// [Main]   addi a0, s0, -1
// [Main]   mv s0, a0
// [Main]   j .loop148l2_2_0
// [Main] 
// [Main] .loop148l2_2_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop148l2_2_9:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .loop148l2_2_4:
// [Main]   mv a0, zero
// [Main]   j .loop148l2_2_5
// [Main] 
// [Main] .loop148l2_2_7:
// [Main]   mv a0, zero
// [Main] 
// [Main] .loop148l2_2_8:
// [Main]   j .loop148l2_2_9
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main85l3_4
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m1, fills=[Init(val=Mem(fref=f4, mref=m0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%2), Int32(val=3), Mem(fref=f4, mref=m1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m2, fills=[Init(val=Mem(fref=f4, mref=m0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%5), Int32(val=2), Mem(fref=f4, mref=m2)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Lowering insn Alloc(ty=Array(elem=Array(elem=Double)), mref=m3, fills=[Init(val=Mem(fref=f4, mref=m0))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Insn(iref=%8), Int32(val=2), Mem(fref=f4, mref=m3)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m1), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%10), index=0, width=@64), val=Double(val=1))
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m1), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%12), index=1, width=@64), val=Double(val=2))
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m1), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%14), index=2, width=@64), val=Double(val=3))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m1), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%16), index=0, width=@64), val=Double(val=4))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m1), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%18), index=1, width=@64), val=Double(val=5))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m1), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%20), index=2, width=@64), val=Double(val=6))
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m2), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%22), index=0, width=@64), val=Double(val=7))
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m2), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%24), index=1, width=@64), val=Double(val=8))
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m2), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%26), index=0, width=@64), val=Double(val=9))
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m2), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%28), index=1, width=@64), val=Double(val=10))
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m2), index=2, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%30), index=0, width=@64), val=Double(val=11))
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m2), index=2, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Store(ty=Double, ma=Field(ty=Double, val=Insn(iref=%32), index=1, width=@64), val=Double(val=12))
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=2), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[Insn(iref=%34), Int32(val=3), Int32(val=2), Mem(fref=f4, mref=m1), Mem(fref=f4, mref=m2), Mem(fref=f4, mref=m3)])
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m3), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%36), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%37)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%38)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m3), index=0, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%41), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%42)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%43)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m3), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%46), index=0, width=@64))
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%47)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%48)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_endline", args=[])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Field(ty=Array(elem=Double), val=Mem(fref=f4, mref=m3), index=1, width=@ptr))
// [Wasm] Get Local name Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Insn(iref=%51), index=1, width=@64))
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%52)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%53)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f4, mref=m3) -> $f4.m3
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Mem(fref=f4, mref=m2) -> $f4.m2
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main85l3_4 to wasm
// [Wasm] Lowering function loop228l1_1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%15), Insn(iref=%17), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%19), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering control Branch(cond=Insn(iref=%16), t=b6, t_args=[], f=b7, f_args=[])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%4), offset=BlockParam(bref=b0, bpref=$b.2), width=@64))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%6), offset=Insn(iref=%1), width=@64))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%1), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%8), offset=BlockParam(bref=b0, bpref=$b.2), width=@64))
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%7), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%5), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%3), offset=BlockParam(bref=b0, bpref=$b.2), width=@64), val=Insn(iref=%11))
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.2), Insn(iref=%13), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%14)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b10, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), FnParam(fref=f1, fpref=$f.2), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function loop228l1_1 to wasm
// [Wasm] Lowering function T$start_10
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_10 to wasm
// [Wasm] Lowering function loop148l2_2
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Insn(iref=%7), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%9), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%7), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%11), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b9, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b9, args=[BlockParam(bref=b8, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b8, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Branch(cond=Insn(iref=%8), t=b6, t_args=[], f=b7, f_args=[])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%1), Insn(iref=%3), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%1), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%6)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b9, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b10, args=[FnParam(fref=f2, fpref=$f.0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function loop148l2_2 to wasm
// [Wasm] Lowering function init_arr89l4_3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m1, fills=[Init(val=Double(val=0))])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.2), offset=Insn(iref=%3), width=@ptr), val=Mem(fref=f3, mref=m1))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%7), BlockParam(bref=b0, bpref=$b.1), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Double), mref=m0, fills=[Init(val=Double(val=0))])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Store(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr), val=Mem(fref=f3, mref=m0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Branch(cond=Insn(iref=%4), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function init_arr89l4_3 to wasm
// [Wasm] Lowering function loop31l0_0
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%14), offset=BlockParam(bref=b0, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%16), offset=Insn(iref=%11), width=@64))
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.4), offset=Insn(iref=%11), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%18), offset=BlockParam(bref=b0, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%17), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%15), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%13), offset=BlockParam(bref=b0, bpref=$b.1), width=@64), val=Insn(iref=%21))
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%11), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering control Jump(target=b0, args=[BlockParam(bref=b0, bpref=$b.0), BlockParam(bref=b0, bpref=$b.1), Insn(iref=%23), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4), BlockParam(bref=b0, bpref=$b.5)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b5, args=[Unit])
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.5), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%2), offset=BlockParam(bref=b0, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.0), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%4), offset=BlockParam(bref=b0, bpref=$b.2), width=@64))
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Array(elem=Double), ma=Offset(ty=Array(elem=Double), val=BlockParam(bref=b0, bpref=$b.4), offset=BlockParam(bref=b0, bpref=$b.2), width=@ptr))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%6), offset=BlockParam(bref=b0, bpref=$b.1), width=@64))
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%3), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Double, ma=Offset(ty=Double, val=Insn(iref=%1), offset=BlockParam(bref=b0, bpref=$b.1), width=@64), val=Insn(iref=%9))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Branch(cond=Insn(iref=%12), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Jump(target=b6, args=[Unit])
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b7, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b0, bpref=$b.5) -> $b0.$b.5
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function loop31l0_0 to wasm
// [KnfOpt] freq: {loop31: Many(2), loop228: Many(2), loop148: Many(2), mul68: Once, main85: Once, init_arr89: Many(2), make_arr103: Many(3)}
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Knf inline Some(loop31)
// [KnfOpt] Inline threshold 2 29
// [KnfOpt] Knf inline Some(loop31)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(loop228)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(loop228)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(loop148)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(loop148)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(init_arr89)
// [KnfOpt] Inline threshold 2 15
// [KnfOpt] Knf inline Some(init_arr89)
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Knf inline Some(make_arr103)
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Knf inline Some(make_arr103)
// [KnfOpt] Inline threshold 3 9
// [KnfOpt] Knf inline Some(make_arr103)
// [KnfOpt] Knf inline Some(mul68)
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %20: Call(ty=Unit, f=f1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), Insn(iref=%19), FnParam(fref=f1, fpref=$f.3), FnParam(fref=f1, fpref=$f.4), FnParam(fref=f1, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %12: Call(ty=Unit, f=f2, args=[Insn(iref=%11), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [CoreOpt] eliminated tail rec call %8: Call(ty=Unit, f=f3, args=[Insn(iref=%7), FnParam(fref=f3, fpref=$f.1), FnParam(fref=f3, fpref=$f.2)])
// [CoreOpt] eliminated tail rec call %24: Call(ty=Unit, f=f0, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), Insn(iref=%23), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4), FnParam(fref=f0, fpref=$f.5)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Multiple, f10: Once, f2: Once, f3: Multiple, f0: Multiple})
