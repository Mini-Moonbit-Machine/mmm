// [Asm] pre_assigned_registers: Insn(iref=%3) -> v9, BlockParam(bref=b2, bpref=$b.0) -> v6, Insn(iref=%7) -> v16, Mem(fref=f0, mref=m1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v12, Self(fref=f0) -> v0, Insn(iref=%2) -> v8, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%9) -> v11, BlockParam(bref=b2, bpref=$b.1) -> v7, Insn(iref=%8) -> v10, Insn(iref=%1) -> v5, Insn(iref=%6) -> v15, Insn(iref=%5) -> v14, Insn(iref=%0) -> v4, Insn(iref=%4) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.1), Insn(iref=%2)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v30]
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v30, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, zero, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, v6, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: v7 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v7, v6, v21, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v7, v6, v22, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v7, v6, v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v7, v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v7, v14, v18, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v7, v19, v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v7, v14, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v16, v14, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v6, v16, v2]
// [Asm] move_origin: [v14]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, v6, v2]
// [Asm] move_origin: [v16]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v7, v6, v2]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v3, v6, v26, v7]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v3, v8, v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3, v6, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v12]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.75"];
// [Asm]   r0 [label="v10 ← a0", color=green];
// [Asm]   r20 [label="v3 ← a1", color=green];
// [Asm]   r23 [label="v21 ← a4", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r26 [label="v14 ← a2", color=green];
// [Asm]   r27 [label="v18 ← a4", color=green];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r29 [label="v16 ← a3", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r28 [label="v19 ← a4", color=green];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="v7 ← a3", color=green];
// [Asm]   r14 [label="v11 ← a0", color=green];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r30 [label="v26 ← a4", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r24 [label="v22 ← a4", color=green];
// [Asm]   r15 [label="v12 ← a0", color=green];
// [Asm]   r25 [label="v13 ← a4", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v2 ← a0", color=green];
// [Asm]   r18 [label="s11", color=blue];
// [Asm]   r19 [label="v30 ← a1", color=green];
// [Asm]   r31 [label="v8 ← a4", color=green];
// [Asm]   r21 [label="v6 ← a2", color=green];
// [Asm]   r17 [label="zero", color=blue];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r21 -- r24;
// [Asm]   r16 -- r31;
// [Asm]   r17 -- r18;
// [Asm]   r16 -- r30;
// [Asm]   r20 -- r24;
// [Asm]   r16 -- r25;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r20 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r20 -- r26;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r21 -- r29;
// [Asm]   r1 -- r10;
// [Asm]   r16 -- r19;
// [Asm]   r20 -- r29;
// [Asm]   r22 -- r26;
// [Asm]   r1 -- r13;
// [Asm]   r22 -- r31;
// [Asm]   r16 -- r26;
// [Asm]   r16 -- r28;
// [Asm]   r16 -- r18;
// [Asm]   r22 -- r24;
// [Asm]   r20 -- r25;
// [Asm]   r17 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r20 -- r30;
// [Asm]   r21 -- r23;
// [Asm]   r20 -- r23;
// [Asm]   r1 -- r9;
// [Asm]   r16 -- r29;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r22 -- r25;
// [Asm]   r20 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r21 -- r31;
// [Asm]   r21 -- r30;
// [Asm]   r22 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r22 -- r27;
// [Asm]   r22 -- r23;
// [Asm]   r1 -- r2;
// [Asm]   r20 -- r27;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r20;
// [Asm]   r26 -- r29;
// [Asm]   r20 -- r28;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r1 -- r3;
// [Asm]   r16 -- r24;
// [Asm]   r16 -- r23;
// [Asm]   r20 -- r21;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r17 -- r20;
// [Asm]   comment = "0:v10-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v11-> 15:v12-> 16:v2-> 17:zero-> 18:s11-> 19:v30-> 20:v3-> 21:v6-> 22:v7-> 23:v21-> 24:v22-> 25:v13-> 30:v26-> 31:v8-> 26:v14-> 27:v18-> 28:v19-> 29:v16"
// [Asm]   comment = "v10<-a0;v3<-a1;v21<-a4;v14<-a2;v18<-a4;v16<-a3;v19<-a4;v7<-a3;v11<-a0;v26<-a4;v22<-a4;v12<-a0;v13<-a4;v2<-a0;v30<-a1;v8<-a4;v6<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.75"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v10, 0(v3) ->   lw a0, 0(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v30, 4 ->   li a1, 4
// [Asm] subst   sw v30, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v30, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v30, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v30, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v30, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   sw v30, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   sw v30, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   sw v30, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   sw v30, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   sw v30, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   addi v3, s11, -40 ->   addi a1, s11, -40
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(a1)
// [Asm] subst   sw zero, 4(v3) ->   sw zero, 4(a1)
// [Asm] subst   sw zero, 8(v3) ->   sw zero, 8(a1)
// [Asm] subst   sw zero, 12(v3) ->   sw zero, 12(a1)
// [Asm] subst   sw zero, 16(v3) ->   sw zero, 16(a1)
// [Asm] subst   sw zero, 20(v3) ->   sw zero, 20(a1)
// [Asm] subst   sw zero, 24(v3) ->   sw zero, 24(a1)
// [Asm] subst   sw zero, 28(v3) ->   sw zero, 28(a1)
// [Asm] subst   sw zero, 32(v3) ->   sw zero, 32(a1)
// [Asm] subst   sw zero, 36(v3) ->   sw zero, 36(a1)
// [Asm] subst   mv v6, zero ->   mv a2, zero
// [Asm] subst   mv v7, zero ->   mv a3, zero
// [Asm] subst   slliw v21, v7, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v22, v2, v21 ->   add a4, a0, a4
// [Asm] subst   lw v13, 0(v22) ->   lw a4, 0(a4)
// [Asm] subst   add v14, v6, v13 ->   add a2, a2, a4
// [Asm] subst   slliw v18, v7, 2 ->   slliw a4, a3, 2
// [Asm] subst   add v19, v3, v18 ->   add a4, a1, a4
// [Asm] subst   sw v14, 0(v19) ->   sw a2, 0(a4)
// [Asm] subst   addi v16, v7, 1 ->   addi a3, a3, 1
// [Asm] subst   j .main.75_2 ->   j .main.75_2
// [Asm] subst   li v26, 10 ->   li a4, 10
// [Asm] subst   addi v8, v26, -1 ->   addi a4, a4, -1
// [Asm] subst   blt v8, v7, .main.75_4 ->   blt a4, a3, .main.75_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.75 ->   call main.75
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.75  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.75:
// [Asm] # block info: defs: [v3, v7, v6, s11, v30, v2], uses: [v3, s11, zero, v30, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: [v2, v3, v6, v7]
// [Asm] # block parameters: []
// [Asm] .main.75_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v30, 4  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 0(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 4(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 8(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 12(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 16(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 20(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 24(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 28(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 32(v2)  # live: [s11, zero, v30, v2]
// [Asm]   sw v30, 36(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -40  # live: [v3, zero, v2]
// [Asm]   andi s11, v3, -8  # live: [v3, zero, v2]
// [Asm]   sw zero, 0(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 4(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 8(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 12(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 16(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 20(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 24(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 28(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 32(v3)  # live: [v3, zero, v2]
// [Asm]   sw zero, 36(v3)  # live: [v3, zero, v2]
// [Asm] # control
// [Asm]   mv v6, zero  # live: [v3, v6, zero, v2]
// [Asm]   mv v7, zero  # live: [v3, v7, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [v26, v8], uses: [v7, v26, v8], upward_exposed: [v7], params_defs: [v6, v7]
// [Asm] # live_in: [v2, v3, v6, v7], live_out: [v7, v2, v6, v3]
// [Asm] # block parameters: [v6, v7]
// [Asm] .main.75_2:
// [Asm]   li v26, 10  # live: [v2, v3, v6, v26, v7]
// [Asm]   addi v8, v26, -1  # live: [v2, v3, v8, v6, v7]
// [Asm] # control
// [Asm]   blt v8, v7, .main.75_4  # live: [v2, v3, v6, v7]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v18, v21, v13, v22, v7, v19, v6], uses: [v3, v14, v16, v18, v21, v13, v22, v7, v19, v6, v2], upward_exposed: [v2, v3, v6, v7], params_defs: []
// [Asm] # live_in: [v3, v7, v6, v2], live_out: [v2, v3, v6, v7]
// [Asm] # block parameters: []
// [Asm] .main.75_3:
// [Asm]   slliw v21, v7, 2  # live: [v3, v7, v6, v21, v2]
// [Asm]   add v22, v2, v21  # live: [v3, v7, v6, v22, v2]
// [Asm]   lw v13, 0(v22)  # live: [v3, v7, v6, v13, v2]
// [Asm]   add v14, v6, v13  # live: [v3, v7, v14, v2]
// [Asm]   slliw v18, v7, 2  # live: [v3, v7, v14, v18, v2]
// [Asm]   add v19, v3, v18  # live: [v3, v7, v19, v14, v2]
// [Asm]   sw v14, 0(v19)  # live: [v3, v7, v14, v2]
// [Asm]   addi v16, v7, 1  # live: [v3, v16, v14, v2]
// [Asm] # control
// [Asm]   mv v6, v14  # live: [v3, v6, v16, v2]
// [Asm]   mv v7, v16  # live: [v3, v7, v6, v2]
// [Asm]   j .main.75_2  # live: [v3, v7, v6, v2]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v10, a0, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .main.75_4:
// [Asm]   lw v10, 0(v3)  # live: [v10]
// [Asm]   # save_ctx2  # live: [v10]
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v12, a0], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: []
// [Asm] # block parameters: [v12]
// [Asm] .main.75_5:
// [Asm] # control
// [Asm]   mv a0, v12  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))
// [Knf] build_knf: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Get(Var("arr"), Var("x"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("res"), Var("x"), Var("s"))
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))
// [Knf] build_knf: App(Var("sum_nested"), [Int(0), Int(0)])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Knf] build_knf: Array(Int(10), Int(4))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Knf] build_knf: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))
// [Knf] build_knf: App(Var("sum_prefix"), [Var("arr"), Int(10)])
// [Knf] build_knf: Var("sum_prefix")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Jump(target=b2, args=[Insn(iref=%5), Insn(iref=%7)]) already set
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%9)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b5 control: Panic -> Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[Int32(val=0), Int32(val=0)]) already set
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _24 = res.48
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.75
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.75
// [Main]   .type main.75, @function
// [Main] # leaf false
// [Main] main.75:
// [Main] .main.75_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   sw a1, 20(a0)
// [Main]   sw a1, 24(a0)
// [Main]   sw a1, 28(a0)
// [Main]   sw a1, 32(a0)
// [Main]   sw a1, 36(a0)
// [Main]   addi a1, s11, -40
// [Main]   andi s11, a1, -8
// [Main]   sw zero, 0(a1)
// [Main]   sw zero, 4(a1)
// [Main]   sw zero, 8(a1)
// [Main]   sw zero, 12(a1)
// [Main]   sw zero, 16(a1)
// [Main]   sw zero, 20(a1)
// [Main]   sw zero, 24(a1)
// [Main]   sw zero, 28(a1)
// [Main]   sw zero, 32(a1)
// [Main]   sw zero, 36(a1)
// [Main]   mv a2, zero
// [Main]   mv a3, zero
// [Main] 
// [Main] .main.75_2:
// [Main]   li a4, 10
// [Main]   addi a4, a4, -1
// [Main]   blt a4, a3, .main.75_4
// [Main] 
// [Main] .main.75_3:
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a0, a4
// [Main]   lw a4, 0(a4)
// [Main]   add a2, a2, a4
// [Main]   slliw a4, a3, 2
// [Main]   add a4, a1, a4
// [Main]   sw a2, 0(a4)
// [Main]   addi a3, a3, 1
// [Main]   j .main.75_2
// [Main] 
// [Main] .main.75_4:
// [Main]   lw a0, 0(a1)
// [Main]   call minimbt_print_int
// [Main] 
// [Main] .main.75_5:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.75
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f0, mref=m0), offset=BlockParam(bref=b2, bpref=$b.1), width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Insn(iref=%4)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=Mem(fref=f0, mref=m1), offset=BlockParam(bref=b2, bpref=$b.1), width=@32), val=Insn(iref=%5))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%5), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Lowering control Return(args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m1), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%9)])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Int32(val=10), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b2, bpref=$b.1), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Branch(cond=Insn(iref=%3), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=4))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering control Jump(target=b1, args=[Int32(val=0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b2, bpref=$b.1) -> $b2.$b.1
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.75 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: sum_prefix.1 false
// [KnfOpt] func_tre: sum_nested.6 true
// [KnfOpt] func_tre: main.19 false
// [KnfOpt] freq: {sum_prefix.1: Once, sum_nested.6: Once, sum_nested.27: Many(2), main.19: Once}
// [KnfOpt] Knf inline Some(sum_nested) let _18: Unit = Unit
// [KnfOpt] Var(res.5)
// [KnfOpt] Knf inline Some(sum_prefix) let _24: Array(Int) = Unit
// [KnfOpt] let _25: Int = Int(0)
// [KnfOpt] let _26: Int = Get _24[_25]
// [KnfOpt] ExtApply(minimbt_print_int, [_26, ])
// [KnfOpt] freq: {main.19: Once, sum_nested.49: Once, sum_nested.52: Many(2)}
// [KnfOpt] Knf inline Some(sum_nested) let _64: Unit = Unit
// [KnfOpt] let _25: Int = Int(0)
// [KnfOpt] let _26: Int = Get res.48[_25]
// [KnfOpt] ExtApply(minimbt_print_int, [_26, ])
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
