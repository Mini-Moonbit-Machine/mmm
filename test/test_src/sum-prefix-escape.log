// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.29 ->   call main.29
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, BlockParam(bref=b0, bpref=$b.2) -> v9, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v18, Insn(iref=%0) -> v12, Insn(iref=%4) -> v17, Insn(iref=%3) -> v16, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%2) -> v15, FnParam(fref=f0, fpref=$f.4) -> v6, Insn(iref=%1) -> v13
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move_origin: [v4]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move_origin: [v5]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v11, v10, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v14]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v10, zero, v23, v8, v7, v9]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v10, zero, v8, v7, v24, v9]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v11, v10, zero, v8, v7, v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v11, v16, v10, zero, v20, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v16, v10, v21, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v16, v10, zero, v8, v9]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v16, v10, v18, zero, v9]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v11, v10, v18, zero, v7, v9]
// [Asm] move_origin: [v16]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v18]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v9]
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v7, v8, v9]
// [Asm] move_origin: [v10]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: [v11]
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [zero]
// [Asm] defined: v14 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sum_nested.28"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="v16 ← a0", color=green];
// [Asm]   r23 [label="v18 ← a1", color=green];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r9 [label="v6 ← a4", color=green];
// [Asm]   r6 [label="v3 ← a1", color=green];
// [Asm]   r13 [label="v10 ← a3", color=green];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="a2", color=blue];
// [Asm]   r11 [label="v8 ← a1", color=green];
// [Asm]   r7 [label="v4 ← a2", color=green];
// [Asm]   r10 [label="v7 ← a0", color=green];
// [Asm]   r22 [label="v21 ← a5", color=green];
// [Asm]   r14 [label="v11 ← a4", color=green];
// [Asm]   r8 [label="v5 ← a3", color=green];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v12 ← a5", color=green];
// [Asm]   r24 [label="v14 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a0", color=blue];
// [Asm]   r18 [label="v24 ← a5", color=green];
// [Asm]   r19 [label="v15 ← a5", color=green];
// [Asm]   r17 [label="v23 ← a5", color=green];
// [Asm]   r21 [label="v20 ← a5", color=green];
// [Asm]   r12 [label="v9 ← a2", color=green];
// [Asm]   r11 -- r21;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r10 -- r17;
// [Asm]   r10 -- r14;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r14 -- r20;
// [Asm]   r13 -- r15;
// [Asm]   r14 -- r18;
// [Asm]   r11 -- r20;
// [Asm]   r14 -- r17;
// [Asm]   r11 -- r17;
// [Asm]   r4 -- r23;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r6;
// [Asm]   r11 -- r14;
// [Asm]   r12 -- r15;
// [Asm]   r8 -- r9;
// [Asm]   r14 -- r23;
// [Asm]   r10 -- r13;
// [Asm]   r10 -- r19;
// [Asm]   r11 -- r12;
// [Asm]   r4 -- r20;
// [Asm]   r11 -- r22;
// [Asm]   r4 -- r18;
// [Asm]   r11 -- r18;
// [Asm]   r4 -- r22;
// [Asm]   r7 -- r9;
// [Asm]   r12 -- r19;
// [Asm]   r13 -- r20;
// [Asm]   r13 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r20 -- r23;
// [Asm]   r14 -- r19;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r20 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r11;
// [Asm]   r12 -- r13;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r10 -- r12;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r21;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r10 -- r15;
// [Asm]   r13 -- r14;
// [Asm]   r9 -- r12;
// [Asm]   r12 -- r22;
// [Asm]   r10 -- r23;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r13 -- r18;
// [Asm]   r5 -- r7;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r12 -- r23;
// [Asm]   r11 -- r15;
// [Asm]   r13 -- r22;
// [Asm]   r12 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r12 -- r17;
// [Asm]   r3 -- r7;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r7 -- r8;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r7;
// [Asm]   r4 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r4 -- r9;
// [Asm]   r14 -- r22;
// [Asm]   r14 -- r15;
// [Asm]   comment = "0:v2-> 1:a2-> 6:v3-> 3:a3-> 7:v4-> 4:zero-> 8:v5-> 9:v6-> 10:v7-> 11:v8-> 12:v9-> 13:v10-> 14:v11-> 15:v12-> 17:v23-> 18:v24-> 19:v15-> 20:v16-> 21:v20-> 22:v21-> 23:v18-> 5:a4-> 2:a1-> 16:a0-> 24:v14"
// [Asm]   comment = "v2<-a0;v16<-a0;v18<-a1;v6<-a4;v3<-a1;v10<-a3;v8<-a1;v4<-a2;v7<-a0;v21<-a5;v11<-a4;v5<-a3;v12<-a5;v14<-a0;v24<-a5;v15<-a5;v23<-a5;v20<-a5;v9<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sum_nested.28"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v12, v10, -1 ->   addi a5, a3, -1
// [Asm] subst   blt v12, v8, .sum_nested.28_2 ->   blt a5, a1, .sum_nested.28_2
// [Asm] subst   ret ->   ret
// [Asm] subst   slliw v23, v8, 2 ->   slliw a5, a1, 2
// [Asm] subst   add v24, v9, v23 ->   add a5, a2, a5
// [Asm] subst   lw v15, 0(v24) ->   lw a5, 0(a5)
// [Asm] subst   add v16, v7, v15 ->   add a0, a0, a5
// [Asm] subst   slliw v20, v8, 2 ->   slliw a5, a1, 2
// [Asm] subst   add v21, v11, v20 ->   add a5, a4, a5
// [Asm] subst   sw v16, 0(v21) ->   sw a0, 0(a5)
// [Asm] subst   addi v18, v8, 1 ->   addi a1, a1, 1
// [Asm] subst   j .sum_nested.28_0 ->   j .sum_nested.28_0
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v6, Mem(fref=f1, mref=m0) -> v4, FnParam(fref=f1, fpref=$f.1) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v5
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v8, s11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v4, a0, zero, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v4, a1, a0, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v4, a2, a1, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v4, a2, a1, a3, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v4, a2, a1, a3, a0, a4]
// [Asm] move_origin: [v4]
// [Asm] defined: a4 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sum_prefix.27"];
// [Asm]   r0 [label="v2 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="v4 ← s0", color=green];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="v3 ← a3", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="t0", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v8 ← a0", color=green];
// [Asm]   r15 [label="t1", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t2", color=blue];
// [Asm]   r18 [label="t4", color=blue];
// [Asm]   r19 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="t3", color=blue];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r1 -- r9;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r7 -- r10;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r6 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r1 -- r6;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:a1-> 3:zero-> 4:v3-> 6:v4-> 2:s11-> 5:v8-> 7:a0-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:t0-> 15:t1-> 16:t2-> 17:t3-> 18:t4-> 19:v6"
// [Asm]   comment = "v2<-a2;v4<-s0;v3<-a3;v8<-a0;v6<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sum_prefix.27"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a3, a1
// [Asm] subst   slliw v8, v3, 2 ->   slliw a0, a3, 2
// [Asm] subst   sub v4, s11, v8 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v4, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v3 ->   mv a1, a3
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a4, v4 ->   mv a4, s0
// [Asm] subst   call sum_nested.28 ->   call sum_nested.28
// [Asm] subst   mv a0, v4 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v4, Insn(iref=%3) -> v6, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v12, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v9]
// [Asm] live_set: [a0, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.29"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="v9 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="v12 ← a1", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v5 ← a0", color=green];
// [Asm]   r19 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r7;
// [Asm]   r0 -- r2;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v12-> 3:a0-> 4:v9-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 17:v4-> 18:v5-> 19:v6"
// [Asm]   comment = "v2<-a0;v9<-a1;v12<-a1;v5<-a0;v6<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.29"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v12, 4 ->   li a1, 4
// [Asm] subst   sw v12, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v12, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v12, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v12, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v12, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   sw v12, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   sw v12, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   sw v12, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   sw v12, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   sw v12, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   li v9, 10 ->   li a1, 10
// [Asm] subst   call sum_prefix.27 ->   call sum_prefix.27
// [Asm] subst   lw v5, 0(v4) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] sum_nested.28:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .sum_nested.28_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v10, v12, v8], upward_exposed: [v10, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v7, v8, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .sum_nested.28_0:
// [Asm]   addi v12, v10, -1  # live: [v11, v10, zero, v8, v7, v12, v9]
// [Asm] # control
// [Asm]   blt v12, v8, .sum_nested.28_2  # live: [v8, v11, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v16, v21, v18, v23, v20, v7, v8, v24, v15], uses: [v11, v16, v21, v18, v10, v23, v20, v8, v7, v24, v15, v9], upward_exposed: [v7, v11, v10, v9, v8], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .sum_nested.28_1:
// [Asm]   slliw v23, v8, 2  # live: [v11, v10, zero, v23, v8, v7, v9]
// [Asm]   add v24, v9, v23  # live: [v11, v10, zero, v8, v7, v24, v9]
// [Asm]   lw v15, 0(v24)  # live: [v11, v10, zero, v8, v7, v15, v9]
// [Asm]   add v16, v7, v15  # live: [v11, v16, v10, zero, v8, v9]
// [Asm]   slliw v20, v8, 2  # live: [v11, v16, v10, zero, v20, v8, v9]
// [Asm]   add v21, v11, v20  # live: [v11, v16, v10, v21, zero, v8, v9]
// [Asm]   sw v16, 0(v21)  # live: [v11, v16, v10, zero, v8, v9]
// [Asm]   addi v18, v8, 1  # live: [v11, v16, v10, v18, zero, v9]
// [Asm] # control
// [Asm]   mv v7, v16  # live: [v11, v10, v18, zero, v7, v9]
// [Asm]   mv v8, v18  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v7, v8, v9]
// [Asm]   mv v11, v11  # live: [v7, v11, v10, zero, v9, v8]
// [Asm]   j .sum_nested.28_0  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sum_nested.28_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .sum_nested.28_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.29  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sum_prefix.27:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, zero, a4, v8, v4, a2, a1, s11, a3, v3], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .sum_prefix.27_0:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, zero, v3]
// [Asm]   slliw v8, v3, 2  # live: [v2, v8, s11, zero, v3]
// [Asm]   sub v4, s11, v8  # live: [v2, v4, zero, v3]
// [Asm]   andi s11, v4, -8  # live: [v2, v4, zero, v3]
// [Asm]   mv a1, v3  # live: [v2, v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, v4, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, v4, a0, zero, v3]
// [Asm]   mv a1, zero  # live: [v2, v4, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [v4, a2, a1, a0, v3]
// [Asm]   mv a3, v3  # live: [v4, a2, a1, a3, a0]
// [Asm]   mv a4, v4  # live: [v4, a2, a1, a3, a0, a4]
// [Asm]   call sum_nested.28  # live: [v4, a0]
// [Asm]   mv v6, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.29:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v5, a0, v4, a1, v6, v12, s11, v9, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.29_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -40  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [v2]
// [Asm]   li v12, 4  # live: [v12, v2]
// [Asm]   sw v12, 0(v2)  # live: [v12, v2]
// [Asm]   sw v12, 4(v2)  # live: [v12, v2]
// [Asm]   sw v12, 8(v2)  # live: [v12, v2]
// [Asm]   sw v12, 12(v2)  # live: [v12, v2]
// [Asm]   sw v12, 16(v2)  # live: [v12, v2]
// [Asm]   sw v12, 20(v2)  # live: [v12, v2]
// [Asm]   sw v12, 24(v2)  # live: [v12, v2]
// [Asm]   sw v12, 28(v2)  # live: [v12, v2]
// [Asm]   sw v12, 32(v2)  # live: [v12, v2]
// [Asm]   sw v12, 36(v2)  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   li v9, 10  # live: [a0, v9]
// [Asm]   mv a1, v9  # live: [a1, a0]
// [Asm]   call sum_prefix.27  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm]   lw v5, 0(v4)  # live: [v5]
// [Asm]   # save_ctx2  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))
// [Knf] build_knf: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Get(Var("arr"), Var("x"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("res"), Var("x"), Var("s"))
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))
// [Knf] build_knf: App(Var("sum_nested"), [Int(0), Int(0)])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Knf] build_knf: Array(Int(10), Int(4))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Knf] build_knf: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))
// [Knf] build_knf: App(Var("sum_prefix"), [Var("arr"), Int(10)])
// [Knf] build_knf: Var("sum_prefix")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b1 control: Panic -> Jump(target=b3, args=[Insn(iref=%6)])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Mem(fref=f1, mref=m0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%3)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum_nested.28
// [Main]   .type sum_nested.28, @function
// [Main] # leaf true
// [Main] sum_nested.28:
// [Main] .sum_nested.28_5:
// [Main] 
// [Main] .sum_nested.28_0:
// [Main]   addi a5, a3, -1
// [Main]   blt a5, a1, .sum_nested.28_2
// [Main] 
// [Main] .sum_nested.28_1:
// [Main]   slliw a5, a1, 2
// [Main]   add a5, a2, a5
// [Main]   lw a5, 0(a5)
// [Main]   add a0, a0, a5
// [Main]   slliw a5, a1, 2
// [Main]   add a5, a4, a5
// [Main]   sw a0, 0(a5)
// [Main]   addi a1, a1, 1
// [Main]   j .sum_nested.28_0
// [Main] 
// [Main] .sum_nested.28_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .sum_nested.28_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.29
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum_prefix.27
// [Main]   .type sum_prefix.27, @function
// [Main] # leaf false
// [Main] sum_prefix.27:
// [Main] .sum_prefix.27_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   mv a2, a0
// [Main]   mv a3, a1
// [Main]   slliw a0, a3, 2
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a3
// [Main]   mv a0, zero
// [Main]   mv a1, zero
// [Main]   mv a4, s0
// [Main]   call sum_nested.28
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.29
// [Main]   .type main.29, @function
// [Main] # leaf false
// [Main] main.29:
// [Main] .main.29_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   sw a1, 20(a0)
// [Main]   sw a1, 24(a0)
// [Main]   sw a1, 28(a0)
// [Main]   sw a1, 32(a0)
// [Main]   sw a1, 36(a0)
// [Main]   li a1, 10
// [Main]   call sum_prefix.27
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function sum_nested.28
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.2), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=BlockParam(bref=b0, bpref=$b.1), width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.3), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function sum_nested.28 to wasm
// [Wasm] Lowering function sum_prefix.27
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Int32(val=0), FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1), Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.1) -> $$f.1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function sum_prefix.27 to wasm
// [Wasm] Lowering function main.29
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=4))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering insn Call(ty=Array(elem=Int32), f=f1, args=[Mem(fref=f2, mref=m0), Int32(val=10)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%1), index=0, width=@32))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.29 to wasm
// [KnfOpt] func_tre: sum_prefix.1 false
// [KnfOpt] func_tre: sum_nested.6 true
// [KnfOpt] func_tre: main.19 false
// [KnfOpt] freq: {sum_prefix.1: Once, sum_nested.6: Many(2), main.19: Once}
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum_nested.6 rejected
// [KnfOpt] Inline threshold 17
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum_nested.6 rejected
// [KnfOpt] Inline threshold 29
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision sum_prefix.1 rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f0, args=[Insn(iref=%3), Insn(iref=%5), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f1: Once, f2: Once})
