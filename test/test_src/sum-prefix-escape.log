// [Main] function thunk_main(k) {
// [Main]   function sum_prefix_1(arr_3, len_5, k) {
// [Main]     const _6 = 0;
// [Main]     return $thunk(() => $external(minimbt_create_array, function (res_7) {
// [Main]       function sum_nested_8(acc_10, x_12, k) {
// [Main]         const _13 = 1;
// [Main]         const _14 = len_5 - _13;
// [Main]         if (x_12 <= _14) {
// [Main]           const _15 = arr_3[x_12];
// [Main]           const s_16 = acc_10 + _15;
// [Main]           const _18 = res_7[x_12] = s_16;
// [Main]           const _19 = 1;
// [Main]           const _20 = x_12 + _19;
// [Main]           return $thunk(() => sum_nested_8(s_16, _20, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           ))
// [Main]         } else {
// [Main]           return $thunk(() => k(null))
// [Main]         }
// [Main]       }
// [Main]       const _21 = 0;
// [Main]       const _22 = 0;
// [Main]       return $thunk(() => sum_nested_8(_21, _22, function (_24) {
// [Main]         return $thunk(() => k(res_7))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     , len_5, _6))
// [Main]   }
// [Main]   function main_25(k) {
// [Main]     const _26 = 10;
// [Main]     const _27 = 4;
// [Main]     return $thunk(() => $external(minimbt_create_array, function (arr_28) {
// [Main]       const _29 = 10;
// [Main]       return $thunk(() => sum_prefix_1(arr_28, _29, function (_30) {
// [Main]         const _31 = 0;
// [Main]         const _32 = _30[_31];
// [Main]         return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]           return $thunk(() => k(x))
// [Main]         }
// [Main]         , _32))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     , _26, _27))
// [Main]   }
// [Main]   return $thunk(() => main_25(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("sum_prefix", Array[Int]), args: [("arr", Array[Int]), ("len", Int)], body: Let(("res", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("res", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))) against Array[Int]
// [Typer] infer: Array(Var("len"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("len") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))) against Array[Int]
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] infer: Var("len")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))) against Unit
// [Typer] infer: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None)
// [Typer] infer: Var("acc")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Get(Var("arr"), Var("x"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: Put(Var("res"), Var("x"), Var("s"))
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] check: Var("res") against Array[Int]
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("sum_nested") against (Int, Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] unify: (Int, Int) -> Unit and (Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")) against Array[Int]
// [Typer] infer: App(Var("sum_nested"), [Int(0), Int(0)])
// [Typer] infer: Var("sum_nested")
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("res") against Array[Int]
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("arr", Var(None)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Typer] infer: Array(Int(10), Int(4))
// [Typer] infer: Int(4)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0)) against Int
// [Typer] check: App(Var("sum_prefix"), [Var("arr"), Int(10)]) against Array[Int]
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] infer: Int(10)
// [Typer] check: Var("sum_prefix") against (Array[Int], Int) -> Array[Int]
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Array[Int]))
// [Typer] inst result: (Array[Int], Int) -> Array[Int]
// [Typer] unify: (Array[Int], Int) -> Array[Int] and (Array[Int], Int) -> Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
