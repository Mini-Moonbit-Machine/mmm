// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v14, Insn(iref=%8) -> v15, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.4) -> v11, BlockParam(bref=b0, bpref=$b.3) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, BlockParam(bref=b0, bpref=$b.2) -> v9, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v19, Insn(iref=%0) -> v12, Insn(iref=%4) -> v18, Insn(iref=%3) -> v17, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%2) -> v16, FnParam(fref=f0, fpref=$f.4) -> v6, Insn(iref=%1) -> v13
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v10, zero, v7, v8, v12, v9]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0, a4]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, a4, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, a4, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, a4, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, a4, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, zero, v3]
// [Asm] move: v6 <- a4
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v6, v5, zero, v7]
// [Asm] move: v7 <- v2
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v6, v5, zero, v8]
// [Asm] move: v8 <- v3
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v5, zero, v9, v8]
// [Asm] move: v9 <- v4
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v7, v6, v10, zero, v9, v8]
// [Asm] move: v10 <- v5
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v7, v11, v10, zero, v9, v8]
// [Asm] move: v11 <- v6
// [Asm] defined: v11 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v11, v16, v10, zero, v8, v7, v9]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v11, v10, zero, v8, v17, v9]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v17, v9]
// [Asm] defs: [v19]
// [Asm] live_set: [v11, v10, zero, v19, v17, v9]
// [Asm] defined: v19 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v11, v10, zero, v7, v19, v9]
// [Asm] move: v7 <- v17
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v11, v10, zero, v8, v7, v9]
// [Asm] move: v8 <- v19
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v7, v9]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v11, v10, zero, v8, v7, v9]
// [Asm] move: v10 <- v10
// [Asm] defs: []
// [Asm] live_set: [v8, v11, v10, zero, v9, v7]
// [Asm] move: v11 <- v11
// [Asm] defs: []
// [Asm] live_set: [v8, v11, v10, zero, v9, v7]
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move: v14 <- zero
// [Asm] defined: v14 is X
// [Asm] Label("sum_nested8.49") clobbered_x: @hashset.of([a5, a0, a4, a6, a2, a1, a3])
// [Asm] Label("sum_nested8.49") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v12, v9, -1 ->   addi a0, a5, -1
// [Asm] subst   blt v12, v8, .sum_nested8.49_2 ->   blt a0, a4, .sum_nested8.49_2
// [Asm] subst   mv v2, a0 ->   mv a6, a0
// [Asm] subst   mv v3, a1 ->   mv a5, a1
// [Asm] subst   mv v5, a3 ->   mv a1, a3
// [Asm] subst   mv v6, a4 ->   mv a0, a4
// [Asm] subst   mv v7, v2 ->   mv a3, a6
// [Asm] subst   mv v8, v3 ->   mv a4, a5
// [Asm] subst   mv v9, v4 ->   mv a5, a2
// [Asm] subst   mv v10, v5 ->   mv a2, a1
// [Asm] subst   mv v11, v6 ->   mv a1, a0
// [Asm] subst   th.lurw v16, v10, v8, 2 ->   th.lurw a0, a2, a4, 2
// [Asm] subst   add v17, v7, v16 ->   add a0, a3, a0
// [Asm] subst   th.surw v17, v11, v8, 2 ->   th.surw a0, a1, a4, 2
// [Asm] subst   addi v19, v8, 1 ->   addi a4, a4, 1
// [Asm] subst   mv v7, v17 ->   mv a3, a0
// [Asm] subst   j .sum_nested8.49_0 ->   j .sum_nested8.49_0
// [Asm] subst   mv v14, zero ->   mv a0, zero
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v8, Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v2, Insn(iref=%3) -> v7, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, zero, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 5 -> 1
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move: a1 <- zero
// [Asm] defined: a1 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, a1, a0, v3]
// [Asm] defined: v11 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, a2, a1, a0, v3]
// [Asm] move: a2 <- v11
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0, v3]
// [Asm] move: a3 <- v2
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [a2, a1, a3, a0, a4, v3]
// [Asm] move: a4 <- v3
// [Asm] defined: a4 is X
// [Asm] skip edge 10 -> 4
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v3]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main25.48") clobbered_x: @hashset.of([a2, s0, a3, a0])
// [Asm] Label("main25.48") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -40 ->   addi a3, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a3, -8
// [Asm] subst   li v15, 4 ->   li a0, 4
// [Asm] subst   sw v15, 0(v2) ->   sw a0, 0(a3)
// [Asm] subst   sw v15, 4(v2) ->   sw a0, 4(a3)
// [Asm] subst   sw v15, 8(v2) ->   sw a0, 8(a3)
// [Asm] subst   sw v15, 12(v2) ->   sw a0, 12(a3)
// [Asm] subst   sw v15, 16(v2) ->   sw a0, 16(a3)
// [Asm] subst   sw v15, 20(v2) ->   sw a0, 20(a3)
// [Asm] subst   sw v15, 24(v2) ->   sw a0, 24(a3)
// [Asm] subst   sw v15, 28(v2) ->   sw a0, 28(a3)
// [Asm] subst   sw v15, 32(v2) ->   sw a0, 32(a3)
// [Asm] subst   sw v15, 36(v2) ->   sw a0, 36(a3)
// [Asm] subst   addi v3, s11, -40 ->   addi s0, s11, -40
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s0)
// [Asm] subst   sw zero, 4(v3) ->   sw zero, 4(s0)
// [Asm] subst   sw zero, 8(v3) ->   sw zero, 8(s0)
// [Asm] subst   sw zero, 12(v3) ->   sw zero, 12(s0)
// [Asm] subst   sw zero, 16(v3) ->   sw zero, 16(s0)
// [Asm] subst   sw zero, 20(v3) ->   sw zero, 20(s0)
// [Asm] subst   sw zero, 24(v3) ->   sw zero, 24(s0)
// [Asm] subst   sw zero, 28(v3) ->   sw zero, 28(s0)
// [Asm] subst   sw zero, 32(v3) ->   sw zero, 32(s0)
// [Asm] subst   sw zero, 36(v3) ->   sw zero, 36(s0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   li v11, 10 ->   li a2, 10
// [Asm] subst   mv a4, v3 ->   mv a4, s0
// [Asm] subst   call sum_nested8.49 ->   call sum_nested8.49
// [Asm] subst   lw v7, 0(v3) ->   lw a0, 0(s0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] sum_nested8.49:
// [Asm] # block info: defs: [v2, v11, v5, v10, v7, v8, v4, v6, v9, v3], uses: [v3, v5, a0, a4, a2, v4, a1, v6, a3, v2], upward_exposed: [a2, a1, a3, a0, a4], params_defs: []
// [Asm] # live_in: [a0, zero, a4, a2, a1, a3], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .sum_nested8.49_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0, a4]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, a4, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, a4, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, a4, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, a4, v3]
// [Asm]   mv v6, a4  # live: [v2, v4, v6, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v6, v5, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v6, v5, zero, v8]
// [Asm]   mv v9, v4  # live: [v7, v6, v5, zero, v9, v8]
// [Asm]   mv v10, v5  # live: [v7, v6, v10, zero, v9, v8]
// [Asm]   mv v11, v6  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v12], uses: [v12, v9, v8], upward_exposed: [v9, v8], params_defs: [v8, v11, v10, v9, v7]
// [Asm] # live_in: [v11, v10, zero, v7, v8, v9], live_out: [v11, v10, zero, v7, v8, v9]
// [Asm] # block parameters: [v7, v8, v9, v10, v11]
// [Asm] .sum_nested8.49_0:
// [Asm]   addi v12, v9, -1  # live: [v11, v10, zero, v7, v8, v12, v9]
// [Asm] # control
// [Asm]   blt v12, v8, .sum_nested8.49_2  # live: [v7, v11, v10, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [v8, v19, v16, v17, v7], uses: [v11, v16, v10, v7, v8, v19, v17, v9], upward_exposed: [v7, v11, v10, v9, v8], params_defs: []
// [Asm] # live_in: [v11, v10, zero, v8, v7, v9], live_out: [v11, v10, zero, v8, v7, v9]
// [Asm] # block parameters: []
// [Asm] .sum_nested8.49_1:
// [Asm]   th.lurw v16, v10, v8, 2  # live: [v11, v16, v10, zero, v8, v7, v9]
// [Asm]   add v17, v7, v16  # live: [v11, v10, zero, v8, v17, v9]
// [Asm]   th.surw v17, v11, v8, 2  # live: [v11, v10, zero, v8, v17, v9]
// [Asm]   addi v19, v8, 1  # live: [v11, v10, zero, v19, v17, v9]
// [Asm] # control
// [Asm]   mv v7, v17  # live: [v11, v10, zero, v7, v19, v9]
// [Asm]   mv v8, v19  # live: [v11, v10, zero, v8, v7, v9]
// [Asm]   mv v9, v9  # live: [v11, v10, zero, v8, v7, v9]
// [Asm]   mv v10, v10  # live: [v11, v10, zero, v8, v7, v9]
// [Asm]   mv v11, v11  # live: [v8, v11, v10, zero, v9, v7]
// [Asm]   j .sum_nested8.49_0  # live: [v8, v11, v10, zero, v9, v7]
// [Asm] 
// [Asm] # block info: defs: [v14], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v14]
// [Asm] # block parameters: []
// [Asm] .sum_nested8.49_2:
// [Asm] # control
// [Asm]   mv v14, zero  # live: [v14]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v14, a0], upward_exposed: [v14], params_defs: [v14]
// [Asm] # live_in: [v14], live_out: []
// [Asm] # block parameters: [v14]
// [Asm] .sum_nested8.49_3:
// [Asm] # control
// [Asm]   mv a0, v14  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main25.48:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v11, a0, v7, a2, a1, a3, s11, zero, a4, v8, v15, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main25.48_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v15, 4  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 0(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 4(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 8(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 12(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 16(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 20(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 24(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 28(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 32(v2)  # live: [s11, v15, zero, v2]
// [Asm]   sw v15, 36(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -40  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   sw zero, 0(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 4(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 8(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 12(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 16(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 20(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 24(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 28(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 32(v3)  # live: [v2, zero, v3]
// [Asm]   sw zero, 36(v3)  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, zero, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, a0, v3]
// [Asm]   li v11, 10  # live: [v2, v11, a1, a0, v3]
// [Asm]   mv a2, v11  # live: [v2, a2, a1, a0, v3]
// [Asm]   mv a3, v2  # live: [a2, a1, a3, a0, v3]
// [Asm]   mv a4, v3  # live: [a2, a1, a3, a0, a4, v3]
// [Asm]   call sum_nested8.49  # live: [a0, v3]
// [Asm]   mv v6, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   lw v7, 0(v3)  # live: [v7]
// [Asm]   # save_ctx2  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main25.48  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))
// [Knf] build_knf: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Get(Var("arr"), Var("x"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("res"), Var("x"), Var("s"))
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))
// [Knf] build_knf: App(Var("sum_nested"), [Int(0), Int(0)])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Knf] build_knf: Array(Int(10), Int(4))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Knf] build_knf: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))
// [Knf] build_knf: App(Var("sum_prefix"), [Var("arr"), Int(10)])
// [Knf] build_knf: Var("sum_prefix")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce _30 = res.34
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum_nested8.49
// [Main]   .type sum_nested8.49, @function
// [Main] # leaf true
// [Main] sum_nested8.49:
// [Main] .sum_nested8.49_5:
// [Main]   mv a6, a0
// [Main]   mv a5, a1
// [Main]   mv a1, a3
// [Main]   mv a0, a4
// [Main]   mv a3, a6
// [Main]   mv a4, a5
// [Main]   mv a5, a2
// [Main]   mv a2, a1
// [Main]   mv a1, a0
// [Main] 
// [Main] .sum_nested8.49_0:
// [Main]   addi a0, a5, -1
// [Main]   blt a0, a4, .sum_nested8.49_2
// [Main] 
// [Main] .sum_nested8.49_1:
// [Main]   th.lurw a0, a2, a4, 2
// [Main]   add a0, a3, a0
// [Main]   th.surw a0, a1, a4, 2
// [Main]   addi a4, a4, 1
// [Main]   mv a3, a0
// [Main]   j .sum_nested8.49_0
// [Main] 
// [Main] .sum_nested8.49_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .sum_nested8.49_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main25.48
// [Main]   .type main25.48, @function
// [Main] # leaf false
// [Main] main25.48:
// [Main] .main25.48_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi a3, s11, -40
// [Main]   andi s11, a3, -8
// [Main]   li a0, 4
// [Main]   sw a0, 0(a3)
// [Main]   sw a0, 4(a3)
// [Main]   sw a0, 8(a3)
// [Main]   sw a0, 12(a3)
// [Main]   sw a0, 16(a3)
// [Main]   sw a0, 20(a3)
// [Main]   sw a0, 24(a3)
// [Main]   sw a0, 28(a3)
// [Main]   sw a0, 32(a3)
// [Main]   sw a0, 36(a3)
// [Main]   addi s0, s11, -40
// [Main]   andi s11, s0, -8
// [Main]   sw zero, 0(s0)
// [Main]   sw zero, 4(s0)
// [Main]   sw zero, 8(s0)
// [Main]   sw zero, 12(s0)
// [Main]   sw zero, 16(s0)
// [Main]   sw zero, 20(s0)
// [Main]   sw zero, 24(s0)
// [Main]   sw zero, 28(s0)
// [Main]   sw zero, 32(s0)
// [Main]   sw zero, 36(s0)
// [Main]   mv a0, zero
// [Main]   mv a1, zero
// [Main]   li a2, 10
// [Main]   mv a4, s0
// [Main]   call sum_nested8.49
// [Main]   lw a0, 0(s0)
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main25.48
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [5, 0, 2, 3, 1]
// [Wasm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Wasm] Lowering function sum_nested8.49
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.3), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Insn(iref=%2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.4), offset=BlockParam(bref=b0, bpref=$b.1), width=@32), val=Insn(iref=%3))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%3), Insn(iref=%5), BlockParam(bref=b0, bpref=$b.2), BlockParam(bref=b0, bpref=$b.3), BlockParam(bref=b0, bpref=$b.4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.2), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.4) -> $$f.4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.4) -> $b0.$b.4
// [Wasm] Local BlockParam(bref=b0, bpref=$b.3) -> $b0.$b.3
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.2) -> $b0.$b.2
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function sum_nested8.49 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main25.48
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Int32(val=4))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[Int32(val=0), Int32(val=0), Int32(val=10), Mem(fref=f1, mref=m0), Mem(fref=f1, mref=m1)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f1, mref=m1), index=0, width=@32))
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering control Return(args=[Insn(iref=%4)])
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Lowered function main25.48 to wasm
// [KnfOpt] freq: {sum_prefix1: Once, sum_nested8: Many(2), main25: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(sum_prefix1)
// [KnfOpt] freq: {main25: Once, sum_nested8.35: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main25: Once, sum_nested8.35: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %6: Call(ty=Unit, f=f0, args=[Insn(iref=%3), Insn(iref=%5), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3), FnParam(fref=f0, fpref=$f.4)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main25.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested8.49 false true true false true
// [CoreOpt] allow_inline: false %0 main25.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested8.49 false true true false true
// [CoreOpt] allow_inline: false %0 main25.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested8.49 false true true false true
// [CoreOpt] allow_inline: false %0 main25.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested8.49 false true true false true
// [CoreOpt] allow_inline: false %0 main25.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested8.49 false true true false true
// [CoreOpt] allow_inline: false %0 main25.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested8.49 false true true false true
// [CoreOpt2] LVN subst Insn(iref=%7) with Insn(iref=%8)
