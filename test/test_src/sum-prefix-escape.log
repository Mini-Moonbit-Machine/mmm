// [Knf] build_knf: LetRec({name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))
// [Knf] build_knf: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Get(Var("arr"), Var("x"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("res"), Var("x"), Var("s"))
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))
// [Knf] build_knf: App(Var("sum_nested"), [Int(0), Int(0)])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Knf] build_knf: Array(Int(10), Int(4))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Knf] build_knf: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))
// [Knf] build_knf: App(Var("sum_prefix"), [Var("arr"), Int(10)])
// [Knf] build_knf: Var("sum_prefix")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function sum_prefix1(arr2_3, len4_5, k) {
// [Main]     const _6 = 0;
// [Main]     const res_7 = minimbt_create_array($force(len4_5), $force(_6));
// [Main]     function sum_nested8(acc9_10, x11_12, k) {
// [Main]       const _13 = 1;
// [Main]       const _14 = len4_5 - _13;
// [Main]       if (x11_12 <= _14) {
// [Main]         const _15 = arr2_3[x11_12];
// [Main]         const s_16 = acc9_10 + _15;
// [Main]         const _18 = res_7[x11_12] = s_16;
// [Main]         const _19 = 1;
// [Main]         const _20 = x11_12 + _19;
// [Main]         return $thunk(() => sum_nested8(s_16, _20, k))
// [Main]       } else {
// [Main]         return k(null)
// [Main]       }
// [Main]     }
// [Main]     const _21 = 0;
// [Main]     const _22 = 0;
// [Main]     return $thunk(() => sum_nested8(_21, _22, function (_24) {
// [Main]       return $thunk(() => k(res_7))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main25(k) {
// [Main]     const _26 = 10;
// [Main]     const _27 = 4;
// [Main]     const arr_28 = minimbt_create_array($force(_26), $force(_27));
// [Main]     const _29 = 10;
// [Main]     return $thunk(() => sum_prefix1(arr_28, _29, function (_30) {
// [Main]       const _31 = 0;
// [Main]       const _32 = _30[_31];
// [Main]       return $thunk(() => k(minimbt_print_int($force(_32))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main25(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
