// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_6"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_6"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main25_1 ->   call main25_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, FnParam(fref=f0, fpref=$f.1) -> v3, Mem(fref=f0, mref=m1) -> v5, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v6, Mem(fref=f0, mref=m0) -> v4
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, zero, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, zero, v15, v3]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, zero, v4, a1, s11, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, zero, a0, v4, a1, s11, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, zero, a0, v4, a2, a1, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, zero, v4, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v5, zero, v13, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, v5, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v9, zero]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v9, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a0, v9, zero]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, a0, v9]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sum_prefix1_0"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="v11 ← a0", color=green];
// [Asm]   r23 [label="s10", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="v15 ← a0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v4 ← s2", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v13 ← a1", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r5 [label="v14 ← a0", color=green];
// [Asm]   r24 [label="v9 ← a2", color=green];
// [Asm]   r15 [label="a3", color=blue];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="a4", color=blue];
// [Asm]   r18 [label="a6", color=blue];
// [Asm]   r19 [label="a7", color=blue];
// [Asm]   r17 [label="a5", color=blue];
// [Asm]   r21 [label="v5 ← a0", color=green];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r13;
// [Asm]   r1 -- r12;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r22;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r0 -- r11;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r0 -- r18;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r20;
// [Asm]   r0 -- r14;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r4 -- r18;
// [Asm]   r7 -- r9;
// [Asm]   r0 -- r19;
// [Asm]   r7 -- r17;
// [Asm]   r7 -- r22;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r19;
// [Asm]   r8 -- r13;
// [Asm]   r0 -- r3;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r8;
// [Asm]   r7 -- r15;
// [Asm]   r8 -- r18;
// [Asm]   r7 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r14;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r0 -- r12;
// [Asm]   r4 -- r17;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r7 -- r12;
// [Asm]   r0 -- r20;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a1-> 3:s11-> 4:v3-> 7:v4-> 8:a0-> 9:a2-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a3-> 16:a4-> 17:a5-> 18:a6-> 19:a7-> 5:v14-> 20:v11-> 21:v5-> 22:v13-> 24:v9-> 6:v15-> 23:s10-> 25:v8"
// [Asm]   comment = "v2<-s0;v11<-a0;v15<-a0;v3<-s1;v4<-s2;v13<-a1;v14<-a0;v9<-a2;v8<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sum_prefix1_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   slliw v14, v3, 2 ->   slliw a0, s1, 2
// [Asm] subst   sub v15, s11, v14 ->   sub a0, s11, a0
// [Asm] subst   andi v4, v15, -8 ->   andi s2, a0, -8
// [Asm] subst   mv s11, v4 ->   mv s11, s2
// [Asm] subst   mv a1, v3 ->   mv a1, s1
// [Asm] subst   mv a0, v4 ->   mv a0, s2
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v11, s11, -32 ->   addi a0, s11, -32
// [Asm] subst   andi v5, v11, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v5 ->   mv s11, a0
// [Asm] subst   la v13, sum_nested8_3 ->   la a1, sum_nested8_3
// [Asm] subst   sd v13, 0(v5) ->   sd a1, 0(a0)
// [Asm] subst   sd v3, 8(v5) ->   sd s1, 8(a0)
// [Asm] subst   sd v2, 16(v5) ->   sd s0, 16(a0)
// [Asm] subst   sd v4, 24(v5) ->   sd s2, 24(a0)
// [Asm] subst   mv s10, v5 ->   mv s10, a0
// [Asm] subst   ld v9, 0(v5) ->   ld a2, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   jalr v9 ->   jalr a2
// [Asm] subst   mv a0, v4 ->   mv a0, s2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Mem(fref=f1, mref=m0) -> v2, Insn(iref=%3) -> v6, Self(fref=f1) -> v0, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v13, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [v9]
// [Asm] live_set: [a0, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main25_1"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v13 ← a1", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="a3", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r14 [label="a4", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="v9 ← a1", color=green];
// [Asm]   r15 [label="a5", color=blue];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="a6", color=blue];
// [Asm]   r18 [label="v4 ← a0", color=green];
// [Asm]   r19 [label="v5 ← a0", color=green];
// [Asm]   r17 [label="a7", color=blue];
// [Asm]   r12 [label="a2", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r17;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v11-> 1:v2-> 3:v13-> 2:s11-> 4:a0-> 5:v9-> 6:a1-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a2-> 13:a3-> 14:a4-> 15:a5-> 16:a6-> 17:a7-> 18:v4-> 19:v5-> 20:v6"
// [Asm]   comment = "v11<-a0;v6<-a0;v13<-a1;v2<-a0;v9<-a1;v4<-a0;v5<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main25_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v11, s11, -40 ->   addi a0, s11, -40
// [Asm] subst   andi v2, v11, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v13, 4 ->   li a1, 4
// [Asm] subst   sw v13, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   sw v13, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   sw v13, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   sw v13, 12(v2) ->   sw a1, 12(a0)
// [Asm] subst   sw v13, 16(v2) ->   sw a1, 16(a0)
// [Asm] subst   sw v13, 20(v2) ->   sw a1, 20(a0)
// [Asm] subst   sw v13, 24(v2) ->   sw a1, 24(a0)
// [Asm] subst   sw v13, 28(v2) ->   sw a1, 28(a0)
// [Asm] subst   sw v13, 32(v2) ->   sw a1, 32(a0)
// [Asm] subst   sw v13, 36(v2) ->   sw a1, 36(a0)
// [Asm] subst   li v9, 10 ->   li a1, 10
// [Asm] subst   call sum_prefix1_0 ->   call sum_prefix1_0
// [Asm] subst   lw v5, 0(v4) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v14, Insn(iref=%3) -> v13, FnParam(fref=f3, fpref=$f.1) -> v3, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v12, FreeVar(fvref=^1) -> v4, FreeVar(fvref=^2) -> v5, Insn(iref=%1) -> v10, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f3, fpref=$f.0) -> v2, FreeVar(fvref=^3) -> v6, Insn(iref=%5) -> v15, Self(fref=f3) -> v0, Insn(iref=%0) -> v9
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Insn(iref=%0)])
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v4, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a1, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v0, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v5, v6, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v4, v5, v6, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v5, v6, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [zero]
// [Asm] defined: v11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v5, zero, v20, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v5, v21, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v5, zero, v13, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v5, zero, v13, v8, v4, v6, v17]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v5, v18, zero, v13, v8, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5, v6, zero, v13, v8]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v4, v5, v6, v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v5, v6, v15, zero, v7]
// [Asm] move_origin: [v13]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v4, v5, v6, zero, v8]
// [Asm] move_origin: [v15]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v4, v5, v6, zero, v8]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of sum_nested8_3"];
// [Asm]   r0 [label="v9 ← a0", color=green];
// [Asm]   r3 [label="v8 ← a2", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="v6 ← a5", color=green];
// [Asm]   r13 [label="v20 ← a0", color=green];
// [Asm]   r4 [label="v7 ← a3", color=green];
// [Asm]   r1 [label="v5 ← a1", color=green];
// [Asm]   r11 [label="v3 ← a0", color=green];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="v2 ← a2", color=green];
// [Asm]   r14 [label="v21 ← a0", color=green];
// [Asm]   r8 [label="v0 ← a3", color=green];
// [Asm]   r5 [label="v4 ← a4", color=green];
// [Asm]   r15 [label="v12 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="v13 ← a0", color=green];
// [Asm]   r18 [label="v18 ← a3", color=green];
// [Asm]   r19 [label="v15 ← a2", color=green];
// [Asm]   r17 [label="v17 ← a3", color=green];
// [Asm]   r12 [label="v11 ← a0", color=green];
// [Asm]   r4 -- r13;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r5 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r5 -- r10;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r8 -- r9;
// [Asm]   r1 -- r18;
// [Asm]   r5 -- r13;
// [Asm]   r1 -- r19;
// [Asm]   r5 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r16 -- r19;
// [Asm]   r2 -- r10;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r5 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r16 -- r18;
// [Asm]   r16 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r19;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r10 -- r11;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r17;
// [Asm]   r1 -- r11;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r8;
// [Asm]   r2 -- r19;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r5 -- r15;
// [Asm]   r4 -- r19;
// [Asm]   comment = "0:v9-> 1:v5-> 2:zero-> 3:v8-> 4:v7-> 5:v4-> 6:v6-> 13:v20-> 14:v21-> 15:v12-> 11:v3-> 10:v2-> 8:v0-> 16:v13-> 17:v17-> 18:v18-> 19:v15-> 9:a1-> 7:a0-> 12:v11"
// [Asm]   comment = "v9<-a0;v8<-a2;v6<-a5;v20<-a0;v7<-a3;v5<-a1;v3<-a0;v2<-a2;v21<-a0;v0<-a3;v4<-a4;v12<-a0;v13<-a0;v18<-a3;v15<-a2;v17<-a3;v11<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of sum_nested8_3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v9, v4, -1 ->   addi a0, a4, -1
// [Asm] subst   blt v9, v8, .sum_nested8_3_2 ->   blt a0, a2, .sum_nested8_3_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv a3, s10
// [Asm] subst   mv v2, a0 ->   mv a2, a0
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   lw v4, 8(v0) ->   lw a4, 8(a3)
// [Asm] subst   ld v5, 16(v0) ->   ld a1, 16(a3)
// [Asm] subst   ld v6, 24(v0) ->   ld a5, 24(a3)
// [Asm] subst   mv v7, v2 ->   mv a3, a2
// [Asm] subst   mv v8, v3 ->   mv a2, a0
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] subst   slliw v20, v8, 2 ->   slliw a0, a2, 2
// [Asm] subst   add v21, v5, v20 ->   add a0, a1, a0
// [Asm] subst   lw v12, 0(v21) ->   lw a0, 0(a0)
// [Asm] subst   add v13, v7, v12 ->   add a0, a3, a0
// [Asm] subst   slliw v17, v8, 2 ->   slliw a3, a2, 2
// [Asm] subst   add v18, v6, v17 ->   add a3, a5, a3
// [Asm] subst   sw v13, 0(v18) ->   sw a0, 0(a3)
// [Asm] subst   addi v15, v8, 1 ->   addi a2, a2, 1
// [Asm] subst   mv v7, v13 ->   mv a3, a0
// [Asm] subst   j .sum_nested8_3_0 ->   j .sum_nested8_3_0
// [Asm] before colored: # leaf false
// [Asm] T$start_6:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_6_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main25_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] sum_nested8_3:
// [Asm] # block info: defs: [v2, v5, v7, v8, v0, v4, v6, v3], uses: [v3, v0, a1, s10, a0, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v5, zero, v8, v7, v4, v6]
// [Asm] # block parameters: []
// [Asm] .sum_nested8_3_4:
// [Asm]   # save_ctx1  # live: [a1, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, v0, zero, v3]
// [Asm]   lw v4, 8(v0)  # live: [v2, v0, v4, zero, v3]
// [Asm]   ld v5, 16(v0)  # live: [v2, v0, v4, v5, zero, v3]
// [Asm]   ld v6, 24(v0)  # live: [v2, v4, v5, v6, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, v4, v5, v6, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, v4, v5, v6, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v4, v9, v8], upward_exposed: [v4, v8], params_defs: [v8, v7]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6], live_out: [v5, zero, v7, v8, v4, v6]
// [Asm] # block parameters: [v7, v8]
// [Asm] .sum_nested8_3_0:
// [Asm]   addi v9, v4, -1  # live: [v5, zero, v8, v7, v4, v6, v9]
// [Asm] # control
// [Asm]   blt v9, v8, .sum_nested8_3_2  # live: [v8, v4, v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v21, v18, v13, v20, v7, v8, v17, v12, v15], uses: [v5, v21, v18, v13, v20, v7, v8, v6, v17, v12, v15], upward_exposed: [v7, v5, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6], live_out: [v5, zero, v8, v7, v4, v6]
// [Asm] # block parameters: []
// [Asm] .sum_nested8_3_1:
// [Asm]   slliw v20, v8, 2  # live: [v5, zero, v20, v8, v7, v4, v6]
// [Asm]   add v21, v5, v20  # live: [v5, v21, zero, v8, v7, v4, v6]
// [Asm]   lw v12, 0(v21)  # live: [v5, zero, v8, v7, v4, v6, v12]
// [Asm]   add v13, v7, v12  # live: [v5, zero, v13, v8, v4, v6]
// [Asm]   slliw v17, v8, 2  # live: [v5, zero, v13, v8, v4, v6, v17]
// [Asm]   add v18, v6, v17  # live: [v5, v18, zero, v13, v8, v4, v6]
// [Asm]   sw v13, 0(v18)  # live: [v4, v5, v6, zero, v13, v8]
// [Asm]   addi v15, v8, 1  # live: [v4, v5, v6, v15, zero, v13]
// [Asm] # control
// [Asm]   mv v7, v13  # live: [v4, v5, v6, v15, zero, v7]
// [Asm]   mv v8, v15  # live: [v7, v4, v5, v6, zero, v8]
// [Asm]   j .sum_nested8_3_0  # live: [v7, v4, v5, v6, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .sum_nested8_3_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .sum_nested8_3_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] sum_prefix1_0:
// [Asm] # block info: defs: [v2, t1, v14, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, s10, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v3], uses: [v3, v11, v14, v5, a0, v13, a2, a1, s11, v9, zero, v4, v15, v2], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .sum_prefix1_0_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, s11, v3]
// [Asm]   slliw v14, v3, 2  # live: [v2, v14, zero, s11, v3]
// [Asm]   sub v15, s11, v14  # live: [v2, zero, v15, v3]
// [Asm]   andi v4, v15, -8  # live: [v2, zero, v4, v3]
// [Asm]   mv s11, v4  # live: [v2, zero, v4, s11, v3]
// [Asm]   mv a1, v3  # live: [v2, zero, v4, a1, s11, v3]
// [Asm]   mv a0, v4  # live: [v2, zero, a0, v4, a1, s11, v3]
// [Asm]   mv a2, zero  # live: [v2, zero, a0, v4, a2, a1, s11, v3]
// [Asm]   call memseti32  # live: [v2, zero, v4, s11, v3]
// [Asm]   addi v11, s11, -32  # live: [v2, v11, zero, v4, v3]
// [Asm]   andi v5, v11, -8  # live: [v2, v5, zero, v4, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, zero, v4, v3]
// [Asm]   la v13, sum_nested8_3  # live: [v2, v5, zero, v13, v4, v3]
// [Asm]   sd v13, 0(v5)  # live: [v3, v4, v5, zero, v2]
// [Asm]   sd v3, 8(v5)  # live: [v4, v5, zero, v2]
// [Asm]   sd v2, 16(v5)  # live: [v4, v5, zero]
// [Asm]   sd v4, 24(v5)  # live: [v4, v5, zero]
// [Asm]   mv s10, v5  # live: [v4, v5, zero]
// [Asm]   ld v9, 0(v5)  # live: [v4, v9, zero]
// [Asm]   # save_ctx2  # live: [v4, v9, zero]
// [Asm]   mv a0, zero  # live: [v4, a0, v9, zero]
// [Asm]   mv a1, zero  # live: [v4, a1, a0, v9]
// [Asm]   jalr v9  # live: [v4, a0]
// [Asm]   mv v8, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main25_1:
// [Asm] # block info: defs: [t1, v13, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v11, v5, v13, a0, v4, a1, v6, s11, v9, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main25_1_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v11, s11, -40  # live: [v11]
// [Asm]   andi v2, v11, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [v2]
// [Asm]   li v13, 4  # live: [v13, v2]
// [Asm]   sw v13, 0(v2)  # live: [v13, v2]
// [Asm]   sw v13, 4(v2)  # live: [v13, v2]
// [Asm]   sw v13, 8(v2)  # live: [v13, v2]
// [Asm]   sw v13, 12(v2)  # live: [v13, v2]
// [Asm]   sw v13, 16(v2)  # live: [v13, v2]
// [Asm]   sw v13, 20(v2)  # live: [v13, v2]
// [Asm]   sw v13, 24(v2)  # live: [v13, v2]
// [Asm]   sw v13, 28(v2)  # live: [v13, v2]
// [Asm]   sw v13, 32(v2)  # live: [v13, v2]
// [Asm]   sw v13, 36(v2)  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   li v9, 10  # live: [a0, v9]
// [Asm]   mv a1, v9  # live: [a1, a0]
// [Asm]   call sum_prefix1_0  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm]   lw v5, 0(v4)  # live: [v5]
// [Asm]   # save_ctx2  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_6  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("res", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))
// [Knf] build_knf: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Get(Var("arr"), Var("x"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("res"), Var("x"), Var("s"))
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))
// [Knf] build_knf: App(Var("sum_nested"), [Int(0), Int(0)])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Var({val: Some(Array(Int))})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Knf] build_knf: Array(Int(10), Int(4))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Knf] build_knf: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))
// [Knf] build_knf: App(Var("sum_prefix"), [Var("arr"), Int(10)])
// [Knf] build_knf: Var("sum_prefix")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_6
// [Main]   .type T$start_6, @function
// [Main] # leaf false
// [Main] T$start_6:
// [Main] .T$start_6_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main25_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum_nested8_3
// [Main]   .type sum_nested8_3, @function
// [Main] # leaf true
// [Main] sum_nested8_3:
// [Main] .sum_nested8_3_4:
// [Main]   mv a3, s10
// [Main]   mv a2, a0
// [Main]   mv a0, a1
// [Main]   lw a4, 8(a3)
// [Main]   ld a1, 16(a3)
// [Main]   ld a5, 24(a3)
// [Main]   mv a3, a2
// [Main]   mv a2, a0
// [Main] 
// [Main] .sum_nested8_3_0:
// [Main]   addi a0, a4, -1
// [Main]   blt a0, a2, .sum_nested8_3_2
// [Main] 
// [Main] .sum_nested8_3_1:
// [Main]   slliw a0, a2, 2
// [Main]   add a0, a1, a0
// [Main]   lw a0, 0(a0)
// [Main]   add a0, a3, a0
// [Main]   slliw a3, a2, 2
// [Main]   add a3, a5, a3
// [Main]   sw a0, 0(a3)
// [Main]   addi a2, a2, 1
// [Main]   mv a3, a0
// [Main]   j .sum_nested8_3_0
// [Main] 
// [Main] .sum_nested8_3_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .sum_nested8_3_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum_prefix1_0
// [Main]   .type sum_prefix1_0, @function
// [Main] # leaf false
// [Main] sum_prefix1_0:
// [Main] .sum_prefix1_0_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   slliw a0, s1, 2
// [Main]   sub a0, s11, a0
// [Main]   andi s2, a0, -8
// [Main]   mv s11, s2
// [Main]   mv a1, s1
// [Main]   mv a0, s2
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -32
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, sum_nested8_3
// [Main]   sd a1, 0(a0)
// [Main]   sd s1, 8(a0)
// [Main]   sd s0, 16(a0)
// [Main]   sd s2, 24(a0)
// [Main]   mv s10, a0
// [Main]   ld a2, 0(a0)
// [Main]   mv a0, zero
// [Main]   mv a1, zero
// [Main]   jalr a2
// [Main]   mv a0, s2
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main25_1
// [Main]   .type main25_1, @function
// [Main] # leaf false
// [Main] main25_1:
// [Main] .main25_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -40
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 4
// [Main]   sw a1, 0(a0)
// [Main]   sw a1, 4(a0)
// [Main]   sw a1, 8(a0)
// [Main]   sw a1, 12(a0)
// [Main]   sw a1, 16(a0)
// [Main]   sw a1, 20(a0)
// [Main]   sw a1, 24(a0)
// [Main]   sw a1, 28(a0)
// [Main]   sw a1, 32(a0)
// [Main]   sw a1, 36(a0)
// [Main]   li a1, 10
// [Main]   call sum_prefix1_0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_6
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
