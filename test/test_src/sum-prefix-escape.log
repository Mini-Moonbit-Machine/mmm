// [Asm] LoweringOrder: [5, 0, 2, 3, 1]
// [Asm] LoweringOrder: [[4], [1, 2], [3], [], [0]]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 1), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b1, b2, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 2), (b5, 0), (b2, 0), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v15, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> v12, Self(fref=f0) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v11, Insn(iref=%2) -> v14, Insn(iref=%1) -> v13, FnParam(fref=f0, fpref=$f.3) -> v5, BlockParam(bref=b0, bpref=$b.3) -> v9, BlockParam(bref=b0, bpref=$b.0) -> v6, BlockParam(bref=b0, bpref=$b.1) -> v7, BlockParam(bref=b0, bpref=$b.2) -> v8, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> v10, Insn(iref=%4) -> v16
// [Asm] succs: [0]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping ComputeAddress(ma=Offset(ty=Unit, val=Int64(val=0), offset=BlockParam(bref=b0, bpref=$b.1), width=@32))
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[BlockParam(bref=b0, bpref=$b.1), Int32(val=9)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v11
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v20]
// [Asm] live_set: [zero, v20, v7, v8, v6, v9]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] defs: []
// [Asm] live_set: [a2, a1, a3, zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, a3, zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a2, a3, zero, v3]
// [Asm] move: v3 <- a1
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, a3, zero, v3]
// [Asm] move: v4 <- a2
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, zero, v3]
// [Asm] move: v5 <- a3
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, v5, zero, v3]
// [Asm] move: v6 <- v2
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move: v7 <- v3
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v5, zero, v8]
// [Asm] move: v8 <- v4
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v7, v6, v9, zero, v8]
// [Asm] move: v9 <- v5
// [Asm] defined: v9 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v7, v8, v6, v9, zero, v13]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v7, v14, v9, zero, v8]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v14, v9, zero, v8]
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v14, v9, zero, v8]
// [Asm] defined: v16 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v16, v9, zero, v8]
// [Asm] move: v6 <- v14
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v7 <- v16
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v8 <- v8
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] move: v9 <- v9
// [Asm] defs: []
// [Asm] live_set: [v8, v6, v9, zero, v7]
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move: v11 <- zero
// [Asm] defined: v11 is X
// [Asm] Label("sum_nested.49") clobbered_x: @hashset.of([a2, a1, a3, a0, a4])
// [Asm] Label("sum_nested.49") clobbered_f: @hashset.of([])
// [Asm] subst   ret ->   ret
// [Asm] subst   li v20, 9 ->   li a0, 9
// [Asm] subst   blt v20, v7, .sum_nested.49_2 ->   blt a0, a1, .sum_nested.49_2
// [Asm] subst   mv v2, a0 ->   mv a4, a0
// [Asm] subst   mv v5, a3 ->   mv a0, a3
// [Asm] subst   mv v6, v2 ->   mv a3, a4
// [Asm] subst   mv v9, v5 ->   mv a4, a0
// [Asm] subst   th.lurw v13, v8, v7, 2 ->   th.lurw a0, a2, a1, 2
// [Asm] subst   add v14, v6, v13 ->   add a0, a3, a0
// [Asm] subst   th.surw v14, v9, v7, 2 ->   th.surw a0, a4, a1, 2
// [Asm] subst   addi v16, v7, 1 ->   addi a1, a1, 1
// [Asm] subst   mv v6, v14 ->   mv a3, a0
// [Asm] subst   j .sum_nested.49_0 ->   j .sum_nested.49_0
// [Asm] subst   mv v11, zero ->   mv a0, zero
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v8, Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v2, Insn(iref=%3) -> v7, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [v14, s11, zero, v2]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, zero, v3]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] skip edge 5 -> 2
// [Asm] defs: [a1]
// [Asm] live_set: [v2, a1, a0, v3]
// [Asm] move: a1 <- zero
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v3]
// [Asm] move: a2 <- v2
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0, v3]
// [Asm] move: a3 <- v3
// [Asm] defined: a3 is X
// [Asm] skip edge 8 -> 4
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v3]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.48") clobbered_x: @hashset.of([a2, s0, a0])
// [Asm] Label("main.48") clobbered_f: @hashset.of([])
// [Asm] subst   addi v2, s11, -40 ->   addi a2, s11, -40
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   li v14, 4 ->   li a0, 4
// [Asm] subst   sw v14, 0(v2) ->   sw a0, 0(a2)
// [Asm] subst   sw v14, 4(v2) ->   sw a0, 4(a2)
// [Asm] subst   sw v14, 8(v2) ->   sw a0, 8(a2)
// [Asm] subst   sw v14, 12(v2) ->   sw a0, 12(a2)
// [Asm] subst   sw v14, 16(v2) ->   sw a0, 16(a2)
// [Asm] subst   sw v14, 20(v2) ->   sw a0, 20(a2)
// [Asm] subst   sw v14, 24(v2) ->   sw a0, 24(a2)
// [Asm] subst   sw v14, 28(v2) ->   sw a0, 28(a2)
// [Asm] subst   sw v14, 32(v2) ->   sw a0, 32(a2)
// [Asm] subst   sw v14, 36(v2) ->   sw a0, 36(a2)
// [Asm] subst   addi v3, s11, -40 ->   addi s0, s11, -40
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   mv a3, v3 ->   mv a3, s0
// [Asm] subst   call sum_nested.49 ->   call sum_nested.49
// [Asm] subst   lw v7, 0(v3) ->   lw a0, 0(s0)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] sum_nested.49:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v9, v3], uses: [v2, v5, a0, a2, v4, a1, a3, v3], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0, zero], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .sum_nested.49_5:
// [Asm]   # save_ctx1  # live: [a2, a1, a3, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, a3, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, a2, a3, zero, v3]
// [Asm]   mv v4, a2  # live: [v2, v4, a3, zero, v3]
// [Asm]   mv v5, a3  # live: [v2, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   mv v6, v2  # live: [v4, v6, v5, zero, v3]
// [Asm]   mv v7, v3  # live: [v4, v6, v5, zero, v7]
// [Asm]   mv v8, v4  # live: [v7, v6, v5, zero, v8]
// [Asm]   mv v9, v5  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v20, v7], upward_exposed: [v7], params_defs: [v8, v6, v9, v7]
// [Asm] # live_in: [v7, v6, v9, zero, v8], live_out: [v7, v6, v9, zero, v8]
// [Asm] # block parameters: [v6, v7, v8, v9]
// [Asm] .sum_nested.49_0:
// [Asm] # control
// [Asm]   li v20, 9  # live: [zero, v20, v7, v8, v6, v9]
// [Asm]   blt v20, v7, .sum_nested.49_2  # live: [v7, v6, v9, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [v14, v16, v6, v13, v7], uses: [v14, v16, v13, v7, v8, v6, v9], upward_exposed: [v7, v6, v9, v8], params_defs: []
// [Asm] # live_in: [v8, v6, v9, zero, v7], live_out: [v8, v6, v9, zero, v7]
// [Asm] # block parameters: []
// [Asm] .sum_nested.49_1:
// [Asm]   th.lurw v13, v8, v7, 2  # live: [v7, v8, v6, v9, zero, v13]
// [Asm]   add v14, v6, v13  # live: [v7, v14, v9, zero, v8]
// [Asm]   th.surw v14, v9, v7, 2  # live: [v7, v14, v9, zero, v8]
// [Asm]   addi v16, v7, 1  # live: [v16, v14, v9, zero, v8]
// [Asm] # control
// [Asm]   mv v6, v14  # live: [v6, v16, v9, zero, v8]
// [Asm]   mv v7, v16  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v8, v8  # live: [v8, v6, v9, zero, v7]
// [Asm]   mv v9, v9  # live: [v8, v6, v9, zero, v7]
// [Asm]   j .sum_nested.49_0  # live: [v8, v6, v9, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .sum_nested.49_2:
// [Asm] # control
// [Asm]   mv v11, zero  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .sum_nested.49_3:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.48:
// [Asm] # block info: defs: [v2, t1, v14, v7, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, v14, zero, a0, v7, v8, a2, a1, s11, a3, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.48_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -40  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v14, 4  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 0(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 4(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 8(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 12(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 16(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 20(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 24(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 28(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 32(v2)  # live: [v14, s11, zero, v2]
// [Asm]   sw v14, 36(v2)  # live: [s11, zero, v2]
// [Asm]   addi v3, s11, -40  # live: [v2, zero, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, zero, v3]
// [Asm]   # save_ctx2  # live: [v2, zero, v3]
// [Asm]   mv a0, zero  # live: [v2, a0, zero, v3]
// [Asm]   mv a1, zero  # live: [v2, a1, a0, v3]
// [Asm]   mv a2, v2  # live: [a2, a1, a0, v3]
// [Asm]   mv a3, v3  # live: [a2, a1, a3, a0, v3]
// [Asm]   call sum_nested.49  # live: [a0, v3]
// [Asm]   mv v6, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   lw v7, 0(v3)  # live: [v7]
// [Asm]   # save_ctx2  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.48  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] beta reduce _30 = res.34
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl sum_nested.49
// [Main]   .type sum_nested.49, @function
// [Main] # leaf true
// [Main] sum_nested.49:
// [Main] .sum_nested.49_5:
// [Main]   mv a4, a0
// [Main]   mv a0, a3
// [Main]   mv a3, a4
// [Main]   mv a4, a0
// [Main] 
// [Main] .sum_nested.49_0:
// [Main]   li a0, 9
// [Main]   blt a0, a1, .sum_nested.49_2
// [Main] 
// [Main] .sum_nested.49_1:
// [Main]   th.lurw a0, a2, a1, 2
// [Main]   add a0, a3, a0
// [Main]   th.surw a0, a4, a1, 2
// [Main]   addi a1, a1, 1
// [Main]   mv a3, a0
// [Main]   j .sum_nested.49_0
// [Main] 
// [Main] .sum_nested.49_2:
// [Main]   mv a0, zero
// [Main] 
// [Main] .sum_nested.49_3:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.48
// [Main]   .type main.48, @function
// [Main] # leaf false
// [Main] main.48:
// [Main] .main.48_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   addi a2, s11, -40
// [Main]   andi s11, a2, -8
// [Main]   li a0, 4
// [Main]   sw a0, 0(a2)
// [Main]   sw a0, 4(a2)
// [Main]   sw a0, 8(a2)
// [Main]   sw a0, 12(a2)
// [Main]   sw a0, 16(a2)
// [Main]   sw a0, 20(a2)
// [Main]   sw a0, 24(a2)
// [Main]   sw a0, 28(a2)
// [Main]   sw a0, 32(a2)
// [Main]   sw a0, 36(a2)
// [Main]   addi s0, s11, -40
// [Main]   andi s11, s0, -8
// [Main]   mv a0, zero
// [Main]   mv a1, zero
// [Main]   mv a3, s0
// [Main]   call sum_nested.49
// [Main]   lw a0, 0(s0)
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.48
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] check: LetRec({tyvars: [], name: ("sum_prefix", Array[Int]), args: [("arr", Array[Int]), ("len", Int)], body: Let(("res", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("res", Var(None)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))) against Array[Int]
// [Typer] infer: Array(Var("len"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("len") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] check: LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))) against Array[Int]
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] infer: Var("len")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("s", Var(None)), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))) against Unit
// [Typer] infer: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None)
// [Typer] infer: Var("acc")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Get(Var("arr"), Var("x"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: Put(Var("res"), Var("x"), Var("s"))
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] check: Var("res") against Array[Int]
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("sum_nested") against (Int, Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] unify: (Int, Int) -> Unit and (Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")) against Array[Int]
// [Typer] infer: App(Var("sum_nested"), [Int(0), Int(0)])
// [Typer] infer: Var("sum_nested")
// [Typer] inst: TypeScheme(([], (Int, Int) -> Unit))
// [Typer] inst result: (Int, Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Var("res") against Array[Int]
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("arr", Var(None)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("arr", Var(None)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Typer] infer: Array(Int(10), Int(4))
// [Typer] infer: Int(4)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var(None) and Array[Int]
// [Typer] union: Var(None) and Array[Int]
// [Typer] infer: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0)) against Int
// [Typer] check: App(Var("sum_prefix"), [Var("arr"), Int(10)]) against Array[Int]
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Var(Array[Int])))
// [Typer] inst result: Array[Int]
// [Typer] infer: Int(10)
// [Typer] check: Var("sum_prefix") against (Array[Int], Int) -> Array[Int]
// [Typer] inst: TypeScheme(([], (Array[Int], Int) -> Array[Int]))
// [Typer] inst result: (Array[Int], Int) -> Array[Int]
// [Typer] unify: (Array[Int], Int) -> Array[Int] and (Array[Int], Int) -> Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {sum_prefix.1: Once, sum_nested.8: Many(2), main.25: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(sum_prefix)
// [KnfOpt] freq: {main.25: Once, sum_nested.35: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {main.25: Once, sum_nested.35: Many(2)}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {s.41: MayEscape, _44: MayEscape, arr.28: MayEscape, res.34: MayEscape, _26: MayEscape, _27: MayEscape, _29: MayEscape, _33: MayEscape, _45: MayEscape, _46: MayEscape, _32: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f0, args=[Insn(iref=%2), Insn(iref=%4), FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] allow_inline: false %0 main.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested.49 false true true false true
// [CoreOpt] allow_inline: false %0 main.48 false true true true true
// [CoreOpt] allow_inline: false %2 sum_nested.49 false true true false true
// [CoreOpt2] LVN subst Insn(iref=%6) with Insn(iref=%7)
