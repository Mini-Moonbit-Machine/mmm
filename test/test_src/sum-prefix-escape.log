// [Knf] build_knf: LetRec({tyvars: [], name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Array(Int)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Int), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Unit), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Unit), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("arr", Array(Int)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("res", Array(Int)), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Int), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Unit), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Unit), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Int), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Unit), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)}, Let(("_", Unit), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))
// [Knf] build_knf: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=Some(Int))), Let(("s", Int), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Unit), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))), Unit)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Prim(Var("len"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("s", Int), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int)), Let(("_", Unit), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=Some(Int))
// [Knf] build_knf: Var("acc")
// [Knf] build_knf: Get(Var("arr"), Var("x"))
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("_", Unit), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("res"), Var("x"), Var("s"))
// [Knf] build_knf: Var("res")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Unit), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))
// [Knf] build_knf: App(Var("sum_nested"), [Int(0), Int(0)])
// [Knf] build_knf: Var("sum_nested")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("res")
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("arr", Array(Int)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("arr", Array(Int)), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Knf] build_knf: Array(Int(10), Int(4))
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Knf] build_knf: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))
// [Knf] build_knf: App(Var("sum_prefix"), [Var("arr"), Int(10)])
// [Knf] build_knf: Var("sum_prefix")
// [Knf] build_knf: Var("arr")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function sum_prefix_1(arr_3, len_5, k) {
// [Main]     const _6 = 0;
// [Main]     const res_7 = minimbt_create_array($force(len_5), $force(_6));
// [Main]     function sum_nested_8(acc_10, x_12, k) {
// [Main]       const _13 = 1;
// [Main]       const _14 = len_5 - _13;
// [Main]       if (x_12 <= _14) {
// [Main]         const _15 = arr_3[x_12];
// [Main]         const s_16 = acc_10 + _15;
// [Main]         const _18 = res_7[x_12] = s_16;
// [Main]         const _19 = 1;
// [Main]         const _20 = x_12 + _19;
// [Main]         return $thunk(() => sum_nested_8(s_16, _20, k))
// [Main]       } else {
// [Main]         return k(null)
// [Main]       }
// [Main]     }
// [Main]     const _21 = 0;
// [Main]     const _22 = 0;
// [Main]     return $thunk(() => sum_nested_8(_21, _22, function (_24) {
// [Main]       return $thunk(() => k(res_7))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_25(k) {
// [Main]     const _26 = 10;
// [Main]     const _27 = 4;
// [Main]     const arr_28 = minimbt_create_array($force(_26), $force(_27));
// [Main]     const _29 = 10;
// [Main]     return $thunk(() => sum_prefix_1(arr_28, _29, function (_30) {
// [Main]       const _31 = 0;
// [Main]       const _32 = _30[_31];
// [Main]       return $thunk(() => k(minimbt_print_int($force(_32))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_25(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("sum_prefix", Array(Int)), args: [("arr", Array(Int)), ("len", Int)], body: Let(("res", Var({val: None})), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var({val: None})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var({val: None})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("arr", Var({val: None})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("res", Var({val: None})), Array(Var("len"), Int(0)), LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var({val: None})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var({val: None})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")))) against Array(Int)
// [Typer] infer: Array(Var("len"), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("len") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Array(Int)
// [Typer] union: Var({val: None}) and Array(Int)
// [Typer] check: LetRec({tyvars: [], name: ("sum_nested", Unit), args: [("acc", Int), ("x", Int)], body: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var({val: None})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var({val: None})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit)}, Let(("_", Var({val: None})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res"))) against Array(Int)
// [Typer] typevars: []
// [Typer] check: If(LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)), Let(("s", Var({val: None})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var({val: None})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))), Unit) against Unit
// [Typer] check: LE(Var("x"), Prim(Var("len"), Int(1), Sub, kind=None)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("len"), Int(1), Sub, kind=None)
// [Typer] infer: Var("len")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Let(("s", Var({val: None})), Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None), Let(("_", Var({val: None})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]))) against Unit
// [Typer] infer: Prim(Var("acc"), Get(Var("arr"), Var("x")), Add, kind=None)
// [Typer] infer: Var("acc")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Get(Var("arr"), Var("x"))
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Let(("_", Var({val: None})), Put(Var("res"), Var("x"), Var("s")), App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)])) against Unit
// [Typer] infer: Put(Var("res"), Var("x"), Var("s"))
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] check: Var("res") against Array(Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("sum_nested"), [Var("s"), Prim(Var("x"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var({val: Some(Int)})))
// [Typer] inst result: Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("sum_nested") against Fun([Int, Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Unit)))
// [Typer] inst result: Fun([Int, Int], Unit)
// [Typer] unify: Fun([Int, Int], Unit) and Fun([Int, Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var({val: None})), App(Var("sum_nested"), [Int(0), Int(0)]), Var("res")) against Array(Int)
// [Typer] infer: App(Var("sum_nested"), [Int(0), Int(0)])
// [Typer] infer: Var("sum_nested")
// [Typer] inst: TypeScheme(([], Fun([Int, Int], Unit)))
// [Typer] inst result: Fun([Int, Int], Unit)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Var("res") against Array(Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("arr", Var({val: None})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("arr", Var({val: None})), Array(Int(10), Int(4)), App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))]))
// [Typer] infer: Array(Int(10), Int(4))
// [Typer] infer: Int(4)
// [Typer] check: Int(10) against Int
// [Typer] unify: Var({val: None}) and Array(Int)
// [Typer] union: Var({val: None}) and Array(Int)
// [Typer] infer: App(Var("print_int"), [Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0))])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Get(App(Var("sum_prefix"), [Var("arr"), Int(10)]), Int(0)) against Int
// [Typer] check: App(Var("sum_prefix"), [Var("arr"), Int(10)]) against Array(Int)
// [Typer] infer: Var("arr")
// [Typer] inst: TypeScheme(([], Var({val: Some(Array(Int))})))
// [Typer] inst result: Array(Int)
// [Typer] infer: Int(10)
// [Typer] check: Var("sum_prefix") against Fun([Array(Int), Int], Array(Int))
// [Typer] inst: TypeScheme(([], Fun([Array(Int), Int], Array(Int))))
// [Typer] inst result: Fun([Array(Int), Int], Array(Int))
// [Typer] unify: Fun([Array(Int), Int], Array(Int)) and Fun([Array(Int), Int], Array(Int))
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
