class Print [T] {
  print: (T) -> Unit
}
instance Print [Int] {
  print = let rec aux: (x: Int) -> Unit {
      Apply[](Var("print_int"), [Var("x"), ])
    }
    Var(aux)
}
instance Print [String] {
  print = let rec aux: (x: String) -> Unit {
      Apply[](Var("print_string"), [Var("x"), ])
    }
    Var(aux)
}
let rec print_generic: forall [("P", Some("Print")), ("X", None)] . (p: P, _dummy: X) -> Unit {
  Apply[](Var("print"), [Var("p"), ])
}
let rec main: () -> Unit {
  let _: Unit = Apply[("P", Int),("X", Double),](Var("print_generic"), [Int(1), Double(0.1), ])
  let _: Unit = Apply[("P", String),("X", Unit),](Var("print_generic"), [String("\n"), Unit, ])
  let _: Unit = Apply[("P", String),("X", Int),](Var("print_generic"), [String("Hello Moonbit"), Int(2), ])
  Unit
}
Unit
