let rec pow: (x: Int, n: Int) -> Int {
  if (Eq(Var("n"), Int(0))) then {
    Int(1)
  } else {
    Var("x") * App(Var("pow"), [Var("x"), Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
  }
}
let rec mod: (x: Int, n: Int) -> Int {
  Var("x") - Prim(Prim(Var("x"), Var("n"), Div, kind=Some(Int)), Var("n"), Mul, kind=Some(Int))
}
let rec main: () -> Var(Unit) {
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("pow"), [Int(2), App(Var("pow"), [Int(2), Int(3)])]), ])
  let _: Var(Unit) = Apply(Var("print_char"), [Int(10), ])
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("pow"), [App(Var("pow"), [Int(2), Int(2)]), Int(3)]), ])
  let _: Var(Unit) = Apply(Var("print_char"), [Int(10), ])
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("mod"), [Int(66434), Int(100)]), ])
  let _: Var(Unit) = Apply(Var("print_char"), [Int(10), ])
  Unit
}
Unit
