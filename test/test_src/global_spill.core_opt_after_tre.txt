# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn main.80 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2(10)
    return %0
  }
}
.fn T$dummy.32 #f0 : fn() -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = %1
    return f0.m0
  }
}
.fn print.79 #f2 : fn(int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = eq($b0.0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: array[int32] = load_symbol ::2
    let _ = store int32 field(%1, 0 * @32) <- 0
    let %3: unit = ext_call minimbt_print_int(120)
    let %4: int32 = sub($b0.0, 1)
    jump b0(%4)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0)
  }
}
.thunk ::0 _77
.thunk ::1 _78
.thunk ::2 dummy.32
.thunk ::3 start

