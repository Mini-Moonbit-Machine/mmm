# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn bar26_1 #f1 : fn(int32, int32, int32, int32, int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0($f1, $f0, $f3, $f4, $f5, $f2)
    return %0
  }
}
.fn main39l0_2 #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f1(1, 2, 3, 4, 5, 6)
    return %0
  }
}
.fn T$start_6 #f6 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f2()
    return %0
  }
}
.fn foo1_0 #f0 : fn(int32, int32, int32, int32, int32, int32) -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = ext_call minimbt_print_int($f0)
    let %1: unit = ext_call minimbt_print_int($f1)
    let %2: unit = ext_call minimbt_print_int($f2)
    let %3: unit = ext_call minimbt_print_int($f3)
    let %4: unit = ext_call minimbt_print_int($f4)
    let %5: unit = ext_call minimbt_print_int($f5)
    return ()
  }
}
.thunk ::0 start
