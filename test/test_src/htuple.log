// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv21, Insn(iref=%8) -> fv14, Insn(iref=%10) -> v16, Insn(iref=%27) -> v33, Insn(iref=%14) -> v20, Insn(iref=%25) -> v31, Insn(iref=%4) -> v10, Mem(fref=f0, mref=m1) -> v3, Mem(fref=f0, mref=m3) -> v5, Insn(iref=%1) -> v7, Insn(iref=%11) -> v17, Insn(iref=%26) -> v32, Insn(iref=%6) -> v12, Self(fref=f0) -> v0, Insn(iref=%28) -> v34, Insn(iref=%9) -> v15, Insn(iref=%16) -> v22, Insn(iref=%24) -> v30, Mem(fref=f0, mref=m2) -> v4, Insn(iref=%5) -> v11, Insn(iref=%0) -> v6, Insn(iref=%19) -> v25, Insn(iref=%3) -> v9, Insn(iref=%18) -> v24, Insn(iref=%13) -> v19, Insn(iref=%7) -> v13, Insn(iref=%22) -> v28, Insn(iref=%17) -> v23, Insn(iref=%23) -> v29, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%2) -> fv8, Insn(iref=%20) -> v26, Insn(iref=%21) -> v27, Insn(iref=%12) -> v18
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v75]
// [Asm] live_set: [s11, v75, zero, v2]
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v76]
// [Asm] live_set: [v76, s11, zero, v2]
// [Asm] defined: v76 is X
// [Asm] defs: [fv77]
// [Asm] live_set: [fv77, s11, zero, v2]
// [Asm] defined: fv77 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v2, s11, zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [v7, s11, zero, fv8]
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, fv8]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0, fv8]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0, fv8]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [s11, zero, fv8]
// [Asm] move: v9 <- a0
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, fv8]
// [Asm] defs: [v10]
// [Asm] live_set: [s11, v10, zero]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v10, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [s11, zero]
// [Asm] move: v11 <- a0
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v65, s11, zero, v3]
// [Asm] defined: v65 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v66]
// [Asm] live_set: [v66, s11, zero, v3]
// [Asm] defined: v66 is X
// [Asm] defs: [fv67]
// [Asm] live_set: [s11, fv67, zero, v3]
// [Asm] defined: fv67 is F
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v68]
// [Asm] live_set: [s11, zero, v68, v3]
// [Asm] defined: v68 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v3]
// [Asm] defs: [v13]
// [Asm] live_set: [s11, zero, v13, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [fv14]
// [Asm] live_set: [s11, fv14, zero, v13, v3]
// [Asm] defined: fv14 is F
// [Asm] defs: [v15]
// [Asm] live_set: [s11, v15, fv14, zero, v13]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v15, fv14, zero, v13]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, v15, fv14, zero, a0]
// [Asm] move: a0 <- v13
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, v15, fv14, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [s11, v15, fv14, zero]
// [Asm] move: v16 <- a0
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v15, fv14, zero]
// [Asm] defs: [v17]
// [Asm] live_set: [v17, s11, v15, zero]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17, s11, v15, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, v15, zero, a0]
// [Asm] move: a0 <- v17
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, v15, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [s11, v15, zero]
// [Asm] move: v18 <- a0
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero]
// [Asm] defs: []
// [Asm] live_set: [s11, v15, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move: a0 <- v15
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [s11, zero]
// [Asm] move: v19 <- a0
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v4, s11, zero]
// [Asm] defined: s11 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v4, s11, v53, zero]
// [Asm] defined: v53 is X
// [Asm] defs: [fv54]
// [Asm] live_set: [v4, s11, zero, fv54]
// [Asm] defined: fv54 is F
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [v55]
// [Asm] live_set: [v4, s11, zero, v55]
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [v56]
// [Asm] live_set: [v4, s11, v56, zero]
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v4, s11, zero]
// [Asm] defs: [fv21]
// [Asm] live_set: [v4, s11, zero, fv21]
// [Asm] defined: fv21 is F
// [Asm] defs: [v22]
// [Asm] live_set: [v4, s11, zero, v22, fv21]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [fv21, s11, zero, v23, v22]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [s11, v24, zero, v23, v22]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [s11, v24, zero, v23, v22]
// [Asm] defs: [a0]
// [Asm] live_set: [v22, s11, zero, a0, v23]
// [Asm] move: a0 <- v24
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v23, s11, zero, a0, v22]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [s11, zero, v23, v22]
// [Asm] move: v25 <- a0
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v23, v22]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v23, v22]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0, v23]
// [Asm] move: a0 <- v22
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0, v23]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [s11, zero, v23]
// [Asm] move: v26 <- a0
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v23]
// [Asm] defs: []
// [Asm] live_set: [s11, zero, v23]
// [Asm] defs: [a0]
// [Asm] live_set: [s11, zero, a0]
// [Asm] move: a0 <- v23
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [s11, zero]
// [Asm] move: v27 <- a0
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero]
// [Asm] defined: s11 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v5, zero, v42]
// [Asm] defined: v42 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] defs: [v43]
// [Asm] live_set: [v5, v43, zero]
// [Asm] defined: v43 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] defs: [v44]
// [Asm] live_set: [v5, v44, zero]
// [Asm] defined: v44 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero]
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v5, zero, v29, v30]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v31, zero, v29, v30]
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v31, zero, v29, v30]
// [Asm] defs: [a0]
// [Asm] live_set: [v31, zero, a0, v30]
// [Asm] move: a0 <- v29
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v31, zero, a0, v30]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v31, zero, v30]
// [Asm] move: v32 <- a0
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v31, zero, v30]
// [Asm] defs: []
// [Asm] live_set: [v31, zero, v30]
// [Asm] defs: [a0]
// [Asm] live_set: [v31, zero, a0]
// [Asm] move: a0 <- v30
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v31, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v31, zero]
// [Asm] move: v33 <- a0
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v31, zero]
// [Asm] defs: []
// [Asm] live_set: [v31, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v31
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [zero]
// [Asm] move: v34 <- a0
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main16.79") clobbered_x: @hashset.of([s0, a1, a0, s1])
// [Asm] Label("main16.79") clobbered_f: @hashset.of([fs0, fa0])
// [Asm] subst   addi v2, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v75, 1 ->   li a1, 1
// [Asm] subst   sd v75, 0(v2) ->   sd a1, 0(a0)
// [Asm] subst   li v76, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv77, v76 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv77, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   lw v7, 0(v2) ->   lw a1, 0(a0)
// [Asm] subst   fld fv8, 8(v2) ->   fld fs0, 8(a0)
// [Asm] subst   mv a0, v7 ->   mv a0, a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fcvt.w.d v10, fv8, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   li v65, 1 ->   li a0, 1
// [Asm] subst   sd v65, 0(v3) ->   sd a0, 0(a1)
// [Asm] subst   li v66, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv67, v66 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv67, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   li v68, 3 ->   li a0, 3
// [Asm] subst   sd v68, 16(v3) ->   sd a0, 16(a1)
// [Asm] subst   lw v13, 0(v3) ->   lw a0, 0(a1)
// [Asm] subst   fld fv14, 8(v3) ->   fld fs0, 8(a1)
// [Asm] subst   lw v15, 16(v3) ->   lw s0, 16(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fcvt.w.d v17, fv14, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v15 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v4, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a0, -8
// [Asm] subst   li v53, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv54, v53 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv54, 0(v4) ->   fsd fa0, 0(a0)
// [Asm] subst   li v55, 3 ->   li a1, 3
// [Asm] subst   sd v55, 8(v4) ->   sd a1, 8(a0)
// [Asm] subst   li v56, 4 ->   li a1, 4
// [Asm] subst   sd v56, 16(v4) ->   sd a1, 16(a0)
// [Asm] subst   fld fv21, 0(v4) ->   fld fa0, 0(a0)
// [Asm] subst   lw v22, 8(v4) ->   lw s0, 8(a0)
// [Asm] subst   lw v23, 16(v4) ->   lw s1, 16(a0)
// [Asm] subst   fcvt.w.d v24, fv21, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v22 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v23 ->   mv a0, s1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v5, s11, -12 ->   addi a0, s11, -12
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a0, -8
// [Asm] subst   li v42, 1 ->   li a1, 1
// [Asm] subst   sw v42, 0(v5) ->   sw a1, 0(a0)
// [Asm] subst   li v43, 2 ->   li a1, 2
// [Asm] subst   sw v43, 4(v5) ->   sw a1, 4(a0)
// [Asm] subst   li v44, 3 ->   li a1, 3
// [Asm] subst   sw v44, 8(v5) ->   sw a1, 8(a0)
// [Asm] subst   lw v29, 0(v5) ->   lw a1, 0(a0)
// [Asm] subst   lw v30, 4(v5) ->   lw s0, 4(a0)
// [Asm] subst   lw v31, 8(v5) ->   lw s1, 8(a0)
// [Asm] subst   mv a0, v29 ->   mv a0, a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v30 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v31 ->   mv a0, s1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main16.79:
// [Asm] # block info: defs: [v2, fv67, v22, a1, s11, v44, fa1, v33, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, fv77, ft4, v5, v10, ft9, fa4, ft2, v17, v43, a3, v31, a7, fa7, v75, fa3, v68, ft3, t2, v55, v3, v25, t1, v16, v13, v26, v42, v7, ft0, ft1, v32, fv14, v29, v19, v4, v34, fv21, ft7, v11, v66, v53, a5, a0, v30, fv8, fv54, v65, a2, v24, v9, ft8, t3, t0, fa5, v18, v56, v23, fa0, t4, v15, v76], uses: [v3, v76, fv67, v13, v42, v22, v7, s11, fv14, v44, v29, zero, v4, fv21, fv77, v66, v5, v10, v53, a0, v30, fv54, fv8, v65, v17, v43, v24, v31, v75, v56, v68, v23, v15, v55, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main16.79_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   addi v2, s11, -16  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [s11, zero, v2]
// [Asm]   li v75, 1  # live: [s11, v75, zero, v2]
// [Asm]   sd v75, 0(v2)  # live: [s11, zero, v2]
// [Asm]   li v76, 4611686018427387904  # live: [v76, s11, zero, v2]
// [Asm]   fmv.d.x fv77, v76  # live: [fv77, s11, zero, v2]
// [Asm]   fsd fv77, 8(v2)  # live: [s11, zero, v2]
// [Asm]   lw v7, 0(v2)  # live: [v2, s11, zero, v7]
// [Asm]   fld fv8, 8(v2)  # live: [v7, s11, zero, fv8]
// [Asm]   # save_ctx2  # live: [v7, s11, zero, fv8]
// [Asm]   mv a0, v7  # live: [s11, zero, a0, fv8]
// [Asm]   call minimbt_print_int  # live: [s11, zero, a0, fv8]
// [Asm]   mv v9, a0  # live: [s11, zero, fv8]
// [Asm]   # restore_ctx2  # live: [s11, zero, fv8]
// [Asm]   fcvt.w.d v10, fv8, rtz  # live: [s11, v10, zero]
// [Asm]   # save_ctx2  # live: [s11, v10, zero]
// [Asm]   mv a0, v10  # live: [s11, zero, a0]
// [Asm]   call minimbt_print_int  # live: [s11, zero, a0]
// [Asm]   mv v11, a0  # live: [s11, zero]
// [Asm]   # restore_ctx2  # live: [s11, zero]
// [Asm]   addi v3, s11, -24  # live: [zero, v3]
// [Asm]   andi s11, v3, -8  # live: [s11, zero, v3]
// [Asm]   li v65, 1  # live: [v65, s11, zero, v3]
// [Asm]   sd v65, 0(v3)  # live: [s11, zero, v3]
// [Asm]   li v66, 4611686018427387904  # live: [v66, s11, zero, v3]
// [Asm]   fmv.d.x fv67, v66  # live: [s11, fv67, zero, v3]
// [Asm]   fsd fv67, 8(v3)  # live: [s11, zero, v3]
// [Asm]   li v68, 3  # live: [s11, zero, v68, v3]
// [Asm]   sd v68, 16(v3)  # live: [s11, zero, v3]
// [Asm]   lw v13, 0(v3)  # live: [s11, zero, v13, v3]
// [Asm]   fld fv14, 8(v3)  # live: [s11, fv14, zero, v13, v3]
// [Asm]   lw v15, 16(v3)  # live: [s11, v15, fv14, zero, v13]
// [Asm]   # save_ctx2  # live: [s11, v15, fv14, zero, v13]
// [Asm]   mv a0, v13  # live: [s11, v15, fv14, zero, a0]
// [Asm]   call minimbt_print_int  # live: [s11, v15, fv14, zero, a0]
// [Asm]   mv v16, a0  # live: [s11, v15, fv14, zero]
// [Asm]   # restore_ctx2  # live: [s11, v15, fv14, zero]
// [Asm]   fcvt.w.d v17, fv14, rtz  # live: [v17, s11, v15, zero]
// [Asm]   # save_ctx2  # live: [v17, s11, v15, zero]
// [Asm]   mv a0, v17  # live: [s11, v15, zero, a0]
// [Asm]   call minimbt_print_int  # live: [s11, v15, zero, a0]
// [Asm]   mv v18, a0  # live: [s11, v15, zero]
// [Asm]   # restore_ctx2  # live: [s11, v15, zero]
// [Asm]   # save_ctx2  # live: [s11, v15, zero]
// [Asm]   mv a0, v15  # live: [s11, zero, a0]
// [Asm]   call minimbt_print_int  # live: [s11, zero, a0]
// [Asm]   mv v19, a0  # live: [s11, zero]
// [Asm]   # restore_ctx2  # live: [s11, zero]
// [Asm]   addi v4, s11, -24  # live: [v4, zero]
// [Asm]   andi s11, v4, -8  # live: [v4, s11, zero]
// [Asm]   li v53, 4611686018427387904  # live: [v4, s11, v53, zero]
// [Asm]   fmv.d.x fv54, v53  # live: [v4, s11, zero, fv54]
// [Asm]   fsd fv54, 0(v4)  # live: [v4, s11, zero]
// [Asm]   li v55, 3  # live: [v4, s11, zero, v55]
// [Asm]   sd v55, 8(v4)  # live: [v4, s11, zero]
// [Asm]   li v56, 4  # live: [v4, s11, v56, zero]
// [Asm]   sd v56, 16(v4)  # live: [v4, s11, zero]
// [Asm]   fld fv21, 0(v4)  # live: [v4, s11, zero, fv21]
// [Asm]   lw v22, 8(v4)  # live: [v4, s11, zero, v22, fv21]
// [Asm]   lw v23, 16(v4)  # live: [fv21, s11, zero, v23, v22]
// [Asm]   fcvt.w.d v24, fv21, rtz  # live: [s11, v24, zero, v23, v22]
// [Asm]   # save_ctx2  # live: [s11, v24, zero, v23, v22]
// [Asm]   mv a0, v24  # live: [v22, s11, zero, a0, v23]
// [Asm]   call minimbt_print_int  # live: [v23, s11, zero, a0, v22]
// [Asm]   mv v25, a0  # live: [s11, zero, v23, v22]
// [Asm]   # restore_ctx2  # live: [s11, zero, v23, v22]
// [Asm]   # save_ctx2  # live: [s11, zero, v23, v22]
// [Asm]   mv a0, v22  # live: [s11, zero, a0, v23]
// [Asm]   call minimbt_print_int  # live: [s11, zero, a0, v23]
// [Asm]   mv v26, a0  # live: [s11, zero, v23]
// [Asm]   # restore_ctx2  # live: [s11, zero, v23]
// [Asm]   # save_ctx2  # live: [s11, zero, v23]
// [Asm]   mv a0, v23  # live: [s11, zero, a0]
// [Asm]   call minimbt_print_int  # live: [s11, zero, a0]
// [Asm]   mv v27, a0  # live: [s11, zero]
// [Asm]   # restore_ctx2  # live: [s11, zero]
// [Asm]   addi v5, s11, -12  # live: [v5, zero]
// [Asm]   andi s11, v5, -8  # live: [v5, zero]
// [Asm]   li v42, 1  # live: [v5, zero, v42]
// [Asm]   sw v42, 0(v5)  # live: [v5, zero]
// [Asm]   li v43, 2  # live: [v5, v43, zero]
// [Asm]   sw v43, 4(v5)  # live: [v5, zero]
// [Asm]   li v44, 3  # live: [v5, v44, zero]
// [Asm]   sw v44, 8(v5)  # live: [v5, zero]
// [Asm]   lw v29, 0(v5)  # live: [v5, zero, v29]
// [Asm]   lw v30, 4(v5)  # live: [v5, zero, v29, v30]
// [Asm]   lw v31, 8(v5)  # live: [v31, zero, v29, v30]
// [Asm]   # save_ctx2  # live: [v31, zero, v29, v30]
// [Asm]   mv a0, v29  # live: [v31, zero, a0, v30]
// [Asm]   call minimbt_print_int  # live: [v31, zero, a0, v30]
// [Asm]   mv v32, a0  # live: [v31, zero, v30]
// [Asm]   # restore_ctx2  # live: [v31, zero, v30]
// [Asm]   # save_ctx2  # live: [v31, zero, v30]
// [Asm]   mv a0, v30  # live: [v31, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v31, zero, a0]
// [Asm]   mv v33, a0  # live: [v31, zero]
// [Asm]   # restore_ctx2  # live: [v31, zero]
// [Asm]   # save_ctx2  # live: [v31, zero]
// [Asm]   mv a0, v31  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v34, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main16.79  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("return_i_d", Tuple([Int, Double])), args: [], body: Tuple([Int(1), Double(2)])}, LetRec({name: ("return_i_d_i", Tuple([Int, Double, Int])), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({name: ("return_d_i_i", Tuple([Double, Int, Int])), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Tuple([Int(1), Double(2)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: LetRec({name: ("return_i_d_i", Tuple([Int, Double, Int])), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({name: ("return_d_i_i", Tuple([Double, Int, Int])), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Tuple([Int(1), Double(2), Int(3)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("return_d_i_i", Tuple([Double, Int, Int])), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: Tuple([Double(2), Int(3), Int(4)])
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))
// [Knf] build_knf: App(Var("return_i_d"), [])
// [Knf] build_knf: Var("return_i_d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Knf] build_knf: App(Var("int_of_float"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))))))
// [Knf] build_knf: App(Var("return_i_d_i"), [])
// [Knf] build_knf: Var("return_i_d_i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Knf] build_knf: App(Var("int_of_float"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i2")])
// [Knf] build_knf: Var("i2")
// [Knf] build_knf: LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))
// [Knf] build_knf: App(Var("return_d_i_i"), [])
// [Knf] build_knf: Var("return_d_i_i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Knf] build_knf: App(Var("int_of_float"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [Var("i2")])
// [Knf] build_knf: Var("i2")
// [Knf] build_knf: LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))
// [Knf] build_knf: App(Var("return_i_i_i"), [])
// [Knf] build_knf: Var("return_i_i_i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("i2")])
// [Knf] build_knf: Var("i2")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)
// [Knf] build_knf: App(Var("print_int"), [Var("i3")])
// [Knf] build_knf: Var("i3")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main16.79
// [Main]   .type main16.79, @function
// [Main] # leaf false
// [Main] main16.79:
// [Main] .main16.79_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   addi a0, s11, -16
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sd a1, 0(a0)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   lw a1, 0(a0)
// [Main]   fld fs0, 8(a0)
// [Main]   mv a0, a1
// [Main]   call minimbt_print_int
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   li a0, 1
// [Main]   sd a0, 0(a1)
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 8(a1)
// [Main]   li a0, 3
// [Main]   sd a0, 16(a1)
// [Main]   lw a0, 0(a1)
// [Main]   fld fs0, 8(a1)
// [Main]   lw s0, 16(a1)
// [Main]   call minimbt_print_int
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   li a1, 3
// [Main]   sd a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sd a1, 16(a0)
// [Main]   fld fa0, 0(a0)
// [Main]   lw s0, 8(a0)
// [Main]   lw s1, 16(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   mv a0, s1
// [Main]   call minimbt_print_int
// [Main]   addi a0, s11, -12
// [Main]   andi s11, a0, -8
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   lw a1, 0(a0)
// [Main]   lw s0, 4(a0)
// [Main]   lw s1, 8(a0)
// [Main]   mv a0, a1
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   mv a0, s1
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main16.79
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main16.79
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Double]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Double(val=2))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m0), index=0, width=@(@32, @(@64, @32))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m0), index=1, width=@(@32, @(@64, @32))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Double, Int32]), mref=m1, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Double(val=2)), Field(index=2, val=Int32(val=3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m1), index=0, width=@(@32, @(@64, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m1), index=1, width=@(@32, @(@64, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m1), index=2, width=@(@32, @(@64, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Int32, Int32]), mref=m2, fills=[Field(index=0, val=Double(val=2)), Field(index=1, val=Int32(val=3)), Field(index=2, val=Int32(val=4))])
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m2), index=0, width=@(@64, @(@32, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m2), index=1, width=@(@64, @(@32, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m2), index=2, width=@(@64, @(@32, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32, Int32]), mref=m3, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Int32(val=2)), Field(index=2, val=Int32(val=3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m3), index=0, width=@(@32, @(@32, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m3), index=1, width=@(@32, @(@32, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=Mem(fref=f0, mref=m3), index=2, width=@(@32, @(@32, @(@32, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Mem(fref=f0, mref=m2) -> $f0.m2
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Mem(fref=f0, mref=m3) -> $f0.m3
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Lowered function main16.79 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {return_i_d1: Once, return_i_d_i4: Once, return_d_i_i8: Once, return_i_i_i12: Once, main16: Once}
// [KnfOpt] Knf inline Some(return_i_d1)
// [KnfOpt] Knf inline Some(return_i_d_i4)
// [KnfOpt] Knf inline Some(return_d_i_i8)
// [KnfOpt] Knf inline Some(return_i_i_i12)
// [KnfOpt] freq: {main16: Once}
// [KnfOpt] freq: {main16: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main16.79 false true true false true
// [CoreOpt] allow_inline: false %0 main16.79 false true true false true
