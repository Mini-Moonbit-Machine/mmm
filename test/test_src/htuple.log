// [Main] function thunk_main(k) {
// [Main]   function return_i_d_1(k) {
// [Main]     const _2 = 1;
// [Main]     const _3 = 2;
// [Main]     return $thunk(() => k([_2, _3]))
// [Main]   }
// [Main]   function return_i_d_i_4(k) {
// [Main]     const _5 = 1;
// [Main]     const _6 = 2;
// [Main]     const _7 = 3;
// [Main]     return $thunk(() => k([_5, _6, _7]))
// [Main]   }
// [Main]   function return_d_i_i_8(k) {
// [Main]     const _9 = 2;
// [Main]     const _10 = 3;
// [Main]     const _11 = 4;
// [Main]     return $thunk(() => k([_9, _10, _11]))
// [Main]   }
// [Main]   function return_i_i_i_12(k) {
// [Main]     const _13 = 1;
// [Main]     const _14 = 2;
// [Main]     const _15 = 3;
// [Main]     return $thunk(() => k([_13, _14, _15]))
// [Main]   }
// [Main]   function main_16(k) {
// [Main]     return $thunk(() => return_i_d_1(function (_17) {
// [Main]       const [i_19, d_21] = _17;
// [Main]       return $thunk(() => $external(minimbt_print_int, function (_23) {
// [Main]         return $thunk(() => $external(minimbt_int_of_float, function (_24) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (_26) {
// [Main]             return $thunk(() => return_i_d_i_4(function (_27) {
// [Main]               const [i_29, d_31, i2_33] = _27;
// [Main]               return $thunk(() => $external(minimbt_print_int, function (_35) {
// [Main]                 return $thunk(() => $external(minimbt_int_of_float, function (_36) {
// [Main]                   return $thunk(() => $external(minimbt_print_int, function (_38) {
// [Main]                     return $thunk(() => $external(minimbt_print_int, function (_40) {
// [Main]                       return $thunk(() => return_d_i_i_8(function (_41) {
// [Main]                         const [d_43, i_45, i2_47] = _41;
// [Main]                         return $thunk(() => $external(minimbt_int_of_float, function (_48) {
// [Main]                           return $thunk(() => $external(minimbt_print_int, function (_50) {
// [Main]                             return $thunk(() => $external(minimbt_print_int, function (_52) {
// [Main]                               return $thunk(() => $external(minimbt_print_int, function (_54) {
// [Main]                                 return $thunk(() => return_i_i_i_12(function (_55) {
// [Main]                                   const [i_57, i2_59, i3_61] = _55;
// [Main]                                   return $thunk(() => $external(minimbt_print_int, function (_63) {
// [Main]                                     return $thunk(() => $external(minimbt_print_int, function (_65) {
// [Main]                                       return $thunk(() => $external(minimbt_print_int, function (_67) {
// [Main]                                         return $thunk(() => k(null))
// [Main]                                       }
// [Main]                                       , i3_61))
// [Main]                                     }
// [Main]                                     , i2_59))
// [Main]                                   }
// [Main]                                   , i_57))
// [Main]                                 }
// [Main]                                 ))
// [Main]                               }
// [Main]                               , i2_47))
// [Main]                             }
// [Main]                             , i_45))
// [Main]                           }
// [Main]                           , _48))
// [Main]                         }
// [Main]                         , d_43))
// [Main]                       }
// [Main]                       ))
// [Main]                     }
// [Main]                     , i2_33))
// [Main]                   }
// [Main]                   , _36))
// [Main]                 }
// [Main]                 , d_31))
// [Main]               }
// [Main]               , i_29))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           , _24))
// [Main]         }
// [Main]         , d_21))
// [Main]       }
// [Main]       , i_19))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_16(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("return_i_d", (Int, Double)), args: [], body: Tuple([Int(1), Double(2)])}, LetRec({tyvars: [], name: ("return_i_d_i", (Int, Double, Int)), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Int(1), Double(2)]) against (Int, Double)
// [Typer] check: Int(1) against Int
// [Typer] check: Double(2) against Double
// [Typer] check: LetRec({tyvars: [], name: ("return_i_d_i", (Int, Double, Int)), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Int(1), Double(2), Int(3)]) against (Int, Double, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Double(2) against Double
// [Typer] check: Int(3) against Int
// [Typer] check: LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Double(2), Int(3), Int(4)]) against (Double, Int, Int)
// [Typer] check: Double(2) against Double
// [Typer] check: Int(3) against Int
// [Typer] check: Int(4) against Int
// [Typer] check: LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Int(1), Int(2), Int(3)]) against (Int, Int, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))
// [Typer] infer: App(Var("return_i_d"), [])
// [Typer] infer: Var("return_i_d")
// [Typer] inst: TypeScheme(([], () -> (Int, Double)))
// [Typer] inst result: () -> (Int, Double)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))))))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Var("d")]) against Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))))
// [Typer] infer: App(Var("return_i_d_i"), [])
// [Typer] infer: Var("return_i_d_i")
// [Typer] inst: TypeScheme(([], () -> (Int, Double, Int)))
// [Typer] inst result: () -> (Int, Double, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Var("d")]) against Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))
// [Typer] infer: App(Var("print_int"), [Var("i2")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))
// [Typer] infer: App(Var("return_d_i_i"), [])
// [Typer] infer: Var("return_d_i_i")
// [Typer] inst: TypeScheme(([], () -> (Double, Int, Int)))
// [Typer] inst result: () -> (Double, Int, Int)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Var("d")]) against Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))
// [Typer] infer: App(Var("print_int"), [Var("i2")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))
// [Typer] infer: App(Var("return_i_i_i"), [])
// [Typer] infer: Var("return_i_i_i")
// [Typer] inst: TypeScheme(([], () -> (Int, Int, Int)))
// [Typer] inst result: () -> (Int, Int, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))
// [Typer] infer: App(Var("print_int"), [Var("i2")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)
// [Typer] infer: App(Var("print_int"), [Var("i3")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
