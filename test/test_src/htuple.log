// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv22, Self(fref=f0) -> v0, Insn(iref=%28) -> v37, Insn(iref=%9) -> v14, Insn(iref=%16) -> v23, Insn(iref=%24) -> v33, Insn(iref=%8) -> fv13, Insn(iref=%10) -> v15, Insn(iref=%27) -> v36, Insn(iref=%14) -> [fv19, v20, v21], Insn(iref=%25) -> v34, Insn(iref=%5) -> v8, Insn(iref=%0) -> [v2, fv3], Insn(iref=%19) -> v26, Insn(iref=%4) -> v7, Insn(iref=%3) -> v6, Insn(iref=%18) -> v25, Insn(iref=%13) -> v18, Insn(iref=%7) -> v12, Insn(iref=%22) -> [v29, v30, v31], Insn(iref=%17) -> v24, Insn(iref=%23) -> v32, Insn(iref=%2) -> fv5, Insn(iref=%1) -> v4, Insn(iref=%20) -> v27, Insn(iref=%11) -> v16, Insn(iref=%26) -> v35, Insn(iref=%21) -> v28, Insn(iref=%6) -> [v9, fv10, v11], Insn(iref=%12) -> v17
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero]
// [Asm] defined: v4 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v4, zero, v64]
// [Asm] defined: v64 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, zero]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, zero, a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv5, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [fv5, zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [fv5, zero]
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] defined: v12 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v12, v57, zero]
// [Asm] defined: v57 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [v12, zero, fv13]
// [Asm] defined: fv13 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14, v12, zero, fv13]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v12, zero, fv13]
// [Asm] defs: [a0]
// [Asm] live_set: [v14, zero, a0, fv13]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, zero, a0, fv13]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v14, zero, fv13]
// [Asm] move: v15 <- a0
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero, fv13]
// [Asm] defs: [v16]
// [Asm] live_set: [v14, v16, zero]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v16, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [v14, zero, a0]
// [Asm] move: a0 <- v16
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v14, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [v14, zero]
// [Asm] move: v17 <- a0
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] defs: []
// [Asm] live_set: [v14, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [zero]
// [Asm] move: v18 <- a0
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v48]
// [Asm] live_set: [v48, zero]
// [Asm] defined: v48 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [fv22, zero]
// [Asm] defined: fv22 is F
// [Asm] defs: [v23]
// [Asm] live_set: [fv22, zero, v23]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [fv22, v24, zero, v23]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v24, zero, v23]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [v25, v24, zero, v23]
// [Asm] defs: [a0]
// [Asm] live_set: [v24, zero, a0, v23]
// [Asm] move: a0 <- v25
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v24, zero, a0, v23]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v24, zero, v23]
// [Asm] move: v26 <- a0
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v24, zero, v23]
// [Asm] defs: []
// [Asm] live_set: [v24, zero, v23]
// [Asm] defs: [a0]
// [Asm] live_set: [v24, zero, a0]
// [Asm] move: a0 <- v23
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v24, zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [v24, zero]
// [Asm] move: v27 <- a0
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v24, zero]
// [Asm] defs: []
// [Asm] live_set: [v24, zero]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v24
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v28]
// [Asm] live_set: [zero]
// [Asm] move: v28 <- a0
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v32]
// [Asm] live_set: [v32, zero]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v32, zero, v33]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v32, zero, v34, v33]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v32, zero, v34, v33]
// [Asm] defs: [a0]
// [Asm] live_set: [a0, zero, v34, v33]
// [Asm] move: a0 <- v32
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0, zero, v34, v33]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [zero, v34, v33]
// [Asm] move: v35 <- a0
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v34, v33]
// [Asm] defs: []
// [Asm] live_set: [zero, v34, v33]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, v34, a0]
// [Asm] move: a0 <- v33
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v34, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [zero, v34]
// [Asm] move: v36 <- a0
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v34]
// [Asm] defs: []
// [Asm] live_set: [zero, v34]
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v34
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v37]
// [Asm] live_set: [zero]
// [Asm] move: v37 <- a0
// [Asm] defined: v37 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.79") clobbered_x: @hashset.of([s0, a1, a0, s1])
// [Asm] Label("main.79") clobbered_f: @hashset.of([fs0, fa0])
// [Asm] subst   li v4, 1 ->   li a0, 1
// [Asm] subst   li v64, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv5, v64 ->   fmv.d.x fs0, a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fcvt.w.d v7, fv5, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v12, 1 ->   li a0, 1
// [Asm] subst   li v57, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv13, v57 ->   fmv.d.x fs0, a1
// [Asm] subst   li v14, 3 ->   li s0, 3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fcvt.w.d v16, fv13, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v14 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v48, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv22, v48 ->   fmv.d.x fa0, a0
// [Asm] subst   li v23, 3 ->   li s0, 3
// [Asm] subst   li v24, 4 ->   li s1, 4
// [Asm] subst   fcvt.w.d v25, fv22, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v23 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v24 ->   mv a0, s1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v32, 1 ->   li a0, 1
// [Asm] subst   li v33, 2 ->   li s0, 2
// [Asm] subst   li v34, 3 ->   li s1, 3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v33 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v34 ->   mv a0, s1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main.79:
// [Asm] # block info: defs: [a1, v28, v64, fa1, v33, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, v6, ft4, ft9, fa4, ft2, v37, v17, a3, a7, fa7, v48, fa3, ft3, t2, v25, t1, v14, v16, v26, v7, ft0, ft1, v32, v12, fv5, fv22, v8, v4, v57, v34, ft7, a5, a0, v36, a2, v24, ft8, t3, t0, fa5, v18, v23, fv13, fa0, v35, t4, v15], uses: [v25, v14, v16, a0, v7, v32, v12, v24, v64, v33, fv5, fv22, v48, zero, v23, fv13, v4, v57, v34], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.79_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   li v4, 1  # live: [v4, zero]
// [Asm]   li v64, 4611686018427387904  # live: [v4, zero, v64]
// [Asm]   fmv.d.x fv5, v64  # live: [fv5, v4, zero]
// [Asm]   # save_ctx2  # live: [fv5, v4, zero]
// [Asm]   mv a0, v4  # live: [fv5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [fv5, zero, a0]
// [Asm]   mv v6, a0  # live: [fv5, zero]
// [Asm]   # restore_ctx2  # live: [fv5, zero]
// [Asm]   fcvt.w.d v7, fv5, rtz  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v12, 1  # live: [v12, zero]
// [Asm]   li v57, 4611686018427387904  # live: [v12, v57, zero]
// [Asm]   fmv.d.x fv13, v57  # live: [v12, zero, fv13]
// [Asm]   li v14, 3  # live: [v14, v12, zero, fv13]
// [Asm]   # save_ctx2  # live: [v14, v12, zero, fv13]
// [Asm]   mv a0, v12  # live: [v14, zero, a0, fv13]
// [Asm]   call minimbt_print_int  # live: [v14, zero, a0, fv13]
// [Asm]   mv v15, a0  # live: [v14, zero, fv13]
// [Asm]   # restore_ctx2  # live: [v14, zero, fv13]
// [Asm]   fcvt.w.d v16, fv13, rtz  # live: [v14, v16, zero]
// [Asm]   # save_ctx2  # live: [v14, v16, zero]
// [Asm]   mv a0, v16  # live: [v14, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v14, zero, a0]
// [Asm]   mv v17, a0  # live: [v14, zero]
// [Asm]   # restore_ctx2  # live: [v14, zero]
// [Asm]   # save_ctx2  # live: [v14, zero]
// [Asm]   mv a0, v14  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v48, 4611686018427387904  # live: [v48, zero]
// [Asm]   fmv.d.x fv22, v48  # live: [fv22, zero]
// [Asm]   li v23, 3  # live: [fv22, zero, v23]
// [Asm]   li v24, 4  # live: [fv22, v24, zero, v23]
// [Asm]   fcvt.w.d v25, fv22, rtz  # live: [v25, v24, zero, v23]
// [Asm]   # save_ctx2  # live: [v25, v24, zero, v23]
// [Asm]   mv a0, v25  # live: [v24, zero, a0, v23]
// [Asm]   call minimbt_print_int  # live: [v24, zero, a0, v23]
// [Asm]   mv v26, a0  # live: [v24, zero, v23]
// [Asm]   # restore_ctx2  # live: [v24, zero, v23]
// [Asm]   # save_ctx2  # live: [v24, zero, v23]
// [Asm]   mv a0, v23  # live: [v24, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v24, zero, a0]
// [Asm]   mv v27, a0  # live: [v24, zero]
// [Asm]   # restore_ctx2  # live: [v24, zero]
// [Asm]   # save_ctx2  # live: [v24, zero]
// [Asm]   mv a0, v24  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v28, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   li v32, 1  # live: [v32, zero]
// [Asm]   li v33, 2  # live: [v32, zero, v33]
// [Asm]   li v34, 3  # live: [v32, zero, v34, v33]
// [Asm]   # save_ctx2  # live: [v32, zero, v34, v33]
// [Asm]   mv a0, v32  # live: [a0, zero, v34, v33]
// [Asm]   call minimbt_print_int  # live: [a0, zero, v34, v33]
// [Asm]   mv v35, a0  # live: [zero, v34, v33]
// [Asm]   # restore_ctx2  # live: [zero, v34, v33]
// [Asm]   # save_ctx2  # live: [zero, v34, v33]
// [Asm]   mv a0, v33  # live: [zero, v34, a0]
// [Asm]   call minimbt_print_int  # live: [zero, v34, a0]
// [Asm]   mv v36, a0  # live: [zero, v34]
// [Asm]   # restore_ctx2  # live: [zero, v34]
// [Asm]   # save_ctx2  # live: [zero, v34]
// [Asm]   mv a0, v34  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v37, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.79  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.79
// [Main]   .type main.79, @function
// [Main] # leaf false
// [Main] main.79:
// [Main] .main.79_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   li a0, 1
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fs0, a1
// [Main]   call minimbt_print_int
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   li a0, 1
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fs0, a1
// [Main]   li s0, 3
// [Main]   call minimbt_print_int
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   li s0, 3
// [Main]   li s1, 4
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   mv a0, s1
// [Main]   call minimbt_print_int
// [Main]   li a0, 1
// [Main]   li s0, 2
// [Main]   li s1, 3
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   mv a0, s1
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.79
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("return_i_d", (Int, Double)), args: [], body: Tuple([Int(1), Double(2)])}, LetRec({tyvars: [], name: ("return_i_d_i", (Int, Double, Int)), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)))))
// [Typer] resolve: Tuple([Int(1), Double(2)])
// [Typer] resolve: LetRec({tyvars: [], name: ("return_i_d_i", (Int, Double, Int)), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit))))
// [Typer] resolve: Tuple([Int(1), Double(2), Int(3)])
// [Typer] resolve: LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)))
// [Typer] resolve: Tuple([Double(2), Int(3), Int(4)])
// [Typer] resolve: LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit))
// [Typer] resolve: Tuple([Int(1), Int(2), Int(3)])
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)
// [Typer] resolve: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))
// [Typer] resolve: App(Var("return_i_d"), [])
// [Typer] resolve: Var("return_i_d")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))))))
// [Typer] resolve: App(Var("print_int"), [Var("i")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] resolve: App(Var("int_of_float"), [Var("d")])
// [Typer] resolve: Var("d")
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))))
// [Typer] resolve: App(Var("return_i_d_i"), [])
// [Typer] resolve: Var("return_i_d_i")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))
// [Typer] resolve: App(Var("print_int"), [Var("i")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] resolve: App(Var("int_of_float"), [Var("d")])
// [Typer] resolve: Var("d")
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))
// [Typer] resolve: App(Var("print_int"), [Var("i2")])
// [Typer] resolve: Var("i2")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))
// [Typer] resolve: App(Var("return_d_i_i"), [])
// [Typer] resolve: Var("return_d_i_i")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))
// [Typer] resolve: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] resolve: App(Var("int_of_float"), [Var("d")])
// [Typer] resolve: Var("d")
// [Typer] resolve: Var("int_of_float")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))
// [Typer] resolve: App(Var("print_int"), [Var("i")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))
// [Typer] resolve: App(Var("print_int"), [Var("i2")])
// [Typer] resolve: Var("i2")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))
// [Typer] resolve: App(Var("return_i_i_i"), [])
// [Typer] resolve: Var("return_i_i_i")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))
// [Typer] resolve: App(Var("print_int"), [Var("i")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))
// [Typer] resolve: App(Var("print_int"), [Var("i2")])
// [Typer] resolve: Var("i2")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)
// [Typer] resolve: App(Var("print_int"), [Var("i3")])
// [Typer] resolve: Var("i3")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("return_i_d", (Int, Double)), args: [], body: Tuple([Int(1), Double(2)])}, LetRec({tyvars: [], name: ("return_i_d_i", (Int, Double, Int)), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Int(1), Double(2)]) against (Int, Double)
// [Typer] check: Int(1) against Int
// [Typer] check: Double(2) against Double
// [Typer] check: LetRec({tyvars: [], name: ("return_i_d_i", (Int, Double, Int)), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Int(1), Double(2), Int(3)]) against (Int, Double, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Double(2) against Double
// [Typer] check: Int(3) against Int
// [Typer] check: LetRec({tyvars: [], name: ("return_d_i_i", (Double, Int, Int)), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Double(2), Int(3), Int(4)]) against (Double, Int, Int)
// [Typer] check: Double(2) against Double
// [Typer] check: Int(3) against Int
// [Typer] check: Int(4) against Int
// [Typer] check: LetRec({tyvars: [], name: ("return_i_i_i", (Int, Int, Int)), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Tuple([Int(1), Int(2), Int(3)]) against (Int, Int, Int)
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: LetTuple([("i", Var(None)), ("d", Var(None))], App(Var("return_i_d"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))
// [Typer] infer: App(Var("return_i_d"), [])
// [Typer] infer: Var("return_i_d")
// [Typer] inst: TypeScheme(([], () -> (Int, Double)))
// [Typer] inst result: () -> (Int, Double)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))))))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Var("d")]) against Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("i", Var(None)), ("d", Var(None)), ("i2", Var(None))], App(Var("return_i_d_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))))
// [Typer] infer: App(Var("return_i_d_i"), [])
// [Typer] infer: Var("return_i_d_i")
// [Typer] inst: TypeScheme(([], () -> (Int, Double, Int)))
// [Typer] inst result: () -> (Int, Double, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Var("d")]) against Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))))
// [Typer] infer: App(Var("print_int"), [Var("i2")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("d", Var(None)), ("i", Var(None)), ("i2", Var(None))], App(Var("return_d_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))))
// [Typer] infer: App(Var("return_d_i_i"), [])
// [Typer] infer: Var("return_d_i_i")
// [Typer] inst: TypeScheme(([], () -> (Double, Int, Int)))
// [Typer] inst result: () -> (Double, Int, Int)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))))
// [Typer] infer: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("int_of_float"), [Var("d")]) against Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] check: Var("int_of_float") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))))
// [Typer] infer: App(Var("print_int"), [Var("i2")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: LetTuple([("i", Var(None)), ("i2", Var(None)), ("i3", Var(None))], App(Var("return_i_i_i"), []), Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))))
// [Typer] infer: App(Var("return_i_i_i"), [])
// [Typer] infer: Var("return_i_i_i")
// [Typer] inst: TypeScheme(([], () -> (Int, Int, Int)))
// [Typer] inst result: () -> (Int, Int, Int)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)))
// [Typer] infer: App(Var("print_int"), [Var("i")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i2")]), Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit))
// [Typer] infer: App(Var("print_int"), [Var("i2")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Let(("_", Var(None)), App(Var("print_int"), [Var("i3")]), Unit)
// [Typer] infer: App(Var("print_int"), [Var("i3")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("i3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: Unit
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {return_i_d.1: Once, return_i_d_i.4: Once, return_d_i_i.8: Once, return_i_i_i.12: Once, main.16: Once}
// [KnfOpt] Knf inline Some(return_i_d)
// [KnfOpt] Knf inline Some(return_i_d_i)
// [KnfOpt] Knf inline Some(return_d_i_i)
// [KnfOpt] Knf inline Some(return_i_i_i)
// [KnfOpt] freq: {main.16: Once}
// [KnfOpt] freq: {main.16: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_68: MayEscape, _69: MayEscape, _17: Destructed, i.19: MayEscape, d.21: MayEscape, _24: MayEscape, _70: MayEscape, _71: MayEscape, _72: MayEscape, _27: Destructed, i.29: MayEscape, d.31: MayEscape, _36: MayEscape, i2.33: MayEscape, _73: MayEscape, _74: MayEscape, _75: MayEscape, _41: Destructed, d.43: MayEscape, _48: MayEscape, i.45: MayEscape, i2.47: MayEscape, _76: MayEscape, _77: MayEscape, _78: MayEscape, _55: Destructed, i.57: MayEscape, i2.59: MayEscape, i3.61: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.79 false true true false true
