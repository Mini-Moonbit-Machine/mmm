// [Asm] pre_assigned_registers: BlockParam(bref=b1, bpref=$b.0) -> v3, BlockParam(bref=b2, bpref=$b.0) -> v10, Insn(iref=%15) -> fv20, Insn(iref=%8) -> fv12, Insn(iref=%10) -> v14, Insn(iref=%27) -> v33, Insn(iref=%14) -> v18, Insn(iref=%25) -> v31, Insn(iref=%4) -> v7, Insn(iref=%1) -> v4, Insn(iref=%11) -> v15, Insn(iref=%26) -> v32, Insn(iref=%6) -> v9, Insn(iref=%28) -> v34, BlockParam(bref=b3, bpref=$b.0) -> v19, Insn(iref=%9) -> v13, Insn(iref=%16) -> v21, Insn(iref=%24) -> v30, Insn(iref=%5) -> v8, Insn(iref=%0) -> v2, Insn(iref=%19) -> v24, Insn(iref=%3) -> v6, Insn(iref=%18) -> v23, Insn(iref=%13) -> v17, Insn(iref=%7) -> v11, Insn(iref=%22) -> v27, Insn(iref=%17) -> v22, Insn(iref=%23) -> v29, Insn(iref=%2) -> fv5, Insn(iref=%20) -> v25, Self(fref=f4) -> v0, Insn(iref=%21) -> v26, BlockParam(bref=b4, bpref=$b.0) -> v28, Insn(iref=%12) -> v16
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v28, zero, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v28, zero, v29, v30]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v31, zero, v29, v30]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v31, zero, v29, v30]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v31, zero, a0, v30]
// [Asm] move_origin: [v29]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v31, zero, a0, v30]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v31, zero, v30]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v31, zero, v30]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v31, zero, v30]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v31, zero, a0]
// [Asm] move_origin: [v30]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v31, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v33]
// [Asm] live_set: [v31, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v31, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v31, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v34]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [fv20]
// [Asm] live_set: [v19, zero, fv20]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v19, v21, zero, fv20]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v21, zero, v22, fv20]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v21, zero, v22, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v21, zero, v22, v23]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v21, zero, a0, v22]
// [Asm] move_origin: [v23]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v21, zero, a0, v22]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v21, zero, v22]
// [Asm] move_origin: [a0]
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v21, zero, v22]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v21, zero, v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v22]
// [Asm] move_origin: [v21]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0, v22]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v25]
// [Asm] live_set: [zero, v22]
// [Asm] move_origin: [a0]
// [Asm] defined: v25 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v22]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v22]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v27]
// [Asm] live_set: [zero, v27]
// [Asm] move_origin: [a0]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v27]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v28, zero]
// [Asm] move_origin: [v27]
// [Asm] defined: v28 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5, v4, zero]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [fv5, v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv5, zero, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv5, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [fv5, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [fv5, zero]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v9]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [v11, fv12, v10, zero]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [v13]
// [Asm] live_set: [v11, fv12, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, fv12, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv12, zero, v13, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv12, zero, v13, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [fv12, zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [fv12, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15, zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, v13, a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, v13, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18, zero]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19, zero]
// [Asm] move_origin: [v18]
// [Asm] defined: v19 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main16l4_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r38 [label="v13 ← s0", color=green];
// [Asm]   r33 [label="v7 ← a0", color=green];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r26 [label="v23 ← a0", color=green];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r42 [label="v17 ← a0", color=green];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r29 [label="v26 ← a0", color=green];
// [Asm]   r35 [label="v9 ← a0", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r36 [label="v10 ← a1", color=green];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r24 [label="v21 ← s0", color=green];
// [Asm]   r32 [label="v6 ← a0", color=green];
// [Asm]   r43 [label="v18 ← a0", color=green];
// [Asm]   r31 [label="v4 ← a1", color=green];
// [Asm]   r39 [label="v14 ← a0", color=green];
// [Asm]   r17 [label="v28 ← a1", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r37 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="v32 ← a0", color=green];
// [Asm]   r23 [label="v19 ← a0", color=green];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r27 [label="v24 ← a0", color=green];
// [Asm]   r40 [label="v15 ← a0", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v25 ← a0", color=green];
// [Asm]   r41 [label="v16 ← a0", color=green];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r34 [label="v8 ← a0", color=green];
// [Asm]   r22 [label="v34 ← a0", color=green];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r30 [label="v27 ← a0", color=green];
// [Asm]   r25 [label="v22 ← s1", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r16 [label="v29 ← a0", color=green];
// [Asm]   r18 [label="v30 ← s0", color=green];
// [Asm]   r19 [label="v31 ← s1", color=green];
// [Asm]   r21 [label="v33 ← a0", color=green];
// [Asm]   r12 -- r25;
// [Asm]   r2 -- r38;
// [Asm]   r4 -- r38;
// [Asm]   r25 -- r28;
// [Asm]   r9 -- r25;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r1 -- r37;
// [Asm]   r1 -- r30;
// [Asm]   r1 -- r4;
// [Asm]   r15 -- r31;
// [Asm]   r37 -- r38;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r7 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r25;
// [Asm]   r2 -- r10;
// [Asm]   r10 -- r19;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r11 -- r18;
// [Asm]   r2 -- r7;
// [Asm]   r19 -- r21;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r18;
// [Asm]   r12 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r13 -- r38;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r2 -- r6;
// [Asm]   r10 -- r38;
// [Asm]   r10 -- r18;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r6 -- r18;
// [Asm]   r7 -- r38;
// [Asm]   r1 -- r40;
// [Asm]   r2 -- r12;
// [Asm]   r24 -- r27;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r38;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r13 -- r18;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r18 -- r20;
// [Asm]   r1 -- r38;
// [Asm]   r1 -- r41;
// [Asm]   r1 -- r6;
// [Asm]   r10 -- r25;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r35;
// [Asm]   r24 -- r25;
// [Asm]   r11 -- r25;
// [Asm]   r36 -- r37;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r13 -- r24;
// [Asm]   r17 -- r18;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r1 -- r43;
// [Asm]   r12 -- r38;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r38;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r34;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r23;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r19;
// [Asm]   r25 -- r27;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r1 -- r32;
// [Asm]   r5 -- r19;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r25 -- r26;
// [Asm]   r8 -- r38;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r25;
// [Asm]   r0 -- r19;
// [Asm]   r13 -- r25;
// [Asm]   r5 -- r38;
// [Asm]   r24 -- r26;
// [Asm]   r6 -- r24;
// [Asm]   r16 -- r18;
// [Asm]   r13 -- r19;
// [Asm]   r1 -- r28;
// [Asm]   r1 -- r39;
// [Asm]   r6 -- r19;
// [Asm]   r18 -- r19;
// [Asm]   r7 -- r19;
// [Asm]   r9 -- r38;
// [Asm]   r38 -- r41;
// [Asm]   r5 -- r24;
// [Asm]   r1 -- r29;
// [Asm]   r38 -- r40;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r1 -- r25;
// [Asm]   r11 -- r38;
// [Asm]   r5 -- r25;
// [Asm]   r9 -- r19;
// [Asm]   r6 -- r38;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r14;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r10 -- r24;
// [Asm]   r12 -- r18;
// [Asm]   r4 -- r19;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   r1 -- r42;
// [Asm]   comment = "0:t0-> 1:zero-> 2:a0-> 18:v30-> 19:v31-> 3:t1-> 4:t2-> 24:v21-> 25:v22-> 5:t3-> 6:t4-> 38:v13-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 16:v29-> 17:v28-> 20:v32-> 26:v23-> 27:v24-> 21:v33-> 23:v19-> 28:v25-> 37:v11-> 36:v10-> 39:v14-> 40:v15-> 41:v16-> 14:v2-> 15:v3-> 31:v4-> 22:v34-> 29:v26-> 30:v27-> 32:v6-> 33:v7-> 34:v8-> 35:v9-> 42:v17-> 43:v18"
// [Asm]   comment = "v13<-s0;v7<-a0;v23<-a0;v17<-a0;v26<-a0;v9<-a0;v10<-a1;v3<-a0;v21<-s0;v6<-a0;v18<-a0;v4<-a1;v14<-a0;v28<-a1;v11<-a0;v32<-a0;v19<-a0;v24<-a0;v15<-a0;v25<-a0;v16<-a0;v8<-a0;v34<-a0;v2<-a0;v27<-a0;v22<-s1;v29<-a0;v30<-s0;v31<-s1;v33<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main16l4_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r20 [label="fv5 ← fs0", color=green];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv20 ← fa0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r21 [label="fv12 ← fs0", color=green];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r20;
// [Asm]   r10 -- r20;
// [Asm]   r5 -- r21;
// [Asm]   r14 -- r20;
// [Asm]   r16 -- r20;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r11 -- r20;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r1 -- r21;
// [Asm]   r5 -- r20;
// [Asm]   r14 -- r21;
// [Asm]   r3 -- r20;
// [Asm]   r2 -- r21;
// [Asm]   r7 -- r20;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r21;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r20;
// [Asm]   r8 -- r21;
// [Asm]   r18 -- r21;
// [Asm]   r18 -- r20;
// [Asm]   r16 -- r21;
// [Asm]   r12 -- r21;
// [Asm]   r8 -- r20;
// [Asm]   r13 -- r21;
// [Asm]   r15 -- r20;
// [Asm]   r0 -- r20;
// [Asm]   r13 -- r20;
// [Asm]   r6 -- r20;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r17 -- r20;
// [Asm]   r4 -- r21;
// [Asm]   r9 -- r21;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:ft0-> 20:fv5-> 1:ft1-> 21:fv12-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 19:fv20"
// [Asm]   comment = "fv5<-fs0;fv20<-fa0;fv12<-fs0;"
// [Asm] }
// [Asm] 
// [Asm] subst   call return_i_d1l0_0 ->   call return_i_d1l0_0
// [Asm] subst   lw v29, 0(v28) ->   lw a0, 0(a1)
// [Asm] subst   lw v30, 4(v28) ->   lw s0, 4(a1)
// [Asm] subst   lw v31, 8(v28) ->   lw s1, 8(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v30 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v31 ->   mv a0, s1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   fld fv20, 0(v19) ->   fld fa0, 0(a0)
// [Asm] subst   lw v21, 8(v19) ->   lw s0, 8(a0)
// [Asm] subst   lw v22, 16(v19) ->   lw s1, 16(a0)
// [Asm] subst   fcvt.w.d v23, fv20, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v21 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v22 ->   mv a0, s1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call return_i_i_i12l3_3 ->   call return_i_i_i12l3_3
// [Asm] subst   mv v28, v27 ->   mv a1, a0
// [Asm] subst   lw v4, 0(v3) ->   lw a1, 0(a0)
// [Asm] subst   fld fv5, 8(v3) ->   fld fs0, 8(a0)
// [Asm] subst   mv a0, v4 ->   mv a0, a1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fcvt.w.d v7, fv5, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call return_i_d_i4l1_1 ->   call return_i_d_i4l1_1
// [Asm] subst   mv v10, v9 ->   mv a1, a0
// [Asm] subst   lw v11, 0(v10) ->   lw a0, 0(a1)
// [Asm] subst   fld fv12, 8(v10) ->   fld fs0, 8(a1)
// [Asm] subst   lw v13, 16(v10) ->   lw s0, 16(a1)
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   fcvt.w.d v15, fv12, rtz ->   fcvt.w.d a0, fs0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, v13 ->   mv a0, s0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   call return_d_i_i8l2_2 ->   call return_d_i_i8l2_2
// [Asm] pre_assigned_registers: Mem(fref=f1, mref=m0) -> v2, Insn(iref=%0) -> v3, Self(fref=f1) -> v0
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv8, v2]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of return_i_d_i4l1_1"];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="v9 ← a1", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r5;
// [Asm]   comment = "0:v4-> 1:v2-> 3:v6-> 4:v7-> 5:v9-> 2:s11-> 6:a0"
// [Asm]   comment = "v4<-a0;v9<-a1;v7<-a1;v2<-a0;v6<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of return_i_d_i4l1_1"];
// [Asm]   r0 [label="fv8 ← fa0", color=green];
// [Asm]   comment = "0:fv8"
// [Asm]   comment = "fv8<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v2, v4, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v6, 1 ->   li a1, 1
// [Asm] subst   sd v6, 0(v2) ->   sd a1, 0(a0)
// [Asm] subst   li v7, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv8, v7 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv8, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   li v9, 3 ->   li a1, 3
// [Asm] subst   sd v9, 16(v2) ->   sd a1, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main16l4_4 ->   call main16l4_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7, v2]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of return_d_i_i8l2_2"];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="v9 ← a1", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v8 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r5;
// [Asm]   comment = "0:v4-> 1:v2-> 3:v6-> 4:v8-> 5:v9-> 2:s11-> 6:a0"
// [Asm]   comment = "v4<-a0;v9<-a1;v8<-a1;v2<-a0;v6<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of return_d_i_i8l2_2"];
// [Asm]   r0 [label="fv7 ← fa0", color=green];
// [Asm]   comment = "0:fv7"
// [Asm]   comment = "fv7<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v2, v4, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v6, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv7, v6 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv7, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   li v8, 3 ->   li a1, 3
// [Asm] subst   sd v8, 8(v2) ->   sd a1, 8(a0)
// [Asm] subst   li v9, 4 ->   li a1, 4
// [Asm] subst   sd v9, 16(v2) ->   sd a1, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v3, Self(fref=f3) -> v0, Mem(fref=f3, mref=m0) -> v2
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of return_i_i_i12l3_3"];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="v8 ← a1", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r5;
// [Asm]   comment = "0:v4-> 1:v2-> 3:v6-> 4:v7-> 5:v8-> 2:s11-> 6:a0"
// [Asm]   comment = "v4<-a0;v8<-a1;v7<-a1;v2<-a0;v6<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of return_i_i_i12l3_3"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -12 ->   addi a0, s11, -12
// [Asm] subst   andi v2, v4, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v6, 1 ->   li a1, 1
// [Asm] subst   sw v6, 0(v2) ->   sw a1, 0(a0)
// [Asm] subst   li v7, 2 ->   li a1, 2
// [Asm] subst   sw v7, 4(v2) ->   sw a1, 4(a0)
// [Asm] subst   li v8, 3 ->   li a1, 3
// [Asm] subst   sw v8, 8(v2) ->   sw a1, 8(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%0) -> v3, Mem(fref=f0, mref=m0) -> v2
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv8, v2]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of return_i_d1l0_0"];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r5 [label="a0", color=blue];
// [Asm]   r4 [label="v7 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v6 ← a1", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   comment = "0:v4-> 1:v2-> 3:v6-> 4:v7-> 2:s11-> 5:a0"
// [Asm]   comment = "v4<-a0;v7<-a1;v2<-a0;v6<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of return_i_d1l0_0"];
// [Asm]   r0 [label="fv8 ← fa0", color=green];
// [Asm]   comment = "0:fv8"
// [Asm]   comment = "fv8<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi v2, v4, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v6, 1 ->   li a1, 1
// [Asm] subst   sd v6, 0(v2) ->   sd a1, 0(a0)
// [Asm] subst   li v7, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv8, v7 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv8, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] return_i_d1l0_0:
// [Asm] # block info: defs: [a0, v7, fv8, v4, v6, s11, v2], uses: [a0, v7, fv8, v4, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .return_i_d1l0_0_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v4, s11, -16  # live: [v4]
// [Asm]   andi v2, v4, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [v2]
// [Asm]   li v6, 1  # live: [v6, v2]
// [Asm]   sd v6, 0(v2)  # live: [v2]
// [Asm]   li v7, 4611686018427387904  # live: [v7, v2]
// [Asm]   fmv.d.x fv8, v7  # live: [fv8, v2]
// [Asm]   fsd fv8, 8(v2)  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main16l4_4:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero, v3]
// [Asm] # block parameters: []
// [Asm] .main16l4_4_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call return_i_d1l0_0  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   # restore_ctx2  # live: [zero, v2]
// [Asm] # control
// [Asm]   mv v3, v2  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fv5, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v4, v6, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v7, fv5, v4, a0, v9, v3], upward_exposed: [v3], params_defs: [v3]
// [Asm] # live_in: [zero, v3], live_out: [v10, zero]
// [Asm] # block parameters: [v3]
// [Asm] .main16l4_4_1:
// [Asm]   lw v4, 0(v3)  # live: [v4, zero, v3]
// [Asm]   fld fv5, 8(v3)  # live: [fv5, v4, zero]
// [Asm]   # save_ctx2  # live: [fv5, v4, zero]
// [Asm]   mv a0, v4  # live: [fv5, zero, a0]
// [Asm]   call minimbt_print_int  # live: [fv5, zero, a0]
// [Asm]   mv v6, a0  # live: [fv5, zero]
// [Asm]   # restore_ctx2  # live: [fv5, zero]
// [Asm]   fcvt.w.d v7, fv5, rtz  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, v7  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v8, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call return_i_d_i4l1_1  # live: [zero, a0]
// [Asm]   mv v9, a0  # live: [zero, v9]
// [Asm]   # restore_ctx2  # live: [zero, v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, fv12, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v19, ft10, ft5, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v11, v10, v18, a0, v13, fv12, v15], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10, zero], live_out: [v19, zero]
// [Asm] # block parameters: [v10]
// [Asm] .main16l4_4_2:
// [Asm]   lw v11, 0(v10)  # live: [v11, v10, zero]
// [Asm]   fld fv12, 8(v10)  # live: [v11, fv12, v10, zero]
// [Asm]   lw v13, 16(v10)  # live: [v11, fv12, zero, v13]
// [Asm]   # save_ctx2  # live: [v11, fv12, zero, v13]
// [Asm]   mv a0, v11  # live: [fv12, zero, v13, a0]
// [Asm]   call minimbt_print_int  # live: [fv12, zero, v13, a0]
// [Asm]   mv v14, a0  # live: [fv12, zero, v13]
// [Asm]   # restore_ctx2  # live: [fv12, zero, v13]
// [Asm]   fcvt.w.d v15, fv12, rtz  # live: [v15, zero, v13]
// [Asm]   # save_ctx2  # live: [v15, zero, v13]
// [Asm]   mv a0, v15  # live: [zero, v13, a0]
// [Asm]   call minimbt_print_int  # live: [zero, v13, a0]
// [Asm]   mv v16, a0  # live: [zero, v13]
// [Asm]   # restore_ctx2  # live: [zero, v13]
// [Asm]   # save_ctx2  # live: [zero, v13]
// [Asm]   mv a0, v13  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v17, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call return_d_i_i8l2_2  # live: [zero, a0]
// [Asm]   mv v18, a0  # live: [v18, zero]
// [Asm]   # restore_ctx2  # live: [v18, zero]
// [Asm] # control
// [Asm]   mv v19, v18  # live: [v19, zero]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, v22, fv20, ft0, ft1, a1, v28, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, ft7, ft4, v21, ft9, a5, a0, fa4, ft2, a2, a3, v24, ft8, t3, a7, fa7, t0, fa5, fa3, v23, ft3, fa0, t4, t2], uses: [v21, a0, v23, v22, v27, fv20, v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19, zero], live_out: [v28, zero]
// [Asm] # block parameters: [v19]
// [Asm] .main16l4_4_3:
// [Asm]   fld fv20, 0(v19)  # live: [v19, zero, fv20]
// [Asm]   lw v21, 8(v19)  # live: [v19, v21, zero, fv20]
// [Asm]   lw v22, 16(v19)  # live: [v21, zero, v22, fv20]
// [Asm]   fcvt.w.d v23, fv20, rtz  # live: [v21, zero, v22, v23]
// [Asm]   # save_ctx2  # live: [v21, zero, v22, v23]
// [Asm]   mv a0, v23  # live: [v21, zero, a0, v22]
// [Asm]   call minimbt_print_int  # live: [v21, zero, a0, v22]
// [Asm]   mv v24, a0  # live: [v21, zero, v22]
// [Asm]   # restore_ctx2  # live: [v21, zero, v22]
// [Asm]   # save_ctx2  # live: [v21, zero, v22]
// [Asm]   mv a0, v21  # live: [zero, a0, v22]
// [Asm]   call minimbt_print_int  # live: [zero, a0, v22]
// [Asm]   mv v25, a0  # live: [zero, v22]
// [Asm]   # restore_ctx2  # live: [zero, v22]
// [Asm]   # save_ctx2  # live: [zero, v22]
// [Asm]   mv a0, v22  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v26, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call return_i_i_i12l3_3  # live: [zero, a0]
// [Asm]   mv v27, a0  # live: [zero, v27]
// [Asm]   # restore_ctx2  # live: [zero, v27]
// [Asm] # control
// [Asm]   mv v28, v27  # live: [v28, zero]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, v33, fa2, v29, ft6, a4, fa6, a6, ft10, ft5, v34, ft7, ft4, ft9, a5, a0, fa4, v30, ft2, a2, a3, v31, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [zero, a0, v29, v30, v28, v31], upward_exposed: [v28, zero], params_defs: [v28]
// [Asm] # live_in: [v28, zero], live_out: []
// [Asm] # block parameters: [v28]
// [Asm] .main16l4_4_4:
// [Asm]   lw v29, 0(v28)  # live: [v28, zero, v29]
// [Asm]   lw v30, 4(v28)  # live: [v28, zero, v29, v30]
// [Asm]   lw v31, 8(v28)  # live: [v31, zero, v29, v30]
// [Asm]   # save_ctx2  # live: [v31, zero, v29, v30]
// [Asm]   mv a0, v29  # live: [v31, zero, a0, v30]
// [Asm]   call minimbt_print_int  # live: [v31, zero, a0, v30]
// [Asm]   mv v32, a0  # live: [v31, zero, v30]
// [Asm]   # restore_ctx2  # live: [v31, zero, v30]
// [Asm]   # save_ctx2  # live: [v31, zero, v30]
// [Asm]   mv a0, v30  # live: [v31, zero, a0]
// [Asm]   call minimbt_print_int  # live: [v31, zero, a0]
// [Asm]   mv v33, a0  # live: [v31, zero]
// [Asm]   # restore_ctx2  # live: [v31, zero]
// [Asm]   # save_ctx2  # live: [v31, zero]
// [Asm]   mv a0, v31  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v34, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main16l4_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] return_i_d_i4l1_1:
// [Asm] # block info: defs: [a0, v7, fv8, v4, v6, s11, v9, v2], uses: [a0, v7, fv8, v4, v6, s11, v9, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .return_i_d_i4l1_1_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v4, s11, -24  # live: [v4]
// [Asm]   andi v2, v4, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [v2]
// [Asm]   li v6, 1  # live: [v6, v2]
// [Asm]   sd v6, 0(v2)  # live: [v2]
// [Asm]   li v7, 4611686018427387904  # live: [v7, v2]
// [Asm]   fmv.d.x fv8, v7  # live: [fv8, v2]
// [Asm]   fsd fv8, 8(v2)  # live: [v2]
// [Asm]   li v9, 3  # live: [v9, v2]
// [Asm]   sd v9, 16(v2)  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] return_i_i_i12l3_3:
// [Asm] # block info: defs: [a0, v7, v8, v4, v6, s11, v2], uses: [a0, v7, v8, v4, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .return_i_i_i12l3_3_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v4, s11, -12  # live: [v4]
// [Asm]   andi v2, v4, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [v2]
// [Asm]   li v6, 1  # live: [v6, v2]
// [Asm]   sw v6, 0(v2)  # live: [v2]
// [Asm]   li v7, 2  # live: [v7, v2]
// [Asm]   sw v7, 4(v2)  # live: [v2]
// [Asm]   li v8, 3  # live: [v8, v2]
// [Asm]   sw v8, 8(v2)  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] return_d_i_i8l2_2:
// [Asm] # block info: defs: [a0, v8, v4, v6, s11, v9, fv7, v2], uses: [a0, v8, v4, v6, s11, v9, fv7, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .return_d_i_i8l2_2_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v4, s11, -24  # live: [v4]
// [Asm]   andi v2, v4, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [v2]
// [Asm]   li v6, 4611686018427387904  # live: [v6, v2]
// [Asm]   fmv.d.x fv7, v6  # live: [fv7, v2]
// [Asm]   fsd fv7, 0(v2)  # live: [v2]
// [Asm]   li v8, 3  # live: [v8, v2]
// [Asm]   sd v8, 8(v2)  # live: [v2]
// [Asm]   li v9, 4  # live: [v9, v2]
// [Asm]   sd v9, 16(v2)  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("return_i_d", Tuple([Int, Double])), args: [], body: Tuple([Int(1), Double(2)])}, LetRec({name: ("return_i_d_i", Tuple([Int, Double, Int])), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({name: ("return_d_i_i", Tuple([Double, Int, Int])), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), []))))))
// [Knf] build_knf: Tuple([Int(1), Double(2)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: LetRec({name: ("return_i_d_i", Tuple([Int, Double, Int])), args: [], body: Tuple([Int(1), Double(2), Int(3)])}, LetRec({name: ("return_d_i_i", Tuple([Double, Int, Int])), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), [])))))
// [Knf] build_knf: Tuple([Int(1), Double(2), Int(3)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("return_d_i_i", Tuple([Double, Int, Int])), args: [], body: Tuple([Double(2), Int(3), Int(4)])}, LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), []))))
// [Knf] build_knf: Tuple([Double(2), Int(3), Int(4)])
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: LetRec({name: ("return_i_i_i", Tuple([Int, Int, Int])), args: [], body: Tuple([Int(1), Int(2), Int(3)])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), [])))
// [Knf] build_knf: Tuple([Int(1), Int(2), Int(3)])
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))}, App(Var("main"), []))
// [Knf] build_knf: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)}))], App(Var("return_i_d"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))))
// [Knf] build_knf: App(Var("return_i_d"), [])
// [Knf] build_knf: Var("return_i_d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Knf] build_knf: App(Var("int_of_float"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: LetTuple([("i", Var({val: Some(Int)})), ("d", Var({val: Some(Double)})), ("i2", Var({val: Some(Int)}))], App(Var("return_i_d_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))))))
// [Knf] build_knf: App(Var("return_i_d_i"), [])
// [Knf] build_knf: Var("return_i_d_i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Knf] build_knf: App(Var("int_of_float"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i2")])
// [Knf] build_knf: Var("i2")
// [Knf] build_knf: LetTuple([("d", Var({val: Some(Double)})), ("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)}))], App(Var("return_d_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))))
// [Knf] build_knf: App(Var("return_d_i_i"), [])
// [Knf] build_knf: Var("return_d_i_i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))))
// [Knf] build_knf: App(Var("print_int"), [App(Var("int_of_float"), [Var("d")])])
// [Knf] build_knf: App(Var("int_of_float"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [Var("i2")])
// [Knf] build_knf: Var("i2")
// [Knf] build_knf: LetTuple([("i", Var({val: Some(Int)})), ("i2", Var({val: Some(Int)})), ("i3", Var({val: Some(Int)}))], App(Var("return_i_i_i"), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))))
// [Knf] build_knf: App(Var("return_i_i_i"), [])
// [Knf] build_knf: Var("return_i_i_i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [Var("i")])
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i2")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("i2")])
// [Knf] build_knf: Var("i2")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("i3")]), Unit)
// [Knf] build_knf: App(Var("print_int"), [Var("i3")])
// [Knf] build_knf: Var("i3")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl return_i_d1l0_0
// [Main]   .type return_i_d1l0_0, @function
// [Main] # leaf true
// [Main] return_i_d1l0_0:
// [Main] .return_i_d1l0_0_0:
// [Main]   addi a0, s11, -16
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 1
// [Main]   sd a1, 0(a0)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main16l4_4
// [Main]   .type main16l4_4, @function
// [Main] # leaf false
// [Main] main16l4_4:
// [Main] .main16l4_4_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   call return_i_d1l0_0
// [Main] 
// [Main] .main16l4_4_1:
// [Main]   lw a1, 0(a0)
// [Main]   fld fs0, 8(a0)
// [Main]   mv a0, a1
// [Main]   call minimbt_print_int
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   call return_i_d_i4l1_1
// [Main]   mv a1, a0
// [Main] 
// [Main] .main16l4_4_2:
// [Main]   lw a0, 0(a1)
// [Main]   fld fs0, 8(a1)
// [Main]   lw s0, 16(a1)
// [Main]   call minimbt_print_int
// [Main]   fcvt.w.d a0, fs0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   call return_d_i_i8l2_2
// [Main] 
// [Main] .main16l4_4_3:
// [Main]   fld fa0, 0(a0)
// [Main]   lw s0, 8(a0)
// [Main]   lw s1, 16(a0)
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   mv a0, s1
// [Main]   call minimbt_print_int
// [Main]   call return_i_i_i12l3_3
// [Main]   mv a1, a0
// [Main] 
// [Main] .main16l4_4_4:
// [Main]   lw a0, 0(a1)
// [Main]   lw s0, 4(a1)
// [Main]   lw s1, 8(a1)
// [Main]   call minimbt_print_int
// [Main]   mv a0, s0
// [Main]   call minimbt_print_int
// [Main]   mv a0, s1
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main16l4_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl return_i_d_i4l1_1
// [Main]   .type return_i_d_i4l1_1, @function
// [Main] # leaf true
// [Main] return_i_d_i4l1_1:
// [Main] .return_i_d_i4l1_1_0:
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 1
// [Main]   sd a1, 0(a0)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a1, 3
// [Main]   sd a1, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl return_i_i_i12l3_3
// [Main]   .type return_i_i_i12l3_3, @function
// [Main] # leaf true
// [Main] return_i_i_i12l3_3:
// [Main] .return_i_i_i12l3_3_0:
// [Main]   addi a0, s11, -12
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 1
// [Main]   sw a1, 0(a0)
// [Main]   li a1, 2
// [Main]   sw a1, 4(a0)
// [Main]   li a1, 3
// [Main]   sw a1, 8(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl return_d_i_i8l2_2
// [Main]   .type return_d_i_i8l2_2, @function
// [Main] # leaf true
// [Main] return_d_i_i8l2_2:
// [Main] .return_d_i_i8l2_2_0:
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   li a1, 3
// [Main]   sd a1, 8(a0)
// [Main]   li a1, 4
// [Main]   sd a1, 16(a0)
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main16l4_4
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b4, bpref=$b.0), index=0, width=@(@32, @(@32, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b4, bpref=$b.0), index=1, width=@(@32, @(@32, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b4, bpref=$b.0), index=2, width=@(@32, @(@32, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=BlockParam(bref=b3, bpref=$b.0), index=0, width=@(@64, @(@32, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b3, bpref=$b.0), index=1, width=@(@64, @(@32, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b3, bpref=$b.0), index=2, width=@(@64, @(@32, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Int32, Int32]), f=f3, args=[])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Jump(target=b4, args=[Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=0, width=@(@32, @(@64, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=BlockParam(bref=b2, bpref=$b.0), index=1, width=@(@32, @(@64, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b2, bpref=$b.0), index=2, width=@(@32, @(@64, @(@32, @32)))))
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Double, Int32, Int32]), f=f2, args=[])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Jump(target=b3, args=[Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=BlockParam(bref=b1, bpref=$b.0), index=0, width=@(@32, @(@64, @32))))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=BlockParam(bref=b1, bpref=$b.0), index=1, width=@(@32, @(@64, @32))))
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Double, Int32]), f=f1, args=[])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Call(ty=Tuple(fields=[Int32, Double]), f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Local BlockParam(bref=b1, bpref=$b.0) -> $b1.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local BlockParam(bref=b3, bpref=$b.0) -> $b3.$b.0
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local BlockParam(bref=b4, bpref=$b.0) -> $b4.$b.0
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Lowered function main16l4_4 to wasm
// [Wasm] Lowering function return_i_d_i4l1_1
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Double, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Double(val=2)), Field(index=2, val=Int32(val=3))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f1, mref=m0)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowered function return_i_d_i4l1_1 to wasm
// [Wasm] Lowering function T$start_10
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_10 to wasm
// [Wasm] Lowering function return_d_i_i8l2_2
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Int32, Int32]), mref=m0, fills=[Field(index=0, val=Double(val=2)), Field(index=1, val=Int32(val=3)), Field(index=2, val=Int32(val=4))])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f2, mref=m0)])
// [Wasm] Get Local name Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Local Mem(fref=f2, mref=m0) -> $f2.m0
// [Wasm] Lowered function return_d_i_i8l2_2 to wasm
// [Wasm] Lowering function return_i_i_i12l3_3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Int32, Int32]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Int32(val=2)), Field(index=2, val=Int32(val=3))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowered function return_i_i_i12l3_3 to wasm
// [Wasm] Lowering function return_i_d1l0_0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Int32, Double]), mref=m0, fills=[Field(index=0, val=Int32(val=1)), Field(index=1, val=Double(val=2))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f0, mref=m0)])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowered function return_i_d1l0_0 to wasm
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Once, f3: Once, f0: Once})
