# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn make_arr.243 #f4 : fn(int32, int32, array[double]) -> array[array[double]]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[array[double]] heap($f0)> <- [..] = $f2
    let %1: int32 = sub($f0, 1)
    jump b8()
  }
  .bb #b1 (unit) {
    return f4.m0
  }
  .bb #b3 (int32, int32, array[array[double]]) {
    let %3: bool = le(0, $b3.0)
    br %3 b4() b5()
  }
  .bb #b4 () {
    let _ = alloc <m3: array[double] heap($b3.1)> <- [..] = 0
    let _ = store array[double] offset($b3.2, $b3.0 * @ptr) <- f4.m3
    let %6: int32 = sub($b3.0, 1)
    jump b3(%6, $b3.1, $b3.2)
  }
  .bb #b5 () {
    jump b6(())
  }
  .bb #b6 (unit) {
    jump b1($b6.0)
  }
  .loop #b7 pre #Some(b8) header #b3 {
    .block #b4
    .block #b5
    .block #b6
  }
  .bb #b8 () {
    jump b7(%1, $f1, f4.m0)
  }
}
.fn main.241 #f5 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[double] heap(0)> <- [..] = 0
    let %1: array[array[double]] = call f4(2, 3, f5.m0)
    let %2: array[array[double]] = call f4(3, 2, f5.m0)
    let %3: array[array[double]] = call f4(2, 2, f5.m0)
    let %4: array[double] = load array[double] field(%1, 0 * @ptr)
    let _ = store double field(%4, 0 * @64) <- 1
    let %6: array[double] = load array[double] field(%1, 0 * @ptr)
    let _ = store double field(%6, 1 * @64) <- 2
    let %8: array[double] = load array[double] field(%1, 0 * @ptr)
    let _ = store double field(%8, 2 * @64) <- 3
    let %10: array[double] = load array[double] field(%1, 1 * @ptr)
    let _ = store double field(%10, 0 * @64) <- 4
    let %12: array[double] = load array[double] field(%1, 1 * @ptr)
    let _ = store double field(%12, 1 * @64) <- 5
    let %14: array[double] = load array[double] field(%1, 1 * @ptr)
    let _ = store double field(%14, 2 * @64) <- 6
    let %16: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%16, 0 * @64) <- 7
    let %18: array[double] = load array[double] field(%2, 0 * @ptr)
    let _ = store double field(%18, 1 * @64) <- 8
    let %20: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%20, 0 * @64) <- 9
    let %22: array[double] = load array[double] field(%2, 1 * @ptr)
    let _ = store double field(%22, 1 * @64) <- 10
    let %24: array[double] = load array[double] field(%2, 2 * @ptr)
    let _ = store double field(%24, 0 * @64) <- 11
    let %26: array[double] = load array[double] field(%2, 2 * @ptr)
    let _ = store double field(%26, 1 * @64) <- 12
    let %28: unit = call f2(1, 3, 2, %1, %2, %3)
    let %29: array[double] = load array[double] field(%3, 0 * @ptr)
    let %30: double = load double field(%29, 0 * @64)
    let %31: int32 = conv.d2i.rtz(%30)
    let %32: unit = ext_call minimbt_print_int(%31)
    let %33: unit = ext_call minimbt_print_endline()
    let %34: array[double] = load array[double] field(%3, 0 * @ptr)
    let %35: double = load double field(%34, 1 * @64)
    let %36: int32 = conv.d2i.rtz(%35)
    let %37: unit = ext_call minimbt_print_int(%36)
    let %38: unit = ext_call minimbt_print_endline()
    let %39: array[double] = load array[double] field(%3, 1 * @ptr)
    let %40: double = load double field(%39, 0 * @64)
    let %41: int32 = conv.d2i.rtz(%40)
    let %42: unit = ext_call minimbt_print_int(%41)
    let %43: unit = ext_call minimbt_print_endline()
    let %44: array[double] = load array[double] field(%3, 1 * @ptr)
    let %45: double = load double field(%44, 1 * @64)
    let %46: int32 = conv.d2i.rtz(%45)
    let %47: unit = ext_call minimbt_print_int(%46)
    return ()
  }
}
.fn T$start #f12 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f5()
    return %0
  }
}
.fn loop1.240 #f2 : fn(int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]]) {
    let %0: bool = le(0, $b0.0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    let %1: int32 = sub($b0.2, 1)
    let %2: array[double] = load array[double] offset($b0.5, $b0.0 * @ptr)
    let %3: array[double] = load array[double] offset($b0.5, $b0.0 * @ptr)
    let %4: array[double] = load array[double] offset($b0.3, $b0.0 * @ptr)
    jump b12()
  }
  .bb #b2 () {
    jump b3(())
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    jump b4($f0, $f1, $f2, $f3, $f4, $f5)
  }
  .bb #b6 (unit) {
    let %6: int32 = sub($b0.0, 1)
    jump b0(%6, $b0.1, $b0.2, $b0.3, $b0.4, $b0.5)
  }
  .bb #b7 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
    let %7: bool = le(0, $b7.2)
    br %7 b8() b9()
  }
  .bb #b8 () {
    let %8: int32 = sub($b7.1, 1)
    jump b19()
  }
  .bb #b9 () {
    jump b10(())
  }
  .bb #b10 (unit) {
    jump b6($b10.0)
  }
  .loop #b11 pre #Some(b12) header #b7 {
    .block #b8
    .block #b9
    .block #b10
  }
  .bb #b12 () {
    jump b11($b0.0, $b0.1, %1, $b0.3, $b0.4, $b0.5, %2, %3, %4)
  }
  .bb #b13 (unit) {
    let %10: int32 = sub($b7.2, 1)
    jump b7($b7.0, $b7.1, %10, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
  }
  .bb #b14 (int32, int32, int32, array[array[double]], array[array[double]], array[array[double]], array[double], array[double], array[double]) {
    let %11: bool = le(0, $b14.2)
    br %11 b15() b16()
  }
  .bb #b15 () {
    let %12: double = load double offset($b14.7, $b14.1 * @64)
    let %13: double = load double offset($b14.8, $b14.2 * @64)
    let %14: array[double] = load array[double] offset($b14.4, $b14.2 * @ptr)
    let %15: double = load double offset(%14, $b14.1 * @64)
    let %16: double = mul(%13, %15)
    let %17: double = add(%12, %16)
    let _ = store double offset($b14.6, $b14.1 * @64) <- %17
    let %19: int32 = sub($b14.2, 1)
    jump b14($b14.0, $b14.1, %19, $b14.3, $b14.4, $b14.5, $b14.6, $b14.7, $b14.8)
  }
  .bb #b16 () {
    jump b17(())
  }
  .bb #b17 (unit) {
    jump b13($b17.0)
  }
  .loop #b18 pre #Some(b19) header #b14 {
    .block #b15
    .block #b16
    .block #b17
  }
  .bb #b19 () {
    jump b18($b7.0, $b7.2, %8, $b7.3, $b7.4, $b7.5, $b7.6, $b7.7, $b7.8)
  }
}
.thunk ::0 start

