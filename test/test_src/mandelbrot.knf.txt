let rec mandelbrot.1: Unit = (w.3: Int) {
  let rec dbl.4: Double = (f.6: Double) {
    FAdd(f.6, f.6)
  }
  let rec yloop.7: Unit = (y.9: Int) {
    if (w.3 <= y.9) then {
      Unit
    } else {
      let rec xloop.10: Unit = (x.12: Int, y.14: Int) {
        if (w.3 <= x.12) then {
          let _16: Unit = ExtApply(minimbt_print_endline, [])
          Unit
        } else {
          let _17: Double = ExtApply(minimbt_float_of_int, [x.12, ])
          let _18: Double = Apply(dbl.4, [_17, ])
          let _19: Double = ExtApply(minimbt_float_of_int, [w.3, ])
          let _20: Double = FDiv(_18, _19)
          let _21: Double = Double(1.5)
          let cr.22: Double = FSub(_20, _21)
          let _23: Double = ExtApply(minimbt_float_of_int, [y.14, ])
          let _24: Double = Apply(dbl.4, [_23, ])
          let _25: Double = ExtApply(minimbt_float_of_int, [w.3, ])
          let _26: Double = FDiv(_24, _25)
          let _27: Double = Double(1)
          let ci.28: Double = FSub(_26, _27)
          let rec iloop.29: Unit = (i.31: Int, zr.33: Double, zi.35: Double, zr2.37: Double, zi2.39: Double, cr.41: Double, ci.43: Double) {
            let _44: Int = Int(0)
            if (i.31 == _44) then {
              let _45: Int = Int(1)
              ExtApply(minimbt_print_int, [_45, ])
            } else {
              let _46: Double = FSub(zr2.37, zi2.39)
              let tr.47: Double = FAdd(_46, cr.41)
              let _48: Double = Apply(dbl.4, [zr.33, ])
              let _49: Double = FMul(_48, zi.35)
              let ti.50: Double = FAdd(_49, ci.43)
              let zr2.51: Double = FMul(tr.47, tr.47)
              let zi2.52: Double = FMul(ti.50, ti.50)
              let _53: Double = Double(2)
              let _54: Double = Double(2)
              let _55: Double = FMul(_53, _54)
              let _56: Double = FAdd(zr2.51, zi2.52)
              if (_55 <= _56) then {
                let _57: Int = Int(0)
                ExtApply(minimbt_print_int, [_57, ])
              } else {
                let _58: Int = Int(1)
                let _59: Int = Sub(i.31, _58)
                Apply(iloop.29, [_59, tr.47, ti.50, zr2.51, zi2.52, cr.41, ci.43, ])
              }
            }
          }
          let _60: Int = Int(1000)
          let _61: Double = Double(0)
          let _62: Double = Double(0)
          let _63: Double = Double(0)
          let _64: Double = Double(0)
          let _66: Unit = Apply(iloop.29, [_60, _61, _62, _63, _64, cr.22, ci.28, ])
          let _67: Int = Int(1)
          let _68: Int = Add(x.12, _67)
          Apply(xloop.10, [_68, y.14, ])
        }
      }
      let _69: Int = Int(0)
      let _71: Unit = Apply(xloop.10, [_69, y.9, ])
      let _72: Int = Int(1)
      let _73: Int = Add(y.9, _72)
      Apply(yloop.7, [_73, ])
    }
  }
  let _74: Int = Int(0)
  Apply(yloop.7, [_74, ])
}
let rec main.75: Unit = () {
  let _76: Int = Int(40)
  Apply(mandelbrot.1, [_76, ])
}
Apply(main.75, [])
