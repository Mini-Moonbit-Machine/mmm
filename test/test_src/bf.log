// [Asm] pre_assigned_registers: Insn(iref=%3) -> v6, FnParam(fref=f12, fpref=$f.0) -> v2, BlockParam(bref=b3, bpref=$b.0) -> v10, Insn(iref=%2) -> v9, Self(fref=f12) -> v0, FreeVar(fvref=^1) -> v3, Insn(iref=%1) -> v5, Insn(iref=%5) -> v8, Insn(iref=%0) -> v4, Insn(iref=%4) -> v7
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v0, a0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v0, v4, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v0, v4, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v0, v4, v16, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v0, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v7]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12, v7]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v12, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v8]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog140_12"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r20 [label="v15 ← a1", color=green];
// [Asm]   r23 [label="s10", color=blue];
// [Asm]   r3 [label="v3 ← s2", color=green];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r1 [label="v0 ← s0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v7 ← a0", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r24 [label="v12 ← a1", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="v2 ← s1", color=green];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r18 [label="v9 ← a0", color=green];
// [Asm]   r19 [label="v10 ← a0", color=green];
// [Asm]   r21 [label="v16 ← a1", color=green];
// [Asm]   r17 [label="v17 ← a1", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r16 -- r20;
// [Asm]   r1 -- r12;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r16;
// [Asm]   r0 -- r24;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r5;
// [Asm]   r22 -- r24;
// [Asm]   r16 -- r17;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r3 -- r10;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r0 -- r10;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:a0-> 1:v0-> 2:v2-> 3:v3-> 4:t0-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:v4-> 17:v17-> 20:v15-> 21:v16-> 22:v7-> 24:v12-> 23:s10-> 18:v9-> 19:v10-> 25:v8"
// [Asm]   comment = "v15<-a1;v3<-s2;v0<-s0;v7<-a0;v12<-a1;v8<-a0;v2<-s1;v4<-a0;v9<-a0;v10<-a0;v16<-a1;v17<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog140_12"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv s0, s10
// [Asm] subst   mv v2, a0 ->   mv s1, a0
// [Asm] subst   ld v3, 8(v0) ->   ld s2, 8(s0)
// [Asm] subst   call read_ch_until_newline_or_eof1_0 ->   call read_ch_until_newline_or_eof1_0
// [Asm] subst   li v17, -1 ->   li a1, -1
// [Asm] subst   beq v4, v17, .read_prog140_12_1 ->   beq a0, a1, .read_prog140_12_1
// [Asm] subst   mv a0, v2 ->   mv a0, s1
// [Asm] subst   mv a1, v3 ->   mv a1, s2
// [Asm] subst   call bf5_1 ->   call bf5_1
// [Asm] subst   j .read_prog140_12_3 ->   j .read_prog140_12_3
// [Asm] subst   slliw v15, v2, 2 ->   slliw a1, s1, 2
// [Asm] subst   add v16, v3, v15 ->   add a1, s2, a1
// [Asm] subst   sw v4, 0(v16) ->   sw a0, 0(a1)
// [Asm] subst   addi v7, v2, 1 ->   addi a0, s1, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s0
// [Asm] subst   ld v12, 0(v0) ->   ld a1, 0(s0)
// [Asm] subst   jalr v12 ->   jalr a1
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v13, Insn(iref=%3) -> v12, FnParam(fref=f1, fpref=$f.1) -> v3, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%2) -> v11, Mem(fref=f1, mref=m2) -> v6, Insn(iref=%1) -> v10, Mem(fref=f1, mref=m0) -> v8, Mem(fref=f1, mref=m4) -> v4, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v5, Insn(iref=%6) -> v15, Mem(fref=f1, mref=m3) -> v7, Insn(iref=%5) -> v14, Insn(iref=%0) -> v9
// [Asm] defs: []
// [Asm] live_set: [zero, a0, a1, s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [zero, a1, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, s11, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v2, zero, v32, v3]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, zero, v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v8, s11, v3]
// [Asm] move_origin: [v8]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v2, zero, v29, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v2, zero, v29, v30, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v10, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v10, zero, v26, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v10, zero, v27, v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, v10, zero, v8, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, v10, zero, v8, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v2, v5, zero, v8, a1, s11, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v2, v5, zero, a0, v8, a1, s11, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v2, v5, zero, a0, v8, a2, a1, s11, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, v5, zero, v8, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v5, zero, v8, v24, v3]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v6, s11, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v5, v21, zero, v8, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v5, zero, v23, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v5, v18, zero, v8, v7, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: s11 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, v5, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v4, zero]
// [Asm] move_origin: [v4]
// [Asm] defined: s10 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v16, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of bf5_1"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r33 [label="s10", color=blue];
// [Asm]   r9 [label="v10 ← a0", color=green];
// [Asm]   r26 [label="v6 ← a0", color=green];
// [Asm]   r6 [label="v8 ← s2", color=green];
// [Asm]   r13 [label="a0", color=blue];
// [Asm]   r4 [label="v3 ← s1", color=green];
// [Asm]   r29 [label="v23 ← a2", color=green];
// [Asm]   r35 [label="v15 ← a0", color=green];
// [Asm]   r7 [label="v29 ← a0", color=green];
// [Asm]   r10 [label="v26 ← a1", color=green];
// [Asm]   r8 [label="v30 ← a1", color=green];
// [Asm]   r5 [label="v32 ← a0", color=green];
// [Asm]   r24 [label="a7", color=blue];
// [Asm]   r32 [label="v20 ← a3", color=green];
// [Asm]   r15 [label="t0", color=blue];
// [Asm]   r31 [label="v4 ← a2", color=green];
// [Asm]   r17 [label="t2", color=blue];
// [Asm]   r12 [label="v5 ← s3", color=green];
// [Asm]   r20 [label="a3", color=blue];
// [Asm]   r23 [label="a6", color=blue];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r27 [label="v21 ← a1", color=green];
// [Asm]   r1 [label="zero", color=blue];
// [Asm]   r28 [label="v7 ← a1", color=green];
// [Asm]   r11 [label="v27 ← a1", color=green];
// [Asm]   r34 [label="v16 ← a1", color=green];
// [Asm]   r22 [label="a5", color=blue];
// [Asm]   r14 [label="a2", color=blue];
// [Asm]   r30 [label="v18 ← a2", color=green];
// [Asm]   r25 [label="v24 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="t1", color=blue];
// [Asm]   r18 [label="t3", color=blue];
// [Asm]   r19 [label="t4", color=blue];
// [Asm]   r21 [label="a4", color=blue];
// [Asm]   r12 -- r26;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r12 -- r29;
// [Asm]   r0 -- r13;
// [Asm]   r12 -- r32;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r0 -- r32;
// [Asm]   r28 -- r32;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r0 -- r17;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r0 -- r28;
// [Asm]   r28 -- r30;
// [Asm]   r0 -- r25;
// [Asm]   r6 -- r29;
// [Asm]   r3 -- r9;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r0 -- r23;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r33;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r0 -- r16;
// [Asm]   r12 -- r19;
// [Asm]   r4 -- r31;
// [Asm]   r0 -- r6;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r12 -- r24;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r0 -- r26;
// [Asm]   r3 -- r4;
// [Asm]   r12 -- r28;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r13 -- r18;
// [Asm]   r4 -- r25;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r8;
// [Asm]   r12 -- r23;
// [Asm]   r9 -- r10;
// [Asm]   r0 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r6 -- r23;
// [Asm]   r1 -- r35;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r6 -- r32;
// [Asm]   r0 -- r18;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r13 -- r15;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r28 -- r31;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r24;
// [Asm]   r1 -- r34;
// [Asm]   r1 -- r23;
// [Asm]   r6 -- r14;
// [Asm]   r12 -- r15;
// [Asm]   r3 -- r12;
// [Asm]   r6 -- r30;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r0 -- r14;
// [Asm]   r13 -- r16;
// [Asm]   r0 -- r21;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r12;
// [Asm]   r0 -- r19;
// [Asm]   r6 -- r24;
// [Asm]   r13 -- r20;
// [Asm]   r1 -- r28;
// [Asm]   r13 -- r19;
// [Asm]   r6 -- r20;
// [Asm]   r0 -- r31;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r12 -- r20;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r13 -- r34;
// [Asm]   r12 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r12 -- r31;
// [Asm]   r0 -- r3;
// [Asm]   r13 -- r23;
// [Asm]   r4 -- r32;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r1 -- r29;
// [Asm]   r26 -- r30;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r29;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r25;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r4 -- r7;
// [Asm]   r12 -- r30;
// [Asm]   r0 -- r12;
// [Asm]   r26 -- r29;
// [Asm]   r12 -- r16;
// [Asm]   r12 -- r14;
// [Asm]   r4 -- r17;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r26 -- r31;
// [Asm]   r12 -- r17;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r14;
// [Asm]   r0 -- r30;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r27;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r20;
// [Asm]   r3 -- r23;
// [Asm]   r12 -- r18;
// [Asm]   r26 -- r32;
// [Asm]   comment = "0:v2-> 1:zero-> 2:a1-> 3:s11-> 4:v3-> 6:v8-> 12:v5-> 13:a0-> 14:a2-> 15:t0-> 16:t1-> 17:t2-> 18:t3-> 19:t4-> 20:a3-> 21:a4-> 22:a5-> 23:a6-> 24:a7-> 9:v10-> 10:v26-> 26:v6-> 28:v7-> 29:v23-> 30:v18-> 31:v4-> 32:v20-> 27:v21-> 7:v29-> 8:v30-> 11:v27-> 25:v24-> 5:v32-> 34:v16-> 33:s10-> 35:v15"
// [Asm]   comment = "v2<-s0;v10<-a0;v6<-a0;v8<-s2;v3<-s1;v23<-a2;v15<-a0;v29<-a0;v26<-a1;v30<-a1;v32<-a0;v20<-a3;v4<-a2;v5<-s3;v21<-a1;v7<-a1;v27<-a1;v16<-a1;v18<-a2;v24<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of bf5_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   addi v32, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v8, v32, -8 ->   andi s2, a0, -8
// [Asm] subst   mv s11, v8 ->   mv s11, s2
// [Asm] subst   sw zero, 0(v8) ->   sw zero, 0(s2)
// [Asm] subst   li v29, 1024 ->   li a0, 1024
// [Asm] subst   li v30, 1024 ->   li a1, 1024
// [Asm] subst   mul v10, v29, v30 ->   mul a0, a0, a1
// [Asm] subst   slliw v26, v10, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v27, s11, v26 ->   sub a1, s11, a1
// [Asm] subst   andi v5, v27, -8 ->   andi s3, a1, -8
// [Asm] subst   mv s11, v5 ->   mv s11, s3
// [Asm] subst   mv a1, v10 ->   mv a1, a0
// [Asm] subst   mv a0, v5 ->   mv a0, s3
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v24, s11, -4 ->   addi a0, s11, -4
// [Asm] subst   andi v6, v24, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v6 ->   mv s11, a0
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a0)
// [Asm] subst   addi v21, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v7, v21, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v7 ->   mv s11, a1
// [Asm] subst   la v23, skip21_5 ->   la a2, skip21_5
// [Asm] subst   sd v23, 0(v7) ->   sd a2, 0(a1)
// [Asm] subst   sd v2, 8(v7) ->   sd s0, 8(a1)
// [Asm] subst   sd v3, 16(v7) ->   sd s1, 16(a1)
// [Asm] subst   addi v18, s11, -56 ->   addi a2, s11, -56
// [Asm] subst   andi v4, v18, -8 ->   andi a2, a2, -8
// [Asm] subst   mv s11, v4 ->   mv s11, a2
// [Asm] subst   la v20, aux40_7 ->   la a3, aux40_7
// [Asm] subst   sd v20, 0(v4) ->   sd a3, 0(a2)
// [Asm] subst   sd v2, 8(v4) ->   sd s0, 8(a2)
// [Asm] subst   sd v3, 16(v4) ->   sd s1, 16(a2)
// [Asm] subst   sd v8, 24(v4) ->   sd s2, 24(a2)
// [Asm] subst   sd v5, 32(v4) ->   sd s3, 32(a2)
// [Asm] subst   sd v6, 40(v4) ->   sd a0, 40(a2)
// [Asm] subst   sd v7, 48(v4) ->   sd a1, 48(a2)
// [Asm] subst   mv s10, v4 ->   mv s10, a2
// [Asm] subst   ld v16, 0(v4) ->   ld a1, 0(a2)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v16 ->   jalr a1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: BlockParam(bref=b12, bpref=$b.0) -> v22, Insn(iref=%9) -> v14, FreeVar(fvref=^1) -> v4, Insn(iref=%8) -> v13, FreeVar(fvref=^2) -> v5, BlockParam(bref=b10, bpref=$b.0) -> v17, Insn(iref=%10) -> v15, Insn(iref=%5) -> v20, Insn(iref=%0) -> v6, Insn(iref=%4) -> v19, Insn(iref=%3) -> v18, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, BlockParam(bref=b11, bpref=$b.0) -> v21, Insn(iref=%7) -> v12, Insn(iref=%2) -> v8, Insn(iref=%1) -> v7, Insn(iref=%11) -> v10, Insn(iref=%6) -> v9, BlockParam(bref=b9, bpref=$b.0) -> v16, Insn(iref=%12) -> v11, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f5, fpref=$f.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f5, fpref=$f.0)])
// [Asm] defs: [v18]
// [Asm] live_set: [v0, v18, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v0, v18]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v19, v0, v18]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v19, v18, v23]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v18, v23]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v19, a0, v23]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v23]
// [Asm] move_origin: [v19]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [a0]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v0, v13, v3]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v0, v14, v13]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v14, v13]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v14, v13, v27]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v14, v13, v27]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v14, a0, v27]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v27]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: [a0]
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v0, v10, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v10, v3]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v10, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v10, v31, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v31, a0, v3]
// [Asm] move_origin: [v10]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v31, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [a0]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v11]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v2]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v2]
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [v0, a1, zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v0, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v0, v4, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v0, v4, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v22]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v0, v3]
// [Asm] move_origin: []
// [Asm] defs: [v34]
// [Asm] live_set: [v3, v7, v0, zero, v34, v2]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v3, v0, zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v17]
// [Asm] defined: v21 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v36, v0, v5, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v2, v0, v37, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v7, v2, v35, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v2, v0, zero, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of skip21_5"];
// [Asm]   r0 [label="v18 ← a0", color=green];
// [Asm]   r38 [label="v37 ← a3", color=green];
// [Asm]   r33 [label="v4 ← a3", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v10 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r29 [label="v17 ← a0", color=green];
// [Asm]   r35 [label="v34 ← a3", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v23 ← a2", color=green];
// [Asm]   r36 [label="v7 ← a4", color=green];
// [Asm]   r32 [label="v2 ← a0", color=green];
// [Asm]   r24 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r31 [label="zero", color=blue];
// [Asm]   r39 [label="v35 ← a3", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r37 [label="v36 ← a3", color=green];
// [Asm]   r20 [label="v21 ← a0", color=green];
// [Asm]   r23 [label="v27 ← a2", color=green];
// [Asm]   r3 [label="v19 ← a1", color=green];
// [Asm]   r27 [label="v31 ← a2", color=green];
// [Asm]   r1 [label="v0 ← a2", color=green];
// [Asm]   r28 [label="v11 ← a0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r34 [label="v5 ← a4", color=green];
// [Asm]   r22 [label="v14 ← a1", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r30 [label="v22 ← a0", color=green];
// [Asm]   r25 [label="v16 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v20 ← a0", color=green];
// [Asm]   r21 [label="v13 ← a0", color=green];
// [Asm]   r2 -- r39;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r32;
// [Asm]   r2 -- r31;
// [Asm]   r2 -- r38;
// [Asm]   r32 -- r36;
// [Asm]   r6 -- r11;
// [Asm]   r1 -- r26;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r37;
// [Asm]   r32 -- r37;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r34;
// [Asm]   r36 -- r39;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r31 -- r36;
// [Asm]   r6 -- r16;
// [Asm]   r31 -- r38;
// [Asm]   r2 -- r37;
// [Asm]   r6 -- r22;
// [Asm]   r4 -- r22;
// [Asm]   r1 -- r33;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r31 -- r39;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r39;
// [Asm]   r21 -- r23;
// [Asm]   r32 -- r38;
// [Asm]   r6 -- r8;
// [Asm]   r2 -- r34;
// [Asm]   r33 -- r34;
// [Asm]   r31 -- r35;
// [Asm]   r1 -- r31;
// [Asm]   r4 -- r21;
// [Asm]   r6 -- r13;
// [Asm]   r6 -- r27;
// [Asm]   r26 -- r27;
// [Asm]   r32 -- r35;
// [Asm]   r2 -- r33;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r3 -- r4;
// [Asm]   r31 -- r37;
// [Asm]   r32 -- r33;
// [Asm]   r0 -- r2;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r21;
// [Asm]   r34 -- r37;
// [Asm]   r32 -- r39;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r5 -- r7;
// [Asm]   r32 -- r34;
// [Asm]   r2 -- r36;
// [Asm]   r1 -- r38;
// [Asm]   r31 -- r32;
// [Asm]   r1 -- r6;
// [Asm]   r31 -- r33;
// [Asm]   r7 -- r23;
// [Asm]   r0 -- r4;
// [Asm]   r21 -- r22;
// [Asm]   r6 -- r23;
// [Asm]   r31 -- r34;
// [Asm]   r2 -- r35;
// [Asm]   r1 -- r35;
// [Asm]   r1 -- r36;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r27;
// [Asm]   r35 -- r36;
// [Asm]   comment = "0:v18-> 1:v0-> 2:v3-> 3:v19-> 4:s10-> 6:a0-> 5:v23-> 7:a1-> 21:v13-> 22:v14-> 23:v27-> 26:v10-> 27:v31-> 32:v2-> 31:zero-> 33:v4-> 34:v5-> 37:v36-> 35:v34-> 36:v7-> 39:v35-> 38:v37-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v20-> 20:v21-> 24:v15-> 25:v16-> 28:v11-> 29:v17-> 30:v22"
// [Asm]   comment = "v18<-a0;v37<-a3;v4<-a3;v10<-a0;v17<-a0;v34<-a3;v23<-a2;v7<-a4;v2<-a0;v15<-a0;v35<-a3;v36<-a3;v21<-a0;v27<-a2;v19<-a1;v31<-a2;v0<-a2;v11<-a0;v5<-a4;v14<-a1;v22<-a0;v16<-a0;v3<-a1;v20<-a0;v13<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of skip21_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v18, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v19, v3, 1 ->   addi a1, a1, 1
// [Asm] subst   mv s10, v0 ->   mv s10, a2
// [Asm] subst   ld v23, 0(v0) ->   ld a2, 0(a2)
// [Asm] subst   jalr v23 ->   jalr a2
// [Asm] subst   j .skip21_5_11 ->   j .skip21_5_11
// [Asm] subst   addi v13, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v14, v3, -1 ->   addi a1, a1, -1
// [Asm] subst   mv s10, v0 ->   mv s10, a2
// [Asm] subst   ld v27, 0(v0) ->   ld a2, 0(a2)
// [Asm] subst   jalr v27 ->   jalr a2
// [Asm] subst   addi v10, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   mv s10, v0 ->   mv s10, a2
// [Asm] subst   ld v31, 0(v0) ->   ld a2, 0(a2)
// [Asm] subst   jalr v31 ->   jalr a2
// [Asm] subst   j .skip21_5_10 ->   j .skip21_5_10
// [Asm] subst   j .skip21_5_9 ->   j .skip21_5_9
// [Asm] subst   j .skip21_5_12 ->   j .skip21_5_12
// [Asm] subst   mv v0, s10 ->   mv a2, s10
// [Asm] subst   lw v4, 8(v0) ->   lw a3, 8(a2)
// [Asm] subst   ld v5, 16(v0) ->   ld a4, 16(a2)
// [Asm] subst   bge v2, v4, .skip21_5_1 ->   bge a0, a3, .skip21_5_1
// [Asm] subst   ret ->   ret
// [Asm] subst   beq v3, zero, .skip21_5_7 ->   beq a1, zero, .skip21_5_7
// [Asm] subst   li v34, 93 ->   li a3, 93
// [Asm] subst   bne v7, v34, .skip21_5_6 ->   bne a4, a3, .skip21_5_6
// [Asm] subst   slliw v36, v2, 2 ->   slliw a3, a0, 2
// [Asm] subst   add v37, v5, v36 ->   add a3, a4, a3
// [Asm] subst   lw v7, 0(v37) ->   lw a4, 0(a3)
// [Asm] subst   li v35, 91 ->   li a3, 91
// [Asm] subst   beq v7, v35, .skip21_5_3 ->   beq a4, a3, .skip21_5_3
// [Asm] pre_assigned_registers: FreeVar(fvref=^5) -> v6, Self(fref=f9) -> v0, BlockParam(bref=b3, bpref=$b.0) -> v18, Insn(iref=%9) -> v14, FreeVar(fvref=^2) -> v3, Insn(iref=%8) -> v13, FreeVar(fvref=^1) -> v2, FreeVar(fvref=^4) -> v5, Insn(iref=%5) -> v17, Insn(iref=%0) -> v8, Insn(iref=%4) -> v16, FreeVar(fvref=^6) -> v7, Insn(iref=%3) -> v15, Insn(iref=%7) -> v12, Insn(iref=%2) -> v10, Insn(iref=%1) -> v9, FreeVar(fvref=^3) -> v4, Insn(iref=%6) -> v11
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=0)])
// [Asm] defs: [v15]
// [Asm] live_set: [v6, v5, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v6, v5, v15, zero]
// [Asm] move_origin: [v5]
// [Asm] defined: s10 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v19, v6, v15, zero]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19, v6, v15, zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v19, v6, zero, a0]
// [Asm] move_origin: [v15]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v19, v6, a1, zero, a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v6, zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v6, zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16, v6, zero]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, v0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v0, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v0, v4, v3]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v5, zero, v27, v7, v0, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v7, v0, v4, v6, v28]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, zero, v7, v0, v4, v6, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v4, v5, v6, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v0, v11, v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v11, v6, v7]
// [Asm] move_origin: [v7]
// [Asm] defined: s10 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v0, v11, v6, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v11, v6, v24]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, v6, v24, a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, v6, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v12]
// [Asm] live_set: [v0, v6, v12]
// [Asm] move_origin: [a0]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v6, v12]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v0]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: []
// [Asm] live_set: [v22]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [v14]
// [Asm] defined: v18 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of lp108_9"];
// [Asm]   r0 [label="v15 ← a0", color=green];
// [Asm]   r33 [label="v22 ← a0", color=green];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r26 [label="v8 ← a0", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r29 [label="v9 ← a0", color=green];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="v19 ← a2", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r32 [label="v12 ← a0", color=green];
// [Asm]   r24 [label="v4 ← a3", color=green];
// [Asm]   r31 [label="v24 ← a1", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r20 [label="v18 ← a0", color=green];
// [Asm]   r23 [label="v3 ← a2", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r27 [label="v27 ← a0", color=green];
// [Asm]   r1 [label="v6 ← s0", color=green];
// [Asm]   r28 [label="v28 ← a0", color=green];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r34 [label="v14 ← a0", color=green];
// [Asm]   r22 [label="v2 ← a0", color=green];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r30 [label="v11 ← a0", color=green];
// [Asm]   r25 [label="v7 ← a4", color=green];
// [Asm]   r2 [label="v5 ← a1", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v16 ← a0", color=green];
// [Asm]   r21 [label="v0 ← s1", color=green];
// [Asm]   r21 -- r24;
// [Asm]   r6 -- r21;
// [Asm]   r25 -- r28;
// [Asm]   r17 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r7 -- r21;
// [Asm]   r3 -- r15;
// [Asm]   r1 -- r30;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r30 -- r31;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r24;
// [Asm]   r1 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r31;
// [Asm]   r6 -- r13;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r25;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r6;
// [Asm]   r25 -- r29;
// [Asm]   r3 -- r4;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r3 -- r13;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r1 -- r2;
// [Asm]   r6 -- r31;
// [Asm]   r3 -- r27;
// [Asm]   r0 -- r1;
// [Asm]   r23 -- r24;
// [Asm]   r1 -- r11;
// [Asm]   r3 -- r17;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r21;
// [Asm]   r16 -- r21;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r2 -- r22;
// [Asm]   r1 -- r5;
// [Asm]   r12 -- r21;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r13 -- r21;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r3 -- r19;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r25;
// [Asm]   r2 -- r26;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r6 -- r14;
// [Asm]   r1 -- r23;
// [Asm]   r21 -- r28;
// [Asm]   r21 -- r29;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r22;
// [Asm]   r1 -- r32;
// [Asm]   r1 -- r15;
// [Asm]   r25 -- r30;
// [Asm]   r1 -- r13;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r23 -- r27;
// [Asm]   r6 -- r12;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r22 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r6 -- r8;
// [Asm]   r23 -- r26;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r23 -- r25;
// [Asm]   r21 -- r31;
// [Asm]   r3 -- r21;
// [Asm]   r21 -- r30;
// [Asm]   r15 -- r21;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r29;
// [Asm]   r14 -- r21;
// [Asm]   r21 -- r25;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r3 -- r14;
// [Asm]   r21 -- r26;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r10 -- r21;
// [Asm]   r11 -- r21;
// [Asm]   r1 -- r24;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:v15-> 1:v6-> 2:v5-> 3:zero-> 4:s10-> 21:v0-> 22:v2-> 23:v3-> 24:v4-> 25:v7-> 26:v8-> 27:v27-> 28:v28-> 29:v9-> 30:v11-> 5:v19-> 6:a0-> 7:a1-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 31:v24-> 19:v16-> 32:v12-> 20:v18-> 33:v22-> 34:v14"
// [Asm]   comment = "v15<-a0;v22<-a0;v8<-a0;v9<-a0;v19<-a2;v12<-a0;v4<-a3;v24<-a1;v18<-a0;v3<-a2;v27<-a0;v6<-s0;v28<-a0;v14<-a0;v2<-a0;v11<-a0;v7<-a4;v5<-a1;v16<-a0;v0<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of lp108_9"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v15, v4, 1 ->   addi a0, a3, 1
// [Asm] subst   mv s10, v5 ->   mv s10, a1
// [Asm] subst   ld v19, 0(v5) ->   ld a2, 0(a1)
// [Asm] subst   mv a1, zero ->   mv a1, zero
// [Asm] subst   jalr v19 ->   jalr a2
// [Asm] subst   sw v16, 0(v6) ->   sw a0, 0(s0)
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] subst   j .lp108_9_3 ->   j .lp108_9_3
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv s1, s10
// [Asm] subst   ld v2, 8(v0) ->   ld a0, 8(s1)
// [Asm] subst   ld v3, 16(v0) ->   ld a2, 16(s1)
// [Asm] subst   lw v4, 24(v0) ->   lw a3, 24(s1)
// [Asm] subst   ld v5, 32(v0) ->   ld a1, 32(s1)
// [Asm] subst   ld v6, 40(v0) ->   ld s0, 40(s1)
// [Asm] subst   ld v7, 48(v0) ->   ld a4, 48(s1)
// [Asm] subst   lw v8, 0(v2) ->   lw a0, 0(a0)
// [Asm] subst   slliw v27, v8, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v28, v3, v27 ->   add a0, a2, a0
// [Asm] subst   lw v9, 0(v28) ->   lw a0, 0(a0)
// [Asm] subst   beq v9, zero, .lp108_9_1 ->   beq a0, zero, .lp108_9_1
// [Asm] subst   addi v11, v4, 1 ->   addi a0, a3, 1
// [Asm] subst   mv s10, v7 ->   mv s10, a4
// [Asm] subst   ld v24, 0(v7) ->   ld a1, 0(a4)
// [Asm] subst   jalr v24 ->   jalr a1
// [Asm] subst   sw v12, 0(v6) ->   sw a0, 0(s0)
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v22, 0(v0) ->   ld a0, 0(s1)
// [Asm] subst   jalr v22 ->   jalr a0
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v5, Mem(fref=f2, mref=m1) -> v3, Mem(fref=f2, mref=m0) -> v2, Insn(iref=%0) -> v4, Insn(iref=%2) -> v6
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [s11, v12, zero]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [zero, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v15]
// [Asm] live_set: [s11, v15, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [v15]
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a1, s11, zero, a0, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, s11, zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [zero, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v7]
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v7]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main136_2"];
// [Asm]   r0 [label="v12 ← a0", color=green];
// [Asm]   r20 [label="v3 ← a0", color=green];
// [Asm]   r23 [label="v7 ← a1", color=green];
// [Asm]   r3 [label="v13 ← a0", color=green];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="v2 ← s0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r22 [label="s10", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="v15 ← a0", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v6 ← a0", color=green];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v9 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r21 [label="v11 ← a1", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r4 -- r9;
// [Asm]   r2 -- r23;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r7;
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r16;
// [Asm]   r1 -- r12;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r15;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r1 -- r17;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r8;
// [Asm]   r7 -- r17;
// [Asm]   r4 -- r21;
// [Asm]   r1 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r7 -- r15;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r7 -- r11;
// [Asm]   r2 -- r21;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r12;
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r4 -- r7;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r17;
// [Asm]   r1 -- r6;
// [Asm]   r2 -- r22;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r23;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r24;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r2 -- r19;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   comment = "0:v12-> 1:s11-> 2:zero-> 4:v2-> 5:v15-> 6:a1-> 7:a0-> 8:a2-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:v9-> 20:v3-> 21:v11-> 23:v7-> 3:v13-> 22:s10-> 24:v6"
// [Asm]   comment = "v12<-a0;v3<-a0;v7<-a1;v13<-a0;v2<-s0;v15<-a0;v6<-a0;v9<-a0;v11<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main136_2"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v12, 4096 ->   li a0, 4096
// [Asm] subst   sub v13, s11, v12 ->   sub a0, s11, a0
// [Asm] subst   andi v2, v13, -8 ->   andi s0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, s0
// [Asm] subst   li v15, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v15 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   mv a2, zero ->   mv a2, zero
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   addi v9, s11, -16 ->   addi a0, s11, -16
// [Asm] subst   andi v3, v9, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a0
// [Asm] subst   la v11, read_prog140_12 ->   la a1, read_prog140_12
// [Asm] subst   sd v11, 0(v3) ->   sd a1, 0(a0)
// [Asm] subst   sd v2, 8(v3) ->   sd s0, 8(a0)
// [Asm] subst   mv s10, v3 ->   mv s10, a0
// [Asm] subst   ld v7, 0(v3) ->   ld a1, 0(a0)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   jalr v7 ->   jalr a1
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f14) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_14"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_14"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main136_2 ->   call main136_2
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v48, Insn(iref=%41) -> v32, Insn(iref=%33) -> v36, Self(fref=f7) -> v0, Insn(iref=%8) -> v13, Insn(iref=%10) -> v57, Insn(iref=%27) -> v44, Insn(iref=%25) -> v42, Insn(iref=%39) -> v30, BlockParam(bref=b26, bpref=$b.0) -> v67, Insn(iref=%4) -> v63, BlockParam(bref=b25, bpref=$b.0) -> v61, Insn(iref=%49) -> v19, Insn(iref=%42) -> v18, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%26) -> v43, BlockParam(bref=b23, bpref=$b.0) -> v47, BlockParam(bref=b24, bpref=$b.0) -> v55, Insn(iref=%31) -> v34, BlockParam(bref=b19, bpref=$b.0) -> v20, BlockParam(bref=b22, bpref=$b.0) -> v39, Insn(iref=%38) -> v29, Insn(iref=%16) -> v49, Insn(iref=%5) -> v64, Insn(iref=%19) -> v52, FreeVar(fvref=^6) -> v8, Insn(iref=%13) -> v60, Insn(iref=%7) -> v66, BlockParam(bref=b27, bpref=$b.0) -> v68, Insn(iref=%48) -> v26, Insn(iref=%23) -> v40, Insn(iref=%20) -> v53, BlockParam(bref=b21, bpref=$b.0) -> v33, FreeVar(fvref=^3) -> v5, Insn(iref=%34) -> v37, BlockParam(bref=b20, bpref=$b.0) -> v27, Insn(iref=%36) -> v17, Mem(fref=f7, mref=m0) -> v9, FreeVar(fvref=^5) -> v7, FreeVar(fvref=^1) -> v3, FreeVar(fvref=^2) -> v4, Insn(iref=%14) -> v14, FreeVar(fvref=^4) -> v6, Insn(iref=%44) -> v22, Insn(iref=%32) -> v35, Insn(iref=%1) -> v11, Insn(iref=%11) -> v58, Insn(iref=%6) -> v65, Insn(iref=%35) -> v38, Insn(iref=%46) -> v24, Insn(iref=%28) -> v45, Insn(iref=%24) -> v41, Insn(iref=%9) -> v56, Insn(iref=%37) -> v28, Insn(iref=%45) -> v23, Insn(iref=%29) -> v46, Insn(iref=%47) -> v25, Insn(iref=%0) -> v10, Insn(iref=%18) -> v51, Insn(iref=%3) -> v62, Insn(iref=%22) -> v15, Insn(iref=%17) -> v50, Insn(iref=%2) -> v12, Insn(iref=%43) -> v21, Insn(iref=%30) -> v16, Insn(iref=%21) -> v54, Insn(iref=%40) -> v31, Insn(iref=%12) -> v59
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FreeVar(fvref=^1), FnParam(fref=f7, fpref=$f.0)])
// [Asm] defs: [v55]
// [Asm] live_set: [v55]
// [Asm] move_origin: [v47]
// [Asm] defined: v55 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v2]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] move_origin: []
// [Asm] defs: [v129]
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v129, v2]
// [Asm] move_origin: []
// [Asm] defined: v129 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v133]
// [Asm] live_set: [v5, v133, v7, v8, v0, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v133 is X
// [Asm] defs: [v134]
// [Asm] live_set: [v5, v7, v8, v0, v134, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v134 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v132]
// [Asm] live_set: [v132, v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v132 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v126]
// [Asm] live_set: [v11, v5, v126, v8, v7, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v126 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v68]
// [Asm] live_set: [v68]
// [Asm] move_origin: [v67]
// [Asm] defined: v68 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v27]
// [Asm] defined: v33 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v67]
// [Asm] move_origin: [v61]
// [Asm] defined: v67 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v61]
// [Asm] move_origin: [v55]
// [Asm] defined: v61 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v0, v6, v34, v2]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v105]
// [Asm] live_set: [v0, v105, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v105 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v0, v106, v2]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v35, v0, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v35, v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: [v35]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v36]
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v0, v37]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v37]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v37, v101]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: []
// [Asm] live_set: [v37, v101]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v101]
// [Asm] move_origin: [v37]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v38]
// [Asm] move_origin: [a0]
// [Asm] defined: v38 is X
// [Asm] defs: []
// [Asm] live_set: [v38]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move_origin: [v38]
// [Asm] defined: v39 is X
// [Asm] defs: []
// [Asm] live_set: [v39]
// [Asm] move_origin: []
// [Asm] defs: [v56]
// [Asm] live_set: [v0, v5, v56, v2]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v0, v5, v57, v2]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v0, v59]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v59]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v59, v74]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v59, v74]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v74, a0]
// [Asm] move_origin: [v59]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v60]
// [Asm] live_set: [v60]
// [Asm] move_origin: [a0]
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v60]
// [Asm] move_origin: []
// [Asm] defs: [v61]
// [Asm] live_set: [v61]
// [Asm] move_origin: [v60]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v61]
// [Asm] move_origin: []
// [Asm] defs: [v40]
// [Asm] live_set: [v40, v0, v6, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v40, v0, v41, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v96]
// [Asm] live_set: [v40, v0, v6, v96, v2]
// [Asm] move_origin: []
// [Asm] defined: v96 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v40, v0, v6, v97, v2]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v40, v0, v6, v42, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v40, v0, v43, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v93, v0, v43, v6, v2]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v94]
// [Asm] live_set: [v0, v94, v43, v2]
// [Asm] move_origin: []
// [Asm] defined: v94 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v45]
// [Asm] live_set: [v0, v45]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v45]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v90, v45]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v90, v45]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v90, a0]
// [Asm] move_origin: [v45]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v46]
// [Asm] live_set: [v46]
// [Asm] move_origin: [a0]
// [Asm] defined: v46 is X
// [Asm] defs: []
// [Asm] live_set: [v46]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v47]
// [Asm] move_origin: [v46]
// [Asm] defined: v47 is X
// [Asm] defs: []
// [Asm] live_set: [v47]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v39]
// [Asm] move_origin: [v33]
// [Asm] defined: v39 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v11, v125, v2]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v0, v62, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v0, v63, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v65]
// [Asm] live_set: [v0, v65]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v65]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v65, v69]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: []
// [Asm] live_set: [v65, v69]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v69, a0]
// [Asm] move_origin: [v65]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v66]
// [Asm] live_set: [v66]
// [Asm] move_origin: [a0]
// [Asm] defined: v66 is X
// [Asm] defs: []
// [Asm] live_set: [v66]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v67]
// [Asm] move_origin: [v66]
// [Asm] defined: v67 is X
// [Asm] defs: []
// [Asm] live_set: [v67]
// [Asm] move_origin: []
// [Asm] defs: [v130]
// [Asm] live_set: [v11, v5, v130, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v68]
// [Asm] live_set: [v68]
// [Asm] move_origin: [v2]
// [Asm] defined: v68 is X
// [Asm] defs: []
// [Asm] live_set: [v68]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [v0, v6, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v6, v28, v2]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, v6, v28, a0, v2]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v29]
// [Asm] live_set: [v0, v6, v28, v29, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v6, v28, v29, v2]
// [Asm] move_origin: []
// [Asm] defs: [v112]
// [Asm] live_set: [v0, v112, v6, v29, v2]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: [v113]
// [Asm] live_set: [v0, v29, v113, v2]
// [Asm] move_origin: []
// [Asm] defined: v113 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v0, v31]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v31]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v109]
// [Asm] live_set: [v109, v31]
// [Asm] move_origin: []
// [Asm] defined: v109 is X
// [Asm] defs: []
// [Asm] live_set: [v109, v31]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v109, a0]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v32]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v32]
// [Asm] move_origin: []
// [Asm] defs: [v33]
// [Asm] live_set: [v33]
// [Asm] move_origin: [v32]
// [Asm] defined: v33 is X
// [Asm] defs: []
// [Asm] live_set: [v33]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, v8, v7, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v122]
// [Asm] live_set: [v5, v8, v7, v0, v6, v122, v2]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v5, v8, v7, v0, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v8, v7, v0, v6, v9, v2]
// [Asm] move_origin: [v9]
// [Asm] defined: s11 is X
// [Asm] defs: [v124]
// [Asm] live_set: [v5, v124, v8, v7, v0, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v124 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v8, v7, v0, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v7, v0, v6, v9, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v2, v0, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, v0, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v0, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v9, v7]
// [Asm] move_origin: [v9]
// [Asm] defined: s10 is X
// [Asm] defs: [v120]
// [Asm] live_set: [v0, v120, v7]
// [Asm] move_origin: []
// [Asm] defined: v120 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v120, v7]
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v0, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v23]
// [Asm] live_set: [v0, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v7]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v0, v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v25, v0]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v25, v0]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v116]
// [Asm] live_set: [v116, v25]
// [Asm] move_origin: []
// [Asm] defined: v116 is X
// [Asm] defs: []
// [Asm] live_set: [v116, v25]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v116, a0]
// [Asm] move_origin: [v25]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [a0]
// [Asm] defined: v26 is X
// [Asm] defs: []
// [Asm] live_set: [v26]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v26]
// [Asm] defined: v27 is X
// [Asm] defs: []
// [Asm] live_set: [v27]
// [Asm] move_origin: []
// [Asm] defs: [v128]
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v128, v2]
// [Asm] move_origin: []
// [Asm] defined: v128 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v47]
// [Asm] move_origin: [v39]
// [Asm] defined: v47 is X
// [Asm] defs: [v131]
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v131, v2]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v68]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a0, s11, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [a0, v0, s11]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v0, s11, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v0, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v0, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v5, v0, v4, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v5, v0, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v5, v7, v0, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v5, v7, v8, v0, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v7, v8, v0, v4, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v127]
// [Asm] live_set: [v11, v5, v127, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v127 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v48]
// [Asm] live_set: [v0, v6, v5, v48, v2]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v0, v6, v48, v49, v2]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v85]
// [Asm] live_set: [v85, v0, v6, v48, v2]
// [Asm] move_origin: []
// [Asm] defined: v85 is X
// [Asm] defs: [v86]
// [Asm] live_set: [v0, v6, v48, v86, v2]
// [Asm] move_origin: []
// [Asm] defined: v86 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v0, v6, v48, v50, v2]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v51, v0, v6, v48, v2]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v82]
// [Asm] live_set: [v51, v0, v6, v82, v2]
// [Asm] move_origin: []
// [Asm] defined: v82 is X
// [Asm] defs: [v83]
// [Asm] live_set: [v51, v0, v83, v2]
// [Asm] move_origin: []
// [Asm] defined: v83 is X
// [Asm] defs: []
// [Asm] live_set: [v0, v2]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v0, v53]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v0, v53]
// [Asm] move_origin: [v0]
// [Asm] defined: s10 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v53, v79]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: []
// [Asm] live_set: [v53, v79]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v79]
// [Asm] move_origin: [v53]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v54]
// [Asm] live_set: [v54]
// [Asm] move_origin: [a0]
// [Asm] defined: v54 is X
// [Asm] defs: []
// [Asm] live_set: [v54]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v55]
// [Asm] move_origin: [v54]
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v55]
// [Asm] move_origin: []
// [Asm] defs: [v27]
// [Asm] live_set: [v27]
// [Asm] move_origin: [v20]
// [Asm] defined: v27 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v2]
// [Asm] defined: v20 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux40_7"];
// [Asm]   r0 [label="v55 ← a0", color=green];
// [Asm]   r46 [label="v74 ← a1", color=green];
// [Asm]   r33 [label="a4", color=blue];
// [Asm]   r59 [label="v47 ← a0", color=green];
// [Asm]   r76 [label="v124 ← a1", color=green];
// [Asm]   r9 [label="s11", color=blue];
// [Asm]   r26 [label="t1", color=blue];
// [Asm]   r86 [label="v3 ← a0", color=green];
// [Asm]   r44 [label="v57 ← a0", color=green];
// [Asm]   r53 [label="v43 ← a1", color=green];
// [Asm]   r56 [label="v45 ← a0", color=green];
// [Asm]   r10 [label="v2 ← s3", color=green];
// [Asm]   r5 [label="v7 ← s0", color=green];
// [Asm]   r54 [label="v93 ← a0", color=green];
// [Asm]   r24 [label="a0", color=blue];
// [Asm]   r43 [label="v56 ← a0", color=green];
// [Asm]   r88 [label="v48 ← a0", color=green];
// [Asm]   r80 [label="v25 ← a0", color=green];
// [Asm]   r31 [label="a2", color=blue];
// [Asm]   r39 [label="s10", color=blue];
// [Asm]   r17 [label="v33 ← a0", color=green];
// [Asm]   r52 [label="v42 ← a1", color=green];
// [Asm]   r65 [label="v66 ← a0", color=green];
// [Asm]   r79 [label="v24 ← a0", color=green];
// [Asm]   r20 [label="v34 ← a0", color=green];
// [Asm]   r61 [label="v62 ← a0", color=green];
// [Asm]   r23 [label="v35 ← a0", color=green];
// [Asm]   r3 [label="v11 ← a1", color=green];
// [Asm]   r82 [label="v26 ← a0", color=green];
// [Asm]   r67 [label="v28 ← s0", color=green];
// [Asm]   r27 [label="t2", color=blue];
// [Asm]   r75 [label="v9 ← a0", color=green];
// [Asm]   r77 [label="v120 ← a0", color=green];
// [Asm]   r62 [label="v63 ← a0", color=green];
// [Asm]   r40 [label="v101 ← a1", color=green];
// [Asm]   r11 [label="v133 ← a0", color=green];
// [Asm]   r58 [label="v46 ← a0", color=green];
// [Asm]   r34 [label="a5", color=blue];
// [Asm]   r83 [label="v27 ← a0", color=green];
// [Asm]   r14 [label="v132 ← a0", color=green];
// [Asm]   r96 [label="v53 ← a0", color=green];
// [Asm]   r51 [label="v97 ← a1", color=green];
// [Asm]   r78 [label="v23 ← a0", color=green];
// [Asm]   r55 [label="v94 ← a0", color=green];
// [Asm]   r16 [label="v68 ← a0", color=green];
// [Asm]   r21 [label="v105 ← a0", color=green];
// [Asm]   r60 [label="v125 ← a0", color=green];
// [Asm]   r73 [label="v32 ← a0", color=green];
// [Asm]   r93 [label="v51 ← a1", color=green];
// [Asm]   r38 [label="v37 ← a0", color=green];
// [Asm]   r72 [label="v109 ← a1", color=green];
// [Asm]   r87 [label="v127 ← a0", color=green];
// [Asm]   r85 [label="v131 ← a0", color=green];
// [Asm]   r47 [label="v60 ← a0", color=green];
// [Asm]   r6 [label="v8 ← a3", color=green];
// [Asm]   r13 [label="v134 ← a0", color=green];
// [Asm]   r42 [label="v39 ← a0", color=green];
// [Asm]   r4 [label="v5 ← a2", color=green];
// [Asm]   r95 [label="v83 ← a0", color=green];
// [Asm]   r29 [label="t4", color=blue];
// [Asm]   r35 [label="a6", color=blue];
// [Asm]   r7 [label="v0 ← s1", color=green];
// [Asm]   r64 [label="v69 ← a1", color=green];
// [Asm]   r8 [label="v6 ← s2", color=green];
// [Asm]   r36 [label="a7", color=blue];
// [Asm]   r66 [label="v130 ← a0", color=green];
// [Asm]   r15 [label="v126 ← a0", color=green];
// [Asm]   r32 [label="a3", color=blue];
// [Asm]   r49 [label="v41 ← a1", color=green];
// [Asm]   r57 [label="v90 ← a1", color=green];
// [Asm]   r74 [label="v122 ← a0", color=green];
// [Asm]   r68 [label="v29 ← a0", color=green];
// [Asm]   r98 [label="v54 ← a0", color=green];
// [Asm]   r91 [label="v86 ← a1", color=green];
// [Asm]   r70 [label="v113 ← a1", color=green];
// [Asm]   r48 [label="v40 ← a0", color=green];
// [Asm]   r12 [label="v4 ← a1", color=green];
// [Asm]   r37 [label="v36 ← a0", color=green];
// [Asm]   r1 [label="v20 ← a0", color=green];
// [Asm]   r28 [label="t3", color=blue];
// [Asm]   r41 [label="v38 ← a0", color=green];
// [Asm]   r71 [label="v31 ← a0", color=green];
// [Asm]   r69 [label="v112 ← a1", color=green];
// [Asm]   r22 [label="v106 ← a0", color=green];
// [Asm]   r84 [label="v128 ← a0", color=green];
// [Asm]   r89 [label="v49 ← a1", color=green];
// [Asm]   r50 [label="v96 ← a1", color=green];
// [Asm]   r30 [label="a1", color=blue];
// [Asm]   r45 [label="v59 ← a0", color=green];
// [Asm]   r92 [label="v50 ← a1", color=green];
// [Asm]   r25 [label="t0", color=blue];
// [Asm]   r63 [label="v65 ← a0", color=green];
// [Asm]   r2 [label="v129 ← a0", color=green];
// [Asm]   r18 [label="v67 ← a0", color=green];
// [Asm]   r19 [label="v61 ← a0", color=green];
// [Asm]   r90 [label="v85 ← a1", color=green];
// [Asm]   r97 [label="v79 ← a1", color=green];
// [Asm]   r81 [label="v116 ← a1", color=green];
// [Asm]   r94 [label="v82 ← a0", color=green];
// [Asm]   r7 -- r51;
// [Asm]   r8 -- r31;
// [Asm]   r4 -- r75;
// [Asm]   r96 -- r97;
// [Asm]   r48 -- r53;
// [Asm]   r10 -- r53;
// [Asm]   r5 -- r33;
// [Asm]   r8 -- r51;
// [Asm]   r6 -- r75;
// [Asm]   r10 -- r61;
// [Asm]   r3 -- r15;
// [Asm]   r9 -- r86;
// [Asm]   r24 -- r40;
// [Asm]   r88 -- r92;
// [Asm]   r5 -- r10;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r85;
// [Asm]   r7 -- r25;
// [Asm]   r7 -- r84;
// [Asm]   r88 -- r89;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r9;
// [Asm]   r39 -- r63;
// [Asm]   r7 -- r78;
// [Asm]   r4 -- r48;
// [Asm]   r10 -- r89;
// [Asm]   r5 -- r29;
// [Asm]   r2 -- r7;
// [Asm]   r10 -- r69;
// [Asm]   r27 -- r67;
// [Asm]   r7 -- r62;
// [Asm]   r7 -- r27;
// [Asm]   r7 -- r32;
// [Asm]   r7 -- r35;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r8 -- r12;
// [Asm]   r10 -- r93;
// [Asm]   r6 -- r86;
// [Asm]   r10 -- r67;
// [Asm]   r5 -- r31;
// [Asm]   r9 -- r14;
// [Asm]   r8 -- r34;
// [Asm]   r3 -- r8;
// [Asm]   r3 -- r85;
// [Asm]   r8 -- r24;
// [Asm]   r8 -- r75;
// [Asm]   r5 -- r35;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r71 -- r72;
// [Asm]   r30 -- r67;
// [Asm]   r9 -- r66;
// [Asm]   r7 -- r79;
// [Asm]   r56 -- r57;
// [Asm]   r10 -- r12;
// [Asm]   r24 -- r64;
// [Asm]   r24 -- r57;
// [Asm]   r10 -- r33;
// [Asm]   r48 -- r50;
// [Asm]   r5 -- r78;
// [Asm]   r9 -- r12;
// [Asm]   r7 -- r94;
// [Asm]   r7 -- r38;
// [Asm]   r39 -- r45;
// [Asm]   r5 -- r32;
// [Asm]   r8 -- r48;
// [Asm]   r10 -- r31;
// [Asm]   r10 -- r22;
// [Asm]   r2 -- r5;
// [Asm]   r7 -- r80;
// [Asm]   r5 -- r66;
// [Asm]   r88 -- r90;
// [Asm]   r8 -- r32;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r24 -- r46;
// [Asm]   r8 -- r86;
// [Asm]   r7 -- r67;
// [Asm]   r8 -- r30;
// [Asm]   r5 -- r36;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r4 -- r13;
// [Asm]   r7 -- r44;
// [Asm]   r7 -- r29;
// [Asm]   r53 -- r54;
// [Asm]   r4 -- r76;
// [Asm]   r35 -- r67;
// [Asm]   r4 -- r62;
// [Asm]   r10 -- r94;
// [Asm]   r2 -- r4;
// [Asm]   r8 -- r27;
// [Asm]   r7 -- r24;
// [Asm]   r4 -- r88;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r20;
// [Asm]   r8 -- r76;
// [Asm]   r11 -- r12;
// [Asm]   r80 -- r81;
// [Asm]   r10 -- r29;
// [Asm]   r10 -- r48;
// [Asm]   r7 -- r74;
// [Asm]   r10 -- r70;
// [Asm]   r7 -- r48;
// [Asm]   r7 -- r49;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r8 -- r25;
// [Asm]   r9 -- r84;
// [Asm]   r24 -- r26;
// [Asm]   r7 -- r75;
// [Asm]   r24 -- r67;
// [Asm]   r10 -- r51;
// [Asm]   r34 -- r67;
// [Asm]   r5 -- r74;
// [Asm]   r88 -- r93;
// [Asm]   r9 -- r85;
// [Asm]   r7 -- r22;
// [Asm]   r24 -- r81;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r5 -- r28;
// [Asm]   r10 -- r43;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r24 -- r72;
// [Asm]   r8 -- r15;
// [Asm]   r7 -- r15;
// [Asm]   r48 -- r49;
// [Asm]   r24 -- r34;
// [Asm]   r38 -- r40;
// [Asm]   r7 -- r85;
// [Asm]   r6 -- r87;
// [Asm]   r10 -- r15;
// [Asm]   r8 -- r35;
// [Asm]   r10 -- r11;
// [Asm]   r7 -- r36;
// [Asm]   r48 -- r51;
// [Asm]   r8 -- r92;
// [Asm]   r10 -- r85;
// [Asm]   r3 -- r66;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r48 -- r52;
// [Asm]   r5 -- r39;
// [Asm]   r88 -- r91;
// [Asm]   r5 -- r25;
// [Asm]   r8 -- r26;
// [Asm]   r10 -- r36;
// [Asm]   r10 -- r54;
// [Asm]   r7 -- r87;
// [Asm]   r6 -- r74;
// [Asm]   r63 -- r64;
// [Asm]   r4 -- r74;
// [Asm]   r10 -- r32;
// [Asm]   r2 -- r9;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r6;
// [Asm]   r9 -- r13;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r14;
// [Asm]   r8 -- r50;
// [Asm]   r10 -- r86;
// [Asm]   r10 -- r62;
// [Asm]   r5 -- r12;
// [Asm]   r4 -- r87;
// [Asm]   r4 -- r66;
// [Asm]   r8 -- r89;
// [Asm]   r8 -- r93;
// [Asm]   r7 -- r21;
// [Asm]   r10 -- r60;
// [Asm]   r8 -- r84;
// [Asm]   r5 -- r8;
// [Asm]   r10 -- r26;
// [Asm]   r39 -- r71;
// [Asm]   r8 -- r90;
// [Asm]   r93 -- r94;
// [Asm]   r7 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r8 -- r68;
// [Asm]   r7 -- r77;
// [Asm]   r25 -- r67;
// [Asm]   r3 -- r60;
// [Asm]   r32 -- r67;
// [Asm]   r10 -- r88;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r24 -- r32;
// [Asm]   r7 -- r53;
// [Asm]   r39 -- r96;
// [Asm]   r8 -- r91;
// [Asm]   r75 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r10 -- r49;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r90;
// [Asm]   r7 -- r55;
// [Asm]   r10 -- r20;
// [Asm]   r24 -- r31;
// [Asm]   r10 -- r37;
// [Asm]   r5 -- r86;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r86;
// [Asm]   r10 -- r92;
// [Asm]   r33 -- r67;
// [Asm]   r8 -- r69;
// [Asm]   r4 -- r43;
// [Asm]   r5 -- r75;
// [Asm]   r7 -- r93;
// [Asm]   r24 -- r36;
// [Asm]   r7 -- r63;
// [Asm]   r10 -- r74;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r8 -- r94;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r9 -- r87;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r7 -- r70;
// [Asm]   r39 -- r80;
// [Asm]   r4 -- r12;
// [Asm]   r10 -- r75;
// [Asm]   r68 -- r70;
// [Asm]   r10 -- r30;
// [Asm]   r7 -- r61;
// [Asm]   r8 -- r29;
// [Asm]   r4 -- r84;
// [Asm]   r5 -- r7;
// [Asm]   r12 -- r86;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r96;
// [Asm]   r8 -- r14;
// [Asm]   r8 -- r87;
// [Asm]   r7 -- r8;
// [Asm]   r10 -- r35;
// [Asm]   r10 -- r55;
// [Asm]   r7 -- r54;
// [Asm]   r4 -- r9;
// [Asm]   r93 -- r95;
// [Asm]   r5 -- r34;
// [Asm]   r67 -- r68;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r26 -- r67;
// [Asm]   r10 -- r95;
// [Asm]   r53 -- r55;
// [Asm]   r7 -- r52;
// [Asm]   r10 -- r87;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r6 -- r15;
// [Asm]   r28 -- r67;
// [Asm]   r7 -- r45;
// [Asm]   r9 -- r15;
// [Asm]   r7 -- r88;
// [Asm]   r6 -- r14;
// [Asm]   r31 -- r67;
// [Asm]   r10 -- r68;
// [Asm]   r5 -- r77;
// [Asm]   r7 -- r89;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r7 -- r13;
// [Asm]   r7 -- r71;
// [Asm]   r5 -- r84;
// [Asm]   r3 -- r87;
// [Asm]   r10 -- r76;
// [Asm]   r45 -- r46;
// [Asm]   r7 -- r86;
// [Asm]   r7 -- r30;
// [Asm]   r5 -- r87;
// [Asm]   r10 -- r27;
// [Asm]   r8 -- r33;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r34;
// [Asm]   r36 -- r67;
// [Asm]   r6 -- r12;
// [Asm]   r39 -- r56;
// [Asm]   r8 -- r49;
// [Asm]   r7 -- r66;
// [Asm]   r24 -- r30;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r8 -- r28;
// [Asm]   r10 -- r91;
// [Asm]   r8 -- r54;
// [Asm]   r10 -- r50;
// [Asm]   r7 -- r92;
// [Asm]   r7 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r4 -- r11;
// [Asm]   r3 -- r84;
// [Asm]   r8 -- r13;
// [Asm]   r10 -- r84;
// [Asm]   r8 -- r52;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r29 -- r67;
// [Asm]   r7 -- r33;
// [Asm]   r8 -- r74;
// [Asm]   r8 -- r67;
// [Asm]   r4 -- r85;
// [Asm]   r8 -- r85;
// [Asm]   r10 -- r90;
// [Asm]   r10 -- r44;
// [Asm]   r10 -- r52;
// [Asm]   r10 -- r23;
// [Asm]   r24 -- r35;
// [Asm]   r7 -- r11;
// [Asm]   r8 -- r88;
// [Asm]   r7 -- r39;
// [Asm]   r3 -- r14;
// [Asm]   r7 -- r43;
// [Asm]   r7 -- r31;
// [Asm]   r5 -- r27;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r50;
// [Asm]   r7 -- r23;
// [Asm]   r7 -- r68;
// [Asm]   r24 -- r97;
// [Asm]   r5 -- r30;
// [Asm]   r2 -- r3;
// [Asm]   r7 -- r69;
// [Asm]   r5 -- r76;
// [Asm]   r10 -- r24;
// [Asm]   r10 -- r21;
// [Asm]   r24 -- r33;
// [Asm]   r4 -- r61;
// [Asm]   r10 -- r66;
// [Asm]   r5 -- r15;
// [Asm]   r10 -- r14;
// [Asm]   r68 -- r69;
// [Asm]   comment = "0:v55-> 1:v20-> 2:v129-> 3:v11-> 4:v5-> 5:v7-> 6:v8-> 7:v0-> 8:v6-> 9:s11-> 10:v2-> 14:v132-> 15:v126-> 66:v130-> 84:v128-> 85:v131-> 87:v127-> 11:v133-> 12:v4-> 86:v3-> 13:v134-> 74:v122-> 75:v9-> 76:v124-> 24:a0-> 25:t0-> 26:t1-> 67:v28-> 27:t2-> 28:t3-> 29:t4-> 30:a1-> 31:a2-> 32:a3-> 33:a4-> 34:a5-> 35:a6-> 36:a7-> 48:v40-> 49:v41-> 50:v96-> 51:v97-> 52:v42-> 53:v43-> 54:v93-> 68:v29-> 69:v112-> 88:v48-> 89:v49-> 90:v85-> 91:v86-> 92:v50-> 93:v51-> 94:v82-> 20:v34-> 21:v105-> 43:v56-> 44:v57-> 55:v94-> 61:v62-> 62:v63-> 70:v113-> 95:v83-> 22:v106-> 23:v35-> 37:v36-> 39:s10-> 38:v37-> 40:v101-> 45:v59-> 46:v74-> 56:v45-> 57:v90-> 60:v125-> 63:v65-> 64:v69-> 71:v31-> 72:v109-> 77:v120-> 78:v23-> 80:v25-> 81:v116-> 96:v53-> 97:v79-> 79:v24-> 16:v68-> 17:v33-> 18:v67-> 19:v61-> 41:v38-> 42:v39-> 47:v60-> 58:v46-> 59:v47-> 65:v66-> 73:v32-> 82:v26-> 83:v27-> 98:v54"
// [Asm]   comment = "v55<-a0;v74<-a1;v47<-a0;v124<-a1;v3<-a0;v57<-a0;v43<-a1;v45<-a0;v2<-s3;v7<-s0;v93<-a0;v56<-a0;v48<-a0;v25<-a0;v33<-a0;v42<-a1;v66<-a0;v24<-a0;v34<-a0;v62<-a0;v35<-a0;v11<-a1;v26<-a0;v28<-s0;v9<-a0;v120<-a0;v63<-a0;v101<-a1;v133<-a0;v46<-a0;v27<-a0;v132<-a0;v53<-a0;v97<-a1;v23<-a0;v94<-a0;v68<-a0;v105<-a0;v125<-a0;v32<-a0;v51<-a1;v37<-a0;v109<-a1;v127<-a0;v131<-a0;v60<-a0;v8<-a3;v134<-a0;v39<-a0;v5<-a2;v83<-a0;v0<-s1;v69<-a1;v6<-s2;v130<-a0;v126<-a0;v41<-a1;v90<-a1;v122<-a0;v29<-a0;v54<-a0;v86<-a1;v113<-a1;v40<-a0;v4<-a1;v36<-a0;v20<-a0;v38<-a0;v31<-a0;v112<-a1;v106<-a0;v128<-a0;v49<-a1;v96<-a1;v59<-a0;v50<-a1;v65<-a0;v129<-a0;v67<-a0;v61<-a0;v85<-a1;v79<-a1;v116<-a1;v82<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux40_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v20, v2 ->   mv a0, s3
// [Asm] subst   j .aux40_7_19 ->   j .aux40_7_19
// [Asm] subst   li v126, 91 ->   li a0, 91
// [Asm] subst   beq v11, v126, .aux40_7_15 ->   beq a1, a0, .aux40_7_15
// [Asm] subst   li v129, 45 ->   li a0, 45
// [Asm] subst   beq v11, v129, .aux40_7_9 ->   beq a1, a0, .aux40_7_9
// [Asm] subst   slliw v133, v2, 2 ->   slliw a0, s3, 2
// [Asm] subst   add v134, v4, v133 ->   add a0, a1, a0
// [Asm] subst   lw v11, 0(v134) ->   lw a1, 0(a0)
// [Asm] subst   li v132, 62 ->   li a0, 62
// [Asm] subst   beq v11, v132, .aux40_7_3 ->   beq a1, a0, .aux40_7_3
// [Asm] subst   lw v34, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   slliw v105, v34, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v106, v6, v105 ->   add a0, s2, a0
// [Asm] subst   lw v35, 0(v106) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v37, v2, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v101, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v101 ->   jalr a1
// [Asm] subst   j .aux40_7_22 ->   j .aux40_7_22
// [Asm] subst   lw v56, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   addi v57, v56, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v57, 0(v5) ->   sw a0, 0(a2)
// [Asm] subst   addi v59, v2, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v74, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v74 ->   jalr a1
// [Asm] subst   j .aux40_7_25 ->   j .aux40_7_25
// [Asm] subst   lw v40, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   lw v41, 0(v5) ->   lw a1, 0(a2)
// [Asm] subst   slliw v96, v41, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v97, v6, v96 ->   add a1, s2, a1
// [Asm] subst   lw v42, 0(v97) ->   lw a1, 0(a1)
// [Asm] subst   addi v43, v42, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v93, v40, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v94, v6, v93 ->   add a0, s2, a0
// [Asm] subst   sw v43, 0(v94) ->   sw a1, 0(a0)
// [Asm] subst   addi v45, v2, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v90, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v90 ->   jalr a1
// [Asm] subst   j .aux40_7_23 ->   j .aux40_7_23
// [Asm] subst   li v125, 93 ->   li a0, 93
// [Asm] subst   bne v11, v125, .aux40_7_18 ->   bne a1, a0, .aux40_7_18
// [Asm] subst   lw v62, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   addi v63, v62, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v63, 0(v5) ->   sw a0, 0(a2)
// [Asm] subst   addi v65, v2, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v69, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v69 ->   jalr a1
// [Asm] subst   j .aux40_7_26 ->   j .aux40_7_26
// [Asm] subst   li v130, 43 ->   li a0, 43
// [Asm] subst   beq v11, v130, .aux40_7_7 ->   beq a1, a0, .aux40_7_7
// [Asm] subst   mv v68, v2 ->   mv a0, s3
// [Asm] subst   j .aux40_7_27 ->   j .aux40_7_27
// [Asm] subst   lw v28, 0(v5) ->   lw s0, 0(a2)
// [Asm] subst   call read_ch_until_newline_or_eof1_0 ->   call read_ch_until_newline_or_eof1_0
// [Asm] subst   slliw v112, v28, 2 ->   slliw a1, s0, 2
// [Asm] subst   add v113, v6, v112 ->   add a1, s2, a1
// [Asm] subst   sw v29, 0(v113) ->   sw a0, 0(a1)
// [Asm] subst   addi v31, v2, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v109, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v109 ->   jalr a1
// [Asm] subst   j .aux40_7_21 ->   j .aux40_7_21
// [Asm] subst   sw v2, 0(v7) ->   sw s3, 0(s0)
// [Asm] subst   addi v122, s11, -56 ->   addi a0, s11, -56
// [Asm] subst   andi v9, v122, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v9 ->   mv s11, a0
// [Asm] subst   la v124, lp108_9 ->   la a1, lp108_9
// [Asm] subst   sd v124, 0(v9) ->   sd a1, 0(a0)
// [Asm] subst   sd v5, 8(v9) ->   sd a2, 8(a0)
// [Asm] subst   sd v6, 16(v9) ->   sd s2, 16(a0)
// [Asm] subst   sd v2, 24(v9) ->   sd s3, 24(a0)
// [Asm] subst   sd v8, 32(v9) ->   sd a3, 32(a0)
// [Asm] subst   sd v7, 40(v9) ->   sd s0, 40(a0)
// [Asm] subst   sd v0, 48(v9) ->   sd s1, 48(a0)
// [Asm] subst   mv s10, v9 ->   mv s10, a0
// [Asm] subst   ld v120, 0(v9) ->   ld a0, 0(a0)
// [Asm] subst   jalr v120 ->   jalr a0
// [Asm] subst   lw v24, 0(v7) ->   lw a0, 0(s0)
// [Asm] subst   addi v25, v24, 1 ->   addi a0, a0, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v116, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v116 ->   jalr a1
// [Asm] subst   j .aux40_7_20 ->   j .aux40_7_20
// [Asm] subst   li v128, 46 ->   li a0, 46
// [Asm] subst   beq v11, v128, .aux40_7_11 ->   beq a1, a0, .aux40_7_11
// [Asm] subst   li v131, 60 ->   li a0, 60
// [Asm] subst   beq v11, v131, .aux40_7_5 ->   beq a1, a0, .aux40_7_5
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v0, s10 ->   mv s1, s10
// [Asm] subst   mv v2, a0 ->   mv s3, a0
// [Asm] subst   lw v3, 8(v0) ->   lw a0, 8(s1)
// [Asm] subst   ld v4, 16(v0) ->   ld a1, 16(s1)
// [Asm] subst   ld v5, 24(v0) ->   ld a2, 24(s1)
// [Asm] subst   ld v6, 32(v0) ->   ld s2, 32(s1)
// [Asm] subst   ld v7, 40(v0) ->   ld s0, 40(s1)
// [Asm] subst   ld v8, 48(v0) ->   ld a3, 48(s1)
// [Asm] subst   bge v2, v3, .aux40_7_1 ->   bge s3, a0, .aux40_7_1
// [Asm] subst   li v127, 44 ->   li a0, 44
// [Asm] subst   beq v11, v127, .aux40_7_13 ->   beq a1, a0, .aux40_7_13
// [Asm] subst   lw v48, 0(v5) ->   lw a0, 0(a2)
// [Asm] subst   lw v49, 0(v5) ->   lw a1, 0(a2)
// [Asm] subst   slliw v85, v49, 2 ->   slliw a1, a1, 2
// [Asm] subst   add v86, v6, v85 ->   add a1, s2, a1
// [Asm] subst   lw v50, 0(v86) ->   lw a1, 0(a1)
// [Asm] subst   addi v51, v50, 1 ->   addi a1, a1, 1
// [Asm] subst   slliw v82, v48, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v83, v6, v82 ->   add a0, s2, a0
// [Asm] subst   sw v51, 0(v83) ->   sw a1, 0(a0)
// [Asm] subst   addi v53, v2, 1 ->   addi a0, s3, 1
// [Asm] subst   mv s10, v0 ->   mv s10, s1
// [Asm] subst   ld v79, 0(v0) ->   ld a1, 0(s1)
// [Asm] subst   jalr v79 ->   jalr a1
// [Asm] subst   j .aux40_7_24 ->   j .aux40_7_24
// [Asm] subst   mv v20, v2 ->   mv a0, s3
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof1_0"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="v10 ← a1", color=green];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r15 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r16 [label="v5 ← a0", color=green];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v9 ← a1", color=green];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r13 -- r14;
// [Asm]   r1 -- r7;
// [Asm]   r13 -- r17;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2-> 14:v10-> 17:v9-> 15:v8-> 16:v5-> 18:v6-> 19:v7"
// [Asm]   comment = "v2<-a0;v10<-a1;v8<-a0;v5<-a0;v6<-a0;v7<-a0;v9<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof1_0"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   li v10, 10 ->   li a1, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof1_0_1 ->   beq a0, a1, .read_ch_until_newline_or_eof1_0_1
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   li v9, 13 ->   li a1, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof1_0_4 ->   bne a0, a1, .read_ch_until_newline_or_eof1_0_4
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof1_0_6 ->   j .read_ch_until_newline_or_eof1_0_6
// [Asm] subst   ret ->   ret
// [Asm] subst   j .read_ch_until_newline_or_eof1_0_5 ->   j .read_ch_until_newline_or_eof1_0_5
// [Asm] before colored: # leaf false
// [Asm] skip21_5:
// [Asm] # block info: defs: [v3, v0, v4, v5, v2], uses: [v0, v4, a1, s10, a0, v2], upward_exposed: [a1, s10, a0], params_defs: []
// [Asm] # live_in: [a1, s10, a0, zero], live_out: [v3, v0, v5, zero, v2]
// [Asm] # block parameters: []
// [Asm] .skip21_5_0:
// [Asm]   # save_ctx1  # live: [a1, zero, a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [v0, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, v0, zero, v3]
// [Asm]   lw v4, 8(v0)  # live: [v2, v0, v4, zero, v3]
// [Asm]   ld v5, 16(v0)  # live: [v2, v0, v4, v5, zero, v3]
// [Asm] # control
// [Asm]   bge v2, v4, .skip21_5_1  # live: [v2, v0, v5, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v7, v35, v37, v36], uses: [v36, v7, v35, v37, v5, v2], upward_exposed: [v5, v2], params_defs: []
// [Asm] # live_in: [v3, v0, v5, zero, v2], live_out: [v3, v7, v0, zero, v2]
// [Asm] # block parameters: []
// [Asm] .skip21_5_2:
// [Asm]   slliw v36, v2, 2  # live: [v2, v36, v0, v5, zero, v3]
// [Asm]   add v37, v5, v36  # live: [v2, v0, v37, zero, v3]
// [Asm]   lw v7, 0(v37)  # live: [v7, v2, v0, zero, v3]
// [Asm] # control
// [Asm]   li v35, 91  # live: [v7, v2, v35, v0, zero, v3]
// [Asm]   beq v7, v35, .skip21_5_3  # live: [v7, v2, v0, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v34, v7], upward_exposed: [v7], params_defs: []
// [Asm] # live_in: [v2, v3, v0, zero, v7], live_out: [v2, v0, zero, v3]
// [Asm] # block parameters: []
// [Asm] .skip21_5_4:
// [Asm] # control
// [Asm]   li v34, 93  # live: [v3, v7, v0, zero, v34, v2]
// [Asm]   bne v7, v34, .skip21_5_6  # live: [v3, v0, zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v3], upward_exposed: [zero, v3], params_defs: []
// [Asm] # live_in: [v2, v0, zero, v3], live_out: [v3, v0, v2]
// [Asm] # block parameters: []
// [Asm] .skip21_5_5:
// [Asm] # control
// [Asm]   beq v3, zero, .skip21_5_7  # live: [v2, v0, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, fa1, fa2, ft6, v27, a4, fa6, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v14, v13, a0, v27, v0, a1, v15, v3], upward_exposed: [v3, v0, v2], params_defs: []
// [Asm] # live_in: [v2, v0, v3], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .skip21_5_8:
// [Asm]   addi v13, v2, 1  # live: [v0, v13, v3]
// [Asm]   addi v14, v3, -1  # live: [v0, v14, v13]
// [Asm]   mv s10, v0  # live: [v0, v14, v13]
// [Asm]   ld v27, 0(v0)  # live: [v14, v13, v27]
// [Asm]   # save_ctx2  # live: [v14, v13, v27]
// [Asm]   mv a0, v13  # live: [v14, a0, v27]
// [Asm]   mv a1, v14  # live: [a1, a0, v27]
// [Asm]   jalr v27  # live: [a0]
// [Asm]   mv v15, a0  # live: [v15]
// [Asm]   # restore_ctx2  # live: [v15]
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .skip21_5_9:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v17], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: [v21]
// [Asm] # block parameters: [v17]
// [Asm] .skip21_5_10:
// [Asm] # control
// [Asm]   mv v21, v17  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: [v22]
// [Asm] # block parameters: [v21]
// [Asm] .skip21_5_11:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: []
// [Asm] # block parameters: [v22]
// [Asm] .skip21_5_12:
// [Asm] # control
// [Asm]   mv a0, v22  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v22]
// [Asm] # block parameters: []
// [Asm] .skip21_5_1:
// [Asm] # control
// [Asm]   mv v22, v2  # live: [v22]
// [Asm]   j .skip21_5_12  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v20, v19, a6, ft10, ft5, ft7, ft4, ft9, v21, a5, fa4, a0, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2], uses: [v2, v18, a0, v23, v20, v0, v19, a1, v3], upward_exposed: [v3, v0, v2], params_defs: []
// [Asm] # live_in: [v2, v0, v3], live_out: [v21]
// [Asm] # block parameters: []
// [Asm] .skip21_5_3:
// [Asm]   addi v18, v2, 1  # live: [v0, v18, v3]
// [Asm]   addi v19, v3, 1  # live: [v19, v0, v18]
// [Asm]   mv s10, v0  # live: [v19, v0, v18]
// [Asm]   ld v23, 0(v0)  # live: [v19, v18, v23]
// [Asm]   # save_ctx2  # live: [v19, v18, v23]
// [Asm]   mv a0, v18  # live: [v19, a0, v23]
// [Asm]   mv a1, v19  # live: [a1, a0, v23]
// [Asm]   jalr v23  # live: [a0]
// [Asm]   mv v20, a0  # live: [v20]
// [Asm]   # restore_ctx2  # live: [v20]
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm]   j .skip21_5_11  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, v10, ft9, a5, a0, fa4, ft2, a2, v17, a3, v31, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v2, v11, v10, a0, v0, a1, v31, v3], upward_exposed: [v3, v0, v2], params_defs: []
// [Asm] # live_in: [v2, v0, v3], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .skip21_5_6:
// [Asm]   addi v10, v2, 1  # live: [v0, v10, v3]
// [Asm]   mv s10, v0  # live: [v0, v10, v3]
// [Asm]   ld v31, 0(v0)  # live: [v10, v31, v3]
// [Asm]   # save_ctx2  # live: [v10, v31, v3]
// [Asm]   mv a0, v10  # live: [v31, a0, v3]
// [Asm]   mv a1, v3  # live: [a1, v31, a0]
// [Asm]   jalr v31  # live: [a0]
// [Asm]   mv v11, a0  # live: [v11]
// [Asm]   # restore_ctx2  # live: [v11]
// [Asm] # control
// [Asm]   mv v17, v11  # live: [v17]
// [Asm]   j .skip21_5_10  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v16], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .skip21_5_7:
// [Asm] # control
// [Asm]   mv v16, v2  # live: [v16]
// [Asm]   j .skip21_5_9  # live: [v16]
// [Asm] 
// [Asm] # leaf false
// [Asm] main136_2:
// [Asm] # block info: defs: [v3, t1, v13, v7, ft0, ft1, a1, v12, s11, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15, v2], uses: [v2, v11, v13, a0, v7, a2, a1, s11, v12, v9, zero, v15, v3], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main136_2_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v12, 4096  # live: [s11, v12, zero]
// [Asm]   sub v13, s11, v12  # live: [zero, v13]
// [Asm]   andi v2, v13, -8  # live: [zero, v2]
// [Asm]   mv s11, v2  # live: [s11, zero, v2]
// [Asm]   li v15, 1024  # live: [s11, v15, zero, v2]
// [Asm]   mv a1, v15  # live: [a1, s11, zero, v2]
// [Asm]   mv a0, v2  # live: [a1, s11, zero, a0, v2]
// [Asm]   mv a2, zero  # live: [a2, a1, s11, zero, a0, v2]
// [Asm]   call memseti32  # live: [s11, zero, v2]
// [Asm]   addi v9, s11, -16  # live: [zero, v9, v2]
// [Asm]   andi v3, v9, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v3  # live: [v2, zero, v3]
// [Asm]   la v11, read_prog140_12  # live: [v2, v11, zero, v3]
// [Asm]   sd v11, 0(v3)  # live: [v2, zero, v3]
// [Asm]   sd v2, 8(v3)  # live: [zero, v3]
// [Asm]   mv s10, v3  # live: [zero, v3]
// [Asm]   ld v7, 0(v3)  # live: [zero, v7]
// [Asm]   # save_ctx2  # live: [zero, v7]
// [Asm]   mv a0, zero  # live: [zero, a0, v7]
// [Asm]   jalr v7  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_14:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_14_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main136_2  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] lp108_9:
// [Asm] # block info: defs: [v2, v5, v27, v7, v8, v0, v4, v6, v28, v9, v3], uses: [v2, zero, v27, v8, v0, v28, s10, v9, v3], upward_exposed: [s10, zero], params_defs: []
// [Asm] # live_in: [s10, zero], live_out: [v5, zero, v7, v0, v4, v6]
// [Asm] # block parameters: []
// [Asm] .lp108_9_0:
// [Asm]   # save_ctx1  # live: [zero, s10]
// [Asm]   mv v0, s10  # live: [zero, v0]
// [Asm]   ld v2, 8(v0)  # live: [zero, v0, v2]
// [Asm]   ld v3, 16(v0)  # live: [v2, zero, v0, v3]
// [Asm]   lw v4, 24(v0)  # live: [v2, zero, v0, v4, v3]
// [Asm]   ld v5, 32(v0)  # live: [v2, v5, zero, v0, v4, v3]
// [Asm]   ld v6, 40(v0)  # live: [v2, v5, zero, v0, v4, v6, v3]
// [Asm]   ld v7, 48(v0)  # live: [v2, v5, zero, v7, v0, v4, v6, v3]
// [Asm]   lw v8, 0(v2)  # live: [v5, zero, v7, v8, v0, v4, v6, v3]
// [Asm]   slliw v27, v8, 2  # live: [v5, zero, v27, v7, v0, v4, v6, v3]
// [Asm]   add v28, v3, v27  # live: [v5, zero, v7, v0, v4, v6, v28]
// [Asm]   lw v9, 0(v28)  # live: [v5, zero, v7, v0, v4, v6, v9]
// [Asm] # control
// [Asm]   beq v9, zero, .lp108_9_1  # live: [v0, v4, v5, v6, zero, v7]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v22, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, v24, a3, s10, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v11, v14, a0, v22, v7, v0, v4, v6, v24, v12], upward_exposed: [v0, v4, v6, v7], params_defs: []
// [Asm] # live_in: [v0, v4, v6, v7], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .lp108_9_2:
// [Asm]   addi v11, v4, 1  # live: [v0, v11, v6, v7]
// [Asm]   mv s10, v7  # live: [v0, v11, v6, v7]
// [Asm]   ld v24, 0(v7)  # live: [v0, v11, v6, v24]
// [Asm]   # save_ctx2  # live: [v0, v11, v6, v24]
// [Asm]   mv a0, v11  # live: [v0, v6, v24, a0]
// [Asm]   jalr v24  # live: [v0, v6, a0]
// [Asm]   mv v12, a0  # live: [v0, v6, v12]
// [Asm]   # restore_ctx2  # live: [v0, v6, v12]
// [Asm]   sw v12, 0(v6)  # live: [v0]
// [Asm]   mv s10, v0  # live: [v0]
// [Asm]   ld v22, 0(v0)  # live: [v22]
// [Asm]   # save_ctx2  # live: [v22]
// [Asm]   jalr v22  # live: [a0]
// [Asm]   mv v14, a0  # live: [v14]
// [Asm]   # restore_ctx2  # live: [v14]
// [Asm] # control
// [Asm]   mv v18, v14  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .lp108_9_3:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v16, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v19, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v15], uses: [v5, v16, zero, a0, v19, v4, a1, v6, v15], upward_exposed: [v4, v5, v6, zero], params_defs: []
// [Asm] # live_in: [v4, v5, v6, zero], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .lp108_9_1:
// [Asm]   addi v15, v4, 1  # live: [v6, v5, v15, zero]
// [Asm]   mv s10, v5  # live: [v6, v5, v15, zero]
// [Asm]   ld v19, 0(v5)  # live: [v19, v6, v15, zero]
// [Asm]   # save_ctx2  # live: [v19, v6, v15, zero]
// [Asm]   mv a0, v15  # live: [v19, v6, zero, a0]
// [Asm]   mv a1, zero  # live: [v19, v6, a1, zero, a0]
// [Asm]   jalr v19  # live: [v6, zero, a0]
// [Asm]   mv v16, a0  # live: [v16, v6, zero]
// [Asm]   # restore_ctx2  # live: [v16, v6, zero]
// [Asm]   sw v16, 0(v6)  # live: [zero]
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v18]
// [Asm]   j .lp108_9_3  # live: [v18]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof1_0:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof1_0_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof1_0_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof1_0_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof1_0_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof1_0_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof1_0_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof1_0_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] bf5_1:
// [Asm] # block info: defs: [a1, s11, fa1, fa2, ft6, a4, v27, fa6, v20, a6, ft5, ft10, v6, ft4, v5, ft9, v10, fa4, ft2, a3, a7, fa7, fa3, ft3, t2, v3, t1, v16, v26, v7, v32, ft0, ft1, v29, v8, v4, ft7, v21, a5, a0, v30, a2, v24, s10, ft8, t3, t0, v18, fa5, v23, fa0, t4, v15, v2], uses: [v3, v5, v16, v21, v10, v26, a0, v30, v7, a2, v32, a1, v24, s11, v18, zero, v29, v27, v23, v20, v8, v4, v6, v2], upward_exposed: [a1, s11, a0, zero], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .bf5_1_0:
// [Asm]   # save_ctx1  # live: [zero, a0, a1, s11]
// [Asm]   mv v2, a0  # live: [zero, a1, s11, v2]
// [Asm]   mv v3, a1  # live: [v2, zero, s11, v3]
// [Asm]   addi v32, s11, -4  # live: [v2, zero, v32, v3]
// [Asm]   andi v8, v32, -8  # live: [v2, zero, v8, v3]
// [Asm]   mv s11, v8  # live: [v2, zero, v8, s11, v3]
// [Asm]   sw zero, 0(v8)  # live: [v2, zero, v8, s11, v3]
// [Asm]   li v29, 1024  # live: [v2, zero, v29, v8, s11, v3]
// [Asm]   li v30, 1024  # live: [v2, zero, v29, v30, v8, s11, v3]
// [Asm]   mul v10, v29, v30  # live: [v2, v10, zero, v8, s11, v3]
// [Asm]   slliw v26, v10, 2  # live: [v2, v10, zero, v26, v8, s11, v3]
// [Asm]   sub v27, s11, v26  # live: [v2, v10, zero, v27, v8, v3]
// [Asm]   andi v5, v27, -8  # live: [v2, v5, v10, zero, v8, v3]
// [Asm]   mv s11, v5  # live: [v2, v5, v10, zero, v8, s11, v3]
// [Asm]   mv a1, v10  # live: [v2, v5, zero, v8, a1, s11, v3]
// [Asm]   mv a0, v5  # live: [v2, v5, zero, a0, v8, a1, s11, v3]
// [Asm]   mv a2, zero  # live: [v2, v5, zero, a0, v8, a2, a1, s11, v3]
// [Asm]   call memseti32  # live: [v2, v5, zero, v8, s11, v3]
// [Asm]   addi v24, s11, -4  # live: [v2, v5, zero, v8, v24, v3]
// [Asm]   andi v6, v24, -8  # live: [v2, v5, zero, v8, v6, v3]
// [Asm]   mv s11, v6  # live: [v2, v5, zero, v8, v6, s11, v3]
// [Asm]   sw zero, 0(v6)  # live: [v2, v5, zero, v8, v6, s11, v3]
// [Asm]   addi v21, s11, -24  # live: [v2, v5, v21, zero, v8, v6, v3]
// [Asm]   andi v7, v21, -8  # live: [v2, v5, zero, v8, v7, v6, v3]
// [Asm]   mv s11, v7  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   la v23, skip21_5  # live: [v2, v5, zero, v23, v8, v7, v6, s11, v3]
// [Asm]   sd v23, 0(v7)  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   sd v2, 8(v7)  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   sd v3, 16(v7)  # live: [v2, v5, zero, v8, v7, v6, s11, v3]
// [Asm]   addi v18, s11, -56  # live: [v2, v5, v18, zero, v8, v7, v6, v3]
// [Asm]   andi v4, v18, -8  # live: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   mv s11, v4  # live: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   la v20, aux40_7  # live: [v2, v5, zero, v20, v8, v7, v4, v6, v3]
// [Asm]   sd v20, 0(v4)  # live: [v2, v5, zero, v8, v7, v4, v6, v3]
// [Asm]   sd v2, 8(v4)  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm]   sd v3, 16(v4)  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   sd v8, 24(v4)  # live: [v4, v6, v5, zero, v7]
// [Asm]   sd v5, 32(v4)  # live: [v4, v6, zero, v7]
// [Asm]   sd v6, 40(v4)  # live: [v4, zero, v7]
// [Asm]   sd v7, 48(v4)  # live: [v4, zero]
// [Asm]   mv s10, v4  # live: [v4, zero]
// [Asm]   ld v16, 0(v4)  # live: [v16, zero]
// [Asm]   # save_ctx2  # live: [v16, zero]
// [Asm]   mv a0, zero  # live: [v16, zero, a0]
// [Asm]   jalr v16  # live: [zero, a0]
// [Asm]   mv v15, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog140_12:
// [Asm] # block info: defs: [v2, t1, v0, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v0, v4, v17, s10, a0], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s10, a0], live_out: [v3, v0, v4, v2]
// [Asm] # block parameters: []
// [Asm] .read_prog140_12_0:
// [Asm]   # save_ctx1  # live: [a0, s10]
// [Asm]   mv v0, s10  # live: [v0, a0]
// [Asm]   mv v2, a0  # live: [v0, v2]
// [Asm]   ld v3, 8(v0)  # live: [v2, v0, v3]
// [Asm]   # save_ctx2  # live: [v2, v0, v3]
// [Asm]   call read_ch_until_newline_or_eof1_0  # live: [v2, v0, a0, v3]
// [Asm]   mv v4, a0  # live: [v2, v0, v4, v3]
// [Asm]   # restore_ctx2  # live: [v2, v0, v4, v3]
// [Asm] # control
// [Asm]   li v17, -1  # live: [v2, v0, v4, v17, v3]
// [Asm]   beq v4, v17, .read_prog140_12_1  # live: [v2, v0, v4, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v16, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v2, v16, a0, v7, v8, v0, v4, v15, v12, v3], upward_exposed: [v3, v0, v4, v2], params_defs: []
// [Asm] # live_in: [v2, v0, v4, v3], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .read_prog140_12_2:
// [Asm]   slliw v15, v2, 2  # live: [v3, v0, v4, v15, v2]
// [Asm]   add v16, v3, v15  # live: [v0, v4, v16, v2]
// [Asm]   sw v4, 0(v16)  # live: [v0, v2]
// [Asm]   addi v7, v2, 1  # live: [v0, v7]
// [Asm]   mv s10, v0  # live: [v0, v7]
// [Asm]   ld v12, 0(v0)  # live: [v12, v7]
// [Asm]   # save_ctx2  # live: [v12, v7]
// [Asm]   mv a0, v7  # live: [v12, a0]
// [Asm]   jalr v12  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv v10, v8  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .read_prog140_12_3:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v3, a1, a0, v9, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .read_prog140_12_1:
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call bf5_1  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm]   j .read_prog140_12_3  # live: [v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] aux40_7:
// [Asm] # block info: defs: [v2, v5, v7, v8, v0, v4, v6, v3], uses: [v3, v0, s10, a0, v2], upward_exposed: [s10, a0], params_defs: []
// [Asm] # live_in: [s11, s10, a0], live_out: [v5, v8, v7, v0, v4, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_0:
// [Asm]   # save_ctx1  # live: [a0, s11, s10]
// [Asm]   mv v0, s10  # live: [a0, v0, s11]
// [Asm]   mv v2, a0  # live: [v0, s11, v2]
// [Asm]   lw v3, 8(v0)  # live: [v3, v0, s11, v2]
// [Asm]   ld v4, 16(v0)  # live: [v3, v0, v4, s11, v2]
// [Asm]   ld v5, 24(v0)  # live: [v3, v5, v0, v4, s11, v2]
// [Asm]   ld v6, 32(v0)  # live: [v3, v5, v0, v4, v6, s11, v2]
// [Asm]   ld v7, 40(v0)  # live: [v3, v5, v7, v0, v4, v6, s11, v2]
// [Asm]   ld v8, 48(v0)  # live: [v3, v5, v7, v8, v0, v4, v6, s11, v2]
// [Asm] # control
// [Asm]   bge v2, v3, .aux40_7_1  # live: [v5, v7, v8, v0, v4, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v134, v11, v133, v132], uses: [v132, v11, v134, v4, v133, v2], upward_exposed: [v4, v2], params_defs: []
// [Asm] # live_in: [v5, v8, v7, v0, v4, v6, s11, v2], live_out: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_2:
// [Asm]   slliw v133, v2, 2  # live: [v5, v133, v7, v8, v0, v4, v6, s11, v2]
// [Asm]   add v134, v4, v133  # live: [v5, v7, v8, v0, v134, v6, s11, v2]
// [Asm]   lw v11, 0(v134)  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] # control
// [Asm]   li v132, 62  # live: [v132, v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm]   beq v11, v132, .aux40_7_3  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v131], uses: [v11, v131], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, v8, v7, v0, v6, s11, v2], live_out: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_4:
// [Asm] # control
// [Asm]   li v131, 60  # live: [v11, v5, v7, v8, v0, v6, s11, v131, v2]
// [Asm]   beq v11, v131, .aux40_7_5  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v130], uses: [v11, v130], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, v8, v7, v0, v6, s11, v2], live_out: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_6:
// [Asm] # control
// [Asm]   li v130, 43  # live: [v11, v5, v130, v7, v8, v0, v6, s11, v2]
// [Asm]   beq v11, v130, .aux40_7_7  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v129], uses: [v11, v129], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, v8, v7, v0, v6, s11, v2], live_out: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_8:
// [Asm] # control
// [Asm]   li v129, 45  # live: [v11, v5, v7, v8, v0, v6, s11, v129, v2]
// [Asm]   beq v11, v129, .aux40_7_9  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v128], uses: [v11, v128], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, v8, v7, v0, v6, s11, v2], live_out: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_10:
// [Asm] # control
// [Asm]   li v128, 46  # live: [v11, v5, v7, v8, v0, v6, s11, v128, v2]
// [Asm]   beq v11, v128, .aux40_7_11  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v127], uses: [v11, v127], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, v8, v7, v0, v6, s11, v2], live_out: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_12:
// [Asm] # control
// [Asm]   li v127, 44  # live: [v11, v5, v127, v7, v8, v0, v6, s11, v2]
// [Asm]   beq v11, v127, .aux40_7_13  # live: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v126], uses: [v11, v126], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v5, v8, v7, v0, v6, s11, v2], live_out: [v11, v5, v7, v8, v0, v6, s11, v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_14:
// [Asm] # control
// [Asm]   li v126, 91  # live: [v11, v5, v126, v8, v7, v0, v6, s11, v2]
// [Asm]   beq v11, v126, .aux40_7_15  # live: [v11, v5, v8, v7, v0, v6, s11, v2]
// [Asm] 
// [Asm] # block info: defs: [v125], uses: [v11, v125], upward_exposed: [v11], params_defs: []
// [Asm] # live_in: [v11, v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .aux40_7_16:
// [Asm] # control
// [Asm]   li v125, 93  # live: [v11, v125, v2]
// [Asm]   bne v11, v125, .aux40_7_18  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v20]
// [Asm] # block parameters: []
// [Asm] .aux40_7_17:
// [Asm] # control
// [Asm]   mv v20, v2  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v27], uses: [v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: [v27]
// [Asm] # block parameters: [v20]
// [Asm] .aux40_7_19:
// [Asm] # control
// [Asm]   mv v27, v20  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v33], uses: [v27], upward_exposed: [v27], params_defs: [v27]
// [Asm] # live_in: [v27], live_out: [v33]
// [Asm] # block parameters: [v27]
// [Asm] .aux40_7_20:
// [Asm] # control
// [Asm]   mv v33, v27  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [v39], uses: [v33], upward_exposed: [v33], params_defs: [v33]
// [Asm] # live_in: [v33], live_out: [v39]
// [Asm] # block parameters: [v33]
// [Asm] .aux40_7_21:
// [Asm] # control
// [Asm]   mv v39, v33  # live: [v39]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v39], upward_exposed: [v39], params_defs: [v39]
// [Asm] # live_in: [v39], live_out: [v47]
// [Asm] # block parameters: [v39]
// [Asm] .aux40_7_22:
// [Asm] # control
// [Asm]   mv v47, v39  # live: [v47]
// [Asm] 
// [Asm] # block info: defs: [v55], uses: [v47], upward_exposed: [v47], params_defs: [v47]
// [Asm] # live_in: [v47], live_out: [v55]
// [Asm] # block parameters: [v47]
// [Asm] .aux40_7_23:
// [Asm] # control
// [Asm]   mv v55, v47  # live: [v55]
// [Asm] 
// [Asm] # block info: defs: [v61], uses: [v55], upward_exposed: [v55], params_defs: [v55]
// [Asm] # live_in: [v55], live_out: [v61]
// [Asm] # block parameters: [v55]
// [Asm] .aux40_7_24:
// [Asm] # control
// [Asm]   mv v61, v55  # live: [v61]
// [Asm] 
// [Asm] # block info: defs: [v67], uses: [v61], upward_exposed: [v61], params_defs: [v61]
// [Asm] # live_in: [v61], live_out: [v67]
// [Asm] # block parameters: [v61]
// [Asm] .aux40_7_25:
// [Asm] # control
// [Asm]   mv v67, v61  # live: [v67]
// [Asm] 
// [Asm] # block info: defs: [v68], uses: [v67], upward_exposed: [v67], params_defs: [v67]
// [Asm] # live_in: [v67], live_out: [v68]
// [Asm] # block parameters: [v67]
// [Asm] .aux40_7_26:
// [Asm] # control
// [Asm]   mv v68, v67  # live: [v68]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v68, a0], upward_exposed: [v68], params_defs: [v68]
// [Asm] # live_in: [v68], live_out: []
// [Asm] # block parameters: [v68]
// [Asm] .aux40_7_27:
// [Asm] # control
// [Asm]   mv a0, v68  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v68], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v68]
// [Asm] # block parameters: []
// [Asm] .aux40_7_1:
// [Asm] # control
// [Asm]   mv v68, v2  # live: [v68]
// [Asm]   j .aux40_7_27  # live: [v68]
// [Asm] 
// [Asm] # block info: defs: [t1, v69, v67, ft0, ft1, a1, fa1, v63, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v62, v66, ft4, ft9, a5, a0, fa4, ft2, v65, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v62, v66, v63, v69, v5, a0, v0, v65, v2], upward_exposed: [v0, v5, v2], params_defs: []
// [Asm] # live_in: [v0, v5, v2], live_out: [v67]
// [Asm] # block parameters: []
// [Asm] .aux40_7_3:
// [Asm]   lw v62, 0(v5)  # live: [v0, v62, v5, v2]
// [Asm]   addi v63, v62, 1  # live: [v0, v63, v5, v2]
// [Asm]   sw v63, 0(v5)  # live: [v0, v2]
// [Asm]   addi v65, v2, 1  # live: [v0, v65]
// [Asm]   mv s10, v0  # live: [v0, v65]
// [Asm]   ld v69, 0(v0)  # live: [v65, v69]
// [Asm]   # save_ctx2  # live: [v65, v69]
// [Asm]   mv a0, v65  # live: [v69, a0]
// [Asm]   jalr v69  # live: [a0]
// [Asm]   mv v66, a0  # live: [v66]
// [Asm]   # restore_ctx2  # live: [v66]
// [Asm] # control
// [Asm]   mv v67, v66  # live: [v67]
// [Asm]   j .aux40_7_26  # live: [v67]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v60, fa2, ft6, a4, fa6, a6, v59, ft5, ft10, v74, v57, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v56, fa3, ft3, fa0, t4, t2, v61], uses: [v5, v56, a0, v0, v59, v74, v57, v60, v2], upward_exposed: [v0, v5, v2], params_defs: []
// [Asm] # live_in: [v0, v5, v2], live_out: [v61]
// [Asm] # block parameters: []
// [Asm] .aux40_7_5:
// [Asm]   lw v56, 0(v5)  # live: [v0, v5, v56, v2]
// [Asm]   addi v57, v56, -1  # live: [v0, v5, v57, v2]
// [Asm]   sw v57, 0(v5)  # live: [v0, v2]
// [Asm]   addi v59, v2, 1  # live: [v0, v59]
// [Asm]   mv s10, v0  # live: [v0, v59]
// [Asm]   ld v74, 0(v0)  # live: [v59, v74]
// [Asm]   # save_ctx2  # live: [v59, v74]
// [Asm]   mv a0, v59  # live: [v74, a0]
// [Asm]   jalr v74  # live: [a0]
// [Asm]   mv v60, a0  # live: [v60]
// [Asm]   # restore_ctx2  # live: [v60]
// [Asm] # control
// [Asm]   mv v61, v60  # live: [v61]
// [Asm]   j .aux40_7_25  # live: [v61]
// [Asm] 
// [Asm] # block info: defs: [t1, v79, ft0, ft1, a1, v86, fa1, v51, v82, fa2, ft6, v50, a4, fa6, a6, ft10, ft5, v54, ft7, ft4, v49, v53, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, a7, t3, fa7, t0, fa5, v48, fa3, ft3, fa0, v85, t4, t2, v83, v55], uses: [v5, v49, v53, a0, v79, v0, v86, v51, v82, v48, v50, v85, v6, v83, v54, v2], upward_exposed: [v0, v5, v6, v2], params_defs: []
// [Asm] # live_in: [v0, v5, v6, v2], live_out: [v55]
// [Asm] # block parameters: []
// [Asm] .aux40_7_7:
// [Asm]   lw v48, 0(v5)  # live: [v0, v6, v5, v48, v2]
// [Asm]   lw v49, 0(v5)  # live: [v0, v6, v48, v49, v2]
// [Asm]   slliw v85, v49, 2  # live: [v85, v0, v6, v48, v2]
// [Asm]   add v86, v6, v85  # live: [v0, v6, v48, v86, v2]
// [Asm]   lw v50, 0(v86)  # live: [v0, v6, v48, v50, v2]
// [Asm]   addi v51, v50, 1  # live: [v51, v0, v6, v48, v2]
// [Asm]   slliw v82, v48, 2  # live: [v51, v0, v6, v82, v2]
// [Asm]   add v83, v6, v82  # live: [v51, v0, v83, v2]
// [Asm]   sw v51, 0(v83)  # live: [v0, v2]
// [Asm]   addi v53, v2, 1  # live: [v0, v53]
// [Asm]   mv s10, v0  # live: [v0, v53]
// [Asm]   ld v79, 0(v0)  # live: [v53, v79]
// [Asm]   # save_ctx2  # live: [v53, v79]
// [Asm]   mv a0, v53  # live: [a0, v79]
// [Asm]   jalr v79  # live: [a0]
// [Asm]   mv v54, a0  # live: [v54]
// [Asm]   # restore_ctx2  # live: [v54]
// [Asm] # control
// [Asm]   mv v55, v54  # live: [v55]
// [Asm]   j .aux40_7_24  # live: [v55]
// [Asm] 
// [Asm] # block info: defs: [t1, v42, v41, ft0, ft1, a1, fa1, v93, fa2, v97, ft6, a4, fa6, a6, ft5, ft10, v90, v47, ft7, ft4, v46, ft9, a5, a0, fa4, ft2, a2, v43, a3, s10, ft8, t3, a7, fa7, v94, t0, fa5, v96, fa3, ft3, v45, fa0, t4, t2, v40], uses: [v40, v5, v46, v42, a0, v0, v41, v43, v93, v94, v96, v97, v45, v90, v6, v2], upward_exposed: [v0, v5, v6, v2], params_defs: []
// [Asm] # live_in: [v0, v5, v6, v2], live_out: [v47]
// [Asm] # block parameters: []
// [Asm] .aux40_7_9:
// [Asm]   lw v40, 0(v5)  # live: [v40, v0, v6, v5, v2]
// [Asm]   lw v41, 0(v5)  # live: [v40, v0, v41, v6, v2]
// [Asm]   slliw v96, v41, 2  # live: [v40, v0, v6, v96, v2]
// [Asm]   add v97, v6, v96  # live: [v40, v0, v6, v97, v2]
// [Asm]   lw v42, 0(v97)  # live: [v40, v0, v6, v42, v2]
// [Asm]   addi v43, v42, -1  # live: [v40, v0, v43, v6, v2]
// [Asm]   slliw v93, v40, 2  # live: [v93, v0, v43, v6, v2]
// [Asm]   add v94, v6, v93  # live: [v0, v94, v43, v2]
// [Asm]   sw v43, 0(v94)  # live: [v0, v2]
// [Asm]   addi v45, v2, 1  # live: [v0, v45]
// [Asm]   mv s10, v0  # live: [v0, v45]
// [Asm]   ld v90, 0(v0)  # live: [v90, v45]
// [Asm]   # save_ctx2  # live: [v90, v45]
// [Asm]   mv a0, v45  # live: [v90, a0]
// [Asm]   jalr v90  # live: [a0]
// [Asm]   mv v46, a0  # live: [v46]
// [Asm]   # restore_ctx2  # live: [v46]
// [Asm] # control
// [Asm]   mv v47, v46  # live: [v47]
// [Asm]   j .aux40_7_23  # live: [v47]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, v106, fa2, ft6, a4, fa6, a6, v105, ft5, ft10, v34, ft7, ft4, ft9, a5, a0, fa4, v36, ft2, a2, v37, a3, s10, v39, ft8, v101, a7, fa7, t3, t0, fa5, fa3, ft3, fa0, v35, t4, v38, t2], uses: [v101, v106, v5, a0, v35, v105, v0, v37, v38, v6, v34, v2], upward_exposed: [v0, v5, v6, v2], params_defs: []
// [Asm] # live_in: [v0, v5, v6, v2], live_out: [v39]
// [Asm] # block parameters: []
// [Asm] .aux40_7_11:
// [Asm]   lw v34, 0(v5)  # live: [v0, v6, v34, v2]
// [Asm]   slliw v105, v34, 2  # live: [v0, v105, v6, v2]
// [Asm]   add v106, v6, v105  # live: [v0, v106, v2]
// [Asm]   lw v35, 0(v106)  # live: [v35, v0, v2]
// [Asm]   # save_ctx2  # live: [v35, v0, v2]
// [Asm]   mv a0, v35  # live: [v0, a0, v2]
// [Asm]   call minimbt_print_char  # live: [v0, a0, v2]
// [Asm]   mv v36, a0  # live: [v0, v2]
// [Asm]   # restore_ctx2  # live: [v0, v2]
// [Asm]   addi v37, v2, 1  # live: [v0, v37]
// [Asm]   mv s10, v0  # live: [v0, v37]
// [Asm]   ld v101, 0(v0)  # live: [v37, v101]
// [Asm]   # save_ctx2  # live: [v37, v101]
// [Asm]   mv a0, v37  # live: [a0, v101]
// [Asm]   jalr v101  # live: [a0]
// [Asm]   mv v38, a0  # live: [v38]
// [Asm]   # restore_ctx2  # live: [v38]
// [Asm] # control
// [Asm]   mv v39, v38  # live: [v39]
// [Asm]   j .aux40_7_22  # live: [v39]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, v28, fa1, v33, v109, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, v113, s10, ft8, t3, a7, fa7, t0, v112, fa5, fa3, ft3, fa0, t4, t2], uses: [v109, v112, v5, a0, v29, v0, v32, v6, v28, v31, v113, v2], upward_exposed: [v0, v5, v6, v2], params_defs: []
// [Asm] # live_in: [v0, v5, v6, v2], live_out: [v33]
// [Asm] # block parameters: []
// [Asm] .aux40_7_13:
// [Asm]   lw v28, 0(v5)  # live: [v0, v6, v28, v2]
// [Asm]   # save_ctx2  # live: [v0, v6, v28, v2]
// [Asm]   call read_ch_until_newline_or_eof1_0  # live: [v0, v6, v28, a0, v2]
// [Asm]   mv v29, a0  # live: [v0, v6, v28, v29, v2]
// [Asm]   # restore_ctx2  # live: [v0, v6, v28, v29, v2]
// [Asm]   slliw v112, v28, 2  # live: [v0, v112, v6, v29, v2]
// [Asm]   add v113, v6, v112  # live: [v0, v29, v113, v2]
// [Asm]   sw v29, 0(v113)  # live: [v0, v2]
// [Asm]   addi v31, v2, 1  # live: [v0, v31]
// [Asm]   mv s10, v0  # live: [v0, v31]
// [Asm]   ld v109, 0(v0)  # live: [v109, v31]
// [Asm]   # save_ctx2  # live: [v109, v31]
// [Asm]   mv a0, v31  # live: [v109, a0]
// [Asm]   jalr v109  # live: [a0]
// [Asm]   mv v32, a0  # live: [v32]
// [Asm]   # restore_ctx2  # live: [v32]
// [Asm] # control
// [Asm]   mv v33, v32  # live: [v33]
// [Asm]   j .aux40_7_21  # live: [v33]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, v120, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v27, a6, ft10, ft5, v122, ft7, v116, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v24, v9, s10, ft8, a7, t3, fa7, t0, fa5, v124, fa3, ft3, v23, fa0, t4, t2], uses: [v25, v116, v5, a0, v26, v120, v7, v0, s11, v24, v9, v124, v8, v6, v122, v2], upward_exposed: [v5, v7, v8, v0, v6, s11, v2], params_defs: []
// [Asm] # live_in: [v5, v8, v7, v0, v6, s11, v2], live_out: [v27]
// [Asm] # block parameters: []
// [Asm] .aux40_7_15:
// [Asm]   sw v2, 0(v7)  # live: [v5, v8, v7, v0, v6, s11, v2]
// [Asm]   addi v122, s11, -56  # live: [v5, v8, v7, v0, v6, v122, v2]
// [Asm]   andi v9, v122, -8  # live: [v5, v8, v7, v0, v6, v9, v2]
// [Asm]   mv s11, v9  # live: [v5, v8, v7, v0, v6, v9, v2]
// [Asm]   la v124, lp108_9  # live: [v5, v124, v8, v7, v0, v6, v9, v2]
// [Asm]   sd v124, 0(v9)  # live: [v5, v8, v7, v0, v6, v9, v2]
// [Asm]   sd v5, 8(v9)  # live: [v8, v7, v0, v6, v9, v2]
// [Asm]   sd v6, 16(v9)  # live: [v8, v2, v0, v9, v7]
// [Asm]   sd v2, 24(v9)  # live: [v8, v0, v9, v7]
// [Asm]   sd v8, 32(v9)  # live: [v0, v9, v7]
// [Asm]   sd v7, 40(v9)  # live: [v0, v9, v7]
// [Asm]   sd v0, 48(v9)  # live: [v0, v9, v7]
// [Asm]   mv s10, v9  # live: [v0, v9, v7]
// [Asm]   ld v120, 0(v9)  # live: [v0, v120, v7]
// [Asm]   # save_ctx2  # live: [v0, v120, v7]
// [Asm]   jalr v120  # live: [v0, a0, v7]
// [Asm]   mv v23, a0  # live: [v0, v7]
// [Asm]   # restore_ctx2  # live: [v0, v7]
// [Asm]   lw v24, 0(v7)  # live: [v0, v24]
// [Asm]   addi v25, v24, 1  # live: [v25, v0]
// [Asm]   mv s10, v0  # live: [v25, v0]
// [Asm]   ld v116, 0(v0)  # live: [v116, v25]
// [Asm]   # save_ctx2  # live: [v116, v25]
// [Asm]   mv a0, v25  # live: [v116, a0]
// [Asm]   jalr v116  # live: [a0]
// [Asm]   mv v26, a0  # live: [v26]
// [Asm]   # restore_ctx2  # live: [v26]
// [Asm] # control
// [Asm]   mv v27, v26  # live: [v27]
// [Asm]   j .aux40_7_20  # live: [v27]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v20]
// [Asm] # block parameters: []
// [Asm] .aux40_7_18:
// [Asm] # control
// [Asm]   mv v20, v2  # live: [v20]
// [Asm]   j .aux40_7_19  # live: [v20]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_14  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl skip21_5
// [Main]   .type skip21_5, @function
// [Main] # leaf false
// [Main] skip21_5:
// [Main] .skip21_5_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a2, s10
// [Main]   lw a3, 8(a2)
// [Main]   ld a4, 16(a2)
// [Main]   bge a0, a3, .skip21_5_1
// [Main] 
// [Main] .skip21_5_2:
// [Main]   slliw a3, a0, 2
// [Main]   add a3, a4, a3
// [Main]   lw a4, 0(a3)
// [Main]   li a3, 91
// [Main]   beq a4, a3, .skip21_5_3
// [Main] 
// [Main] .skip21_5_4:
// [Main]   li a3, 93
// [Main]   bne a4, a3, .skip21_5_6
// [Main] 
// [Main] .skip21_5_5:
// [Main]   beq a1, zero, .skip21_5_7
// [Main] 
// [Main] .skip21_5_8:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, -1
// [Main]   mv s10, a2
// [Main]   ld a2, 0(a2)
// [Main]   jalr a2
// [Main] 
// [Main] .skip21_5_9:
// [Main] 
// [Main] .skip21_5_10:
// [Main] 
// [Main] .skip21_5_11:
// [Main] 
// [Main] .skip21_5_12:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .skip21_5_1:
// [Main]   j .skip21_5_12
// [Main] 
// [Main] .skip21_5_3:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, 1
// [Main]   mv s10, a2
// [Main]   ld a2, 0(a2)
// [Main]   jalr a2
// [Main]   j .skip21_5_11
// [Main] 
// [Main] .skip21_5_6:
// [Main]   addi a0, a0, 1
// [Main]   mv s10, a2
// [Main]   ld a2, 0(a2)
// [Main]   jalr a2
// [Main]   j .skip21_5_10
// [Main] 
// [Main] .skip21_5_7:
// [Main]   j .skip21_5_9
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main136_2
// [Main]   .type main136_2, @function
// [Main] # leaf false
// [Main] main136_2:
// [Main] .main136_2_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   li a0, 4096
// [Main]   sub a0, s11, a0
// [Main]   andi s0, a0, -8
// [Main]   mv s11, s0
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -16
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, read_prog140_12
// [Main]   sd a1, 0(a0)
// [Main]   sd s0, 8(a0)
// [Main]   mv s10, a0
// [Main]   ld a1, 0(a0)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_14
// [Main]   .type T$start_14, @function
// [Main] # leaf false
// [Main] T$start_14:
// [Main] .T$start_14_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main136_2
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl lp108_9
// [Main]   .type lp108_9, @function
// [Main] # leaf false
// [Main] lp108_9:
// [Main] .lp108_9_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s1, s10
// [Main]   ld a0, 8(s1)
// [Main]   ld a2, 16(s1)
// [Main]   lw a3, 24(s1)
// [Main]   ld a1, 32(s1)
// [Main]   ld s0, 40(s1)
// [Main]   ld a4, 48(s1)
// [Main]   lw a0, 0(a0)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, a2, a0
// [Main]   lw a0, 0(a0)
// [Main]   beq a0, zero, .lp108_9_1
// [Main] 
// [Main] .lp108_9_2:
// [Main]   addi a0, a3, 1
// [Main]   mv s10, a4
// [Main]   ld a1, 0(a4)
// [Main]   jalr a1
// [Main]   sw a0, 0(s0)
// [Main]   mv s10, s1
// [Main]   ld a0, 0(s1)
// [Main]   jalr a0
// [Main] 
// [Main] .lp108_9_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .lp108_9_1:
// [Main]   addi a0, a3, 1
// [Main]   mv s10, a1
// [Main]   ld a2, 0(a1)
// [Main]   mv a1, zero
// [Main]   jalr a2
// [Main]   sw a0, 0(s0)
// [Main]   mv a0, zero
// [Main]   j .lp108_9_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof1_0
// [Main]   .type read_ch_until_newline_or_eof1_0, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof1_0:
// [Main] .read_ch_until_newline_or_eof1_0_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   li a1, 10
// [Main]   beq a0, a1, .read_ch_until_newline_or_eof1_0_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_2:
// [Main]   li a1, 13
// [Main]   bne a0, a1, .read_ch_until_newline_or_eof1_0_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof1_0_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof1_0_4:
// [Main]   j .read_ch_until_newline_or_eof1_0_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl bf5_1
// [Main]   .type bf5_1, @function
// [Main] # leaf false
// [Main] bf5_1:
// [Main] .bf5_1_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   addi a0, s11, -4
// [Main]   andi s2, a0, -8
// [Main]   mv s11, s2
// [Main]   sw zero, 0(s2)
// [Main]   li a0, 1024
// [Main]   li a1, 1024
// [Main]   mul a0, a0, a1
// [Main]   slliw a1, a0, 2
// [Main]   sub a1, s11, a1
// [Main]   andi s3, a1, -8
// [Main]   mv s11, s3
// [Main]   mv a1, a0
// [Main]   mv a0, s3
// [Main]   mv a2, zero
// [Main]   call memseti32
// [Main]   addi a0, s11, -4
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   sw zero, 0(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, skip21_5
// [Main]   sd a2, 0(a1)
// [Main]   sd s0, 8(a1)
// [Main]   sd s1, 16(a1)
// [Main]   addi a2, s11, -56
// [Main]   andi a2, a2, -8
// [Main]   mv s11, a2
// [Main]   la a3, aux40_7
// [Main]   sd a3, 0(a2)
// [Main]   sd s0, 8(a2)
// [Main]   sd s1, 16(a2)
// [Main]   sd s2, 24(a2)
// [Main]   sd s3, 32(a2)
// [Main]   sd a0, 40(a2)
// [Main]   sd a1, 48(a2)
// [Main]   mv s10, a2
// [Main]   ld a1, 0(a2)
// [Main]   mv a0, zero
// [Main]   jalr a1
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog140_12
// [Main]   .type read_prog140_12, @function
// [Main] # leaf false
// [Main] read_prog140_12:
// [Main] .read_prog140_12_0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   mv s0, s10
// [Main]   mv s1, a0
// [Main]   ld s2, 8(s0)
// [Main]   call read_ch_until_newline_or_eof1_0
// [Main]   li a1, -1
// [Main]   beq a0, a1, .read_prog140_12_1
// [Main] 
// [Main] .read_prog140_12_2:
// [Main]   slliw a1, s1, 2
// [Main]   add a1, s2, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s10, s0
// [Main]   ld a1, 0(s0)
// [Main]   jalr a1
// [Main] 
// [Main] .read_prog140_12_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .read_prog140_12_1:
// [Main]   mv a0, s1
// [Main]   mv a1, s2
// [Main]   call bf5_1
// [Main]   j .read_prog140_12_3
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux40_7
// [Main]   .type aux40_7, @function
// [Main] # leaf false
// [Main] aux40_7:
// [Main] .aux40_7_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   mv s1, s10
// [Main]   mv s3, a0
// [Main]   lw a0, 8(s1)
// [Main]   ld a1, 16(s1)
// [Main]   ld a2, 24(s1)
// [Main]   ld s2, 32(s1)
// [Main]   ld s0, 40(s1)
// [Main]   ld a3, 48(s1)
// [Main]   bge s3, a0, .aux40_7_1
// [Main] 
// [Main] .aux40_7_2:
// [Main]   slliw a0, s3, 2
// [Main]   add a0, a1, a0
// [Main]   lw a1, 0(a0)
// [Main]   li a0, 62
// [Main]   beq a1, a0, .aux40_7_3
// [Main] 
// [Main] .aux40_7_4:
// [Main]   li a0, 60
// [Main]   beq a1, a0, .aux40_7_5
// [Main] 
// [Main] .aux40_7_6:
// [Main]   li a0, 43
// [Main]   beq a1, a0, .aux40_7_7
// [Main] 
// [Main] .aux40_7_8:
// [Main]   li a0, 45
// [Main]   beq a1, a0, .aux40_7_9
// [Main] 
// [Main] .aux40_7_10:
// [Main]   li a0, 46
// [Main]   beq a1, a0, .aux40_7_11
// [Main] 
// [Main] .aux40_7_12:
// [Main]   li a0, 44
// [Main]   beq a1, a0, .aux40_7_13
// [Main] 
// [Main] .aux40_7_14:
// [Main]   li a0, 91
// [Main]   beq a1, a0, .aux40_7_15
// [Main] 
// [Main] .aux40_7_16:
// [Main]   li a0, 93
// [Main]   bne a1, a0, .aux40_7_18
// [Main] 
// [Main] .aux40_7_17:
// [Main]   mv a0, s3
// [Main] 
// [Main] .aux40_7_19:
// [Main] 
// [Main] .aux40_7_20:
// [Main] 
// [Main] .aux40_7_21:
// [Main] 
// [Main] .aux40_7_22:
// [Main] 
// [Main] .aux40_7_23:
// [Main] 
// [Main] .aux40_7_24:
// [Main] 
// [Main] .aux40_7_25:
// [Main] 
// [Main] .aux40_7_26:
// [Main] 
// [Main] .aux40_7_27:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] .aux40_7_1:
// [Main]   mv a0, s3
// [Main]   j .aux40_7_27
// [Main] 
// [Main] .aux40_7_3:
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(a2)
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_26
// [Main] 
// [Main] .aux40_7_5:
// [Main]   lw a0, 0(a2)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(a2)
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_25
// [Main] 
// [Main] .aux40_7_7:
// [Main]   lw a0, 0(a2)
// [Main]   lw a1, 0(a2)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_24
// [Main] 
// [Main] .aux40_7_9:
// [Main]   lw a0, 0(a2)
// [Main]   lw a1, 0(a2)
// [Main]   slliw a1, a1, 2
// [Main]   add a1, s2, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_23
// [Main] 
// [Main] .aux40_7_11:
// [Main]   lw a0, 0(a2)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s2, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_22
// [Main] 
// [Main] .aux40_7_13:
// [Main]   lw s0, 0(a2)
// [Main]   call read_ch_until_newline_or_eof1_0
// [Main]   slliw a1, s0, 2
// [Main]   add a1, s2, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s3, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_21
// [Main] 
// [Main] .aux40_7_15:
// [Main]   sw s3, 0(s0)
// [Main]   addi a0, s11, -56
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   la a1, lp108_9
// [Main]   sd a1, 0(a0)
// [Main]   sd a2, 8(a0)
// [Main]   sd s2, 16(a0)
// [Main]   sd s3, 24(a0)
// [Main]   sd a3, 32(a0)
// [Main]   sd s0, 40(a0)
// [Main]   sd s1, 48(a0)
// [Main]   mv s10, a0
// [Main]   ld a0, 0(a0)
// [Main]   jalr a0
// [Main]   lw a0, 0(s0)
// [Main]   addi a0, a0, 1
// [Main]   mv s10, s1
// [Main]   ld a1, 0(s1)
// [Main]   jalr a1
// [Main]   j .aux40_7_20
// [Main] 
// [Main] .aux40_7_18:
// [Main]   mv a0, s3
// [Main]   j .aux40_7_19
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_14
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
