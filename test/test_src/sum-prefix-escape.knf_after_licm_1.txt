let rec sum_nested8.49: Unit = (acc9.36: Int, x11.37: Int, _29: Int, arr.28: Array(Int), res.34: Array(Int)) {
  let _38: Int = Int(1)
  let _39: Int = Sub(_29, _38)
  if (x11.37 <= _39) then {
    let _40: Int = Get arr.28[x11.37]
    let s.41: Int = Add(acc9.36, _40)
    let _42: Unit = Put res.34[x11.37] = s.41
    let _43: Int = Int(1)
    let _44: Int = Add(x11.37, _43)
    Apply(sum_nested8.49, [s.41, _44, _29, arr.28, res.34, ])
  } else {
    Unit
  }
}
let rec main25.48: Var({val: Some(Unit)}) = () {
  let _26: Int = Int(10)
  let _27: Int = Int(4)
  let arr.28: Array(Int) = ExtApply(minimbt_create_array, [_26, _27, ])
  let _29: Int = Int(10)
  let _33: Int = Int(0)
  let res.34: Array(Int) = ExtApply(minimbt_create_array, [_29, _33, ])
  let _45: Int = Int(0)
  let _46: Int = Int(0)
  let _47: Unit = Apply(sum_nested8.49, [_45, _46, _29, arr.28, res.34, ])
  let _31: Int = Int(0)
  let _32: Int = Get res.34[_31]
  ExtApply(minimbt_print_int, [_32, ])
}
Apply(main25.48, [])