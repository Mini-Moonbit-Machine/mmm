// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, Insn(iref=%1) -> v4, Self(fref=f0) -> v0, Insn(iref=%0) -> v3, Mem(fref=f0, mref=m0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v2]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a1, a0, v2]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 6 -> 4
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v2]
// [Asm] move: a2 <- v4
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$dummy.32") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("T$dummy.32") clobbered_f: @hashset.of([])
// [Asm] subst   lw v3, _77 ->   lw a1, _77
// [Asm] subst   lw v4, _78 ->   lw a2, _78
// [Asm] subst   slliw v6, v3, 2 ->   slliw a0, a1, 2
// [Asm] subst   sub v2, s11, v6 ->   sub s0, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, BlockParam(bref=b3, bpref=$b.0) -> v9, Insn(iref=%2) -> v6, Insn(iref=%1) -> v3, Self(fref=f2) -> v0, BlockParam(bref=b0, bpref=$b.0) -> v4, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> v5, Insn(iref=%4) -> v8
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- v2
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v9
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- zero
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] defs: [v11]
// [Asm] live_set: [v11, v4, zero, v3]
// [Asm] defined: v11 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] move: a0 <- v11
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v4, zero, a0, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, zero, v3]
// [Asm] move: v4 <- v8
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4, zero, v3]
// [Asm] Label("print.79") clobbered_x: @hashset.of([s0, a0, s1])
// [Asm] Label("print.79") clobbered_f: @hashset.of([])
// [Asm] subst   beq v4, zero, .print.79_1 ->   beq s0, zero, .print.79_1
// [Asm] subst   ld v3, dummy.32 ->   ld s1, dummy.32
// [Asm] subst   mv v4, v2 ->   mv s0, a0
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v9, zero ->   mv a0, zero
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s1)
// [Asm] subst   li v11, 120 ->   li a0, 120
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v8, v4, -1 ->   addi a0, s0, -1
// [Asm] subst   mv v4, v8 ->   mv s0, a0
// [Asm] subst   j .print.79_0 ->   j .print.79_0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f3) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.80") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.80") clobbered_f: @hashset.of([])
// [Asm] subst   li v3, 10 ->   li a0, 10
// [Asm] subst   call print.79 ->   call print.79
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.80:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.80_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 10  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call print.79  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$dummy.32:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v4, a2, a1, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$dummy.32_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v3, _77  # live: [s11, v3]
// [Asm]   lw v4, _78  # live: [v4, s11, v3]
// [Asm]   slliw v6, v3, 2  # live: [v4, v6, s11, v3]
// [Asm]   sub v2, s11, v6  # live: [v3, v4, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v4, v2]
// [Asm]   mv a1, v3  # live: [v4, a1, v2]
// [Asm]   mv a0, v2  # live: [v4, a1, a0, v2]
// [Asm]   mv a2, v4  # live: [a2, a1, a0, v2]
// [Asm]   call memseti32  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, t5, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call T$dummy.32  # live: [a0]
// [Asm]   la t5, dummy.32  # live: [t5, a0]
// [Asm]   sd a0, 0(t5)  # live: []
// [Asm]   call main.80  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print.79:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .print.79_5:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   ld v3, dummy.32  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v2  # live: [v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v4, zero], upward_exposed: [v4, zero], params_defs: [v4]
// [Asm] # live_in: [v4, zero, v3], live_out: [v4, zero, v3]
// [Asm] # block parameters: [v4]
// [Asm] .print.79_0:
// [Asm] # control
// [Asm]   beq v4, zero, .print.79_1  # live: [v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v8, v11, v4, zero, a0, v3], upward_exposed: [v4, zero, v3], params_defs: []
// [Asm] # live_in: [v4, zero, v3], live_out: [v4, zero, v3]
// [Asm] # block parameters: []
// [Asm] .print.79_2:
// [Asm]   sw zero, 0(v3)  # live: [v4, zero, v3]
// [Asm]   # save_ctx2  # live: [v4, zero, v3]
// [Asm]   li v11, 120  # live: [v11, v4, zero, v3]
// [Asm]   mv a0, v11  # live: [v4, zero, a0, v3]
// [Asm]   call minimbt_print_int  # live: [v4, zero, a0, v3]
// [Asm]   mv v7, a0  # live: [v4, zero, v3]
// [Asm]   # restore_ctx2  # live: [v4, zero, v3]
// [Asm]   addi v8, v4, -1  # live: [v8, zero, v3]
// [Asm] # control
// [Asm]   mv v4, v8  # live: [v4, zero, v3]
// [Asm]   j .print.79_0  # live: [v4, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .print.79_1:
// [Asm] # control
// [Asm]   mv v9, zero  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v9, a0], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: []
// [Asm] # block parameters: [v9]
// [Asm] .print.79_3:
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] dummy.32:
// [Asm]   .zero 8
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _77:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _78:
// [Asm]   .word 0
// [Asm] 
// [Main] beta reduce _43 = placeholder.66
// [Main] top int reduce x_1.1 = Int(1)
// [Main] top int reduce _2 = Int(1)
// [Main] top int reduce x_2.3 = Int(2)
// [Main] top int reduce _4 = Int(1)
// [Main] top int reduce x_3.5 = Int(3)
// [Main] top int reduce _6 = Int(1)
// [Main] top int reduce x_4.7 = Int(4)
// [Main] top int reduce _8 = Int(1)
// [Main] top int reduce x_5.9 = Int(5)
// [Main] top int reduce _10 = Int(1)
// [Main] top int reduce x_6.11 = Int(6)
// [Main] top int reduce _12 = Int(1)
// [Main] top int reduce x_7.13 = Int(7)
// [Main] top int reduce _14 = Int(1)
// [Main] top int reduce x_8.15 = Int(8)
// [Main] top int reduce _16 = Int(1)
// [Main] top int reduce x_9.17 = Int(9)
// [Main] top int reduce _18 = Int(1)
// [Main] top int reduce x_10.19 = Int(10)
// [Main] top int reduce _20 = Int(1)
// [Main] top int reduce x_11.21 = Int(11)
// [Main] top int reduce _22 = Int(1)
// [Main] top int reduce x_12.23 = Int(12)
// [Main] top int reduce _24 = Int(1)
// [Main] top int reduce x_13.25 = Int(13)
// [Main] top int reduce _26 = Int(1)
// [Main] top int reduce x_14.27 = Int(14)
// [Main] top int reduce _28 = Int(1)
// [Main] top int reduce x_15.29 = Int(15)
// [Main] top int reduce _30 = Int(1)
// [Main] top int reduce _31 = Int(0)
// [Main] top int reduce _70 = Int(1)
// [Main] top int reduce _71 = Int(0)
// [Main] top int reduce _75 = Int(1)
// [Main] top int reduce _76 = Int(0)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.80
// [Main]   .type main.80, @function
// [Main] # leaf false
// [Main] main.80:
// [Main] .main.80_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 10
// [Main]   call print.79
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$dummy.32
// [Main]   .type T$dummy.32, @function
// [Main] # leaf false
// [Main] T$dummy.32:
// [Main] .T$dummy.32_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a1, _77
// [Main]   lw a2, _78
// [Main]   slliw a0, a1, 2
// [Main]   sub s0, s11, a0
// [Main]   andi s11, s0, -8
// [Main]   mv a0, s0
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call T$dummy.32
// [Main]   la t5, dummy.32
// [Main]   sd a0, 0(t5)
// [Main]   call main.80
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print.79
// [Main]   .type print.79, @function
// [Main] # leaf false
// [Main] print.79:
// [Main] .print.79_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   ld s1, dummy.32
// [Main]   mv s0, a0
// [Main] 
// [Main] .print.79_0:
// [Main]   beq s0, zero, .print.79_1
// [Main] 
// [Main] .print.79_2:
// [Main]   sw zero, 0(s1)
// [Main]   li a0, 120
// [Main]   call minimbt_print_int
// [Main]   addi s0, s0, -1
// [Main]   j .print.79_0
// [Main] 
// [Main] .print.79_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print.79_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl dummy.32
// [Main]   .type dummy.32, @object
// [Main] dummy.32:
// [Main]   .zero 8
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _77
// [Main]   .type _77, @object
// [Main] _77:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _78
// [Main]   .type _78, @object
// [Main] _78:
// [Main]   .word 0
// [Main] 
// [Main] 
// [Typer] resolve: Let(("x_1", Int), Int(1), Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=None), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))))))))
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=None), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))))))))
// [Typer] resolve: Prim(Var("x_1"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_1")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))))))
// [Typer] resolve: Prim(Var("x_2"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_2")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))))))
// [Typer] resolve: Prim(Var("x_3"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_3")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))))
// [Typer] resolve: Prim(Var("x_4"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_4")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))))
// [Typer] resolve: Prim(Var("x_5"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_5")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))
// [Typer] resolve: Prim(Var("x_6"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_6")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))
// [Typer] resolve: Prim(Var("x_7"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_7")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))
// [Typer] resolve: Prim(Var("x_8"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_8")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))
// [Typer] resolve: Prim(Var("x_9"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_9")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))
// [Typer] resolve: Prim(Var("x_10"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_10")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))
// [Typer] resolve: Prim(Var("x_11"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_11")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))
// [Typer] resolve: Prim(Var("x_12"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_12")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))
// [Typer] resolve: Prim(Var("x_13"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_13")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))
// [Typer] resolve: Prim(Var("x_14"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x_14")
// [Typer] resolve: Int(1)
// [Typer] resolve: Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))
// [Typer] resolve: Array(Int(1), Int(0))
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(0)
// [Typer] resolve: LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))
// [Typer] resolve: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)
// [Typer] resolve: Put(Var("dummy"), Int(0), Int(0))
// [Typer] resolve: Var("dummy")
// [Typer] resolve: Int(0)
// [Typer] resolve: Int(0)
// [Typer] resolve: Unit
// [Typer] resolve: Var("placeholder")
// [Typer] resolve: LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))
// [Typer] resolve: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))
// [Typer] resolve: Eq(Var("n"), Int(0))
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(0)
// [Typer] resolve: Unit
// [Typer] resolve: Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])))
// [Typer] resolve: App(App(Var("do_nothing"), targs=None, []), targs=None, [])
// [Typer] resolve: App(Var("do_nothing"), targs=None, [])
// [Typer] resolve: Var("do_nothing")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))
// [Typer] resolve: App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)])
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None)
// [Typer] resolve: Prim(Var("x_1"), Var("x_2"), Add, kind=None)
// [Typer] resolve: Var("x_1")
// [Typer] resolve: Var("x_2")
// [Typer] resolve: Var("x_3")
// [Typer] resolve: Var("x_4")
// [Typer] resolve: Var("x_5")
// [Typer] resolve: Var("x_6")
// [Typer] resolve: Var("x_7")
// [Typer] resolve: Var("x_8")
// [Typer] resolve: Var("x_9")
// [Typer] resolve: Var("x_10")
// [Typer] resolve: Var("x_11")
// [Typer] resolve: Var("x_12")
// [Typer] resolve: Var("x_13")
// [Typer] resolve: Var("x_14")
// [Typer] resolve: Var("x_15")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("n")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("print")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)
// [Typer] resolve: App(Var("print"), targs=None, [Int(10)])
// [Typer] resolve: Int(10)
// [Typer] resolve: Var("print")
// [Typer] resolve: Unit
// [Typer] check: Let(("x_1", Int), Int(1), Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=None), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))))))))) against Unit
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=None), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_1"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_1") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_2"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_3"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_4"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_4") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))))) against Unit
// [Typer] check: Prim(Var("x_5"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_5") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))))) against Unit
// [Typer] check: Prim(Var("x_6"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_6") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))))) against Unit
// [Typer] check: Prim(Var("x_7"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_7") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))))) against Unit
// [Typer] check: Prim(Var("x_8"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_8") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))))) against Unit
// [Typer] check: Prim(Var("x_9"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_9") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))))) against Unit
// [Typer] check: Prim(Var("x_10"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_10") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))))) against Unit
// [Typer] check: Prim(Var("x_11"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))))) against Unit
// [Typer] check: Prim(Var("x_12"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))))) against Unit
// [Typer] check: Prim(Var("x_13"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))))) against Unit
// [Typer] check: Prim(Var("x_14"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("dummy", Array[Int]), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)))) against Unit
// [Typer] check: Array(Int(1), Int(0)) against Array[Int]
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("do_nothing", () -> Unit), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder")) against () -> Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), Put(Var("dummy"), Int(0), Int(0)), Unit) against Unit
// [Typer] infer: Put(Var("dummy"), Int(0), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("dummy") against Array[Int]
// [Typer] inst: TypeScheme(([], Array[Int]))
// [Typer] inst result: Array[Int]
// [Typer] unify: Array[Int] and Array[Int]
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Var("placeholder") against () -> Unit
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: () -> Unit and () -> Unit
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])))) against Unit
// [Typer] check: Eq(Var("n"), Int(0)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var(None)), App(App(Var("do_nothing"), targs=None, []), targs=None, []), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] infer: App(App(Var("do_nothing"), targs=None, []), targs=None, [])
// [Typer] infer: App(Var("do_nothing"), targs=None, [])
// [Typer] inst: TypeScheme(([], () -> () -> Unit))
// [Typer] inst result: () -> () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None) against Int
// [Typer] check: Prim(Var("x_1"), Var("x_2"), Add, kind=None) against Int
// [Typer] check: Var("x_1") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_4") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_5") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_6") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_7") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_8") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_9") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_10") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_15") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: App(Var("print"), targs=None, [Prim(Var("n"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print"), targs=None, [Int(10)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print"), targs=None, [Int(10)])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(10) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {do_nothing.33: Once, placeholder.34: AsClosure, print.39: Many(2), main.64: Once}
// [KnfOpt] Knf inline Some(do_nothing)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {print.39: Many(2), placeholder.66: Once, main.64: Once}
// [KnfOpt] Knf inline Some(placeholder)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 49
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 55
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {print.39: Many(2), main.64: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 47
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 47
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [KnfOpt] Tuple freq: {_77: MayEscape, _78: MayEscape, _73: MayEscape, _59: MayEscape, _63: MayEscape, _65: MayEscape}
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %5: Call(ty=Unit, f=f2, args=[Insn(iref=%4)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Once, f2: Once, f3: Once})
// [CoreOpt] allow_inline: false %0 main.80 false true true true true
// [CoreOpt] allow_inline: false %0 print.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.80 false true true true true
// [CoreOpt] allow_inline: false %0 print.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.80 false true true true true
// [CoreOpt] allow_inline: false %0 print.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.80 false true true true true
// [CoreOpt] allow_inline: false %0 print.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.80 false true true true true
// [CoreOpt] allow_inline: false %0 print.79 false true true false true
// [CoreOpt] allow_inline: false %0 main.80 false true true true true
// [CoreOpt] allow_inline: false %0 print.79 false true true false true
