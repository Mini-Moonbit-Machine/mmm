// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f8) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_6.11") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_6.11") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_5.9 ->   lw a0, x_5.9
// [Asm] subst   lw v3, _113 ->   lw a1, _113
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Self(fref=f28) -> v0, Mem(fref=f28, mref=m0) -> v2, Insn(iref=%0) -> v3, Insn(iref=%2) -> v5
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] defs: [v3]
// [Asm] live_set: [s11, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4, s11, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v4, v6, s11, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v3, v4, v2]
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v3, v4, v2]
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v4, a1, v2]
// [Asm] move: a1 <- v3
// [Asm] defined: a1 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, a1, a0, v2]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] skip edge 6 -> 4
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0, v2]
// [Asm] move: a2 <- v4
// [Asm] defined: a2 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$dummy.32") clobbered_x: @hashset.of([a2, s0, a1, a0])
// [Asm] Label("T$dummy.32") clobbered_f: @hashset.of([])
// [Asm] subst   lw v3, _123 ->   lw a0, _123
// [Asm] subst   lw v4, _124 ->   lw a2, _124
// [Asm] subst   slliw v6, v3, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v2, s11, v6 ->   sub s0, s11, a1
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   mv a1, v3 ->   mv a1, a0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call memseti32 ->   call memseti32
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f16) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_10.19") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_10.19") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_9.17 ->   lw a0, x_9.17
// [Asm] subst   lw v3, _117 ->   lw a1, _117
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f26) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_15.29") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_15.29") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_14.27 ->   lw a0, x_14.27
// [Asm] subst   lw v3, _122 ->   lw a1, _122
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v3, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_3.5") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_3.5") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_2.3 ->   lw a0, x_2.3
// [Asm] subst   lw v3, _110 ->   lw a1, _110
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f18) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_11.21") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_11.21") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_10.19 ->   lw a0, x_10.19
// [Asm] subst   lw v3, _118 ->   lw a1, _118
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Self(fref=f24) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_14.27") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_14.27") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_13.25 ->   lw a0, x_13.25
// [Asm] subst   lw v3, _121 ->   lw a1, _121
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f22) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_13.25") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_13.25") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_12.23 ->   lw a0, x_12.23
// [Asm] subst   lw v3, _120 ->   lw a1, _120
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f20) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_12.23") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_12.23") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_11.21 ->   lw a0, x_11.21
// [Asm] subst   lw v3, _119 ->   lw a1, _119
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f6) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_5.9") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_5.9") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_4.7 ->   lw a0, x_4.7
// [Asm] subst   lw v3, _112 ->   lw a1, _112
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f12) -> v0, Insn(iref=%1) -> v3, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_8.15") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_8.15") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_7.13 ->   lw a0, x_7.13
// [Asm] subst   lw v3, _115 ->   lw a1, _115
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_4.7") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_4.7") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_3.5 ->   lw a0, x_3.5
// [Asm] subst   lw v3, _111 ->   lw a1, _111
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%0) -> v2, Self(fref=f34) -> v0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f0) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_2.3") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_2.3") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, _108 ->   lw a0, _108
// [Asm] subst   lw v3, _109 ->   lw a1, _109
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f31) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main64.126") clobbered_x: @hashset.of([a0])
// [Asm] Label("main64.126") clobbered_f: @hashset.of([])
// [Asm] subst   li v3, 10 ->   li a0, 10
// [Asm] subst   call print39.125 ->   call print39.125
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f10) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_7.13") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_7.13") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_6.11 ->   lw a0, x_6.11
// [Asm] subst   lw v3, _114 ->   lw a1, _114
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f14) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, v2]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("T$x_9.17") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("T$x_9.17") clobbered_f: @hashset.of([])
// [Asm] subst   lw v2, x_8.15 ->   lw a0, x_8.15
// [Asm] subst   lw v3, _116 ->   lw a1, _116
// [Asm] subst   add v4, v2, v3 ->   add a0, a0, a1
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 1, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Asm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v10, Insn(iref=%8) -> v23, Insn(iref=%10) -> v24, Insn(iref=%27) -> v16, Insn(iref=%25) -> v15, Insn(iref=%14) -> v26, Insn(iref=%4) -> v21, Insn(iref=%32) -> v36, Insn(iref=%1) -> v3, Insn(iref=%11) -> v8, Insn(iref=%26) -> v32, Insn(iref=%6) -> v22, Insn(iref=%31) -> v35, FnParam(fref=f30, fpref=$f.0) -> v2, Insn(iref=%28) -> v33, BlockParam(bref=b3, bpref=$b.0) -> v37, Insn(iref=%9) -> v7, Insn(iref=%16) -> v27, Insn(iref=%24) -> v31, BlockParam(bref=b0, bpref=$b.0) -> v18, Insn(iref=%29) -> v17, Insn(iref=%5) -> v5, Insn(iref=%19) -> v12, Insn(iref=%0) -> v19, Insn(iref=%3) -> v4, Insn(iref=%18) -> v28, Insn(iref=%13) -> v9, Self(fref=f30) -> v0, Insn(iref=%7) -> v6, Insn(iref=%22) -> v30, Insn(iref=%17) -> v11, Insn(iref=%23) -> v14, Insn(iref=%2) -> v20, Insn(iref=%20) -> v29, Insn(iref=%30) -> v34, Insn(iref=%21) -> v13, Insn(iref=%12) -> v25
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defs: [v21]
// [Asm] live_set: [v11, v5, v14, v16, v10, v21, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v22, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v23, v8, v4, v6, v15, v3]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v24, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v11, v25, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v26, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v27, v8, v4, v6, v15, v3]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v28, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v29, v8, v4, v6, v15, v3]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v30, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v31, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v32, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v33, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v34, v3]
// [Asm] defined: v34 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v34, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, a0, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move: a0 <- v34
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, a0, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v35]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move: v35 <- a0
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defs: [v36]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v36, v17, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v36 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move: v18 <- v36
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defs: []
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v37
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [a0, zero]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, zero, v4, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, zero, v4, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, zero, v4, v6, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, v7, zero, v4, v6, v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v5, v7, zero, v8, v4, v6, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v5, v7, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v11, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v11, v5, v14, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] move: v18 <- v2
// [Asm] defined: v18 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v37]
// [Asm] move: v37 <- zero
// [Asm] defined: v37 is X
// [Asm] Label("print39.125") clobbered_x: @hashset.of([s7, s8, s9, s4, a0, s1, s2, s5, s0, s3, s10, s6])
// [Asm] Label("print39.125") clobbered_f: @hashset.of([])
// [Asm] subst   sw zero, 0(v3) ->   sw zero, 0(s0)
// [Asm] subst   addi v21, v4, 1 ->   addi a0, s1, 1
// [Asm] subst   add v22, v21, v5 ->   add a0, a0, s3
// [Asm] subst   add v23, v22, v6 ->   add a0, a0, t5
// [Asm] subst   add v24, v23, v7 ->   add a0, a0, s8
// [Asm] subst   add v25, v24, v8 ->   add a0, a0, t5
// [Asm] subst   add v26, v25, v9 ->   add a0, a0, t5
// [Asm] subst   add v27, v26, v10 ->   add a0, a0, s6
// [Asm] subst   add v28, v27, v11 ->   add a0, a0, s2
// [Asm] subst   add v29, v28, v12 ->   add a0, a0, s10
// [Asm] subst   add v30, v29, v13 ->   add a0, a0, s7
// [Asm] subst   add v31, v30, v14 ->   add a0, a0, s4
// [Asm] subst   add v32, v31, v15 ->   add a0, a0, t5
// [Asm] subst   add v33, v32, v16 ->   add a0, a0, s5
// [Asm] subst   add v34, v33, v17 ->   add a0, a0, s9
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   addi v36, v18, -1 ->   addi a0, t5, -1
// [Asm] subst   mv v18, v36 ->   mv t5, a0
// [Asm] subst   j .print39.125_0 ->   j .print39.125_0
// [Asm] subst   beq v18, zero, .print39.125_1 ->   beq t5, zero, .print39.125_1
// [Asm] subst   ret ->   ret
// [Asm] subst   ld v3, dummy.32 ->   ld s0, dummy.32
// [Asm] subst   lw v4, x_2.3 ->   lw s1, x_2.3
// [Asm] subst   lw v5, x_3.5 ->   lw s3, x_3.5
// [Asm] subst   lw v6, x_4.7 ->   lw t5, x_4.7
// [Asm] subst   lw v7, x_5.9 ->   lw s8, x_5.9
// [Asm] subst   lw v8, x_6.11 ->   lw t5, x_6.11
// [Asm] subst   lw v9, x_7.13 ->   lw t5, x_7.13
// [Asm] subst   lw v10, x_8.15 ->   lw s6, x_8.15
// [Asm] subst   lw v11, x_9.17 ->   lw s2, x_9.17
// [Asm] subst   lw v12, x_10.19 ->   lw s10, x_10.19
// [Asm] subst   lw v13, x_11.21 ->   lw s7, x_11.21
// [Asm] subst   lw v14, x_12.23 ->   lw s4, x_12.23
// [Asm] subst   lw v15, x_13.25 ->   lw t5, x_13.25
// [Asm] subst   lw v16, x_14.27 ->   lw s5, x_14.27
// [Asm] subst   lw v17, x_15.29 ->   lw s9, x_15.29
// [Asm] subst   mv v18, v2 ->   mv t5, a0
// [Asm] subst   mv v37, zero ->   mv a0, zero
// [Asm] before colored: # leaf true
// [Asm] T$x_15.29:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_15.29_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_14.27  # live: [v2]
// [Asm]   lw v3, _122  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_6.11:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_6.11_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_5.9  # live: [v2]
// [Asm]   lw v3, _113  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_14.27:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_14.27_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_13.25  # live: [v2]
// [Asm]   lw v3, _121  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_7.13:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_7.13_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_6.11  # live: [v2]
// [Asm]   lw v3, _114  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_13.25:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_13.25_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_12.23  # live: [v2]
// [Asm]   lw v3, _120  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$dummy.32:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, a0, v4, a2, a1, v6, s11, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$dummy.32_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   lw v3, _123  # live: [s11, v3]
// [Asm]   lw v4, _124  # live: [v4, s11, v3]
// [Asm]   slliw v6, v3, 2  # live: [v4, v6, s11, v3]
// [Asm]   sub v2, s11, v6  # live: [v3, v4, v2]
// [Asm]   andi s11, v2, -8  # live: [v3, v4, v2]
// [Asm]   mv a1, v3  # live: [v4, a1, v2]
// [Asm]   mv a0, v2  # live: [v4, a1, a0, v2]
// [Asm]   mv a2, v4  # live: [a2, a1, a0, v2]
// [Asm]   call memseti32  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, t5, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call T$x_2.3  # live: [a0]
// [Asm]   la t5, x_2.3  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_3.5  # live: [a0]
// [Asm]   la t5, x_3.5  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_4.7  # live: [a0]
// [Asm]   la t5, x_4.7  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_5.9  # live: [a0]
// [Asm]   la t5, x_5.9  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_6.11  # live: [a0]
// [Asm]   la t5, x_6.11  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_7.13  # live: [a0]
// [Asm]   la t5, x_7.13  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_8.15  # live: [a0]
// [Asm]   la t5, x_8.15  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_9.17  # live: [a0]
// [Asm]   la t5, x_9.17  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_10.19  # live: [a0]
// [Asm]   la t5, x_10.19  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_11.21  # live: [a0]
// [Asm]   la t5, x_11.21  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_12.23  # live: [a0]
// [Asm]   la t5, x_12.23  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_13.25  # live: [a0]
// [Asm]   la t5, x_13.25  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_14.27  # live: [a0]
// [Asm]   la t5, x_14.27  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$x_15.29  # live: [a0]
// [Asm]   la t5, x_15.29  # live: [t5, a0]
// [Asm]   sw a0, 0(t5)  # live: []
// [Asm]   call T$dummy.32  # live: [a0]
// [Asm]   la t5, dummy.32  # live: [t5, a0]
// [Asm]   sd a0, 0(t5)  # live: []
// [Asm]   call main64.126  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_5.9:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_5.9_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_4.7  # live: [v2]
// [Asm]   lw v3, _112  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] print39.125:
// [Asm] # block info: defs: [v3, v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, v8, v4, v6, v15, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .print39.125_5:
// [Asm]   # save_ctx1  # live: [a0, zero]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm]   ld v3, dummy.32  # live: [v2, zero, v3]
// [Asm]   lw v4, x_2.3  # live: [v2, zero, v4, v3]
// [Asm]   lw v5, x_3.5  # live: [v2, v5, zero, v4, v3]
// [Asm]   lw v6, x_4.7  # live: [v2, v5, zero, v4, v6, v3]
// [Asm]   lw v7, x_5.9  # live: [v2, v5, v7, zero, v4, v6, v3]
// [Asm]   lw v8, x_6.11  # live: [v2, v5, v7, zero, v8, v4, v6, v3]
// [Asm]   lw v9, x_7.13  # live: [v2, v5, v7, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v10, x_8.15  # live: [v2, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v11, x_9.17  # live: [v2, v11, v5, v10, v7, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v12, x_10.19  # live: [v2, v11, v5, v10, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v13, x_11.21  # live: [v2, v11, v5, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v14, x_12.23  # live: [v2, v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v3]
// [Asm]   lw v15, x_13.25  # live: [v2, v11, v5, v14, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v16, x_14.27  # live: [v2, v11, v5, v14, v16, v10, v13, v7, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm]   lw v17, x_15.29  # live: [v2, v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v18, v2  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v18, zero], upward_exposed: [v18, zero], params_defs: [v18]
// [Asm] # live_in: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3], live_out: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: [v18]
// [Asm] .print39.125_0:
// [Asm] # control
// [Asm]   beq v18, zero, .print39.125_1  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v25, t1, v26, v22, v32, ft0, ft1, a1, v28, v33, fa1, fa2, v29, ft6, a4, v27, fa6, a6, ft10, ft5, v34, ft7, ft4, v21, ft9, a5, a0, fa4, v30, v36, ft2, a2, a3, v24, v31, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, v23, v35, fa0, t4, t2], uses: [v25, v14, v16, v13, v26, v22, v7, v32, v12, v28, v33, zero, v29, v27, v8, v4, v6, v34, v11, v5, v10, v21, a0, v30, v36, v17, v24, v31, v9, v18, v23, v15, v3], upward_exposed: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3], params_defs: []
// [Asm] # live_in: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3], live_out: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] # block parameters: []
// [Asm] .print39.125_2:
// [Asm]   sw zero, 0(v3)  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v21, v4, 1  # live: [v11, v5, v14, v16, v10, v21, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v22, v21, v5  # live: [v11, v5, v14, v16, v10, v13, v22, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v23, v22, v6  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v23, v8, v4, v6, v15, v3]
// [Asm]   add v24, v23, v7  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v24, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v25, v24, v8  # live: [v11, v25, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v26, v25, v9  # live: [v11, v5, v14, v16, v10, v13, v26, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v27, v26, v10  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v27, v8, v4, v6, v15, v3]
// [Asm]   add v28, v27, v11  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v28, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v29, v28, v12  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v29, v8, v4, v6, v15, v3]
// [Asm]   add v30, v29, v13  # live: [v11, v5, v14, v16, v10, v13, v30, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v31, v30, v14  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v31, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v32, v31, v15  # live: [v11, v5, v14, v16, v10, v13, v7, v32, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v33, v32, v16  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v33, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   add v34, v33, v17  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v34, v3]
// [Asm]   # save_ctx2  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v34, v3]
// [Asm]   mv a0, v34  # live: [v11, v5, v14, v16, v10, v13, a0, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   call minimbt_print_int  # live: [v11, v5, v14, v16, v10, v13, a0, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   mv v35, a0  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   # restore_ctx2  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   addi v36, v18, -1  # live: [v11, v5, v14, v16, v10, v13, v7, v36, v17, v12, v9, zero, v8, v4, v6, v15, v3]
// [Asm] # control
// [Asm]   mv v18, v36  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm]   j .print39.125_0  # live: [v11, v5, v14, v16, v10, v13, v7, v17, v12, v9, v18, zero, v8, v4, v6, v15, v3]
// [Asm] 
// [Asm] # block info: defs: [v37], uses: [zero], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: [v37]
// [Asm] # block parameters: []
// [Asm] .print39.125_1:
// [Asm] # control
// [Asm]   mv v37, zero  # live: [v37]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v37, a0], upward_exposed: [v37], params_defs: [v37]
// [Asm] # live_in: [v37], live_out: []
// [Asm] # block parameters: [v37]
// [Asm] .print39.125_3:
// [Asm] # control
// [Asm]   mv a0, v37  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_9.17:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_9.17_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_8.15  # live: [v2]
// [Asm]   lw v3, _116  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_4.7:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_4.7_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_3.5  # live: [v2]
// [Asm]   lw v3, _111  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_8.15:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_8.15_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_7.13  # live: [v2]
// [Asm]   lw v3, _115  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_2.3:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_2.3_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, _108  # live: [v2]
// [Asm]   lw v3, _109  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main64.126:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main64.126_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, 10  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call print39.125  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_11.21:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_11.21_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_10.19  # live: [v2]
// [Asm]   lw v3, _118  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_10.19:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_10.19_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_9.17  # live: [v2]
// [Asm]   lw v3, _117  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_3.5:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_3.5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_2.3  # live: [v2]
// [Asm]   lw v3, _110  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$x_12.23:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$x_12.23_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, x_11.21  # live: [v2]
// [Asm]   lw v3, _119  # live: [v3, v2]
// [Asm]   add v4, v2, v3  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _123:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_9.17:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_3.5:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_14.27:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_15.29:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _110:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_7.13:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_6.11:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _117:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _115:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _111:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _113:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_4.7:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _114:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _118:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _124:
// [Asm]   .word 0
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_13.25:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _120:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_2.3:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_11.21:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _116:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _109:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _108:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_10.19:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _119:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_8.15:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_5.9:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _121:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] dummy.32:
// [Asm]   .zero 8
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _112:
// [Asm]   .word 1
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] x_12.23:
// [Asm]   .zero 4
// [Asm]   .p2align 2
// [Asm]   .rodata
// [Asm] _122:
// [Asm]   .word 1
// [Asm] 
// [Knf] build_knf: Let(("x_1", Int), Int(1), Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=Some(Int)), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=Some(Int)), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=Some(Int)), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=Some(Int)), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=Some(Int)), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))))))))))))))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=Some(Int)), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=Some(Int)), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=Some(Int)), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=Some(Int)), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=Some(Int)), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))))))))))))))
// [Knf] build_knf: Prim(Var("x_1"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_1")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=Some(Int)), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=Some(Int)), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=Some(Int)), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=Some(Int)), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))))))))))))
// [Knf] build_knf: Prim(Var("x_2"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_2")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=Some(Int)), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=Some(Int)), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=Some(Int)), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))))))))))))
// [Knf] build_knf: Prim(Var("x_3"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_3")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=Some(Int)), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=Some(Int)), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))))))))))
// [Knf] build_knf: Prim(Var("x_4"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_4")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=Some(Int)), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))))))))))
// [Knf] build_knf: Prim(Var("x_5"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_5")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=Some(Int)), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))))))))
// [Knf] build_knf: Prim(Var("x_6"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_6")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=Some(Int)), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))))))))
// [Knf] build_knf: Prim(Var("x_7"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_7")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=Some(Int)), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))))))
// [Knf] build_knf: Prim(Var("x_8"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_8")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=Some(Int)), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))))))
// [Knf] build_knf: Prim(Var("x_9"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_9")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=Some(Int)), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))))
// [Knf] build_knf: Prim(Var("x_10"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_10")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=Some(Int)), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))))
// [Knf] build_knf: Prim(Var("x_11"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_11")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=Some(Int)), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))))
// [Knf] build_knf: Prim(Var("x_12"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_12")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=Some(Int)), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))))
// [Knf] build_knf: Prim(Var("x_13"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_13")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=Some(Int)), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))))
// [Knf] build_knf: Prim(Var("x_14"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_14")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("dummy"), Int(0), Int(0)), Unit)
// [Knf] build_knf: Put(Var("dummy"), Int(0), Int(0))
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Var("placeholder")
// [Knf] build_knf: LetRec({name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), [])))
// [Knf] build_knf: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])))
// [Knf] build_knf: App(App(Var("do_nothing"), []), [])
// [Knf] build_knf: App(Var("do_nothing"), [])
// [Knf] build_knf: Var("do_nothing")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))])
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int)), Var("x_15"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int)), Var("x_14"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int)), Var("x_13"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int)), Var("x_12"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int)), Var("x_11"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int)), Var("x_10"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int)), Var("x_9"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int)), Var("x_8"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int)), Var("x_7"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int)), Var("x_6"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int)), Var("x_5"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int)), Var("x_4"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int)), Var("x_3"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("x_1"), Var("x_2"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x_1")
// [Knf] build_knf: Var("x_2")
// [Knf] build_knf: Var("x_3")
// [Knf] build_knf: Var("x_4")
// [Knf] build_knf: Var("x_5")
// [Knf] build_knf: Var("x_6")
// [Knf] build_knf: Var("x_7")
// [Knf] build_knf: Var("x_8")
// [Knf] build_knf: Var("x_9")
// [Knf] build_knf: Var("x_10")
// [Knf] build_knf: Var("x_11")
// [Knf] build_knf: Var("x_12")
// [Knf] build_knf: Var("x_13")
// [Knf] build_knf: Var("x_14")
// [Knf] build_knf: Var("x_15")
// [Knf] build_knf: App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("print")
// [Knf] build_knf: Prim(Var("n"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print"), [Int(10)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print"), [Int(10)])
// [Knf] build_knf: Var("print")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce _43 = placeholder34.66
// [Main] top int reduce x_1.1 = Int(1)
// [Main] top int reduce _2 = Int(1)
// [Main] top int reduce _4 = Int(1)
// [Main] top int reduce _6 = Int(1)
// [Main] top int reduce _8 = Int(1)
// [Main] top int reduce _10 = Int(1)
// [Main] top int reduce _12 = Int(1)
// [Main] top int reduce _14 = Int(1)
// [Main] top int reduce _16 = Int(1)
// [Main] top int reduce _18 = Int(1)
// [Main] top int reduce _20 = Int(1)
// [Main] top int reduce _22 = Int(1)
// [Main] top int reduce _24 = Int(1)
// [Main] top int reduce _26 = Int(1)
// [Main] top int reduce _28 = Int(1)
// [Main] top int reduce _30 = Int(1)
// [Main] top int reduce _31 = Int(0)
// [Main] top int reduce _70 = Int(1)
// [Main] top int reduce _71 = Int(1)
// [Main] top int reduce _72 = Int(1)
// [Main] top int reduce _73 = Int(1)
// [Main] top int reduce _74 = Int(1)
// [Main] top int reduce _75 = Int(1)
// [Main] top int reduce _76 = Int(1)
// [Main] top int reduce _77 = Int(1)
// [Main] top int reduce _78 = Int(1)
// [Main] top int reduce _79 = Int(1)
// [Main] top int reduce _80 = Int(1)
// [Main] top int reduce _81 = Int(1)
// [Main] top int reduce _82 = Int(1)
// [Main] top int reduce _83 = Int(1)
// [Main] top int reduce _84 = Int(1)
// [Main] top int reduce _85 = Int(1)
// [Main] top int reduce _86 = Int(0)
// [Main] top int reduce _91 = Int(1)
// [Main] top int reduce _92 = Int(1)
// [Main] top int reduce _93 = Int(1)
// [Main] top int reduce _94 = Int(1)
// [Main] top int reduce _95 = Int(1)
// [Main] top int reduce _96 = Int(1)
// [Main] top int reduce _97 = Int(1)
// [Main] top int reduce _98 = Int(1)
// [Main] top int reduce _99 = Int(1)
// [Main] top int reduce _100 = Int(1)
// [Main] top int reduce _101 = Int(1)
// [Main] top int reduce _102 = Int(1)
// [Main] top int reduce _103 = Int(1)
// [Main] top int reduce _104 = Int(1)
// [Main] top int reduce _105 = Int(1)
// [Main] top int reduce _106 = Int(1)
// [Main] top int reduce _107 = Int(0)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl memseti32
// [Main]   .type memseti32, @function
// [Main] memseti32:
// [Main]   blez a1, .memseti32_b1
// [Main]   slli a1, a1, 2
// [Main]   add a1, a1, a0
// [Main] .memseti32_b0:
// [Main]   sw a2, 0(a0)
// [Main]   addi a0, a0, 4
// [Main]   bne a0, a1, .memseti32_b0
// [Main] .memseti32_b1:
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_15.29
// [Main]   .type T$x_15.29, @function
// [Main] # leaf true
// [Main] T$x_15.29:
// [Main] .T$x_15.29_0:
// [Main]   lw a0, x_14.27
// [Main]   lw a1, _122
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_6.11
// [Main]   .type T$x_6.11, @function
// [Main] # leaf true
// [Main] T$x_6.11:
// [Main] .T$x_6.11_0:
// [Main]   lw a0, x_5.9
// [Main]   lw a1, _113
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_14.27
// [Main]   .type T$x_14.27, @function
// [Main] # leaf true
// [Main] T$x_14.27:
// [Main] .T$x_14.27_0:
// [Main]   lw a0, x_13.25
// [Main]   lw a1, _121
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_7.13
// [Main]   .type T$x_7.13, @function
// [Main] # leaf true
// [Main] T$x_7.13:
// [Main] .T$x_7.13_0:
// [Main]   lw a0, x_6.11
// [Main]   lw a1, _114
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_13.25
// [Main]   .type T$x_13.25, @function
// [Main] # leaf true
// [Main] T$x_13.25:
// [Main] .T$x_13.25_0:
// [Main]   lw a0, x_12.23
// [Main]   lw a1, _120
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$dummy.32
// [Main]   .type T$dummy.32, @function
// [Main] # leaf false
// [Main] T$dummy.32:
// [Main] .T$dummy.32_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   lw a0, _123
// [Main]   lw a2, _124
// [Main]   slliw a1, a0, 2
// [Main]   sub s0, s11, a1
// [Main]   andi s11, s0, -8
// [Main]   mv a1, a0
// [Main]   mv a0, s0
// [Main]   call memseti32
// [Main]   mv a0, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call T$x_2.3
// [Main]   la t5, x_2.3
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_3.5
// [Main]   la t5, x_3.5
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_4.7
// [Main]   la t5, x_4.7
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_5.9
// [Main]   la t5, x_5.9
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_6.11
// [Main]   la t5, x_6.11
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_7.13
// [Main]   la t5, x_7.13
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_8.15
// [Main]   la t5, x_8.15
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_9.17
// [Main]   la t5, x_9.17
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_10.19
// [Main]   la t5, x_10.19
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_11.21
// [Main]   la t5, x_11.21
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_12.23
// [Main]   la t5, x_12.23
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_13.25
// [Main]   la t5, x_13.25
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_14.27
// [Main]   la t5, x_14.27
// [Main]   sw a0, 0(t5)
// [Main]   call T$x_15.29
// [Main]   la t5, x_15.29
// [Main]   sw a0, 0(t5)
// [Main]   call T$dummy.32
// [Main]   la t5, dummy.32
// [Main]   sd a0, 0(t5)
// [Main]   call main64.126
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_5.9
// [Main]   .type T$x_5.9, @function
// [Main] # leaf true
// [Main] T$x_5.9:
// [Main] .T$x_5.9_0:
// [Main]   lw a0, x_4.7
// [Main]   lw a1, _112
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl print39.125
// [Main]   .type print39.125, @function
// [Main] # leaf false
// [Main] print39.125:
// [Main] .print39.125_5:
// [Main]   addi sp, sp, -144
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   ld s0, dummy.32
// [Main]   lw s1, x_2.3
// [Main]   lw s3, x_3.5
// [Main]   lw t5, x_4.7
// [Main]   sw t5, 120(sp)
// [Main]   lw s8, x_5.9
// [Main]   lw t5, x_6.11
// [Main]   sw t5, 112(sp)
// [Main]   lw t5, x_7.13
// [Main]   sw t5, 96(sp)
// [Main]   lw s6, x_8.15
// [Main]   lw s2, x_9.17
// [Main]   lw s10, x_10.19
// [Main]   lw s7, x_11.21
// [Main]   lw s4, x_12.23
// [Main]   lw t5, x_13.25
// [Main]   sw t5, 128(sp)
// [Main]   lw s5, x_14.27
// [Main]   lw s9, x_15.29
// [Main]   mv t5, a0
// [Main]   sw t5, 104(sp)
// [Main] 
// [Main] .print39.125_0:
// [Main]   lw t5, 104(sp)
// [Main]   beq t5, zero, .print39.125_1
// [Main] 
// [Main] .print39.125_2:
// [Main]   sw zero, 0(s0)
// [Main]   addi a0, s1, 1
// [Main]   add a0, a0, s3
// [Main]   lw t5, 120(sp)
// [Main]   add a0, a0, t5
// [Main]   add a0, a0, s8
// [Main]   lw t5, 112(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 96(sp)
// [Main]   add a0, a0, t5
// [Main]   add a0, a0, s6
// [Main]   add a0, a0, s2
// [Main]   add a0, a0, s10
// [Main]   add a0, a0, s7
// [Main]   add a0, a0, s4
// [Main]   lw t5, 128(sp)
// [Main]   add a0, a0, t5
// [Main]   add a0, a0, s5
// [Main]   add a0, a0, s9
// [Main]   call minimbt_print_int
// [Main]   lw t5, 104(sp)
// [Main]   addi t5, t5, -1
// [Main]   sw t5, 104(sp)
// [Main]   j .print39.125_0
// [Main] 
// [Main] .print39.125_1:
// [Main]   mv a0, zero
// [Main] 
// [Main] .print39.125_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 144
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_9.17
// [Main]   .type T$x_9.17, @function
// [Main] # leaf true
// [Main] T$x_9.17:
// [Main] .T$x_9.17_0:
// [Main]   lw a0, x_8.15
// [Main]   lw a1, _116
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_4.7
// [Main]   .type T$x_4.7, @function
// [Main] # leaf true
// [Main] T$x_4.7:
// [Main] .T$x_4.7_0:
// [Main]   lw a0, x_3.5
// [Main]   lw a1, _111
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_8.15
// [Main]   .type T$x_8.15, @function
// [Main] # leaf true
// [Main] T$x_8.15:
// [Main] .T$x_8.15_0:
// [Main]   lw a0, x_7.13
// [Main]   lw a1, _115
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_2.3
// [Main]   .type T$x_2.3, @function
// [Main] # leaf true
// [Main] T$x_2.3:
// [Main] .T$x_2.3_0:
// [Main]   lw a0, _108
// [Main]   lw a1, _109
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main64.126
// [Main]   .type main64.126, @function
// [Main] # leaf false
// [Main] main64.126:
// [Main] .main64.126_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 10
// [Main]   call print39.125
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_11.21
// [Main]   .type T$x_11.21, @function
// [Main] # leaf true
// [Main] T$x_11.21:
// [Main] .T$x_11.21_0:
// [Main]   lw a0, x_10.19
// [Main]   lw a1, _118
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_10.19
// [Main]   .type T$x_10.19, @function
// [Main] # leaf true
// [Main] T$x_10.19:
// [Main] .T$x_10.19_0:
// [Main]   lw a0, x_9.17
// [Main]   lw a1, _117
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_3.5
// [Main]   .type T$x_3.5, @function
// [Main] # leaf true
// [Main] T$x_3.5:
// [Main] .T$x_3.5_0:
// [Main]   lw a0, x_2.3
// [Main]   lw a1, _110
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$x_12.23
// [Main]   .type T$x_12.23, @function
// [Main] # leaf true
// [Main] T$x_12.23:
// [Main] .T$x_12.23_0:
// [Main]   lw a0, x_11.21
// [Main]   lw a1, _119
// [Main]   add a0, a0, a1
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _123
// [Main]   .type _123, @object
// [Main] _123:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_9.17
// [Main]   .type x_9.17, @object
// [Main] x_9.17:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_3.5
// [Main]   .type x_3.5, @object
// [Main] x_3.5:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_14.27
// [Main]   .type x_14.27, @object
// [Main] x_14.27:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_15.29
// [Main]   .type x_15.29, @object
// [Main] x_15.29:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _110
// [Main]   .type _110, @object
// [Main] _110:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_7.13
// [Main]   .type x_7.13, @object
// [Main] x_7.13:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_6.11
// [Main]   .type x_6.11, @object
// [Main] x_6.11:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _117
// [Main]   .type _117, @object
// [Main] _117:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _115
// [Main]   .type _115, @object
// [Main] _115:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _111
// [Main]   .type _111, @object
// [Main] _111:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _113
// [Main]   .type _113, @object
// [Main] _113:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_4.7
// [Main]   .type x_4.7, @object
// [Main] x_4.7:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _114
// [Main]   .type _114, @object
// [Main] _114:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _118
// [Main]   .type _118, @object
// [Main] _118:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _124
// [Main]   .type _124, @object
// [Main] _124:
// [Main]   .word 0
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_13.25
// [Main]   .type x_13.25, @object
// [Main] x_13.25:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _120
// [Main]   .type _120, @object
// [Main] _120:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_2.3
// [Main]   .type x_2.3, @object
// [Main] x_2.3:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_11.21
// [Main]   .type x_11.21, @object
// [Main] x_11.21:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _116
// [Main]   .type _116, @object
// [Main] _116:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _109
// [Main]   .type _109, @object
// [Main] _109:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _108
// [Main]   .type _108, @object
// [Main] _108:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_10.19
// [Main]   .type x_10.19, @object
// [Main] x_10.19:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _119
// [Main]   .type _119, @object
// [Main] _119:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_8.15
// [Main]   .type x_8.15, @object
// [Main] x_8.15:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_5.9
// [Main]   .type x_5.9, @object
// [Main] x_5.9:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _121
// [Main]   .type _121, @object
// [Main] _121:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl dummy.32
// [Main]   .type dummy.32, @object
// [Main] dummy.32:
// [Main]   .zero 8
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _112
// [Main]   .type _112, @object
// [Main] _112:
// [Main]   .word 1
// [Main] 
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl x_12.23
// [Main]   .type x_12.23, @object
// [Main] x_12.23:
// [Main]   .zero 4
// [Main] 
// [Main]   .p2align 2
// [Main]   .rodata
// [Main]   .globl _122
// [Main]   .type _122, @object
// [Main] _122:
// [Main]   .word 1
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_6.11
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::8)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::9)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_6.11 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$dummy.32
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::29)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::30)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Init(val=Insn(iref=%1))])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Mem(fref=f28, mref=m0) -> $f28.m0
// [Wasm] Lowering control Return(args=[Mem(fref=f28, mref=m0)])
// [Wasm] Get Local name Mem(fref=f28, mref=m0) -> $f28.m0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Mem(fref=f28, mref=m0) -> $f28.m0
// [Wasm] Lowered function T$dummy.32 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_10.19
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::16)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::17)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_10.19 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_15.29
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::26)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::27)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_15.29 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_3.5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::3)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_3.5 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_11.21
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::18)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::19)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_11.21 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_14.27
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::24)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::25)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_14.27 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_13.25
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::22)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::23)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_13.25 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_12.23
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::20)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::21)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_12.23 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_5.9
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::6)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::7)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_5.9 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_8.15
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::12)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::13)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_8.15 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_4.7
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::4)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::5)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_4.7 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f31, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_2.3
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_2.3 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main64.126
// [Wasm] Lowering insn Call(ty=Unit, f=f30, args=[Int32(val=10)])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function main64.126 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_7.13
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::10)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::11)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_7.13 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$x_9.17
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::14)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::15)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function T$x_9.17 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 1, 3]
// [Wasm] LoweringOrder: [[4], [1, 2], [0], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b1, 1), (b5, 0), (b2, 0), (b3, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b2, b1, b3]
// [Wasm] LoweringOrder: HashMap::of([(b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 1)])
// [Wasm] Lowering function print39.125
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=Insn(iref=%1), index=0, width=@32), val=Int32(val=0))
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%10), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%12), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%14), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%16), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%18), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%20), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%22), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%24), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%26), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%28), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Array(elem=Int32), sref=::31)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::2)
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::4)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::6)
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::8)
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::10)
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::12)
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::14)
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::16)
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::18)
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::20)
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::22)
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::24)
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::26)
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::28)
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f30, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f30, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f30, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function print39.125 to wasm
// [KnfOpt] freq: {do_nothing33: Once, placeholder34: AsClosure, print39: Many(2), main64: Once}
// [KnfOpt] Knf inline Some(do_nothing33)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 43
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {print39: Many(2), placeholder34.66: Once, main64: Once}
// [KnfOpt] Knf inline Some(placeholder34)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 51
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 57
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {print39: Many(2), main64: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 49
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 49
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %33: Call(ty=Unit, f=f30, args=[Insn(iref=%32)])
// [CoreOpt] Call frequnce: FnCallFreq({f8: Once, f28: Once, f16: Once, f26: Once, f2: Once, f18: Once, f24: Once, f22: Once, f20: Once, f6: Once, f12: Once, f4: Once, f34: Once, f0: Once, f31: Once, f10: Once, f14: Once, f30: Once})
// [CoreOpt] allow_inline: false %0 main64.126 false true true true true
// [CoreOpt] allow_inline: false %0 print39.125 false true true false true
// [CoreOpt] allow_inline: false %0 main64.126 false true true true true
// [CoreOpt] allow_inline: false %0 print39.125 false true true false true
// [CoreOpt] allow_inline: false %0 main64.126 false true true true true
// [CoreOpt] allow_inline: false %0 print39.125 false true true false true
// [CoreOpt] allow_inline: false %0 main64.126 false true true true true
// [CoreOpt] allow_inline: false %0 print39.125 false true true false true
// [CoreOpt] allow_inline: false %0 main64.126 false true true true true
// [CoreOpt] allow_inline: false %0 print39.125 false true true false true
// [CoreOpt] allow_inline: false %0 main64.126 false true true true true
// [CoreOpt] allow_inline: false %0 print39.125 false true true false true
