// [Main] function thunk_main(k) {
// [Main]   const x_1_1 = 1;
// [Main]   const _2 = 1;
// [Main]   const x_2_3 = x_1_1 + _2;
// [Main]   const _4 = 1;
// [Main]   const x_3_5 = x_2_3 + _4;
// [Main]   const _6 = 1;
// [Main]   const x_4_7 = x_3_5 + _6;
// [Main]   const _8 = 1;
// [Main]   const x_5_9 = x_4_7 + _8;
// [Main]   const _10 = 1;
// [Main]   const x_6_11 = x_5_9 + _10;
// [Main]   const _12 = 1;
// [Main]   const x_7_13 = x_6_11 + _12;
// [Main]   const _14 = 1;
// [Main]   const x_8_15 = x_7_13 + _14;
// [Main]   const _16 = 1;
// [Main]   const x_9_17 = x_8_15 + _16;
// [Main]   const _18 = 1;
// [Main]   const x_10_19 = x_9_17 + _18;
// [Main]   const _20 = 1;
// [Main]   const x_11_21 = x_10_19 + _20;
// [Main]   const _22 = 1;
// [Main]   const x_12_23 = x_11_21 + _22;
// [Main]   const _24 = 1;
// [Main]   const x_13_25 = x_12_23 + _24;
// [Main]   const _26 = 1;
// [Main]   const x_14_27 = x_13_25 + _26;
// [Main]   const _28 = 1;
// [Main]   const x_15_29 = x_14_27 + _28;
// [Main]   const _30 = 1;
// [Main]   const _31 = 0;
// [Main]   const dummy_32 = minimbt_create_array($force(_30), $force(_31));
// [Main]   function do_nothing_33(k) {
// [Main]     function placeholder_34(k) {
// [Main]       const _35 = 0;
// [Main]       const _36 = 0;
// [Main]       const _38 = dummy_32[_35] = _36;
// [Main]       return k(null)
// [Main]     }
// [Main]     return k(placeholder_34)
// [Main]   }
// [Main]   function print_39(n_41, k) {
// [Main]     const _42 = 0;
// [Main]     if (n_41 === _42) {
// [Main]       return k(null)
// [Main]     } else {
// [Main]       return $thunk(() => do_nothing_33(function (_43) {
// [Main]         return $thunk(() => _43(function (_45) {
// [Main]           const _46 = x_1_1 + x_2_3;
// [Main]           const _47 = _46 + x_3_5;
// [Main]           const _48 = _47 + x_4_7;
// [Main]           const _49 = _48 + x_5_9;
// [Main]           const _50 = _49 + x_6_11;
// [Main]           const _51 = _50 + x_7_13;
// [Main]           const _52 = _51 + x_8_15;
// [Main]           const _53 = _52 + x_9_17;
// [Main]           const _54 = _53 + x_10_19;
// [Main]           const _55 = _54 + x_11_21;
// [Main]           const _56 = _55 + x_12_23;
// [Main]           const _57 = _56 + x_13_25;
// [Main]           const _58 = _57 + x_14_27;
// [Main]           const _59 = _58 + x_15_29;
// [Main]           const _61 = minimbt_print_int($force(_59));
// [Main]           const _62 = 1;
// [Main]           const _63 = n_41 - _62;
// [Main]           return $thunk(() => print_39(_63, k))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_64(k) {
// [Main]     const _65 = 10;
// [Main]     return $thunk(() => print_39(_65, k))
// [Main]   }
// [Main]   return $thunk(() => main_64(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: Let(("x_1", Int), Int(1), Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=None), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))))))))))))))) against Unit
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_2", Int), Prim(Var("x_1"), Int(1), Add, kind=None), Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_1"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_1") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_3", Int), Prim(Var("x_2"), Int(1), Add, kind=None), Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_2"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_4", Int), Prim(Var("x_3"), Int(1), Add, kind=None), Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_3"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_5", Int), Prim(Var("x_4"), Int(1), Add, kind=None), Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))))))))))) against Unit
// [Typer] check: Prim(Var("x_4"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_4") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_6", Int), Prim(Var("x_5"), Int(1), Add, kind=None), Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))))))))))) against Unit
// [Typer] check: Prim(Var("x_5"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_5") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_7", Int), Prim(Var("x_6"), Int(1), Add, kind=None), Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))))))))) against Unit
// [Typer] check: Prim(Var("x_6"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_6") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_8", Int), Prim(Var("x_7"), Int(1), Add, kind=None), Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))))))))) against Unit
// [Typer] check: Prim(Var("x_7"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_7") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_9", Int), Prim(Var("x_8"), Int(1), Add, kind=None), Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))))))) against Unit
// [Typer] check: Prim(Var("x_8"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_8") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_10", Int), Prim(Var("x_9"), Int(1), Add, kind=None), Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))))))) against Unit
// [Typer] check: Prim(Var("x_9"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_9") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_11", Int), Prim(Var("x_10"), Int(1), Add, kind=None), Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))))) against Unit
// [Typer] check: Prim(Var("x_10"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_10") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_12", Int), Prim(Var("x_11"), Int(1), Add, kind=None), Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))))) against Unit
// [Typer] check: Prim(Var("x_11"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_13", Int), Prim(Var("x_12"), Int(1), Add, kind=None), Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))))) against Unit
// [Typer] check: Prim(Var("x_12"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_14", Int), Prim(Var("x_13"), Int(1), Add, kind=None), Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))))) against Unit
// [Typer] check: Prim(Var("x_13"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("x_15", Int), Prim(Var("x_14"), Int(1), Add, kind=None), Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))))) against Unit
// [Typer] check: Prim(Var("x_14"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x_14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: Let(("dummy", Array(Int)), Array(Int(1), Int(0)), LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)))) against Unit
// [Typer] check: Array(Int(1), Int(0)) against Array(Int)
// [Typer] check: Int(0) against Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("do_nothing", Fun([], Unit)), args: [], body: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder"))}, LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("placeholder", Unit), args: [], body: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit)}, Var("placeholder")) against Fun([], Unit)
// [Typer] typevars: []
// [Typer] check: Let(("_", Var({val: None})), Put(Var("dummy"), Int(0), Int(0)), Unit) against Unit
// [Typer] infer: Put(Var("dummy"), Int(0), Int(0))
// [Typer] infer: Int(0)
// [Typer] check: Var("dummy") against Array(Int)
// [Typer] inst: TypeScheme(([], Array(Int)))
// [Typer] inst result: Array(Int)
// [Typer] unify: Array(Int) and Array(Int)
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: Var("placeholder") against Fun([], Unit)
// [Typer] inst: TypeScheme(([], Fun([], Unit)))
// [Typer] inst result: Fun([], Unit)
// [Typer] unify: Fun([], Unit) and Fun([], Unit)
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("print", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))))}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("n"), Int(0)), Unit, Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)])))) against Unit
// [Typer] check: Eq(Var("n"), Int(0)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Unit against Unit
// [Typer] check: Let(("_", Var({val: None})), App(App(Var("do_nothing"), []), []), Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]))) against Unit
// [Typer] infer: App(App(Var("do_nothing"), []), [])
// [Typer] infer: App(Var("do_nothing"), [])
// [Typer] infer: Var("do_nothing")
// [Typer] inst: TypeScheme(([], Fun([], Fun([], Unit))))
// [Typer] inst result: Fun([], Fun([], Unit))
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: Let(("_", Var({val: None})), App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)]), App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)])) against Unit
// [Typer] infer: App(Var("print_int"), [Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None)])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None), Var("x_15"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None), Var("x_14"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None), Var("x_13"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None), Var("x_12"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None), Var("x_11"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None), Var("x_10"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None), Var("x_9"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None), Var("x_8"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None), Var("x_7"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None), Var("x_6"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None), Var("x_5"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None), Var("x_4"), Add, kind=None) against Int
// [Typer] check: Prim(Prim(Var("x_1"), Var("x_2"), Add, kind=None), Var("x_3"), Add, kind=None) against Int
// [Typer] check: Prim(Var("x_1"), Var("x_2"), Add, kind=None) against Int
// [Typer] check: Var("x_1") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_2") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_3") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_4") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_5") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_6") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_7") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_8") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_9") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_10") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_11") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_12") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_13") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_14") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x_15") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Unit
// [Typer] union: Var({val: None}) and Unit
// [Typer] check: App(Var("print"), [Prim(Var("n"), Int(1), Sub, kind=None)]) against Unit
// [Typer] infer: Prim(Var("n"), Int(1), Sub, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("print") against Fun([Int], Unit)
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Unit)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: App(Var("print"), [Int(10)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print"), [Int(10)])
// [Typer] infer: Var("print")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Int(10) against Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
