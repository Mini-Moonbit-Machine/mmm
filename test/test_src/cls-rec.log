// [Main] function thunk_main(k) {
// [Main]   const x_1 = 10;
// [Main]   function f_2(y_4, k) {
// [Main]     const _5 = 0;
// [Main]     if (y_4 === _5) {
// [Main]       return $thunk(() => k(0))
// [Main]     } else {
// [Main]       const _6 = 1;
// [Main]       const _7 = y_4 - _6;
// [Main]       return $thunk(() => f_2(_7, function (_8) {
// [Main]         return $thunk(() => k(x_1 + _8))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_9(k) {
// [Main]     const _10 = 12;
// [Main]     return $thunk(() => f_2(_10, function (_11) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       , _11))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_9(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: Let(("x", Int), Int(10), LetRec({tyvars: [], name: ("f", Int), args: [("y", Int)], body: If(Eq(Var("y"), Int(0)), Int(0), Prim(Var("x"), App(Var("f"), [Prim(Var("y"), Int(1), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(12)])])}, Unit))) against Unit
// [Typer] check: Int(10) against Int
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("y", Int)], body: If(Eq(Var("y"), Int(0)), Int(0), Prim(Var("x"), App(Var("f"), [Prim(Var("y"), Int(1), Sub, kind=None)]), Add, kind=None))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(12)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("y"), Int(0)), Int(0), Prim(Var("x"), App(Var("f"), [Prim(Var("y"), Int(1), Sub, kind=None)]), Add, kind=None)) against Int
// [Typer] check: Eq(Var("y"), Int(0)) against Bool
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Int(0) against Int
// [Typer] check: Prim(Var("x"), App(Var("f"), [Prim(Var("y"), Int(1), Sub, kind=None)]), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("f"), [Prim(Var("y"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("y"), Int(1), Sub, kind=None)
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("f") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(12)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("f"), [Int(12)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), [Int(12)]) against Int
// [Typer] infer: Int(12)
// [Typer] check: Var("f") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
