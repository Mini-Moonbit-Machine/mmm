let rec return_i_d: () -> (Int, Double) {
  Tuple([Int(1), Double(2), ])
}
let rec return_i_d_i: () -> (Int, Double, Int) {
  Tuple([Int(1), Double(2), Int(3), ])
}
let rec return_d_i_i: () -> (Double, Int, Int) {
  Tuple([Double(2), Int(3), Int(4), ])
}
let rec return_i_i_i: () -> (Int, Int, Int) {
  Tuple([Int(1), Int(2), Int(3), ])
}
let rec main: () -> Unit {
  let (i: Int, d: Double) = App(Var("return_i_d"), targs=Some([]), [])
  let _: Unit = Apply[](Var("print_int"), [Var("i"), ])
  let _: Unit = Apply[](Var("print_int"), [App(Var("int_of_float"), targs=Some([]), [Var("d")]), ])
  let (i: Int, d: Double, i2: Int) = App(Var("return_i_d_i"), targs=Some([]), [])
  let _: Unit = Apply[](Var("print_int"), [Var("i"), ])
  let _: Unit = Apply[](Var("print_int"), [App(Var("int_of_float"), targs=Some([]), [Var("d")]), ])
  let _: Unit = Apply[](Var("print_int"), [Var("i2"), ])
  let (d: Double, i: Int, i2: Int) = App(Var("return_d_i_i"), targs=Some([]), [])
  let _: Unit = Apply[](Var("print_int"), [App(Var("int_of_float"), targs=Some([]), [Var("d")]), ])
  let _: Unit = Apply[](Var("print_int"), [Var("i"), ])
  let _: Unit = Apply[](Var("print_int"), [Var("i2"), ])
  let (i: Int, i2: Int, i3: Int) = App(Var("return_i_i_i"), targs=Some([]), [])
  let _: Unit = Apply[](Var("print_int"), [Var("i"), ])
  let _: Unit = Apply[](Var("print_int"), [Var("i2"), ])
  let _: Unit = Apply[](Var("print_int"), [Var("i3"), ])
  Unit
}
Unit
