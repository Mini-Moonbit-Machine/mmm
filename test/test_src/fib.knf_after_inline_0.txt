let rec fib1: Int = (n2.3: Int) {
  let _4: Int = Int(1)
  if (n2.3 <= _4) then {
    Var(n2.3)
  } else {
    let _5: Int = Int(1)
    let _6: Int = Sub(n2.3, _5)
    let _7: Int = 
      let _14: Int = Int(1)
      if (_6 <= _14) then {
        Var(_6)
      } else {
        let _15: Int = Int(1)
        let _16: Int = Sub(_6, _15)
        let _17: Int = Apply(fib1, [_16, ])
        let _18: Int = Int(2)
        let _19: Int = Sub(_6, _18)
        let _20: Int = Apply(fib1, [_19, ])
        Add(_17, _20)
      }
    let _8: Int = Int(2)
    let _9: Int = Sub(n2.3, _8)
    let _10: Int = 
      let _21: Int = Int(1)
      if (_9 <= _21) then {
        Var(_9)
      } else {
        let _22: Int = Int(1)
        let _23: Int = Sub(_9, _22)
        let _24: Int = Apply(fib1, [_23, ])
        let _25: Int = Int(2)
        let _26: Int = Sub(_9, _25)
        let _27: Int = Apply(fib1, [_26, ])
        Add(_24, _27)
      }
    Add(_7, _10)
  }
}
let rec main11: Var({val: Some(Unit)}) = () {
  let _12: Int = Int(30)
  let _13: Int = 
    let _28: Int = Int(1)
    if (_12 <= _28) then {
      Var(_12)
    } else {
      let _29: Int = Int(1)
      let _30: Int = Sub(_12, _29)
      let _31: Int = Apply(fib1, [_30, ])
      let _32: Int = Int(2)
      let _33: Int = Sub(_12, _32)
      let _34: Int = Apply(fib1, [_33, ])
      Add(_31, _34)
    }
  ExtApply(minimbt_print_int, [_13, ])
}
Apply(main11, [])