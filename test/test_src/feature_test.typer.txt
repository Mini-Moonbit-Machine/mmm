let rec main: () -> Var(Unit) {
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Add, kind=Some(Double))]), ])
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Sub, kind=Some(Double))]), ])
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Mul, kind=Some(Double))]), ])
  let _: Var(Unit) = Apply(Var("print_int"), [App(Var("int_of_float"), [Prim(Double(1), Double(2), Div, kind=Some(Double))]), ])
  let _: Var(Unit) = if (LE(Double(1), Double(2))) then {
    Apply(Var("print_int"), [Int(1), ])
  } else {
    Apply(Var("print_int"), [Int(0), ])
  }
  if (Eq(Double(1), Double(1))) then {
    Apply(Var("print_int"), [Int(1), ])
  } else {
    Apply(Var("print_int"), [Int(0), ])
  }
}
Unit
