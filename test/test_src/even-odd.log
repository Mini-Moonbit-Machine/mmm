// [Main] function thunk_main(k) {
// [Main]   const t_1 = 123;
// [Main]   const f_2 = 456;
// [Main]   function even_3(x_5, k) {
// [Main]     function odd_6(x_8, k) {
// [Main]       const _9 = 0;
// [Main]       if (_9 <= x_8) {
// [Main]         const _10 = 0;
// [Main]         if (x_8 === _10) {
// [Main]           return $thunk(() => k(f_2))
// [Main]         } else {
// [Main]           const _11 = 1;
// [Main]           const _12 = x_8 - _11;
// [Main]           return $thunk(() => even_3(_12, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]       } else {
// [Main]         const _13 = 1;
// [Main]         const _14 = x_8 + _13;
// [Main]         return $thunk(() => even_3(_14, function (x) {
// [Main]           return $thunk(() => k(x))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]     }
// [Main]     const _15 = 0;
// [Main]     if (_15 <= x_5) {
// [Main]       const _16 = 0;
// [Main]       if (x_5 === _16) {
// [Main]         return $thunk(() => k(t_1))
// [Main]       } else {
// [Main]         const _17 = 1;
// [Main]         const _18 = x_5 - _17;
// [Main]         return $thunk(() => odd_6(_18, function (x) {
// [Main]           return $thunk(() => k(x))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]     } else {
// [Main]       const _19 = 1;
// [Main]       const _20 = x_5 + _19;
// [Main]       return $thunk(() => odd_6(_20, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function main_21(k) {
// [Main]     const _22 = 789;
// [Main]     return $thunk(() => even_3(_22, function (_23) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       , _23))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_21(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: Let(("t", Int), Int(123), Let(("f", Int), Int(456), LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit)))) against Unit
// [Typer] check: Int(123) against Int
// [Typer] check: Let(("f", Int), Int(456), LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit))) against Unit
// [Typer] check: Int(456) against Int
// [Typer] check: LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)]))) against Int
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)])) against Int
// [Typer] check: LE(Int(0), Var("x")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])) against Int
// [Typer] check: Eq(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("f") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("even") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("even") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])) against Int
// [Typer] check: LE(Int(0), Var("x")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])) against Int
// [Typer] check: Eq(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("t") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("odd") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("odd") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("even"), [Int(789)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("even"), [Int(789)]) against Int
// [Typer] infer: Int(789)
// [Typer] check: Var("even") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
