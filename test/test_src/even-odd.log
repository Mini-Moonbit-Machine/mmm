// [Asm] pre_assigned_registers: Insn(iref=%2) -> v6, Insn(iref=%1) -> v5, FnParam(fref=f6, fpref=$f.1) -> v3, Insn(iref=%3) -> v7, Self(fref=f6) -> v0, Insn(iref=%0) -> v4, FnParam(fref=f6, fpref=$f.0) -> v2
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: []
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v4, v5]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v4, v5, v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [a0]
// [Asm] live_set: [v4, v5, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, v5, a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [a0]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.24"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="v4 ← a1", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v5 ← a2", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r2 [label="v3 ← a0", color=green];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v6 ← a0", color=green];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r6 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r6 -- r15;
// [Asm]   r1 -- r6;
// [Asm]   r4 -- r6;
// [Asm]   r6 -- r12;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r7;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v2-> 1:a1-> 4:v5-> 6:a0-> 3:v4-> 5:v9-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 2:v3-> 18:v6-> 19:v7"
// [Asm]   comment = "v2<-a0;v4<-a1;v5<-a2;v9<-a0;v3<-a0;v6<-a0;v7<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.24"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   mv v3, a1 ->   mv a0, a1
// [Asm] subst   lw v4, f.2 ->   lw a1, f.2
// [Asm] subst   lw v5, t.1 ->   lw a2, t.1
// [Asm] subst   li v9, 789 ->   li a0, 789
// [Asm] subst   call even.22 ->   call even.22
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%9) -> v8, Insn(iref=%8) -> v7, Insn(iref=%10) -> v9, FnParam(fref=f4, fpref=$f.1) -> v3, Insn(iref=%5) -> v13, Insn(iref=%0) -> v5, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, Insn(iref=%7) -> v6, BlockParam(bref=b5, bpref=$b.0) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v17, FnParam(fref=f4, fpref=$f.2) -> v4, Insn(iref=%2) -> v15, Insn(iref=%1) -> v10, Self(fref=f4) -> v0, Insn(iref=%6) -> v14
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f4, fpref=$f.0)])
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, a0, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v8]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v9]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v12, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v12, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v12, a0, v13]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v13]
// [Asm] move_origin: [v12]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v14]
// [Asm] defined: v16 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of odd.23"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r20 [label="v13 ← a2", color=green];
// [Asm]   r23 [label="v15 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r9 [label="a6", color=blue];
// [Asm]   r26 [label="v3 ← a1", color=green];
// [Asm]   r27 [label="v4 ← a1", color=green];
// [Asm]   r6 [label="a3", color=blue];
// [Asm]   r13 [label="t2", color=blue];
// [Asm]   r4 [label="a1", color=blue];
// [Asm]   r1 [label="v7 ← a1", color=green];
// [Asm]   r11 [label="t0", color=blue];
// [Asm]   r7 [label="a4", color=blue];
// [Asm]   r10 [label="a7", color=blue];
// [Asm]   r22 [label="v16 ← a0", color=green];
// [Asm]   r14 [label="t3", color=blue];
// [Asm]   r8 [label="a5", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r24 [label="v2 ← a0", color=green];
// [Asm]   r15 [label="t4", color=blue];
// [Asm]   r25 [label="zero", color=blue];
// [Asm]   r2 [label="v8 ← a2", color=green];
// [Asm]   r16 [label="v9 ← a0", color=green];
// [Asm]   r18 [label="v11 ← a0", color=green];
// [Asm]   r19 [label="v12 ← a1", color=green];
// [Asm]   r17 [label="v17 ← a0", color=green];
// [Asm]   r21 [label="v14 ← a0", color=green];
// [Asm]   r12 [label="t1", color=blue];
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r4;
// [Asm]   r18 -- r19;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r3 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r24;
// [Asm]   r5 -- r26;
// [Asm]   r2 -- r4;
// [Asm]   r3 -- r13;
// [Asm]   r3 -- r6;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r20;
// [Asm]   r25 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r3 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r20;
// [Asm]   r25 -- r26;
// [Asm]   r18 -- r20;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r3;
// [Asm]   r24 -- r25;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r24 -- r26;
// [Asm]   r3 -- r8;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v6-> 1:v7-> 2:v8-> 3:a0-> 4:a1-> 5:a2-> 20:v13-> 19:v12-> 18:v11-> 24:v2-> 26:v3-> 25:zero-> 27:v4-> 6:a3-> 7:a4-> 8:a5-> 9:a6-> 10:a7-> 11:t0-> 12:t1-> 13:t2-> 14:t3-> 15:t4-> 16:v9-> 17:v17-> 21:v14-> 22:v16-> 23:v15"
// [Asm]   comment = "v6<-a0;v13<-a2;v15<-a0;v3<-a1;v4<-a1;v7<-a1;v16<-a0;v2<-a0;v8<-a2;v9<-a0;v11<-a0;v12<-a1;v17<-a0;v14<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of odd.23"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v6, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   lw v7, f.2 ->   lw a1, f.2
// [Asm] subst   lw v8, t.1 ->   lw a2, t.1
// [Asm] subst   call even.22 ->   call even.22
// [Asm] subst   j .odd.23_6 ->   j .odd.23_6
// [Asm] subst   beq v2, zero, .odd.23_3 ->   beq a0, zero, .odd.23_3
// [Asm] subst   addi v11, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   lw v12, f.2 ->   lw a1, f.2
// [Asm] subst   lw v13, t.1 ->   lw a2, t.1
// [Asm] subst   call even.22 ->   call even.22
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v15, f.2 ->   lw a0, f.2
// [Asm] subst   j .odd.23_5 ->   j .odd.23_5
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   blt v2, zero, .odd.23_2 ->   blt a0, zero, .odd.23_2
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f10) -> v0, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r8 [label="a6", color=blue];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r5 [label="a3", color=blue];
// [Asm]   r15 [label="v4 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r9 [label="a7", color=blue];
// [Asm]   r6 [label="a4", color=blue];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="a2", color=blue];
// [Asm]   r1 [label="v3 ← a1", color=green];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="a5", color=blue];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r6;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r3;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v2-> 1:v3-> 2:a0-> 3:a1-> 4:a2-> 5:a3-> 6:a4-> 7:a5-> 8:a6-> 9:a7-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:v4"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v2, f.2 ->   lw a0, f.2
// [Asm] subst   lw v3, t.1 ->   lw a1, t.1
// [Asm] subst   call main.24 ->   call main.24
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f5, fpref=$f.2) -> v4, Insn(iref=%9) -> v8, Insn(iref=%8) -> v7, Insn(iref=%10) -> v9, Insn(iref=%5) -> v13, Insn(iref=%0) -> v5, Insn(iref=%4) -> v12, Insn(iref=%3) -> v11, FnParam(fref=f5, fpref=$f.0) -> v2, Self(fref=f5) -> v0, Insn(iref=%7) -> v6, BlockParam(bref=b5, bpref=$b.0) -> v16, BlockParam(bref=b6, bpref=$b.0) -> v17, Insn(iref=%2) -> v15, Insn(iref=%1) -> v10, Insn(iref=%6) -> v14, FnParam(fref=f5, fpref=$f.1) -> v3
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f5, fpref=$f.0)])
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v16]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [a2, a1, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a2, a1, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [a2, zero, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v17]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v6, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, v6, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v7, v6, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v7, a0, v8]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v8]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [v17]
// [Asm] live_set: [v17]
// [Asm] move_origin: [v9]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [v17]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v11, v12]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v11, v12, v13]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v11, v12, v13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v12, a0, v13]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0, v13]
// [Asm] move_origin: [v12]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a2 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v14]
// [Asm] live_set: [v14]
// [Asm] move_origin: [a0]
// [Asm] defined: v14 is X
// [Asm] defs: []
// [Asm] live_set: [v14]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v14]
// [Asm] defined: v16 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v16]
// [Asm] move_origin: [v15]
// [Asm] defined: v16 is X
// [Asm] defs: []
// [Asm] live_set: [v16]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of even.22"];
// [Asm]   r0 [label="v17 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="v12 ← a1", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="v7 ← a1", color=green];
// [Asm]   r26 [label="v16 ← a0", color=green];
// [Asm]   r27 [label="v15 ← a0", color=green];
// [Asm]   r6 [label="v4 ← a1", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="a0", color=blue];
// [Asm]   r10 [label="v8 ← a2", color=green];
// [Asm]   r22 [label="v11 ← a0", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="v6 ← a0", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r24 [label="v13 ← a2", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r25 [label="v14 ← a0", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="v9 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r7 -- r19;
// [Asm]   r4 -- r5;
// [Asm]   r7 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r7 -- r10;
// [Asm]   r7 -- r24;
// [Asm]   r22 -- r23;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r11;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r13;
// [Asm]   r1 -- r2;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r5;
// [Asm]   r8 -- r10;
// [Asm]   r23 -- r24;
// [Asm]   r9 -- r10;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r7 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r18;
// [Asm]   r7 -- r23;
// [Asm]   r7 -- r9;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r7 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r22 -- r24;
// [Asm]   r7 -- r14;
// [Asm]   r7 -- r17;
// [Asm]   comment = "0:v17-> 1:v2-> 2:a2-> 3:a1-> 5:v3-> 4:zero-> 6:v4-> 7:a0-> 10:v8-> 9:v7-> 8:v6-> 24:v13-> 23:v12-> 22:v11-> 11:a3-> 12:a4-> 13:a5-> 14:a6-> 15:a7-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 21:v9-> 25:v14-> 26:v16-> 27:v15"
// [Asm]   comment = "v17<-a0;v12<-a1;v7<-a1;v16<-a0;v15<-a0;v4<-a1;v2<-a0;v8<-a2;v11<-a0;v6<-a0;v3<-a1;v13<-a2;v14<-a0;v9<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of even.22"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   beq v2, zero, .even.22_3 ->   beq a0, zero, .even.22_3
// [Asm] subst   mv v4, a2 ->   mv a1, a2
// [Asm] subst   blt v2, zero, .even.22_2 ->   blt a0, zero, .even.22_2
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v6, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   lw v7, f.2 ->   lw a1, f.2
// [Asm] subst   lw v8, t.1 ->   lw a2, t.1
// [Asm] subst   call odd.23 ->   call odd.23
// [Asm] subst   j .even.22_6 ->   j .even.22_6
// [Asm] subst   addi v11, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   lw v12, f.2 ->   lw a1, f.2
// [Asm] subst   lw v13, t.1 ->   lw a2, t.1
// [Asm] subst   call odd.23 ->   call odd.23
// [Asm] subst   lw v15, t.1 ->   lw a0, t.1
// [Asm] subst   j .even.22_5 ->   j .even.22_5
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$f.2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$f.2"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 456 ->   li a0, 456
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$t.1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$t.1"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 123 ->   li a0, 123
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] even.22:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a2, a1, a0, zero, v2], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .even.22_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [a2, zero, v2]
// [Asm]   mv v4, a2  # live: [zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .even.22_2  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .even.22_1:
// [Asm] # control
// [Asm]   beq v2, zero, .even.22_3  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v14, v13, a0, a2, a1, v12, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .even.22_4:
// [Asm]   addi v11, v2, -1  # live: [v11]
// [Asm]   lw v12, f.2  # live: [v11, v12]
// [Asm]   lw v13, t.1  # live: [v11, v12, v13]
// [Asm]   # save_ctx2  # live: [v11, v12, v13]
// [Asm]   mv a0, v11  # live: [v12, a0, v13]
// [Asm]   mv a1, v12  # live: [a1, a0, v13]
// [Asm]   mv a2, v13  # live: [a2, a1, a0]
// [Asm]   call odd.23  # live: [a0]
// [Asm]   mv v14, a0  # live: [v14]
// [Asm]   # restore_ctx2  # live: [v14]
// [Asm] # control
// [Asm]   mv v16, v14  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .even.22_5:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .even.22_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, v7, v8, a2, v6, a1, v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .even.22_2:
// [Asm]   addi v6, v2, 1  # live: [v6]
// [Asm]   lw v7, f.2  # live: [v6, v7]
// [Asm]   lw v8, t.1  # live: [v7, v6, v8]
// [Asm]   # save_ctx2  # live: [v7, v6, v8]
// [Asm]   mv a0, v6  # live: [v7, a0, v8]
// [Asm]   mv a1, v7  # live: [a1, a0, v8]
// [Asm]   mv a2, v8  # live: [a2, a1, a0]
// [Asm]   call odd.23  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv v17, v9  # live: [v17]
// [Asm]   j .even.22_6  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v16, v15], uses: [v15], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .even.22_3:
// [Asm]   lw v15, t.1  # live: [v15]
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v16]
// [Asm]   j .even.22_5  # live: [v16]
// [Asm] 
// [Asm] # leaf false
// [Asm] odd.23:
// [Asm] # block info: defs: [v3, v4, v2], uses: [a2, a1, a0, zero, v2], upward_exposed: [a2, a1, a0, zero], params_defs: []
// [Asm] # live_in: [a2, a1, a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .odd.23_0:
// [Asm]   # save_ctx1  # live: [a2, a1, zero, a0]
// [Asm]   mv v2, a0  # live: [a2, a1, zero, v2]
// [Asm]   mv v3, a1  # live: [a2, zero, v2]
// [Asm]   mv v4, a2  # live: [zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .odd.23_2  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .odd.23_1:
// [Asm] # control
// [Asm]   beq v2, zero, .odd.23_3  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, v16, v13, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, v11, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v11, v14, v13, a0, a2, a1, v12, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .odd.23_4:
// [Asm]   addi v11, v2, -1  # live: [v11]
// [Asm]   lw v12, f.2  # live: [v11, v12]
// [Asm]   lw v13, t.1  # live: [v11, v12, v13]
// [Asm]   # save_ctx2  # live: [v11, v12, v13]
// [Asm]   mv a0, v11  # live: [v12, a0, v13]
// [Asm]   mv a1, v12  # live: [a1, a0, v13]
// [Asm]   mv a2, v13  # live: [a2, a1, a0]
// [Asm]   call even.22  # live: [a0]
// [Asm]   mv v14, a0  # live: [v14]
// [Asm]   # restore_ctx2  # live: [v14]
// [Asm] # control
// [Asm]   mv v16, v14  # live: [v16]
// [Asm] 
// [Asm] # block info: defs: [v17], uses: [v16], upward_exposed: [v16], params_defs: [v16]
// [Asm] # live_in: [v16], live_out: [v17]
// [Asm] # block parameters: [v16]
// [Asm] .odd.23_5:
// [Asm] # control
// [Asm]   mv v17, v16  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v17, a0], upward_exposed: [v17], params_defs: [v17]
// [Asm] # live_in: [v17], live_out: []
// [Asm] # block parameters: [v17]
// [Asm] .odd.23_6:
// [Asm] # control
// [Asm]   mv a0, v17  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v17, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, v7, v8, a2, v6, a1, v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v17]
// [Asm] # block parameters: []
// [Asm] .odd.23_2:
// [Asm]   addi v6, v2, 1  # live: [v6]
// [Asm]   lw v7, f.2  # live: [v6, v7]
// [Asm]   lw v8, t.1  # live: [v7, v6, v8]
// [Asm]   # save_ctx2  # live: [v7, v6, v8]
// [Asm]   mv a0, v6  # live: [v7, a0, v8]
// [Asm]   mv a1, v7  # live: [a1, a0, v8]
// [Asm]   mv a2, v8  # live: [a2, a1, a0]
// [Asm]   call even.22  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv v17, v9  # live: [v17]
// [Asm]   j .odd.23_6  # live: [v17]
// [Asm] 
// [Asm] # block info: defs: [v16, v15], uses: [v15], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v16]
// [Asm] # block parameters: []
// [Asm] .odd.23_3:
// [Asm]   lw v15, f.2  # live: [v15]
// [Asm] # control
// [Asm]   mv v16, v15  # live: [v16]
// [Asm]   j .odd.23_5  # live: [v16]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v3, v4, a1, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   lw v2, f.2  # live: [v2]
// [Asm]   lw v3, t.1  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call main.24  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$t.1:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$t.1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 123  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$f.2:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$f.2_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 456  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$t.1  # live: [s0, a0]
// [Asm]   la t5, t.1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$f.2  # live: [s0, a0]
// [Asm]   la t5, f.2  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.24:
// [Asm] # block info: defs: [v2, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v5, a0, v7, v4, a2, a1, v6, v9], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.24_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1]
// [Asm]   mv v3, a1  # live: []
// [Asm]   lw v4, f.2  # live: [v4]
// [Asm]   lw v5, t.1  # live: [v4, v5]
// [Asm]   # save_ctx2  # live: [v4, v5]
// [Asm]   li v9, 789  # live: [v4, v5, v9]
// [Asm]   mv a0, v9  # live: [v4, v5, a0]
// [Asm]   mv a1, v4  # live: [a1, v5, a0]
// [Asm]   mv a2, v5  # live: [a2, a1, a0]
// [Asm]   call even.22  # live: [a0]
// [Asm]   mv v6, a0  # live: [v6]
// [Asm]   # restore_ctx2  # live: [v6]
// [Asm]   # save_ctx2  # live: [v6]
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] t.1:
// [Asm]   .zero 4
// [Asm] f.2:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("t", Int), Int(123), Let(("f", Int), Int(456), LetRec({name: ("even", Int), args: [("x", Int)], body: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), [])))))
// [Knf] build_knf: Int(123)
// [Knf] build_knf: Let(("f", Int), Int(456), LetRec({name: ("even", Int), args: [("x", Int)], body: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), []))))
// [Knf] build_knf: Int(456)
// [Knf] build_knf: LetRec({name: ("even", Int), args: [("x", Int)], body: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("even")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("even")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("t")
// [Knf] build_knf: App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("odd")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("odd")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("even"), [Int(789)])])
// [Knf] build_knf: App(Var("even"), [Int(789)])
// [Knf] build_knf: Var("even")
// [Knf] build_knf: Int(789)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl even.22
// [Main]   .type even.22, @function
// [Main] # leaf false
// [Main] even.22:
// [Main] .even.22_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, a2
// [Main]   blt a0, zero, .even.22_2
// [Main] 
// [Main] .even.22_1:
// [Main]   beq a0, zero, .even.22_3
// [Main] 
// [Main] .even.22_4:
// [Main]   addi a0, a0, -1
// [Main]   lw a1, f.2
// [Main]   lw a2, t.1
// [Main]   call odd.23
// [Main] 
// [Main] .even.22_5:
// [Main] 
// [Main] .even.22_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .even.22_2:
// [Main]   addi a0, a0, 1
// [Main]   lw a1, f.2
// [Main]   lw a2, t.1
// [Main]   call odd.23
// [Main]   j .even.22_6
// [Main] 
// [Main] .even.22_3:
// [Main]   lw a0, t.1
// [Main]   j .even.22_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl odd.23
// [Main]   .type odd.23, @function
// [Main] # leaf false
// [Main] odd.23:
// [Main] .odd.23_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, a2
// [Main]   blt a0, zero, .odd.23_2
// [Main] 
// [Main] .odd.23_1:
// [Main]   beq a0, zero, .odd.23_3
// [Main] 
// [Main] .odd.23_4:
// [Main]   addi a0, a0, -1
// [Main]   lw a1, f.2
// [Main]   lw a2, t.1
// [Main]   call even.22
// [Main] 
// [Main] .odd.23_5:
// [Main] 
// [Main] .odd.23_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .odd.23_2:
// [Main]   addi a0, a0, 1
// [Main]   lw a1, f.2
// [Main]   lw a2, t.1
// [Main]   call even.22
// [Main]   j .odd.23_6
// [Main] 
// [Main] .odd.23_3:
// [Main]   lw a0, f.2
// [Main]   j .odd.23_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   lw a0, f.2
// [Main]   lw a1, t.1
// [Main]   call main.24
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$t.1
// [Main]   .type T$t.1, @function
// [Main] # leaf true
// [Main] T$t.1:
// [Main] .T$t.1_0:
// [Main]   li a0, 123
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$f.2
// [Main]   .type T$f.2, @function
// [Main] # leaf true
// [Main] T$f.2:
// [Main] .T$f.2_0:
// [Main]   li a0, 456
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$t.1
// [Main]   la t5, t.1
// [Main]   sw a0, 0(t5)
// [Main]   call T$f.2
// [Main]   la t5, f.2
// [Main]   sw a0, 0(t5)
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.24
// [Main]   .type main.24, @function
// [Main] # leaf false
// [Main] main.24:
// [Main] .main.24_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a0, a1
// [Main]   lw a1, f.2
// [Main]   lw a2, t.1
// [Main]   li a0, 789
// [Main]   call even.22
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl t.1
// [Main]   .type t.1, @object
// [Main] t.1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl f.2
// [Main]   .type f.2, @object
// [Main] f.2:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.24
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Int32, f=f5, args=[Int32(val=789), Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%3)])
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f6, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.24 to wasm
// [Wasm] Lowering function odd.23
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Int32, f=f5, args=[Insn(iref=%3), Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Int32, f=f5, args=[Insn(iref=%7), Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f4, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f4, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function odd.23 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Unit, f=f6, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function even.22
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Int32, f=f4, args=[Insn(iref=%3), Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=0)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f5, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::1)
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn LoadSymbol(ty=Int32, sref=::0)
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Int32, f=f4, args=[Insn(iref=%7), Insn(iref=%8), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Jump(target=b6, args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f5, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f5, fpref=$f.2) -> $$f.2
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function even.22 to wasm
// [Wasm] Lowering function T$f.2
// [Wasm] Lowering control Return(args=[Int32(val=456)])
// [Wasm] Lowered function T$f.2 to wasm
// [Wasm] Lowering function T$t.1
// [Wasm] Lowering control Return(args=[Int32(val=123)])
// [Wasm] Lowered function T$t.1 to wasm
// [KnfOpt] freq: {even.3: Many(3), odd.5: Many(2), main.19: Once}
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision even.3 rejected
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision even.3 rejected
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision odd.5 rejected
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision odd.5 rejected
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision even.3 rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f4: Multiple, f10: Once, f5: Multiple, f2: Once, f0: Once})
