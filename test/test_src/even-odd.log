// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0, 2, 1, 4, 3, 5, 6]
// [Asm] LoweringOrder: [[1, 2], [6], [3, 4], [5], [5], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b4, b5, b6, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 2), (b1, 1), (b5, 3), (b2, 0), (b3, 0), (b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, BlockParam(bref=b5, bpref=$b.0) -> v9, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v10, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v5, Insn(iref=%0) -> v3, Insn(iref=%4) -> v4
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [5]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f0, fpref=$f.0), Int32(val=0)])
// [Asm] succs: [6]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f0, fpref=$f.0)])
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] defined: v11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v11
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v8
// [Asm] defined: v9 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- v5
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- v9
// [Asm] defined: v10 is X
// [Asm] Label("odd.25") clobbered_x: @hashset.of([a0])
// [Asm] Label("odd.25") clobbered_f: @hashset.of([])
// [Asm] subst   blt v2, zero, .odd.25_2 ->   blt a0, zero, .odd.25_2
// [Asm] subst   ret ->   ret
// [Asm] subst   li v11, 456 ->   li a0, 456
// [Asm] subst   j .odd.25_5 ->   j .odd.25_5
// [Asm] subst   beq v2, zero, .odd.25_3 ->   beq a0, zero, .odd.25_3
// [Asm] subst   addi v7, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   call even.24 ->   call even.24
// [Asm] subst   addi v4, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   call even.24 ->   call even.24
// [Asm] subst   j .odd.25_6 ->   j .odd.25_6
// [Asm] LoweringOrder: [0, 2, 1, 4, 3, 5, 6]
// [Asm] LoweringOrder: [[1, 2], [6], [3, 4], [5], [5], [6], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 0), (b4, 0), (b1, 0), (b5, 0), (b2, 2), (b3, 1), (b0, 0)])
// [Asm] LoweringOrder: [b0, b1, b4, b5, b6, b3, b2]
// [Asm] LoweringOrder: HashMap::of([(b6, 4), (b4, 2), (b1, 1), (b5, 3), (b2, 0), (b3, 0), (b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v8, FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b5, bpref=$b.0) -> v9, BlockParam(bref=b6, bpref=$b.0) -> v10, Insn(iref=%2) -> v7, Insn(iref=%1) -> v6, Self(fref=f1) -> v0, Insn(iref=%5) -> v5, Insn(iref=%0) -> v3, Insn(iref=%4) -> v4
// [Asm] succs: []
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] succs: [5]
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [5]
// [Asm] critical edges for b4: []
// [Asm] critical color seq for b4: []
// [Asm] succs: [3, 4]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=0)])
// [Asm] succs: [6]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f1, fpref=$f.0)])
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- v9
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] defined: v11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v11
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v4
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move: v10 <- v5
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move: v8 <- a0
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move: v9 <- v8
// [Asm] defined: v9 is X
// [Asm] Label("even.24") clobbered_x: @hashset.of([a0])
// [Asm] Label("even.24") clobbered_f: @hashset.of([])
// [Asm] subst   beq v2, zero, .even.24_3 ->   beq a0, zero, .even.24_3
// [Asm] subst   ret ->   ret
// [Asm] subst   blt v2, zero, .even.24_2 ->   blt a0, zero, .even.24_2
// [Asm] subst   li v11, 123 ->   li a0, 123
// [Asm] subst   j .even.24_5 ->   j .even.24_5
// [Asm] subst   addi v4, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   call odd.25 ->   call odd.25
// [Asm] subst   j .even.24_6 ->   j .even.24_6
// [Asm] subst   addi v7, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   call odd.25 ->   call odd.25
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> v3, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v5
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.26") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.26") clobbered_f: @hashset.of([])
// [Asm] subst   li v5, 789 ->   li a0, 789
// [Asm] subst   call even.24 ->   call even.24
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.26:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.26_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v5, 789  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call even.24  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] odd.25:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .odd.25_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .odd.25_2  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .odd.25_1:
// [Asm] # control
// [Asm]   beq v2, zero, .odd.25_3  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v7, v8, a0, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .odd.25_4:
// [Asm]   addi v7, v2, -1  # live: [v7]
// [Asm]   # save_ctx2  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call even.24  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v9], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: [v10]
// [Asm] # block parameters: [v9]
// [Asm] .odd.25_5:
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .odd.25_6:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11, v9], uses: [v11], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .odd.25_3:
// [Asm] # control
// [Asm]   li v11, 456  # live: [v11]
// [Asm]   mv v9, v11  # live: [v9]
// [Asm]   j .odd.25_5  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a0, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .odd.25_2:
// [Asm]   addi v4, v2, 1  # live: [v4]
// [Asm]   # save_ctx2  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   call even.24  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv v10, v5  # live: [v10]
// [Asm]   j .odd.25_6  # live: [v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] even.24:
// [Asm] # block info: defs: [v2], uses: [a0, zero, v2], upward_exposed: [a0, zero], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .even.24_0:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .even.24_2  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .even.24_1:
// [Asm] # control
// [Asm]   beq v2, zero, .even.24_3  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v7, v8, a0, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .even.24_4:
// [Asm]   addi v7, v2, -1  # live: [v7]
// [Asm]   # save_ctx2  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call odd.25  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv v9, v8  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v9], upward_exposed: [v9], params_defs: [v9]
// [Asm] # live_in: [v9], live_out: [v10]
// [Asm] # block parameters: [v9]
// [Asm] .even.24_5:
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v10, a0], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: []
// [Asm] # block parameters: [v10]
// [Asm] .even.24_6:
// [Asm] # control
// [Asm]   mv a0, v10  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v11, v9], uses: [v11], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v9]
// [Asm] # block parameters: []
// [Asm] .even.24_3:
// [Asm] # control
// [Asm]   li v11, 123  # live: [v11]
// [Asm]   mv v9, v11  # live: [v9]
// [Asm]   j .even.24_5  # live: [v9]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a0, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .even.24_2:
// [Asm]   addi v4, v2, 1  # live: [v4]
// [Asm]   # save_ctx2  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   call odd.25  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv v10, v5  # live: [v10]
// [Asm]   j .even.24_6  # live: [v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.26  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main] top int reduce t.1 = Int(123)
// [Main] top int reduce f.2 = Int(456)
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.26
// [Main]   .type main.26, @function
// [Main] # leaf false
// [Main] main.26:
// [Main] .main.26_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 789
// [Main]   call even.24
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl odd.25
// [Main]   .type odd.25, @function
// [Main] # leaf false
// [Main] odd.25:
// [Main] .odd.25_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   blt a0, zero, .odd.25_2
// [Main] 
// [Main] .odd.25_1:
// [Main]   beq a0, zero, .odd.25_3
// [Main] 
// [Main] .odd.25_4:
// [Main]   addi a0, a0, -1
// [Main]   call even.24
// [Main] 
// [Main] .odd.25_5:
// [Main] 
// [Main] .odd.25_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .odd.25_3:
// [Main]   li a0, 456
// [Main]   j .odd.25_5
// [Main] 
// [Main] .odd.25_2:
// [Main]   addi a0, a0, 1
// [Main]   call even.24
// [Main]   j .odd.25_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl even.24
// [Main]   .type even.24, @function
// [Main] # leaf false
// [Main] even.24:
// [Main] .even.24_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   blt a0, zero, .even.24_2
// [Main] 
// [Main] .even.24_1:
// [Main]   beq a0, zero, .even.24_3
// [Main] 
// [Main] .even.24_4:
// [Main]   addi a0, a0, -1
// [Main]   call odd.25
// [Main] 
// [Main] .even.24_5:
// [Main] 
// [Main] .even.24_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .even.24_3:
// [Main]   li a0, 123
// [Main]   j .even.24_5
// [Main] 
// [Main] .even.24_2:
// [Main]   addi a0, a0, 1
// [Main]   call odd.25
// [Main]   j .even.24_6
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.26
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: Let(("t", Int), Int(123), Let(("f", Int), Int(456), LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit))))
// [Typer] resolve: Int(123)
// [Typer] resolve: Let(("f", Int), Int(456), LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit)))
// [Typer] resolve: Int(456)
// [Typer] resolve: LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))
// [Typer] resolve: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))
// [Typer] resolve: LE(Int(0), Var("x"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("x")
// [Typer] resolve: If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)]))
// [Typer] resolve: Eq(Var("x"), Int(0))
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("f")
// [Typer] resolve: App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("even")
// [Typer] resolve: App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("even")
// [Typer] resolve: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)]))
// [Typer] resolve: LE(Int(0), Var("x"))
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("x")
// [Typer] resolve: If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)]))
// [Typer] resolve: Eq(Var("x"), Int(0))
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(0)
// [Typer] resolve: Var("t")
// [Typer] resolve: App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])
// [Typer] resolve: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("odd")
// [Typer] resolve: App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])
// [Typer] resolve: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] resolve: Var("x")
// [Typer] resolve: Int(1)
// [Typer] resolve: Var("odd")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit)
// [Typer] resolve: App(Var("print_int"), [App(Var("even"), [Int(789)])])
// [Typer] resolve: App(Var("even"), [Int(789)])
// [Typer] resolve: Int(789)
// [Typer] resolve: Var("even")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: Let(("t", Int), Int(123), Let(("f", Int), Int(456), LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit)))) against Unit
// [Typer] check: Int(123) against Int
// [Typer] check: Let(("f", Int), Int(456), LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit))) against Unit
// [Typer] check: Int(456) against Int
// [Typer] check: LetRec({tyvars: [], name: ("even", Int), args: [("x", Int)], body: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)]))) against Int
// [Typer] typevars: []
// [Typer] check: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)])) against Int
// [Typer] check: LE(Int(0), Var("x")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)])) against Int
// [Typer] check: Eq(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("f") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("even") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("even") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)])) against Int
// [Typer] check: LE(Int(0), Var("x")) against Bool
// [Typer] infer: Int(0)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)])) against Int
// [Typer] check: Eq(Var("x"), Int(0)) against Bool
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(0)
// [Typer] unify: Int and Int
// [Typer] check: Var("t") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Sub, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("odd") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=None)]) against Int
// [Typer] infer: Prim(Var("x"), Int(1), Add, kind=None)
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("odd") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("even"), [Int(789)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("even"), [Int(789)]) against Int
// [Typer] infer: Int(789)
// [Typer] check: Var("even") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {even.3: Many(3), odd.6: Many(2), main.21: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {even.3: Many(3), odd.6: Many(2), main.21: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {even.3: Many(3), odd.6: Many(2), main.21: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 17
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 3 35
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [KnfOpt] Tuple freq: {_12: MayEscape, _14: MayEscape, _18: MayEscape, _20: MayEscape, _22: MayEscape, _23: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Multiple, f1: Multiple, f2: Once})
// [CoreOpt] allow_inline: false %0 main.26 false true true true true
// [CoreOpt] allow_inline: false %3 even.24 true false true false true
// [CoreOpt] allow_inline: false %5 even.24 true false true false true
// [CoreOpt] allow_inline: false %3 odd.25 true false true false true
// [CoreOpt] allow_inline: false %5 odd.25 true false true false true
// [CoreOpt] allow_inline: false %0 even.24 false false true false true
// [CoreOpt] allow_inline: false %0 main.26 false true true true true
// [CoreOpt] allow_inline: false %3 even.24 true false true false true
// [CoreOpt] allow_inline: false %5 even.24 true false true false true
// [CoreOpt] allow_inline: false %3 odd.25 true false true false true
// [CoreOpt] allow_inline: false %5 odd.25 true false true false true
// [CoreOpt] allow_inline: false %0 even.24 false false true false true
// [CoreOpt] allow_inline: false %0 main.26 false true true true true
// [CoreOpt] allow_inline: false %3 even.24 true false true false true
// [CoreOpt] allow_inline: false %5 even.24 true false true false true
// [CoreOpt] allow_inline: false %3 odd.25 true false true false true
// [CoreOpt] allow_inline: false %5 odd.25 true false true false true
// [CoreOpt] allow_inline: false %0 even.24 false false true false true
// [CoreOpt] allow_inline: false %0 main.26 false true true true true
// [CoreOpt] allow_inline: false %3 even.24 true false true false true
// [CoreOpt] allow_inline: false %5 even.24 true false true false true
// [CoreOpt] allow_inline: false %3 odd.25 true false true false true
// [CoreOpt] allow_inline: false %5 odd.25 true false true false true
// [CoreOpt] allow_inline: false %0 even.24 false false true false true
// [CoreOpt] allow_inline: false %0 main.26 false true true true true
// [CoreOpt] allow_inline: false %3 even.24 true false true false true
// [CoreOpt] allow_inline: false %5 even.24 true false true false true
// [CoreOpt] allow_inline: false %3 odd.25 true false true false true
// [CoreOpt] allow_inline: false %5 odd.25 true false true false true
// [CoreOpt] allow_inline: false %0 even.24 false false true false true
// [CoreOpt] allow_inline: false %0 main.26 false true true true true
// [CoreOpt] allow_inline: false %3 even.24 true false true false true
// [CoreOpt] allow_inline: false %5 even.24 true false true false true
// [CoreOpt] allow_inline: false %3 odd.25 true false true false true
// [CoreOpt] allow_inline: false %5 odd.25 true false true false true
// [CoreOpt] allow_inline: false %0 even.24 false false true false true
