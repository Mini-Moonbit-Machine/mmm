// [Asm] pre_assigned_registers: Insn(iref=%3) -> v11, FnParam(fref=f4, fpref=$f.0) -> v2, Insn(iref=%7) -> v7, BlockParam(bref=b5, bpref=$b.0) -> v12, BlockParam(bref=b6, bpref=$b.0) -> v13, Insn(iref=%2) -> v8, Insn(iref=%1) -> v5, Self(fref=f4) -> v0, Insn(iref=%6) -> v6, Mem(fref=f4, mref=m0) -> v3, Insn(iref=%5) -> v10, Insn(iref=%0) -> v4, Insn(iref=%4) -> v9
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f4, fpref=$f.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f4, fpref=$f.0)])
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v11]
// [Asm] defined: v12 is X
// [Asm] defs: []
// [Asm] live_set: [v12]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v6, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v6, v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v6, v18]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v18, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v7]
// [Asm] defined: v13 is X
// [Asm] defs: []
// [Asm] live_set: [v13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v21, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v2, zero, v23, v3]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, zero, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v13]
// [Asm] live_set: [v13]
// [Asm] move_origin: [v12]
// [Asm] defined: v13 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v13]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v3]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [s10]
// [Asm] live_set: [v9, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s10 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v15, v9]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: []
// [Asm] live_set: [v15, v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v15, a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [a0]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12]
// [Asm] move_origin: [v10]
// [Asm] defined: v12 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of even3_4"];
// [Asm]   r0 [label="v11 ← a0", color=green];
// [Asm]   r20 [label="v13 ← a0", color=green];
// [Asm]   r23 [label="zero", color=blue];
// [Asm]   r3 [label="v3 ← a1", color=green];
// [Asm]   r9 [label="t2", color=blue];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r27 [label="v15 ← a1", color=green];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="s10", color=blue];
// [Asm]   r1 [label="v12 ← a0", color=green];
// [Asm]   r28 [label="v10 ← a0", color=green];
// [Asm]   r11 [label="t4", color=blue];
// [Asm]   r7 [label="t0", color=blue];
// [Asm]   r10 [label="t3", color=blue];
// [Asm]   r22 [label="s11", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="t1", color=blue];
// [Asm]   r5 [label="v18 ← a1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v21 ← a1", color=green];
// [Asm]   r25 [label="v23 ← a2", color=green];
// [Asm]   r2 [label="v6 ← a0", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="v7 ← a0", color=green];
// [Asm]   r21 [label="v2 ← a0", color=green];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r21 -- r24;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r27;
// [Asm]   r26 -- r27;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r23 -- r25;
// [Asm]   r3 -- r25;
// [Asm]   r6 -- r15;
// [Asm]   r3 -- r21;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r21 -- r25;
// [Asm]   r22 -- r23;
// [Asm]   r6 -- r17;
// [Asm]   r2 -- r5;
// [Asm]   r23 -- r24;
// [Asm]   r6 -- r16;
// [Asm]   r3 -- r26;
// [Asm]   r21 -- r22;
// [Asm]   r6 -- r12;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r21 -- r23;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v11-> 1:v12-> 2:v6-> 3:v3-> 4:s10-> 26:v9-> 5:v18-> 6:a0-> 27:v15-> 7:t0-> 8:t1-> 9:t2-> 10:t3-> 11:t4-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 21:v2-> 23:zero-> 25:v23-> 22:s11-> 24:v21-> 19:v7-> 20:v13-> 28:v10"
// [Asm]   comment = "v11<-a0;v13<-a0;v3<-a1;v9<-a0;v15<-a1;v12<-a0;v10<-a0;v18<-a1;v21<-a1;v23<-a2;v6<-a0;v7<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of even3_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v11, t.1 ->   lw a0, t.1
// [Asm] subst   j .even3_4_5 ->   j .even3_4_5
// [Asm] subst   addi v6, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v18, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   jalr v18 ->   jalr a1
// [Asm] subst   j .even3_4_6 ->   j .even3_4_6
// [Asm] subst   addi v21, s11, -8 ->   addi a1, s11, -8
// [Asm] subst   andi v3, v21, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   la v23, odd6_7 ->   la a2, odd6_7
// [Asm] subst   sd v23, 0(v3) ->   sd a2, 0(a1)
// [Asm] subst   blt v2, zero, .even3_4_2 ->   blt a0, zero, .even3_4_2
// [Asm] subst   beq v2, zero, .even3_4_3 ->   beq a0, zero, .even3_4_3
// [Asm] subst   ret ->   ret
// [Asm] subst   addi v9, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   mv s10, v3 ->   mv s10, a1
// [Asm] subst   ld v15, 0(v3) ->   ld a1, 0(a1)
// [Asm] subst   jalr v15 ->   jalr a1
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main21_5 ->   call main21_5
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Self(fref=f5) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main21_5"];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v5-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 14:v2-> 15:v3"
// [Asm]   comment = "v5<-a0;v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main21_5"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v5, 789 ->   li a0, 789
// [Asm] subst   call even3_4 ->   call even3_4
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$f.22"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$f.22"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 456 ->   li a0, 456
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> v7, BlockParam(bref=b5, bpref=$b.0) -> v10, Self(fref=f7) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v11, FnParam(fref=f7, fpref=$f.0) -> v2, Insn(iref=%2) -> v9, Insn(iref=%1) -> v6, Insn(iref=%6) -> v5, Insn(iref=%5) -> v4, Insn(iref=%0) -> v3, Insn(iref=%4) -> v8
// [Asm] skipping Op(ty=Bool, op=Eq, args=[FnParam(fref=f7, fpref=$f.0), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[Int32(val=0), FnParam(fref=f7, fpref=$f.0)])
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [a0]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v5]
// [Asm] defined: v11 is X
// [Asm] defs: []
// [Asm] live_set: [v11]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v11]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v11]
// [Asm] live_set: [v11]
// [Asm] move_origin: [v10]
// [Asm] defined: v11 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v9]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v10]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [zero, a0, s10]
// [Asm] move_origin: []
// [Asm] defs: [v0]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: [s10]
// [Asm] defined: v0 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: [a0]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10]
// [Asm] move_origin: [v8]
// [Asm] defined: v10 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of odd6_7"];
// [Asm]   r0 [label="v4 ← a0", color=green];
// [Asm]   r20 [label="v2 ← a0", color=green];
// [Asm]   r3 [label="t1", color=blue];
// [Asm]   r9 [label="a3", color=blue];
// [Asm]   r6 [label="t4", color=blue];
// [Asm]   r13 [label="a7", color=blue];
// [Asm]   r4 [label="t2", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a5", color=blue];
// [Asm]   r7 [label="a1", color=blue];
// [Asm]   r10 [label="a4", color=blue];
// [Asm]   r22 [label="v8 ← a0", color=green];
// [Asm]   r14 [label="v5 ← a0", color=green];
// [Asm]   r8 [label="a2", color=blue];
// [Asm]   r5 [label="t3", color=blue];
// [Asm]   r15 [label="v11 ← a0", color=green];
// [Asm]   r2 [label="t0", color=blue];
// [Asm]   r16 [label="v9 ← a0", color=green];
// [Asm]   r18 [label="v0 ← a1", color=green];
// [Asm]   r19 [label="zero", color=blue];
// [Asm]   r21 [label="v7 ← a0", color=green];
// [Asm]   r17 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="a6", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r18 -- r19;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r18;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v4-> 1:a0-> 2:t0-> 3:t1-> 4:t2-> 5:t3-> 6:t4-> 7:a1-> 8:a2-> 9:a3-> 10:a4-> 11:a5-> 12:a6-> 13:a7-> 18:v0-> 19:zero-> 20:v2-> 14:v5-> 15:v11-> 16:v9-> 17:v10-> 21:v7-> 22:v8"
// [Asm]   comment = "v4<-a0;v2<-a0;v8<-a0;v5<-a0;v11<-a0;v9<-a0;v0<-a1;v7<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of odd6_7"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v4, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   call even3_4 ->   call even3_4
// [Asm] subst   j .odd6_7_6 ->   j .odd6_7_6
// [Asm] subst   ret ->   ret
// [Asm] subst   lw v9, f.2 ->   lw a0, f.2
// [Asm] subst   j .odd6_7_5 ->   j .odd6_7_5
// [Asm] subst   mv v0, s10 ->   mv a1, s10
// [Asm] subst   blt v2, zero, .odd6_7_2 ->   blt a0, zero, .odd6_7_2
// [Asm] subst   beq v2, zero, .odd6_7_3 ->   beq a0, zero, .odd6_7_3
// [Asm] subst   addi v7, v2, -1 ->   addi a0, a0, -1
// [Asm] subst   call even3_4 ->   call even3_4
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$t.10"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:a0"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$t.10"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v2, 123 ->   li a0, 123
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] T$t.10:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$t.10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 123  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] odd6_7:
// [Asm] # block info: defs: [v0, v2], uses: [v2, s10, a0, zero], upward_exposed: [s10, a0, zero], params_defs: []
// [Asm] # live_in: [s10, a0, zero], live_out: [zero, v2]
// [Asm] # block parameters: []
// [Asm] .odd6_7_0:
// [Asm]   # save_ctx1  # live: [zero, a0, s10]
// [Asm]   mv v0, s10  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   blt v2, zero, .odd6_7_2  # live: [zero, v2]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [zero, v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .odd6_7_1:
// [Asm] # control
// [Asm]   beq v2, zero, .odd6_7_3  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v7, v8, a0, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .odd6_7_4:
// [Asm]   addi v7, v2, -1  # live: [v7]
// [Asm]   # save_ctx2  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call even3_4  # live: [a0]
// [Asm]   mv v8, a0  # live: [v8]
// [Asm]   # restore_ctx2  # live: [v8]
// [Asm] # control
// [Asm]   mv v10, v8  # live: [v10]
// [Asm] 
// [Asm] # block info: defs: [v11], uses: [v10], upward_exposed: [v10], params_defs: [v10]
// [Asm] # live_in: [v10], live_out: [v11]
// [Asm] # block parameters: [v10]
// [Asm] .odd6_7_5:
// [Asm] # control
// [Asm]   mv v11, v10  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v11, a0], upward_exposed: [v11], params_defs: [v11]
// [Asm] # live_in: [v11], live_out: []
// [Asm] # block parameters: [v11]
// [Asm] .odd6_7_6:
// [Asm] # control
// [Asm]   mv a0, v11  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, v11, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v4, v5, a0, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v11]
// [Asm] # block parameters: []
// [Asm] .odd6_7_2:
// [Asm]   addi v4, v2, 1  # live: [v4]
// [Asm]   # save_ctx2  # live: [v4]
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   call even3_4  # live: [a0]
// [Asm]   mv v5, a0  # live: [v5]
// [Asm]   # restore_ctx2  # live: [v5]
// [Asm] # control
// [Asm]   mv v11, v5  # live: [v11]
// [Asm]   j .odd6_7_6  # live: [v11]
// [Asm] 
// [Asm] # block info: defs: [v10, v9], uses: [v9], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v10]
// [Asm] # block parameters: []
// [Asm] .odd6_7_3:
// [Asm]   lw v9, f.2  # live: [v9]
// [Asm] # control
// [Asm]   mv v10, v9  # live: [v10]
// [Asm]   j .odd6_7_5  # live: [v10]
// [Asm] 
// [Asm] # leaf false
// [Asm] even3_4:
// [Asm] # block info: defs: [v3, v21, s11, v23, v2], uses: [v3, v21, a0, zero, v23, s11, v2], upward_exposed: [s11, a0, zero], params_defs: []
// [Asm] # live_in: [s11, a0, zero], live_out: [v3, zero, v2]
// [Asm] # block parameters: []
// [Asm] .even3_4_0:
// [Asm]   # save_ctx1  # live: [s11, zero, a0]
// [Asm]   mv v2, a0  # live: [s11, zero, v2]
// [Asm]   addi v21, s11, -8  # live: [v21, zero, v2]
// [Asm]   andi v3, v21, -8  # live: [v2, zero, v3]
// [Asm]   mv s11, v3  # live: [v2, zero, v3]
// [Asm]   la v23, odd6_7  # live: [v2, zero, v23, v3]
// [Asm]   sd v23, 0(v3)  # live: [v2, zero, v3]
// [Asm] # control
// [Asm]   blt v2, zero, .even3_4_2  # live: [v2, zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v2], upward_exposed: [zero, v2], params_defs: []
// [Asm] # live_in: [v3, zero, v2], live_out: [v3, v2]
// [Asm] # block parameters: []
// [Asm] .even3_4_1:
// [Asm] # control
// [Asm]   beq v2, zero, .even3_4_3  # live: [v2, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, v9, s10, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v15], uses: [v3, v15, v10, v9, a0, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .even3_4_4:
// [Asm]   addi v9, v2, -1  # live: [v9, v3]
// [Asm]   mv s10, v3  # live: [v9, v3]
// [Asm]   ld v15, 0(v3)  # live: [v15, v9]
// [Asm]   # save_ctx2  # live: [v15, v9]
// [Asm]   mv a0, v9  # live: [v15, a0]
// [Asm]   jalr v15  # live: [a0]
// [Asm]   mv v10, a0  # live: [v10]
// [Asm]   # restore_ctx2  # live: [v10]
// [Asm] # control
// [Asm]   mv v12, v10  # live: [v12]
// [Asm] 
// [Asm] # block info: defs: [v13], uses: [v12], upward_exposed: [v12], params_defs: [v12]
// [Asm] # live_in: [v12], live_out: [v13]
// [Asm] # block parameters: [v12]
// [Asm] .even3_4_5:
// [Asm] # control
// [Asm]   mv v13, v12  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v13, a0], upward_exposed: [v13], params_defs: [v13]
// [Asm] # live_in: [v13], live_out: []
// [Asm] # block parameters: [v13]
// [Asm] .even3_4_6:
// [Asm] # control
// [Asm]   mv a0, v13  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [t1, v13, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, s10, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2], uses: [v3, v7, v6, v18, a0, v2], upward_exposed: [v3, v2], params_defs: []
// [Asm] # live_in: [v2, v3], live_out: [v13]
// [Asm] # block parameters: []
// [Asm] .even3_4_2:
// [Asm]   addi v6, v2, 1  # live: [v6, v3]
// [Asm]   mv s10, v3  # live: [v6, v3]
// [Asm]   ld v18, 0(v3)  # live: [v6, v18]
// [Asm]   # save_ctx2  # live: [v6, v18]
// [Asm]   mv a0, v6  # live: [v18, a0]
// [Asm]   jalr v18  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv v13, v7  # live: [v13]
// [Asm]   j .even3_4_6  # live: [v13]
// [Asm] 
// [Asm] # block info: defs: [v11, v12], uses: [v11], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v12]
// [Asm] # block parameters: []
// [Asm] .even3_4_3:
// [Asm]   lw v11, t.1  # live: [v11]
// [Asm] # control
// [Asm]   mv v12, v11  # live: [v12]
// [Asm]   j .even3_4_5  # live: [v12]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main21_5  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, t5, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, sp, s0, ra, s11, t5], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$t.10  # live: [s0, a0]
// [Asm]   la t5, t.1  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$f.22  # live: [s0, a0]
// [Asm]   la t5, f.2  # live: [s0, t5, a0]
// [Asm]   sw a0, 0(t5)  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] T$f.22:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$f.22_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 456  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main21_5:
// [Asm] # block info: defs: [v3, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main21_5_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v5, 789  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   call even3_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] t.1:
// [Asm]   .zero 4
// [Asm] f.2:
// [Asm]   .zero 4
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: Let(("t", Int), Int(123), Let(("f", Int), Int(456), LetRec({name: ("even", Int), args: [("x", Int)], body: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), [])))))
// [Knf] build_knf: Int(123)
// [Knf] build_knf: Let(("f", Int), Int(456), LetRec({name: ("even", Int), args: [("x", Int)], body: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), []))))
// [Knf] build_knf: Int(456)
// [Knf] build_knf: LetRec({name: ("even", Int), args: [("x", Int)], body: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), [])))
// [Knf] build_knf: LetRec({name: ("odd", Int), args: [("x", Int)], body: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))}, If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Var("f"), App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("f")
// [Knf] build_knf: App(Var("even"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("even")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("even"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("even")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(LE(Int(0), Var("x")), If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])), App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("x")
// [Knf] build_knf: If(Eq(Var("x"), Int(0)), Var("t"), App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("t")
// [Knf] build_knf: App(Var("odd"), [Prim(Var("x"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("odd")
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("odd"), [Prim(Var("x"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("odd")
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("even"), [Int(789)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("even"), [Int(789)])])
// [Knf] build_knf: App(Var("even"), [Int(789)])
// [Knf] build_knf: Var("even")
// [Knf] build_knf: Int(789)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$t.10
// [Main]   .type T$t.10, @function
// [Main] # leaf true
// [Main] T$t.10:
// [Main] .T$t.10_0:
// [Main]   li a0, 123
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl odd6_7
// [Main]   .type odd6_7, @function
// [Main] # leaf false
// [Main] odd6_7:
// [Main] .odd6_7_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   mv a1, s10
// [Main]   blt a0, zero, .odd6_7_2
// [Main] 
// [Main] .odd6_7_1:
// [Main]   beq a0, zero, .odd6_7_3
// [Main] 
// [Main] .odd6_7_4:
// [Main]   addi a0, a0, -1
// [Main]   call even3_4
// [Main] 
// [Main] .odd6_7_5:
// [Main] 
// [Main] .odd6_7_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .odd6_7_2:
// [Main]   addi a0, a0, 1
// [Main]   call even3_4
// [Main]   j .odd6_7_6
// [Main] 
// [Main] .odd6_7_3:
// [Main]   lw a0, f.2
// [Main]   j .odd6_7_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl even3_4
// [Main]   .type even3_4, @function
// [Main] # leaf false
// [Main] even3_4:
// [Main] .even3_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a1, s11, -8
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   la a2, odd6_7
// [Main]   sd a2, 0(a1)
// [Main]   blt a0, zero, .even3_4_2
// [Main] 
// [Main] .even3_4_1:
// [Main]   beq a0, zero, .even3_4_3
// [Main] 
// [Main] .even3_4_4:
// [Main]   addi a0, a0, -1
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main] 
// [Main] .even3_4_5:
// [Main] 
// [Main] .even3_4_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .even3_4_2:
// [Main]   addi a0, a0, 1
// [Main]   mv s10, a1
// [Main]   ld a1, 0(a1)
// [Main]   jalr a1
// [Main]   j .even3_4_6
// [Main] 
// [Main] .even3_4_3:
// [Main]   lw a0, t.1
// [Main]   j .even3_4_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main21_5
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$t.10
// [Main]   la t5, t.1
// [Main]   sw a0, 0(t5)
// [Main]   call T$f.22
// [Main]   la t5, f.2
// [Main]   sw a0, 0(t5)
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$f.22
// [Main]   .type T$f.22, @function
// [Main] # leaf true
// [Main] T$f.22:
// [Main] .T$f.22_0:
// [Main]   li a0, 456
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main21_5
// [Main]   .type main21_5, @function
// [Main] # leaf false
// [Main] main21_5:
// [Main] .main21_5_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 789
// [Main]   call even3_4
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl t.1
// [Main]   .type t.1, @object
// [Main] t.1:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl f.2
// [Main]   .type f.2, @object
// [Main] f.2:
// [Main]   .zero 4
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Parser] flags: []
