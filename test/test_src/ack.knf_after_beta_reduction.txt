let rec ack.1: Int = (x.2: Int, y.3: Int) {
  let join ack.19: Int = (x.20: Int, y.21: Int) {
    let _22: Int = Int(0)
    if (x.20 <= _22) then {
      let _23: Int = Int(1)
      Add(y.21, _23)
    } else {
      let _24: Int = Int(0)
      if (y.21 <= _24) then {
        let _25: Int = Int(1)
        let _26: Int = Sub(x.20, _25)
        let _27: Int = Int(1)
        Jump(ack.19, [_26, _27, ])
      } else {
        let _28: Int = Int(1)
        let _29: Int = Sub(x.20, _28)
        let _30: Int = Int(1)
        let _31: Int = Sub(y.21, _30)
        let _32: Int = Apply(ack.1, [x.20, _31, ])
        Jump(ack.19, [_29, _32, ])
      }
    }
  }
  Jump(ack.19, [x.2, y.3, ])
}
let rec main.15: Var({val: Some(Unit)}) = () {
  let _16: Int = Int(3)
  let _17: Int = Int(8)
  let _18: Int = Apply(ack.1, [_16, _17, ])
  ExtApply(minimbt_print_int, [_18, ])
}
Apply(main.15, [])