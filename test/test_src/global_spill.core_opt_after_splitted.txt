# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$_81 #f42 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_84 #f54 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_80 #f38 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_71 #f2 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_75 #f18 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$x_7.13 #f24 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::10
    let %1: int32 = load_symbol ::11
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_14.27 #f52 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::24
    let %1: int32 = load_symbol ::25
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_83 #f50 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn main64.90 #f66 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f65(10)
    return %0
  }
}
.fn T$x_9.17 #f32 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::14
    let %1: int32 = load_symbol ::15
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_4.7 #f12 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::4
    let %1: int32 = load_symbol ::5
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_82 #f46 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_76 #f22 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_77 #f26 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$x_2.3 #f4 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let %1: int32 = load_symbol ::1
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_78 #f30 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$x_12.23 #f44 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::20
    let %1: int32 = load_symbol ::21
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn placeholder34.89 #f64 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[int32] = load_symbol ::31
    let _ = store int32 field(%0, 0 * @32) <- 0
    return ()
  }
}
.fn T$_74 #f14 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$x_15.29 #f56 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::26
    let %1: int32 = load_symbol ::27
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_73 #f10 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$x_6.11 #f20 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::8
    let %1: int32 = load_symbol ::9
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn print39.88 #f65 : fn(int32) -> unit
.freevars ()
.entry b5 {
  .bb #b0 (int32) {
    let %0: bool = eq($b0.0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(())
  }
  .bb #b2 () {
    let %1: unit = call f64()
    jump b6(%1)
  }
  .bb #b3 (unit) {
    return $b3.0
  }
  .loop #b4 pre #Some(b5) header #b0 {
    .block #b1
    .block #b2
    .block #b3
  }
  .bb #b5 () {
    let %2: int32 = load_symbol ::2
    let %4: int32 = load_symbol ::4
    let %6: int32 = load_symbol ::6
    let %8: int32 = load_symbol ::8
    let %10: int32 = load_symbol ::10
    let %12: int32 = load_symbol ::12
    let %14: int32 = load_symbol ::14
    let %16: int32 = load_symbol ::16
    let %18: int32 = load_symbol ::18
    let %20: int32 = load_symbol ::20
    let %22: int32 = load_symbol ::22
    let %24: int32 = load_symbol ::24
    let %26: int32 = load_symbol ::26
    let %28: int32 = load_symbol ::28
    jump b4($f0)
  }
  .bb #b6 (unit) {
    let %3: int32 = add(1, %2)
    let %5: int32 = add(%3, %4)
    let %7: int32 = add(%5, %6)
    let %9: int32 = add(%7, %8)
    let %11: int32 = add(%9, %10)
    let %13: int32 = add(%11, %12)
    let %15: int32 = add(%13, %14)
    let %17: int32 = add(%15, %16)
    let %19: int32 = add(%17, %18)
    let %21: int32 = add(%19, %20)
    let %23: int32 = add(%21, %22)
    let %25: int32 = add(%23, %24)
    let %27: int32 = add(%25, %26)
    let %29: int32 = add(%27, %28)
    let %30: unit = ext_call minimbt_print_int(%29)
    let %31: int32 = sub($b0.0, 1)
    jump b0(%31)
  }
}
.fn T$x_13.25 #f48 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::22
    let %1: int32 = load_symbol ::23
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_85 #f58 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$dummy.32 #f62 : fn() -> array[int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::29
    let %1: int32 = load_symbol ::30
    let _ = alloc <m0: array[int32] heap(%0)> <- [..] = %1
    return f62.m0
  }
}
.fn T$x_5.9 #f16 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::6
    let %1: int32 = load_symbol ::7
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_79 #f34 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_86 #f60 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 0
  }
}
.fn T$x_8.15 #f28 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::12
    let %1: int32 = load_symbol ::13
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_11.21 #f40 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::18
    let %1: int32 = load_symbol ::19
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$_72 #f6 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$x_10.19 #f36 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::16
    let %1: int32 = load_symbol ::17
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$x_3.5 #f8 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::2
    let %1: int32 = load_symbol ::3
    let %2: int32 = add(%0, %1)
    return %2
  }
}
.fn T$start #f70 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f66()
    return %0
  }
}
.fn T$_70 #f0 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.thunk ::0 _70
.thunk ::1 _71
.thunk ::2 x_2.3
.thunk ::3 _72
.thunk ::4 x_3.5
.thunk ::5 _73
.thunk ::6 x_4.7
.thunk ::7 _74
.thunk ::8 x_5.9
.thunk ::9 _75
.thunk ::10 x_6.11
.thunk ::11 _76
.thunk ::12 x_7.13
.thunk ::13 _77
.thunk ::14 x_8.15
.thunk ::15 _78
.thunk ::16 x_9.17
.thunk ::17 _79
.thunk ::18 x_10.19
.thunk ::19 _80
.thunk ::20 x_11.21
.thunk ::21 _81
.thunk ::22 x_12.23
.thunk ::23 _82
.thunk ::24 x_13.25
.thunk ::25 _83
.thunk ::26 x_14.27
.thunk ::27 _84
.thunk ::28 x_15.29
.thunk ::29 _85
.thunk ::30 _86
.thunk ::31 dummy.32
.thunk ::32 start

