// [Knf] build_knf: LetRec({name: ("foo", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("a")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("d")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("e")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit))))))}, LetRec({name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, App(Var("main"), []))))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("a")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("d")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("e")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit))))))
// [Knf] build_knf: App(Var("print_int"), [Var("a")])
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("b")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("d")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("e")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit)))))
// [Knf] build_knf: App(Var("print_int"), [Var("b")])
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("c")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("d")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("e")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit))))
// [Knf] build_knf: App(Var("print_int"), [Var("c")])
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("d")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("e")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit)))
// [Knf] build_knf: App(Var("print_int"), [Var("d")])
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("e")]), Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit))
// [Knf] build_knf: App(Var("print_int"), [Var("e")])
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_int"), [Var("f")]), Unit)
// [Knf] build_knf: App(Var("print_int"), [Var("f")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, App(Var("main"), [])))
// [Knf] build_knf: App(Var("foo"), [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])
// [Knf] build_knf: Var("foo")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])
// [Knf] build_knf: Var("bar")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: Int(5)
// [Knf] build_knf: Int(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function foo1(a2_3, b4_5, c6_7, d8_9, e10_11, f12_13, k) {
// [Main]     const _15 = minimbt_print_int($force(a2_3));
// [Main]     const _17 = minimbt_print_int($force(b4_5));
// [Main]     const _19 = minimbt_print_int($force(c6_7));
// [Main]     const _21 = minimbt_print_int($force(d8_9));
// [Main]     const _23 = minimbt_print_int($force(e10_11));
// [Main]     const _25 = minimbt_print_int($force(f12_13));
// [Main]     return k(null)
// [Main]   }
// [Main]   function bar26(a27_28, b29_30, c31_32, d33_34, e35_36, f37_38, k) {
// [Main]     return $thunk(() => foo1(b29_30, a27_28, d33_34, e35_36, f37_38, c31_32, k))
// [Main]   }
// [Main]   function main39(k) {
// [Main]     const _40 = 1;
// [Main]     const _41 = 2;
// [Main]     const _42 = 3;
// [Main]     const _43 = 4;
// [Main]     const _44 = 5;
// [Main]     const _45 = 6;
// [Main]     return $thunk(() => bar26(_40, _41, _42, _43, _44, _45, k))
// [Main]   }
// [Main]   return $thunk(() => main39(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
