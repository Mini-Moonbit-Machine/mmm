// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Insn(iref=%3) -> v5, Self(fref=f0) -> v0, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v18]
// [Asm] live_set: [v18, zero]
// [Asm] defined: v18 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v18
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v16]
// [Asm] live_set: [v16, zero]
// [Asm] defined: v16 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v16
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero]
// [Asm] defined: v14 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v14
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v12]
// [Asm] live_set: [v12, zero]
// [Asm] defined: v12 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v12
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero]
// [Asm] defined: v10 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v10
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0]
// [Asm] move: a0 <- v8
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [zero]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.58") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.58") clobbered_f: @hashset.of([])
// [Asm] subst   li v18, 2 ->   li a0, 2
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v16, 1 ->   li a0, 1
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v14, 4 ->   li a0, 4
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v12, 5 ->   li a0, 5
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v10, 6 ->   li a0, 6
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   li v8, 3 ->   li a0, 3
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.58  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.58:
// [Asm] # block info: defs: [v3, t1, v16, v14, v7, ft0, ft1, a1, v12, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, v4, ft5, v6, ft7, ft4, v5, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, v18, fa3, ft3, fa0, t4, t2, v2], uses: [v16, v14, v18, v10, a0, zero, v8, v12], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.58_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v18, 2  # live: [v18, zero]
// [Asm]   mv a0, v18  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v16, 1  # live: [v16, zero]
// [Asm]   mv a0, v16  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v3, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v14, 4  # live: [v14, zero]
// [Asm]   mv a0, v14  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v12, 5  # live: [v12, zero]
// [Asm]   mv a0, v12  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v10, 6  # live: [v10, zero]
// [Asm]   mv a0, v10  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   li v8, 3  # live: [zero, v8]
// [Asm]   mv a0, v8  # live: [zero, a0]
// [Asm]   call minimbt_print_int  # live: [zero, a0]
// [Asm]   mv v7, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.58
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.58
// [Main]   .type main.58, @function
// [Main] # leaf false
// [Main] main.58:
// [Main] .main.58_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 2
// [Main]   call minimbt_print_int
// [Main]   li a0, 1
// [Main]   call minimbt_print_int
// [Main]   li a0, 4
// [Main]   call minimbt_print_int
// [Main]   li a0, 5
// [Main]   call minimbt_print_int
// [Main]   li a0, 6
// [Main]   call minimbt_print_int
// [Main]   li a0, 3
// [Main]   call minimbt_print_int
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("foo", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("a")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))))))}, LetRec({tyvars: [], name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), targs=None, [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit)))
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("a")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))))))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("a")])
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit)))))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("b")])
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("c")])
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit)))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("d")])
// [Typer] resolve: Var("d")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("e")])
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [Var("f")])
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] resolve: LetRec({tyvars: [], name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), targs=None, [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit))
// [Typer] resolve: App(Var("foo"), targs=None, [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("d")
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("foo")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit)
// [Typer] resolve: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(4)
// [Typer] resolve: Int(5)
// [Typer] resolve: Int(6)
// [Typer] resolve: Var("bar")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("foo", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("a")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))))))}, LetRec({tyvars: [], name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), targs=None, [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("a")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit)))))) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("a")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("a") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))))) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("b")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("b") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit)))) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("c")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("c") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit))) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("d")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("d") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit)) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("e")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("e") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), targs=None, [Var("f")]), Unit) against Unit
// [Typer] infer: App(Var("print_int"), targs=None, [Var("f")])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("f") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), targs=None, [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: App(Var("foo"), targs=None, [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")]) against Unit
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int) -> Unit))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] unify: (Int, Int, Int, Int, Int, Int) -> Unit and (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("bar"), targs=None, [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int) -> Unit))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Int(4) against Int
// [Typer] check: Int(5) against Int
// [Typer] check: Int(6) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {foo.1: Once, bar.26: Once, main.39: Once}
// [KnfOpt] Knf inline Some(foo)
// [KnfOpt] Knf inline Some(bar)
// [KnfOpt] freq: {main.39: Once}
// [KnfOpt] freq: {main.39: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_41: MayEscape, _40: MayEscape, _43: MayEscape, _44: MayEscape, _45: MayEscape, _42: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.58 false true true false true
// [CoreOpt] allow_inline: false %0 main.58 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.58 false true true false true
// [CoreOpt] allow_inline: false %0 main.58 false true true false true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.58 false true true false true
// [CoreOpt] allow_inline: false %0 main.58 false true true false true
