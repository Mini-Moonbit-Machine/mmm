// [Main] function thunk_main(k) {
// [Main]   function foo_1(a_3, b_5, c_7, d_9, e_11, f_13, k) {
// [Main]     return $thunk(() => $external(minimbt_print_int, function (_15) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (_17) {
// [Main]         return $thunk(() => $external(minimbt_print_int, function (_19) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (_21) {
// [Main]             return $thunk(() => $external(minimbt_print_int, function (_23) {
// [Main]               return $thunk(() => $external(minimbt_print_int, function (_25) {
// [Main]                 return $thunk(() => k(null))
// [Main]               }
// [Main]               , f_13))
// [Main]             }
// [Main]             , e_11))
// [Main]           }
// [Main]           , d_9))
// [Main]         }
// [Main]         , c_7))
// [Main]       }
// [Main]       , b_5))
// [Main]     }
// [Main]     , a_3))
// [Main]   }
// [Main]   function bar_26(a_28, b_30, c_32, d_34, e_36, f_38, k) {
// [Main]     return $thunk(() => foo_1(b_30, a_28, d_34, e_36, f_38, c_32, function (x) {
// [Main]       return $thunk(() => k(x))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_39(k) {
// [Main]     const _40 = 1;
// [Main]     const _41 = 2;
// [Main]     const _42 = 3;
// [Main]     const _43 = 4;
// [Main]     const _44 = 5;
// [Main]     const _45 = 6;
// [Main]     return $thunk(() => bar_26(_40, _41, _42, _43, _44, _45, function (x) {
// [Main]       return $thunk(() => k(x))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_39(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("foo", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: Let(("_", Var(None)), App(Var("print_int"), [Var("a")]), Let(("_", Var(None)), App(Var("print_int"), [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit))))))}, LetRec({tyvars: [], name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), [Var("a")]), Let(("_", Var(None)), App(Var("print_int"), [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit)))))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("a")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("a") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), [Var("b")]), Let(("_", Var(None)), App(Var("print_int"), [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit))))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("b")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("b") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), [Var("c")]), Let(("_", Var(None)), App(Var("print_int"), [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit)))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("c")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("c") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), [Var("d")]), Let(("_", Var(None)), App(Var("print_int"), [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit))) against Unit
// [Typer] infer: App(Var("print_int"), [Var("d")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("d") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), [Var("e")]), Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit)) against Unit
// [Typer] infer: App(Var("print_int"), [Var("e")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("e") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Let(("_", Var(None)), App(Var("print_int"), [Var("f")]), Unit) against Unit
// [Typer] infer: App(Var("print_int"), [Var("f")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("f") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("bar", Unit), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int), ("e", Int), ("f", Int)], body: App(Var("foo"), [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")])}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: App(Var("foo"), [Var("b"), Var("a"), Var("d"), Var("e"), Var("f"), Var("c")]) against Unit
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] check: Var("foo") against (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int) -> Unit))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] unify: (Int, Int, Int, Int, Int, Int) -> Unit and (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("bar"), [Int(1), Int(2), Int(3), Int(4), Int(5), Int(6)])
// [Typer] infer: Var("bar")
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int, Int, Int) -> Unit))
// [Typer] inst result: (Int, Int, Int, Int, Int, Int) -> Unit
// [Typer] check: Int(1) against Int
// [Typer] check: Int(2) against Int
// [Typer] check: Int(3) against Int
// [Typer] check: Int(4) against Int
// [Typer] check: Int(5) against Int
// [Typer] check: Int(6) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
