let rec main.27: Var({val: Some(Unit)}) = () {
  let _28: Int = Int(1)
  let _29: Int = Int(2)
  let _30: Int = Int(3)
  let _31: Int = Int(4)
  let _32: Int = Int(5)
  let _33: Int = Int(6)
  let _34: Int = Int(7)
  let _35: Int = Int(8)
  let _36: Int = Int(9)
  let _37: Int = Int(10)
  let _38: Tuple([Int, Int, Int, Int, Int, Int, Int, Int, Int, Int]) = Tuple([_28, _29, _30, _31, _32, _33, _34, _35, _36, _37, ])
  let (v1.67: Var({val: Some(Int)}), v2.68: Var({val: Some(Int)}), v3.69: Var({val: Some(Int)}), v4.70: Var({val: Some(Int)}), v5.71: Var({val: Some(Int)}), v6.72: Var({val: Some(Int)}), v7.73: Var({val: Some(Int)}), v8.74: Var({val: Some(Int)}), v9.75: Var({val: Some(Int)}), v10.76: Var({val: Some(Int)})) = _38
  let _92: Int = Int(1)
  let join g.93: Int = (z.94: Int) {
    let _95: Int = Add(v1.67, v2.68)
    let _96: Int = Add(_95, v3.69)
    let _97: Int = Add(_96, v4.70)
    let _98: Int = Add(_97, v5.71)
    let _99: Int = Add(_98, v6.72)
    let _100: Int = Add(_99, v7.73)
    let _101: Int = Add(_100, v8.74)
    let _102: Int = Add(_101, v9.75)
    let r.103: Int = Add(_102, v10.76)
    let _104: Int = Int(0)
    if (z.94 <= _104) then {
      let _105: Int = Neg(z.94)
      Jump(g.93, [_105, ])
    } else {
      let _39: Int = Var(r.103)
      let t1.40: Unit = ExtApply(minimbt_print_int, [_39, ])
      Unit
    }
  }
  Jump(g.93, [_92, ])
}
Apply(main.27, [])