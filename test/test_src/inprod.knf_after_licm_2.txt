let rec getx1.84: Double = (v2.3: Tuple([Double, Double, Double])) {
  let (x4.5: Var({val: Some(Double)}), _7: Var({val: Some(Double)}), _9: Var({val: Some(Double)})) = v2.3
  Var(x4.5)
}
let rec gety10.85: Double = (v11.12: Tuple([Double, Double, Double])) {
  let (_14: Var({val: Some(Double)}), y15.16: Var({val: Some(Double)}), _18: Var({val: Some(Double)})) = v11.12
  Var(y15.16)
}
let rec getz19.86: Double = (v20.21: Tuple([Double, Double, Double])) {
  let (_23: Var({val: Some(Double)}), _25: Var({val: Some(Double)}), z26.27: Var({val: Some(Double)})) = v20.21
  Var(z26.27)
}
let rec main43.87: Var({val: Some(Unit)}) = () {
  let _44: Double = Double(1000000)
  let _45: Double = Double(1)
  let _46: Double = Double(2)
  let _47: Double = Double(3)
  let _48: Tuple([Double, Double, Double]) = Tuple([_45, _46, _47, ])
  let _49: Double = Double(4)
  let _50: Double = Double(5)
  let _51: Double = Double(6)
  let _52: Tuple([Double, Double, Double]) = Tuple([_49, _50, _51, ])
  let _74: Double = Apply(getx1.84, [_48, ])
  let _75: Double = Apply(getx1.84, [_52, ])
  let _76: Double = FMul(_74, _75)
  let _77: Double = Apply(gety10.85, [_48, ])
  let _78: Double = Apply(gety10.85, [_52, ])
  let _79: Double = FMul(_77, _78)
  let _80: Double = FAdd(_76, _79)
  let _81: Double = Apply(getz19.86, [_48, ])
  let _82: Double = Apply(getz19.86, [_52, ])
  let _83: Double = FMul(_81, _82)
  let _53: Double = FAdd(_80, _83)
  let _54: Double = FMul(_44, _53)
  let _55: Int = ExtApply(minimbt_truncate, [_54, ])
  ExtApply(minimbt_print_int, [_55, ])
}
Apply(main43.87, [])