let rec main.102: Var({val: Some(Unit)}) = () {
  let _44: Double = Double(1000000)
  let _45: Double = Double(1)
  let _46: Double = Double(2)
  let _47: Double = Double(3)
  let _48: Tuple([Double, Double, Double]) = Tuple([_45, _46, _47, ])
  let _49: Double = Double(4)
  let _50: Double = Double(5)
  let _51: Double = Double(6)
  let _52: Tuple([Double, Double, Double]) = Tuple([_49, _50, _51, ])
  let (x.75: Var({val: Some(Double)}), _76: Var({val: Some(Double)}), _77: Var({val: Some(Double)})) = _48
  let (x.79: Var({val: Some(Double)}), _80: Var({val: Some(Double)}), _81: Var({val: Some(Double)})) = _52
  let _82: Double = FMul(x.75, x.79)
  let (_84: Var({val: Some(Double)}), y.85: Var({val: Some(Double)}), _86: Var({val: Some(Double)})) = _48
  let (_88: Var({val: Some(Double)}), y.89: Var({val: Some(Double)}), _90: Var({val: Some(Double)})) = _52
  let _91: Double = FMul(y.85, y.89)
  let _92: Double = FAdd(_82, _91)
  let (_94: Var({val: Some(Double)}), _95: Var({val: Some(Double)}), z.96: Var({val: Some(Double)})) = _48
  let (_98: Var({val: Some(Double)}), _99: Var({val: Some(Double)}), z.100: Var({val: Some(Double)})) = _52
  let _101: Double = FMul(z.96, z.100)
  let _53: Double = FAdd(_92, _101)
  let _54: Double = FMul(_44, _53)
  let _55: Int = ExtApply(minimbt_truncate, [_54, ])
  ExtApply(minimbt_print_int, [_55, ])
}
Apply(main.102, [])
