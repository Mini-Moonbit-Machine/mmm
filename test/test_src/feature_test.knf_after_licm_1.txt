let rec main1.36: Var({val: Some(Unit)}) = () {
  let _2: Double = Double(1)
  let _3: Double = Double(2)
  let _4: Double = FAdd(_2, _3)
  let _5: Int = ExtApply(minimbt_int_of_float, [_4, ])
  let _7: Unit = ExtApply(minimbt_print_int, [_5, ])
  let _8: Double = Double(1)
  let _9: Double = Double(2)
  let _10: Double = FSub(_8, _9)
  let _11: Int = ExtApply(minimbt_int_of_float, [_10, ])
  let _13: Unit = ExtApply(minimbt_print_int, [_11, ])
  let _14: Double = Double(1)
  let _15: Double = Double(2)
  let _16: Double = FMul(_14, _15)
  let _17: Int = ExtApply(minimbt_int_of_float, [_16, ])
  let _19: Unit = ExtApply(minimbt_print_int, [_17, ])
  let _20: Double = Double(1)
  let _21: Double = Double(2)
  let _22: Double = FDiv(_20, _21)
  let _23: Int = ExtApply(minimbt_int_of_float, [_22, ])
  let _25: Unit = ExtApply(minimbt_print_int, [_23, ])
  let _26: Double = Double(1)
  let _27: Double = Double(2)
  let _31: Unit = if (_26 <= _27) then {
    let _28: Int = Int(1)
    ExtApply(minimbt_print_int, [_28, ])
  } else {
    let _29: Int = Int(0)
    ExtApply(minimbt_print_int, [_29, ])
  }
  let _32: Double = Double(1)
  let _33: Double = Double(1)
  if (_32 == _33) then {
    let _34: Int = Int(1)
    ExtApply(minimbt_print_int, [_34, ])
  } else {
    let _35: Int = Int(0)
    ExtApply(minimbt_print_int, [_35, ])
  }
}
Apply(main1.36, [])