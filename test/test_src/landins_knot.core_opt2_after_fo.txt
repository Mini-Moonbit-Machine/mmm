# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn main37 #f22 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::2
    let %1: int32 = apply %0(5)
    let %2: unit = ext_call minimbt_print_int(%1)
    let %3: int32 = load_symbol ::6
    let %4: int32 = add(10, %3)
    let %5: unit = ext_call minimbt_print_int(%4)
    let %7: int32 = add(31, %3)
    let %8: unit = ext_call minimbt_print_int(%7)
    return %8
  }
}
.fn T$_32 #f18 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 5
  }
}
.fn T$fixedpoint.52 #f12 : fn() -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f10
    let %1: closure(int32) -> int32 = call f1(f12.m0)
    return %1
  }
}
.fn T$arr.47 #f8 : fn() -> array[closure(int32) -> int32]
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = load_symbol ::0
    let _ = alloc <m0: closure(int32) -> int32 heap(1)> <- [0] = f0
    let _ = alloc <m1: array[closure(int32) -> int32] heap(%0)> <- [..] = f8.m0
    return f8.m1
  }
}
.fn dummy1 #f0 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return $f0
  }
}
.fn T$a.33 #f20 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: closure(int32) -> int32 = load_symbol ::2
    let %1: int32 = load_symbol ::5
    let %2: int32 = apply %0(%1)
    return %2
  }
}
.fn aux9.48 #f10 : fn(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: closure(int32) -> int32 = load closure(int32) -> int32 field(%0, 0 * @ptr)
    let %2: int32 = apply %1($f0)
    return %2
  }
}
.fn g18 #f1 : fn(closure(int32) -> int32) -> closure(int32) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: closure(int32) -> int32 heap(2)> <- [0] = f4, [1] = $f0
    return f1.m0
  }
}
.fn h21 #f4 : closure(int32) -> int32
.freevars (closure(int32) -> int32)
.entry b0 {
  .bb #b0 () {
    let %0: bool = eq($f0, 0)
    br %0 b1() b2()
  }
  .bb #b1 () {
    jump b3(1)
  }
  .bb #b2 () {
    let %1: int32 = sub($f0, 1)
    let %2: int32 = apply ^1(%1)
    let %3: int32 = mul($f0, %2)
    jump b3(%3)
  }
  .bb #b3 (int32) {
    return $b3.0
  }
}
.fn T$_46 #f6 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 1
  }
}
.fn T$_54 #f16 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: array[closure(int32) -> int32] = load_symbol ::1
    let %1: int32 = load_symbol ::3
    let %2: closure(int32) -> int32 = load_symbol ::2
    let %4: ptr = compute_address unit offset(0, %1 * @64)
    let _ = store closure(int32) -> int32 raw(%0, %4) <- %2
    return ()
  }
}
.fn T$_53 #f14 : fn() -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 0
  }
}
.fn T$start #f24 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f22()
    return %0
  }
}
.thunk ::0 _46
.thunk ::1 arr.47
.thunk ::2 fixedpoint.52
.thunk ::3 _53
.thunk ::4 _54
.thunk ::5 _32
.thunk ::6 a.33
.thunk ::7 start
