// [Main] function thunk_main(k) {
// [Main]   function small_1(k) {
// [Main]     return $thunk(() => k(5))
// [Main]   }
// [Main]   function rec_2(n_4, k) {
// [Main]     const _5 = 42;
// [Main]     if (n_4 === _5) {
// [Main]       return $thunk(() => small_1(function (_7) {
// [Main]         return $thunk(() => k(null))
// [Main]       }
// [Main]       ))
// [Main]     } else {
// [Main]       const _8 = 1;
// [Main]       const _9 = n_4 + _8;
// [Main]       return $thunk(() => rec_2(_9, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]   }
// [Main]   function dummy_10(k) {
// [Main]     return $thunk(() => small_1(function (_12) {
// [Main]       return $thunk(() => small_1(function (_14) {
// [Main]         return $thunk(() => small_1(function (_16) {
// [Main]           return $thunk(() => small_1(function (_18) {
// [Main]             return $thunk(() => small_1(function (_20) {
// [Main]               return $thunk(() => k(null))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_21(k) {
// [Main]     return $thunk(() => dummy_10(function (_23) {
// [Main]       const _24 = 0;
// [Main]       return $thunk(() => rec_2(_24, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_21(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("small", Int), args: [], body: Int(5)}, LetRec({tyvars: [], name: ("rec", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(42)), Let(("_", Var(None)), App(Var("small"), []), Unit), App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=None)]))}, LetRec({tyvars: [], name: ("dummy", Unit), args: [], body: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit)))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Int(5) against Int
// [Typer] check: LetRec({tyvars: [], name: ("rec", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(42)), Let(("_", Var(None)), App(Var("small"), []), Unit), App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=None)]))}, LetRec({tyvars: [], name: ("dummy", Unit), args: [], body: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit)))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: If(Eq(Var("n"), Int(42)), Let(("_", Var(None)), App(Var("small"), []), Unit), App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=None)])) against Unit
// [Typer] check: Eq(Var("n"), Int(42)) against Bool
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(42)
// [Typer] unify: Int and Int
// [Typer] check: Let(("_", Var(None)), App(Var("small"), []), Unit) against Unit
// [Typer] infer: App(Var("small"), [])
// [Typer] infer: Var("small")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Unit against Unit
// [Typer] check: App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=None)]) against Unit
// [Typer] infer: Prim(Var("n"), Int(1), Add, kind=None)
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Int(1)
// [Typer] unify: Int and Int
// [Typer] check: Var("rec") against (Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetRec({tyvars: [], name: ("dummy", Unit), args: [], body: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit)))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit))))) against Unit
// [Typer] infer: App(Var("small"), [])
// [Typer] infer: Var("small")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit)))) against Unit
// [Typer] infer: App(Var("small"), [])
// [Typer] infer: Var("small")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit))) against Unit
// [Typer] infer: App(Var("small"), [])
// [Typer] infer: Var("small")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), App(Var("small"), []), Let(("_", Var(None)), App(Var("small"), []), Unit)) against Unit
// [Typer] infer: App(Var("small"), [])
// [Typer] infer: Var("small")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("_", Var(None)), App(Var("small"), []), Unit) against Unit
// [Typer] infer: App(Var("small"), [])
// [Typer] infer: Var("small")
// [Typer] inst: TypeScheme(([], () -> Int))
// [Typer] inst result: () -> Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Unit against Unit
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("_", Var(None)), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("_", Var(None)), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))
// [Typer] infer: App(Var("dummy"), [])
// [Typer] infer: Var("dummy")
// [Typer] inst: TypeScheme(([], () -> Unit))
// [Typer] inst result: () -> Unit
// [Typer] unify: Var(None) and Unit
// [Typer] union: Var(None) and Unit
// [Typer] infer: App(Var("rec"), [Int(0)])
// [Typer] infer: Var("rec")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Int(0) against Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
