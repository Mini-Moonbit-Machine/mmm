// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f6) -> v0, Insn(iref=%0) -> v2
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("small1.30") clobbered_x: @hashset.of([a0])
// [Asm] Label("small1.30") clobbered_f: @hashset.of([])
// [Asm] subst   li v2, 5 ->   li a0, 5
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [5, 0, 2, 1, 7, 6, 3]
// [Asm] LoweringOrder: [[4], [1, 2], [0], [7], [6], [3], []]
// [Asm] LoweringOrder: HashMap::of([(b6, 1), (b1, 1), (b5, 0), (b2, 0), (b3, 1), (b7, 1), (b0, 0)])
// [Asm] LoweringOrder: [b5, b0, b2, b1, b7, b6, b3]
// [Asm] LoweringOrder: HashMap::of([(b6, 2), (b1, 0), (b5, 0), (b2, 2), (b3, 3), (b7, 1), (b0, 1)])
// [Asm] pre_assigned_registers: Insn(iref=%2) -> v5, BlockParam(bref=b0, bpref=$b.0) -> v3, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v7
// [Asm] succs: []
// [Asm] critical edges for b3: []
// [Asm] critical color seq for b3: []
// [Asm] succs: [3]
// [Asm] critical edges for b6: []
// [Asm] critical color seq for b6: []
// [Asm] succs: [6]
// [Asm] critical edges for b7: []
// [Asm] critical color seq for b7: []
// [Asm] succs: [7]
// [Asm] critical edges for b1: []
// [Asm] critical color seq for b1: []
// [Asm] succs: [0]
// [Asm] critical edges for b2: []
// [Asm] critical color seq for b2: []
// [Asm] succs: [1, 2]
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=42)])
// [Asm] succs: [4]
// [Asm] critical edges for b5: []
// [Asm] critical color seq for b5: []
// [Asm] defs: [v8]
// [Asm] live_set: [zero, v8]
// [Asm] defined: v8 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, zero]
// [Asm] move: v6 <- v8
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero, a0]
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move: v3 <- v2
// [Asm] defined: v3 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move: v7 <- zero
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, zero, v3]
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] defs: [v5]
// [Asm] live_set: [v5, zero]
// [Asm] defined: v5 is X
// [Asm] defs: [v3]
// [Asm] live_set: [zero, v3]
// [Asm] move: v3 <- v5
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v3]
// [Asm] Label("rec2.31") clobbered_x: @hashset.of([a1, a0])
// [Asm] Label("rec2.31") clobbered_f: @hashset.of([])
// [Asm] subst   li v8, 5 ->   li a0, 5
// [Asm] subst   mv v7, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] subst   li v10, 42 ->   li a1, 42
// [Asm] subst   beq v3, v10, .rec2.31_1 ->   beq a0, a1, .rec2.31_1
// [Asm] subst   addi v5, v3, 1 ->   addi a0, a0, 1
// [Asm] subst   j .rec2.31_0 ->   j .rec2.31_0
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%4) -> v6, Insn(iref=%1) -> v3, Self(fref=f2) -> v0, Insn(iref=%3) -> v5, Insn(iref=%5) -> v7, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [zero]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [zero]
// [Asm] move: v3 <- a0
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move: v4 <- a0
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v5]
// [Asm] live_set: [zero]
// [Asm] move: v5 <- a0
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v6]
// [Asm] live_set: [zero]
// [Asm] move: v6 <- a0
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- zero
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move: v7 <- a0
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v7
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main21.32") clobbered_x: @hashset.of([a0])
// [Asm] Label("main21.32") clobbered_f: @hashset.of([])
// [Asm] subst   call small1.30 ->   call small1.30
// [Asm] subst   call small1.30 ->   call small1.30
// [Asm] subst   call small1.30 ->   call small1.30
// [Asm] subst   call small1.30 ->   call small1.30
// [Asm] subst   call small1.30 ->   call small1.30
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   call rec2.31 ->   call rec2.31
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] small1.30:
// [Asm] # block info: defs: [a0, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .small1.30_0:
// [Asm]   # save_ctx1  # live: []
// [Asm] # control
// [Asm]   li v2, 5  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main21.32:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, zero, v7], upward_exposed: [zero], params_defs: []
// [Asm] # live_in: [zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main21.32_0:
// [Asm]   # save_ctx1  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call small1.30  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call small1.30  # live: [zero, a0]
// [Asm]   mv v3, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call small1.30  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call small1.30  # live: [zero, a0]
// [Asm]   mv v5, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   call small1.30  # live: [zero, a0]
// [Asm]   mv v6, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm]   # save_ctx2  # live: [zero]
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   call rec2.31  # live: [a0]
// [Asm]   mv v7, a0  # live: [v7]
// [Asm]   # restore_ctx2  # live: [v7]
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main21.32  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] rec2.31:
// [Asm] # block info: defs: [v3, v2], uses: [a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0, zero], live_out: [zero, v3]
// [Asm] # block parameters: []
// [Asm] .rec2.31_5:
// [Asm]   # save_ctx1  # live: [zero, a0]
// [Asm]   mv v2, a0  # live: [zero, v2]
// [Asm] # control
// [Asm]   mv v3, v2  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v10], uses: [v10, v3], upward_exposed: [v3], params_defs: [v3]
// [Asm] # live_in: [zero, v3], live_out: [zero, v3]
// [Asm] # block parameters: [v3]
// [Asm] .rec2.31_0:
// [Asm] # control
// [Asm]   li v10, 42  # live: [v10, zero, v3]
// [Asm]   beq v3, v10, .rec2.31_1  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [v5, v3], uses: [v5, v3], upward_exposed: [v3], params_defs: []
// [Asm] # live_in: [zero, v3], live_out: [zero, v3]
// [Asm] # block parameters: []
// [Asm] .rec2.31_2:
// [Asm]   addi v5, v3, 1  # live: [v5, zero]
// [Asm] # control
// [Asm]   mv v3, v5  # live: [zero, v3]
// [Asm]   j .rec2.31_0  # live: [zero, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [], upward_exposed: [], params_defs: []
// [Asm] # live_in: [zero], live_out: [zero]
// [Asm] # block parameters: []
// [Asm] .rec2.31_1:
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v6, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [zero], live_out: [v6, zero]
// [Asm] # block parameters: []
// [Asm] .rec2.31_7:
// [Asm] # control
// [Asm]   li v8, 5  # live: [zero, v8]
// [Asm]   mv v6, v8  # live: [v6, zero]
// [Asm] 
// [Asm] # block info: defs: [v7], uses: [zero], upward_exposed: [zero], params_defs: [v6]
// [Asm] # live_in: [v6, zero], live_out: [v7]
// [Asm] # block parameters: [v6]
// [Asm] .rec2.31_6:
// [Asm] # control
// [Asm]   mv v7, zero  # live: [v7]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [a0, v7], upward_exposed: [v7], params_defs: [v7]
// [Asm] # live_in: [v7], live_out: []
// [Asm] # block parameters: [v7]
// [Asm] .rec2.31_3:
// [Asm] # control
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("small", Int), args: [], body: Int(5)}, LetRec({name: ("rec", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(42)), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit), App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=Some(Int))]))}, LetRec({name: ("dummy", Unit), args: [], body: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, App(Var("main"), [])))))
// [Knf] build_knf: Int(5)
// [Knf] build_knf: LetRec({name: ("rec", Unit), args: [("n", Int)], body: If(Eq(Var("n"), Int(42)), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit), App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=Some(Int))]))}, LetRec({name: ("dummy", Unit), args: [], body: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, App(Var("main"), []))))
// [Knf] build_knf: If(Eq(Var("n"), Int(42)), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit), App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(42)
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)
// [Knf] build_knf: App(Var("small"), [])
// [Knf] build_knf: Var("small")
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("rec"), [Prim(Var("n"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("rec")
// [Knf] build_knf: Prim(Var("n"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("dummy", Unit), args: [], body: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)))))
// [Knf] build_knf: App(Var("small"), [])
// [Knf] build_knf: Var("small")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit))))
// [Knf] build_knf: App(Var("small"), [])
// [Knf] build_knf: Var("small")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)))
// [Knf] build_knf: App(Var("small"), [])
// [Knf] build_knf: Var("small")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit))
// [Knf] build_knf: App(Var("small"), [])
// [Knf] build_knf: Var("small")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("small"), []), Unit)
// [Knf] build_knf: App(Var("small"), [])
// [Knf] build_knf: Var("small")
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("_", Var({val: Some(Unit)})), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("dummy"), []), App(Var("rec"), [Int(0)]))
// [Knf] build_knf: App(Var("dummy"), [])
// [Knf] build_knf: Var("dummy")
// [Knf] build_knf: App(Var("rec"), [Int(0)])
// [Knf] build_knf: Var("rec")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl small1.30
// [Main]   .type small1.30, @function
// [Main] # leaf true
// [Main] small1.30:
// [Main] .small1.30_0:
// [Main]   li a0, 5
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main21.32
// [Main]   .type main21.32, @function
// [Main] # leaf false
// [Main] main21.32:
// [Main] .main21.32_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call small1.30
// [Main]   call small1.30
// [Main]   call small1.30
// [Main]   call small1.30
// [Main]   call small1.30
// [Main]   mv a0, zero
// [Main]   call rec2.31
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main21.32
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl rec2.31
// [Main]   .type rec2.31, @function
// [Main] # leaf true
// [Main] rec2.31:
// [Main] .rec2.31_5:
// [Main] 
// [Main] .rec2.31_0:
// [Main]   li a1, 42
// [Main]   beq a0, a1, .rec2.31_1
// [Main] 
// [Main] .rec2.31_2:
// [Main]   addi a0, a0, 1
// [Main]   j .rec2.31_0
// [Main] 
// [Main] .rec2.31_1:
// [Main] 
// [Main] .rec2.31_7:
// [Main]   li a0, 5
// [Main] 
// [Main] .rec2.31_6:
// [Main]   mv a0, zero
// [Main] 
// [Main] .rec2.31_3:
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f2, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function small1.30
// [Wasm] Lowering control Return(args=[Int32(val=5)])
// [Wasm] Lowered function small1.30 to wasm
// [Wasm] LoweringOrder: [5, 0, 2, 1, 7, 6, 3]
// [Wasm] LoweringOrder: [[4], [1, 2], [0], [7], [6], [3], []]
// [Wasm] LoweringOrder: HashMap::of([(b6, 1), (b1, 1), (b5, 0), (b2, 0), (b3, 1), (b7, 1), (b0, 0)])
// [Wasm] LoweringOrder: [b5, b0, b2, b1, b7, b6, b3]
// [Wasm] LoweringOrder: HashMap::of([(b6, 2), (b1, 0), (b5, 0), (b2, 2), (b3, 3), (b7, 1), (b0, 1)])
// [Wasm] Lowering function rec2.31
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=5)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b7, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=42)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f1, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function rec2.31 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main21.32
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[Int32(val=0)])
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main21.32 to wasm
// [KnfOpt] freq: {small1: Many(6), rec2: Many(2), dummy10: Once, main21: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Knf inline Some(dummy10)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {small1: Many(6), rec2: Many(2), main21: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] freq: {small1: Many(6), rec2: Many(2), main21: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 6 1
// [KnfOpt] Inline decision rejected
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Inline decision rejected
// [KnfOpt] Numbers of let rec: 3 3 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %3: Call(ty=Unit, f=f1, args=[Insn(iref=%2)])
// [CoreOpt] Call frequnce: FnCallFreq({f6: Once, f0: Multiple, f1: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main21.32 false true true false true
// [CoreOpt] allow_inline: true %1 small1.30 true false true true true
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%1) -> BlockParam(bref=b6, bpref=$b.0)
// [CoreOpt] allow_inline: false %1 small1.30 true false false true true
// [CoreOpt] allow_inline: false %0 small1.30 false false true true true
// [CoreOpt] allow_inline: false %1 small1.30 false false true true true
// [CoreOpt] allow_inline: false %2 small1.30 false false true true true
// [CoreOpt] allow_inline: false %3 small1.30 false false true true true
// [CoreOpt] allow_inline: false %4 small1.30 false false true true true
// [CoreOpt] allow_inline: false %5 rec2.31 false true true false true
// [CoreOpt] allow_inline: false %0 main21.32 false true true false true
// [CoreOpt] allow_inline: true %1 small1.30 true false true true true
// [CoreOpt] rec2.31 is inlining Call(ty=Int32, f=f0, args=[])
// [CoreOpt] shifted callee .fn small1.30 #f0 : fn() -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b7 {
// [CoreOpt]   .bb #b7 () {
// [CoreOpt]     return 5
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] allow_inline: false %0 small1.30 false false true true true
// [CoreOpt] allow_inline: false %1 small1.30 false false true true true
// [CoreOpt] allow_inline: false %2 small1.30 false false true true true
// [CoreOpt] allow_inline: false %3 small1.30 false false true true true
// [CoreOpt] allow_inline: false %4 small1.30 false false true true true
// [CoreOpt] allow_inline: false %5 rec2.31 false true true false true
