// [Asm] pre_assigned_registers: Insn(iref=%15) -> v21, Insn(iref=%41) -> v47, Insn(iref=%33) -> v39, Insn(iref=%63) -> v69, Insn(iref=%8) -> v14, Insn(iref=%10) -> v16, Insn(iref=%27) -> v33, Insn(iref=%25) -> v31, Insn(iref=%39) -> v45, Insn(iref=%59) -> v65, Insn(iref=%4) -> v10, Insn(iref=%56) -> v62, Insn(iref=%49) -> v55, Insn(iref=%42) -> v48, Insn(iref=%65) -> v71, Insn(iref=%68) -> v74, Insn(iref=%73) -> v79, Insn(iref=%26) -> v32, Insn(iref=%31) -> v37, Insn(iref=%64) -> v70, Self(fref=f0) -> v0, Insn(iref=%38) -> v44, Insn(iref=%16) -> v22, Insn(iref=%53) -> v59, Insn(iref=%54) -> v60, Insn(iref=%60) -> v66, Insn(iref=%67) -> v73, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> v11, Insn(iref=%19) -> v25, Insn(iref=%13) -> v19, FnParam(fref=f0, fpref=$f.1) -> v3, FnParam(fref=f0, fpref=$f.2) -> v4, Insn(iref=%7) -> v13, Insn(iref=%55) -> v61, Insn(iref=%66) -> v72, Insn(iref=%23) -> v29, Insn(iref=%48) -> v54, Insn(iref=%71) -> v77, Insn(iref=%20) -> v26, Insn(iref=%34) -> v40, Insn(iref=%36) -> v42, Insn(iref=%50) -> v56, Insn(iref=%14) -> v20, Insn(iref=%51) -> v57, Insn(iref=%52) -> v58, Insn(iref=%44) -> v50, Insn(iref=%32) -> v38, Insn(iref=%58) -> v64, Insn(iref=%1) -> v7, Insn(iref=%11) -> v17, Insn(iref=%57) -> v63, Insn(iref=%6) -> v12, Insn(iref=%35) -> v41, Insn(iref=%62) -> v68, Insn(iref=%28) -> v34, Insn(iref=%46) -> v52, Insn(iref=%9) -> v15, Insn(iref=%24) -> v30, Insn(iref=%37) -> v43, FnParam(fref=f0, fpref=$f.3) -> v5, Insn(iref=%45) -> v51, Insn(iref=%29) -> v35, Insn(iref=%70) -> v76, Insn(iref=%47) -> v53, Insn(iref=%0) -> v6, Insn(iref=%61) -> v67, Insn(iref=%3) -> v9, Insn(iref=%18) -> v24, Insn(iref=%22) -> v28, Insn(iref=%17) -> v23, Insn(iref=%2) -> v8, Insn(iref=%72) -> v78, Insn(iref=%43) -> v49, Insn(iref=%30) -> v36, Insn(iref=%21) -> v27, Insn(iref=%40) -> v46, Insn(iref=%69) -> v75, Insn(iref=%12) -> v18
// [Asm] defs: []
// [Asm] live_set: [a1, a0, a2, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, a2, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3, a2, a3, v2]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v3, v4, a3, v2]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v3, v4, v5, v2]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v3, v4, v6, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, v7, v4, v6, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v3, v7, v8, v4, v6, v5, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v3, v7, v8, v4, v6, v5, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v3, v7, v8, v4, v6, v5, v10, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v3, v7, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v3, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v3, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v3, v14, v16, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v3, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v3, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v3, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v3, v25, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v35, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v2]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v2, v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v41, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v16, v14, v26, v13, v42, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v21, v10, v30, v36, v37, v17, v43, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v44, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v45, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v46, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v47, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v30, v36, v37, v17, v24, v31, v39, v18, v48, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v21, v49, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v28, v33, v29, v27, v20, v50, v19, v34, v21, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v16, v14, v26, v22, v32, v28, v33, v51, v29, v27, v20, v19, v34, v21, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v51 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v25, v16, v26, v22, v32, v28, v33, v29, v27, v20, v19, v34, v21, v30, v36, v37, v17, v24, v52, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm] move_origin: []
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v25, v16, v21, v53, v26, v30, v22, v36, v32, v37, v17, v24, v28, v31, v33, v39, v18, v29, v27, v23, v20, v35, v19, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v37, v17, v24, v28, v31, v33, v39, v18, v29, v27, v23, v20, v35, v19, v38, v34, v54, v40]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v18, v29, v27, v23, v20, v35, v19, v38, v34, v55, v40]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v56, v29, v27, v23, v20, v35, v19, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v23, v20, v35, v38, v57, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v25, v58, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v23, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v25, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v23, v35, v38, v59, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v25, v26, v30, v36, v32, v37, v24, v31, v28, v33, v39, v60, v29, v27, v23, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v25, v26, v30, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v35, v38, v61, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v25, v26, v30, v36, v32, v37, v31, v28, v33, v39, v29, v27, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v26, v30, v36, v32, v37, v31, v28, v33, v39, v63, v29, v27, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v30, v36, v32, v37, v31, v28, v33, v64, v39, v29, v27, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v30, v36, v32, v37, v65, v31, v28, v33, v39, v29, v35, v38, v34, v40]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v40, v66, v29, v30, v35, v36, v38, v32, v37, v31, v33, v34, v39]
// [Asm] move_origin: []
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v39, v40, v67, v30, v35, v36, v38, v32, v37, v31, v33, v34]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v40, v68, v36, v35, v37, v38, v32, v31, v34, v33, v39]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v40, v69, v36, v35, v37, v38, v32, v34, v33, v39]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v40, v36, v35, v37, v38, v70, v34, v33, v39]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v71, v36, v35, v37, v38, v34, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v36, v35, v37, v38, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v73, v36, v37, v38, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v38, v37, v74, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: [v75]
// [Asm] live_set: [v38, v75, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v75 is X
// [Asm] defs: [v76]
// [Asm] live_set: [v76, v39, v40]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v77]
// [Asm] live_set: [v77, v40]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v78]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: [v79]
// [Asm] live_set: [v79]
// [Asm] move_origin: []
// [Asm] defined: v79 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v79]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of f1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r46 [label="v45 ← a0", color=green];
// [Asm]   r33 [label="v32 ! spilled", color=red];
// [Asm]   r76 [label="v75 ← a0", color=green];
// [Asm]   r59 [label="v58 ← a0", color=green];
// [Asm]   r9 [label="v8 ← a6", color=green];
// [Asm]   r26 [label="v25 ← s10", color=green];
// [Asm]   r44 [label="v43 ← a0", color=green];
// [Asm]   r53 [label="v52 ← a0", color=green];
// [Asm]   r56 [label="v55 ← a0", color=green];
// [Asm]   r10 [label="v9 ← a7", color=green];
// [Asm]   r5 [label="v4 ← a2", color=green];
// [Asm]   r54 [label="v53 ← a0", color=green];
// [Asm]   r24 [label="v23 ← s8", color=green];
// [Asm]   r43 [label="v42 ← a0", color=green];
// [Asm]   r80 [label="v79 ← a0", color=green];
// [Asm]   r31 [label="v30 ! spilled", color=red];
// [Asm]   r39 [label="v38 ! spilled", color=red];
// [Asm]   r17 [label="v16 ← s1", color=green];
// [Asm]   r65 [label="v64 ← a0", color=green];
// [Asm]   r52 [label="v51 ← a0", color=green];
// [Asm]   r79 [label="v78 ← a0", color=green];
// [Asm]   r20 [label="v19 ← s4", color=green];
// [Asm]   r61 [label="v60 ← a0", color=green];
// [Asm]   r23 [label="v22 ← s7", color=green];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r67 [label="v66 ← a0", color=green];
// [Asm]   r75 [label="v74 ← a0", color=green];
// [Asm]   r27 [label="v26 ! spilled", color=red];
// [Asm]   r77 [label="v76 ← a0", color=green];
// [Asm]   r62 [label="v61 ← a0", color=green];
// [Asm]   r40 [label="v39 ! spilled", color=red];
// [Asm]   r11 [label="v10 ← t0", color=green];
// [Asm]   r58 [label="v57 ← a0", color=green];
// [Asm]   r34 [label="v33 ! spilled", color=red];
// [Asm]   r14 [label="v13 ← t3", color=green];
// [Asm]   r51 [label="v50 ← a0", color=green];
// [Asm]   r78 [label="v77 ← a0", color=green];
// [Asm]   r55 [label="v54 ← a0", color=green];
// [Asm]   r16 [label="v15 ← s0", color=green];
// [Asm]   r21 [label="v20 ← s5", color=green];
// [Asm]   r60 [label="v59 ← a0", color=green];
// [Asm]   r73 [label="v72 ← a0", color=green];
// [Asm]   r38 [label="v37 ! spilled", color=red];
// [Asm]   r72 [label="v71 ← a0", color=green];
// [Asm]   r47 [label="v46 ← a0", color=green];
// [Asm]   r6 [label="v5 ← a3", color=green];
// [Asm]   r13 [label="v12 ← t2", color=green];
// [Asm]   r42 [label="v41 ← a0", color=green];
// [Asm]   r4 [label="v3 ← a1", color=green];
// [Asm]   r29 [label="v28 ! spilled", color=red];
// [Asm]   r35 [label="v34 ! spilled", color=red];
// [Asm]   r7 [label="v6 ← a4", color=green];
// [Asm]   r64 [label="v63 ← a0", color=green];
// [Asm]   r8 [label="v7 ← a5", color=green];
// [Asm]   r36 [label="v35 ! spilled", color=red];
// [Asm]   r66 [label="v65 ← a0", color=green];
// [Asm]   r32 [label="v31 ! spilled", color=red];
// [Asm]   r15 [label="v14 ← t4", color=green];
// [Asm]   r49 [label="v48 ← a0", color=green];
// [Asm]   r74 [label="v73 ← a0", color=green];
// [Asm]   r57 [label="v56 ← a0", color=green];
// [Asm]   r68 [label="v67 ← a0", color=green];
// [Asm]   r70 [label="v69 ← a0", color=green];
// [Asm]   r12 [label="v11 ← t1", color=green];
// [Asm]   r48 [label="v47 ← a0", color=green];
// [Asm]   r37 [label="v36 ! spilled", color=red];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r28 [label="v27 ! spilled", color=red];
// [Asm]   r41 [label="v40 ! spilled", color=red];
// [Asm]   r71 [label="v70 ← a0", color=green];
// [Asm]   r69 [label="v68 ← a0", color=green];
// [Asm]   r22 [label="v21 ← s6", color=green];
// [Asm]   r50 [label="v49 ← a0", color=green];
// [Asm]   r30 [label="v29 ! spilled", color=red];
// [Asm]   r45 [label="v44 ← a0", color=green];
// [Asm]   r25 [label="v24 ← s9", color=green];
// [Asm]   r63 [label="v62 ← a0", color=green];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r18 [label="v17 ← s2", color=green];
// [Asm]   r19 [label="v18 ← s3", color=green];
// [Asm]   r81 [label="a0", color=blue];
// [Asm]   r32 -- r55;
// [Asm]   r12 -- r25;
// [Asm]   r17 -- r42;
// [Asm]   r18 -- r49;
// [Asm]   r38 -- r56;
// [Asm]   r32 -- r48;
// [Asm]   r0 -- r36;
// [Asm]   r16 -- r20;
// [Asm]   r15 -- r43;
// [Asm]   r0 -- r32;
// [Asm]   r11 -- r35;
// [Asm]   r34 -- r71;
// [Asm]   r23 -- r46;
// [Asm]   r38 -- r50;
// [Asm]   r35 -- r59;
// [Asm]   r36 -- r69;
// [Asm]   r36 -- r57;
// [Asm]   r8 -- r36;
// [Asm]   r26 -- r57;
// [Asm]   r15 -- r31;
// [Asm]   r27 -- r36;
// [Asm]   r35 -- r61;
// [Asm]   r37 -- r62;
// [Asm]   r33 -- r59;
// [Asm]   r0 -- r28;
// [Asm]   r39 -- r66;
// [Asm]   r30 -- r61;
// [Asm]   r20 -- r34;
// [Asm]   r23 -- r35;
// [Asm]   r25 -- r57;
// [Asm]   r15 -- r42;
// [Asm]   r40 -- r73;
// [Asm]   r26 -- r43;
// [Asm]   r31 -- r65;
// [Asm]   r20 -- r36;
// [Asm]   r37 -- r70;
// [Asm]   r0 -- r16;
// [Asm]   r15 -- r25;
// [Asm]   r7 -- r32;
// [Asm]   r18 -- r44;
// [Asm]   r20 -- r30;
// [Asm]   r14 -- r34;
// [Asm]   r9 -- r14;
// [Asm]   r0 -- r6;
// [Asm]   r25 -- r48;
// [Asm]   r16 -- r36;
// [Asm]   r17 -- r44;
// [Asm]   r32 -- r35;
// [Asm]   r24 -- r41;
// [Asm]   r26 -- r27;
// [Asm]   r24 -- r45;
// [Asm]   r5 -- r35;
// [Asm]   r20 -- r22;
// [Asm]   r32 -- r44;
// [Asm]   r13 -- r30;
// [Asm]   r25 -- r29;
// [Asm]   r0 -- r26;
// [Asm]   r13 -- r33;
// [Asm]   r41 -- r60;
// [Asm]   r30 -- r67;
// [Asm]   r8 -- r16;
// [Asm]   r19 -- r41;
// [Asm]   r10 -- r18;
// [Asm]   r21 -- r48;
// [Asm]   r24 -- r44;
// [Asm]   r35 -- r38;
// [Asm]   r15 -- r51;
// [Asm]   r29 -- r33;
// [Asm]   r5 -- r32;
// [Asm]   r19 -- r36;
// [Asm]   r40 -- r56;
// [Asm]   r27 -- r54;
// [Asm]   r0 -- r38;
// [Asm]   r29 -- r40;
// [Asm]   r4 -- r29;
// [Asm]   r28 -- r33;
// [Asm]   r40 -- r60;
// [Asm]   r41 -- r63;
// [Asm]   r35 -- r71;
// [Asm]   r11 -- r43;
// [Asm]   r12 -- r43;
// [Asm]   r32 -- r34;
// [Asm]   r12 -- r23;
// [Asm]   r18 -- r37;
// [Asm]   r25 -- r37;
// [Asm]   r17 -- r27;
// [Asm]   r22 -- r44;
// [Asm]   r9 -- r39;
// [Asm]   r24 -- r46;
// [Asm]   r40 -- r72;
// [Asm]   r18 -- r43;
// [Asm]   r32 -- r52;
// [Asm]   r40 -- r42;
// [Asm]   r28 -- r50;
// [Asm]   r6 -- r25;
// [Asm]   r14 -- r49;
// [Asm]   r23 -- r29;
// [Asm]   r39 -- r47;
// [Asm]   r26 -- r38;
// [Asm]   r0 -- r15;
// [Asm]   r27 -- r40;
// [Asm]   r7 -- r44;
// [Asm]   r27 -- r42;
// [Asm]   r27 -- r60;
// [Asm]   r35 -- r67;
// [Asm]   r39 -- r76;
// [Asm]   r2 -- r4;
// [Asm]   r27 -- r41;
// [Asm]   r29 -- r30;
// [Asm]   r21 -- r28;
// [Asm]   r23 -- r50;
// [Asm]   r12 -- r34;
// [Asm]   r21 -- r29;
// [Asm]   r30 -- r66;
// [Asm]   r38 -- r72;
// [Asm]   r34 -- r48;
// [Asm]   r15 -- r35;
// [Asm]   r19 -- r48;
// [Asm]   r16 -- r43;
// [Asm]   r30 -- r59;
// [Asm]   r19 -- r34;
// [Asm]   r5 -- r19;
// [Asm]   r22 -- r26;
// [Asm]   r17 -- r24;
// [Asm]   r9 -- r30;
// [Asm]   r21 -- r34;
// [Asm]   r32 -- r40;
// [Asm]   r33 -- r35;
// [Asm]   r4 -- r18;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r24 -- r29;
// [Asm]   r0 -- r19;
// [Asm]   r16 -- r18;
// [Asm]   r35 -- r69;
// [Asm]   r35 -- r50;
// [Asm]   r28 -- r63;
// [Asm]   r18 -- r39;
// [Asm]   r18 -- r51;
// [Asm]   r19 -- r50;
// [Asm]   r14 -- r33;
// [Asm]   r18 -- r53;
// [Asm]   r9 -- r11;
// [Asm]   r31 -- r40;
// [Asm]   r32 -- r63;
// [Asm]   r34 -- r63;
// [Asm]   r29 -- r45;
// [Asm]   r37 -- r53;
// [Asm]   r26 -- r54;
// [Asm]   r14 -- r25;
// [Asm]   r24 -- r34;
// [Asm]   r38 -- r40;
// [Asm]   r28 -- r41;
// [Asm]   r9 -- r24;
// [Asm]   r10 -- r15;
// [Asm]   r33 -- r37;
// [Asm]   r8 -- r35;
// [Asm]   r8 -- r18;
// [Asm]   r9 -- r36;
// [Asm]   r0 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r23 -- r42;
// [Asm]   r19 -- r33;
// [Asm]   r15 -- r34;
// [Asm]   r4 -- r7;
// [Asm]   r26 -- r61;
// [Asm]   r16 -- r46;
// [Asm]   r25 -- r42;
// [Asm]   r15 -- r33;
// [Asm]   r35 -- r45;
// [Asm]   r12 -- r16;
// [Asm]   r39 -- r69;
// [Asm]   r6 -- r38;
// [Asm]   r12 -- r17;
// [Asm]   r9 -- r46;
// [Asm]   r23 -- r59;
// [Asm]   r10 -- r32;
// [Asm]   r26 -- r52;
// [Asm]   r0 -- r20;
// [Asm]   r15 -- r19;
// [Asm]   r36 -- r72;
// [Asm]   r26 -- r32;
// [Asm]   r31 -- r47;
// [Asm]   r25 -- r44;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   r41 -- r64;
// [Asm]   r12 -- r35;
// [Asm]   r11 -- r44;
// [Asm]   r40 -- r66;
// [Asm]   r32 -- r51;
// [Asm]   r41 -- r58;
// [Asm]   r24 -- r51;
// [Asm]   r15 -- r41;
// [Asm]   r21 -- r35;
// [Asm]   r9 -- r25;
// [Asm]   r30 -- r42;
// [Asm]   r4 -- r41;
// [Asm]   r38 -- r68;
// [Asm]   r30 -- r51;
// [Asm]   r40 -- r74;
// [Asm]   r5 -- r8;
// [Asm]   r34 -- r46;
// [Asm]   r34 -- r43;
// [Asm]   r30 -- r40;
// [Asm]   r38 -- r55;
// [Asm]   r10 -- r19;
// [Asm]   r20 -- r56;
// [Asm]   r27 -- r32;
// [Asm]   r29 -- r31;
// [Asm]   r22 -- r31;
// [Asm]   r9 -- r31;
// [Asm]   r9 -- r45;
// [Asm]   r11 -- r24;
// [Asm]   r36 -- r63;
// [Asm]   r34 -- r51;
// [Asm]   r4 -- r22;
// [Asm]   r21 -- r54;
// [Asm]   r9 -- r41;
// [Asm]   r17 -- r36;
// [Asm]   r38 -- r62;
// [Asm]   r14 -- r39;
// [Asm]   r31 -- r39;
// [Asm]   r4 -- r35;
// [Asm]   r37 -- r48;
// [Asm]   r37 -- r66;
// [Asm]   r41 -- r69;
// [Asm]   r32 -- r56;
// [Asm]   r36 -- r68;
// [Asm]   r14 -- r28;
// [Asm]   r26 -- r41;
// [Asm]   r26 -- r49;
// [Asm]   r22 -- r41;
// [Asm]   r24 -- r31;
// [Asm]   r24 -- r59;
// [Asm]   r11 -- r48;
// [Asm]   r40 -- r68;
// [Asm]   r35 -- r55;
// [Asm]   r6 -- r18;
// [Asm]   r13 -- r43;
// [Asm]   r39 -- r57;
// [Asm]   r4 -- r28;
// [Asm]   r18 -- r30;
// [Asm]   r37 -- r55;
// [Asm]   r24 -- r52;
// [Asm]   r19 -- r42;
// [Asm]   r29 -- r58;
// [Asm]   r13 -- r18;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r15 -- r44;
// [Asm]   r35 -- r64;
// [Asm]   r23 -- r38;
// [Asm]   r38 -- r52;
// [Asm]   r0 -- r11;
// [Asm]   r13 -- r22;
// [Asm]   r34 -- r65;
// [Asm]   r8 -- r11;
// [Asm]   r10 -- r25;
// [Asm]   r16 -- r42;
// [Asm]   r38 -- r74;
// [Asm]   r24 -- r60;
// [Asm]   r24 -- r56;
// [Asm]   r21 -- r37;
// [Asm]   r29 -- r50;
// [Asm]   r31 -- r53;
// [Asm]   r24 -- r50;
// [Asm]   r30 -- r46;
// [Asm]   r38 -- r71;
// [Asm]   r30 -- r33;
// [Asm]   r27 -- r37;
// [Asm]   r6 -- r32;
// [Asm]   r11 -- r25;
// [Asm]   r40 -- r53;
// [Asm]   r17 -- r20;
// [Asm]   r10 -- r17;
// [Asm]   r29 -- r57;
// [Asm]   r13 -- r24;
// [Asm]   r33 -- r66;
// [Asm]   r16 -- r31;
// [Asm]   r40 -- r77;
// [Asm]   r23 -- r57;
// [Asm]   r20 -- r24;
// [Asm]   r41 -- r61;
// [Asm]   r12 -- r38;
// [Asm]   r25 -- r46;
// [Asm]   r23 -- r49;
// [Asm]   r15 -- r26;
// [Asm]   r38 -- r51;
// [Asm]   r13 -- r46;
// [Asm]   r28 -- r37;
// [Asm]   r30 -- r44;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r15 -- r22;
// [Asm]   r9 -- r29;
// [Asm]   r22 -- r42;
// [Asm]   r14 -- r42;
// [Asm]   r16 -- r19;
// [Asm]   r34 -- r53;
// [Asm]   r23 -- r34;
// [Asm]   r4 -- r20;
// [Asm]   r27 -- r61;
// [Asm]   r39 -- r67;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r16;
// [Asm]   r33 -- r39;
// [Asm]   r4 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r31 -- r57;
// [Asm]   r24 -- r61;
// [Asm]   r19 -- r46;
// [Asm]   r41 -- r49;
// [Asm]   r35 -- r62;
// [Asm]   r9 -- r44;
// [Asm]   r32 -- r45;
// [Asm]   r25 -- r55;
// [Asm]   r12 -- r42;
// [Asm]   r23 -- r47;
// [Asm]   r19 -- r56;
// [Asm]   r41 -- r78;
// [Asm]   r7 -- r37;
// [Asm]   r4 -- r11;
// [Asm]   r30 -- r45;
// [Asm]   r9 -- r38;
// [Asm]   r28 -- r47;
// [Asm]   r15 -- r17;
// [Asm]   r7 -- r33;
// [Asm]   r40 -- r49;
// [Asm]   r25 -- r59;
// [Asm]   r21 -- r25;
// [Asm]   r20 -- r47;
// [Asm]   r12 -- r49;
// [Asm]   r34 -- r36;
// [Asm]   r10 -- r23;
// [Asm]   r22 -- r23;
// [Asm]   r24 -- r35;
// [Asm]   r28 -- r48;
// [Asm]   r18 -- r48;
// [Asm]   r12 -- r39;
// [Asm]   r41 -- r77;
// [Asm]   r19 -- r52;
// [Asm]   r12 -- r30;
// [Asm]   r30 -- r36;
// [Asm]   r31 -- r49;
// [Asm]   r20 -- r49;
// [Asm]   r9 -- r16;
// [Asm]   r4 -- r39;
// [Asm]   r37 -- r61;
// [Asm]   r9 -- r19;
// [Asm]   r11 -- r27;
// [Asm]   r0 -- r7;
// [Asm]   r10 -- r21;
// [Asm]   r16 -- r52;
// [Asm]   r37 -- r41;
// [Asm]   r12 -- r18;
// [Asm]   r33 -- r38;
// [Asm]   r8 -- r31;
// [Asm]   r37 -- r39;
// [Asm]   r26 -- r42;
// [Asm]   r30 -- r54;
// [Asm]   r23 -- r36;
// [Asm]   r12 -- r29;
// [Asm]   r28 -- r59;
// [Asm]   r12 -- r32;
// [Asm]   r5 -- r21;
// [Asm]   r35 -- r58;
// [Asm]   r5 -- r33;
// [Asm]   r4 -- r34;
// [Asm]   r35 -- r49;
// [Asm]   r5 -- r10;
// [Asm]   r13 -- r32;
// [Asm]   r34 -- r40;
// [Asm]   r5 -- r22;
// [Asm]   r22 -- r52;
// [Asm]   r26 -- r44;
// [Asm]   r36 -- r45;
// [Asm]   r25 -- r54;
// [Asm]   r17 -- r35;
// [Asm]   r37 -- r69;
// [Asm]   r40 -- r57;
// [Asm]   r38 -- r46;
// [Asm]   r39 -- r63;
// [Asm]   r13 -- r31;
// [Asm]   r41 -- r70;
// [Asm]   r5 -- r29;
// [Asm]   r11 -- r18;
// [Asm]   r10 -- r40;
// [Asm]   r30 -- r34;
// [Asm]   r29 -- r62;
// [Asm]   r34 -- r42;
// [Asm]   r3 -- r5;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r12;
// [Asm]   r23 -- r53;
// [Asm]   r34 -- r69;
// [Asm]   r20 -- r23;
// [Asm]   r8 -- r24;
// [Asm]   r33 -- r42;
// [Asm]   r13 -- r38;
// [Asm]   r22 -- r53;
// [Asm]   r26 -- r48;
// [Asm]   r19 -- r29;
// [Asm]   r31 -- r55;
// [Asm]   r10 -- r38;
// [Asm]   r36 -- r47;
// [Asm]   r10 -- r12;
// [Asm]   r22 -- r34;
// [Asm]   r39 -- r51;
// [Asm]   r24 -- r57;
// [Asm]   r39 -- r62;
// [Asm]   r16 -- r37;
// [Asm]   r18 -- r54;
// [Asm]   r39 -- r45;
// [Asm]   r37 -- r54;
// [Asm]   r17 -- r54;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r27;
// [Asm]   r21 -- r50;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r30 -- r63;
// [Asm]   r23 -- r24;
// [Asm]   r4 -- r25;
// [Asm]   r35 -- r52;
// [Asm]   r30 -- r50;
// [Asm]   r41 -- r67;
// [Asm]   r13 -- r35;
// [Asm]   r27 -- r35;
// [Asm]   r12 -- r21;
// [Asm]   r25 -- r51;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r17 -- r31;
// [Asm]   r31 -- r68;
// [Asm]   r16 -- r38;
// [Asm]   r16 -- r24;
// [Asm]   r36 -- r53;
// [Asm]   r11 -- r36;
// [Asm]   r4 -- r14;
// [Asm]   r15 -- r30;
// [Asm]   r14 -- r15;
// [Asm]   r18 -- r24;
// [Asm]   r29 -- r47;
// [Asm]   r16 -- r47;
// [Asm]   r38 -- r54;
// [Asm]   r20 -- r51;
// [Asm]   r19 -- r40;
// [Asm]   r40 -- r76;
// [Asm]   r13 -- r15;
// [Asm]   r31 -- r60;
// [Asm]   r40 -- r67;
// [Asm]   r37 -- r43;
// [Asm]   r4 -- r23;
// [Asm]   r28 -- r55;
// [Asm]   r20 -- r26;
// [Asm]   r30 -- r35;
// [Asm]   r25 -- r53;
// [Asm]   r8 -- r27;
// [Asm]   r7 -- r24;
// [Asm]   r32 -- r43;
// [Asm]   r31 -- r66;
// [Asm]   r27 -- r48;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r37 -- r57;
// [Asm]   r40 -- r44;
// [Asm]   r33 -- r36;
// [Asm]   r10 -- r29;
// [Asm]   r28 -- r45;
// [Asm]   r37 -- r47;
// [Asm]   r35 -- r51;
// [Asm]   r21 -- r56;
// [Asm]   r6 -- r22;
// [Asm]   r34 -- r59;
// [Asm]   r28 -- r36;
// [Asm]   r35 -- r41;
// [Asm]   r41 -- r74;
// [Asm]   r20 -- r35;
// [Asm]   r39 -- r59;
// [Asm]   r21 -- r45;
// [Asm]   r21 -- r58;
// [Asm]   r34 -- r67;
// [Asm]   r14 -- r35;
// [Asm]   r27 -- r43;
// [Asm]   r30 -- r53;
// [Asm]   r6 -- r27;
// [Asm]   r30 -- r65;
// [Asm]   r12 -- r20;
// [Asm]   r4 -- r15;
// [Asm]   r35 -- r43;
// [Asm]   r12 -- r41;
// [Asm]   r23 -- r25;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r12 -- r33;
// [Asm]   r32 -- r33;
// [Asm]   r10 -- r43;
// [Asm]   r25 -- r35;
// [Asm]   r8 -- r15;
// [Asm]   r13 -- r23;
// [Asm]   r0 -- r3;
// [Asm]   r30 -- r48;
// [Asm]   r31 -- r44;
// [Asm]   r22 -- r28;
// [Asm]   r7 -- r15;
// [Asm]   r14 -- r21;
// [Asm]   r25 -- r34;
// [Asm]   r39 -- r70;
// [Asm]   r0 -- r37;
// [Asm]   r24 -- r43;
// [Asm]   r34 -- r70;
// [Asm]   r25 -- r31;
// [Asm]   r35 -- r46;
// [Asm]   r37 -- r73;
// [Asm]   r10 -- r46;
// [Asm]   r33 -- r41;
// [Asm]   r7 -- r41;
// [Asm]   r37 -- r49;
// [Asm]   r26 -- r50;
// [Asm]   r11 -- r34;
// [Asm]   r34 -- r64;
// [Asm]   r40 -- r48;
// [Asm]   r18 -- r47;
// [Asm]   r5 -- r39;
// [Asm]   r23 -- r40;
// [Asm]   r13 -- r47;
// [Asm]   r20 -- r28;
// [Asm]   r26 -- r31;
// [Asm]   r7 -- r16;
// [Asm]   r7 -- r18;
// [Asm]   r30 -- r41;
// [Asm]   r22 -- r33;
// [Asm]   r0 -- r30;
// [Asm]   r39 -- r73;
// [Asm]   r7 -- r12;
// [Asm]   r15 -- r20;
// [Asm]   r19 -- r25;
// [Asm]   r20 -- r21;
// [Asm]   r17 -- r46;
// [Asm]   r7 -- r14;
// [Asm]   r28 -- r43;
// [Asm]   r30 -- r55;
// [Asm]   r28 -- r34;
// [Asm]   r6 -- r21;
// [Asm]   r33 -- r60;
// [Asm]   r38 -- r61;
// [Asm]   r4 -- r38;
// [Asm]   r37 -- r46;
// [Asm]   r23 -- r31;
// [Asm]   r19 -- r44;
// [Asm]   r27 -- r59;
// [Asm]   r33 -- r61;
// [Asm]   r26 -- r55;
// [Asm]   r22 -- r40;
// [Asm]   r14 -- r16;
// [Asm]   r7 -- r40;
// [Asm]   r18 -- r55;
// [Asm]   r10 -- r26;
// [Asm]   r27 -- r29;
// [Asm]   r30 -- r38;
// [Asm]   r25 -- r45;
// [Asm]   r19 -- r51;
// [Asm]   r27 -- r55;
// [Asm]   r27 -- r49;
// [Asm]   r36 -- r54;
// [Asm]   r0 -- r25;
// [Asm]   r30 -- r31;
// [Asm]   r11 -- r32;
// [Asm]   r13 -- r50;
// [Asm]   r23 -- r52;
// [Asm]   r36 -- r49;
// [Asm]   r38 -- r67;
// [Asm]   r39 -- r50;
// [Asm]   r30 -- r52;
// [Asm]   r4 -- r40;
// [Asm]   r34 -- r62;
// [Asm]   r40 -- r50;
// [Asm]   r30 -- r56;
// [Asm]   r31 -- r50;
// [Asm]   r38 -- r60;
// [Asm]   r16 -- r17;
// [Asm]   r9 -- r18;
// [Asm]   r13 -- r37;
// [Asm]   r37 -- r40;
// [Asm]   r37 -- r42;
// [Asm]   r13 -- r40;
// [Asm]   r18 -- r50;
// [Asm]   r35 -- r39;
// [Asm]   r32 -- r54;
// [Asm]   r29 -- r55;
// [Asm]   r25 -- r39;
// [Asm]   r15 -- r18;
// [Asm]   r7 -- r34;
// [Asm]   r10 -- r37;
// [Asm]   r18 -- r52;
// [Asm]   r39 -- r68;
// [Asm]   r40 -- r75;
// [Asm]   r35 -- r68;
// [Asm]   r8 -- r37;
// [Asm]   r24 -- r36;
// [Asm]   r7 -- r10;
// [Asm]   r21 -- r32;
// [Asm]   r17 -- r22;
// [Asm]   r24 -- r27;
// [Asm]   r41 -- r65;
// [Asm]   r23 -- r41;
// [Asm]   r36 -- r42;
// [Asm]   r29 -- r63;
// [Asm]   r22 -- r58;
// [Asm]   r28 -- r29;
// [Asm]   r8 -- r39;
// [Asm]   r30 -- r39;
// [Asm]   r39 -- r54;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r14 -- r31;
// [Asm]   r18 -- r31;
// [Asm]   r16 -- r39;
// [Asm]   r8 -- r14;
// [Asm]   r15 -- r28;
// [Asm]   r11 -- r30;
// [Asm]   r34 -- r61;
// [Asm]   r25 -- r50;
// [Asm]   r28 -- r60;
// [Asm]   r36 -- r41;
// [Asm]   r38 -- r73;
// [Asm]   r35 -- r36;
// [Asm]   r12 -- r45;
// [Asm]   r28 -- r40;
// [Asm]   r17 -- r18;
// [Asm]   r33 -- r63;
// [Asm]   r24 -- r48;
// [Asm]   r17 -- r43;
// [Asm]   r19 -- r55;
// [Asm]   r22 -- r37;
// [Asm]   r4 -- r24;
// [Asm]   r11 -- r40;
// [Asm]   r14 -- r17;
// [Asm]   r6 -- r15;
// [Asm]   r32 -- r37;
// [Asm]   r20 -- r39;
// [Asm]   r34 -- r44;
// [Asm]   r9 -- r35;
// [Asm]   r19 -- r54;
// [Asm]   r20 -- r43;
// [Asm]   r33 -- r69;
// [Asm]   r33 -- r54;
// [Asm]   r31 -- r61;
// [Asm]   r9 -- r15;
// [Asm]   r35 -- r60;
// [Asm]   r16 -- r45;
// [Asm]   r39 -- r55;
// [Asm]   r31 -- r64;
// [Asm]   r23 -- r60;
// [Asm]   r12 -- r15;
// [Asm]   r14 -- r23;
// [Asm]   r0 -- r41;
// [Asm]   r25 -- r27;
// [Asm]   r7 -- r26;
// [Asm]   r40 -- r59;
// [Asm]   r31 -- r48;
// [Asm]   r28 -- r52;
// [Asm]   r29 -- r52;
// [Asm]   r9 -- r42;
// [Asm]   r36 -- r50;
// [Asm]   r19 -- r24;
// [Asm]   r8 -- r38;
// [Asm]   r19 -- r35;
// [Asm]   r33 -- r48;
// [Asm]   r32 -- r65;
// [Asm]   r14 -- r29;
// [Asm]   r14 -- r24;
// [Asm]   r7 -- r9;
// [Asm]   r40 -- r58;
// [Asm]   r26 -- r47;
// [Asm]   r36 -- r67;
// [Asm]   r10 -- r34;
// [Asm]   r41 -- r66;
// [Asm]   r15 -- r27;
// [Asm]   r6 -- r40;
// [Asm]   r20 -- r46;
// [Asm]   r30 -- r37;
// [Asm]   r22 -- r49;
// [Asm]   r20 -- r25;
// [Asm]   r7 -- r28;
// [Asm]   r32 -- r38;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r20 -- r41;
// [Asm]   r34 -- r54;
// [Asm]   r33 -- r47;
// [Asm]   r18 -- r32;
// [Asm]   r11 -- r42;
// [Asm]   r19 -- r53;
// [Asm]   r26 -- r35;
// [Asm]   r11 -- r33;
// [Asm]   r13 -- r34;
// [Asm]   r18 -- r19;
// [Asm]   r22 -- r30;
// [Asm]   r21 -- r31;
// [Asm]   r19 -- r23;
// [Asm]   r32 -- r50;
// [Asm]   r17 -- r51;
// [Asm]   r8 -- r13;
// [Asm]   r35 -- r65;
// [Asm]   r31 -- r54;
// [Asm]   r12 -- r31;
// [Asm]   r32 -- r39;
// [Asm]   r32 -- r49;
// [Asm]   r34 -- r66;
// [Asm]   r27 -- r58;
// [Asm]   r23 -- r28;
// [Asm]   r20 -- r57;
// [Asm]   r15 -- r40;
// [Asm]   r6 -- r42;
// [Asm]   r10 -- r39;
// [Asm]   r37 -- r68;
// [Asm]   r18 -- r41;
// [Asm]   r35 -- r40;
// [Asm]   r21 -- r49;
// [Asm]   r27 -- r64;
// [Asm]   r20 -- r54;
// [Asm]   r37 -- r52;
// [Asm]   r28 -- r62;
// [Asm]   r38 -- r69;
// [Asm]   r21 -- r41;
// [Asm]   r7 -- r31;
// [Asm]   r17 -- r52;
// [Asm]   r4 -- r17;
// [Asm]   r23 -- r44;
// [Asm]   r17 -- r30;
// [Asm]   r21 -- r55;
// [Asm]   r15 -- r16;
// [Asm]   r10 -- r24;
// [Asm]   r17 -- r28;
// [Asm]   r41 -- r53;
// [Asm]   r24 -- r33;
// [Asm]   r5 -- r40;
// [Asm]   r12 -- r26;
// [Asm]   r19 -- r20;
// [Asm]   r10 -- r14;
// [Asm]   r21 -- r24;
// [Asm]   r26 -- r46;
// [Asm]   r15 -- r39;
// [Asm]   r27 -- r57;
// [Asm]   r28 -- r32;
// [Asm]   r24 -- r40;
// [Asm]   r41 -- r72;
// [Asm]   r23 -- r51;
// [Asm]   r39 -- r41;
// [Asm]   r40 -- r55;
// [Asm]   r21 -- r38;
// [Asm]   r32 -- r60;
// [Asm]   r31 -- r45;
// [Asm]   r27 -- r51;
// [Asm]   r7 -- r25;
// [Asm]   r35 -- r42;
// [Asm]   r23 -- r56;
// [Asm]   r28 -- r30;
// [Asm]   r14 -- r40;
// [Asm]   r29 -- r41;
// [Asm]   r9 -- r26;
// [Asm]   r36 -- r60;
// [Asm]   r27 -- r28;
// [Asm]   r30 -- r64;
// [Asm]   r27 -- r34;
// [Asm]   r18 -- r35;
// [Asm]   r18 -- r45;
// [Asm]   r32 -- r69;
// [Asm]   r7 -- r35;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r29 -- r48;
// [Asm]   r31 -- r35;
// [Asm]   r8 -- r34;
// [Asm]   r29 -- r66;
// [Asm]   r26 -- r28;
// [Asm]   r19 -- r45;
// [Asm]   r22 -- r25;
// [Asm]   r5 -- r6;
// [Asm]   r33 -- r50;
// [Asm]   r37 -- r63;
// [Asm]   r32 -- r62;
// [Asm]   r16 -- r33;
// [Asm]   r10 -- r33;
// [Asm]   r34 -- r56;
// [Asm]   r25 -- r49;
// [Asm]   r9 -- r12;
// [Asm]   r27 -- r50;
// [Asm]   r22 -- r27;
// [Asm]   r41 -- r71;
// [Asm]   r40 -- r54;
// [Asm]   r8 -- r23;
// [Asm]   r39 -- r60;
// [Asm]   r37 -- r60;
// [Asm]   r19 -- r47;
// [Asm]   r10 -- r22;
// [Asm]   r38 -- r57;
// [Asm]   r37 -- r65;
// [Asm]   r27 -- r46;
// [Asm]   r15 -- r37;
// [Asm]   r39 -- r40;
// [Asm]   r31 -- r58;
// [Asm]   r35 -- r37;
// [Asm]   r18 -- r20;
// [Asm]   r11 -- r15;
// [Asm]   r14 -- r36;
// [Asm]   r29 -- r56;
// [Asm]   r23 -- r55;
// [Asm]   r40 -- r64;
// [Asm]   r8 -- r32;
// [Asm]   r40 -- r62;
// [Asm]   r32 -- r66;
// [Asm]   r39 -- r49;
// [Asm]   r24 -- r25;
// [Asm]   r15 -- r47;
// [Asm]   r40 -- r52;
// [Asm]   r21 -- r46;
// [Asm]   r29 -- r49;
// [Asm]   r14 -- r44;
// [Asm]   r38 -- r45;
// [Asm]   r5 -- r36;
// [Asm]   r4 -- r13;
// [Asm]   r27 -- r62;
// [Asm]   r29 -- r61;
// [Asm]   r16 -- r30;
// [Asm]   r36 -- r40;
// [Asm]   r34 -- r41;
// [Asm]   r34 -- r35;
// [Asm]   r28 -- r31;
// [Asm]   r14 -- r26;
// [Asm]   r6 -- r41;
// [Asm]   r26 -- r63;
// [Asm]   r19 -- r30;
// [Asm]   r16 -- r32;
// [Asm]   r9 -- r40;
// [Asm]   r16 -- r51;
// [Asm]   r20 -- r52;
// [Asm]   r7 -- r20;
// [Asm]   r13 -- r16;
// [Asm]   r31 -- r41;
// [Asm]   r21 -- r57;
// [Asm]   r18 -- r40;
// [Asm]   r11 -- r23;
// [Asm]   r27 -- r63;
// [Asm]   r27 -- r53;
// [Asm]   r30 -- r47;
// [Asm]   r13 -- r48;
// [Asm]   r16 -- r50;
// [Asm]   r11 -- r46;
// [Asm]   r39 -- r74;
// [Asm]   r8 -- r25;
// [Asm]   r40 -- r61;
// [Asm]   r19 -- r37;
// [Asm]   r33 -- r45;
// [Asm]   r5 -- r38;
// [Asm]   r34 -- r58;
// [Asm]   r11 -- r37;
// [Asm]   r24 -- r26;
// [Asm]   r38 -- r49;
// [Asm]   r23 -- r45;
// [Asm]   r13 -- r19;
// [Asm]   r34 -- r68;
// [Asm]   r28 -- r49;
// [Asm]   r10 -- r16;
// [Asm]   r23 -- r26;
// [Asm]   r40 -- r65;
// [Asm]   r6 -- r19;
// [Asm]   r22 -- r35;
// [Asm]   r41 -- r52;
// [Asm]   r31 -- r46;
// [Asm]   r28 -- r57;
// [Asm]   r7 -- r22;
// [Asm]   r22 -- r39;
// [Asm]   r7 -- r19;
// [Asm]   r38 -- r41;
// [Asm]   r23 -- r30;
// [Asm]   r27 -- r47;
// [Asm]   r33 -- r64;
// [Asm]   r13 -- r14;
// [Asm]   r12 -- r22;
// [Asm]   r11 -- r41;
// [Asm]   r36 -- r56;
// [Asm]   r4 -- r36;
// [Asm]   r15 -- r24;
// [Asm]   r39 -- r72;
// [Asm]   r22 -- r32;
// [Asm]   r6 -- r39;
// [Asm]   r31 -- r63;
// [Asm]   r31 -- r56;
// [Asm]   r5 -- r25;
// [Asm]   r10 -- r36;
// [Asm]   r20 -- r42;
// [Asm]   r41 -- r50;
// [Asm]   r31 -- r33;
// [Asm]   r13 -- r39;
// [Asm]   r17 -- r38;
// [Asm]   r4 -- r10;
// [Asm]   r17 -- r50;
// [Asm]   r32 -- r61;
// [Asm]   r39 -- r48;
// [Asm]   r11 -- r28;
// [Asm]   r27 -- r52;
// [Asm]   r30 -- r62;
// [Asm]   r11 -- r29;
// [Asm]   r36 -- r51;
// [Asm]   r20 -- r55;
// [Asm]   r33 -- r68;
// [Asm]   r36 -- r38;
// [Asm]   r41 -- r45;
// [Asm]   r24 -- r39;
// [Asm]   r25 -- r28;
// [Asm]   r14 -- r20;
// [Asm]   r35 -- r48;
// [Asm]   r34 -- r50;
// [Asm]   r6 -- r36;
// [Asm]   r26 -- r59;
// [Asm]   r29 -- r46;
// [Asm]   r33 -- r65;
// [Asm]   r13 -- r44;
// [Asm]   r36 -- r61;
// [Asm]   r37 -- r38;
// [Asm]   r39 -- r71;
// [Asm]   r22 -- r56;
// [Asm]   r22 -- r54;
// [Asm]   r19 -- r39;
// [Asm]   r37 -- r59;
// [Asm]   r41 -- r76;
// [Asm]   r28 -- r61;
// [Asm]   r10 -- r13;
// [Asm]   r24 -- r32;
// [Asm]   r17 -- r41;
// [Asm]   r31 -- r36;
// [Asm]   r39 -- r42;
// [Asm]   r5 -- r42;
// [Asm]   r18 -- r27;
// [Asm]   r29 -- r51;
// [Asm]   r28 -- r65;
// [Asm]   r13 -- r28;
// [Asm]   r10 -- r47;
// [Asm]   r27 -- r39;
// [Asm]   r17 -- r33;
// [Asm]   r38 -- r47;
// [Asm]   r14 -- r30;
// [Asm]   r14 -- r19;
// [Asm]   r32 -- r53;
// [Asm]   r4 -- r33;
// [Asm]   r10 -- r20;
// [Asm]   r18 -- r26;
// [Asm]   r0 -- r40;
// [Asm]   r35 -- r44;
// [Asm]   r28 -- r56;
// [Asm]   r38 -- r66;
// [Asm]   r12 -- r28;
// [Asm]   r25 -- r52;
// [Asm]   r40 -- r63;
// [Asm]   r9 -- r28;
// [Asm]   r20 -- r32;
// [Asm]   r6 -- r43;
// [Asm]   r6 -- r10;
// [Asm]   r25 -- r43;
// [Asm]   r33 -- r52;
// [Asm]   r12 -- r40;
// [Asm]   r23 -- r32;
// [Asm]   r41 -- r51;
// [Asm]   r36 -- r62;
// [Asm]   r4 -- r12;
// [Asm]   r32 -- r59;
// [Asm]   r40 -- r71;
// [Asm]   r21 -- r22;
// [Asm]   r11 -- r47;
// [Asm]   r33 -- r57;
// [Asm]   r10 -- r35;
// [Asm]   r16 -- r23;
// [Asm]   r14 -- r22;
// [Asm]   r15 -- r38;
// [Asm]   r30 -- r49;
// [Asm]   r35 -- r72;
// [Asm]   r37 -- r50;
// [Asm]   r37 -- r64;
// [Asm]   r29 -- r54;
// [Asm]   r25 -- r33;
// [Asm]   r23 -- r33;
// [Asm]   r26 -- r62;
// [Asm]   r15 -- r46;
// [Asm]   r4 -- r16;
// [Asm]   r6 -- r11;
// [Asm]   r25 -- r36;
// [Asm]   r29 -- r32;
// [Asm]   r20 -- r31;
// [Asm]   r4 -- r5;
// [Asm]   r34 -- r52;
// [Asm]   r39 -- r64;
// [Asm]   r13 -- r42;
// [Asm]   r36 -- r44;
// [Asm]   r0 -- r24;
// [Asm]   r41 -- r62;
// [Asm]   r31 -- r67;
// [Asm]   r12 -- r36;
// [Asm]   r18 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r24 -- r47;
// [Asm]   r26 -- r36;
// [Asm]   r13 -- r26;
// [Asm]   r41 -- r48;
// [Asm]   r17 -- r26;
// [Asm]   r35 -- r53;
// [Asm]   r34 -- r57;
// [Asm]   r8 -- r43;
// [Asm]   r25 -- r30;
// [Asm]   r39 -- r65;
// [Asm]   r25 -- r60;
// [Asm]   r29 -- r59;
// [Asm]   r22 -- r38;
// [Asm]   r10 -- r41;
// [Asm]   r16 -- r40;
// [Asm]   r29 -- r65;
// [Asm]   r0 -- r35;
// [Asm]   r21 -- r47;
// [Asm]   r16 -- r28;
// [Asm]   r6 -- r12;
// [Asm]   r13 -- r25;
// [Asm]   r18 -- r36;
// [Asm]   r6 -- r24;
// [Asm]   r22 -- r24;
// [Asm]   r24 -- r38;
// [Asm]   r28 -- r53;
// [Asm]   r24 -- r30;
// [Asm]   r28 -- r44;
// [Asm]   r14 -- r47;
// [Asm]   r25 -- r58;
// [Asm]   r20 -- r38;
// [Asm]   r27 -- r56;
// [Asm]   r6 -- r37;
// [Asm]   r10 -- r28;
// [Asm]   r19 -- r32;
// [Asm]   r9 -- r34;
// [Asm]   r39 -- r53;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r34 -- r37;
// [Asm]   r9 -- r33;
// [Asm]   r0 -- r8;
// [Asm]   r6 -- r28;
// [Asm]   r25 -- r41;
// [Asm]   r38 -- r63;
// [Asm]   r11 -- r39;
// [Asm]   r26 -- r30;
// [Asm]   r7 -- r11;
// [Asm]   r21 -- r42;
// [Asm]   r9 -- r37;
// [Asm]   r16 -- r44;
// [Asm]   r34 -- r47;
// [Asm]   r7 -- r39;
// [Asm]   r14 -- r45;
// [Asm]   r7 -- r43;
// [Asm]   r30 -- r60;
// [Asm]   r11 -- r26;
// [Asm]   r12 -- r37;
// [Asm]   r40 -- r41;
// [Asm]   r37 -- r45;
// [Asm]   r9 -- r32;
// [Asm]   r0 -- r12;
// [Asm]   r35 -- r54;
// [Asm]   r35 -- r63;
// [Asm]   r18 -- r38;
// [Asm]   r12 -- r14;
// [Asm]   r33 -- r44;
// [Asm]   r31 -- r32;
// [Asm]   r12 -- r27;
// [Asm]   r17 -- r45;
// [Asm]   r23 -- r48;
// [Asm]   r16 -- r48;
// [Asm]   r5 -- r30;
// [Asm]   r33 -- r51;
// [Asm]   r26 -- r60;
// [Asm]   r36 -- r71;
// [Asm]   r33 -- r56;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r17 -- r47;
// [Asm]   r14 -- r51;
// [Asm]   r20 -- r33;
// [Asm]   r33 -- r40;
// [Asm]   r32 -- r36;
// [Asm]   r26 -- r39;
// [Asm]   r15 -- r50;
// [Asm]   r37 -- r51;
// [Asm]   r28 -- r46;
// [Asm]   r6 -- r35;
// [Asm]   r14 -- r43;
// [Asm]   r11 -- r14;
// [Asm]   r13 -- r36;
// [Asm]   r5 -- r17;
// [Asm]   r18 -- r42;
// [Asm]   r37 -- r71;
// [Asm]   r41 -- r55;
// [Asm]   r39 -- r61;
// [Asm]   r15 -- r45;
// [Asm]   r38 -- r42;
// [Asm]   r36 -- r46;
// [Asm]   r5 -- r18;
// [Asm]   r15 -- r36;
// [Asm]   r22 -- r59;
// [Asm]   r36 -- r70;
// [Asm]   r0 -- r23;
// [Asm]   r18 -- r21;
// [Asm]   r11 -- r45;
// [Asm]   r40 -- r51;
// [Asm]   r9 -- r17;
// [Asm]   r35 -- r70;
// [Asm]   r7 -- r27;
// [Asm]   r33 -- r58;
// [Asm]   r36 -- r58;
// [Asm]   r17 -- r39;
// [Asm]   r35 -- r66;
// [Asm]   r18 -- r34;
// [Asm]   r41 -- r57;
// [Asm]   r18 -- r28;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r28 -- r39;
// [Asm]   r16 -- r29;
// [Asm]   r40 -- r46;
// [Asm]   r21 -- r33;
// [Asm]   r17 -- r49;
// [Asm]   r11 -- r13;
// [Asm]   r10 -- r45;
// [Asm]   r39 -- r75;
// [Asm]   r0 -- r9;
// [Asm]   r24 -- r58;
// [Asm]   r25 -- r32;
// [Asm]   r40 -- r47;
// [Asm]   r24 -- r42;
// [Asm]   r9 -- r23;
// [Asm]   r19 -- r22;
// [Asm]   r32 -- r46;
// [Asm]   r41 -- r68;
// [Asm]   r7 -- r38;
// [Asm]   r18 -- r46;
// [Asm]   r23 -- r54;
// [Asm]   r13 -- r41;
// [Asm]   r36 -- r59;
// [Asm]   r20 -- r50;
// [Asm]   r23 -- r58;
// [Asm]   r41 -- r42;
// [Asm]   r10 -- r42;
// [Asm]   r0 -- r10;
// [Asm]   r16 -- r41;
// [Asm]   r15 -- r52;
// [Asm]   r18 -- r33;
// [Asm]   r15 -- r23;
// [Asm]   r20 -- r40;
// [Asm]   r16 -- r21;
// [Asm]   r21 -- r39;
// [Asm]   r0 -- r4;
// [Asm]   r28 -- r38;
// [Asm]   r23 -- r37;
// [Asm]   r20 -- r45;
// [Asm]   r27 -- r45;
// [Asm]   r14 -- r37;
// [Asm]   r17 -- r34;
// [Asm]   r8 -- r30;
// [Asm]   r24 -- r53;
// [Asm]   r37 -- r72;
// [Asm]   r14 -- r32;
// [Asm]   r27 -- r31;
// [Asm]   r22 -- r43;
// [Asm]   r0 -- r18;
// [Asm]   r26 -- r34;
// [Asm]   r38 -- r59;
// [Asm]   r7 -- r29;
// [Asm]   r11 -- r20;
// [Asm]   r20 -- r53;
// [Asm]   r17 -- r29;
// [Asm]   r33 -- r49;
// [Asm]   r17 -- r48;
// [Asm]   r22 -- r47;
// [Asm]   r29 -- r60;
// [Asm]   r30 -- r32;
// [Asm]   r0 -- r34;
// [Asm]   r11 -- r16;
// [Asm]   r6 -- r30;
// [Asm]   r0 -- r14;
// [Asm]   r20 -- r29;
// [Asm]   r37 -- r67;
// [Asm]   r11 -- r12;
// [Asm]   r14 -- r41;
// [Asm]   r11 -- r22;
// [Asm]   r34 -- r39;
// [Asm]   r34 -- r49;
// [Asm]   r26 -- r56;
// [Asm]   r17 -- r25;
// [Asm]   r31 -- r42;
// [Asm]   r8 -- r20;
// [Asm]   r23 -- r39;
// [Asm]   r24 -- r28;
// [Asm]   r33 -- r46;
// [Asm]   r14 -- r46;
// [Asm]   r6 -- r20;
// [Asm]   r21 -- r23;
// [Asm]   r0 -- r31;
// [Asm]   r34 -- r38;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r41;
// [Asm]   r14 -- r50;
// [Asm]   r30 -- r43;
// [Asm]   r19 -- r28;
// [Asm]   r20 -- r48;
// [Asm]   r30 -- r58;
// [Asm]   r27 -- r38;
// [Asm]   r39 -- r46;
// [Asm]   r31 -- r37;
// [Asm]   r22 -- r55;
// [Asm]   r5 -- r9;
// [Asm]   r21 -- r30;
// [Asm]   r28 -- r42;
// [Asm]   r41 -- r44;
// [Asm]   r4 -- r32;
// [Asm]   r29 -- r42;
// [Asm]   r16 -- r35;
// [Asm]   r0 -- r39;
// [Asm]   r10 -- r11;
// [Asm]   r24 -- r55;
// [Asm]   r0 -- r5;
// [Asm]   r13 -- r17;
// [Asm]   r31 -- r62;
// [Asm]   r19 -- r43;
// [Asm]   r41 -- r43;
// [Asm]   r32 -- r58;
// [Asm]   r8 -- r10;
// [Asm]   r38 -- r58;
// [Asm]   r8 -- r26;
// [Asm]   r27 -- r33;
// [Asm]   r15 -- r48;
// [Asm]   r4 -- r6;
// [Asm]   r37 -- r74;
// [Asm]   r9 -- r13;
// [Asm]   r16 -- r49;
// [Asm]   r26 -- r53;
// [Asm]   r18 -- r23;
// [Asm]   r36 -- r52;
// [Asm]   r31 -- r59;
// [Asm]   r21 -- r43;
// [Asm]   r41 -- r56;
// [Asm]   r22 -- r36;
// [Asm]   r38 -- r43;
// [Asm]   r38 -- r53;
// [Asm]   r25 -- r61;
// [Asm]   r26 -- r33;
// [Asm]   r5 -- r41;
// [Asm]   r33 -- r43;
// [Asm]   r0 -- r13;
// [Asm]   r16 -- r25;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r40 -- r45;
// [Asm]   r38 -- r48;
// [Asm]   r26 -- r45;
// [Asm]   r32 -- r47;
// [Asm]   r14 -- r27;
// [Asm]   r14 -- r38;
// [Asm]   r17 -- r40;
// [Asm]   r21 -- r53;
// [Asm]   r9 -- r27;
// [Asm]   r26 -- r40;
// [Asm]   r27 -- r44;
// [Asm]   r33 -- r62;
// [Asm]   r25 -- r62;
// [Asm]   r0 -- r17;
// [Asm]   r19 -- r38;
// [Asm]   r36 -- r65;
// [Asm]   r26 -- r58;
// [Asm]   r18 -- r25;
// [Asm]   r28 -- r54;
// [Asm]   r32 -- r67;
// [Asm]   r13 -- r49;
// [Asm]   r38 -- r65;
// [Asm]   r6 -- r29;
// [Asm]   r11 -- r31;
// [Asm]   r25 -- r56;
// [Asm]   r38 -- r44;
// [Asm]   r19 -- r31;
// [Asm]   r0 -- r22;
// [Asm]   r4 -- r27;
// [Asm]   r19 -- r21;
// [Asm]   r38 -- r75;
// [Asm]   r29 -- r36;
// [Asm]   r32 -- r41;
// [Asm]   r22 -- r50;
// [Asm]   r12 -- r19;
// [Asm]   r38 -- r64;
// [Asm]   r27 -- r30;
// [Asm]   r29 -- r43;
// [Asm]   r30 -- r57;
// [Asm]   r4 -- r21;
// [Asm]   r29 -- r38;
// [Asm]   r12 -- r24;
// [Asm]   r41 -- r47;
// [Asm]   r6 -- r13;
// [Asm]   r16 -- r34;
// [Asm]   r31 -- r51;
// [Asm]   r12 -- r44;
// [Asm]   r35 -- r47;
// [Asm]   r25 -- r38;
// [Asm]   r8 -- r17;
// [Asm]   r32 -- r57;
// [Asm]   r33 -- r70;
// [Asm]   r3 -- r4;
// [Asm]   r33 -- r67;
// [Asm]   r19 -- r27;
// [Asm]   r34 -- r55;
// [Asm]   r0 -- r2;
// [Asm]   r12 -- r46;
// [Asm]   r21 -- r27;
// [Asm]   r25 -- r47;
// [Asm]   r28 -- r58;
// [Asm]   r35 -- r57;
// [Asm]   r36 -- r64;
// [Asm]   r28 -- r64;
// [Asm]   r40 -- r69;
// [Asm]   r6 -- r31;
// [Asm]   r40 -- r43;
// [Asm]   r8 -- r44;
// [Asm]   r36 -- r66;
// [Asm]   r29 -- r64;
// [Asm]   r36 -- r55;
// [Asm]   r10 -- r30;
// [Asm]   r9 -- r10;
// [Asm]   r5 -- r14;
// [Asm]   r12 -- r47;
// [Asm]   r31 -- r34;
// [Asm]   r21 -- r36;
// [Asm]   r13 -- r21;
// [Asm]   r7 -- r8;
// [Asm]   r24 -- r37;
// [Asm]   r37 -- r58;
// [Asm]   r13 -- r29;
// [Asm]   r22 -- r46;
// [Asm]   r34 -- r60;
// [Asm]   r32 -- r68;
// [Asm]   r4 -- r9;
// [Asm]   r16 -- r22;
// [Asm]   r16 -- r27;
// [Asm]   r29 -- r53;
// [Asm]   r5 -- r34;
// [Asm]   r29 -- r35;
// [Asm]   r36 -- r37;
// [Asm]   r36 -- r73;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r14 -- r18;
// [Asm]   r15 -- r29;
// [Asm]   r11 -- r17;
// [Asm]   r15 -- r49;
// [Asm]   r28 -- r51;
// [Asm]   r5 -- r20;
// [Asm]   r4 -- r37;
// [Asm]   r36 -- r39;
// [Asm]   r37 -- r56;
// [Asm]   r21 -- r40;
// [Asm]   r13 -- r45;
// [Asm]   r20 -- r37;
// [Asm]   r24 -- r49;
// [Asm]   r22 -- r57;
// [Asm]   r5 -- r13;
// [Asm]   r22 -- r29;
// [Asm]   r7 -- r13;
// [Asm]   r39 -- r43;
// [Asm]   r0 -- r21;
// [Asm]   r24 -- r54;
// [Asm]   r31 -- r38;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r33 -- r53;
// [Asm]   r16 -- r26;
// [Asm]   r18 -- r22;
// [Asm]   r23 -- r27;
// [Asm]   r19 -- r26;
// [Asm]   r16 -- r53;
// [Asm]   r21 -- r44;
// [Asm]   r6 -- r26;
// [Asm]   r5 -- r16;
// [Asm]   r39 -- r56;
// [Asm]   r41 -- r54;
// [Asm]   r41 -- r59;
// [Asm]   r39 -- r58;
// [Asm]   r31 -- r52;
// [Asm]   r13 -- r20;
// [Asm]   r15 -- r32;
// [Asm]   r40 -- r70;
// [Asm]   r17 -- r37;
// [Asm]   r26 -- r51;
// [Asm]   r22 -- r45;
// [Asm]   r32 -- r42;
// [Asm]   r21 -- r52;
// [Asm]   r33 -- r34;
// [Asm]   r9 -- r22;
// [Asm]   r39 -- r44;
// [Asm]   r35 -- r56;
// [Asm]   r17 -- r23;
// [Asm]   r0 -- r33;
// [Asm]   r41 -- r46;
// [Asm]   r29 -- r44;
// [Asm]   r19 -- r49;
// [Asm]   r34 -- r45;
// [Asm]   r41 -- r73;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r37;
// [Asm]   r32 -- r64;
// [Asm]   r37 -- r44;
// [Asm]   r29 -- r37;
// [Asm]   r8 -- r40;
// [Asm]   r10 -- r44;
// [Asm]   r9 -- r43;
// [Asm]   r28 -- r35;
// [Asm]   r17 -- r53;
// [Asm]   r29 -- r39;
// [Asm]   r21 -- r51;
// [Asm]   r6 -- r17;
// [Asm]   r38 -- r70;
// [Asm]   r21 -- r26;
// [Asm]   r33 -- r55;
// [Asm]   r29 -- r34;
// [Asm]   r36 -- r48;
// [Asm]   r22 -- r48;
// [Asm]   r39 -- r52;
// [Asm]   r36 -- r43;
// [Asm]   r11 -- r38;
// [Asm]   r26 -- r37;
// [Asm]   r26 -- r29;
// [Asm]   r5 -- r27;
// [Asm]   r23 -- r43;
// [Asm]   r12 -- r48;
// [Asm]   r38 -- r39;
// [Asm]   r7 -- r23;
// [Asm]   r31 -- r43;
// [Asm]   r4 -- r26;
// [Asm]   r17 -- r32;
// [Asm]   r20 -- r44;
// [Asm]   r0 -- r27;
// [Asm]   r41 -- r75;
// [Asm]   r22 -- r51;
// [Asm]   r14 -- r48;
// [Asm]   r25 -- r40;
// [Asm]   r13 -- r27;
// [Asm]   r5 -- r15;
// [Asm]   comment = "0:v2-> 1:a1-> 2:a2-> 4:v3-> 3:a3-> 5:v4-> 6:v5-> 7:v6-> 8:v7-> 9:v8-> 10:v9-> 11:v10-> 12:v11-> 13:v12-> 14:v13-> 15:v14-> 16:v15-> 17:v16-> 18:v17-> 19:v18-> 20:v19-> 21:v20-> 22:v21-> 23:v22-> 24:v23-> 25:v24-> 26:v25-> 27:v26-> 28:v27-> 29:v28-> 30:v29-> 31:v30-> 32:v31-> 33:v32-> 34:v33-> 35:v34-> 36:v35-> 37:v36-> 38:v37-> 39:v38-> 40:v39-> 41:v40-> 42:v41-> 43:v42-> 44:v43-> 45:v44-> 46:v45-> 47:v46-> 48:v47-> 49:v48-> 50:v49-> 51:v50-> 52:v51-> 53:v52-> 54:v53-> 55:v54-> 56:v55-> 57:v56-> 58:v57-> 59:v58-> 60:v59-> 61:v60-> 62:v61-> 63:v62-> 64:v63-> 65:v64-> 66:v65-> 67:v66-> 68:v67-> 69:v68-> 70:v69-> 71:v70-> 72:v71-> 73:v72-> 74:v73-> 75:v74-> 76:v75-> 77:v76-> 78:v77-> 79:v78-> 80:v79-> 81:a0"
// [Asm]   comment = "v2<-a0;v45<-a0;v75<-a0;v58<-a0;v8<-a6;v25<-s10;v43<-a0;v52<-a0;v55<-a0;v9<-a7;v4<-a2;v53<-a0;v23<-s8;v42<-a0;v79<-a0;v16<-s1;v64<-a0;v51<-a0;v78<-a0;v19<-s4;v60<-a0;v22<-s7;v66<-a0;v74<-a0;v76<-a0;v61<-a0;v10<-t0;v57<-a0;v13<-t3;v50<-a0;v77<-a0;v54<-a0;v15<-s0;v20<-s5;v59<-a0;v72<-a0;v71<-a0;v46<-a0;v5<-a3;v12<-t2;v41<-a0;v3<-a1;v6<-a4;v63<-a0;v7<-a5;v65<-a0;v14<-t4;v48<-a0;v73<-a0;v56<-a0;v67<-a0;v69<-a0;v11<-t1;v47<-a0;v70<-a0;v68<-a0;v21<-s6;v49<-a0;v44<-a0;v24<-s9;v62<-a0;v17<-s2;v18<-s3;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of f1l0_0"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   add v6, v2, v3 ->   add a4, a0, a1
// [Asm] subst   add v7, v2, v4 ->   add a5, a0, a2
// [Asm] subst   add v8, v2, v5 ->   add a6, a0, a3
// [Asm] subst   add v9, v3, v4 ->   add a7, a1, a2
// [Asm] subst   add v10, v3, v5 ->   add t0, a1, a3
// [Asm] subst   add v11, v4, v5 ->   add t1, a2, a3
// [Asm] subst   add v12, v6, v7 ->   add t2, a4, a5
// [Asm] subst   add v13, v6, v8 ->   add t3, a4, a6
// [Asm] subst   add v14, v6, v9 ->   add t4, a4, a7
// [Asm] subst   add v15, v6, v10 ->   add s0, a4, t0
// [Asm] subst   add v16, v6, v11 ->   add s1, a4, t1
// [Asm] subst   add v17, v7, v8 ->   add s2, a5, a6
// [Asm] subst   add v18, v7, v9 ->   add s3, a5, a7
// [Asm] subst   add v19, v7, v10 ->   add s4, a5, t0
// [Asm] subst   add v20, v7, v11 ->   add s5, a5, t1
// [Asm] subst   add v21, v8, v9 ->   add s6, a6, a7
// [Asm] subst   add v22, v8, v10 ->   add s7, a6, t0
// [Asm] subst   add v23, v8, v11 ->   add s8, a6, t1
// [Asm] subst   add v24, v9, v10 ->   add s9, a7, t0
// [Asm] subst   add v25, v9, v11 ->   add s10, a7, t1
// [Asm] subst   add v26, v10, v11 ->   add t5, t0, t1
// [Asm] subst   add v27, v12, v13 ->   add t5, t2, t3
// [Asm] subst   add v28, v12, v14 ->   add t5, t2, t4
// [Asm] subst   add v29, v12, v15 ->   add t5, t2, s0
// [Asm] subst   add v30, v12, v16 ->   add t5, t2, s1
// [Asm] subst   add v31, v12, v17 ->   add t5, t2, s2
// [Asm] subst   add v32, v12, v18 ->   add t5, t2, s3
// [Asm] subst   add v33, v12, v19 ->   add t5, t2, s4
// [Asm] subst   add v34, v12, v20 ->   add t5, t2, s5
// [Asm] subst   add v35, v12, v21 ->   add t5, t2, s6
// [Asm] subst   add v36, v12, v22 ->   add t5, t2, s7
// [Asm] subst   add v37, v12, v23 ->   add t5, t2, s8
// [Asm] subst   add v38, v12, v24 ->   add t5, t2, s9
// [Asm] subst   add v39, v12, v25 ->   add t5, t2, s10
// [Asm] subst   add v40, v12, v26 ->   add t5, t2, t5
// [Asm] subst   add v41, v2, v3 ->   add a0, a0, a1
// [Asm] subst   add v42, v41, v4 ->   add a0, a0, a2
// [Asm] subst   add v43, v42, v5 ->   add a0, a0, a3
// [Asm] subst   add v44, v43, v6 ->   add a0, a0, a4
// [Asm] subst   add v45, v44, v7 ->   add a0, a0, a5
// [Asm] subst   add v46, v45, v8 ->   add a0, a0, a6
// [Asm] subst   add v47, v46, v9 ->   add a0, a0, a7
// [Asm] subst   add v48, v47, v10 ->   add a0, a0, t0
// [Asm] subst   add v49, v48, v11 ->   add a0, a0, t1
// [Asm] subst   add v50, v49, v12 ->   add a0, a0, t2
// [Asm] subst   add v51, v50, v13 ->   add a0, a0, t3
// [Asm] subst   add v52, v51, v14 ->   add a0, a0, t4
// [Asm] subst   add v53, v52, v15 ->   add a0, a0, s0
// [Asm] subst   add v54, v53, v16 ->   add a0, a0, s1
// [Asm] subst   add v55, v54, v17 ->   add a0, a0, s2
// [Asm] subst   add v56, v55, v18 ->   add a0, a0, s3
// [Asm] subst   add v57, v56, v19 ->   add a0, a0, s4
// [Asm] subst   add v58, v57, v20 ->   add a0, a0, s5
// [Asm] subst   add v59, v58, v21 ->   add a0, a0, s6
// [Asm] subst   add v60, v59, v22 ->   add a0, a0, s7
// [Asm] subst   add v61, v60, v23 ->   add a0, a0, s8
// [Asm] subst   add v62, v61, v24 ->   add a0, a0, s9
// [Asm] subst   add v63, v62, v25 ->   add a0, a0, s10
// [Asm] subst   add v64, v63, v26 ->   add a0, a0, t5
// [Asm] subst   add v65, v64, v27 ->   add a0, a0, t5
// [Asm] subst   add v66, v65, v28 ->   add a0, a0, t5
// [Asm] subst   add v67, v66, v29 ->   add a0, a0, t5
// [Asm] subst   add v68, v67, v30 ->   add a0, a0, t5
// [Asm] subst   add v69, v68, v31 ->   add a0, a0, t5
// [Asm] subst   add v70, v69, v32 ->   add a0, a0, t5
// [Asm] subst   add v71, v70, v33 ->   add a0, a0, t5
// [Asm] subst   add v72, v71, v34 ->   add a0, a0, t5
// [Asm] subst   add v73, v72, v35 ->   add a0, a0, t5
// [Asm] subst   add v74, v73, v36 ->   add a0, a0, t5
// [Asm] subst   add v75, v74, v37 ->   add a0, a0, t5
// [Asm] subst   add v76, v75, v38 ->   add a0, a0, t5
// [Asm] subst   add v77, v76, v39 ->   add a0, a0, t5
// [Asm] subst   add v78, v77, v40 ->   add a0, a0, t5
// [Asm] subst   neg v79, v78 ->   neg a0, a0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_4"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_4"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main83l1_1 ->   call main83l1_1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, Insn(iref=%0) -> v2, Self(fref=f1) -> v0
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v5]
// [Asm] defined: a0 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6, a0]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a1 is X
// [Asm] defs: [v7]
// [Asm] live_set: [a1, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [a2]
// [Asm] live_set: [a2, a1, a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a2 is X
// [Asm] defs: [v8]
// [Asm] live_set: [a2, a1, a0, v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a3]
// [Asm] live_set: [a2, a1, a3, a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main83l1_1"];
// [Asm]   r0 [label="v5 ← a0", color=green];
// [Asm]   r3 [label="a1", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="v8 ← a3", color=green];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v7 ← a2", color=green];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r5 [label="a2", color=blue];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v6 ← a1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="v3 ← a0", color=green];
// [Asm]   r17 [label="v2 ← a0", color=green];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r5 -- r6;
// [Asm]   r1 -- r11;
// [Asm]   r5 -- r7;
// [Asm]   r3 -- r4;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r14;
// [Asm]   r1 -- r3;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r3 -- r5;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:v5-> 1:a0-> 2:v6-> 3:a1-> 4:v7-> 5:a2-> 6:v8-> 7:a3-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:v2-> 18:v3"
// [Asm]   comment = "v5<-a0;v8<-a3;v7<-a2;v6<-a1;v3<-a0;v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main83l1_1"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v5, 1 ->   li a0, 1
// [Asm] subst   li v6, 2 ->   li a1, 2
// [Asm] subst   li v7, 3 ->   li a2, 3
// [Asm] subst   li v8, 4 ->   li a3, 4
// [Asm] subst   call f1l0_0 ->   call f1l0_0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] f1l0_0:
// [Asm] # block info: defs: [v76, v58, v79, v22, v67, v28, v44, v33, v64, v60, v51, v73, v63, v20, v27, v50, v59, v6, v54, v62, v5, v10, v49, v37, v43, v17, v52, v31, v48, v75, v68, v45, v61, v55, v40, v3, v25, v16, v14, v69, v13, v26, v42, v7, v41, v32, v12, v29, v8, v19, v47, v4, v74, v57, v34, v11, v66, v46, v71, v53, v21, a0, v78, v30, v36, v65, v24, v9, v39, v72, v18, v56, v23, v77, v35, v38, v70, v15, v2], uses: [v76, v58, v79, v22, v67, a1, v44, v28, v64, v33, v60, v51, v73, v63, v20, v50, v27, v59, v6, v54, v62, v5, v10, v49, v37, v17, v43, a3, v52, v31, v48, v75, v68, v45, v61, v55, v3, v40, v25, v14, v16, v69, v13, v26, v42, v7, v41, v32, v12, v29, v8, v19, v47, v4, v74, v57, v34, v11, v66, v46, v71, v53, v21, a0, v30, v78, v36, v65, a2, v24, v9, v39, v72, v18, v56, v23, v77, v35, v38, v70, v15, v2], upward_exposed: [a2, a1, a3, a0], params_defs: []
// [Asm] # live_in: [a2, a1, a3, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .f1l0_0_0:
// [Asm]   # save_ctx1  # live: [a1, a0, a2, a3]
// [Asm]   mv v2, a0  # live: [a1, a2, a3, v2]
// [Asm]   mv v3, a1  # live: [v3, a2, a3, v2]
// [Asm]   mv v4, a2  # live: [v3, v4, a3, v2]
// [Asm]   mv v5, a3  # live: [v3, v4, v5, v2]
// [Asm]   add v6, v2, v3  # live: [v3, v4, v6, v5, v2]
// [Asm]   add v7, v2, v4  # live: [v3, v7, v4, v6, v5, v2]
// [Asm]   add v8, v2, v5  # live: [v3, v7, v8, v4, v6, v5, v2]
// [Asm]   add v9, v3, v4  # live: [v3, v7, v8, v4, v6, v5, v9, v2]
// [Asm]   add v10, v3, v5  # live: [v3, v7, v8, v4, v6, v5, v10, v9, v2]
// [Asm]   add v11, v4, v5  # live: [v3, v7, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm]   add v12, v6, v7  # live: [v3, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm]   add v13, v6, v8  # live: [v3, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm]   add v14, v6, v9  # live: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v2]
// [Asm]   add v15, v6, v10  # live: [v3, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v2]
// [Asm]   add v16, v6, v11  # live: [v3, v14, v16, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v2]
// [Asm]   add v17, v7, v8  # live: [v3, v14, v16, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v15, v2]
// [Asm]   add v18, v7, v9  # live: [v3, v14, v16, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
// [Asm]   add v19, v7, v10  # live: [v3, v14, v16, v13, v7, v12, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
// [Asm]   add v20, v7, v11  # live: [v3, v14, v16, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v2]
// [Asm]   add v21, v8, v9  # live: [v3, v14, v16, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v2]
// [Asm]   add v22, v8, v10  # live: [v3, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v2]
// [Asm]   add v23, v8, v11  # live: [v3, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v23, v15, v2]
// [Asm]   add v24, v9, v10  # live: [v3, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v25, v9, v11  # live: [v3, v25, v14, v16, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v26, v10, v11  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v27, v12, v13  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v28, v12, v14  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v29, v12, v15  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v30, v12, v16  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v9, v18, v23, v15, v2]
// [Asm]   add v31, v12, v17  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm]   add v32, v12, v18  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm]   add v33, v12, v19  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm]   add v34, v12, v20  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v2]
// [Asm]   add v35, v12, v21  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v35, v15, v2]
// [Asm]   add v36, v12, v22  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v2]
// [Asm]   add v37, v12, v23  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v15, v2]
// [Asm]   add v38, v12, v24  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v38, v15, v2]
// [Asm]   add v39, v12, v25  # live: [v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v2]
// [Asm]   add v40, v12, v26  # live: [v2, v3, v25, v14, v16, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v41, v2, v3  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v41, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v42, v41, v4  # live: [v25, v16, v14, v26, v13, v42, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v43, v42, v5  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v21, v10, v30, v36, v37, v17, v43, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v44, v43, v6  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v44, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v45, v44, v7  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v45, v38, v15, v40]
// [Asm]   add v46, v45, v8  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v46, v21, v10, v30, v36, v37, v17, v24, v31, v9, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v47, v46, v9  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v47, v34, v11, v21, v10, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v48, v47, v10  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v30, v36, v37, v17, v24, v31, v39, v18, v48, v23, v35, v38, v15, v40]
// [Asm]   add v49, v48, v11  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v21, v49, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v50, v49, v12  # live: [v25, v16, v14, v26, v13, v22, v32, v28, v33, v29, v27, v20, v50, v19, v34, v21, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v51, v50, v13  # live: [v25, v16, v14, v26, v22, v32, v28, v33, v51, v29, v27, v20, v19, v34, v21, v30, v36, v37, v17, v24, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v52, v51, v14  # live: [v25, v16, v26, v22, v32, v28, v33, v29, v27, v20, v19, v34, v21, v30, v36, v37, v17, v24, v52, v31, v39, v18, v23, v35, v38, v15, v40]
// [Asm]   add v53, v52, v15  # live: [v25, v16, v21, v53, v26, v30, v22, v36, v32, v37, v17, v24, v28, v31, v33, v39, v18, v29, v27, v23, v20, v35, v19, v38, v34, v40]
// [Asm]   add v54, v53, v16  # live: [v25, v21, v26, v30, v22, v36, v32, v37, v17, v24, v28, v31, v33, v39, v18, v29, v27, v23, v20, v35, v19, v38, v34, v54, v40]
// [Asm]   add v55, v54, v17  # live: [v25, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v18, v29, v27, v23, v20, v35, v19, v38, v34, v55, v40]
// [Asm]   add v56, v55, v18  # live: [v25, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v56, v29, v27, v23, v20, v35, v19, v38, v34, v40]
// [Asm]   add v57, v56, v19  # live: [v25, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v23, v20, v35, v38, v57, v34, v40]
// [Asm]   add v58, v57, v20  # live: [v25, v58, v21, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v23, v35, v38, v34, v40]
// [Asm]   add v59, v58, v21  # live: [v25, v26, v30, v22, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v23, v35, v38, v59, v34, v40]
// [Asm]   add v60, v59, v22  # live: [v25, v26, v30, v36, v32, v37, v24, v31, v28, v33, v39, v60, v29, v27, v23, v35, v38, v34, v40]
// [Asm]   add v61, v60, v23  # live: [v25, v26, v30, v36, v32, v37, v24, v31, v28, v33, v39, v29, v27, v35, v38, v61, v34, v40]
// [Asm]   add v62, v61, v24  # live: [v62, v25, v26, v30, v36, v32, v37, v31, v28, v33, v39, v29, v27, v35, v38, v34, v40]
// [Asm]   add v63, v62, v25  # live: [v26, v30, v36, v32, v37, v31, v28, v33, v39, v63, v29, v27, v35, v38, v34, v40]
// [Asm]   add v64, v63, v26  # live: [v30, v36, v32, v37, v31, v28, v33, v64, v39, v29, v27, v35, v38, v34, v40]
// [Asm]   add v65, v64, v27  # live: [v30, v36, v32, v37, v65, v31, v28, v33, v39, v29, v35, v38, v34, v40]
// [Asm]   add v66, v65, v28  # live: [v40, v66, v29, v30, v35, v36, v38, v32, v37, v31, v33, v34, v39]
// [Asm]   add v67, v66, v29  # live: [v39, v40, v67, v30, v35, v36, v38, v32, v37, v31, v33, v34]
// [Asm]   add v68, v67, v30  # live: [v40, v68, v36, v35, v37, v38, v32, v31, v34, v33, v39]
// [Asm]   add v69, v68, v31  # live: [v40, v69, v36, v35, v37, v38, v32, v34, v33, v39]
// [Asm]   add v70, v69, v32  # live: [v40, v36, v35, v37, v38, v70, v34, v33, v39]
// [Asm]   add v71, v70, v33  # live: [v71, v36, v35, v37, v38, v34, v39, v40]
// [Asm]   add v72, v71, v34  # live: [v72, v36, v35, v37, v38, v39, v40]
// [Asm]   add v73, v72, v35  # live: [v73, v36, v37, v38, v39, v40]
// [Asm]   add v74, v73, v36  # live: [v38, v37, v74, v39, v40]
// [Asm]   add v75, v74, v37  # live: [v38, v75, v39, v40]
// [Asm]   add v76, v75, v38  # live: [v76, v39, v40]
// [Asm]   add v77, v76, v39  # live: [v77, v40]
// [Asm]   add v78, v77, v40  # live: [v78]
// [Asm]   neg v79, v78  # live: [v79]
// [Asm] # control
// [Asm]   mv a0, v79  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_4:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_4_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main83l1_1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_4  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main83l1_1:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v6, ft7, ft4, v5, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v3, v5, a0, v8, v7, a2, v6, a1, a3, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main83l1_1_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v5, 1  # live: [v5]
// [Asm]   mv a0, v5  # live: [a0]
// [Asm]   li v6, 2  # live: [v6, a0]
// [Asm]   mv a1, v6  # live: [a1, a0]
// [Asm]   li v7, 3  # live: [a1, a0, v7]
// [Asm]   mv a2, v7  # live: [a2, a1, a0]
// [Asm]   li v8, 4  # live: [a2, a1, a0, v8]
// [Asm]   mv a3, v8  # live: [a2, a1, a3, a0]
// [Asm]   call f1l0_0  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("f", Int), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int)], body: Let(("e", Var({val: Some(Int)})), Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Let(("f", Var({val: Some(Int)})), Prim(Var("a"), Var("c"), Add, kind=Some(Int)), Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])}, App(Var("main"), [])))
// [Knf] build_knf: Let(("e", Var({val: Some(Int)})), Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Let(("f", Var({val: Some(Int)})), Prim(Var("a"), Var("c"), Add, kind=Some(Int)), Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("a"), Var("b"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("f", Var({val: Some(Int)})), Prim(Var("a"), Var("c"), Add, kind=Some(Int)), Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("a"), Var("c"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("a"), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("b"), Var("c"), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("b"), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("c"), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("f"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("g"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("g"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("g"), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("g"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))
// [Knf] build_knf: Prim(Var("g"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))
// [Knf] build_knf: Prim(Var("h"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))
// [Knf] build_knf: Prim(Var("h"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))
// [Knf] build_knf: Prim(Var("i"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("l"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("m"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("n"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("o"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("o")
// [Knf] build_knf: Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("p"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("p")
// [Knf] build_knf: Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("q"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("r"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("s"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))
// [Knf] build_knf: Prim(Var("k"), Var("t"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))
// [Knf] build_knf: Prim(Var("k"), Var("u"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("u")
// [Knf] build_knf: Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))
// [Knf] build_knf: Prim(Var("k"), Var("v"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))
// [Knf] build_knf: Prim(Var("k"), Var("w"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))
// [Knf] build_knf: Prim(Var("k"), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))
// [Knf] build_knf: Prim(Var("k"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("a"), Var("b"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("o")
// [Knf] build_knf: Var("p")
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Var("u")
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aa")
// [Knf] build_knf: Var("ab")
// [Knf] build_knf: Var("ac")
// [Knf] build_knf: Var("ad")
// [Knf] build_knf: Var("ae")
// [Knf] build_knf: Var("af")
// [Knf] build_knf: Var("ag")
// [Knf] build_knf: Var("ah")
// [Knf] build_knf: Var("ai")
// [Knf] build_knf: Var("aj")
// [Knf] build_knf: Var("ak")
// [Knf] build_knf: Var("al")
// [Knf] build_knf: Var("am")
// [Knf] build_knf: Var("an")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])
// [Knf] build_knf: App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl f1l0_0
// [Main]   .type f1l0_0, @function
// [Main] # leaf true
// [Main] f1l0_0:
// [Main] .f1l0_0_0:
// [Main]   addi sp, sp, -208
// [Main]   sd s0, 0(sp)
// [Main]   sd s1, 8(sp)
// [Main]   sd s2, 16(sp)
// [Main]   sd s3, 24(sp)
// [Main]   sd s4, 32(sp)
// [Main]   sd s5, 40(sp)
// [Main]   sd s6, 48(sp)
// [Main]   sd s7, 56(sp)
// [Main]   sd s8, 64(sp)
// [Main]   sd s9, 72(sp)
// [Main]   sd s10, 80(sp)
// [Main]   add a4, a0, a1
// [Main]   add a5, a0, a2
// [Main]   add a6, a0, a3
// [Main]   add a7, a1, a2
// [Main]   add t0, a1, a3
// [Main]   add t1, a2, a3
// [Main]   add t2, a4, a5
// [Main]   add t3, a4, a6
// [Main]   add t4, a4, a7
// [Main]   add s0, a4, t0
// [Main]   add s1, a4, t1
// [Main]   add s2, a5, a6
// [Main]   add s3, a5, a7
// [Main]   add s4, a5, t0
// [Main]   add s5, a5, t1
// [Main]   add s6, a6, a7
// [Main]   add s7, a6, t0
// [Main]   add s8, a6, t1
// [Main]   add s9, a7, t0
// [Main]   add s10, a7, t1
// [Main]   add t5, t0, t1
// [Main]   sw t5, 88(sp)
// [Main]   add t5, t2, t3
// [Main]   sw t5, 96(sp)
// [Main]   add t5, t2, t4
// [Main]   sw t5, 104(sp)
// [Main]   add t5, t2, s0
// [Main]   sw t5, 112(sp)
// [Main]   add t5, t2, s1
// [Main]   sw t5, 120(sp)
// [Main]   add t5, t2, s2
// [Main]   sw t5, 128(sp)
// [Main]   add t5, t2, s3
// [Main]   sw t5, 136(sp)
// [Main]   add t5, t2, s4
// [Main]   sw t5, 144(sp)
// [Main]   add t5, t2, s5
// [Main]   sw t5, 152(sp)
// [Main]   add t5, t2, s6
// [Main]   sw t5, 160(sp)
// [Main]   add t5, t2, s7
// [Main]   sw t5, 168(sp)
// [Main]   add t5, t2, s8
// [Main]   sw t5, 176(sp)
// [Main]   add t5, t2, s9
// [Main]   sw t5, 184(sp)
// [Main]   add t5, t2, s10
// [Main]   sw t5, 192(sp)
// [Main]   lw t5, 88(sp)
// [Main]   add t5, t2, t5
// [Main]   sw t5, 200(sp)
// [Main]   add a0, a0, a1
// [Main]   add a0, a0, a2
// [Main]   add a0, a0, a3
// [Main]   add a0, a0, a4
// [Main]   add a0, a0, a5
// [Main]   add a0, a0, a6
// [Main]   add a0, a0, a7
// [Main]   add a0, a0, t0
// [Main]   add a0, a0, t1
// [Main]   add a0, a0, t2
// [Main]   add a0, a0, t3
// [Main]   add a0, a0, t4
// [Main]   add a0, a0, s0
// [Main]   add a0, a0, s1
// [Main]   add a0, a0, s2
// [Main]   add a0, a0, s3
// [Main]   add a0, a0, s4
// [Main]   add a0, a0, s5
// [Main]   add a0, a0, s6
// [Main]   add a0, a0, s7
// [Main]   add a0, a0, s8
// [Main]   add a0, a0, s9
// [Main]   add a0, a0, s10
// [Main]   lw t5, 88(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 96(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 104(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 112(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 120(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 128(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 136(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 144(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 152(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 160(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 168(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 176(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 184(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 192(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 200(sp)
// [Main]   add a0, a0, t5
// [Main]   neg a0, a0
// [Main]   ld s0, 0(sp)
// [Main]   ld s1, 8(sp)
// [Main]   ld s2, 16(sp)
// [Main]   ld s3, 24(sp)
// [Main]   ld s4, 32(sp)
// [Main]   ld s5, 40(sp)
// [Main]   ld s6, 48(sp)
// [Main]   ld s7, 56(sp)
// [Main]   ld s8, 64(sp)
// [Main]   ld s9, 72(sp)
// [Main]   ld s10, 80(sp)
// [Main]   addi sp, sp, 208
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_4
// [Main]   .type T$start_4, @function
// [Main] # leaf false
// [Main] T$start_4:
// [Main] .T$start_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main83l1_1
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_4
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main83l1_1
// [Main]   .type main83l1_1, @function
// [Main] # leaf false
// [Main] main83l1_1:
// [Main] .main83l1_1_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 1
// [Main]   li a1, 2
// [Main]   li a2, 3
// [Main]   li a3, 4
// [Main]   call f1l0_0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function f1l0_0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.1), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.2), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f0, fpref=$f.0), FnParam(fref=f0, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%35), FnParam(fref=f0, fpref=$f.2)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%36), FnParam(fref=f0, fpref=$f.3)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%38), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%39), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%40), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%41), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%42), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%43), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%44), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%45), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%46), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%47), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%48), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%49), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%50), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%51), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%52), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%53), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%54), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%55), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%56), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%57), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%58), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%59), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%60), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%61), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%62), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%63), Insn(iref=%26)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%64), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%65), Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%66), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%67), Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%68), Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%69), Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%70), Insn(iref=%33)])
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%71), Insn(iref=%34)])
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%72) -> $%72
// [Wasm] Lowering insn Op(ty=Int32, op=Neg, args=[Insn(iref=%72)])
// [Wasm] Get Local name Insn(iref=%72) -> $%72
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Lowering control Return(args=[Insn(iref=%73)])
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.3) -> $$f.3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Insn(iref=%73) -> $%73
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%70) -> $%70
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%72) -> $%72
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function f1l0_0 to wasm
// [Wasm] Lowering function T$start_4
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_4 to wasm
// [Wasm] Lowering function main83l1_1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[Int32(val=1), Int32(val=2), Int32(val=3), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main83l1_1 to wasm
// [Parser] flags: []
