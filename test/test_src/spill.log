// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f0) -> v0, Insn(iref=%0) -> v2
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v3
// [Asm] defined: a0 is X
// [Asm] defs: [t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7, ft0, ft1, ft2, ft3]
// [Asm] live_set: [a0]
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move: v2 <- a0
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v2
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.162") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.162") clobbered_f: @hashset.of([])
// [Asm] subst   li v3, -431 ->   li a0, -431
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main.162:
// [Asm] # block info: defs: [v2, t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v3], uses: [v2, a0, v3], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.162_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v3, -431  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.162  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 2013265920 # 2GB - 128MB
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 67108864 # 64MB
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.162
// [Main]   .type main.162, @function
// [Main] # leaf false
// [Main] main.162:
// [Main] .main.162_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, -431
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.162
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Typer] resolve: LetRec({tyvars: [], name: ("f", Int), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int)], body: Let(("e", Var(None)), Prim(Var("a"), Var("b"), Add, kind=None), Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])])}, Unit))
// [Typer] resolve: Let(("e", Var(None)), Prim(Var("a"), Var("b"), Add, kind=None), Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("a"), Var("b"), Add, kind=None)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("a"), Var("c"), Add, kind=None)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("c")
// [Typer] resolve: Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("a"), Var("d"), Add, kind=None)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("d")
// [Typer] resolve: Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("b"), Var("c"), Add, kind=None)
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("b"), Var("d"), Add, kind=None)
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("d")
// [Typer] resolve: Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("c"), Var("d"), Add, kind=None)
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("d")
// [Typer] resolve: Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("e"), Var("f"), Add, kind=None)
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("f")
// [Typer] resolve: Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("e"), Var("g"), Add, kind=None)
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("g")
// [Typer] resolve: Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("e"), Var("h"), Add, kind=None)
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("h")
// [Typer] resolve: Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("e"), Var("i"), Add, kind=None)
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("e"), Var("j"), Add, kind=None)
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("j")
// [Typer] resolve: Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("f"), Var("g"), Add, kind=None)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("g")
// [Typer] resolve: Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("f"), Var("h"), Add, kind=None)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("h")
// [Typer] resolve: Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))
// [Typer] resolve: Prim(Var("f"), Var("i"), Add, kind=None)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))
// [Typer] resolve: Prim(Var("f"), Var("j"), Add, kind=None)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("j")
// [Typer] resolve: Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))
// [Typer] resolve: Prim(Var("g"), Var("h"), Add, kind=None)
// [Typer] resolve: Var("g")
// [Typer] resolve: Var("h")
// [Typer] resolve: Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))
// [Typer] resolve: Prim(Var("g"), Var("i"), Add, kind=None)
// [Typer] resolve: Var("g")
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))
// [Typer] resolve: Prim(Var("g"), Var("j"), Add, kind=None)
// [Typer] resolve: Var("g")
// [Typer] resolve: Var("j")
// [Typer] resolve: Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))
// [Typer] resolve: Prim(Var("h"), Var("i"), Add, kind=None)
// [Typer] resolve: Var("h")
// [Typer] resolve: Var("i")
// [Typer] resolve: Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))
// [Typer] resolve: Prim(Var("h"), Var("j"), Add, kind=None)
// [Typer] resolve: Var("h")
// [Typer] resolve: Var("j")
// [Typer] resolve: Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))
// [Typer] resolve: Prim(Var("i"), Var("j"), Add, kind=None)
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))
// [Typer] resolve: Prim(Var("k"), Var("l"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("l")
// [Typer] resolve: Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))
// [Typer] resolve: Prim(Var("k"), Var("m"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("m")
// [Typer] resolve: Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))
// [Typer] resolve: Prim(Var("k"), Var("n"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("n")
// [Typer] resolve: Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))
// [Typer] resolve: Prim(Var("k"), Var("o"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("o")
// [Typer] resolve: Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))
// [Typer] resolve: Prim(Var("k"), Var("p"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("p")
// [Typer] resolve: Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))
// [Typer] resolve: Prim(Var("k"), Var("q"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("q")
// [Typer] resolve: Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))
// [Typer] resolve: Prim(Var("k"), Var("r"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("r")
// [Typer] resolve: Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))
// [Typer] resolve: Prim(Var("k"), Var("s"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("s")
// [Typer] resolve: Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))
// [Typer] resolve: Prim(Var("k"), Var("t"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("t")
// [Typer] resolve: Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))
// [Typer] resolve: Prim(Var("k"), Var("u"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("u")
// [Typer] resolve: Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))
// [Typer] resolve: Prim(Var("k"), Var("v"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("v")
// [Typer] resolve: Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))
// [Typer] resolve: Prim(Var("k"), Var("w"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("w")
// [Typer] resolve: Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))
// [Typer] resolve: Prim(Var("k"), Var("x"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("x")
// [Typer] resolve: Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))
// [Typer] resolve: Prim(Var("k"), Var("y"), Add, kind=None)
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("y")
// [Typer] resolve: Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None)
// [Typer] resolve: Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None)
// [Typer] resolve: Prim(Var("a"), Var("b"), Add, kind=None)
// [Typer] resolve: Var("a")
// [Typer] resolve: Var("b")
// [Typer] resolve: Var("c")
// [Typer] resolve: Var("d")
// [Typer] resolve: Var("e")
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("g")
// [Typer] resolve: Var("h")
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("j")
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("l")
// [Typer] resolve: Var("m")
// [Typer] resolve: Var("n")
// [Typer] resolve: Var("o")
// [Typer] resolve: Var("p")
// [Typer] resolve: Var("q")
// [Typer] resolve: Var("r")
// [Typer] resolve: Var("s")
// [Typer] resolve: Var("t")
// [Typer] resolve: Var("u")
// [Typer] resolve: Var("v")
// [Typer] resolve: Var("w")
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("y")
// [Typer] resolve: Var("aa")
// [Typer] resolve: Var("ab")
// [Typer] resolve: Var("ac")
// [Typer] resolve: Var("ad")
// [Typer] resolve: Var("ae")
// [Typer] resolve: Var("af")
// [Typer] resolve: Var("ag")
// [Typer] resolve: Var("ah")
// [Typer] resolve: Var("ai")
// [Typer] resolve: Var("aj")
// [Typer] resolve: Var("ak")
// [Typer] resolve: Var("al")
// [Typer] resolve: Var("am")
// [Typer] resolve: Var("an")
// [Typer] resolve: Neg(Var("z"), kind=None)
// [Typer] resolve: Var("z")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])])}, Unit)
// [Typer] resolve: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])])
// [Typer] resolve: App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])
// [Typer] resolve: Int(1)
// [Typer] resolve: Int(2)
// [Typer] resolve: Int(3)
// [Typer] resolve: Int(4)
// [Typer] resolve: Var("f")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int)], body: Let(("e", Var(None)), Prim(Var("a"), Var("b"), Add, kind=None), Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("e", Var(None)), Prim(Var("a"), Var("b"), Add, kind=None), Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("a"), Var("b"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("a"), Var("c"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("a"), Var("d"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("b"), Var("c"), Add, kind=None)
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("b"), Var("d"), Add, kind=None)
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("c"), Var("d"), Add, kind=None)
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("f"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("g"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("h"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("i"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("j"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("g"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("h"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("i"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("j"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("g"), Var("h"), Add, kind=None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("g"), Var("i"), Add, kind=None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("g"), Var("j"), Add, kind=None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("h"), Var("i"), Add, kind=None)
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))) against Int
// [Typer] infer: Prim(Var("h"), Var("j"), Add, kind=None)
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))) against Int
// [Typer] infer: Prim(Var("i"), Var("j"), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("l"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("l")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("m"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("n"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("o"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("o")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("p"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("p")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("q"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("q")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("r"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("s"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("t"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("t")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("u"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("u")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))) against Int
// [Typer] infer: Prim(Var("k"), Var("v"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))) against Int
// [Typer] infer: Prim(Var("k"), Var("w"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))) against Int
// [Typer] infer: Prim(Var("k"), Var("x"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))) against Int
// [Typer] infer: Prim(Var("k"), Var("y"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)) against Int
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None)
// [Typer] infer: Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None)
// [Typer] infer: Prim(Var("a"), Var("b"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("l")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("o")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("p")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("q")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("t")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("u")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("aa")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ab")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ac")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ad")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ae")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("af")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ag")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ah")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ai")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("aj")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ak")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("al")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("am")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("an")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Neg(Var("z"), kind=None) against Int
// [Typer] check: Var("z") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), targs=None, [App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)])])
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), targs=None, [Int(1), Int(2), Int(3), Int(4)]) against Int
// [Typer] infer: Int(1)
// [Typer] infer: Int(2)
// [Typer] infer: Int(3)
// [Typer] infer: Int(4)
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int) -> Int))
// [Typer] inst result: (Int, Int, Int, Int) -> Int
// [Typer] unify: (Int, Int, Int, Int) -> Int and (Int, Int, Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [KnfOpt] freq: {f.1: Once, main.83: Once}
// [KnfOpt] Knf inline Some(f)
// [KnfOpt] freq: {main.83: Once}
// [KnfOpt] freq: {main.83: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_88: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.162 false true true true true
// [CoreOpt] allow_inline: false %0 main.162 false true true true true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.162 false true true true true
// [CoreOpt] allow_inline: false %0 main.162 false true true true true
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.162 false true true true true
// [CoreOpt] allow_inline: false %0 main.162 false true true true true
