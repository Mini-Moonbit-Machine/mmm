// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v17, Insn(iref=%41) -> v42, Insn(iref=%33) -> v35, Insn(iref=%63) -> v64, Insn(iref=%8) -> v10, Insn(iref=%10) -> v12, Insn(iref=%27) -> v29, Insn(iref=%25) -> v27, Insn(iref=%39) -> v40, Insn(iref=%59) -> v60, Insn(iref=%4) -> v6, Insn(iref=%56) -> v57, Insn(iref=%49) -> v50, Insn(iref=%42) -> v43, Insn(iref=%65) -> v66, Insn(iref=%68) -> v69, Insn(iref=%73) -> v74, Insn(iref=%26) -> v28, Insn(iref=%31) -> v33, Insn(iref=%74) -> v75, Insn(iref=%64) -> v65, Self(fref=f0) -> v0, Insn(iref=%38) -> v39, Insn(iref=%16) -> v18, Insn(iref=%53) -> v54, Insn(iref=%54) -> v55, Insn(iref=%60) -> v61, Insn(iref=%67) -> v68, Insn(iref=%5) -> v7, Insn(iref=%19) -> v21, Insn(iref=%13) -> v15, Insn(iref=%7) -> v9, Insn(iref=%55) -> v56, Insn(iref=%66) -> v67, Insn(iref=%23) -> v25, Insn(iref=%48) -> v49, Insn(iref=%71) -> v72, Insn(iref=%20) -> v22, Insn(iref=%34) -> v36, Insn(iref=%36) -> v37, Insn(iref=%50) -> v51, Insn(iref=%14) -> v16, Insn(iref=%51) -> v52, Insn(iref=%52) -> v53, Insn(iref=%44) -> v45, Insn(iref=%32) -> v34, Insn(iref=%58) -> v59, Insn(iref=%1) -> v3, Insn(iref=%11) -> v13, Insn(iref=%57) -> v58, Insn(iref=%6) -> v8, Insn(iref=%62) -> v63, Insn(iref=%28) -> v30, Insn(iref=%46) -> v47, Insn(iref=%9) -> v11, Insn(iref=%24) -> v26, Insn(iref=%37) -> v38, Insn(iref=%45) -> v46, Insn(iref=%29) -> v31, Insn(iref=%70) -> v71, Insn(iref=%47) -> v48, Insn(iref=%0) -> v2, Insn(iref=%61) -> v62, Insn(iref=%3) -> v5, Insn(iref=%18) -> v20, Insn(iref=%22) -> v24, Insn(iref=%17) -> v19, Insn(iref=%2) -> v4, Insn(iref=%72) -> v73, Insn(iref=%43) -> v44, Insn(iref=%30) -> v32, Insn(iref=%21) -> v23, Insn(iref=%40) -> v41, Insn(iref=%69) -> v70, Insn(iref=%12) -> v14
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v154]
// [Asm] live_set: [v154]
// [Asm] defined: v154 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] defined: v2 is X
// [Asm] defs: [v152]
// [Asm] live_set: [v152, v2]
// [Asm] defined: v152 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] defined: v3 is X
// [Asm] defs: [v150]
// [Asm] live_set: [v2, v150, v3]
// [Asm] defined: v150 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, v4, v3]
// [Asm] defined: v4 is X
// [Asm] defs: [v148]
// [Asm] live_set: [v2, v4, v148, v3]
// [Asm] defined: v148 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v4, v5, v3]
// [Asm] defined: v5 is X
// [Asm] defs: [v146]
// [Asm] live_set: [v2, v4, v5, v146, v3]
// [Asm] defined: v146 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v4, v6, v5, v3]
// [Asm] defined: v6 is X
// [Asm] defs: [v144]
// [Asm] live_set: [v2, v4, v6, v144, v5, v3]
// [Asm] defined: v144 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v7, v4, v6, v5, v3]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v2, v7, v8, v4, v6, v5, v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v9]
// [Asm] live_set: [v2, v7, v8, v4, v6, v5, v9, v3]
// [Asm] defined: v9 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v2, v7, v8, v4, v6, v5, v10, v9, v3]
// [Asm] defined: v10 is X
// [Asm] defs: [v11]
// [Asm] live_set: [v2, v7, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm] defined: v11 is X
// [Asm] defs: [v12]
// [Asm] live_set: [v2, v7, v12, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm] defined: v12 is X
// [Asm] defs: [v13]
// [Asm] live_set: [v2, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm] defined: v13 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v2, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm] defined: v14 is X
// [Asm] defs: [v15]
// [Asm] live_set: [v2, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v3]
// [Asm] defined: v15 is X
// [Asm] defs: [v16]
// [Asm] live_set: [v2, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v3]
// [Asm] defined: v16 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v15, v3]
// [Asm] defined: v17 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v18, v15, v3]
// [Asm] defined: v18 is X
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v16, v14, v13, v7, v12, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v3]
// [Asm] defined: v19 is X
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v16, v14, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v3]
// [Asm] defined: v20 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v16, v14, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v3]
// [Asm] defined: v21 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v2, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v3]
// [Asm] defined: v22 is X
// [Asm] defs: [v23]
// [Asm] live_set: [v2, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v23, v15, v3]
// [Asm] defined: v23 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v2, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v24 is X
// [Asm] defs: [v25]
// [Asm] live_set: [v2, v25, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v25 is X
// [Asm] defs: [v26]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v26 is X
// [Asm] defs: [v27]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v28 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v29 is X
// [Asm] defs: [v30]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v9, v18, v23, v15, v3]
// [Asm] defined: v30 is X
// [Asm] defs: [v31]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm] defined: v31 is X
// [Asm] defs: [v32]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm] defined: v32 is X
// [Asm] defs: [v33]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm] defined: v33 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm] defined: v34 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v35, v15, v3]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v3]
// [Asm] defined: v36 is X
// [Asm] defs: [v37]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v15, v3]
// [Asm] defined: v37 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v38, v15, v3]
// [Asm] defined: v38 is X
// [Asm] defs: [v39]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v39, v18, v23, v35, v15, v3]
// [Asm] defined: v39 is X
// [Asm] defs: [v40]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v40]
// [Asm] defined: v40 is X
// [Asm] defs: [v41]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v41, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15]
// [Asm] defined: v41 is X
// [Asm] defs: [v42]
// [Asm] live_set: [v25, v16, v14, v26, v13, v42, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15]
// [Asm] defined: v42 is X
// [Asm] defs: [v43]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v17, v43, v24, v31, v9, v18, v23, v35, v15]
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v44, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15]
// [Asm] defined: v44 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v45, v15]
// [Asm] defined: v45 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v46, v21, v10, v30, v36, v17, v24, v31, v18, v23, v35, v15]
// [Asm] defined: v46 is X
// [Asm] defs: [v47]
// [Asm] live_set: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v47, v34, v11, v21, v30, v36, v17, v24, v31, v18, v23, v35, v15]
// [Asm] defined: v47 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v25, v16, v14, v21, v26, v13, v30, v22, v36, v32, v17, v24, v12, v28, v31, v33, v18, v48, v29, v27, v23, v20, v35, v19, v15, v34]
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v25, v16, v14, v21, v49, v26, v13, v30, v22, v36, v32, v17, v24, v31, v28, v33, v18, v29, v27, v23, v20, v35, v19, v15, v34]
// [Asm] defined: v49 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v25, v16, v14, v21, v26, v30, v22, v36, v32, v17, v24, v31, v28, v33, v18, v29, v27, v23, v20, v50, v35, v19, v15, v34]
// [Asm] defined: v50 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v25, v16, v21, v26, v30, v22, v36, v32, v17, v24, v31, v28, v33, v51, v18, v29, v27, v23, v20, v35, v19, v15, v34]
// [Asm] defined: v51 is X
// [Asm] defs: [v52]
// [Asm] live_set: [v25, v16, v21, v26, v30, v22, v36, v32, v17, v24, v52, v31, v28, v33, v18, v29, v27, v23, v20, v35, v19, v34]
// [Asm] defined: v52 is X
// [Asm] defs: [v53]
// [Asm] live_set: [v25, v21, v53, v26, v30, v22, v36, v32, v17, v24, v28, v31, v33, v18, v29, v27, v23, v20, v35, v19, v34]
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v18, v29, v27, v23, v20, v35, v19, v34, v54]
// [Asm] defined: v54 is X
// [Asm] defs: [v55]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v29, v27, v23, v20, v35, v19, v34, v55]
// [Asm] defined: v55 is X
// [Asm] defs: [v56]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v56, v29, v27, v23, v20, v35, v34]
// [Asm] defined: v56 is X
// [Asm] defs: [v57]
// [Asm] live_set: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v29, v27, v23, v35, v57, v34]
// [Asm] defined: v57 is X
// [Asm] defs: [v58]
// [Asm] live_set: [v25, v58, v26, v30, v22, v36, v32, v24, v28, v31, v33, v29, v27, v23, v35, v34]
// [Asm] defined: v58 is X
// [Asm] defs: [v59]
// [Asm] live_set: [v25, v26, v30, v36, v32, v24, v28, v31, v33, v29, v27, v23, v35, v59, v34]
// [Asm] defined: v59 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v25, v26, v30, v36, v32, v24, v28, v31, v33, v60, v29, v27, v35, v34]
// [Asm] defined: v60 is X
// [Asm] defs: [v61]
// [Asm] live_set: [v33, v25, v29, v26, v27, v30, v36, v35, v32, v61, v28, v31, v34]
// [Asm] defined: v61 is X
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v29, v26, v27, v30, v36, v35, v32, v31, v28, v33, v34]
// [Asm] defined: v62 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v29, v30, v27, v35, v36, v32, v31, v28, v33, v34]
// [Asm] defined: v63 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v34, v29, v30, v36, v35, v32, v31, v28, v33, v64]
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v29, v30, v36, v35, v32, v65, v31, v34, v33]
// [Asm] defined: v65 is X
// [Asm] defs: [v66]
// [Asm] live_set: [v66, v30, v36, v35, v32, v31, v34, v33]
// [Asm] defined: v66 is X
// [Asm] defs: [v67]
// [Asm] live_set: [v67, v36, v35, v32, v31, v34, v33]
// [Asm] defined: v67 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v35, v36, v32, v34, v33, v68]
// [Asm] defined: v68 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v35, v69, v34, v33, v36]
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v35, v70, v34, v36]
// [Asm] defined: v70 is X
// [Asm] defs: [v71]
// [Asm] live_set: [v35, v71, v36]
// [Asm] defined: v71 is X
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v36]
// [Asm] defined: v72 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v73]
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v74]
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v74]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v74
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v75]
// [Asm] live_set: [v75]
// [Asm] move: v75 <- a0
// [Asm] defined: v75 is X
// [Asm] defs: []
// [Asm] live_set: [v75]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v75
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main83.162") clobbered_x: @hashset.of([s7, t1, a5, a0, s1, s2, s5, a2, a1, s3, a3, s10, s6, t3, a7, t0, s8, s9, s4, a4, a6, t4, s0, t2])
// [Asm] Label("main83.162") clobbered_f: @hashset.of([])
// [Asm] subst   li v154, 2 ->   li a0, 2
// [Asm] subst   addi v2, v154, 1 ->   addi a0, a0, 1
// [Asm] subst   li v152, 3 ->   li a1, 3
// [Asm] subst   addi v3, v152, 1 ->   addi a1, a1, 1
// [Asm] subst   li v150, 4 ->   li a2, 4
// [Asm] subst   addi v4, v150, 1 ->   addi a2, a2, 1
// [Asm] subst   li v148, 3 ->   li a3, 3
// [Asm] subst   addi v5, v148, 2 ->   addi a3, a3, 2
// [Asm] subst   li v146, 4 ->   li a4, 4
// [Asm] subst   addi v6, v146, 2 ->   addi a4, a4, 2
// [Asm] subst   li v144, 4 ->   li a5, 4
// [Asm] subst   addi v7, v144, 3 ->   addi a5, a5, 3
// [Asm] subst   add v8, v2, v3 ->   add a6, a0, a1
// [Asm] subst   add v9, v2, v4 ->   add a7, a0, a2
// [Asm] subst   add v10, v2, v5 ->   add t0, a0, a3
// [Asm] subst   add v11, v2, v6 ->   add t1, a0, a4
// [Asm] subst   add v12, v2, v7 ->   add t2, a0, a5
// [Asm] subst   add v13, v3, v4 ->   add t3, a1, a2
// [Asm] subst   add v14, v3, v5 ->   add t4, a1, a3
// [Asm] subst   add v15, v3, v6 ->   add s0, a1, a4
// [Asm] subst   add v16, v3, v7 ->   add s1, a1, a5
// [Asm] subst   add v17, v4, v5 ->   add s2, a2, a3
// [Asm] subst   add v18, v4, v6 ->   add s3, a2, a4
// [Asm] subst   add v19, v4, v7 ->   add s4, a2, a5
// [Asm] subst   add v20, v5, v6 ->   add s5, a3, a4
// [Asm] subst   add v21, v5, v7 ->   add s6, a3, a5
// [Asm] subst   add v22, v6, v7 ->   add s7, a4, a5
// [Asm] subst   add v23, v8, v9 ->   add s8, a6, a7
// [Asm] subst   add v24, v8, v10 ->   add s9, a6, t0
// [Asm] subst   add v25, v8, v11 ->   add t5, a6, t1
// [Asm] subst   add v26, v8, v12 ->   add t5, a6, t2
// [Asm] subst   add v27, v8, v13 ->   add t5, a6, t3
// [Asm] subst   add v28, v8, v14 ->   add t5, a6, t4
// [Asm] subst   add v29, v8, v15 ->   add t5, a6, s0
// [Asm] subst   add v30, v8, v16 ->   add t5, a6, s1
// [Asm] subst   add v31, v8, v17 ->   add t5, a6, s2
// [Asm] subst   add v32, v8, v18 ->   add t5, a6, s3
// [Asm] subst   add v33, v8, v19 ->   add t5, a6, s4
// [Asm] subst   add v34, v8, v20 ->   add t5, a6, s5
// [Asm] subst   add v35, v8, v21 ->   add t5, a6, s6
// [Asm] subst   add v36, v8, v22 ->   add t5, a6, s7
// [Asm] subst   addi v37, v2, 3 ->   addi s10, a0, 3
// [Asm] subst   addi v38, v37, 4 ->   addi s10, s10, 4
// [Asm] subst   add v39, v38, v2 ->   add a0, s10, a0
// [Asm] subst   add v40, v39, v3 ->   add a0, a0, a1
// [Asm] subst   add v41, v40, v4 ->   add a0, a0, a2
// [Asm] subst   add v42, v41, v5 ->   add a0, a0, a3
// [Asm] subst   add v43, v42, v6 ->   add a0, a0, a4
// [Asm] subst   add v44, v43, v7 ->   add a0, a0, a5
// [Asm] subst   add v45, v44, v8 ->   add a0, a0, a6
// [Asm] subst   add v46, v45, v9 ->   add a0, a0, a7
// [Asm] subst   add v47, v46, v10 ->   add a0, a0, t0
// [Asm] subst   add v48, v47, v11 ->   add a0, a0, t1
// [Asm] subst   add v49, v48, v12 ->   add a0, a0, t2
// [Asm] subst   add v50, v49, v13 ->   add a0, a0, t3
// [Asm] subst   add v51, v50, v14 ->   add a0, a0, t4
// [Asm] subst   add v52, v51, v15 ->   add a0, a0, s0
// [Asm] subst   add v53, v52, v16 ->   add a0, a0, s1
// [Asm] subst   add v54, v53, v17 ->   add a0, a0, s2
// [Asm] subst   add v55, v54, v18 ->   add a0, a0, s3
// [Asm] subst   add v56, v55, v19 ->   add a0, a0, s4
// [Asm] subst   add v57, v56, v20 ->   add a0, a0, s5
// [Asm] subst   add v58, v57, v21 ->   add a0, a0, s6
// [Asm] subst   add v59, v58, v22 ->   add a0, a0, s7
// [Asm] subst   add v60, v59, v23 ->   add a0, a0, s8
// [Asm] subst   add v61, v60, v24 ->   add a0, a0, s9
// [Asm] subst   add v62, v61, v25 ->   add a0, a0, t5
// [Asm] subst   add v63, v62, v26 ->   add a0, a0, t5
// [Asm] subst   add v64, v63, v27 ->   add a0, a0, t5
// [Asm] subst   add v65, v64, v28 ->   add a0, a0, t5
// [Asm] subst   add v66, v65, v29 ->   add a0, a0, t5
// [Asm] subst   add v67, v66, v30 ->   add a0, a0, t5
// [Asm] subst   add v68, v67, v31 ->   add a0, a0, t5
// [Asm] subst   add v69, v68, v32 ->   add a0, a0, t5
// [Asm] subst   add v70, v69, v33 ->   add a0, a0, t5
// [Asm] subst   add v71, v70, v34 ->   add a0, a0, t5
// [Asm] subst   add v72, v71, v35 ->   add a0, a0, t5
// [Asm] subst   add v73, v72, v36 ->   add a0, a0, t5
// [Asm] subst   neg v74, v73 ->   neg a0, a0
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main83.162:
// [Asm] # block info: defs: [v58, v22, v67, v150, a1, v44, fa1, fa2, v20, v50, a6, v59, ft10, v6, v154, v62, ft4, v5, v10, ft9, v37, v43, a7, v146, v48, v40, v25, v14, v16, v42, v7, v32, v41, ft0, ft1, v12, v29, v8, v47, v34, v66, v53, v21, v30, a2, v65, v9, ft8, t3, v56, fa5, v23, v148, t4, v15, v2, v28, v33, v64, v60, v51, v73, v63, ft6, v27, a4, fa6, ft5, v54, v144, v49, fa4, ft2, v17, v52, a3, v31, fa7, v75, fa3, v68, ft3, v45, t2, v61, v55, v3, t1, v69, v26, v13, v19, v4, v74, v57, ft7, v11, v46, v71, a5, a0, v36, v24, v39, v72, t0, v18, v152, v35, fa0, v38, v70], uses: [v58, v22, v67, v150, v44, v28, v64, v33, v60, v51, v73, v63, v20, v50, v27, v59, v6, v154, v144, v54, v62, v5, v10, v49, v37, v17, v43, v52, v31, v146, v48, v75, v68, v45, v61, v55, v3, v40, v25, v14, v16, v69, v13, v42, v26, v7, v41, v32, v12, v29, v8, v19, v47, v4, v74, v57, v34, v11, v66, v46, v71, v21, v53, a0, v30, v36, v65, v24, v9, v39, v72, v18, v56, v23, v152, v148, v35, v38, v70, v15, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main83.162_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   li v154, 2  # live: [v154]
// [Asm]   addi v2, v154, 1  # live: [v2]
// [Asm]   li v152, 3  # live: [v152, v2]
// [Asm]   addi v3, v152, 1  # live: [v2, v3]
// [Asm]   li v150, 4  # live: [v2, v150, v3]
// [Asm]   addi v4, v150, 1  # live: [v2, v4, v3]
// [Asm]   li v148, 3  # live: [v2, v4, v148, v3]
// [Asm]   addi v5, v148, 2  # live: [v2, v4, v5, v3]
// [Asm]   li v146, 4  # live: [v2, v4, v5, v146, v3]
// [Asm]   addi v6, v146, 2  # live: [v2, v4, v6, v5, v3]
// [Asm]   li v144, 4  # live: [v2, v4, v6, v144, v5, v3]
// [Asm]   addi v7, v144, 3  # live: [v2, v7, v4, v6, v5, v3]
// [Asm]   add v8, v2, v3  # live: [v2, v7, v8, v4, v6, v5, v3]
// [Asm]   add v9, v2, v4  # live: [v2, v7, v8, v4, v6, v5, v9, v3]
// [Asm]   add v10, v2, v5  # live: [v2, v7, v8, v4, v6, v5, v10, v9, v3]
// [Asm]   add v11, v2, v6  # live: [v2, v7, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm]   add v12, v2, v7  # live: [v2, v7, v12, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm]   add v13, v3, v4  # live: [v2, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm]   add v14, v3, v5  # live: [v2, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v3]
// [Asm]   add v15, v3, v6  # live: [v2, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v3]
// [Asm]   add v16, v3, v7  # live: [v2, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v9, v15, v3]
// [Asm]   add v17, v4, v5  # live: [v2, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v15, v3]
// [Asm]   add v18, v4, v6  # live: [v2, v16, v14, v13, v7, v12, v8, v4, v6, v11, v5, v10, v17, v9, v18, v15, v3]
// [Asm]   add v19, v4, v7  # live: [v2, v16, v14, v13, v7, v12, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v3]
// [Asm]   add v20, v5, v6  # live: [v2, v16, v14, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v10, v17, v9, v18, v15, v3]
// [Asm]   add v21, v5, v7  # live: [v2, v16, v14, v13, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v3]
// [Asm]   add v22, v6, v7  # live: [v2, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v15, v3]
// [Asm]   add v23, v8, v9  # live: [v2, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v9, v18, v23, v15, v3]
// [Asm]   add v24, v8, v10  # live: [v2, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v25, v8, v11  # live: [v2, v25, v16, v14, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v26, v8, v12  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v27, v8, v13  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v28, v8, v14  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v29, v8, v15  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v30, v8, v16  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v9, v18, v23, v15, v3]
// [Asm]   add v31, v8, v17  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm]   add v32, v8, v18  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm]   add v33, v8, v19  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm]   add v34, v8, v20  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v15, v3]
// [Asm]   add v35, v8, v21  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v17, v24, v31, v9, v18, v23, v35, v15, v3]
// [Asm]   add v36, v8, v22  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v3]
// [Asm]   addi v37, v2, 3  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v37, v17, v24, v31, v9, v18, v23, v35, v15, v3]
// [Asm]   addi v38, v37, 4  # live: [v2, v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v38, v15, v3]
// [Asm]   add v39, v38, v2  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v39, v18, v23, v35, v15, v3]
// [Asm]   add v40, v39, v3  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v4, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15, v40]
// [Asm]   add v41, v40, v4  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v41, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v5, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15]
// [Asm]   add v42, v41, v5  # live: [v25, v16, v14, v26, v13, v42, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v6, v34, v11, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15]
// [Asm]   add v43, v42, v6  # live: [v25, v16, v14, v26, v13, v22, v7, v32, v12, v28, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v17, v43, v24, v31, v9, v18, v23, v35, v15]
// [Asm]   add v44, v43, v7  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v44, v33, v29, v27, v20, v8, v19, v34, v11, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v15]
// [Asm]   add v45, v44, v8  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v21, v10, v30, v36, v17, v24, v31, v9, v18, v23, v35, v45, v15]
// [Asm]   add v46, v45, v9  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v34, v11, v46, v21, v10, v30, v36, v17, v24, v31, v18, v23, v35, v15]
// [Asm]   add v47, v46, v10  # live: [v25, v16, v14, v26, v13, v22, v32, v12, v28, v33, v29, v27, v20, v19, v47, v34, v11, v21, v30, v36, v17, v24, v31, v18, v23, v35, v15]
// [Asm]   add v48, v47, v11  # live: [v25, v16, v14, v21, v26, v13, v30, v22, v36, v32, v17, v24, v12, v28, v31, v33, v18, v48, v29, v27, v23, v20, v35, v19, v15, v34]
// [Asm]   add v49, v48, v12  # live: [v25, v16, v14, v21, v49, v26, v13, v30, v22, v36, v32, v17, v24, v31, v28, v33, v18, v29, v27, v23, v20, v35, v19, v15, v34]
// [Asm]   add v50, v49, v13  # live: [v25, v16, v14, v21, v26, v30, v22, v36, v32, v17, v24, v31, v28, v33, v18, v29, v27, v23, v20, v50, v35, v19, v15, v34]
// [Asm]   add v51, v50, v14  # live: [v25, v16, v21, v26, v30, v22, v36, v32, v17, v24, v31, v28, v33, v51, v18, v29, v27, v23, v20, v35, v19, v15, v34]
// [Asm]   add v52, v51, v15  # live: [v25, v16, v21, v26, v30, v22, v36, v32, v17, v24, v52, v31, v28, v33, v18, v29, v27, v23, v20, v35, v19, v34]
// [Asm]   add v53, v52, v16  # live: [v25, v21, v53, v26, v30, v22, v36, v32, v17, v24, v28, v31, v33, v18, v29, v27, v23, v20, v35, v19, v34]
// [Asm]   add v54, v53, v17  # live: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v18, v29, v27, v23, v20, v35, v19, v34, v54]
// [Asm]   add v55, v54, v18  # live: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v29, v27, v23, v20, v35, v19, v34, v55]
// [Asm]   add v56, v55, v19  # live: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v56, v29, v27, v23, v20, v35, v34]
// [Asm]   add v57, v56, v20  # live: [v25, v21, v26, v30, v22, v36, v32, v24, v28, v31, v33, v29, v27, v23, v35, v57, v34]
// [Asm]   add v58, v57, v21  # live: [v25, v58, v26, v30, v22, v36, v32, v24, v28, v31, v33, v29, v27, v23, v35, v34]
// [Asm]   add v59, v58, v22  # live: [v25, v26, v30, v36, v32, v24, v28, v31, v33, v29, v27, v23, v35, v59, v34]
// [Asm]   add v60, v59, v23  # live: [v25, v26, v30, v36, v32, v24, v28, v31, v33, v60, v29, v27, v35, v34]
// [Asm]   add v61, v60, v24  # live: [v33, v25, v29, v26, v27, v30, v36, v35, v32, v61, v28, v31, v34]
// [Asm]   add v62, v61, v25  # live: [v62, v29, v26, v27, v30, v36, v35, v32, v31, v28, v33, v34]
// [Asm]   add v63, v62, v26  # live: [v63, v29, v30, v27, v35, v36, v32, v31, v28, v33, v34]
// [Asm]   add v64, v63, v27  # live: [v34, v29, v30, v36, v35, v32, v31, v28, v33, v64]
// [Asm]   add v65, v64, v28  # live: [v29, v30, v36, v35, v32, v65, v31, v34, v33]
// [Asm]   add v66, v65, v29  # live: [v66, v30, v36, v35, v32, v31, v34, v33]
// [Asm]   add v67, v66, v30  # live: [v67, v36, v35, v32, v31, v34, v33]
// [Asm]   add v68, v67, v31  # live: [v35, v36, v32, v34, v33, v68]
// [Asm]   add v69, v68, v32  # live: [v35, v69, v34, v33, v36]
// [Asm]   add v70, v69, v33  # live: [v35, v70, v34, v36]
// [Asm]   add v71, v70, v34  # live: [v35, v71, v36]
// [Asm]   add v72, v71, v35  # live: [v72, v36]
// [Asm]   add v73, v72, v36  # live: [v73]
// [Asm]   neg v74, v73  # live: [v74]
// [Asm]   # save_ctx2  # live: [v74]
// [Asm]   mv a0, v74  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v75, a0  # live: [v75]
// [Asm]   # restore_ctx2  # live: [v75]
// [Asm] # control
// [Asm]   mv a0, v75  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call main83.162  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("f", Int), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int)], body: Let(("e", Var({val: Some(Int)})), Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Let(("f", Var({val: Some(Int)})), Prim(Var("a"), Var("c"), Add, kind=Some(Int)), Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])}, App(Var("main"), [])))
// [Knf] build_knf: Let(("e", Var({val: Some(Int)})), Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Let(("f", Var({val: Some(Int)})), Prim(Var("a"), Var("c"), Add, kind=Some(Int)), Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("a"), Var("b"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Let(("f", Var({val: Some(Int)})), Prim(Var("a"), Var("c"), Add, kind=Some(Int)), Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("a"), Var("c"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("g", Var({val: Some(Int)})), Prim(Var("a"), Var("d"), Add, kind=Some(Int)), Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("a"), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("h", Var({val: Some(Int)})), Prim(Var("b"), Var("c"), Add, kind=Some(Int)), Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("b"), Var("c"), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Prim(Var("b"), Var("d"), Add, kind=Some(Int)), Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("b"), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("j", Var({val: Some(Int)})), Prim(Var("c"), Var("d"), Add, kind=Some(Int)), Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("c"), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Let(("k", Var({val: Some(Int)})), Prim(Var("e"), Var("f"), Add, kind=Some(Int)), Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("f"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Let(("l", Var({val: Some(Int)})), Prim(Var("e"), Var("g"), Add, kind=Some(Int)), Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("g"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Let(("m", Var({val: Some(Int)})), Prim(Var("e"), Var("h"), Add, kind=Some(Int)), Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Let(("n", Var({val: Some(Int)})), Prim(Var("e"), Var("i"), Add, kind=Some(Int)), Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("o", Var({val: Some(Int)})), Prim(Var("e"), Var("j"), Add, kind=Some(Int)), Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("e"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("p", Var({val: Some(Int)})), Prim(Var("f"), Var("g"), Add, kind=Some(Int)), Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("g"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Let(("q", Var({val: Some(Int)})), Prim(Var("f"), Var("h"), Add, kind=Some(Int)), Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Let(("r", Var({val: Some(Int)})), Prim(Var("f"), Var("i"), Add, kind=Some(Int)), Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("s", Var({val: Some(Int)})), Prim(Var("f"), Var("j"), Add, kind=Some(Int)), Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("f"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("t", Var({val: Some(Int)})), Prim(Var("g"), Var("h"), Add, kind=Some(Int)), Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("g"), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Let(("u", Var({val: Some(Int)})), Prim(Var("g"), Var("i"), Add, kind=Some(Int)), Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))))
// [Knf] build_knf: Prim(Var("g"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("v", Var({val: Some(Int)})), Prim(Var("g"), Var("j"), Add, kind=Some(Int)), Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))))
// [Knf] build_knf: Prim(Var("g"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("w", Var({val: Some(Int)})), Prim(Var("h"), Var("i"), Add, kind=Some(Int)), Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))))
// [Knf] build_knf: Prim(Var("h"), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), Prim(Var("h"), Var("j"), Add, kind=Some(Int)), Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))))
// [Knf] build_knf: Prim(Var("h"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("y", Var({val: Some(Int)})), Prim(Var("i"), Var("j"), Add, kind=Some(Int)), Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))))
// [Knf] build_knf: Prim(Var("i"), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Let(("aa", Var({val: Some(Int)})), Prim(Var("k"), Var("l"), Add, kind=Some(Int)), Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("l"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Let(("ab", Var({val: Some(Int)})), Prim(Var("k"), Var("m"), Add, kind=Some(Int)), Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("m"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Let(("ac", Var({val: Some(Int)})), Prim(Var("k"), Var("n"), Add, kind=Some(Int)), Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("n"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Let(("ad", Var({val: Some(Int)})), Prim(Var("k"), Var("o"), Add, kind=Some(Int)), Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("o"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("o")
// [Knf] build_knf: Let(("ae", Var({val: Some(Int)})), Prim(Var("k"), Var("p"), Add, kind=Some(Int)), Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("p"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("p")
// [Knf] build_knf: Let(("af", Var({val: Some(Int)})), Prim(Var("k"), Var("q"), Add, kind=Some(Int)), Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("q"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Let(("ag", Var({val: Some(Int)})), Prim(Var("k"), Var("r"), Add, kind=Some(Int)), Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("r"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Let(("ah", Var({val: Some(Int)})), Prim(Var("k"), Var("s"), Add, kind=Some(Int)), Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))))
// [Knf] build_knf: Prim(Var("k"), Var("s"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Let(("ai", Var({val: Some(Int)})), Prim(Var("k"), Var("t"), Add, kind=Some(Int)), Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))))
// [Knf] build_knf: Prim(Var("k"), Var("t"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Let(("aj", Var({val: Some(Int)})), Prim(Var("k"), Var("u"), Add, kind=Some(Int)), Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))))
// [Knf] build_knf: Prim(Var("k"), Var("u"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("u")
// [Knf] build_knf: Let(("ak", Var({val: Some(Int)})), Prim(Var("k"), Var("v"), Add, kind=Some(Int)), Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))))
// [Knf] build_knf: Prim(Var("k"), Var("v"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Let(("al", Var({val: Some(Int)})), Prim(Var("k"), Var("w"), Add, kind=Some(Int)), Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))))
// [Knf] build_knf: Prim(Var("k"), Var("w"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Let(("am", Var({val: Some(Int)})), Prim(Var("k"), Var("x"), Add, kind=Some(Int)), Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))))
// [Knf] build_knf: Prim(Var("k"), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Let(("an", Var({val: Some(Int)})), Prim(Var("k"), Var("y"), Add, kind=Some(Int)), Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int))))
// [Knf] build_knf: Prim(Var("k"), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Let(("z", Var({val: Some(Int)})), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int)), Neg(Var("z"), kind=Some(Int)))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int)), Var("an"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int)), Var("am"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int)), Var("al"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int)), Var("ak"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int)), Var("aj"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int)), Var("ai"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int)), Var("ah"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int)), Var("ag"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int)), Var("af"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int)), Var("ae"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int)), Var("ad"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int)), Var("ac"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int)), Var("ab"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int)), Var("aa"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int)), Var("y"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int)), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int)), Var("w"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int)), Var("v"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int)), Var("u"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int)), Var("t"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int)), Var("s"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int)), Var("r"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int)), Var("q"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int)), Var("p"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int)), Var("o"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int)), Var("n"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int)), Var("m"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int)), Var("l"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int)), Var("k"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int)), Var("j"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int)), Var("i"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int)), Var("h"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int)), Var("g"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int)), Var("f"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int)), Var("e"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int)), Var("d"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Prim(Var("a"), Var("b"), Add, kind=Some(Int)), Var("c"), Add, kind=Some(Int))
// [Knf] build_knf: Prim(Var("a"), Var("b"), Add, kind=Some(Int))
// [Knf] build_knf: Var("a")
// [Knf] build_knf: Var("b")
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Var("d")
// [Knf] build_knf: Var("e")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("j")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: Var("l")
// [Knf] build_knf: Var("m")
// [Knf] build_knf: Var("n")
// [Knf] build_knf: Var("o")
// [Knf] build_knf: Var("p")
// [Knf] build_knf: Var("q")
// [Knf] build_knf: Var("r")
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Var("t")
// [Knf] build_knf: Var("u")
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("w")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("aa")
// [Knf] build_knf: Var("ab")
// [Knf] build_knf: Var("ac")
// [Knf] build_knf: Var("ad")
// [Knf] build_knf: Var("ae")
// [Knf] build_knf: Var("af")
// [Knf] build_knf: Var("ag")
// [Knf] build_knf: Var("ah")
// [Knf] build_knf: Var("ai")
// [Knf] build_knf: Var("aj")
// [Knf] build_knf: Var("ak")
// [Knf] build_knf: Var("al")
// [Knf] build_knf: Var("am")
// [Knf] build_knf: Var("an")
// [Knf] build_knf: Neg(Var("z"), kind=Some(Int))
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])
// [Knf] build_knf: App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Int(3)
// [Knf] build_knf: Int(4)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main83.162
// [Main]   .type main83.162, @function
// [Main] # leaf false
// [Main] main83.162:
// [Main] .main83.162_0:
// [Main]   addi sp, sp, -192
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   sd s7, 64(sp)
// [Main]   sd s8, 72(sp)
// [Main]   sd s9, 80(sp)
// [Main]   sd s10, 88(sp)
// [Main]   li a0, 2
// [Main]   addi a0, a0, 1
// [Main]   li a1, 3
// [Main]   addi a1, a1, 1
// [Main]   li a2, 4
// [Main]   addi a2, a2, 1
// [Main]   li a3, 3
// [Main]   addi a3, a3, 2
// [Main]   li a4, 4
// [Main]   addi a4, a4, 2
// [Main]   li a5, 4
// [Main]   addi a5, a5, 3
// [Main]   add a6, a0, a1
// [Main]   add a7, a0, a2
// [Main]   add t0, a0, a3
// [Main]   add t1, a0, a4
// [Main]   add t2, a0, a5
// [Main]   add t3, a1, a2
// [Main]   add t4, a1, a3
// [Main]   add s0, a1, a4
// [Main]   add s1, a1, a5
// [Main]   add s2, a2, a3
// [Main]   add s3, a2, a4
// [Main]   add s4, a2, a5
// [Main]   add s5, a3, a4
// [Main]   add s6, a3, a5
// [Main]   add s7, a4, a5
// [Main]   add s8, a6, a7
// [Main]   add s9, a6, t0
// [Main]   add t5, a6, t1
// [Main]   sw t5, 96(sp)
// [Main]   add t5, a6, t2
// [Main]   sw t5, 104(sp)
// [Main]   add t5, a6, t3
// [Main]   sw t5, 112(sp)
// [Main]   add t5, a6, t4
// [Main]   sw t5, 120(sp)
// [Main]   add t5, a6, s0
// [Main]   sw t5, 128(sp)
// [Main]   add t5, a6, s1
// [Main]   sw t5, 136(sp)
// [Main]   add t5, a6, s2
// [Main]   sw t5, 144(sp)
// [Main]   add t5, a6, s3
// [Main]   sw t5, 152(sp)
// [Main]   add t5, a6, s4
// [Main]   sw t5, 160(sp)
// [Main]   add t5, a6, s5
// [Main]   sw t5, 168(sp)
// [Main]   add t5, a6, s6
// [Main]   sw t5, 176(sp)
// [Main]   add t5, a6, s7
// [Main]   sw t5, 184(sp)
// [Main]   addi s10, a0, 3
// [Main]   addi s10, s10, 4
// [Main]   add a0, s10, a0
// [Main]   add a0, a0, a1
// [Main]   add a0, a0, a2
// [Main]   add a0, a0, a3
// [Main]   add a0, a0, a4
// [Main]   add a0, a0, a5
// [Main]   add a0, a0, a6
// [Main]   add a0, a0, a7
// [Main]   add a0, a0, t0
// [Main]   add a0, a0, t1
// [Main]   add a0, a0, t2
// [Main]   add a0, a0, t3
// [Main]   add a0, a0, t4
// [Main]   add a0, a0, s0
// [Main]   add a0, a0, s1
// [Main]   add a0, a0, s2
// [Main]   add a0, a0, s3
// [Main]   add a0, a0, s4
// [Main]   add a0, a0, s5
// [Main]   add a0, a0, s6
// [Main]   add a0, a0, s7
// [Main]   add a0, a0, s8
// [Main]   add a0, a0, s9
// [Main]   lw t5, 96(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 104(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 112(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 120(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 128(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 136(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 144(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 152(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 160(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 168(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 176(sp)
// [Main]   add a0, a0, t5
// [Main]   lw t5, 184(sp)
// [Main]   add a0, a0, t5
// [Main]   neg a0, a0
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   ld s7, 64(sp)
// [Main]   ld s8, 72(sp)
// [Main]   ld s9, 80(sp)
// [Main]   ld s10, 88(sp)
// [Main]   addi sp, sp, 192
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call main83.162
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function main83.162
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), Int32(val=2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=1), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=2), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=2), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Int32(val=3), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%1), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%4), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%6), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%0), Int32(val=3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%36), Int32(val=4)])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%37), Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%37) -> $%37
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%38), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%39), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%40), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%41), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%42), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%42) -> $%42
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%43), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%43) -> $%43
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%44), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%45), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%46), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%47), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%48), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%48) -> $%48
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%49), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%50), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%51), Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%52), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%53), Insn(iref=%16)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%54), Insn(iref=%17)])
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name Insn(iref=%17) -> $%17
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%55), Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%56), Insn(iref=%19)])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%57), Insn(iref=%20)])
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%58), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%59), Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%60), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%60) -> $%60
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%61), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%61) -> $%61
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%62), Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%62) -> $%62
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%63), Insn(iref=%26)])
// [Wasm] Get Local name Insn(iref=%63) -> $%63
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%64), Insn(iref=%27)])
// [Wasm] Get Local name Insn(iref=%64) -> $%64
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%65), Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%65) -> $%65
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%66), Insn(iref=%29)])
// [Wasm] Get Local name Insn(iref=%66) -> $%66
// [Wasm] Get Local name Insn(iref=%29) -> $%29
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%67), Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%67) -> $%67
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%68), Insn(iref=%31)])
// [Wasm] Get Local name Insn(iref=%68) -> $%68
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%69), Insn(iref=%32)])
// [Wasm] Get Local name Insn(iref=%69) -> $%69
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%70), Insn(iref=%33)])
// [Wasm] Get Local name Insn(iref=%70) -> $%70
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%71), Insn(iref=%34)])
// [Wasm] Get Local name Insn(iref=%71) -> $%71
// [Wasm] Get Local name Insn(iref=%34) -> $%34
// [Wasm] Get Local name Insn(iref=%72) -> $%72
// [Wasm] Lowering insn Op(ty=Int32, op=Neg, args=[Insn(iref=%72)])
// [Wasm] Get Local name Insn(iref=%72) -> $%72
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%73)])
// [Wasm] Get Local name Insn(iref=%73) -> $%73
// [Wasm] Lowering control Return(args=[Insn(iref=%74)])
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local Insn(iref=%63) -> $%63
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%42) -> $%42
// [Wasm] Local Insn(iref=%65) -> $%65
// [Wasm] Local Insn(iref=%68) -> $%68
// [Wasm] Local Insn(iref=%73) -> $%73
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local Insn(iref=%64) -> $%64
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%60) -> $%60
// [Wasm] Local Insn(iref=%67) -> $%67
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local Insn(iref=%66) -> $%66
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%48) -> $%48
// [Wasm] Local Insn(iref=%71) -> $%71
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%34) -> $%34
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%62) -> $%62
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%37) -> $%37
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%29) -> $%29
// [Wasm] Local Insn(iref=%70) -> $%70
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%61) -> $%61
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%17) -> $%17
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%72) -> $%72
// [Wasm] Local Insn(iref=%43) -> $%43
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%69) -> $%69
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Lowered function main83.162 to wasm
// [Wasm] LoweringOrder: [0]
// [Wasm] LoweringOrder: [[]]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] LoweringOrder: [b0]
// [Wasm] LoweringOrder: HashMap::of([(b0, 0)])
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] freq: {f1: Once, main83: Once}
// [KnfOpt] Knf inline Some(f1)
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] LVN subst Insn(iref=%35) with Insn(iref=%0)
