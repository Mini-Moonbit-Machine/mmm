// [Main] function thunk_main(k) {
// [Main]   function f_1(a_3, b_5, c_7, d_9, k) {
// [Main]     const e_10 = a_3 + b_5;
// [Main]     const f_11 = a_3 + c_7;
// [Main]     const g_12 = a_3 + d_9;
// [Main]     const h_13 = b_5 + c_7;
// [Main]     const i_14 = b_5 + d_9;
// [Main]     const j_15 = c_7 + d_9;
// [Main]     const k_16 = e_10 + f_11;
// [Main]     const l_17 = e_10 + g_12;
// [Main]     const m_18 = e_10 + h_13;
// [Main]     const n_19 = e_10 + i_14;
// [Main]     const o_20 = e_10 + j_15;
// [Main]     const p_21 = f_11 + g_12;
// [Main]     const q_22 = f_11 + h_13;
// [Main]     const r_23 = f_11 + i_14;
// [Main]     const s_24 = f_11 + j_15;
// [Main]     const t_25 = g_12 + h_13;
// [Main]     const u_26 = g_12 + i_14;
// [Main]     const v_27 = g_12 + j_15;
// [Main]     const w_28 = h_13 + i_14;
// [Main]     const x_29 = h_13 + j_15;
// [Main]     const y_30 = i_14 + j_15;
// [Main]     const aa_31 = k_16 + l_17;
// [Main]     const ab_32 = k_16 + m_18;
// [Main]     const ac_33 = k_16 + n_19;
// [Main]     const ad_34 = k_16 + o_20;
// [Main]     const ae_35 = k_16 + p_21;
// [Main]     const af_36 = k_16 + q_22;
// [Main]     const ag_37 = k_16 + r_23;
// [Main]     const ah_38 = k_16 + s_24;
// [Main]     const ai_39 = k_16 + t_25;
// [Main]     const aj_40 = k_16 + u_26;
// [Main]     const ak_41 = k_16 + v_27;
// [Main]     const al_42 = k_16 + w_28;
// [Main]     const am_43 = k_16 + x_29;
// [Main]     const an_44 = k_16 + y_30;
// [Main]     const _45 = a_3 + b_5;
// [Main]     const _46 = _45 + c_7;
// [Main]     const _47 = _46 + d_9;
// [Main]     const _48 = _47 + e_10;
// [Main]     const _49 = _48 + f_11;
// [Main]     const _50 = _49 + g_12;
// [Main]     const _51 = _50 + h_13;
// [Main]     const _52 = _51 + i_14;
// [Main]     const _53 = _52 + j_15;
// [Main]     const _54 = _53 + k_16;
// [Main]     const _55 = _54 + l_17;
// [Main]     const _56 = _55 + m_18;
// [Main]     const _57 = _56 + n_19;
// [Main]     const _58 = _57 + o_20;
// [Main]     const _59 = _58 + p_21;
// [Main]     const _60 = _59 + q_22;
// [Main]     const _61 = _60 + r_23;
// [Main]     const _62 = _61 + s_24;
// [Main]     const _63 = _62 + t_25;
// [Main]     const _64 = _63 + u_26;
// [Main]     const _65 = _64 + v_27;
// [Main]     const _66 = _65 + w_28;
// [Main]     const _67 = _66 + x_29;
// [Main]     const _68 = _67 + y_30;
// [Main]     const _69 = _68 + aa_31;
// [Main]     const _70 = _69 + ab_32;
// [Main]     const _71 = _70 + ac_33;
// [Main]     const _72 = _71 + ad_34;
// [Main]     const _73 = _72 + ae_35;
// [Main]     const _74 = _73 + af_36;
// [Main]     const _75 = _74 + ag_37;
// [Main]     const _76 = _75 + ah_38;
// [Main]     const _77 = _76 + ai_39;
// [Main]     const _78 = _77 + aj_40;
// [Main]     const _79 = _78 + ak_41;
// [Main]     const _80 = _79 + al_42;
// [Main]     const _81 = _80 + am_43;
// [Main]     const z_82 = _81 + an_44;
// [Main]     return $thunk(() => k(-z_82))
// [Main]   }
// [Main]   function main_83(k) {
// [Main]     const _84 = 1;
// [Main]     const _85 = 2;
// [Main]     const _86 = 3;
// [Main]     const _87 = 4;
// [Main]     return $thunk(() => f_1(_84, _85, _86, _87, function (_88) {
// [Main]       return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]         return $thunk(() => k(x))
// [Main]       }
// [Main]       , _88))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_83(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("f", Int), args: [("a", Int), ("b", Int), ("c", Int), ("d", Int)], body: Let(("e", Var(None)), Prim(Var("a"), Var("b"), Add, kind=None), Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))))}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Let(("e", Var(None)), Prim(Var("a"), Var("b"), Add, kind=None), Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("a"), Var("b"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("f", Var(None)), Prim(Var("a"), Var("c"), Add, kind=None), Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("a"), Var("c"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("g", Var(None)), Prim(Var("a"), Var("d"), Add, kind=None), Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("a"), Var("d"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("h", Var(None)), Prim(Var("b"), Var("c"), Add, kind=None), Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("b"), Var("c"), Add, kind=None)
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("i", Var(None)), Prim(Var("b"), Var("d"), Add, kind=None), Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("b"), Var("d"), Add, kind=None)
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("j", Var(None)), Prim(Var("c"), Var("d"), Add, kind=None), Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("c"), Var("d"), Add, kind=None)
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("k", Var(None)), Prim(Var("e"), Var("f"), Add, kind=None), Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("f"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("l", Var(None)), Prim(Var("e"), Var("g"), Add, kind=None), Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("g"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("m", Var(None)), Prim(Var("e"), Var("h"), Add, kind=None), Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("h"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("n", Var(None)), Prim(Var("e"), Var("i"), Add, kind=None), Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("i"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("o", Var(None)), Prim(Var("e"), Var("j"), Add, kind=None), Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("e"), Var("j"), Add, kind=None)
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("p", Var(None)), Prim(Var("f"), Var("g"), Add, kind=None), Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("g"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("q", Var(None)), Prim(Var("f"), Var("h"), Add, kind=None), Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("h"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("r", Var(None)), Prim(Var("f"), Var("i"), Add, kind=None), Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("i"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("s", Var(None)), Prim(Var("f"), Var("j"), Add, kind=None), Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("f"), Var("j"), Add, kind=None)
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("t", Var(None)), Prim(Var("g"), Var("h"), Add, kind=None), Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("g"), Var("h"), Add, kind=None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("u", Var(None)), Prim(Var("g"), Var("i"), Add, kind=None), Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("g"), Var("i"), Add, kind=None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("v", Var(None)), Prim(Var("g"), Var("j"), Add, kind=None), Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("g"), Var("j"), Add, kind=None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("w", Var(None)), Prim(Var("h"), Var("i"), Add, kind=None), Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))))) against Int
// [Typer] infer: Prim(Var("h"), Var("i"), Add, kind=None)
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("x", Var(None)), Prim(Var("h"), Var("j"), Add, kind=None), Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))))) against Int
// [Typer] infer: Prim(Var("h"), Var("j"), Add, kind=None)
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("y", Var(None)), Prim(Var("i"), Var("j"), Add, kind=None), Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))))) against Int
// [Typer] infer: Prim(Var("i"), Var("j"), Add, kind=None)
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("aa", Var(None)), Prim(Var("k"), Var("l"), Add, kind=None), Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("l"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("l")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ab", Var(None)), Prim(Var("k"), Var("m"), Add, kind=None), Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("m"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ac", Var(None)), Prim(Var("k"), Var("n"), Add, kind=None), Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("n"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ad", Var(None)), Prim(Var("k"), Var("o"), Add, kind=None), Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("o"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("o")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ae", Var(None)), Prim(Var("k"), Var("p"), Add, kind=None), Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("p"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("p")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("af", Var(None)), Prim(Var("k"), Var("q"), Add, kind=None), Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("q"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("q")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ag", Var(None)), Prim(Var("k"), Var("r"), Add, kind=None), Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("r"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ah", Var(None)), Prim(Var("k"), Var("s"), Add, kind=None), Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("s"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ai", Var(None)), Prim(Var("k"), Var("t"), Add, kind=None), Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("t"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("t")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("aj", Var(None)), Prim(Var("k"), Var("u"), Add, kind=None), Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))))) against Int
// [Typer] infer: Prim(Var("k"), Var("u"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("u")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("ak", Var(None)), Prim(Var("k"), Var("v"), Add, kind=None), Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))))) against Int
// [Typer] infer: Prim(Var("k"), Var("v"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("al", Var(None)), Prim(Var("k"), Var("w"), Add, kind=None), Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))))) against Int
// [Typer] infer: Prim(Var("k"), Var("w"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("am", Var(None)), Prim(Var("k"), Var("x"), Add, kind=None), Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)))) against Int
// [Typer] infer: Prim(Var("k"), Var("x"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("an", Var(None)), Prim(Var("k"), Var("y"), Add, kind=None), Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None))) against Int
// [Typer] infer: Prim(Var("k"), Var("y"), Add, kind=None)
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Let(("z", Var(None)), Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None), Neg(Var("z"), kind=None)) against Int
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None), Var("an"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None), Var("am"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None), Var("al"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None), Var("ak"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None), Var("aj"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None), Var("ai"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None), Var("ah"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None), Var("ag"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None), Var("af"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None), Var("ae"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None), Var("ad"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None), Var("ac"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None), Var("ab"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None), Var("aa"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None), Var("y"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None), Var("x"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None), Var("w"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None), Var("v"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None), Var("u"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None), Var("t"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None), Var("s"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None), Var("r"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None), Var("q"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None), Var("p"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None), Var("o"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None), Var("n"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None), Var("m"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None), Var("l"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None), Var("k"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None), Var("j"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None), Var("i"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None), Var("h"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None), Var("g"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None), Var("f"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None), Var("e"), Add, kind=None)
// [Typer] infer: Prim(Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None), Var("d"), Add, kind=None)
// [Typer] infer: Prim(Prim(Var("a"), Var("b"), Add, kind=None), Var("c"), Add, kind=None)
// [Typer] infer: Prim(Var("a"), Var("b"), Add, kind=None)
// [Typer] infer: Var("a")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] infer: Var("b")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("c")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("d")
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("e")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("h")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("i")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("j")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("k")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("l")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("m")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("n")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("o")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("p")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("q")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("r")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("t")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("u")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("w")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("aa")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ab")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ac")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ad")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ae")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("af")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ag")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ah")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ai")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("aj")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("ak")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("al")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("am")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] infer: Var("an")
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Neg(Var("z"), kind=None) against Int
// [Typer] check: Var("z") against Int
// [Typer] inst: TypeScheme(([], Var(Int)))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("f"), [Int(1), Int(2), Int(3), Int(4)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("f"), [Int(1), Int(2), Int(3), Int(4)]) against Int
// [Typer] infer: Int(1)
// [Typer] infer: Int(2)
// [Typer] infer: Int(3)
// [Typer] infer: Int(4)
// [Typer] check: Var("f") against (Int, Int, Int, Int) -> Int
// [Typer] inst: TypeScheme(([], (Int, Int, Int, Int) -> Int))
// [Typer] inst result: (Int, Int, Int, Int) -> Int
// [Typer] unify: (Int, Int, Int, Int) -> Int and (Int, Int, Int, Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
