// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv13, Self(fref=f0) -> v0, Insn(iref=%16) -> fv14, Insn(iref=%24) -> fv16, Insn(iref=%8) -> fv12, Insn(iref=%27) -> v19, Insn(iref=%25) -> fv17, Insn(iref=%5) -> fv9, Insn(iref=%0) -> v4, Insn(iref=%4) -> fv8, Insn(iref=%3) -> fv7, Insn(iref=%7) -> fv11, Mem(fref=f0, mref=m1) -> v3, Insn(iref=%23) -> fv15, Insn(iref=%2) -> fv6, Mem(fref=f0, mref=m0) -> v2, Insn(iref=%1) -> v5, Insn(iref=%26) -> v18, Insn(iref=%6) -> fv10
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%4), Insn(iref=%7)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%6)])
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v42]
// [Asm] live_set: [s11, v42, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [s11, fv43, v2]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [s11, v44, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv45]
// [Asm] live_set: [fv45, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [s11, fv47, v2]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v35, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [fv36]
// [Asm] live_set: [v2, fv36, v3]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v2, v37, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [v2, fv38, v3]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v2, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [fv40]
// [Asm] live_set: [v2, fv40, v3]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [fv6]
// [Asm] live_set: [v2, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv6 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v3, fv6, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [v3, fv9, fv6, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [v3, fv9, fv10, fv6, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv9, fv10, fv6, fv11, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv11 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv10, fv12, fv11, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv14, fv11, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [v22]
// [Asm] live_set: [fv16, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [fv23]
// [Asm] live_set: [fv23, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.430"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t1", color=blue];
// [Asm]   r23 [label="t4", color=blue];
// [Asm]   r3 [label="v44 ← a1", color=green];
// [Asm]   r9 [label="v22 ← a0", color=green];
// [Asm]   r6 [label="v35 ← a2", color=green];
// [Asm]   r13 [label="a2", color=blue];
// [Asm]   r4 [label="v46 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v37 ← a2", color=green];
// [Asm]   r10 [label="v18 ← a0", color=green];
// [Asm]   r22 [label="t3", color=blue];
// [Asm]   r14 [label="a3", color=blue];
// [Asm]   r8 [label="v39 ← a2", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r15 [label="a4", color=blue];
// [Asm]   r24 [label="v19 ← a0", color=green];
// [Asm]   r2 [label="v42 ← a1", color=green];
// [Asm]   r16 [label="a5", color=blue];
// [Asm]   r18 [label="a7", color=blue];
// [Asm]   r19 [label="t0", color=blue];
// [Asm]   r21 [label="t2", color=blue];
// [Asm]   r17 [label="a6", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r5 -- r6;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r13;
// [Asm]   r11 -- r17;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r11 -- r16;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r11 -- r12;
// [Asm]   r11 -- r23;
// [Asm]   r5 -- r7;
// [Asm]   r11 -- r22;
// [Asm]   r11 -- r15;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r11 -- r19;
// [Asm]   r11 -- r21;
// [Asm]   r0 -- r6;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v42-> 3:v44-> 4:v46-> 5:v3-> 6:v35-> 7:v37-> 8:v39-> 9:v22-> 10:v18-> 11:a0-> 12:a1-> 13:a2-> 14:a3-> 15:a4-> 16:a5-> 17:a6-> 18:a7-> 19:t0-> 20:t1-> 21:t2-> 22:t3-> 23:t4-> 24:v19"
// [Asm]   comment = "v2<-a0;v44<-a1;v22<-a0;v35<-a2;v46<-a1;v37<-a2;v18<-a0;v39<-a2;v3<-a1;v19<-a0;v42<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.430"];
// [Asm]   r0 [label="fv43 ← fa0", color=green];
// [Asm]   r33 [label="fa5", color=blue];
// [Asm]   r9 [label="fv9 ← fa3", color=green];
// [Asm]   r26 [label="ft9", color=blue];
// [Asm]   r6 [label="fv6 ← fa0", color=green];
// [Asm]   r13 [label="fv14 ← fa0", color=green];
// [Asm]   r4 [label="fv38 ← fa0", color=green];
// [Asm]   r29 [label="fa1", color=blue];
// [Asm]   r35 [label="fa7", color=blue];
// [Asm]   r7 [label="fv7 ← fa1", color=green];
// [Asm]   r10 [label="fv10 ← fa4", color=green];
// [Asm]   r8 [label="fv8 ← fa2", color=green];
// [Asm]   r5 [label="fv40 ← fa0", color=green];
// [Asm]   r15 [label="fv23 ← fa1", color=green];
// [Asm]   r32 [label="fa4", color=blue];
// [Asm]   r24 [label="ft7", color=blue];
// [Asm]   r31 [label="fa3", color=blue];
// [Asm]   r17 [label="ft0", color=blue];
// [Asm]   r12 [label="fv12 ← fa0", color=green];
// [Asm]   r20 [label="ft3", color=blue];
// [Asm]   r23 [label="ft6", color=blue];
// [Asm]   r3 [label="fv36 ← fa0", color=green];
// [Asm]   r27 [label="ft10", color=blue];
// [Asm]   r1 [label="fv45 ← fa0", color=green];
// [Asm]   r28 [label="fa0", color=blue];
// [Asm]   r11 [label="fv11 ← fa5", color=green];
// [Asm]   r34 [label="fa6", color=blue];
// [Asm]   r22 [label="ft5", color=blue];
// [Asm]   r14 [label="fv16 ← fa0", color=green];
// [Asm]   r30 [label="fa2", color=blue];
// [Asm]   r25 [label="ft8", color=blue];
// [Asm]   r2 [label="fv47 ← fa0", color=green];
// [Asm]   r16 [label="fv17 ← fa0", color=green];
// [Asm]   r18 [label="ft1", color=blue];
// [Asm]   r19 [label="ft2", color=blue];
// [Asm]   r21 [label="ft4", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r11 -- r12;
// [Asm]   r8 -- r10;
// [Asm]   r9 -- r11;
// [Asm]   r6 -- r11;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r11 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r7 -- r9;
// [Asm]   r10 -- r12;
// [Asm]   r7 -- r8;
// [Asm]   r7 -- r12;
// [Asm]   r7 -- r10;
// [Asm]   r6 -- r10;
// [Asm]   r14 -- r15;
// [Asm]   r10 -- r11;
// [Asm]   r8 -- r9;
// [Asm]   r7 -- r11;
// [Asm]   r8 -- r12;
// [Asm]   r6 -- r8;
// [Asm]   comment = "0:fv43-> 1:fv45-> 2:fv47-> 3:fv36-> 4:fv38-> 5:fv40-> 6:fv6-> 7:fv7-> 8:fv8-> 9:fv9-> 10:fv10-> 11:fv11-> 12:fv12-> 13:fv14-> 14:fv16-> 15:fv23-> 16:fv17-> 17:ft0-> 18:ft1-> 19:ft2-> 20:ft3-> 21:ft4-> 22:ft5-> 23:ft6-> 24:ft7-> 25:ft8-> 26:ft9-> 27:ft10-> 28:fa0-> 29:fa1-> 30:fa2-> 31:fa3-> 32:fa4-> 33:fa5-> 34:fa6-> 35:fa7"
// [Asm]   comment = "fv43<-fa0;fv9<-fa3;fv6<-fa0;fv14<-fa0;fv38<-fa0;fv7<-fa1;fv10<-fa4;fv8<-fa2;fv40<-fa0;fv23<-fa1;fv12<-fa0;fv36<-fa0;fv45<-fa0;fv11<-fa5;fv16<-fa0;fv47<-fa0;fv17<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v42, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv43, v42 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv43, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   li v44, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv45, v44 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv45, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   li v46, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv47, v46 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv47, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   li v35, 4616189618054758400 ->   li a2, 4616189618054758400
// [Asm] subst   fmv.d.x fv36, v35 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv36, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   li v37, 4617315517961601024 ->   li a2, 4617315517961601024
// [Asm] subst   fmv.d.x fv38, v37 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv38, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   li v39, 4618441417868443648 ->   li a2, 4618441417868443648
// [Asm] subst   fmv.d.x fv40, v39 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv40, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   fld fv6, 0(v2) ->   fld fa0, 0(a0)
// [Asm] subst   fld fv7, 8(v2) ->   fld fa1, 8(a0)
// [Asm] subst   fld fv8, 16(v2) ->   fld fa2, 16(a0)
// [Asm] subst   fld fv9, 0(v3) ->   fld fa3, 0(a1)
// [Asm] subst   fld fv10, 8(v3) ->   fld fa4, 8(a1)
// [Asm] subst   fld fv11, 16(v3) ->   fld fa5, 16(a1)
// [Asm] subst   fmul.d fv12, fv6, fv9 ->   fmul.d fa0, fa0, fa3
// [Asm] subst   fmadd.d fv14, fv7, fv10, fv12 ->   fmadd.d fa0, fa1, fa4, fa0
// [Asm] subst   fmadd.d fv16, fv8, fv11, fv14 ->   fmadd.d fa0, fa2, fa5, fa0
// [Asm] subst   li v22, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv23, v22 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv17, fv23, fv16 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v18, fv17, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.430 ->   call main.430
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.430  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.430:
// [Asm] # block info: defs: [v22, fv12, a1, s11, fv47, v44, fa1, fv38, fa2, ft6, a4, fa6, a6, ft5, ft10, ft4, ft9, fa4, ft2, v37, a3, a7, fa7, fa3, fv11, fv43, ft3, t2, fv17, fv7, v3, fv10, fv23, t1, v42, ft0, ft1, fv14, fv16, fv40, fv36, v19, ft7, v46, fv45, a5, a0, fv8, a2, fv6, v39, ft8, fv9, t3, t0, v18, fa5, v35, fa0, t4, v2], uses: [v3, fv10, fv23, v42, v22, fv12, s11, fv47, fv14, v44, fv16, fv38, fv40, fv36, v19, v46, fv45, a0, fv8, v37, fv6, v39, fv9, v18, fv11, fv43, v35, fv17, fv7, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.430_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -24  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [s11, v2]
// [Asm]   li v42, 4607182418800017408  # live: [s11, v42, v2]
// [Asm]   fmv.d.x fv43, v42  # live: [s11, fv43, v2]
// [Asm]   fsd fv43, 0(v2)  # live: [s11, v2]
// [Asm]   li v44, 4611686018427387904  # live: [s11, v44, v2]
// [Asm]   fmv.d.x fv45, v44  # live: [fv45, s11, v2]
// [Asm]   fsd fv45, 8(v2)  # live: [s11, v2]
// [Asm]   li v46, 4613937818241073152  # live: [v46, s11, v2]
// [Asm]   fmv.d.x fv47, v46  # live: [s11, fv47, v2]
// [Asm]   fsd fv47, 16(v2)  # live: [s11, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v3]
// [Asm]   li v35, 4616189618054758400  # live: [v2, v35, v3]
// [Asm]   fmv.d.x fv36, v35  # live: [v2, fv36, v3]
// [Asm]   fsd fv36, 0(v3)  # live: [v2, v3]
// [Asm]   li v37, 4617315517961601024  # live: [v2, v37, v3]
// [Asm]   fmv.d.x fv38, v37  # live: [v2, fv38, v3]
// [Asm]   fsd fv38, 8(v3)  # live: [v2, v3]
// [Asm]   li v39, 4618441417868443648  # live: [v2, v39, v3]
// [Asm]   fmv.d.x fv40, v39  # live: [v2, fv40, v3]
// [Asm]   fsd fv40, 16(v3)  # live: [v2, v3]
// [Asm]   fld fv6, 0(v2)  # live: [v2, fv6, v3]
// [Asm]   fld fv7, 8(v2)  # live: [v2, fv6, fv7, v3]
// [Asm]   fld fv8, 16(v2)  # live: [v3, fv6, fv7, fv8]
// [Asm]   fld fv9, 0(v3)  # live: [v3, fv9, fv6, fv7, fv8]
// [Asm]   fld fv10, 8(v3)  # live: [v3, fv9, fv10, fv6, fv7, fv8]
// [Asm]   fld fv11, 16(v3)  # live: [fv9, fv10, fv6, fv11, fv7, fv8]
// [Asm]   fmul.d fv12, fv6, fv9  # live: [fv10, fv12, fv11, fv7, fv8]
// [Asm]   fmadd.d fv14, fv7, fv10, fv12  # live: [fv14, fv11, fv8]
// [Asm]   fmadd.d fv16, fv8, fv11, fv14  # live: [fv16]
// [Asm]   li v22, 4696837146684686336  # live: [fv16, v22]
// [Asm]   fmv.d.x fv23, v22  # live: [fv23, fv16]
// [Asm]   fmul.d fv17, fv23, fv16  # live: [fv17]
// [Asm]   fcvt.w.d v18, fv17, rtz  # live: [v18]
// [Asm]   # save_ctx2  # live: [v18]
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v19, a0  # live: [v19]
// [Asm]   # restore_ctx2  # live: [v19]
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("getx", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))}, LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getx"), [Var("v1")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getx"), [Var("v2")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("gety"), [Var("v1")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("gety"), [Var("v2")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getz"), [Var("v1")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getz"), [Var("v2")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Tuple([Double(1), Double(2), Double(3)])
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Tuple([Double(4), Double(5), Double(6)])
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%27)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _231 = x.334
// [Main] beta reduce _232 = x.382
// [Main] beta reduce _234 = y.407
// [Main] beta reduce _235 = y.419
// [Main] beta reduce _238 = z.426
// [Main] beta reduce _239 = z.429
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.430
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.430
// [Main]   .type main.430, @function
// [Main] # leaf false
// [Main] main.430:
// [Main] .main.430_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   li a2, 4616189618054758400
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   li a2, 4617315517961601024
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 8(a1)
// [Main]   li a2, 4618441417868443648
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 16(a1)
// [Main]   fld fa0, 0(a0)
// [Main]   fld fa1, 8(a0)
// [Main]   fld fa2, 16(a0)
// [Main]   fld fa3, 0(a1)
// [Main]   fld fa4, 8(a1)
// [Main]   fld fa5, 16(a1)
// [Main]   fmul.d fa0, fa0, fa3
// [Main]   fmadd.d fa0, fa1, fa4, fa0
// [Main]   fmadd.d fa0, fa2, fa5, fa0
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.430
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m0, fills=[Field(index=0, val=Double(val=1)), Field(index=1, val=Double(val=2)), Field(index=2, val=Double(val=3))])
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m1, fills=[Field(index=0, val=Double(val=4)), Field(index=1, val=Double(val=5)), Field(index=2, val=Double(val=6))])
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m1), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m1), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=Mem(fref=f0, mref=m1), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%8), Insn(iref=%15)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%4), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%16), Insn(iref=%23)])
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), Insn(iref=%24)])
// [Wasm] Get Local name Insn(iref=%24) -> $%24
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%26)])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Return(args=[Insn(iref=%27)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f0, mref=m1) -> $f0.m1
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Mem(fref=f0, mref=m0) -> $f0.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%24) -> $%24
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main.430 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f0, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [KnfOpt] func_tre: getx.1 false
// [KnfOpt] func_tre: gety.6 false
// [KnfOpt] func_tre: getz.11 false
// [KnfOpt] func_tre: inprod.16 false
// [KnfOpt] func_tre: main.29 false
// [KnfOpt] freq: {getx.1: Many(2), gety.6: Many(2), getz.11: Many(2), inprod.16: Once, main.29: Once}
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_42: Var({val: Some(Double)}), _43: Var({val: Some(Double)}), z.44: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.44)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_45: Var({val: Some(Double)}), _46: Var({val: Some(Double)}), z.47: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.47)
// [KnfOpt] let (_48: Var({val: Some(Double)}), _49: Var({val: Some(Double)}), z.50: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.50)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_54: Var({val: Some(Double)}), _55: Var({val: Some(Double)}), z.56: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.56)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_51: Var({val: Some(Double)}), y.52: Var({val: Some(Double)}), _53: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.52)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_57: Var({val: Some(Double)}), _58: Var({val: Some(Double)}), z.59: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.59)
// [KnfOpt] let (_60: Var({val: Some(Double)}), _61: Var({val: Some(Double)}), z.62: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.62)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_66: Var({val: Some(Double)}), _67: Var({val: Some(Double)}), z.68: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.68)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_69: Var({val: Some(Double)}), _70: Var({val: Some(Double)}), z.71: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.71)
// [KnfOpt] let (_72: Var({val: Some(Double)}), _73: Var({val: Some(Double)}), z.74: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.74)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_78: Var({val: Some(Double)}), _79: Var({val: Some(Double)}), z.80: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.80)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getx) let _20: Double = Unit
// [KnfOpt] let _21: Double = FMul(_19, _20)
// [KnfOpt] let (_63: Var({val: Some(Double)}), y.64: Var({val: Some(Double)}), _65: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _22: Double = Var(y.64)
// [KnfOpt] let (_75: Var({val: Some(Double)}), y.76: Var({val: Some(Double)}), _77: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.76)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_81: Var({val: Some(Double)}), _82: Var({val: Some(Double)}), z.83: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.83)
// [KnfOpt] let (_84: Var({val: Some(Double)}), _85: Var({val: Some(Double)}), z.86: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.86)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_90: Var({val: Some(Double)}), _91: Var({val: Some(Double)}), z.92: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.92)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_93: Var({val: Some(Double)}), _94: Var({val: Some(Double)}), z.95: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.95)
// [KnfOpt] let (_96: Var({val: Some(Double)}), _97: Var({val: Some(Double)}), z.98: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.98)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_102: Var({val: Some(Double)}), _103: Var({val: Some(Double)}), z.104: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.104)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_99: Var({val: Some(Double)}), y.100: Var({val: Some(Double)}), _101: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.100)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_105: Var({val: Some(Double)}), _106: Var({val: Some(Double)}), z.107: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.107)
// [KnfOpt] let (_108: Var({val: Some(Double)}), _109: Var({val: Some(Double)}), z.110: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.110)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_114: Var({val: Some(Double)}), _115: Var({val: Some(Double)}), z.116: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.116)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_117: Var({val: Some(Double)}), _118: Var({val: Some(Double)}), z.119: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.119)
// [KnfOpt] let (_120: Var({val: Some(Double)}), _121: Var({val: Some(Double)}), z.122: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.122)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_126: Var({val: Some(Double)}), _127: Var({val: Some(Double)}), z.128: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.128)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getx) let _19: Double = Unit
// [KnfOpt] let (x.87: Var({val: Some(Double)}), _88: Var({val: Some(Double)}), _89: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _20: Double = Var(x.87)
// [KnfOpt] let _21: Double = FMul(_19, _20)
// [KnfOpt] let (_111: Var({val: Some(Double)}), y.112: Var({val: Some(Double)}), _113: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _22: Double = Var(y.112)
// [KnfOpt] let (_123: Var({val: Some(Double)}), y.124: Var({val: Some(Double)}), _125: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.124)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_129: Var({val: Some(Double)}), _130: Var({val: Some(Double)}), z.131: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.131)
// [KnfOpt] let (_132: Var({val: Some(Double)}), _133: Var({val: Some(Double)}), z.134: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.134)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_138: Var({val: Some(Double)}), _139: Var({val: Some(Double)}), z.140: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.140)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_141: Var({val: Some(Double)}), _142: Var({val: Some(Double)}), z.143: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.143)
// [KnfOpt] let (_144: Var({val: Some(Double)}), _145: Var({val: Some(Double)}), z.146: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.146)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_150: Var({val: Some(Double)}), _151: Var({val: Some(Double)}), z.152: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.152)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_147: Var({val: Some(Double)}), y.148: Var({val: Some(Double)}), _149: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.148)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_153: Var({val: Some(Double)}), _154: Var({val: Some(Double)}), z.155: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.155)
// [KnfOpt] let (_156: Var({val: Some(Double)}), _157: Var({val: Some(Double)}), z.158: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.158)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_162: Var({val: Some(Double)}), _163: Var({val: Some(Double)}), z.164: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.164)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_165: Var({val: Some(Double)}), _166: Var({val: Some(Double)}), z.167: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.167)
// [KnfOpt] let (_168: Var({val: Some(Double)}), _169: Var({val: Some(Double)}), z.170: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.170)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_174: Var({val: Some(Double)}), _175: Var({val: Some(Double)}), z.176: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.176)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getx) let _20: Double = Unit
// [KnfOpt] let _21: Double = FMul(_19, _20)
// [KnfOpt] let (_159: Var({val: Some(Double)}), y.160: Var({val: Some(Double)}), _161: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _22: Double = Var(y.160)
// [KnfOpt] let (_171: Var({val: Some(Double)}), y.172: Var({val: Some(Double)}), _173: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.172)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_177: Var({val: Some(Double)}), _178: Var({val: Some(Double)}), z.179: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.179)
// [KnfOpt] let (_180: Var({val: Some(Double)}), _181: Var({val: Some(Double)}), z.182: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.182)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_186: Var({val: Some(Double)}), _187: Var({val: Some(Double)}), z.188: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.188)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_189: Var({val: Some(Double)}), _190: Var({val: Some(Double)}), z.191: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.191)
// [KnfOpt] let (_192: Var({val: Some(Double)}), _193: Var({val: Some(Double)}), z.194: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.194)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_198: Var({val: Some(Double)}), _199: Var({val: Some(Double)}), z.200: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.200)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_195: Var({val: Some(Double)}), y.196: Var({val: Some(Double)}), _197: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.196)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_201: Var({val: Some(Double)}), _202: Var({val: Some(Double)}), z.203: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.203)
// [KnfOpt] let (_204: Var({val: Some(Double)}), _205: Var({val: Some(Double)}), z.206: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.206)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_210: Var({val: Some(Double)}), _211: Var({val: Some(Double)}), z.212: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.212)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_213: Var({val: Some(Double)}), _214: Var({val: Some(Double)}), z.215: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.215)
// [KnfOpt] let (_216: Var({val: Some(Double)}), _217: Var({val: Some(Double)}), z.218: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.218)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_222: Var({val: Some(Double)}), _223: Var({val: Some(Double)}), z.224: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.224)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(inprod) let _39: Double = Unit
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] freq: {getx.1: Many(2), gety.6: Many(2), getz.11: Many(2), main.29: Once}
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_241: Var({val: Some(Double)}), _242: Var({val: Some(Double)}), z.243: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.243)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_244: Var({val: Some(Double)}), _245: Var({val: Some(Double)}), z.246: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.246)
// [KnfOpt] let (_247: Var({val: Some(Double)}), _248: Var({val: Some(Double)}), z.249: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.249)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_253: Var({val: Some(Double)}), _254: Var({val: Some(Double)}), z.255: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.255)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _234: Double = Unit
// [KnfOpt] let (_250: Var({val: Some(Double)}), y.251: Var({val: Some(Double)}), _252: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.251)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_256: Var({val: Some(Double)}), _257: Var({val: Some(Double)}), z.258: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.258)
// [KnfOpt] let (_259: Var({val: Some(Double)}), _260: Var({val: Some(Double)}), z.261: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.261)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_265: Var({val: Some(Double)}), _266: Var({val: Some(Double)}), z.267: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.267)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_268: Var({val: Some(Double)}), _269: Var({val: Some(Double)}), z.270: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.270)
// [KnfOpt] let (_271: Var({val: Some(Double)}), _272: Var({val: Some(Double)}), z.273: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.273)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_277: Var({val: Some(Double)}), _278: Var({val: Some(Double)}), z.279: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.279)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getx) let _232: Double = Unit
// [KnfOpt] let _233: Double = FMul(_231, _232)
// [KnfOpt] let (_262: Var({val: Some(Double)}), y.263: Var({val: Some(Double)}), _264: Var({val: Some(Double)})) = _34
// [KnfOpt] let _234: Double = Var(y.263)
// [KnfOpt] let (_274: Var({val: Some(Double)}), y.275: Var({val: Some(Double)}), _276: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.275)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_280: Var({val: Some(Double)}), _281: Var({val: Some(Double)}), z.282: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.282)
// [KnfOpt] let (_283: Var({val: Some(Double)}), _284: Var({val: Some(Double)}), z.285: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.285)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_289: Var({val: Some(Double)}), _290: Var({val: Some(Double)}), z.291: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.291)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_292: Var({val: Some(Double)}), _293: Var({val: Some(Double)}), z.294: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.294)
// [KnfOpt] let (_295: Var({val: Some(Double)}), _296: Var({val: Some(Double)}), z.297: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.297)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_301: Var({val: Some(Double)}), _302: Var({val: Some(Double)}), z.303: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.303)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _234: Double = Unit
// [KnfOpt] let (_298: Var({val: Some(Double)}), y.299: Var({val: Some(Double)}), _300: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.299)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_304: Var({val: Some(Double)}), _305: Var({val: Some(Double)}), z.306: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.306)
// [KnfOpt] let (_307: Var({val: Some(Double)}), _308: Var({val: Some(Double)}), z.309: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.309)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_313: Var({val: Some(Double)}), _314: Var({val: Some(Double)}), z.315: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.315)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_316: Var({val: Some(Double)}), _317: Var({val: Some(Double)}), z.318: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.318)
// [KnfOpt] let (_319: Var({val: Some(Double)}), _320: Var({val: Some(Double)}), z.321: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.321)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_325: Var({val: Some(Double)}), _326: Var({val: Some(Double)}), z.327: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.327)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getx) let _231: Double = Unit
// [KnfOpt] let (x.286: Var({val: Some(Double)}), _287: Var({val: Some(Double)}), _288: Var({val: Some(Double)})) = _38
// [KnfOpt] let _232: Double = Var(x.286)
// [KnfOpt] let _233: Double = FMul(_231, _232)
// [KnfOpt] let (_310: Var({val: Some(Double)}), y.311: Var({val: Some(Double)}), _312: Var({val: Some(Double)})) = _34
// [KnfOpt] let _234: Double = Var(y.311)
// [KnfOpt] let (_322: Var({val: Some(Double)}), y.323: Var({val: Some(Double)}), _324: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.323)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_328: Var({val: Some(Double)}), _329: Var({val: Some(Double)}), z.330: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.330)
// [KnfOpt] let (_331: Var({val: Some(Double)}), _332: Var({val: Some(Double)}), z.333: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.333)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_337: Var({val: Some(Double)}), _338: Var({val: Some(Double)}), z.339: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.339)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_340: Var({val: Some(Double)}), _341: Var({val: Some(Double)}), z.342: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.342)
// [KnfOpt] let (_343: Var({val: Some(Double)}), _344: Var({val: Some(Double)}), z.345: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.345)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_349: Var({val: Some(Double)}), _350: Var({val: Some(Double)}), z.351: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.351)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _234: Double = Unit
// [KnfOpt] let (_346: Var({val: Some(Double)}), y.347: Var({val: Some(Double)}), _348: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.347)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_352: Var({val: Some(Double)}), _353: Var({val: Some(Double)}), z.354: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.354)
// [KnfOpt] let (_355: Var({val: Some(Double)}), _356: Var({val: Some(Double)}), z.357: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.357)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_361: Var({val: Some(Double)}), _362: Var({val: Some(Double)}), z.363: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.363)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_364: Var({val: Some(Double)}), _365: Var({val: Some(Double)}), z.366: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.366)
// [KnfOpt] let (_367: Var({val: Some(Double)}), _368: Var({val: Some(Double)}), z.369: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.369)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_373: Var({val: Some(Double)}), _374: Var({val: Some(Double)}), z.375: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.375)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getx) let _232: Double = Unit
// [KnfOpt] let _233: Double = FMul(_231, _232)
// [KnfOpt] let (_358: Var({val: Some(Double)}), y.359: Var({val: Some(Double)}), _360: Var({val: Some(Double)})) = _34
// [KnfOpt] let _234: Double = Var(y.359)
// [KnfOpt] let (_370: Var({val: Some(Double)}), y.371: Var({val: Some(Double)}), _372: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.371)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_376: Var({val: Some(Double)}), _377: Var({val: Some(Double)}), z.378: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.378)
// [KnfOpt] let (_379: Var({val: Some(Double)}), _380: Var({val: Some(Double)}), z.381: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.381)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_385: Var({val: Some(Double)}), _386: Var({val: Some(Double)}), z.387: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.387)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_388: Var({val: Some(Double)}), _389: Var({val: Some(Double)}), z.390: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.390)
// [KnfOpt] let (_391: Var({val: Some(Double)}), _392: Var({val: Some(Double)}), z.393: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.393)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_397: Var({val: Some(Double)}), _398: Var({val: Some(Double)}), z.399: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.399)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _234: Double = Unit
// [KnfOpt] let (_394: Var({val: Some(Double)}), y.395: Var({val: Some(Double)}), _396: Var({val: Some(Double)})) = _38
// [KnfOpt] let _235: Double = Var(y.395)
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_400: Var({val: Some(Double)}), _401: Var({val: Some(Double)}), z.402: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.402)
// [KnfOpt] let (_403: Var({val: Some(Double)}), _404: Var({val: Some(Double)}), z.405: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.405)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_409: Var({val: Some(Double)}), _410: Var({val: Some(Double)}), z.411: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.411)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(gety) let _235: Double = Unit
// [KnfOpt] let _236: Double = FMul(_234, _235)
// [KnfOpt] let _237: Double = FAdd(_233, _236)
// [KnfOpt] let (_412: Var({val: Some(Double)}), _413: Var({val: Some(Double)}), z.414: Var({val: Some(Double)})) = _34
// [KnfOpt] let _238: Double = Var(z.414)
// [KnfOpt] let (_415: Var({val: Some(Double)}), _416: Var({val: Some(Double)}), z.417: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.417)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Knf inline Some(getz) let _238: Double = Unit
// [KnfOpt] let (_421: Var({val: Some(Double)}), _422: Var({val: Some(Double)}), z.423: Var({val: Some(Double)})) = _38
// [KnfOpt] let _239: Double = Var(z.423)
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _239: Double = Unit
// [KnfOpt] let _240: Double = FMul(_238, _239)
// [KnfOpt] let _39: Double = FAdd(_237, _240)
// [KnfOpt] let _40: Double = FMul(_30, _39)
// [KnfOpt] let _41: Int = ExtApply(minimbt_truncate, [_40, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_41, ])
// [KnfOpt] Numbers of let rec: 1 1 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] LVN subst Insn(iref=%9) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%10) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%11) with Insn(iref=%4)
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%5)
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%6)
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%7)
// [CoreOpt] LVN subst Insn(iref=%17) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%18) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%19) with Insn(iref=%4)
// [CoreOpt] LVN subst Insn(iref=%20) with Insn(iref=%5)
// [CoreOpt] LVN subst Insn(iref=%21) with Insn(iref=%6)
// [CoreOpt] LVN subst Insn(iref=%22) with Insn(iref=%7)
