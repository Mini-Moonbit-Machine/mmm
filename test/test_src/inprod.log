// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv4, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> fv3, Insn(iref=%2) -> fv5
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv4]
// [Asm] live_set: [fv4]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv4]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gety10l1_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gety10l1_1"];
// [Asm]   r0 [label="fv4 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv4-> 1:fa0"
// [Asm]   comment = "fv4<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv4, 8(v2) ->   fld fa0, 8(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f8) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_8"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_8"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main43l3_3 ->   call main43l3_3
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> fv4, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> fv3, Insn(iref=%2) -> fv5
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of getz19l2_2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of getz19l2_2"];
// [Asm]   r0 [label="fv5 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv5-> 1:fa0"
// [Asm]   comment = "fv5<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv5, 16(v2) ->   fld fa0, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v19, Mem(fref=f3, mref=m0) -> v2, Insn(iref=%9) -> fv13, Insn(iref=%8) -> fv12, Insn(iref=%10) -> fv14, Insn(iref=%14) -> v18, Insn(iref=%5) -> fv9, Insn(iref=%0) -> v4, Self(fref=f3) -> v0, Insn(iref=%4) -> fv8, Insn(iref=%3) -> fv7, Insn(iref=%13) -> fv17, Insn(iref=%7) -> fv11, Mem(fref=f3, mref=m1) -> v3, Insn(iref=%2) -> fv6, Insn(iref=%1) -> v5, Insn(iref=%11) -> fv15, Insn(iref=%6) -> fv10, Insn(iref=%12) -> fv16
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%9), Insn(iref=%10)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%6)])
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v42]
// [Asm] live_set: [s11, v42, v2]
// [Asm] move_origin: []
// [Asm] defined: v42 is X
// [Asm] defs: [fv43]
// [Asm] live_set: [s11, fv43, v2]
// [Asm] move_origin: []
// [Asm] defined: fv43 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v44]
// [Asm] live_set: [s11, v44, v2]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [fv45]
// [Asm] live_set: [fv45, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv45 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v46]
// [Asm] live_set: [v46, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: v46 is X
// [Asm] defs: [fv47]
// [Asm] live_set: [s11, fv47, v2]
// [Asm] move_origin: []
// [Asm] defined: fv47 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v2, v35, v3]
// [Asm] move_origin: []
// [Asm] defined: v35 is X
// [Asm] defs: [fv36]
// [Asm] live_set: [v2, fv36, v3]
// [Asm] move_origin: []
// [Asm] defined: fv36 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v37]
// [Asm] live_set: [v2, v37, v3]
// [Asm] move_origin: []
// [Asm] defined: v37 is X
// [Asm] defs: [fv38]
// [Asm] live_set: [v2, fv38, v3]
// [Asm] move_origin: []
// [Asm] defined: fv38 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v39]
// [Asm] live_set: [v2, v39, v3]
// [Asm] move_origin: []
// [Asm] defined: v39 is X
// [Asm] defs: [fv40]
// [Asm] live_set: [v2, fv40, v3]
// [Asm] move_origin: []
// [Asm] defined: fv40 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fa0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [v2, fv6, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, fv6, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fa0, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, fv6, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, fv8, v3]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv8, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, fv8, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fv8, fa0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [v2, fv8, fv9, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv9 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv8, fv9, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv8, fv9, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, fv8, fv9, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fv8, fa0, fv9, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, fv8, fv9, fv10, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv10 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv8, fv9, fv10, v3]
// [Asm] move_origin: []
// [Asm] defs: [fv12]
// [Asm] live_set: [v2, fv12, v3]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv12, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv12, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0, fv12, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv13]
// [Asm] live_set: [v3, fv12, fv13]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv13 is F
// [Asm] defs: []
// [Asm] live_set: [v3, fv12, fv13]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3, fv12, fv13]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv12, a0, fv13]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0, fv12, fv13]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv12, fv14, fv13]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv14 is F
// [Asm] defs: []
// [Asm] live_set: [fv12, fv14, fv13]
// [Asm] move_origin: []
// [Asm] defs: [fv16]
// [Asm] live_set: [fv16]
// [Asm] move_origin: []
// [Asm] defined: fv16 is F
// [Asm] defs: [v22]
// [Asm] live_set: [fv16, v22]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [fv23]
// [Asm] live_set: [fv23, fv16]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: [fv17]
// [Asm] live_set: [fv17]
// [Asm] move_origin: []
// [Asm] defined: fv17 is F
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: []
// [Asm] live_set: [v18]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [a0]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v19]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main43l3_3"];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r20 [label="a6", color=blue];
// [Asm]   r23 [label="v18 ← a0", color=green];
// [Asm]   r3 [label="v44 ← a0", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v35 ← a0", color=green];
// [Asm]   r13 [label="t3", color=blue];
// [Asm]   r4 [label="v46 ← a0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="t1", color=blue];
// [Asm]   r7 [label="v37 ← a0", color=green];
// [Asm]   r10 [label="t0", color=blue];
// [Asm]   r22 [label="v22 ← a0", color=green];
// [Asm]   r14 [label="t4", color=blue];
// [Asm]   r8 [label="v39 ← a0", color=green];
// [Asm]   r5 [label="v3 ← s1", color=green];
// [Asm]   r24 [label="v19 ← a0", color=green];
// [Asm]   r15 [label="a1", color=blue];
// [Asm]   r2 [label="v42 ← a0", color=green];
// [Asm]   r16 [label="a2", color=blue];
// [Asm]   r18 [label="a4", color=blue];
// [Asm]   r19 [label="a5", color=blue];
// [Asm]   r17 [label="a3", color=blue];
// [Asm]   r21 [label="a7", color=blue];
// [Asm]   r12 [label="t2", color=blue];
// [Asm]   r0 -- r15;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r5 -- r8;
// [Asm]   r5 -- r20;
// [Asm]   r5 -- r10;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r17;
// [Asm]   r0 -- r17;
// [Asm]   r5 -- r13;
// [Asm]   r5 -- r18;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r9 -- r17;
// [Asm]   r5 -- r16;
// [Asm]   r5 -- r11;
// [Asm]   r0 -- r19;
// [Asm]   r0 -- r16;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r12;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r0 -- r10;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r5 -- r14;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r9 -- r19;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r9 -- r13;
// [Asm]   r0 -- r20;
// [Asm]   r5 -- r15;
// [Asm]   r0 -- r18;
// [Asm]   r9 -- r21;
// [Asm]   r5 -- r12;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v42-> 3:v44-> 4:v46-> 5:v3-> 6:v35-> 7:v37-> 8:v39-> 9:a0-> 10:t0-> 11:t1-> 12:t2-> 13:t3-> 14:t4-> 15:a1-> 16:a2-> 17:a3-> 18:a4-> 19:a5-> 20:a6-> 21:a7-> 22:v22-> 23:v18-> 24:v19"
// [Asm]   comment = "v2<-s0;v18<-a0;v44<-a0;v35<-a0;v46<-a0;v37<-a0;v22<-a0;v39<-a0;v3<-s1;v19<-a0;v42<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main43l3_3"];
// [Asm]   r0 [label="fv43 ← fa0", color=green];
// [Asm]   r33 [label="fv16 ← fa0", color=green];
// [Asm]   r9 [label="ft2", color=blue];
// [Asm]   r26 [label="fv7 ← fa0", color=green];
// [Asm]   r6 [label="fa0", color=blue];
// [Asm]   r13 [label="ft6", color=blue];
// [Asm]   r4 [label="fv38 ← fa0", color=green];
// [Asm]   r29 [label="fv10 ← fa0", color=green];
// [Asm]   r35 [label="fv17 ← fa0", color=green];
// [Asm]   r7 [label="ft0", color=blue];
// [Asm]   r10 [label="ft3", color=blue];
// [Asm]   r8 [label="ft1", color=blue];
// [Asm]   r5 [label="fv40 ← fa0", color=green];
// [Asm]   r24 [label="fa7", color=blue];
// [Asm]   r32 [label="fv14 ← fa0", color=green];
// [Asm]   r15 [label="ft8", color=blue];
// [Asm]   r31 [label="fv13 ← fs1", color=green];
// [Asm]   r17 [label="ft10", color=blue];
// [Asm]   r12 [label="ft5", color=blue];
// [Asm]   r20 [label="fa3", color=blue];
// [Asm]   r23 [label="fa6", color=blue];
// [Asm]   r3 [label="fv36 ← fa0", color=green];
// [Asm]   r27 [label="fv8 ← fs0", color=green];
// [Asm]   r1 [label="fv45 ← fa0", color=green];
// [Asm]   r28 [label="fv9 ← fs1", color=green];
// [Asm]   r11 [label="ft4", color=blue];
// [Asm]   r34 [label="fv23 ← fa1", color=green];
// [Asm]   r22 [label="fa5", color=blue];
// [Asm]   r14 [label="ft7", color=blue];
// [Asm]   r30 [label="fv12 ← fs0", color=green];
// [Asm]   r25 [label="fv6 ← fs0", color=green];
// [Asm]   r2 [label="fv47 ← fa0", color=green];
// [Asm]   r16 [label="ft9", color=blue];
// [Asm]   r18 [label="fa1", color=blue];
// [Asm]   r19 [label="fa2", color=blue];
// [Asm]   r21 [label="fa4", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r8 -- r31;
// [Asm]   r12 -- r25;
// [Asm]   r23 -- r31;
// [Asm]   r9 -- r25;
// [Asm]   r16 -- r25;
// [Asm]   r14 -- r27;
// [Asm]   r9 -- r27;
// [Asm]   r27 -- r29;
// [Asm]   r15 -- r31;
// [Asm]   r7 -- r25;
// [Asm]   r18 -- r25;
// [Asm]   r30 -- r31;
// [Asm]   r11 -- r31;
// [Asm]   r18 -- r27;
// [Asm]   r13 -- r31;
// [Asm]   r19 -- r31;
// [Asm]   r22 -- r31;
// [Asm]   r9 -- r31;
// [Asm]   r27 -- r28;
// [Asm]   r13 -- r28;
// [Asm]   r7 -- r27;
// [Asm]   r15 -- r25;
// [Asm]   r20 -- r30;
// [Asm]   r18 -- r28;
// [Asm]   r14 -- r30;
// [Asm]   r6 -- r13;
// [Asm]   r14 -- r28;
// [Asm]   r22 -- r25;
// [Asm]   r13 -- r30;
// [Asm]   r24 -- r31;
// [Asm]   r19 -- r27;
// [Asm]   r12 -- r28;
// [Asm]   r9 -- r28;
// [Asm]   r21 -- r27;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r10;
// [Asm]   r22 -- r27;
// [Asm]   r18 -- r30;
// [Asm]   r24 -- r27;
// [Asm]   r10 -- r31;
// [Asm]   r20 -- r27;
// [Asm]   r6 -- r31;
// [Asm]   r28 -- r29;
// [Asm]   r10 -- r30;
// [Asm]   r14 -- r31;
// [Asm]   r18 -- r31;
// [Asm]   r10 -- r25;
// [Asm]   r6 -- r23;
// [Asm]   r17 -- r31;
// [Asm]   r24 -- r25;
// [Asm]   r17 -- r27;
// [Asm]   r15 -- r28;
// [Asm]   r11 -- r30;
// [Asm]   r15 -- r30;
// [Asm]   r16 -- r27;
// [Asm]   r8 -- r30;
// [Asm]   r11 -- r25;
// [Asm]   r6 -- r25;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r16 -- r31;
// [Asm]   r16 -- r30;
// [Asm]   r6 -- r11;
// [Asm]   r20 -- r31;
// [Asm]   r6 -- r15;
// [Asm]   r19 -- r30;
// [Asm]   r6 -- r14;
// [Asm]   r8 -- r27;
// [Asm]   r21 -- r28;
// [Asm]   r30 -- r32;
// [Asm]   r6 -- r30;
// [Asm]   r9 -- r30;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r7 -- r30;
// [Asm]   r10 -- r27;
// [Asm]   r6 -- r22;
// [Asm]   r17 -- r25;
// [Asm]   r23 -- r27;
// [Asm]   r16 -- r28;
// [Asm]   r8 -- r25;
// [Asm]   r6 -- r12;
// [Asm]   r24 -- r28;
// [Asm]   r15 -- r27;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r20 -- r25;
// [Asm]   r6 -- r20;
// [Asm]   r7 -- r28;
// [Asm]   r24 -- r30;
// [Asm]   r6 -- r8;
// [Asm]   r33 -- r34;
// [Asm]   r8 -- r28;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r27;
// [Asm]   r19 -- r28;
// [Asm]   r23 -- r25;
// [Asm]   r10 -- r28;
// [Asm]   r22 -- r30;
// [Asm]   r21 -- r31;
// [Asm]   r21 -- r30;
// [Asm]   r12 -- r31;
// [Asm]   r23 -- r30;
// [Asm]   r14 -- r25;
// [Asm]   r6 -- r28;
// [Asm]   r22 -- r28;
// [Asm]   r21 -- r25;
// [Asm]   r23 -- r28;
// [Asm]   r6 -- r17;
// [Asm]   r12 -- r30;
// [Asm]   r7 -- r31;
// [Asm]   r20 -- r28;
// [Asm]   r12 -- r27;
// [Asm]   r31 -- r32;
// [Asm]   r11 -- r27;
// [Asm]   r17 -- r30;
// [Asm]   r19 -- r25;
// [Asm]   r11 -- r28;
// [Asm]   r17 -- r28;
// [Asm]   r13 -- r27;
// [Asm]   comment = "0:fv43-> 1:fv45-> 2:fv47-> 3:fv36-> 4:fv38-> 5:fv40-> 6:fa0-> 7:ft0-> 25:fv6-> 8:ft1-> 27:fv8-> 28:fv9-> 9:ft2-> 10:ft3-> 30:fv12-> 31:fv13-> 11:ft4-> 12:ft5-> 13:ft6-> 14:ft7-> 15:ft8-> 16:ft9-> 17:ft10-> 18:fa1-> 19:fa2-> 20:fa3-> 21:fa4-> 22:fa5-> 23:fa6-> 24:fa7-> 29:fv10-> 32:fv14-> 26:fv7-> 33:fv16-> 34:fv23-> 35:fv17"
// [Asm]   comment = "fv43<-fa0;fv16<-fa0;fv7<-fa0;fv38<-fa0;fv10<-fa0;fv17<-fa0;fv40<-fa0;fv14<-fa0;fv13<-fs1;fv36<-fa0;fv8<-fs0;fv45<-fa0;fv9<-fs1;fv23<-fa1;fv12<-fs0;fv6<-fs0;fv47<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -24 ->   addi s0, s11, -24
// [Asm] subst   andi s11, v2, -8 ->   andi s11, s0, -8
// [Asm] subst   li v42, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv43, v42 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv43, 0(v2) ->   fsd fa0, 0(s0)
// [Asm] subst   li v44, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv45, v44 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv45, 8(v2) ->   fsd fa0, 8(s0)
// [Asm] subst   li v46, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv47, v46 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv47, 16(v2) ->   fsd fa0, 16(s0)
// [Asm] subst   addi v3, s11, -24 ->   addi s1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, s1, -8
// [Asm] subst   li v35, 4616189618054758400 ->   li a0, 4616189618054758400
// [Asm] subst   fmv.d.x fv36, v35 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv36, 0(v3) ->   fsd fa0, 0(s1)
// [Asm] subst   li v37, 4617315517961601024 ->   li a0, 4617315517961601024
// [Asm] subst   fmv.d.x fv38, v37 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv38, 8(v3) ->   fsd fa0, 8(s1)
// [Asm] subst   li v39, 4618441417868443648 ->   li a0, 4618441417868443648
// [Asm] subst   fmv.d.x fv40, v39 ->   fmv.d.x fa0, a0
// [Asm] subst   fsd fv40, 16(v3) ->   fsd fa0, 16(s1)
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call getx1l0_0 ->   call getx1l0_0
// [Asm] subst   fmv.d fv6, fa0 ->   fmv.d fs0, fa0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   call getx1l0_0 ->   call getx1l0_0
// [Asm] subst   fmul.d fv8, fv6, fv7 ->   fmul.d fs0, fs0, fa0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call gety10l1_1 ->   call gety10l1_1
// [Asm] subst   fmv.d fv9, fa0 ->   fmv.d fs1, fa0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   call gety10l1_1 ->   call gety10l1_1
// [Asm] subst   fmadd.d fv12, fv9, fv10, fv8 ->   fmadd.d fs0, fs1, fa0, fs0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call getz19l2_2 ->   call getz19l2_2
// [Asm] subst   fmv.d fv13, fa0 ->   fmv.d fs1, fa0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   call getz19l2_2 ->   call getz19l2_2
// [Asm] subst   fmadd.d fv16, fv13, fv14, fv12 ->   fmadd.d fa0, fs1, fa0, fs0
// [Asm] subst   li v22, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv23, v22 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv17, fv23, fv16 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v18, fv17, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> fv3, Insn(iref=%2) -> fv5
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of getx1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of getx1l0_0"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv3, 0(v2) ->   fld fa0, 0(a0)
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] getx1l0_0:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, a0, fv3, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .getx1l0_0_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   fld fv3, 0(v2)  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] getz19l2_2:
// [Asm] # block info: defs: [fa0, fv5, v2], uses: [fa0, fv5, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .getz19l2_2_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   fld fv5, 16(v2)  # live: [fv5]
// [Asm] # control
// [Asm]   fmv.d fa0, fv5  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_8:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_8_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main43l3_3  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main43l3_3:
// [Asm] # block info: defs: [v22, fv12, a1, s11, fv47, v44, fa1, fv38, fa2, ft6, a4, fa6, a6, ft10, ft5, ft4, ft9, fa4, ft2, v37, a3, a7, fa7, fa3, ft3, fv43, t2, fv17, fv7, v3, t1, fv10, fv23, v42, ft0, ft1, fv14, fv16, fv40, fv36, v19, ft7, fv45, v46, a5, a0, fv8, a2, fv6, v39, ft8, t3, fv9, t0, fa5, v18, fa0, v35, fv13, t4, v2], uses: [v3, fv10, fv23, v42, v22, fv12, s11, fv47, fv14, v44, fv16, fv38, fv40, fv36, v19, fv45, v46, a0, fv8, v37, fv6, v39, fv9, v18, fv43, v35, fa0, fv13, fv17, fv7, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main43l3_3_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -24  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [s11, v2]
// [Asm]   li v42, 4607182418800017408  # live: [s11, v42, v2]
// [Asm]   fmv.d.x fv43, v42  # live: [s11, fv43, v2]
// [Asm]   fsd fv43, 0(v2)  # live: [s11, v2]
// [Asm]   li v44, 4611686018427387904  # live: [s11, v44, v2]
// [Asm]   fmv.d.x fv45, v44  # live: [fv45, s11, v2]
// [Asm]   fsd fv45, 8(v2)  # live: [s11, v2]
// [Asm]   li v46, 4613937818241073152  # live: [v46, s11, v2]
// [Asm]   fmv.d.x fv47, v46  # live: [s11, fv47, v2]
// [Asm]   fsd fv47, 16(v2)  # live: [s11, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v3]
// [Asm]   li v35, 4616189618054758400  # live: [v2, v35, v3]
// [Asm]   fmv.d.x fv36, v35  # live: [v2, fv36, v3]
// [Asm]   fsd fv36, 0(v3)  # live: [v2, v3]
// [Asm]   li v37, 4617315517961601024  # live: [v2, v37, v3]
// [Asm]   fmv.d.x fv38, v37  # live: [v2, fv38, v3]
// [Asm]   fsd fv38, 8(v3)  # live: [v2, v3]
// [Asm]   li v39, 4618441417868443648  # live: [v2, v39, v3]
// [Asm]   fmv.d.x fv40, v39  # live: [v2, fv40, v3]
// [Asm]   fsd fv40, 16(v3)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [v2, a0, v3]
// [Asm]   call getx1l0_0  # live: [v2, fa0, v3]
// [Asm]   fmv.d fv6, fa0  # live: [v2, fv6, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv6, v3]
// [Asm]   # save_ctx2  # live: [v2, fv6, v3]
// [Asm]   mv a0, v3  # live: [v2, fv6, a0, v3]
// [Asm]   call getx1l0_0  # live: [v2, fa0, fv6, v3]
// [Asm]   fmv.d fv7, fa0  # live: [v2, fv6, fv7, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv6, fv7, v3]
// [Asm]   fmul.d fv8, fv6, fv7  # live: [v2, fv8, v3]
// [Asm]   # save_ctx2  # live: [v2, fv8, v3]
// [Asm]   mv a0, v2  # live: [v2, fv8, a0, v3]
// [Asm]   call gety10l1_1  # live: [v2, fv8, fa0, v3]
// [Asm]   fmv.d fv9, fa0  # live: [v2, fv8, fv9, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv8, fv9, v3]
// [Asm]   # save_ctx2  # live: [v2, fv8, fv9, v3]
// [Asm]   mv a0, v3  # live: [v2, fv8, fv9, a0, v3]
// [Asm]   call gety10l1_1  # live: [v2, fv8, fa0, fv9, v3]
// [Asm]   fmv.d fv10, fa0  # live: [v2, fv8, fv9, fv10, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv8, fv9, fv10, v3]
// [Asm]   fmadd.d fv12, fv9, fv10, fv8  # live: [v2, fv12, v3]
// [Asm]   # save_ctx2  # live: [v2, fv12, v3]
// [Asm]   mv a0, v2  # live: [fv12, a0, v3]
// [Asm]   call getz19l2_2  # live: [fa0, fv12, v3]
// [Asm]   fmv.d fv13, fa0  # live: [v3, fv12, fv13]
// [Asm]   # restore_ctx2  # live: [v3, fv12, fv13]
// [Asm]   # save_ctx2  # live: [v3, fv12, fv13]
// [Asm]   mv a0, v3  # live: [fv12, a0, fv13]
// [Asm]   call getz19l2_2  # live: [fa0, fv12, fv13]
// [Asm]   fmv.d fv14, fa0  # live: [fv12, fv14, fv13]
// [Asm]   # restore_ctx2  # live: [fv12, fv14, fv13]
// [Asm]   fmadd.d fv16, fv13, fv14, fv12  # live: [fv16]
// [Asm]   li v22, 4696837146684686336  # live: [fv16, v22]
// [Asm]   fmv.d.x fv23, v22  # live: [fv23, fv16]
// [Asm]   fmul.d fv17, fv23, fv16  # live: [fv17]
// [Asm]   fcvt.w.d v18, fv17, rtz  # live: [v18]
// [Asm]   # save_ctx2  # live: [v18]
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v19, a0  # live: [v19]
// [Asm]   # restore_ctx2  # live: [v19]
// [Asm] # control
// [Asm]   mv a0, v19  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_8  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] gety10l1_1:
// [Asm] # block info: defs: [fa0, fv4, v2], uses: [fa0, fv4, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .gety10l1_1_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   fld fv4, 8(v2)  # live: [fv4]
// [Asm] # control
// [Asm]   fmv.d fa0, fv4  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("getx", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))}, LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getx"), [Var("v1")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getx"), [Var("v2")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("gety"), [Var("v1")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("gety"), [Var("v2")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getz"), [Var("v1")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getz"), [Var("v2")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Tuple([Double(1), Double(2), Double(3)])
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Tuple([Double(4), Double(5), Double(6)])
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl getx1l0_0
// [Main]   .type getx1l0_0, @function
// [Main] # leaf true
// [Main] getx1l0_0:
// [Main] .getx1l0_0_0:
// [Main]   fld fa0, 0(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl getz19l2_2
// [Main]   .type getz19l2_2, @function
// [Main] # leaf true
// [Main] getz19l2_2:
// [Main] .getz19l2_2_0:
// [Main]   fld fa0, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_8
// [Main]   .type T$start_8, @function
// [Main] # leaf false
// [Main] T$start_8:
// [Main] .T$start_8_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main43l3_3
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main43l3_3
// [Main]   .type main43l3_3, @function
// [Main] # leaf false
// [Main] main43l3_3:
// [Main] .main43l3_3_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   fsd fs1, 32(sp)
// [Main]   addi s0, s11, -24
// [Main]   andi s11, s0, -8
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 0(s0)
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 8(s0)
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 16(s0)
// [Main]   addi s1, s11, -24
// [Main]   andi s11, s1, -8
// [Main]   li a0, 4616189618054758400
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 0(s1)
// [Main]   li a0, 4617315517961601024
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 8(s1)
// [Main]   li a0, 4618441417868443648
// [Main]   fmv.d.x fa0, a0
// [Main]   fsd fa0, 16(s1)
// [Main]   mv a0, s0
// [Main]   call getx1l0_0
// [Main]   fmv.d fs0, fa0
// [Main]   mv a0, s1
// [Main]   call getx1l0_0
// [Main]   fmul.d fs0, fs0, fa0
// [Main]   mv a0, s0
// [Main]   call gety10l1_1
// [Main]   fmv.d fs1, fa0
// [Main]   mv a0, s1
// [Main]   call gety10l1_1
// [Main]   fmadd.d fs0, fs1, fa0, fs0
// [Main]   mv a0, s0
// [Main]   call getz19l2_2
// [Main]   fmv.d fs1, fa0
// [Main]   mv a0, s1
// [Main]   call getz19l2_2
// [Main]   fmadd.d fa0, fs1, fa0, fs0
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   fld fs1, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_8
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gety10l1_1
// [Main]   .type gety10l1_1, @function
// [Main] # leaf true
// [Main] gety10l1_1:
// [Main] .gety10l1_1_0:
// [Main]   fld fa0, 8(a0)
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function gety10l1_1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function gety10l1_1 to wasm
// [Wasm] Lowering function T$start_8
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_8 to wasm
// [Wasm] Lowering function getz19l2_2
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function getz19l2_2 to wasm
// [Wasm] Lowering function main43l3_3
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m0, fills=[Field(index=0, val=Double(val=1)), Field(index=1, val=Double(val=2)), Field(index=2, val=Double(val=3))])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m1, fills=[Field(index=0, val=Double(val=4)), Field(index=1, val=Double(val=5)), Field(index=2, val=Double(val=6))])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Mem(fref=f3, mref=m1)])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%2), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Call(ty=Double, f=f1, args=[Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Call(ty=Double, f=f1, args=[Mem(fref=f3, mref=m1)])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%5), Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%4), Insn(iref=%7)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Call(ty=Double, f=f2, args=[Mem(fref=f3, mref=m0)])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Call(ty=Double, f=f2, args=[Mem(fref=f3, mref=m1)])
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%9), Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%8), Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), Insn(iref=%12)])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%14)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering control Return(args=[Insn(iref=%15)])
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function main43l3_3 to wasm
// [Wasm] Lowering function getx1l0_0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function getx1l0_0 to wasm
// [KnfOpt] freq: {getx1: Many(2), gety10: Many(2), getz19: Many(2), inprod28: Once, main43: Once}
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Knf inline Some(getx1)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Knf inline Some(getx1)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Knf inline Some(gety10)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Knf inline Some(gety10)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Knf inline Some(getz19)
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Knf inline Some(getz19)
// [KnfOpt] Knf inline Some(inprod28)
// [KnfOpt] Numbers of let rec: 4 4 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f1: Multiple, f8: Once, f2: Multiple, f3: Once, f0: Multiple})
