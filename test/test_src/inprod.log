// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, Insn(iref=%2) -> fv6, Insn(iref=%1) -> v5, Mem(fref=f4, mref=m1) -> v3, Self(fref=f4) -> v0, Mem(fref=f4, mref=m0) -> v2, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: [v2]
// [Asm] defined: s11 is X
// [Asm] defs: [v26]
// [Asm] live_set: [s11, v26, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [fv27]
// [Asm] live_set: [fv27, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [s11, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [fv29]
// [Asm] live_set: [fv29, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v30]
// [Asm] live_set: [s11, v30, v2]
// [Asm] move_origin: []
// [Asm] defined: v30 is X
// [Asm] defs: [fv31]
// [Asm] live_set: [s11, fv31, v2]
// [Asm] move_origin: []
// [Asm] defined: fv31 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v16]
// [Asm] live_set: [v16, v2]
// [Asm] move_origin: []
// [Asm] defined: v16 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: s11 is X
// [Asm] defs: [v18]
// [Asm] live_set: [v2, v18, v3]
// [Asm] move_origin: []
// [Asm] defined: v18 is X
// [Asm] defs: [fv19]
// [Asm] live_set: [v2, fv19, v3]
// [Asm] move_origin: []
// [Asm] defined: fv19 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v2, v20, v3]
// [Asm] move_origin: []
// [Asm] defined: v20 is X
// [Asm] defs: [fv21]
// [Asm] live_set: [v2, fv21, v3]
// [Asm] move_origin: []
// [Asm] defined: fv21 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v22]
// [Asm] live_set: [v2, v22, v3]
// [Asm] move_origin: []
// [Asm] defined: v22 is X
// [Asm] defs: [fv23]
// [Asm] live_set: [v2, fv23, v3]
// [Asm] move_origin: []
// [Asm] defined: fv23 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv6]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [fv6]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, fv6]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [fv6, fv13]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main43l4_4"];
// [Asm]   r0 [label="v24 ← a0", color=green];
// [Asm]   r20 [label="a4", color=blue];
// [Asm]   r23 [label="a7", color=blue];
// [Asm]   r3 [label="v26 ← a1", color=green];
// [Asm]   r9 [label="v20 ← a2", color=green];
// [Asm]   r26 [label="v9 ← a0", color=green];
// [Asm]   r6 [label="v16 ← a1", color=green];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v28 ← a1", color=green];
// [Asm]   r1 [label="v2 ← a0", color=green];
// [Asm]   r11 [label="a0", color=blue];
// [Asm]   r7 [label="v3 ← a1", color=green];
// [Asm]   r10 [label="v22 ← a2", color=green];
// [Asm]   r22 [label="a6", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="v18 ← a2", color=green];
// [Asm]   r5 [label="v30 ← a1", color=green];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r24 [label="v12 ← a0", color=green];
// [Asm]   r25 [label="v8 ← a0", color=green];
// [Asm]   r2 [label="s11", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="a2", color=blue];
// [Asm]   r19 [label="a3", color=blue];
// [Asm]   r21 [label="a5", color=blue];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a1", color=blue];
// [Asm]   r1 -- r9;
// [Asm]   r11 -- r20;
// [Asm]   r11 -- r13;
// [Asm]   r11 -- r17;
// [Asm]   r1 -- r8;
// [Asm]   r2 -- r4;
// [Asm]   r1 -- r4;
// [Asm]   r11 -- r14;
// [Asm]   r7 -- r10;
// [Asm]   r1 -- r7;
// [Asm]   r7 -- r11;
// [Asm]   r11 -- r16;
// [Asm]   r1 -- r10;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r5;
// [Asm]   r11 -- r12;
// [Asm]   r11 -- r23;
// [Asm]   r11 -- r22;
// [Asm]   r11 -- r15;
// [Asm]   r11 -- r18;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r7 -- r9;
// [Asm]   r7 -- r8;
// [Asm]   r1 -- r3;
// [Asm]   r2 -- r3;
// [Asm]   r11 -- r19;
// [Asm]   r11 -- r21;
// [Asm]   comment = "0:v24-> 1:v2-> 2:s11-> 3:v26-> 4:v28-> 5:v30-> 6:v16-> 7:v3-> 8:v18-> 9:v20-> 10:v22-> 11:a0-> 12:a1-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:a2-> 19:a3-> 20:a4-> 21:a5-> 22:a6-> 23:a7-> 24:v12-> 25:v8-> 26:v9"
// [Asm]   comment = "v24<-a0;v26<-a1;v20<-a2;v9<-a0;v16<-a1;v28<-a1;v2<-a0;v3<-a1;v22<-a2;v18<-a2;v30<-a1;v12<-a0;v8<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main43l4_4"];
// [Asm]   r0 [label="fv27 ← fa0", color=green];
// [Asm]   r20 [label="fa3", color=blue];
// [Asm]   r23 [label="fa6", color=blue];
// [Asm]   r3 [label="fv19 ← fa0", color=green];
// [Asm]   r9 [label="ft2", color=blue];
// [Asm]   r26 [label="fv13 ← fa1", color=green];
// [Asm]   r27 [label="fv7 ← fa0", color=green];
// [Asm]   r6 [label="fa0", color=blue];
// [Asm]   r13 [label="ft6", color=blue];
// [Asm]   r4 [label="fv21 ← fa0", color=green];
// [Asm]   r1 [label="fv29 ← fa0", color=green];
// [Asm]   r11 [label="ft4", color=blue];
// [Asm]   r7 [label="ft0", color=blue];
// [Asm]   r10 [label="ft3", color=blue];
// [Asm]   r22 [label="fa5", color=blue];
// [Asm]   r14 [label="ft7", color=blue];
// [Asm]   r8 [label="ft1", color=blue];
// [Asm]   r5 [label="fv23 ← fa0", color=green];
// [Asm]   r15 [label="ft8", color=blue];
// [Asm]   r24 [label="fa7", color=blue];
// [Asm]   r25 [label="fv6 ← fa0", color=green];
// [Asm]   r2 [label="fv31 ← fa0", color=green];
// [Asm]   r16 [label="ft9", color=blue];
// [Asm]   r18 [label="fa1", color=blue];
// [Asm]   r19 [label="fa2", color=blue];
// [Asm]   r21 [label="fa4", color=blue];
// [Asm]   r17 [label="ft10", color=blue];
// [Asm]   r12 [label="ft5", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r23;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:fv27-> 1:fv29-> 2:fv31-> 3:fv19-> 4:fv21-> 5:fv23-> 6:fa0-> 7:ft0-> 8:ft1-> 9:ft2-> 10:ft3-> 11:ft4-> 12:ft5-> 13:ft6-> 14:ft7-> 15:ft8-> 16:ft9-> 17:ft10-> 18:fa1-> 19:fa2-> 20:fa3-> 21:fa4-> 22:fa5-> 23:fa6-> 24:fa7-> 25:fv6-> 26:fv13-> 27:fv7"
// [Asm]   comment = "fv27<-fa0;fv19<-fa0;fv13<-fa1;fv7<-fa0;fv21<-fa0;fv29<-fa0;fv23<-fa0;fv6<-fa0;fv31<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v24, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi v2, v24, -8 ->   andi a0, a0, -8
// [Asm] subst   mv s11, v2 ->   mv s11, a0
// [Asm] subst   li v26, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv27, v26 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv27, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   li v28, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv29, v28 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv29, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   li v30, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv31, v30 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv31, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v16, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi v3, v16, -8 ->   andi a1, a1, -8
// [Asm] subst   mv s11, v3 ->   mv s11, a1
// [Asm] subst   li v18, 4616189618054758400 ->   li a2, 4616189618054758400
// [Asm] subst   fmv.d.x fv19, v18 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv19, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   li v20, 4617315517961601024 ->   li a2, 4617315517961601024
// [Asm] subst   fmv.d.x fv21, v20 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv21, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   li v22, 4618441417868443648 ->   li a2, 4618441417868443648
// [Asm] subst   fmv.d.x fv23, v22 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv23, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   call inprod28l3_3 ->   call inprod28l3_3
// [Asm] subst   li v12, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv13, v12 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv7, fv13, fv6 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v8, fv7, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv4, Self(fref=f1) -> v0, FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> fv3, Insn(iref=%2) -> fv5
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv4]
// [Asm] live_set: [fv4]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv4]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of gety10l1_1"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of gety10l1_1"];
// [Asm]   r0 [label="fv4 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv4-> 1:fa0"
// [Asm]   comment = "fv4<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv4, 8(v2) ->   fld fa0, 8(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start_10"];
// [Asm]   r0 [label="t0", color=blue];
// [Asm]   r5 [label="t4", color=blue];
// [Asm]   r3 [label="t2", color=blue];
// [Asm]   r2 [label="t1", color=blue];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a1", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="t3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:t0-> 1:a0-> 2:t1-> 3:t2-> 4:t3-> 5:t4-> 6:a1-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start_10"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main43l4_4 ->   call main43l4_4
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%1) -> fv4, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%0) -> fv3, Insn(iref=%2) -> fv5
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv5]
// [Asm] live_set: [fv5]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv5]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of getz19l2_2"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of getz19l2_2"];
// [Asm]   r0 [label="fv5 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv5-> 1:fa0"
// [Asm]   comment = "fv5<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv5, 16(v2) ->   fld fa0, 16(a0)
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%4) -> fv8, Insn(iref=%3) -> fv7, Insn(iref=%7) -> fv11, FnParam(fref=f3, fpref=$f.1) -> v3, Insn(iref=%2) -> fv6, Insn(iref=%9) -> fv13, Insn(iref=%8) -> fv12, Insn(iref=%1) -> fv5, Insn(iref=%10) -> fv14, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%6) -> fv10, Insn(iref=%5) -> fv9, Self(fref=f3) -> v0, Insn(iref=%0) -> fv4
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%7), Insn(iref=%8)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fa0, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, fv4, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv4 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv4, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv4, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, fv4, a0, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fa0, fv4, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [v2, fv5, fv4, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv5 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv5, fv4, v3]
// [Asm] move_origin: []
// [Asm] defs: [fv6]
// [Asm] live_set: [v2, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, fv6, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fa0, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [v2, fv6, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv7 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v2, fv6, a0, fv7, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v2, fa0, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v2, fv8, fv6, fv7, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv8 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv8, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defs: [fv10]
// [Asm] live_set: [v2, fv10, v3]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: []
// [Asm] live_set: [v2, fv10, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv10, a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0, fv10, v3]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv11]
// [Asm] live_set: [fv10, fv11, v3]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv11 is F
// [Asm] defs: []
// [Asm] live_set: [fv10, fv11, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [fv10, fv11, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [fv10, fv11, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fv10, fv11, fa0]
// [Asm] move_origin: []
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv12, fv10, fv11]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv12 is F
// [Asm] defs: []
// [Asm] live_set: [fv12, fv10, fv11]
// [Asm] move_origin: []
// [Asm] defs: [fv14]
// [Asm] live_set: [fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inprod28l3_3"];
// [Asm]   r8 [label="t4", color=blue];
// [Asm]   r0 [label="v2 ← s0", color=green];
// [Asm]   r5 [label="t1", color=blue];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   r2 [label="v3 ← s1", color=green];
// [Asm]   r9 [label="a2", color=blue];
// [Asm]   r6 [label="t2", color=blue];
// [Asm]   r13 [label="a6", color=blue];
// [Asm]   r4 [label="t0", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="a4", color=blue];
// [Asm]   r7 [label="t3", color=blue];
// [Asm]   r10 [label="a3", color=blue];
// [Asm]   r14 [label="a7", color=blue];
// [Asm]   r12 [label="a5", color=blue];
// [Asm]   r2 -- r6;
// [Asm]   r0 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r8;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r14;
// [Asm]   r2 -- r5;
// [Asm]   r2 -- r10;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r9;
// [Asm]   r0 -- r7;
// [Asm]   r2 -- r3;
// [Asm]   r0 -- r6;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3-> 3:a0-> 4:t0-> 5:t1-> 6:t2-> 7:t3-> 8:t4-> 9:a2-> 10:a3-> 11:a4-> 12:a5-> 13:a6-> 14:a7"
// [Asm]   comment = "v2<-s0;v3<-s1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inprod28l3_3"];
// [Asm]   r0 [label="fa0", color=blue];
// [Asm]   r20 [label="fv5 ← fa0", color=green];
// [Asm]   r23 [label="fv8 ← fa0", color=green];
// [Asm]   r3 [label="ft2", color=blue];
// [Asm]   r9 [label="ft8", color=blue];
// [Asm]   r26 [label="fv12 ← fa0", color=green];
// [Asm]   r27 [label="fv14 ← fa0", color=green];
// [Asm]   r6 [label="ft5", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft3", color=blue];
// [Asm]   r1 [label="ft0", color=blue];
// [Asm]   r11 [label="ft10", color=blue];
// [Asm]   r7 [label="ft6", color=blue];
// [Asm]   r10 [label="ft9", color=blue];
// [Asm]   r22 [label="fv7 ← fs1", color=green];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft7", color=blue];
// [Asm]   r5 [label="ft4", color=blue];
// [Asm]   r24 [label="fv10 ← fs0", color=green];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r25 [label="fv11 ← fs1", color=green];
// [Asm]   r2 [label="ft1", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r19 [label="fv4 ← fs0", color=green];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r21 [label="fv6 ← fs0", color=green];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   r6 -- r21;
// [Asm]   r12 -- r25;
// [Asm]   r0 -- r13;
// [Asm]   r5 -- r21;
// [Asm]   r9 -- r25;
// [Asm]   r17 -- r21;
// [Asm]   r16 -- r25;
// [Asm]   r7 -- r21;
// [Asm]   r5 -- r22;
// [Asm]   r0 -- r17;
// [Asm]   r7 -- r25;
// [Asm]   r18 -- r25;
// [Asm]   r1 -- r19;
// [Asm]   r0 -- r25;
// [Asm]   r10 -- r19;
// [Asm]   r18 -- r21;
// [Asm]   r0 -- r22;
// [Asm]   r3 -- r24;
// [Asm]   r11 -- r24;
// [Asm]   r4 -- r22;
// [Asm]   r0 -- r16;
// [Asm]   r15 -- r25;
// [Asm]   r12 -- r19;
// [Asm]   r17 -- r19;
// [Asm]   r11 -- r19;
// [Asm]   r0 -- r6;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r12 -- r24;
// [Asm]   r14 -- r19;
// [Asm]   r2 -- r25;
// [Asm]   r0 -- r2;
// [Asm]   r1 -- r21;
// [Asm]   r0 -- r9;
// [Asm]   r17 -- r22;
// [Asm]   r10 -- r22;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r10;
// [Asm]   r4 -- r25;
// [Asm]   r8 -- r22;
// [Asm]   r8 -- r21;
// [Asm]   r13 -- r22;
// [Asm]   r0 -- r11;
// [Asm]   r16 -- r21;
// [Asm]   r2 -- r22;
// [Asm]   r10 -- r25;
// [Asm]   r12 -- r21;
// [Asm]   r2 -- r24;
// [Asm]   r21 -- r22;
// [Asm]   r0 -- r4;
// [Asm]   r13 -- r21;
// [Asm]   r24 -- r25;
// [Asm]   r16 -- r24;
// [Asm]   r14 -- r22;
// [Asm]   r16 -- r22;
// [Asm]   r11 -- r25;
// [Asm]   r0 -- r18;
// [Asm]   r18 -- r24;
// [Asm]   r6 -- r25;
// [Asm]   r13 -- r24;
// [Asm]   r3 -- r19;
// [Asm]   r0 -- r15;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r0 -- r24;
// [Asm]   r7 -- r24;
// [Asm]   r15 -- r22;
// [Asm]   r8 -- r19;
// [Asm]   r1 -- r22;
// [Asm]   r16 -- r19;
// [Asm]   r0 -- r14;
// [Asm]   r5 -- r19;
// [Asm]   r0 -- r21;
// [Asm]   r17 -- r24;
// [Asm]   r25 -- r26;
// [Asm]   r11 -- r22;
// [Asm]   r6 -- r22;
// [Asm]   r18 -- r22;
// [Asm]   r14 -- r24;
// [Asm]   r17 -- r25;
// [Asm]   r8 -- r25;
// [Asm]   r0 -- r19;
// [Asm]   r13 -- r25;
// [Asm]   r6 -- r24;
// [Asm]   r24 -- r26;
// [Asm]   r13 -- r19;
// [Asm]   r21 -- r23;
// [Asm]   r3 -- r22;
// [Asm]   r9 -- r22;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r18 -- r19;
// [Asm]   r7 -- r19;
// [Asm]   r3 -- r21;
// [Asm]   r15 -- r21;
// [Asm]   r5 -- r24;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r14 -- r25;
// [Asm]   r14 -- r21;
// [Asm]   r9 -- r24;
// [Asm]   r12 -- r22;
// [Asm]   r22 -- r23;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r15 -- r24;
// [Asm]   r0 -- r12;
// [Asm]   r5 -- r25;
// [Asm]   r9 -- r19;
// [Asm]   r2 -- r19;
// [Asm]   r0 -- r7;
// [Asm]   r15 -- r19;
// [Asm]   r10 -- r21;
// [Asm]   r10 -- r24;
// [Asm]   r11 -- r21;
// [Asm]   r4 -- r19;
// [Asm]   r9 -- r21;
// [Asm]   r19 -- r20;
// [Asm]   r1 -- r24;
// [Asm]   comment = "0:fa0-> 1:ft0-> 19:fv4-> 2:ft1-> 21:fv6-> 22:fv7-> 3:ft2-> 4:ft3-> 24:fv10-> 25:fv11-> 5:ft4-> 6:ft5-> 7:ft6-> 8:ft7-> 9:ft8-> 10:ft9-> 11:ft10-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7-> 23:fv8-> 26:fv12-> 20:fv5-> 27:fv14"
// [Asm]   comment = "fv5<-fa0;fv8<-fa0;fv12<-fa0;fv14<-fa0;fv7<-fs1;fv10<-fs0;fv11<-fs1;fv4<-fs0;fv6<-fs0;"
// [Asm] }
// [Asm] 
// [Asm] subst   mv v2, a0 ->   mv s0, a0
// [Asm] subst   mv v3, a1 ->   mv s1, a1
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call getx1l0_0 ->   call getx1l0_0
// [Asm] subst   fmv.d fv4, fa0 ->   fmv.d fs0, fa0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   call getx1l0_0 ->   call getx1l0_0
// [Asm] subst   fmul.d fv6, fv4, fv5 ->   fmul.d fs0, fs0, fa0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call gety10l1_1 ->   call gety10l1_1
// [Asm] subst   fmv.d fv7, fa0 ->   fmv.d fs1, fa0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   call gety10l1_1 ->   call gety10l1_1
// [Asm] subst   fmadd.d fv10, fv7, fv8, fv6 ->   fmadd.d fs0, fs1, fa0, fs0
// [Asm] subst   mv a0, v2 ->   mv a0, s0
// [Asm] subst   call getz19l2_2 ->   call getz19l2_2
// [Asm] subst   fmv.d fv11, fa0 ->   fmv.d fs1, fa0
// [Asm] subst   mv a0, v3 ->   mv a0, s1
// [Asm] subst   call getz19l2_2 ->   call getz19l2_2
// [Asm] subst   fmadd.d fv14, fv11, fv12, fv10 ->   fmadd.d fa0, fs1, fa0, fs0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%1) -> fv4, Self(fref=f0) -> v0, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%0) -> fv3, Insn(iref=%2) -> fv5
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] skipping Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [fv3]
// [Asm] live_set: [fv3]
// [Asm] move_origin: []
// [Asm] defined: fv3 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv3]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of getx1l0_0"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   comment = "0:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of getx1l0_0"];
// [Asm]   r0 [label="fv3 ← fa0", color=green];
// [Asm]   r1 [label="fa0", color=blue];
// [Asm]   comment = "0:fv3-> 1:fa0"
// [Asm]   comment = "fv3<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv3, 0(v2) ->   fld fa0, 0(a0)
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf true
// [Asm] getx1l0_0:
// [Asm] # block info: defs: [fa0, fv3, v2], uses: [fa0, a0, fv3, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .getx1l0_0_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   fld fv3, 0(v2)  # live: [fv3]
// [Asm] # control
// [Asm]   fmv.d fa0, fv3  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] getz19l2_2:
// [Asm] # block info: defs: [fa0, fv5, v2], uses: [fa0, fv5, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .getz19l2_2_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   fld fv5, 16(v2)  # live: [fv5]
// [Asm] # control
// [Asm]   fmv.d fa0, fv5  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start_10:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_10_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main43l4_4  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main43l4_4:
// [Asm] # block info: defs: [v22, a1, s11, v28, fa1, fa2, ft6, v20, a4, fa6, a6, ft10, ft5, fv27, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, ft3, fv29, t2, fv7, v3, fv23, t1, v16, v26, fv19, ft0, ft1, v12, v8, fv21, ft7, a5, a0, v30, a2, v24, fv6, v9, ft8, t3, t0, fa5, v18, fv31, fa0, fv13, t4, v2], uses: [v3, fv23, v16, v26, v22, fv19, a1, s11, v12, v28, v20, v8, fv27, fv21, a0, v30, v24, fv6, v9, v18, fv31, fa0, fv13, fv29, fv7, v2], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main43l4_4_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v24, s11, -24  # live: [v24]
// [Asm]   andi v2, v24, -8  # live: [v2]
// [Asm]   mv s11, v2  # live: [s11, v2]
// [Asm]   li v26, 4607182418800017408  # live: [s11, v26, v2]
// [Asm]   fmv.d.x fv27, v26  # live: [fv27, s11, v2]
// [Asm]   fsd fv27, 0(v2)  # live: [s11, v2]
// [Asm]   li v28, 4611686018427387904  # live: [s11, v28, v2]
// [Asm]   fmv.d.x fv29, v28  # live: [fv29, s11, v2]
// [Asm]   fsd fv29, 8(v2)  # live: [s11, v2]
// [Asm]   li v30, 4613937818241073152  # live: [s11, v30, v2]
// [Asm]   fmv.d.x fv31, v30  # live: [s11, fv31, v2]
// [Asm]   fsd fv31, 16(v2)  # live: [s11, v2]
// [Asm]   addi v16, s11, -24  # live: [v16, v2]
// [Asm]   andi v3, v16, -8  # live: [v2, v3]
// [Asm]   mv s11, v3  # live: [v2, v3]
// [Asm]   li v18, 4616189618054758400  # live: [v2, v18, v3]
// [Asm]   fmv.d.x fv19, v18  # live: [v2, fv19, v3]
// [Asm]   fsd fv19, 0(v3)  # live: [v2, v3]
// [Asm]   li v20, 4617315517961601024  # live: [v2, v20, v3]
// [Asm]   fmv.d.x fv21, v20  # live: [v2, fv21, v3]
// [Asm]   fsd fv21, 8(v3)  # live: [v2, v3]
// [Asm]   li v22, 4618441417868443648  # live: [v2, v22, v3]
// [Asm]   fmv.d.x fv23, v22  # live: [v2, fv23, v3]
// [Asm]   fsd fv23, 16(v3)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call inprod28l3_3  # live: [fa0]
// [Asm]   fmv.d fv6, fa0  # live: [fv6]
// [Asm]   # restore_ctx2  # live: [fv6]
// [Asm]   li v12, 4696837146684686336  # live: [v12, fv6]
// [Asm]   fmv.d.x fv13, v12  # live: [fv6, fv13]
// [Asm]   fmul.d fv7, fv13, fv6  # live: [fv7]
// [Asm]   fcvt.w.d v8, fv7, rtz  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start_10  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] gety10l1_1:
// [Asm] # block info: defs: [fa0, fv4, v2], uses: [fa0, fv4, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .gety10l1_1_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   fld fv4, 8(v2)  # live: [fv4]
// [Asm] # control
// [Asm]   fmv.d fa0, fv4  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] inprod28l3_3:
// [Asm] # block info: defs: [v2, t1, fv10, ft0, ft1, fv12, a1, fv14, fa1, fv5, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, fv8, ft2, a2, fv4, a3, fv6, ft8, t3, a7, fa7, t0, fa5, fa3, fv11, ft3, fa0, t4, t2, fv7, v3], uses: [v3, fv10, a0, fv8, fv12, a1, fv4, fv14, fv6, fv5, fv11, fa0, fv7, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .inprod28l3_3_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [v2, a0, v3]
// [Asm]   call getx1l0_0  # live: [v2, fa0, v3]
// [Asm]   fmv.d fv4, fa0  # live: [v2, fv4, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv4, v3]
// [Asm]   # save_ctx2  # live: [v2, fv4, v3]
// [Asm]   mv a0, v3  # live: [v2, fv4, a0, v3]
// [Asm]   call getx1l0_0  # live: [v2, fa0, fv4, v3]
// [Asm]   fmv.d fv5, fa0  # live: [v2, fv5, fv4, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv5, fv4, v3]
// [Asm]   fmul.d fv6, fv4, fv5  # live: [v2, fv6, v3]
// [Asm]   # save_ctx2  # live: [v2, fv6, v3]
// [Asm]   mv a0, v2  # live: [v2, fv6, a0, v3]
// [Asm]   call gety10l1_1  # live: [v2, fa0, fv6, v3]
// [Asm]   fmv.d fv7, fa0  # live: [v2, fv6, fv7, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv6, fv7, v3]
// [Asm]   # save_ctx2  # live: [v2, fv6, fv7, v3]
// [Asm]   mv a0, v3  # live: [v2, fv6, a0, fv7, v3]
// [Asm]   call gety10l1_1  # live: [v2, fa0, fv6, fv7, v3]
// [Asm]   fmv.d fv8, fa0  # live: [v2, fv8, fv6, fv7, v3]
// [Asm]   # restore_ctx2  # live: [v2, fv8, fv6, fv7, v3]
// [Asm]   fmadd.d fv10, fv7, fv8, fv6  # live: [v2, fv10, v3]
// [Asm]   # save_ctx2  # live: [v2, fv10, v3]
// [Asm]   mv a0, v2  # live: [fv10, a0, v3]
// [Asm]   call getz19l2_2  # live: [fa0, fv10, v3]
// [Asm]   fmv.d fv11, fa0  # live: [fv10, fv11, v3]
// [Asm]   # restore_ctx2  # live: [fv10, fv11, v3]
// [Asm]   # save_ctx2  # live: [fv10, fv11, v3]
// [Asm]   mv a0, v3  # live: [fv10, fv11, a0]
// [Asm]   call getz19l2_2  # live: [fv10, fv11, fa0]
// [Asm]   fmv.d fv12, fa0  # live: [fv12, fv10, fv11]
// [Asm]   # restore_ctx2  # live: [fv12, fv10, fv11]
// [Asm]   fmadd.d fv14, fv11, fv12, fv10  # live: [fv14]
// [Asm] # control
// [Asm]   fmv.d fa0, fv14  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("getx", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))}, LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getx"), [Var("v1")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getx"), [Var("v2")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("gety"), [Var("v1")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("gety"), [Var("v2")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getz"), [Var("v1")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getz"), [Var("v2")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Tuple([Double(1), Double(2), Double(3)])
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Tuple([Double(4), Double(5), Double(6)])
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl getx1l0_0
// [Main]   .type getx1l0_0, @function
// [Main] # leaf true
// [Main] getx1l0_0:
// [Main] .getx1l0_0_0:
// [Main]   fld fa0, 0(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl getz19l2_2
// [Main]   .type getz19l2_2, @function
// [Main] # leaf true
// [Main] getz19l2_2:
// [Main] .getz19l2_2_0:
// [Main]   fld fa0, 16(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start_10
// [Main]   .type T$start_10, @function
// [Main] # leaf false
// [Main] T$start_10:
// [Main] .T$start_10_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main43l4_4
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main43l4_4
// [Main]   .type main43l4_4, @function
// [Main] # leaf false
// [Main] main43l4_4:
// [Main] .main43l4_4_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi a0, a0, -8
// [Main]   mv s11, a0
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi a1, a1, -8
// [Main]   mv s11, a1
// [Main]   li a2, 4616189618054758400
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   li a2, 4617315517961601024
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 8(a1)
// [Main]   li a2, 4618441417868443648
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 16(a1)
// [Main]   call inprod28l3_3
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start_10
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl gety10l1_1
// [Main]   .type gety10l1_1, @function
// [Main] # leaf true
// [Main] gety10l1_1:
// [Main] .gety10l1_1_0:
// [Main]   fld fa0, 8(a0)
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inprod28l3_3
// [Main]   .type inprod28l3_3, @function
// [Main] # leaf false
// [Main] inprod28l3_3:
// [Main] .inprod28l3_3_0:
// [Main]   addi sp, sp, -48
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   fsd fs0, 24(sp)
// [Main]   fsd fs1, 32(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main]   mv a0, s0
// [Main]   call getx1l0_0
// [Main]   fmv.d fs0, fa0
// [Main]   mv a0, s1
// [Main]   call getx1l0_0
// [Main]   fmul.d fs0, fs0, fa0
// [Main]   mv a0, s0
// [Main]   call gety10l1_1
// [Main]   fmv.d fs1, fa0
// [Main]   mv a0, s1
// [Main]   call gety10l1_1
// [Main]   fmadd.d fs0, fs1, fa0, fs0
// [Main]   mv a0, s0
// [Main]   call getz19l2_2
// [Main]   fmv.d fs1, fa0
// [Main]   mv a0, s1
// [Main]   call getz19l2_2
// [Main]   fmadd.d fa0, fs1, fa0, fs0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   fld fs0, 24(sp)
// [Main]   fld fs1, 32(sp)
// [Main]   addi sp, sp, 48
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main43l4_4
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m0, fills=[Field(index=0, val=Double(val=1)), Field(index=1, val=Double(val=2)), Field(index=2, val=Double(val=3))])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m1, fills=[Field(index=0, val=Double(val=4)), Field(index=1, val=Double(val=5)), Field(index=2, val=Double(val=6))])
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Lowering insn Call(ty=Double, f=f3, args=[Mem(fref=f4, mref=m0), Mem(fref=f4, mref=m1)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Get Local name Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f4, mref=m1) -> $f4.m1
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main43l4_4 to wasm
// [Wasm] Lowering function gety10l1_1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f1, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function gety10l1_1 to wasm
// [Wasm] Lowering function T$start_10
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start_10 to wasm
// [Wasm] Lowering function getz19l2_2
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f2, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function getz19l2_2 to wasm
// [Wasm] Lowering function inprod28l3_3
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Call(ty=Double, f=f1, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Call(ty=Double, f=f1, args=[FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Call(ty=Double, f=f2, args=[FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Call(ty=Double, f=f2, args=[FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%7), Insn(iref=%8)])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%6), Insn(iref=%9)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Lowering control Return(args=[Insn(iref=%10)])
// [Wasm] Get Local name Insn(iref=%10) -> $%10
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%10) -> $%10
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function inprod28l3_3 to wasm
// [Wasm] Lowering function getx1l0_0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function getx1l0_0 to wasm
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Multiple, f10: Once, f2: Multiple, f3: Once, f0: Multiple})
