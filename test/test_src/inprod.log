// [Knf] build_knf: LetRec({name: ("getx", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))}, LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getx"), [Var("v1")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getx"), [Var("v2")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("gety"), [Var("v1")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("gety"), [Var("v2")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getz"), [Var("v1")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getz"), [Var("v2")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Tuple([Double(1), Double(2), Double(3)])
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Tuple([Double(4), Double(5), Double(6)])
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function getx1(v2_3, k) {
// [Main]     const [x4_5, _7, _9] = v2_3;return k(x4_5)
// [Main]   }
// [Main]   function gety10(v11_12, k) {
// [Main]     const [_14, y15_16, _18] = v11_12;return k(y15_16)
// [Main]   }
// [Main]   function getz19(v20_21, k) {
// [Main]     const [_23, _25, z26_27] = v20_21;return k(z26_27)
// [Main]   }
// [Main]   function inprod28(v129_30, v231_32, k) {
// [Main]     return $thunk(() => getx1(v129_30, function (_33) {
// [Main]       return $thunk(() => getx1(v231_32, function (_34) {
// [Main]         const _35 = _33 * _34;
// [Main]         return $thunk(() => gety10(v129_30, function (_36) {
// [Main]           return $thunk(() => gety10(v231_32, function (_37) {
// [Main]             const _38 = _36 * _37;
// [Main]             const _39 = _35 + _38;
// [Main]             return $thunk(() => getz19(v129_30, function (_40) {
// [Main]               return $thunk(() => getz19(v231_32, function (_41) {
// [Main]                 const _42 = _40 * _41;
// [Main]                 return $thunk(() => $thunk(() => $thunk(() => $thunk(() => $thunk(() => $thunk(() => k(_39 + _42)))))))
// [Main]               }
// [Main]               ))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main43(k) {
// [Main]     const _44 = 1000000;
// [Main]     const _45 = 1;
// [Main]     const _46 = 2;
// [Main]     const _47 = 3;
// [Main]     const _48 = [_45, _46, _47];
// [Main]     const _49 = 4;
// [Main]     const _50 = 5;
// [Main]     const _51 = 6;
// [Main]     const _52 = [_49, _50, _51];
// [Main]     return $thunk(() => inprod28(_48, _52, function (_53) {
// [Main]       const _54 = _44 * _53;
// [Main]       const _55 = minimbt_truncate($force(_54));
// [Main]       return $thunk(() => k(minimbt_print_int($force(_55))))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main43(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
