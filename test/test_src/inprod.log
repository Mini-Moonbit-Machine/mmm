// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, FnParam(fref=f0, fpref=$f.1) -> v3, Insn(iref=%13) -> fv11, Insn(iref=%22) -> fv14, Self(fref=f0) -> v0, Insn(iref=%2) -> fv6, Insn(iref=%1) -> fv5, Insn(iref=%14) -> fv12, Insn(iref=%21) -> fv13, Insn(iref=%6) -> fv10, FnParam(fref=f0, fpref=$f.0) -> v2, Insn(iref=%5) -> fv9, Insn(iref=%0) -> fv4, Insn(iref=%4) -> fv8
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%2), Insn(iref=%5)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%4)])
// [Asm] defs: []
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [fv4]
// [Asm] live_set: [v2, fv4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv4 is F
// [Asm] defs: [fv5]
// [Asm] live_set: [v2, fv5, fv4, v3]
// [Asm] move_origin: []
// [Asm] defined: fv5 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv5, fv4, fv6, v3]
// [Asm] move_origin: []
// [Asm] defined: fv6 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv5, fv4, fv6, fv7, v3]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [fv8]
// [Asm] live_set: [v3, fv5, fv4, fv6, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv8 is F
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv5, fv4, fv6, fv7, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv9 is F
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv5, fv10, fv6, fv8]
// [Asm] move_origin: []
// [Asm] defined: fv10 is F
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, fv12, fv6]
// [Asm] move_origin: []
// [Asm] defined: fv12 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv14]
// [Asm] move_origin: []
// [Asm] defined: fv14 is F
// [Asm] defs: [fa0]
// [Asm] live_set: [fa0]
// [Asm] move_origin: [fv14]
// [Asm] defined: fa0 is F
// [Asm] defs: []
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inprod.231"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v3 ← a1", color=green];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:v2-> 1:a1-> 2:v3"
// [Asm]   comment = "v2<-a0;v3<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inprod.231"];
// [Asm]   r0 [label="fv4 ← fa0", color=green];
// [Asm]   r5 [label="fv9 ← fa5", color=green];
// [Asm]   r3 [label="fv7 ← fa3", color=green];
// [Asm]   r2 [label="fv6 ← fa2", color=green];
// [Asm]   r9 [label="fa0", color=blue];
// [Asm]   r6 [label="fv10 ← fa0", color=green];
// [Asm]   r4 [label="fv8 ← fa4", color=green];
// [Asm]   r1 [label="fv5 ← fa1", color=green];
// [Asm]   r7 [label="fv12 ← fa0", color=green];
// [Asm]   r8 [label="fv14 ← fa0", color=green];
// [Asm]   r2 -- r5;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r5 -- r7;
// [Asm]   r3 -- r4;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r4 -- r6;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   comment = "0:fv4-> 1:fv5-> 2:fv6-> 3:fv7-> 4:fv8-> 5:fv9-> 6:fv10-> 7:fv12-> 8:fv14-> 9:fa0"
// [Asm]   comment = "fv4<-fa0;fv9<-fa5;fv7<-fa3;fv6<-fa2;fv10<-fa0;fv8<-fa4;fv5<-fa1;fv12<-fa0;fv14<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   fld fv4, 0(v2) ->   fld fa0, 0(a0)
// [Asm] subst   fld fv5, 8(v2) ->   fld fa1, 8(a0)
// [Asm] subst   fld fv6, 16(v2) ->   fld fa2, 16(a0)
// [Asm] subst   fld fv7, 0(v3) ->   fld fa3, 0(a1)
// [Asm] subst   fld fv8, 8(v3) ->   fld fa4, 8(a1)
// [Asm] subst   fld fv9, 16(v3) ->   fld fa5, 16(a1)
// [Asm] subst   fmul.d fv10, fv4, fv7 ->   fmul.d fa0, fa0, fa3
// [Asm] subst   fmadd.d fv12, fv5, fv8, fv10 ->   fmadd.d fa0, fa1, fa4, fa0
// [Asm] subst   fmadd.d fv14, fv6, fv9, fv12 ->   fmadd.d fa0, fa2, fa5, fa0
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.232 ->   call main.232
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%3) -> fv7, Insn(iref=%2) -> fv6, Insn(iref=%1) -> v5, Mem(fref=f1, mref=m0) -> v2, Self(fref=f1) -> v0, Mem(fref=f1, mref=m1) -> v3, Insn(iref=%5) -> v9, Insn(iref=%0) -> v4, Insn(iref=%4) -> v8
// [Asm] defs: []
// [Asm] live_set: [s11]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v24]
// [Asm] live_set: [s11, v24, v2]
// [Asm] move_origin: []
// [Asm] defined: v24 is X
// [Asm] defs: [fv25]
// [Asm] live_set: [s11, fv25, v2]
// [Asm] move_origin: []
// [Asm] defined: fv25 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [s11, v26, v2]
// [Asm] move_origin: []
// [Asm] defined: v26 is X
// [Asm] defs: [fv27]
// [Asm] live_set: [fv27, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv27 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v28]
// [Asm] live_set: [s11, v28, v2]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [fv29]
// [Asm] live_set: [fv29, s11, v2]
// [Asm] move_origin: []
// [Asm] defined: fv29 is F
// [Asm] defs: []
// [Asm] live_set: [s11, v2]
// [Asm] move_origin: []
// [Asm] defs: [v3]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v17]
// [Asm] live_set: [v2, v17, v3]
// [Asm] move_origin: []
// [Asm] defined: v17 is X
// [Asm] defs: [fv18]
// [Asm] live_set: [v2, fv18, v3]
// [Asm] move_origin: []
// [Asm] defined: fv18 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v2, v19, v3]
// [Asm] move_origin: []
// [Asm] defined: v19 is X
// [Asm] defs: [fv20]
// [Asm] live_set: [v2, fv20, v3]
// [Asm] move_origin: []
// [Asm] defined: fv20 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v2, v21, v3]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [fv22]
// [Asm] live_set: [v2, fv22, v3]
// [Asm] move_origin: []
// [Asm] defined: fv22 is F
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [fa0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [fv6]
// [Asm] live_set: [fv6]
// [Asm] move_origin: [fa0]
// [Asm] defined: fv6 is F
// [Asm] defs: []
// [Asm] live_set: [fv6]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [v12, fv6]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [fv6, fv13]
// [Asm] move_origin: []
// [Asm] defined: fv13 is F
// [Asm] defs: [fv7]
// [Asm] live_set: [fv7]
// [Asm] move_origin: []
// [Asm] defined: fv7 is F
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v8]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v9]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v9]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v9]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.232"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r20 [label="t3", color=blue];
// [Asm]   r23 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="v26 ← a1", color=green];
// [Asm]   r9 [label="a0", color=blue];
// [Asm]   r6 [label="v17 ← a2", color=green];
// [Asm]   r13 [label="a4", color=blue];
// [Asm]   r4 [label="v28 ← a1", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a2", color=blue];
// [Asm]   r7 [label="v19 ← a2", color=green];
// [Asm]   r10 [label="a1", color=blue];
// [Asm]   r22 [label="v12 ← a0", color=green];
// [Asm]   r14 [label="a5", color=blue];
// [Asm]   r8 [label="v21 ← a2", color=green];
// [Asm]   r5 [label="v3 ← a1", color=green];
// [Asm]   r24 [label="v9 ← a0", color=green];
// [Asm]   r15 [label="a6", color=blue];
// [Asm]   r2 [label="v24 ← a1", color=green];
// [Asm]   r16 [label="a7", color=blue];
// [Asm]   r18 [label="t1", color=blue];
// [Asm]   r19 [label="t2", color=blue];
// [Asm]   r17 [label="t0", color=blue];
// [Asm]   r21 [label="t4", color=blue];
// [Asm]   r12 [label="a3", color=blue];
// [Asm]   r9 -- r11;
// [Asm]   r5 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   r5 -- r9;
// [Asm]   r5 -- r8;
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r8;
// [Asm]   r9 -- r15;
// [Asm]   r1 -- r4;
// [Asm]   r9 -- r12;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r2;
// [Asm]   r0 -- r1;
// [Asm]   r9 -- r20;
// [Asm]   r5 -- r7;
// [Asm]   r9 -- r10;
// [Asm]   r9 -- r16;
// [Asm]   r9 -- r17;
// [Asm]   r9 -- r19;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r1 -- r3;
// [Asm]   r0 -- r7;
// [Asm]   r9 -- r13;
// [Asm]   r9 -- r18;
// [Asm]   r0 -- r6;
// [Asm]   r9 -- r14;
// [Asm]   r9 -- r21;
// [Asm]   comment = "0:v2-> 1:s11-> 2:v24-> 3:v26-> 4:v28-> 5:v3-> 6:v17-> 7:v19-> 8:v21-> 9:a0-> 10:a1-> 11:a2-> 12:a3-> 13:a4-> 14:a5-> 15:a6-> 16:a7-> 17:t0-> 18:t1-> 19:t2-> 20:t3-> 21:t4-> 22:v12-> 23:v8-> 24:v9"
// [Asm]   comment = "v2<-a0;v8<-a0;v26<-a1;v17<-a2;v28<-a1;v19<-a2;v12<-a0;v21<-a2;v3<-a1;v9<-a0;v24<-a1;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.232"];
// [Asm]   r0 [label="fv25 ← fa0", color=green];
// [Asm]   r20 [label="fa3", color=blue];
// [Asm]   r23 [label="fa6", color=blue];
// [Asm]   r3 [label="fv18 ← fa0", color=green];
// [Asm]   r9 [label="ft2", color=blue];
// [Asm]   r26 [label="fv13 ← fa1", color=green];
// [Asm]   r27 [label="fv7 ← fa0", color=green];
// [Asm]   r6 [label="fa0", color=blue];
// [Asm]   r13 [label="ft6", color=blue];
// [Asm]   r4 [label="fv20 ← fa0", color=green];
// [Asm]   r1 [label="fv27 ← fa0", color=green];
// [Asm]   r11 [label="ft4", color=blue];
// [Asm]   r7 [label="ft0", color=blue];
// [Asm]   r10 [label="ft3", color=blue];
// [Asm]   r22 [label="fa5", color=blue];
// [Asm]   r14 [label="ft7", color=blue];
// [Asm]   r8 [label="ft1", color=blue];
// [Asm]   r5 [label="fv22 ← fa0", color=green];
// [Asm]   r15 [label="ft8", color=blue];
// [Asm]   r24 [label="fa7", color=blue];
// [Asm]   r25 [label="fv6 ← fa0", color=green];
// [Asm]   r2 [label="fv29 ← fa0", color=green];
// [Asm]   r16 [label="ft9", color=blue];
// [Asm]   r18 [label="fa1", color=blue];
// [Asm]   r19 [label="fa2", color=blue];
// [Asm]   r21 [label="fa4", color=blue];
// [Asm]   r17 [label="ft10", color=blue];
// [Asm]   r12 [label="ft5", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r19;
// [Asm]   r6 -- r21;
// [Asm]   r6 -- r9;
// [Asm]   r6 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r25 -- r26;
// [Asm]   r6 -- r11;
// [Asm]   r6 -- r15;
// [Asm]   r6 -- r22;
// [Asm]   r6 -- r23;
// [Asm]   r6 -- r12;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r6 -- r24;
// [Asm]   r6 -- r20;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:fv25-> 1:fv27-> 2:fv29-> 3:fv18-> 4:fv20-> 5:fv22-> 6:fa0-> 7:ft0-> 8:ft1-> 9:ft2-> 10:ft3-> 11:ft4-> 12:ft5-> 13:ft6-> 14:ft7-> 15:ft8-> 16:ft9-> 17:ft10-> 18:fa1-> 19:fa2-> 20:fa3-> 21:fa4-> 22:fa5-> 23:fa6-> 24:fa7-> 25:fv6-> 26:fv13-> 27:fv7"
// [Asm]   comment = "fv25<-fa0;fv18<-fa0;fv13<-fa1;fv7<-fa0;fv20<-fa0;fv27<-fa0;fv22<-fa0;fv6<-fa0;fv29<-fa0;"
// [Asm] }
// [Asm] 
// [Asm] subst   addi v2, s11, -24 ->   addi a0, s11, -24
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a0, -8
// [Asm] subst   li v24, 4607182418800017408 ->   li a1, 4607182418800017408
// [Asm] subst   fmv.d.x fv25, v24 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv25, 0(v2) ->   fsd fa0, 0(a0)
// [Asm] subst   li v26, 4611686018427387904 ->   li a1, 4611686018427387904
// [Asm] subst   fmv.d.x fv27, v26 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv27, 8(v2) ->   fsd fa0, 8(a0)
// [Asm] subst   li v28, 4613937818241073152 ->   li a1, 4613937818241073152
// [Asm] subst   fmv.d.x fv29, v28 ->   fmv.d.x fa0, a1
// [Asm] subst   fsd fv29, 16(v2) ->   fsd fa0, 16(a0)
// [Asm] subst   addi v3, s11, -24 ->   addi a1, s11, -24
// [Asm] subst   andi s11, v3, -8 ->   andi s11, a1, -8
// [Asm] subst   li v17, 4616189618054758400 ->   li a2, 4616189618054758400
// [Asm] subst   fmv.d.x fv18, v17 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv18, 0(v3) ->   fsd fa0, 0(a1)
// [Asm] subst   li v19, 4617315517961601024 ->   li a2, 4617315517961601024
// [Asm] subst   fmv.d.x fv20, v19 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv20, 8(v3) ->   fsd fa0, 8(a1)
// [Asm] subst   li v21, 4618441417868443648 ->   li a2, 4618441417868443648
// [Asm] subst   fmv.d.x fv22, v21 ->   fmv.d.x fa0, a2
// [Asm] subst   fsd fv22, 16(v3) ->   fsd fa0, 16(a1)
// [Asm] subst   call inprod.231 ->   call inprod.231
// [Asm] subst   li v12, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv13, v12 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv7, fv13, fv6 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v8, fv7, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.232  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.232:
// [Asm] # block info: defs: [a1, s11, v28, fa1, fa2, fv25, ft6, a4, fa6, a6, ft5, ft10, fv27, ft4, ft9, fa4, ft2, v17, a3, a7, fa7, fa3, ft3, fv29, t2, fv18, fv7, v3, t1, v26, fv20, ft0, ft1, v12, fv22, v8, v19, ft7, v21, a5, a0, a2, v24, fv6, v9, ft8, t3, t0, fa5, fa0, fv13, t4, v2], uses: [v2, v21, v26, a0, fv20, v17, a1, s11, v24, v12, v28, fv6, v9, fv22, fv25, fa0, fv13, v8, fv29, v19, fv27, fv18, fv7, v3], upward_exposed: [s11], params_defs: []
// [Asm] # live_in: [s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.232_0:
// [Asm]   # save_ctx1  # live: [s11]
// [Asm]   addi v2, s11, -24  # live: [v2]
// [Asm]   andi s11, v2, -8  # live: [s11, v2]
// [Asm]   li v24, 4607182418800017408  # live: [s11, v24, v2]
// [Asm]   fmv.d.x fv25, v24  # live: [s11, fv25, v2]
// [Asm]   fsd fv25, 0(v2)  # live: [s11, v2]
// [Asm]   li v26, 4611686018427387904  # live: [s11, v26, v2]
// [Asm]   fmv.d.x fv27, v26  # live: [fv27, s11, v2]
// [Asm]   fsd fv27, 8(v2)  # live: [s11, v2]
// [Asm]   li v28, 4613937818241073152  # live: [s11, v28, v2]
// [Asm]   fmv.d.x fv29, v28  # live: [fv29, s11, v2]
// [Asm]   fsd fv29, 16(v2)  # live: [s11, v2]
// [Asm]   addi v3, s11, -24  # live: [v2, v3]
// [Asm]   andi s11, v3, -8  # live: [v2, v3]
// [Asm]   li v17, 4616189618054758400  # live: [v2, v17, v3]
// [Asm]   fmv.d.x fv18, v17  # live: [v2, fv18, v3]
// [Asm]   fsd fv18, 0(v3)  # live: [v2, v3]
// [Asm]   li v19, 4617315517961601024  # live: [v2, v19, v3]
// [Asm]   fmv.d.x fv20, v19  # live: [v2, fv20, v3]
// [Asm]   fsd fv20, 8(v3)  # live: [v2, v3]
// [Asm]   li v21, 4618441417868443648  # live: [v2, v21, v3]
// [Asm]   fmv.d.x fv22, v21  # live: [v2, fv22, v3]
// [Asm]   fsd fv22, 16(v3)  # live: [v2, v3]
// [Asm]   # save_ctx2  # live: [v2, v3]
// [Asm]   mv a0, v2  # live: [a0, v3]
// [Asm]   mv a1, v3  # live: [a1, a0]
// [Asm]   call inprod.231  # live: [fa0]
// [Asm]   fmv.d fv6, fa0  # live: [fv6]
// [Asm]   # restore_ctx2  # live: [fv6]
// [Asm]   li v12, 4696837146684686336  # live: [v12, fv6]
// [Asm]   fmv.d.x fv13, v12  # live: [fv6, fv13]
// [Asm]   fmul.d fv7, fv13, fv6  # live: [fv7]
// [Asm]   fcvt.w.d v8, fv7, rtz  # live: [v8]
// [Asm]   # save_ctx2  # live: [v8]
// [Asm]   mv a0, v8  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v9, a0  # live: [v9]
// [Asm]   # restore_ctx2  # live: [v9]
// [Asm] # control
// [Asm]   mv a0, v9  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] inprod.231:
// [Asm] # block info: defs: [v2, fv5, fv9, fv10, fv8, fa0, fv12, fv4, fv14, fv6, fv7, v3], uses: [v3, fv10, a0, fv8, fv12, a1, fv4, fv14, fv6, fv5, fv9, fa0, fv7, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .inprod.231_0:
// [Asm]   # save_ctx1  # live: [a1, a0]
// [Asm]   mv v2, a0  # live: [a1, v2]
// [Asm]   mv v3, a1  # live: [v2, v3]
// [Asm]   fld fv4, 0(v2)  # live: [v2, fv4, v3]
// [Asm]   fld fv5, 8(v2)  # live: [v2, fv5, fv4, v3]
// [Asm]   fld fv6, 16(v2)  # live: [fv5, fv4, fv6, v3]
// [Asm]   fld fv7, 0(v3)  # live: [fv5, fv4, fv6, fv7, v3]
// [Asm]   fld fv8, 8(v3)  # live: [v3, fv5, fv4, fv6, fv7, fv8]
// [Asm]   fld fv9, 16(v3)  # live: [fv9, fv5, fv4, fv6, fv7, fv8]
// [Asm]   fmul.d fv10, fv4, fv7  # live: [fv9, fv5, fv10, fv6, fv8]
// [Asm]   fmadd.d fv12, fv5, fv8, fv10  # live: [fv9, fv12, fv6]
// [Asm]   fmadd.d fv14, fv6, fv9, fv12  # live: [fv14]
// [Asm] # control
// [Asm]   fmv.d fa0, fv14  # live: [fa0]
// [Asm]   # restore_ctx1  # live: [fa0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("getx", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))}, LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getx"), [Var("v1")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getx"), [Var("v2")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("gety"), [Var("v1")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("gety"), [Var("v2")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getz"), [Var("v1")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getz"), [Var("v2")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Tuple([Double(1), Double(2), Double(3)])
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Tuple([Double(4), Double(5), Double(6)])
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%22)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%5)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _19 = x.135
// [Main] beta reduce _20 = x.183
// [Main] beta reduce _22 = y.208
// [Main] beta reduce _23 = y.220
// [Main] beta reduce _26 = z.227
// [Main] beta reduce _27 = z.230
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.232
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.232
// [Main]   .type main.232, @function
// [Main] # leaf false
// [Main] main.232:
// [Main] .main.232_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   addi a0, s11, -24
// [Main]   andi s11, a0, -8
// [Main]   li a1, 4607182418800017408
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 0(a0)
// [Main]   li a1, 4611686018427387904
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 8(a0)
// [Main]   li a1, 4613937818241073152
// [Main]   fmv.d.x fa0, a1
// [Main]   fsd fa0, 16(a0)
// [Main]   addi a1, s11, -24
// [Main]   andi s11, a1, -8
// [Main]   li a2, 4616189618054758400
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 0(a1)
// [Main]   li a2, 4617315517961601024
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 8(a1)
// [Main]   li a2, 4618441417868443648
// [Main]   fmv.d.x fa0, a2
// [Main]   fsd fa0, 16(a1)
// [Main]   call inprod.231
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inprod.231
// [Main]   .type inprod.231, @function
// [Main] # leaf true
// [Main] inprod.231:
// [Main] .inprod.231_0:
// [Main]   fld fa0, 0(a0)
// [Main]   fld fa1, 8(a0)
// [Main]   fld fa2, 16(a0)
// [Main]   fld fa3, 0(a1)
// [Main]   fld fa4, 8(a1)
// [Main]   fld fa5, 16(a1)
// [Main]   fmul.d fa0, fa0, fa3
// [Main]   fmadd.d fa0, fa1, fa4, fa0
// [Main]   fmadd.d fa0, fa2, fa5, fa0
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function inprod.231
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.0), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.1), index=0, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.1), index=1, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Load(ty=Double, ma=Field(ty=Double, val=FnParam(fref=f0, fpref=$f.1), index=2, width=@(@64, @(@64, @(@64, @32)))))
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%0), Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%1), Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%6), Insn(iref=%13)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Insn(iref=%2), Insn(iref=%5)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%5) -> $%5
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Lowering insn Op(ty=Double, op=Add, args=[Insn(iref=%14), Insn(iref=%21)])
// [Wasm] Get Local name Insn(iref=%14) -> $%14
// [Wasm] Get Local name Insn(iref=%21) -> $%21
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering control Return(args=[Insn(iref=%22)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f0, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%14) -> $%14
// [Wasm] Local Insn(iref=%21) -> $%21
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Insn(iref=%5) -> $%5
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Lowered function inprod.231 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f1, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function main.232
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m0, fills=[Field(index=0, val=Double(val=1)), Field(index=1, val=Double(val=2)), Field(index=2, val=Double(val=3))])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Lowering insn Alloc(ty=Tuple(fields=[Double, Double, Double]), mref=m1, fills=[Field(index=0, val=Double(val=4)), Field(index=1, val=Double(val=5)), Field(index=2, val=Double(val=6))])
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Lowering insn Call(ty=Double, f=f0, args=[Mem(fref=f1, mref=m0), Mem(fref=f1, mref=m1)])
// [Wasm] Get Local name Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Get Local name Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Double, op=Mul, args=[Double(val=1000000), Insn(iref=%2)])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=D2I(rm=rtz), args=[Insn(iref=%3)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%4)])
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering control Return(args=[Insn(iref=%5)])
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Mem(fref=f1, mref=m0) -> $f1.m0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f1, mref=m1) -> $f1.m1
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function main.232 to wasm
// [KnfOpt] func_tre: getx.1 false
// [KnfOpt] func_tre: gety.6 false
// [KnfOpt] func_tre: getz.11 false
// [KnfOpt] func_tre: inprod.16 false
// [KnfOpt] func_tre: main.29 false
// [KnfOpt] freq: {getx.1: Many(2), gety.6: Many(2), getz.11: Many(2), inprod.16: Once, main.29: Once}
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_42: Var({val: Some(Double)}), _43: Var({val: Some(Double)}), z.44: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.44)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_45: Var({val: Some(Double)}), _46: Var({val: Some(Double)}), z.47: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.47)
// [KnfOpt] let (_48: Var({val: Some(Double)}), _49: Var({val: Some(Double)}), z.50: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.50)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_54: Var({val: Some(Double)}), _55: Var({val: Some(Double)}), z.56: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.56)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_51: Var({val: Some(Double)}), y.52: Var({val: Some(Double)}), _53: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.52)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_57: Var({val: Some(Double)}), _58: Var({val: Some(Double)}), z.59: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.59)
// [KnfOpt] let (_60: Var({val: Some(Double)}), _61: Var({val: Some(Double)}), z.62: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.62)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_66: Var({val: Some(Double)}), _67: Var({val: Some(Double)}), z.68: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.68)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_69: Var({val: Some(Double)}), _70: Var({val: Some(Double)}), z.71: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.71)
// [KnfOpt] let (_72: Var({val: Some(Double)}), _73: Var({val: Some(Double)}), z.74: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.74)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_78: Var({val: Some(Double)}), _79: Var({val: Some(Double)}), z.80: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.80)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getx) let _20: Double = Unit
// [KnfOpt] let _21: Double = FMul(_19, _20)
// [KnfOpt] let (_63: Var({val: Some(Double)}), y.64: Var({val: Some(Double)}), _65: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _22: Double = Var(y.64)
// [KnfOpt] let (_75: Var({val: Some(Double)}), y.76: Var({val: Some(Double)}), _77: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.76)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_81: Var({val: Some(Double)}), _82: Var({val: Some(Double)}), z.83: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.83)
// [KnfOpt] let (_84: Var({val: Some(Double)}), _85: Var({val: Some(Double)}), z.86: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.86)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_90: Var({val: Some(Double)}), _91: Var({val: Some(Double)}), z.92: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.92)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_93: Var({val: Some(Double)}), _94: Var({val: Some(Double)}), z.95: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.95)
// [KnfOpt] let (_96: Var({val: Some(Double)}), _97: Var({val: Some(Double)}), z.98: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.98)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_102: Var({val: Some(Double)}), _103: Var({val: Some(Double)}), z.104: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.104)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_99: Var({val: Some(Double)}), y.100: Var({val: Some(Double)}), _101: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.100)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_105: Var({val: Some(Double)}), _106: Var({val: Some(Double)}), z.107: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.107)
// [KnfOpt] let (_108: Var({val: Some(Double)}), _109: Var({val: Some(Double)}), z.110: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.110)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_114: Var({val: Some(Double)}), _115: Var({val: Some(Double)}), z.116: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.116)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_117: Var({val: Some(Double)}), _118: Var({val: Some(Double)}), z.119: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.119)
// [KnfOpt] let (_120: Var({val: Some(Double)}), _121: Var({val: Some(Double)}), z.122: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.122)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_126: Var({val: Some(Double)}), _127: Var({val: Some(Double)}), z.128: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.128)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getx) let _19: Double = Unit
// [KnfOpt] let (x.87: Var({val: Some(Double)}), _88: Var({val: Some(Double)}), _89: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _20: Double = Var(x.87)
// [KnfOpt] let _21: Double = FMul(_19, _20)
// [KnfOpt] let (_111: Var({val: Some(Double)}), y.112: Var({val: Some(Double)}), _113: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _22: Double = Var(y.112)
// [KnfOpt] let (_123: Var({val: Some(Double)}), y.124: Var({val: Some(Double)}), _125: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.124)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_129: Var({val: Some(Double)}), _130: Var({val: Some(Double)}), z.131: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.131)
// [KnfOpt] let (_132: Var({val: Some(Double)}), _133: Var({val: Some(Double)}), z.134: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.134)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getx.1 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_138: Var({val: Some(Double)}), _139: Var({val: Some(Double)}), z.140: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.140)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_141: Var({val: Some(Double)}), _142: Var({val: Some(Double)}), z.143: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.143)
// [KnfOpt] let (_144: Var({val: Some(Double)}), _145: Var({val: Some(Double)}), z.146: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.146)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_150: Var({val: Some(Double)}), _151: Var({val: Some(Double)}), z.152: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.152)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_147: Var({val: Some(Double)}), y.148: Var({val: Some(Double)}), _149: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.148)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_153: Var({val: Some(Double)}), _154: Var({val: Some(Double)}), z.155: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.155)
// [KnfOpt] let (_156: Var({val: Some(Double)}), _157: Var({val: Some(Double)}), z.158: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.158)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_162: Var({val: Some(Double)}), _163: Var({val: Some(Double)}), z.164: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.164)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_165: Var({val: Some(Double)}), _166: Var({val: Some(Double)}), z.167: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.167)
// [KnfOpt] let (_168: Var({val: Some(Double)}), _169: Var({val: Some(Double)}), z.170: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.170)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_174: Var({val: Some(Double)}), _175: Var({val: Some(Double)}), z.176: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.176)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getx) let _20: Double = Unit
// [KnfOpt] let _21: Double = FMul(_19, _20)
// [KnfOpt] let (_159: Var({val: Some(Double)}), y.160: Var({val: Some(Double)}), _161: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _22: Double = Var(y.160)
// [KnfOpt] let (_171: Var({val: Some(Double)}), y.172: Var({val: Some(Double)}), _173: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.172)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_177: Var({val: Some(Double)}), _178: Var({val: Some(Double)}), z.179: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.179)
// [KnfOpt] let (_180: Var({val: Some(Double)}), _181: Var({val: Some(Double)}), z.182: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.182)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_186: Var({val: Some(Double)}), _187: Var({val: Some(Double)}), z.188: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.188)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_189: Var({val: Some(Double)}), _190: Var({val: Some(Double)}), z.191: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.191)
// [KnfOpt] let (_192: Var({val: Some(Double)}), _193: Var({val: Some(Double)}), z.194: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.194)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_198: Var({val: Some(Double)}), _199: Var({val: Some(Double)}), z.200: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.200)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _22: Double = Unit
// [KnfOpt] let (_195: Var({val: Some(Double)}), y.196: Var({val: Some(Double)}), _197: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _23: Double = Var(y.196)
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_201: Var({val: Some(Double)}), _202: Var({val: Some(Double)}), z.203: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.203)
// [KnfOpt] let (_204: Var({val: Some(Double)}), _205: Var({val: Some(Double)}), z.206: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.206)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision gety.6 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_210: Var({val: Some(Double)}), _211: Var({val: Some(Double)}), z.212: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.212)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(gety) let _23: Double = Unit
// [KnfOpt] let _24: Double = FMul(_22, _23)
// [KnfOpt] let _25: Double = FAdd(_21, _24)
// [KnfOpt] let (_213: Var({val: Some(Double)}), _214: Var({val: Some(Double)}), z.215: Var({val: Some(Double)})) = v1.17
// [KnfOpt] let _26: Double = Var(z.215)
// [KnfOpt] let (_216: Var({val: Some(Double)}), _217: Var({val: Some(Double)}), z.218: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.218)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Knf inline Some(getz) let _26: Double = Unit
// [KnfOpt] let (_222: Var({val: Some(Double)}), _223: Var({val: Some(Double)}), z.224: Var({val: Some(Double)})) = v2.18
// [KnfOpt] let _27: Double = Var(z.224)
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 2
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision getz.11 accepted
// [KnfOpt] Knf inline Some(getz) let _27: Double = Unit
// [KnfOpt] let _28: Double = FMul(_26, _27)
// [KnfOpt] FAdd(_25, _28)
// [KnfOpt] Inline threshold 21
// [KnfOpt] Fn like 0
// [KnfOpt] Join point count 0
// [KnfOpt] Inline decision inprod.16 rejected
// [KnfOpt] Numbers of let rec: 2 2 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f4: Once, f1: Once})
// [CoreOpt] LVN subst Insn(iref=%7) with Insn(iref=%0)
// [CoreOpt] LVN subst Insn(iref=%8) with Insn(iref=%1)
// [CoreOpt] LVN subst Insn(iref=%9) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%10) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%11) with Insn(iref=%4)
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%5)
// [CoreOpt] LVN subst Insn(iref=%15) with Insn(iref=%0)
// [CoreOpt] LVN subst Insn(iref=%16) with Insn(iref=%1)
// [CoreOpt] LVN subst Insn(iref=%17) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%18) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%19) with Insn(iref=%4)
// [CoreOpt] LVN subst Insn(iref=%20) with Insn(iref=%5)
