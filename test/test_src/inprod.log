// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Insn(iref=%15) -> fv15, Self(fref=f0) -> v0, Insn(iref=%16) -> fv16, Insn(iref=%24) -> fv18, Insn(iref=%8) -> fv14, Insn(iref=%27) -> v21, Insn(iref=%25) -> fv19, Insn(iref=%5) -> fv11, Insn(iref=%0) -> [fv2, fv3, fv4], Insn(iref=%4) -> fv10, Insn(iref=%3) -> fv9, Insn(iref=%7) -> fv13, Insn(iref=%23) -> fv17, Insn(iref=%2) -> fv8, Insn(iref=%1) -> [fv5, fv6, fv7], Insn(iref=%26) -> v20, Insn(iref=%6) -> fv12
// [Asm] succs: []
// [Asm] critical edges for b0: []
// [Asm] critical color seq for b0: []
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%4), Insn(iref=%7)])
// [Asm] skipping Op(ty=Double, op=Mul, args=[Insn(iref=%3), Insn(iref=%6)])
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] defs: [v36]
// [Asm] live_set: [v36]
// [Asm] defined: v36 is X
// [Asm] defs: [fv8]
// [Asm] live_set: [fv8]
// [Asm] defined: fv8 is F
// [Asm] defs: [v38]
// [Asm] live_set: [v38, fv8]
// [Asm] defined: v38 is X
// [Asm] defs: [fv9]
// [Asm] live_set: [fv9, fv8]
// [Asm] defined: fv9 is F
// [Asm] defs: [v40]
// [Asm] live_set: [v40, fv9, fv8]
// [Asm] defined: v40 is X
// [Asm] defs: [fv10]
// [Asm] live_set: [fv9, fv10, fv8]
// [Asm] defined: fv10 is F
// [Asm] defs: [v30]
// [Asm] live_set: [fv9, fv10, v30, fv8]
// [Asm] defined: v30 is X
// [Asm] defs: [fv11]
// [Asm] live_set: [fv9, fv10, fv11, fv8]
// [Asm] defined: fv11 is F
// [Asm] defs: [v32]
// [Asm] live_set: [fv9, fv10, v32, fv11, fv8]
// [Asm] defined: v32 is X
// [Asm] defs: [fv12]
// [Asm] live_set: [fv9, fv12, fv10, fv11, fv8]
// [Asm] defined: fv12 is F
// [Asm] defs: [v34]
// [Asm] live_set: [fv9, fv12, fv10, fv11, v34, fv8]
// [Asm] defined: v34 is X
// [Asm] defs: [fv13]
// [Asm] live_set: [fv8, fv9, fv12, fv10, fv11, fv13]
// [Asm] defined: fv13 is F
// [Asm] defs: [fv14]
// [Asm] live_set: [fv9, fv10, fv12, fv14, fv13]
// [Asm] defined: fv14 is F
// [Asm] defs: [fv16]
// [Asm] live_set: [fv10, fv16, fv13]
// [Asm] defined: fv16 is F
// [Asm] defs: [fv18]
// [Asm] live_set: [fv18]
// [Asm] defined: fv18 is F
// [Asm] defs: [v24]
// [Asm] live_set: [v24, fv18]
// [Asm] defined: v24 is X
// [Asm] defs: [fv25]
// [Asm] live_set: [fv18, fv25]
// [Asm] defined: fv25 is F
// [Asm] defs: [fv19]
// [Asm] live_set: [fv19]
// [Asm] defined: fv19 is F
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [v20]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v20
// [Asm] defined: a0 is X
// [Asm] defs: [t0, t1, t2, t3, t4, a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move: v21 <- a0
// [Asm] defined: v21 is X
// [Asm] defs: []
// [Asm] live_set: [v21]
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move: a0 <- v21
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] Label("main.102") clobbered_x: @hashset.of([a0])
// [Asm] Label("main.102") clobbered_f: @hashset.of([fa0, fa5, fa2, fa3, fa4, fa1])
// [Asm] subst   li v36, 4607182418800017408 ->   li a0, 4607182418800017408
// [Asm] subst   fmv.d.x fv8, v36 ->   fmv.d.x fa0, a0
// [Asm] subst   li v38, 4611686018427387904 ->   li a0, 4611686018427387904
// [Asm] subst   fmv.d.x fv9, v38 ->   fmv.d.x fa1, a0
// [Asm] subst   li v40, 4613937818241073152 ->   li a0, 4613937818241073152
// [Asm] subst   fmv.d.x fv10, v40 ->   fmv.d.x fa2, a0
// [Asm] subst   li v30, 4616189618054758400 ->   li a0, 4616189618054758400
// [Asm] subst   fmv.d.x fv11, v30 ->   fmv.d.x fa3, a0
// [Asm] subst   li v32, 4617315517961601024 ->   li a0, 4617315517961601024
// [Asm] subst   fmv.d.x fv12, v32 ->   fmv.d.x fa4, a0
// [Asm] subst   li v34, 4618441417868443648 ->   li a0, 4618441417868443648
// [Asm] subst   fmv.d.x fv13, v34 ->   fmv.d.x fa5, a0
// [Asm] subst   fmul.d fv14, fv8, fv11 ->   fmul.d fa0, fa0, fa3
// [Asm] subst   fmadd.d fv16, fv9, fv12, fv14 ->   fmadd.d fa0, fa1, fa4, fa0
// [Asm] subst   fmadd.d fv18, fv10, fv13, fv16 ->   fmadd.d fa0, fa2, fa5, fa0
// [Asm] subst   li v24, 4696837146684686336 ->   li a0, 4696837146684686336
// [Asm] subst   fmv.d.x fv25, v24 ->   fmv.d.x fa1, a0
// [Asm] subst   fmul.d fv19, fv25, fv18 ->   fmul.d fa0, fa1, fa0
// [Asm] subst   fcvt.w.d v20, fv19, rtz ->   fcvt.w.d a0, fa0, rtz
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] LoweringOrder: [0]
// [Asm] LoweringOrder: [[]]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] LoweringOrder: [b0]
// [Asm] LoweringOrder: HashMap::of([(b0, 0)])
// [Asm] pre_assigned_registers: Self(fref=f2) -> v0, Insn(iref=%0) -> v2
// [Asm] before colored: # leaf false
// [Asm] main.102:
// [Asm] # block info: defs: [fv12, a1, fa1, fa2, fv25, ft6, a4, v20, fa6, a6, ft10, ft5, ft4, ft9, fa4, ft2, a3, a7, fa7, fa3, fv11, ft3, t2, fv18, v40, fv10, t1, fv19, v32, ft0, ft1, fv14, fv16, v34, ft7, v21, a5, a0, v30, fv8, v36, a2, v24, ft8, fv9, t3, t0, fa5, fv13, fa0, v38, t4], uses: [fv10, v21, a0, v30, v36, fv8, fv19, fv12, v32, v24, fv14, fv16, fv9, fv11, fv25, v20, fv13, v38, fv18, v34, v40], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.102_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   li v36, 4607182418800017408  # live: [v36]
// [Asm]   fmv.d.x fv8, v36  # live: [fv8]
// [Asm]   li v38, 4611686018427387904  # live: [v38, fv8]
// [Asm]   fmv.d.x fv9, v38  # live: [fv9, fv8]
// [Asm]   li v40, 4613937818241073152  # live: [v40, fv9, fv8]
// [Asm]   fmv.d.x fv10, v40  # live: [fv9, fv10, fv8]
// [Asm]   li v30, 4616189618054758400  # live: [fv9, fv10, v30, fv8]
// [Asm]   fmv.d.x fv11, v30  # live: [fv9, fv10, fv11, fv8]
// [Asm]   li v32, 4617315517961601024  # live: [fv9, fv10, v32, fv11, fv8]
// [Asm]   fmv.d.x fv12, v32  # live: [fv9, fv12, fv10, fv11, fv8]
// [Asm]   li v34, 4618441417868443648  # live: [fv9, fv12, fv10, fv11, v34, fv8]
// [Asm]   fmv.d.x fv13, v34  # live: [fv8, fv9, fv12, fv10, fv11, fv13]
// [Asm]   fmul.d fv14, fv8, fv11  # live: [fv9, fv10, fv12, fv14, fv13]
// [Asm]   fmadd.d fv16, fv9, fv12, fv14  # live: [fv10, fv16, fv13]
// [Asm]   fmadd.d fv18, fv10, fv13, fv16  # live: [fv18]
// [Asm]   li v24, 4696837146684686336  # live: [v24, fv18]
// [Asm]   fmv.d.x fv25, v24  # live: [fv18, fv25]
// [Asm]   fmul.d fv19, fv25, fv18  # live: [fv19]
// [Asm]   fcvt.w.d v20, fv19, rtz  # live: [v20]
// [Asm]   # save_ctx2  # live: [v20]
// [Asm]   mv a0, v20  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v21, a0  # live: [v21]
// [Asm]   # restore_ctx2  # live: [v21]
// [Asm] # control
// [Asm]   mv a0, v21  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, ra, s11, a0], upward_exposed: [ra, s11], params_defs: []
// [Asm] # live_in: [ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -16  # live: [s11, ra]
// [Asm]   sd ra, 0(sp)  # live: [s11]
// [Asm]   sd s11, 8(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   call main.102  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s11, 8(sp)  # live: [a0]
// [Asm]   addi sp, sp, 16  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm]   .p2align 2
// [Asm]   .bss
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("getx", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))}, LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))))
// [Knf] build_knf: LetTuple([("x", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("x"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("gety", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))}, LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("y", Var({val: Some(Double)})), ("_", Var({val: Some(Double)}))], Var("v"), Var("y"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("y")
// [Knf] build_knf: LetRec({name: ("getz", Double), args: [("v", Tuple([Double, Double, Double]))], body: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))}, LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))))
// [Knf] build_knf: LetTuple([("_", Var({val: Some(Double)})), ("_", Var({val: Some(Double)})), ("z", Var({val: Some(Double)}))], Var("v"), Var("z"))
// [Knf] build_knf: Var("v")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: LetRec({name: ("inprod", Double), args: [("v1", Tuple([Double, Double, Double])), ("v2", Tuple([Double, Double, Double]))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double)), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double)), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double)), Add, kind=Some(Double))
// [Knf] build_knf: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getx"), [Var("v1")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getx"), [Var("v2")])
// [Knf] build_knf: Var("getx")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("gety"), [Var("v1")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("gety"), [Var("v2")])
// [Knf] build_knf: Var("gety")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=Some(Double))
// [Knf] build_knf: App(Var("getz"), [Var("v1")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v1")
// [Knf] build_knf: App(Var("getz"), [Var("v2")])
// [Knf] build_knf: Var("getz")
// [Knf] build_knf: Var("v2")
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])}, App(Var("main"), []))
// [Knf] build_knf: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])])
// [Knf] build_knf: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))])
// [Knf] build_knf: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=Some(Double))
// [Knf] build_knf: Double(1000000)
// [Knf] build_knf: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Knf] build_knf: Var("inprod")
// [Knf] build_knf: Tuple([Double(1), Double(2), Double(3)])
// [Knf] build_knf: Double(1)
// [Knf] build_knf: Double(2)
// [Knf] build_knf: Double(3)
// [Knf] build_knf: Tuple([Double(4), Double(5), Double(6)])
// [Knf] build_knf: Double(4)
// [Knf] build_knf: Double(5)
// [Knf] build_knf: Double(6)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] beta reduce _74 = x.75
// [Main] beta reduce _78 = x.79
// [Main] beta reduce _83 = y.85
// [Main] beta reduce _87 = y.89
// [Main] beta reduce _93 = z.96
// [Main] beta reduce _97 = z.100
// [Main]   .option arch, +xtheadba, +xtheadfmemidx, +xtheadmemidx
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.102
// [Main]   .type main.102, @function
// [Main] # leaf false
// [Main] main.102:
// [Main] .main.102_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4607182418800017408
// [Main]   fmv.d.x fa0, a0
// [Main]   li a0, 4611686018427387904
// [Main]   fmv.d.x fa1, a0
// [Main]   li a0, 4613937818241073152
// [Main]   fmv.d.x fa2, a0
// [Main]   li a0, 4616189618054758400
// [Main]   fmv.d.x fa3, a0
// [Main]   li a0, 4617315517961601024
// [Main]   fmv.d.x fa4, a0
// [Main]   li a0, 4618441417868443648
// [Main]   fmv.d.x fa5, a0
// [Main]   fmul.d fa0, fa0, fa3
// [Main]   fmadd.d fa0, fa1, fa4, fa0
// [Main]   fmadd.d fa0, fa2, fa5, fa0
// [Main]   li a0, 4696837146684686336
// [Main]   fmv.d.x fa1, a0
// [Main]   fmul.d fa0, fa1, fa0
// [Main]   fcvt.w.d a0, fa0, rtz
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   sd s11, 8(sp)
// [Main]   la s11, large_heap_end
// [Main]   call main.102
// [Main]   ld ra, 0(sp)
// [Main]   ld s11, 8(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Main] 
// [KnfOpt] freq: {getx.1: Many(2), gety.10: Many(2), getz.19: Many(2), inprod.28: Once, main.43: Once}
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(getx)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(getx)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(gety)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(gety)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(getz)
// [KnfOpt] Fn like 0
// [KnfOpt] Inline threshold 2 2
// [KnfOpt] Inline decision accepted
// [KnfOpt] Knf inline Some(getz)
// [KnfOpt] Knf inline Some(inprod)
// [KnfOpt] freq: {main.43: Once}
// [KnfOpt] freq: {main.43: Once}
// [KnfOpt] Numbers of let rec: 1 1 0
// [KnfOpt] Tuple freq: {_45: MayEscape, _46: MayEscape, _47: MayEscape, _49: MayEscape, _50: MayEscape, _51: MayEscape, _48: Destructed, _52: Destructed, _54: MayEscape, _55: MayEscape}
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f0: Once, f2: Once})
// [CoreOpt] allow_inline: false %0 main.102 false true true false true
// [CoreOpt] allow_inline: false %0 main.102 false true true false true
// [CoreOpt] allow_inline: false %0 main.102 false true true false true
// [CoreOpt] allow_inline: false %0 main.102 false true true false true
// [CoreOpt] allow_inline: false %0 main.102 false true true false true
// [CoreOpt] allow_inline: false %0 main.102 false true true false true
// [CoreOpt] LVN subst Insn(iref=%9) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%10) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%11) with Insn(iref=%4)
// [CoreOpt] LVN subst Insn(iref=%12) with Insn(iref=%5)
// [CoreOpt] LVN subst Insn(iref=%13) with Insn(iref=%6)
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%7)
// [CoreOpt] LVN subst Insn(iref=%17) with Insn(iref=%2)
// [CoreOpt] LVN subst Insn(iref=%18) with Insn(iref=%3)
// [CoreOpt] LVN subst Insn(iref=%19) with Insn(iref=%4)
// [CoreOpt] LVN subst Insn(iref=%20) with Insn(iref=%5)
// [CoreOpt] LVN subst Insn(iref=%21) with Insn(iref=%6)
// [CoreOpt] LVN subst Insn(iref=%22) with Insn(iref=%7)
