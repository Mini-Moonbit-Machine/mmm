// [Main] function thunk_main(k) {
// [Main]   function getx_1(v_3, k) {
// [Main]     const [x_5, _7, _9] = v_3;
// [Main]     return $thunk(() => k(x_5))
// [Main]   }
// [Main]   function gety_10(v_12, k) {
// [Main]     const [_14, y_16, _18] = v_12;
// [Main]     return $thunk(() => k(y_16))
// [Main]   }
// [Main]   function getz_19(v_21, k) {
// [Main]     const [_23, _25, z_27] = v_21;
// [Main]     return $thunk(() => k(z_27))
// [Main]   }
// [Main]   function inprod_28(v1_30, v2_32, k) {
// [Main]     return $thunk(() => getx_1(v1_30, function (_33) {
// [Main]       return $thunk(() => getx_1(v2_32, function (_34) {
// [Main]         const _35 = _33 * _34;
// [Main]         return $thunk(() => gety_10(v1_30, function (_36) {
// [Main]           return $thunk(() => gety_10(v2_32, function (_37) {
// [Main]             const _38 = _36 * _37;
// [Main]             const _39 = _35 + _38;
// [Main]             return $thunk(() => getz_19(v1_30, function (_40) {
// [Main]               return $thunk(() => getz_19(v2_32, function (_41) {
// [Main]                 const _42 = _40 * _41;
// [Main]                 return $thunk(() => k(_39 + _42))
// [Main]               }
// [Main]               ))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   function main_43(k) {
// [Main]     const _44 = 1000000;
// [Main]     const _45 = 1;
// [Main]     const _46 = 2;
// [Main]     const _47 = 3;
// [Main]     const _48 = [_45, _46, _47];
// [Main]     const _49 = 4;
// [Main]     const _50 = 5;
// [Main]     const _51 = 6;
// [Main]     const _52 = [_49, _50, _51];
// [Main]     return $thunk(() => inprod_28(_48, _52, function (_53) {
// [Main]       const _54 = _44 * _53;
// [Main]       return $thunk(() => $external(minimbt_truncate, function (_55) {
// [Main]         return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]           return $thunk(() => k(x))
// [Main]         }
// [Main]         , _55))
// [Main]       }
// [Main]       , _54))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_43(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("getx", Double), args: [("v", (Double, Double, Double))], body: LetTuple([("x", Var(None)), ("_", Var(None)), ("_", Var(None))], Var("v"), Var("x"))}, LetRec({tyvars: [], name: ("gety", Double), args: [("v", (Double, Double, Double))], body: LetTuple([("_", Var(None)), ("y", Var(None)), ("_", Var(None))], Var("v"), Var("y"))}, LetRec({tyvars: [], name: ("getz", Double), args: [("v", (Double, Double, Double))], body: LetTuple([("_", Var(None)), ("_", Var(None)), ("z", Var(None))], Var("v"), Var("z"))}, LetRec({tyvars: [], name: ("inprod", Double), args: [("v1", (Double, Double, Double)), ("v2", (Double, Double, Double))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None), Add, kind=None), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=None), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)])])}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetTuple([("x", Var(None)), ("_", Var(None)), ("_", Var(None))], Var("v"), Var("x")) against Double
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Var("x") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("gety", Double), args: [("v", (Double, Double, Double))], body: LetTuple([("_", Var(None)), ("y", Var(None)), ("_", Var(None))], Var("v"), Var("y"))}, LetRec({tyvars: [], name: ("getz", Double), args: [("v", (Double, Double, Double))], body: LetTuple([("_", Var(None)), ("_", Var(None)), ("z", Var(None))], Var("v"), Var("z"))}, LetRec({tyvars: [], name: ("inprod", Double), args: [("v1", (Double, Double, Double)), ("v2", (Double, Double, Double))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None), Add, kind=None), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=None), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)])])}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: LetTuple([("_", Var(None)), ("y", Var(None)), ("_", Var(None))], Var("v"), Var("y")) against Double
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Var("y") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("getz", Double), args: [("v", (Double, Double, Double))], body: LetTuple([("_", Var(None)), ("_", Var(None)), ("z", Var(None))], Var("v"), Var("z"))}, LetRec({tyvars: [], name: ("inprod", Double), args: [("v1", (Double, Double, Double)), ("v2", (Double, Double, Double))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None), Add, kind=None), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=None), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)])])}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: LetTuple([("_", Var(None)), ("_", Var(None)), ("z", Var(None))], Var("v"), Var("z")) against Double
// [Typer] infer: Var("v")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] unify: Var(None) and Double
// [Typer] union: Var(None) and Double
// [Typer] check: Var("z") against Double
// [Typer] inst: TypeScheme(([], Double))
// [Typer] inst result: Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("inprod", Double), args: [("v1", (Double, Double, Double)), ("v2", (Double, Double, Double))], body: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None), Add, kind=None), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=None), Add, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)])])}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None), Add, kind=None), Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=None), Add, kind=None) against Double
// [Typer] check: Prim(Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None), Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None), Add, kind=None) against Double
// [Typer] check: Prim(App(Var("getx"), [Var("v1")]), App(Var("getx"), [Var("v2")]), Mul, kind=None) against Double
// [Typer] check: App(Var("getx"), [Var("v1")]) against Double
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] check: Var("getx") against ((Double, Double, Double)) -> Double
// [Typer] inst: TypeScheme(([], ((Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double)) -> Double
// [Typer] unify: ((Double, Double, Double)) -> Double and ((Double, Double, Double)) -> Double
// [Typer] unify: (Double, Double, Double) and (Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: App(Var("getx"), [Var("v2")]) against Double
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] check: Var("getx") against ((Double, Double, Double)) -> Double
// [Typer] inst: TypeScheme(([], ((Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double)) -> Double
// [Typer] unify: ((Double, Double, Double)) -> Double and ((Double, Double, Double)) -> Double
// [Typer] unify: (Double, Double, Double) and (Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Prim(App(Var("gety"), [Var("v1")]), App(Var("gety"), [Var("v2")]), Mul, kind=None) against Double
// [Typer] check: App(Var("gety"), [Var("v1")]) against Double
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] check: Var("gety") against ((Double, Double, Double)) -> Double
// [Typer] inst: TypeScheme(([], ((Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double)) -> Double
// [Typer] unify: ((Double, Double, Double)) -> Double and ((Double, Double, Double)) -> Double
// [Typer] unify: (Double, Double, Double) and (Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: App(Var("gety"), [Var("v2")]) against Double
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] check: Var("gety") against ((Double, Double, Double)) -> Double
// [Typer] inst: TypeScheme(([], ((Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double)) -> Double
// [Typer] unify: ((Double, Double, Double)) -> Double and ((Double, Double, Double)) -> Double
// [Typer] unify: (Double, Double, Double) and (Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: Prim(App(Var("getz"), [Var("v1")]), App(Var("getz"), [Var("v2")]), Mul, kind=None) against Double
// [Typer] check: App(Var("getz"), [Var("v1")]) against Double
// [Typer] infer: Var("v1")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] check: Var("getz") against ((Double, Double, Double)) -> Double
// [Typer] inst: TypeScheme(([], ((Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double)) -> Double
// [Typer] unify: ((Double, Double, Double)) -> Double and ((Double, Double, Double)) -> Double
// [Typer] unify: (Double, Double, Double) and (Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: App(Var("getz"), [Var("v2")]) against Double
// [Typer] infer: Var("v2")
// [Typer] inst: TypeScheme(([], (Double, Double, Double)))
// [Typer] inst result: (Double, Double, Double)
// [Typer] check: Var("getz") against ((Double, Double, Double)) -> Double
// [Typer] inst: TypeScheme(([], ((Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double)) -> Double
// [Typer] unify: ((Double, Double, Double)) -> Double and ((Double, Double, Double)) -> Double
// [Typer] unify: (Double, Double, Double) and (Double, Double, Double)
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] unify: Double and Double
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)])])}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("truncate"), [Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)]) against Int
// [Typer] infer: Prim(Double(1000000), App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])]), Mul, kind=None)
// [Typer] infer: Double(1000000)
// [Typer] infer: App(Var("inprod"), [Tuple([Double(1), Double(2), Double(3)]), Tuple([Double(4), Double(5), Double(6)])])
// [Typer] infer: Var("inprod")
// [Typer] inst: TypeScheme(([], ((Double, Double, Double), (Double, Double, Double)) -> Double))
// [Typer] inst result: ((Double, Double, Double), (Double, Double, Double)) -> Double
// [Typer] check: Tuple([Double(1), Double(2), Double(3)]) against (Double, Double, Double)
// [Typer] check: Double(1) against Double
// [Typer] check: Double(2) against Double
// [Typer] check: Double(3) against Double
// [Typer] check: Tuple([Double(4), Double(5), Double(6)]) against (Double, Double, Double)
// [Typer] check: Double(4) against Double
// [Typer] check: Double(5) against Double
// [Typer] check: Double(6) against Double
// [Typer] unify: Double and Double
// [Typer] check: Var("truncate") against (Double) -> Int
// [Typer] inst: TypeScheme(([], (Double) -> Int))
// [Typer] inst result: (Double) -> Int
// [Typer] unify: (Double) -> Int and (Double) -> Int
// [Typer] unify: Double and Double
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
