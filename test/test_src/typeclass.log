// [Main] function thunk_main(k) {
// [Main]   function aux_1(x_3, k) {
// [Main]     return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]       return $thunk(() => k(x))
// [Main]     }
// [Main]     , x_3))
// [Main]   }
// [Main]   const D_Print_4 = [aux_1];
// [Main]   function aux_5(x_7, k) {
// [Main]     return $thunk(() => $external(minimbt_print_string, function (x) {
// [Main]       return $thunk(() => k(x))
// [Main]     }
// [Main]     , x_7))
// [Main]   }
// [Main]   const D_Print_8 = [aux_5];
// [Main]   return $thunk(() => k(null))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] resolve: LetClass({tyvar: "T", name: "Print", methods: [("print", (T) -> Unit)]}, LetInstance({ty: Int, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_int"), [Var("x")])}, Var("aux")))]}, LetInstance({ty: String, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")))]}, Unit)))
// [Typer] resolve: LetInstance({ty: Int, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_int"), [Var("x")])}, Var("aux")))]}, LetInstance({ty: String, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")))]}, Unit))
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_int"), [Var("x")])}, Var("aux"))
// [Typer] resolve: App(Var("print_int"), [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: Var("aux")
// [Typer] resolve: LetInstance({ty: String, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")))]}, Unit)
// [Typer] resolve: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux"))
// [Typer] resolve: App(Var("print_string"), [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print_string")
// [Typer] resolve: Var("aux")
// [Typer] resolve: Unit
// [Typer] check: LetClass({tyvar: "T", name: "Print", methods: [("print", (T) -> Unit)]}, LetInstance({ty: Int, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_int"), [Var("x")])}, Var("aux")))]}, LetInstance({ty: String, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")))]}, Unit))) against Unit
// [Typer] check: LetInstance({ty: Int, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_int"), [Var("x")])}, Var("aux")))]}, LetInstance({ty: String, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")))]}, Unit)) against Unit
// [Typer] check: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_int"), [Var("x")])}, Var("aux")) against (Int) -> Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [Var("x")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Var("aux") against (Int) -> Unit
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Unit
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Unit
// [Typer] check: LetInstance({ty: String, name: "Print", methods: [("print", LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")))]}, Unit) against Unit
// [Typer] check: LetRec({tyvars: [], name: ("aux", Var(None)), args: [("x", Var(None))], body: App(Var("print_string"), [Var("x")])}, Var("aux")) against (String) -> Unit
// [Typer] typevars: []
// [Typer] infer: App(Var("print_string"), [Var("x")])
// [Typer] infer: Var("print_string")
// [Typer] inst: TypeScheme(([], (String) -> Unit))
// [Typer] inst result: (String) -> Unit
// [Typer] check: Var("x") against String
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Var(None) and String
// [Typer] union: Var(None) and String
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Var("aux") against (String) -> Unit
// [Typer] inst: TypeScheme(([], (String) -> Unit))
// [Typer] inst result: (String) -> Unit
// [Typer] unify: (String) -> Unit and (String) -> Unit
// [Typer] unify: String and String
// [Typer] unify: Unit and Unit
// [Typer] check: Unit against Unit
// [Parser] flags: ["extension"]
