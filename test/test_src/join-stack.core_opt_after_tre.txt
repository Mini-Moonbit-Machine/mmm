# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn f1_0 #f0 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 123
  }
}
.fn g4_1 #f1 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 456
  }
}
.fn h7_2 #f2 : fn(unit) -> int32
.freevars ()
.entry b0 {
  .bb #b0 () {
    return 789
  }
}
.fn T$start_8 #f8 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f3()
    return %0
  }
}
.fn main10_3 #f3 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: int32 = call f0(())
    let %1: int32 = call f1(())
    let %2: int32 = call f2(())
    let %3: bool = eq(%2, 0)
    br %3 b1() b2()
  }
  .bb #b1 () {
    let %4: int32 = add(%0, 1)
    jump b3(%4)
  }
  .bb #b2 () {
    let %5: int32 = add(%1, 2)
    let %6: int32 = add(%5, %0)
    let %7: int32 = add(%6, %1)
    jump b3(%7)
  }
  .bb #b3 (int32) {
    let %8: unit = ext_call minimbt_print_int($b3.0)
    return %8
  }
}
.thunk ::0 start
