// [Asm] pre_assigned_registers: Insn(iref=%2) -> v4, Insn(iref=%1) -> v3, Self(fref=f4) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v7]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v3 is X
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.38"];
// [Asm]   r0 [label="v7 ← a0", color=green];
// [Asm]   r3 [label="a2", color=blue];
// [Asm]   r9 [label="t0", color=blue];
// [Asm]   r6 [label="a5", color=blue];
// [Asm]   r13 [label="t4", color=blue];
// [Asm]   r4 [label="a3", color=blue];
// [Asm]   r1 [label="a0", color=blue];
// [Asm]   r11 [label="t2", color=blue];
// [Asm]   r7 [label="a6", color=blue];
// [Asm]   r10 [label="t1", color=blue];
// [Asm]   r14 [label="v2 ← a0", color=green];
// [Asm]   r8 [label="a7", color=blue];
// [Asm]   r5 [label="a4", color=blue];
// [Asm]   r15 [label="v3 ← a0", color=green];
// [Asm]   r2 [label="a1", color=blue];
// [Asm]   r16 [label="v4 ← a0", color=green];
// [Asm]   r12 [label="t3", color=blue];
// [Asm]   r1 -- r2;
// [Asm]   r1 -- r8;
// [Asm]   r1 -- r5;
// [Asm]   r1 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r13;
// [Asm]   r1 -- r11;
// [Asm]   r1 -- r7;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r10;
// [Asm]   comment = "0:v7-> 1:a0-> 2:a1-> 3:a2-> 4:a3-> 5:a4-> 6:a5-> 7:a6-> 8:a7-> 9:t0-> 10:t1-> 11:t2-> 12:t3-> 13:t4-> 14:v2-> 15:v3-> 16:v4"
// [Asm]   comment = "v7<-a0;v2<-a0;v3<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.38"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v7, 123 ->   li a0, 123
// [Asm] subst   call inc.36 ->   call inc.36
// [Asm] subst   call composed.39 ->   call composed.39
// [Asm] subst   call minimbt_print_int ->   call minimbt_print_int
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f1, fpref=$f.0) -> v2, Insn(iref=%0) -> v3, Self(fref=f1) -> v0
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v3]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of inc.36"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="a0", color=blue];
// [Asm]   r1 [label="v3 ← a0", color=green];
// [Asm]   comment = "0:v2-> 1:v3-> 2:a0"
// [Asm]   comment = "v2<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of inc.36"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   addi v3, v2, 1 ->   addi a0, a0, 1
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.38 ->   call main.38
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%1) -> v4, Self(fref=f3) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v3]
// [Asm] move_origin: []
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v4]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of composed.39"];
// [Asm]   r0 [label="v2 ← a0", color=green];
// [Asm]   r2 [label="v4 ← a0", color=green];
// [Asm]   r1 [label="v3 ← a0", color=green];
// [Asm]   r3 [label="a0", color=blue];
// [Asm]   comment = "0:v2-> 1:v3-> 2:v4-> 3:a0"
// [Asm]   comment = "v2<-a0;v4<-a0;v3<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of composed.39"];
// [Asm]   comment = ""
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   add v3, v2, v2 ->   add a0, a0, a0
// [Asm] subst   addi v4, v3, -1 ->   addi a0, a0, -1
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] main.38:
// [Asm] # block info: defs: [v3, t1, v7, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, v4, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v2, v3, v4, a0, v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.38_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   li v7, 123  # live: [v7]
// [Asm]   mv a0, v7  # live: [a0]
// [Asm]   call inc.36  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm]   # save_ctx2  # live: [v2]
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   call composed.39  # live: [a0]
// [Asm]   mv v3, a0  # live: [v3]
// [Asm]   # restore_ctx2  # live: [v3]
// [Asm]   # save_ctx2  # live: [v3]
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   call minimbt_print_int  # live: [a0]
// [Asm]   mv v4, a0  # live: [v4]
// [Asm]   # restore_ctx2  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] inc.36:
// [Asm] # block info: defs: [v3, a0, v2], uses: [v3, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .inc.36_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   addi v3, v2, 1  # live: [v3]
// [Asm] # control
// [Asm]   mv a0, v3  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf true
// [Asm] composed.39:
// [Asm] # block info: defs: [v3, v4, a0, v2], uses: [v3, v4, a0, v2], upward_exposed: [a0], params_defs: []
// [Asm] # live_in: [a0], live_out: []
// [Asm] # block parameters: []
// [Asm] .composed.39_0:
// [Asm]   # save_ctx1  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   add v3, v2, v2  # live: [v3]
// [Asm]   addi v4, v3, -1  # live: [v4]
// [Asm] # control
// [Asm]   mv a0, v4  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.38  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("compose", Fun([Int], Int)), args: [("f", Fun([Int], Int)), ("g", Fun([Int], Int))], body: LetRec({name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed"))}, LetRec({name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=Some(Int))}, LetRec({name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), []))))))
// [Knf] build_knf: LetRec({name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed"))
// [Knf] build_knf: App(Var("g"), [App(Var("f"), [Var("x")])])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: App(Var("f"), [Var("x")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("composed")
// [Knf] build_knf: LetRec({name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=Some(Int))}, LetRec({name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), [])))))
// [Knf] build_knf: Prim(Var("x"), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), []))))
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))
// [Knf] build_knf: App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])])
// [Knf] build_knf: Var("compose")
// [Knf] build_knf: Var("inc")
// [Knf] build_knf: App(Var("compose"), [Var("dbl"), Var("dec")])
// [Knf] build_knf: Var("compose")
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("dec")
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Int(123)])])
// [Knf] build_knf: App(Var("h"), [Int(123)])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(123)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%1)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%2)])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main] beta reduce _16 = composed.23
// [Main] beta reduce h.17 = composed.26
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.38
// [Main]   .type main.38, @function
// [Main] # leaf false
// [Main] main.38:
// [Main] .main.38_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 123
// [Main]   call inc.36
// [Main]   call composed.39
// [Main]   call minimbt_print_int
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl inc.36
// [Main]   .type inc.36, @function
// [Main] # leaf true
// [Main] inc.36:
// [Main] .inc.36_0:
// [Main]   addi a0, a0, 1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl composed.39
// [Main]   .type composed.39, @function
// [Main] # leaf true
// [Main] composed.39:
// [Main] .composed.39_0:
// [Main]   add a0, a0, a0
// [Main]   addi a0, a0, -1
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.38
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.38
// [Wasm] Lowering insn Call(ty=Int32, f=f1, args=[Int32(val=123)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Call(ty=Int32, f=f3, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_int", args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%2)])
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function main.38 to wasm
// [Wasm] Lowering function inc.36
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f1, fpref=$f.0), Int32(val=1)])
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name FnParam(fref=f1, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function inc.36 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function composed.39
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%0), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Return(args=[Insn(iref=%1)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function composed.39 to wasm
// [KnfOpt] func_tre: compose.1 false
// [KnfOpt] func_tre: composed.4 false
// [KnfOpt] func_tre: dbl.7 false
// [KnfOpt] func_tre: inc.9 false
// [KnfOpt] func_tre: dec.12 false
// [KnfOpt] func_tre: main.15 false
// [KnfOpt] freq: {compose.1: Many(2), composed.4: AsClosure, dbl.7: AsClosure, inc.9: AsClosure, dec.12: AsClosure, main.15: Once}
// [KnfOpt] Inline threshold 2 5
// [KnfOpt] Fn like 3
// [KnfOpt] Inline decision compose.1 accepted
// [KnfOpt] Inline threshold 2 5
// [KnfOpt] Fn like 3
// [KnfOpt] Inline decision compose.1 accepted
// [KnfOpt] Knf inline Some(compose) let h.17: Fun([Int], Int) = Unit
// [KnfOpt] let _18: Int = Int(123)
// [KnfOpt] let _19: Int = Apply(h.17, [_18, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_19, ])
// [KnfOpt] Knf inline Some(compose) let _16: Fun([Int], Int) = Unit
// [KnfOpt] let rec composed.20: Int = (x.21: Int) {
// [KnfOpt]   let _22: Int = Apply(inc.9, [x.21, ])
// [KnfOpt]   Apply(_16, [_22, ])
// [KnfOpt] }
// [KnfOpt] let h.17: Fun([Int], Int) = Var(composed.20)
// [KnfOpt] let _18: Int = Int(123)
// [KnfOpt] let _19: Int = Apply(h.17, [_18, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_19, ])
// [KnfOpt] Inline threshold 2 5
// [KnfOpt] Fn like 3
// [KnfOpt] Inline decision compose.1 accepted
// [KnfOpt] Knf inline Some(compose) let h.17: Fun([Int], Int) = Unit
// [KnfOpt] let _18: Int = Int(123)
// [KnfOpt] let _19: Int = Apply(h.17, [_18, ])
// [KnfOpt] ExtApply(minimbt_print_int, [_19, ])
// [KnfOpt] freq: {dbl.7: Once, inc.9: Once, dec.12: Once, main.15: Once, composed.23: Once, composed.26: Once}
// [KnfOpt] Knf inline Some(dec) Unit
// [KnfOpt] Knf inline Some(dbl) let _25: Int = Unit
// [KnfOpt] let _29: Int = Int(1)
// [KnfOpt] Sub(_25, _29)
// [KnfOpt] Knf inline Some(dec) Unit
// [KnfOpt] Knf inline Some(composed) Unit
// [KnfOpt] Knf inline Some(inc) let _28: Int = Unit
// [KnfOpt] let _31: Int = Apply(dbl.7, [_28, ])
// [KnfOpt] Apply(dec.12, [_31, ])
// [KnfOpt] Knf inline Some(composed) Unit
// [KnfOpt] Knf inline Some(composed) let _19: Int = Unit
// [KnfOpt] ExtApply(minimbt_print_int, [_19, ])
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Never, f3: Once, f0: Never})
// [CoreOpt] Remove dead function: f2
// [CoreOpt] Remove dead function: f0
