// [Main] function thunk_main(k) {
// [Main]   function compose_1(f_3, g_5, k) {
// [Main]     function composed_6(x_8, k) {
// [Main]       return $thunk(() => f_3(x_8, function (_9) {
// [Main]         return $thunk(() => g_5(_9, k))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     return k(composed_6)
// [Main]   }
// [Main]   function dbl_10(x_12, k) {
// [Main]     return k(x_12 + x_12)
// [Main]   }
// [Main]   function inc_13(x_15, k) {
// [Main]     const _16 = 1;
// [Main]     return k(x_15 + _16)
// [Main]   }
// [Main]   function dec_17(x_19, k) {
// [Main]     const _20 = 1;
// [Main]     return k(x_19 - _20)
// [Main]   }
// [Main]   function main_21(k) {
// [Main]     return $thunk(() => compose_1(dbl_10, dec_17, function (_22) {
// [Main]       return $thunk(() => compose_1(inc_13, _22, function (h_23) {
// [Main]         const _24 = 123;
// [Main]         return $thunk(() => h_23(_24, function (_25) {
// [Main]           return $thunk(() => $thunk(() => $thunk(() => k(minimbt_print_int($force(_25))))))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_21(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("compose", Fun([Int], Int)), args: [("f", Fun([Int], Int)), ("g", Fun([Int], Int))], body: LetRec({tyvars: [], name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed"))}, LetRec({tyvars: [], name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=None)}, LetRec({tyvars: [], name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed")) against Fun([Int], Int)
// [Typer] typevars: []
// [Typer] check: App(Var("g"), [App(Var("f"), [Var("x")])]) against Int
// [Typer] infer: App(Var("f"), [Var("x")])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("g") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("composed") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=None)}, LetRec({tyvars: [], name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Var("x"), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("h", Var({val: None})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("h", Var({val: None})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))
// [Typer] infer: App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])])
// [Typer] infer: Var("compose")
// [Typer] inst: TypeScheme(([], Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int))))
// [Typer] inst result: Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int))
// [Typer] check: Var("inc") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("compose"), [Var("dbl"), Var("dec")]) against Fun([Int], Int)
// [Typer] infer: Var("dbl")
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] infer: Var("dec")
// [Typer] inst: TypeScheme(([], Fun([Int], Int)))
// [Typer] inst result: Fun([Int], Int)
// [Typer] check: Var("compose") against Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int))
// [Typer] inst: TypeScheme(([], Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int))))
// [Typer] inst result: Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int))
// [Typer] unify: Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int)) and Fun([Fun([Int], Int), Fun([Int], Int)], Fun([Int], Int))
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var({val: None}) and Fun([Int], Int)
// [Typer] union: Var({val: None}) and Fun([Int], Int)
// [Typer] infer: App(Var("print_int"), [App(Var("h"), [Int(123)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: App(Var("h"), [Int(123)]) against Int
// [Typer] infer: Int(123)
// [Typer] check: Var("h") against Fun([Int], Int)
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Int], Int))})))
// [Typer] inst result: Fun([Int], Int)
// [Typer] unify: Fun([Int], Int) and Fun([Int], Int)
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
