// [Main] function thunk_main(k) {
// [Main]   function compose_1(f_3, g_5, k) {
// [Main]     function composed_6(x_8, k) {
// [Main]       return $thunk(() => f_3(x_8, function (_9) {
// [Main]         return $thunk(() => g_5(_9, function (x) {
// [Main]           return $thunk(() => k(x))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     return $thunk(() => k(composed_6))
// [Main]   }
// [Main]   function dbl_10(x_12, k) {
// [Main]     return $thunk(() => k(x_12 + x_12))
// [Main]   }
// [Main]   function inc_13(x_15, k) {
// [Main]     const _16 = 1;
// [Main]     return $thunk(() => k(x_15 + _16))
// [Main]   }
// [Main]   function dec_17(x_19, k) {
// [Main]     const _20 = 1;
// [Main]     return $thunk(() => k(x_19 - _20))
// [Main]   }
// [Main]   function main_21(k) {
// [Main]     return $thunk(() => compose_1(dbl_10, dec_17, function (_22) {
// [Main]       return $thunk(() => compose_1(inc_13, _22, function (h_23) {
// [Main]         const _24 = 123;
// [Main]         return $thunk(() => h_23(_24, function (_25) {
// [Main]           return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]             return $thunk(() => k(x))
// [Main]           }
// [Main]           , _25))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_21(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: [], name: ("compose", (Int) -> Int), args: [("f", (Int) -> Int), ("g", (Int) -> Int)], body: LetRec({tyvars: [], name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed"))}, LetRec({tyvars: [], name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=None)}, LetRec({tyvars: [], name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("h", Var(None)), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit))))) against Unit
// [Typer] typevars: []
// [Typer] check: LetRec({tyvars: [], name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed")) against (Int) -> Int
// [Typer] typevars: []
// [Typer] check: App(Var("g"), [App(Var("f"), [Var("x")])]) against Int
// [Typer] infer: App(Var("f"), [Var("x")])
// [Typer] infer: Var("f")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("g") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: Var("composed") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=None)}, LetRec({tyvars: [], name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("h", Var(None)), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit)))) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Var("x"), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: LetRec({tyvars: [], name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=None)}, LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("h", Var(None)), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit))) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Int(1), Add, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=None)}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("h", Var(None)), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit)) against Unit
// [Typer] typevars: []
// [Typer] check: Prim(Var("x"), Int(1), Sub, kind=None) against Int
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] check: Int(1) against Int
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("h", Var(None)), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("h", Var(None)), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))
// [Typer] infer: App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])])
// [Typer] infer: Var("compose")
// [Typer] inst: TypeScheme(([], ((Int) -> Int, (Int) -> Int) -> (Int) -> Int))
// [Typer] inst result: ((Int) -> Int, (Int) -> Int) -> (Int) -> Int
// [Typer] check: Var("inc") against (Int) -> Int
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] check: App(Var("compose"), [Var("dbl"), Var("dec")]) against (Int) -> Int
// [Typer] infer: Var("dbl")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] infer: Var("dec")
// [Typer] inst: TypeScheme(([], (Int) -> Int))
// [Typer] inst result: (Int) -> Int
// [Typer] check: Var("compose") against ((Int) -> Int, (Int) -> Int) -> (Int) -> Int
// [Typer] inst: TypeScheme(([], ((Int) -> Int, (Int) -> Int) -> (Int) -> Int))
// [Typer] inst result: ((Int) -> Int, (Int) -> Int) -> (Int) -> Int
// [Typer] unify: ((Int) -> Int, (Int) -> Int) -> (Int) -> Int and ((Int) -> Int, (Int) -> Int) -> (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Var(None) and (Int) -> Int
// [Typer] union: Var(None) and (Int) -> Int
// [Typer] infer: App(Var("print_int"), [App(Var("h"), [Int(123)])])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: App(Var("h"), [Int(123)]) against Int
// [Typer] infer: Int(123)
// [Typer] check: Var("h") against (Int) -> Int
// [Typer] inst: TypeScheme(([], Var((Int) -> Int)))
// [Typer] inst result: (Int) -> Int
// [Typer] unify: (Int) -> Int and (Int) -> Int
// [Typer] unify: Int and Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: []
