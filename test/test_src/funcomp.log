// [Knf] build_knf: LetRec({name: ("compose", Fun([Int], Int)), args: [("f", Fun([Int], Int)), ("g", Fun([Int], Int))], body: LetRec({name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed"))}, LetRec({name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=Some(Int))}, LetRec({name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), []))))))
// [Knf] build_knf: LetRec({name: ("composed", Int), args: [("x", Int)], body: App(Var("g"), [App(Var("f"), [Var("x")])])}, Var("composed"))
// [Knf] build_knf: App(Var("g"), [App(Var("f"), [Var("x")])])
// [Knf] build_knf: Var("g")
// [Knf] build_knf: App(Var("f"), [Var("x")])
// [Knf] build_knf: Var("f")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("composed")
// [Knf] build_knf: LetRec({name: ("dbl", Int), args: [("x", Int)], body: Prim(Var("x"), Var("x"), Add, kind=Some(Int))}, LetRec({name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), [])))))
// [Knf] build_knf: Prim(Var("x"), Var("x"), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({name: ("inc", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Add, kind=Some(Int))}, LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), []))))
// [Knf] build_knf: Prim(Var("x"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("dec", Int), args: [("x", Int)], body: Prim(Var("x"), Int(1), Sub, kind=Some(Int))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), [])))
// [Knf] build_knf: Prim(Var("x"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))}, App(Var("main"), []))
// [Knf] build_knf: Let(("h", Var({val: Some(Fun([Int], Int))})), App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])]), App(Var("print_int"), [App(Var("h"), [Int(123)])]))
// [Knf] build_knf: App(Var("compose"), [Var("inc"), App(Var("compose"), [Var("dbl"), Var("dec")])])
// [Knf] build_knf: Var("compose")
// [Knf] build_knf: Var("inc")
// [Knf] build_knf: App(Var("compose"), [Var("dbl"), Var("dec")])
// [Knf] build_knf: Var("compose")
// [Knf] build_knf: Var("dbl")
// [Knf] build_knf: Var("dec")
// [Knf] build_knf: App(Var("print_int"), [App(Var("h"), [Int(123)])])
// [Knf] build_knf: App(Var("h"), [Int(123)])
// [Knf] build_knf: Var("h")
// [Knf] build_knf: Int(123)
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function compose1(f2_3, g4_5, k) {
// [Main]     function composed6(x7_8, k) {
// [Main]       return $thunk(() => f2_3(x7_8, function (_9) {
// [Main]         return $thunk(() => g4_5(_9, k))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     return k(composed6)
// [Main]   }
// [Main]   function dbl10(x11_12, k) {
// [Main]     return k(x11_12 + x11_12)
// [Main]   }
// [Main]   function inc13(x14_15, k) {
// [Main]     const _16 = 1;
// [Main]     return k(x14_15 + _16)
// [Main]   }
// [Main]   function dec17(x18_19, k) {
// [Main]     const _20 = 1;
// [Main]     return k(x18_19 - _20)
// [Main]   }
// [Main]   function main21(k) {
// [Main]     return $thunk(() => compose1(dbl10, dec17, function (_22) {
// [Main]       return $thunk(() => compose1(inc13, _22, function (h_23) {
// [Main]         const _24 = 123;
// [Main]         return $thunk(() => h_23(_24, function (_25) {
// [Main]           return $thunk(() => $thunk(() => $thunk(() => k(minimbt_print_int($force(_25))))))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main21(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Parser] flags: []
