# name conventions used in the core ir:
# - functions: f<id>
# - blocks: b<id>
# - instructions: %<id>
# - memory: m<id>
# - free variables: ^<id>
# - function parameters: $f<pid>
# - block parameters: $b<bid>.<pid>
.core
.fn T$start #f2 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let %0: unit = call f0()
    return %0
  }
}
.fn main.75 #f0 : fn() -> unit
.freevars ()
.entry b0 {
  .bb #b0 () {
    let _ = alloc <m0: array[int32] heap(10)> <- [..] = 4
    let _ = alloc <m1: array[int32] heap(10)> <- [..] = 0
    jump b1(0, 0)
  }
  .loop #b1 pre #Some(b0) header #b2 {
    .block #b3
    .block #b4
    .block #b5
  }
  .bb #b2 (int32, int32) {
    let %2: int32 = sub(10, 1)
    let %3: bool = le($b2.1, %2)
    br %3 b3() b4()
  }
  .bb #b3 () {
    let %4: int32 = load int32 offset(f0.m0, $b2.1 * @32)
    let %5: int32 = add($b2.0, %4)
    let _ = store int32 offset(f0.m1, $b2.1 * @32) <- %5
    let %7: int32 = add($b2.1, 1)
    jump b2(%5, %7)
  }
  .bb #b4 () {
    let %8: int32 = load int32 offset(f0.m1, 0 * @32)
    let %9: unit = ext_call minimbt_print_int(%8)
    jump b5(%9)
  }
  .bb #b5 (any) {
    return $b5.0
  }
}
.thunk ::0 start
