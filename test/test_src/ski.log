// [Knf] build_knf: LetRec({tyvars: ["X", "Y", "Z"], name: ("s", Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X")))), args: [("x", Fun([Named("Z")], Fun([Named("Y")], Named("X"))))], body: LetRec({tyvars: [], name: ("f", Fun([Named("Z")], Named("X"))), args: [("y", Fun([Named("Z")], Named("Y")))], body: LetRec({tyvars: [], name: ("g", Named("X")), args: [("z", Named("Z"))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f"))}, LetRec({tyvars: ["X", "Y"], name: ("k", Fun([Named("Y")], Named("X"))), args: [("x", Named("X"))], body: LetRec({tyvars: [], name: ("f", Named("X")), args: [("y", Named("Y"))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", Named("X")), args: [("x", Named("X"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("rev_apply", Fun([Int], Fun([Fun([Int], Unit)], Unit))), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Unit), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, App(Var("main"), [])))))
// [Knf] build_knf: LetRec({tyvars: [], name: ("f", Fun([Named("Z")], Named("X"))), args: [("y", Fun([Named("Z")], Named("Y")))], body: LetRec({tyvars: [], name: ("g", Named("X")), args: [("z", Named("Z"))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f"))
// [Knf] build_knf: LetRec({tyvars: [], name: ("g", Named("X")), args: [("z", Named("Z"))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))
// [Knf] build_knf: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])
// [Knf] build_knf: App(Var("x"), [Var("z")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: App(Var("y"), [Var("z")])
// [Knf] build_knf: Var("y")
// [Knf] build_knf: Var("z")
// [Knf] build_knf: Var("g")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({tyvars: ["X", "Y"], name: ("k", Fun([Named("Y")], Named("X"))), args: [("x", Named("X"))], body: LetRec({tyvars: [], name: ("f", Named("X")), args: [("y", Named("Y"))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", Named("X")), args: [("x", Named("X"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("rev_apply", Fun([Int], Fun([Fun([Int], Unit)], Unit))), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Unit), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, App(Var("main"), []))))
// [Knf] build_knf: LetRec({tyvars: [], name: ("f", Named("X")), args: [("y", Named("Y"))], body: Var("x")}, Var("f"))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Var("f")
// [Knf] build_knf: LetRec({tyvars: ["X"], name: ("i", Named("X")), args: [("x", Named("X"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("rev_apply", Fun([Int], Fun([Fun([Int], Unit)], Unit))), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Unit), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, App(Var("main"), [])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: LetRec({tyvars: [], name: ("main", Unit), args: [], body: Let(("rev_apply", Fun([Int], Fun([Fun([Int], Unit)], Unit))), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Unit), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, App(Var("main"), []))
// [Knf] build_knf: Let(("rev_apply", Fun([Int], Fun([Fun([Int], Unit)], Unit))), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Unit), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))
// [Knf] build_knf: App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")])
// [Knf] build_knf: App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])])
// [Knf] build_knf: Var("s")
// [Knf] build_knf: App(Var("k"), [App(Var("s"), [Var("i")])])
// [Knf] build_knf: Var("k")
// [Knf] build_knf: App(Var("s"), [Var("i")])
// [Knf] build_knf: Var("s")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("k")
// [Knf] build_knf: LetRec({tyvars: [], name: ("printi", Unit), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")]))
// [Knf] build_knf: App(Var("print_int"), [Var("x")])
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])
// [Knf] build_knf: App(Var("rev_apply"), [Int(2)])
// [Knf] build_knf: Var("rev_apply")
// [Knf] build_knf: Int(2)
// [Knf] build_knf: Var("printi")
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Main] function thunk_main(k) {
// [Main]   function s_1(x_3, k) {
// [Main]     function f_4(y_6, k) {
// [Main]       function g_7(z_9, k) {
// [Main]         return $thunk(() => x_3(z_9, function (_10) {
// [Main]           return $thunk(() => y_6(z_9, function (_11) {
// [Main]             return $thunk(() => _10(_11, k))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       return k(g_7)
// [Main]     }
// [Main]     return k(f_4)
// [Main]   }
// [Main]   function k_12(x_14, k) {
// [Main]     function f_15(y_17, k) {
// [Main]       return k(x_14)
// [Main]     }
// [Main]     return k(f_15)
// [Main]   }
// [Main]   function i_18(x_20, k) {
// [Main]     return k(x_20)
// [Main]   }
// [Main]   function main_21(k) {
// [Main]     return $thunk(() => s_1(i_18, function (_22) {
// [Main]       return $thunk(() => k_12(_22, function (_23) {
// [Main]         return $thunk(() => s_1(_23, function (_24) {
// [Main]           return $thunk(() => _24(k_12, function (rev_apply_25) {
// [Main]             function printi_26(x_28, k) {
// [Main]               return k(minimbt_print_int($force(x_28)))
// [Main]             }
// [Main]             const _29 = 2;
// [Main]             return $thunk(() => rev_apply_25(_29, function (_30) {
// [Main]               return $thunk(() => _30(printi_26, k))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_21(k))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] check: LetRec({tyvars: ["X", "Y", "Z"], name: ("s", Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X")))), args: [("x", Fun([Named("Z")], Fun([Named("Y")], Named("X"))))], body: LetRec({tyvars: [], name: ("f", Var({val: None})), args: [("y", Fun([Named("Z")], Named("Y")))], body: LetRec({tyvars: [], name: ("g", Var({val: None})), args: [("z", Named("Z"))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f"))}, LetRec({tyvars: ["X", "Y"], name: ("k", Fun([Named("Y")], Named("X"))), args: [("x", Named("X"))], body: LetRec({tyvars: [], name: ("f", Named("X")), args: [("y", Named("Y"))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", Named("X")), args: [("x", Named("X"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("rev_apply", Var({val: None})), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var({val: None})), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit)))) against Unit
// [Typer] typevars: ["X", "Y", "Z"]
// [Typer] check: LetRec({tyvars: [], name: ("f", Var({val: None})), args: [("y", Fun([Named("Z")], Named("Y")))], body: LetRec({tyvars: [], name: ("g", Var({val: None})), args: [("z", Named("Z"))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f")) against Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X")))
// [Typer] typevars: []
// [Typer] infer: LetRec({tyvars: [], name: ("g", Var({val: None})), args: [("z", Named("Z"))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))
// [Typer] typevars: []
// [Typer] infer: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])
// [Typer] infer: App(Var("x"), [Var("z")])
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Fun([Named("Z")], Fun([Named("Y")], Named("X")))))
// [Typer] inst result: Fun([Named("Z")], Fun([Named("Y")], Named("X")))
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Named("Z")))
// [Typer] inst result: Named("Z")
// [Typer] unify: Named("Z") and Named("Z")
// [Typer] infer: App(Var("y"), [Var("z")])
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Fun([Named("Z")], Named("Y"))))
// [Typer] inst result: Fun([Named("Z")], Named("Y"))
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Named("Z")))
// [Typer] inst result: Named("Z")
// [Typer] unify: Named("Z") and Named("Z")
// [Typer] unify: Named("Y") and Named("Y")
// [Typer] unify: Named("X") and Var({val: None})
// [Typer] union: Named("X") and Var({val: None})
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], Fun([Named("Z")], Var({val: Some(Named("X"))}))))
// [Typer] inst result: Fun([Named("Z")], Named("X"))
// [Typer] unify: Fun([Named("Z")], Named("X")) and Var({val: None})
// [Typer] union: Fun([Named("Z")], Named("X")) and Var({val: None})
// [Typer] check: Var("f") against Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X")))
// [Typer] inst: TypeScheme(([], Fun([Fun([Named("Z")], Named("Y"))], Var({val: Some(Fun([Named("Z")], Named("X")))}))))
// [Typer] inst result: Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X")))
// [Typer] unify: Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X"))) and Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X")))
// [Typer] unify: Fun([Named("Z")], Named("Y")) and Fun([Named("Z")], Named("Y"))
// [Typer] unify: Named("Z") and Named("Z")
// [Typer] unify: Named("Y") and Named("Y")
// [Typer] unify: Fun([Named("Z")], Named("X")) and Fun([Named("Z")], Named("X"))
// [Typer] unify: Named("Z") and Named("Z")
// [Typer] unify: Named("X") and Named("X")
// [Typer] check: LetRec({tyvars: ["X", "Y"], name: ("k", Fun([Named("Y")], Named("X"))), args: [("x", Named("X"))], body: LetRec({tyvars: [], name: ("f", Named("X")), args: [("y", Named("Y"))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", Named("X")), args: [("x", Named("X"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("rev_apply", Var({val: None})), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var({val: None})), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit))) against Unit
// [Typer] typevars: ["X", "Y"]
// [Typer] check: LetRec({tyvars: [], name: ("f", Named("X")), args: [("y", Named("Y"))], body: Var("x")}, Var("f")) against Fun([Named("Y")], Named("X"))
// [Typer] typevars: []
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Named("X")))
// [Typer] inst result: Named("X")
// [Typer] unify: Named("X") and Named("X")
// [Typer] check: Var("f") against Fun([Named("Y")], Named("X"))
// [Typer] inst: TypeScheme(([], Fun([Named("Y")], Named("X"))))
// [Typer] inst result: Fun([Named("Y")], Named("X"))
// [Typer] unify: Fun([Named("Y")], Named("X")) and Fun([Named("Y")], Named("X"))
// [Typer] unify: Named("Y") and Named("Y")
// [Typer] unify: Named("X") and Named("X")
// [Typer] check: LetRec({tyvars: ["X"], name: ("i", Named("X")), args: [("x", Named("X"))], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("rev_apply", Var({val: None})), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var({val: None})), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit)) against Unit
// [Typer] typevars: ["X"]
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], Named("X")))
// [Typer] inst result: Named("X")
// [Typer] unify: Named("X") and Named("X")
// [Typer] check: LetRec({tyvars: [], name: ("main", Var({val: None})), args: [], body: Let(("rev_apply", Var({val: None})), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var({val: None})), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("rev_apply", Var({val: None})), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var({val: None})), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))
// [Typer] infer: App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")])
// [Typer] infer: App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])])
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme((["X", "Y", "Z"], Fun([Fun([Named("Z")], Fun([Named("Y")], Named("X")))], Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X"))))))
// [Typer] inst result: Fun([Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))], Fun([Fun([Var({val: None})], Var({val: None}))], Fun([Var({val: None})], Var({val: None}))))
// [Typer] check: App(Var("k"), [App(Var("s"), [Var("i")])]) against Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))
// [Typer] infer: App(Var("s"), [Var("i")])
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme((["X", "Y", "Z"], Fun([Fun([Named("Z")], Fun([Named("Y")], Named("X")))], Fun([Fun([Named("Z")], Named("Y"))], Fun([Named("Z")], Named("X"))))))
// [Typer] inst result: Fun([Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))], Fun([Fun([Var({val: None})], Var({val: None}))], Fun([Var({val: None})], Var({val: None}))))
// [Typer] check: Var("i") against Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))
// [Typer] inst: TypeScheme((["X"], Fun([Named("X")], Named("X"))))
// [Typer] inst result: Fun([Var({val: None})], Var({val: None}))
// [Typer] unify: Fun([Var({val: None})], Var({val: None})) and Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))
// [Typer] unify: Var({val: None}) and Var({val: None})
// [Typer] union: Var({val: None}) and Var({val: None})
// [Typer] unify: Var({val: Some(Var({val: None}))}) and Fun([Var({val: None})], Var({val: None}))
// [Typer] union: Var({val: None}) and Fun([Var({val: None})], Var({val: None}))
// [Typer] check: Var("k") against Fun([Fun([Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))], Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None}))))
// [Typer] inst: TypeScheme((["X", "Y"], Fun([Named("X")], Fun([Named("Y")], Named("X")))))
// [Typer] inst result: Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))
// [Typer] unify: Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None}))) and Fun([Fun([Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))], Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None}))))
// [Typer] unify: Var({val: None}) and Fun([Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] union: Var({val: None}) and Fun([Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] unify: Fun([Var({val: None})], Var({val: Some(Fun([Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))))})) and Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))
// [Typer] unify: Var({val: None}) and Var({val: None})
// [Typer] union: Var({val: None}) and Var({val: None})
// [Typer] unify: Fun([Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))) and Fun([Var({val: None})], Var({val: None}))
// [Typer] unify: Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})) and Var({val: None})
// [Typer] union: Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})) and Var({val: None})
// [Typer] unify: Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})) and Var({val: None})
// [Typer] union: Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})) and Var({val: None})
// [Typer] check: Var("k") against Fun([Var({val: None})], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] inst: TypeScheme((["X", "Y"], Fun([Named("X")], Fun([Named("Y")], Named("X")))))
// [Typer] inst result: Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None})))
// [Typer] unify: Fun([Var({val: None})], Fun([Var({val: None})], Var({val: None}))) and Fun([Var({val: None})], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] unify: Var({val: None}) and Var({val: None})
// [Typer] union: Var({val: None}) and Var({val: None})
// [Typer] unify: Fun([Var({val: None})], Var({val: Some(Var({val: None}))})) and Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))
// [Typer] unify: Var({val: None}) and Fun([Var({val: None})], Var({val: None}))
// [Typer] union: Var({val: None}) and Fun([Var({val: None})], Var({val: None}))
// [Typer] unify: Var({val: None}) and Var({val: None})
// [Typer] union: Var({val: None}) and Var({val: None})
// [Typer] unify: Var({val: None}) and Fun([Var({val: None})], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] union: Var({val: None}) and Fun([Var({val: None})], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] infer: LetRec({tyvars: [], name: ("printi", Var({val: None})), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")]))
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [Var("x")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], Fun([Int], Unit)))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] infer: App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])
// [Typer] infer: App(Var("rev_apply"), [Int(2)])
// [Typer] infer: Var("rev_apply")
// [Typer] inst: TypeScheme(([], Var({val: Some(Fun([Var({val: None})], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None}))))})))
// [Typer] inst result: Fun([Var({val: None})], Fun([Fun([Var({val: None})], Var({val: None}))], Var({val: None})))
// [Typer] infer: Int(2)
// [Typer] unify: Var({val: None}) and Int
// [Typer] union: Var({val: None}) and Int
// [Typer] check: Var("printi") against Fun([Int], Var({val: None}))
// [Typer] inst: TypeScheme(([], Fun([Int], Var({val: Some(Unit)}))))
// [Typer] inst result: Fun([Int], Unit)
// [Typer] unify: Fun([Int], Unit) and Fun([Int], Var({val: None}))
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] unify: Unit and Var({val: None})
// [Typer] union: Unit and Var({val: None})
// [Typer] check: Unit against Unit
// [Parser] flags: []
