// [Main] function thunk_main(k) {
// [Main]   function s_1(x_3, k) {
// [Main]     function f_4(y_6, k) {
// [Main]       function g_7(z_9, k) {
// [Main]         return $thunk(() => x_3(z_9, function (_10) {
// [Main]           return $thunk(() => y_6(z_9, function (_11) {
// [Main]             return $thunk(() => _10(_11, function (x) {
// [Main]               return $thunk(() => k(x))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       return $thunk(() => k(g_7))
// [Main]     }
// [Main]     return $thunk(() => k(f_4))
// [Main]   }
// [Main]   function k_12(x_14, k) {
// [Main]     function f_15(y_17, k) {
// [Main]       return $thunk(() => k(x_14))
// [Main]     }
// [Main]     return $thunk(() => k(f_15))
// [Main]   }
// [Main]   function i_18(x_20, k) {
// [Main]     return $thunk(() => k(x_20))
// [Main]   }
// [Main]   function main_21(k) {
// [Main]     return $thunk(() => s_1(i_18, function (_22) {
// [Main]       return $thunk(() => k_12(_22, function (_23) {
// [Main]         return $thunk(() => s_1(_23, function (_24) {
// [Main]           return $thunk(() => _24(k_12, function (rev_apply_25) {
// [Main]             function printi_26(x_28, k) {
// [Main]               return $thunk(() => $external(minimbt_print_int, function (x) {
// [Main]                 return $thunk(() => k(x))
// [Main]               }
// [Main]               , x_28))
// [Main]             }
// [Main]             const _29 = 2;
// [Main]             return $thunk(() => rev_apply_25(_29, function (_30) {
// [Main]               return $thunk(() => _30(printi_26, function (x) {
// [Main]                 return $thunk(() => k(x))
// [Main]               }
// [Main]               ))
// [Main]             }
// [Main]             ))
// [Main]           }
// [Main]           ))
// [Main]         }
// [Main]         ))
// [Main]       }
// [Main]       ))
// [Main]     }
// [Main]     ))
// [Main]   }
// [Main]   return $thunk(() => main_21(function (x) {
// [Main]     return $thunk(() => k(x))
// [Main]   }
// [Main]   ))
// [Main] }
// [Main] 
// [Main] function $thunk(lambda) {
// [Main]   return { thunk: lambda };
// [Main] }
// [Main] function $is_thunk(x) {
// [Main]   return x && x.hasOwnProperty('thunk') && x.thunk !== undefined;
// [Main] }
// [Main] function $force(x) {
// [Main]   while ($is_thunk(x)) {
// [Main]     x = x.thunk();
// [Main]   }
// [Main]   return x;
// [Main] }
// [Main] function $external(f, k, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $thunk(() => k(x));
// [Main] }
// [Main] function $trampoline(f, ...args) {
// [Main]   let x = f(...args);
// [Main]   return $force(x);
// [Main] }
// [Main] export default () => $trampoline(thunk_main, x => x);
// [Typer] resolve: LetRec({tyvars: ["X", "Y", "Z"], name: ("s", ((Z) -> Y) -> (Z) -> X), args: [("x", (Z) -> (Y) -> X)], body: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: LetRec({tyvars: [], name: ("g", Var(None)), args: [("z", Var(None))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f"))}, LetRec({tyvars: ["X", "Y"], name: ("k", (Y) -> X), args: [("x", X)], body: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", X), args: [("x", X)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit))))
// [Typer] resolve: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: LetRec({tyvars: [], name: ("g", Var(None)), args: [("z", Var(None))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f"))
// [Typer] resolve: LetRec({tyvars: [], name: ("g", Var(None)), args: [("z", Var(None))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))
// [Typer] resolve: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])
// [Typer] resolve: App(Var("y"), [Var("z")])
// [Typer] resolve: Var("z")
// [Typer] resolve: Var("y")
// [Typer] resolve: App(Var("x"), [Var("z")])
// [Typer] resolve: Var("z")
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("g")
// [Typer] resolve: Var("f")
// [Typer] resolve: LetRec({tyvars: ["X", "Y"], name: ("k", (Y) -> X), args: [("x", X)], body: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", X), args: [("x", X)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit)))
// [Typer] resolve: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: Var("x")}, Var("f"))
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("f")
// [Typer] resolve: LetRec({tyvars: ["X"], name: ("i", X), args: [("x", X)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit))
// [Typer] resolve: Var("x")
// [Typer] resolve: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit)
// [Typer] resolve: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))
// [Typer] resolve: App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")])
// [Typer] resolve: Var("k")
// [Typer] resolve: App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])])
// [Typer] resolve: App(Var("k"), [App(Var("s"), [Var("i")])])
// [Typer] resolve: App(Var("s"), [Var("i")])
// [Typer] resolve: Var("i")
// [Typer] resolve: Var("s")
// [Typer] resolve: Var("k")
// [Typer] resolve: Var("s")
// [Typer] resolve: LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")]))
// [Typer] resolve: App(Var("print_int"), [Var("x")])
// [Typer] resolve: Var("x")
// [Typer] resolve: Var("print_int")
// [Typer] resolve: App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])
// [Typer] resolve: Var("printi")
// [Typer] resolve: App(Var("rev_apply"), [Int(2)])
// [Typer] resolve: Int(2)
// [Typer] resolve: Var("rev_apply")
// [Typer] resolve: Unit
// [Typer] check: LetRec({tyvars: ["X", "Y", "Z"], name: ("s", ((Z) -> Y) -> (Z) -> X), args: [("x", (Z) -> (Y) -> X)], body: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: LetRec({tyvars: [], name: ("g", Var(None)), args: [("z", Var(None))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f"))}, LetRec({tyvars: ["X", "Y"], name: ("k", (Y) -> X), args: [("x", X)], body: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", X), args: [("x", X)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit)))) against Unit
// [Typer] typevars: ["X", "Y", "Z"]
// [Typer] check: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: LetRec({tyvars: [], name: ("g", Var(None)), args: [("z", Var(None))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))}, Var("f")) against ((Z) -> Y) -> (Z) -> X
// [Typer] typevars: []
// [Typer] infer: LetRec({tyvars: [], name: ("g", Var(None)), args: [("z", Var(None))], body: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])}, Var("g"))
// [Typer] typevars: []
// [Typer] infer: App(App(Var("x"), [Var("z")]), [App(Var("y"), [Var("z")])])
// [Typer] infer: App(Var("x"), [Var("z")])
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], (Z) -> (Y) -> X))
// [Typer] inst result: (Z) -> (Y) -> X
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] unify: Z and Var(None)
// [Typer] union: Z and Var(None)
// [Typer] infer: App(Var("y"), [Var("z")])
// [Typer] infer: Var("y")
// [Typer] inst: TypeScheme(([], Var(None)))
// [Typer] inst result: Var(None)
// [Typer] infer: Var("z")
// [Typer] inst: TypeScheme(([], Z))
// [Typer] inst result: Z
// [Typer] unify: Var(None) and (Z) -> Var(None)
// [Typer] union: Var(None) and (Z) -> Var(None)
// [Typer] unify: Y and Var(None)
// [Typer] union: Y and Var(None)
// [Typer] unify: X and Var(None)
// [Typer] union: X and Var(None)
// [Typer] infer: Var("g")
// [Typer] inst: TypeScheme(([], (Z) -> X))
// [Typer] inst result: (Z) -> X
// [Typer] unify: (Z) -> X and Var(None)
// [Typer] union: (Z) -> X and Var(None)
// [Typer] check: Var("f") against ((Z) -> Y) -> (Z) -> X
// [Typer] inst: TypeScheme(([], ((Z) -> Y) -> (Z) -> X))
// [Typer] inst result: ((Z) -> Y) -> (Z) -> X
// [Typer] unify: ((Z) -> Y) -> (Z) -> X and ((Z) -> Y) -> (Z) -> X
// [Typer] unify: (Z) -> Y and (Z) -> Y
// [Typer] unify: Z and Z
// [Typer] unify: Y and Y
// [Typer] unify: (Z) -> X and (Z) -> X
// [Typer] unify: Z and Z
// [Typer] unify: X and X
// [Typer] check: LetRec({tyvars: ["X", "Y"], name: ("k", (Y) -> X), args: [("x", X)], body: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: Var("x")}, Var("f"))}, LetRec({tyvars: ["X"], name: ("i", X), args: [("x", X)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit))) against Unit
// [Typer] typevars: ["X", "Y"]
// [Typer] check: LetRec({tyvars: [], name: ("f", Var(None)), args: [("y", Var(None))], body: Var("x")}, Var("f")) against (Y) -> X
// [Typer] typevars: []
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], X))
// [Typer] inst result: X
// [Typer] unify: X and Var(None)
// [Typer] union: X and Var(None)
// [Typer] check: Var("f") against (Y) -> X
// [Typer] inst: TypeScheme(([], (Var(None)) -> X))
// [Typer] inst result: (Var(None)) -> X
// [Typer] unify: (Var(None)) -> X and (Y) -> X
// [Typer] unify: Var(None) and Y
// [Typer] union: Var(None) and Y
// [Typer] unify: X and X
// [Typer] check: LetRec({tyvars: ["X"], name: ("i", X), args: [("x", X)], body: Var("x")}, LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit)) against Unit
// [Typer] typevars: ["X"]
// [Typer] infer: Var("x")
// [Typer] inst: TypeScheme(([], X))
// [Typer] inst result: X
// [Typer] unify: X and X
// [Typer] check: LetRec({tyvars: [], name: ("main", Var(None)), args: [], body: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))}, Unit) against Unit
// [Typer] typevars: []
// [Typer] infer: Let(("rev_apply", Var(None)), App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")]), LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])))
// [Typer] infer: App(App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])]), [Var("k")])
// [Typer] infer: App(Var("s"), [App(Var("k"), [App(Var("s"), [Var("i")])])])
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme((["X", "Y", "Z"], ((Z) -> (Y) -> X) -> ((Z) -> Y) -> (Z) -> X))
// [Typer] inst result: ((Var(None)) -> (Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> (Var(None)) -> Var(None)
// [Typer] check: App(Var("k"), [App(Var("s"), [Var("i")])]) against (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] infer: App(Var("s"), [Var("i")])
// [Typer] infer: Var("s")
// [Typer] inst: TypeScheme((["X", "Y", "Z"], ((Z) -> (Y) -> X) -> ((Z) -> Y) -> (Z) -> X))
// [Typer] inst result: ((Var(None)) -> (Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> (Var(None)) -> Var(None)
// [Typer] check: Var("i") against (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] inst: TypeScheme((["X"], (X) -> X))
// [Typer] inst result: (Var(None)) -> Var(None)
// [Typer] unify: (Var(None)) -> Var(None) and (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] unify: Var(None) and (Var(None)) -> Var(None)
// [Typer] union: Var(None) and (Var(None)) -> Var(None)
// [Typer] check: Var("k") against ((((Var(None)) -> Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)) -> (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] inst: TypeScheme((["X", "Y"], (X) -> (Y) -> X))
// [Typer] inst result: (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] unify: (Var(None)) -> (Var(None)) -> Var(None) and ((((Var(None)) -> Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)) -> (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] unify: Var(None) and (((Var(None)) -> Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] union: Var(None) and (((Var(None)) -> Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] unify: (Var(None)) -> (((Var(None)) -> Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None) and (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] unify: (((Var(None)) -> Var(None)) -> Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None) and (Var(None)) -> Var(None)
// [Typer] unify: ((Var(None)) -> Var(None)) -> Var(None) and Var(None)
// [Typer] union: ((Var(None)) -> Var(None)) -> Var(None) and Var(None)
// [Typer] unify: ((Var(None)) -> Var(None)) -> Var(None) and Var(None)
// [Typer] union: ((Var(None)) -> Var(None)) -> Var(None) and Var(None)
// [Typer] check: Var("k") against (Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] inst: TypeScheme((["X", "Y"], (X) -> (Y) -> X))
// [Typer] inst result: (Var(None)) -> (Var(None)) -> Var(None)
// [Typer] unify: (Var(None)) -> (Var(None)) -> Var(None) and (Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] unify: (Var(None)) -> Var(None) and ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] unify: Var(None) and (Var(None)) -> Var(None)
// [Typer] union: Var(None) and (Var(None)) -> Var(None)
// [Typer] unify: Var(None) and Var(None)
// [Typer] union: Var(None) and Var(None)
// [Typer] unify: Var(None) and (Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] union: Var(None) and (Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] infer: LetRec({tyvars: [], name: ("printi", Var(None)), args: [("x", Int)], body: App(Var("print_int"), [Var("x")])}, App(App(Var("rev_apply"), [Int(2)]), [Var("printi")]))
// [Typer] typevars: []
// [Typer] infer: App(Var("print_int"), [Var("x")])
// [Typer] infer: Var("print_int")
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] check: Var("x") against Int
// [Typer] inst: TypeScheme(([], Int))
// [Typer] inst result: Int
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] infer: App(App(Var("rev_apply"), [Int(2)]), [Var("printi")])
// [Typer] infer: App(Var("rev_apply"), [Int(2)])
// [Typer] infer: Var("rev_apply")
// [Typer] inst: TypeScheme(([], (Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)))
// [Typer] inst result: (Var(None)) -> ((Var(None)) -> Var(None)) -> Var(None)
// [Typer] infer: Int(2)
// [Typer] unify: Var(None) and Int
// [Typer] union: Var(None) and Int
// [Typer] check: Var("printi") against (Int) -> Var(None)
// [Typer] inst: TypeScheme(([], (Int) -> Unit))
// [Typer] inst result: (Int) -> Unit
// [Typer] unify: (Int) -> Unit and (Int) -> Var(None)
// [Typer] unify: Int and Int
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] unify: Unit and Var(None)
// [Typer] union: Unit and Var(None)
// [Typer] check: Unit against Unit
// [Parser] flags: ["extension"]
