let rec ack.1l0: Int = (x.2: Int, y.3: Int) {
  let _4: Int = Int(0)
  if (x.2 <= _4) then {
    let _5: Int = Int(1)
    Add(y.3, _5)
  } else {
    let _6: Int = Int(0)
    if (y.3 <= _6) then {
      let _7: Int = Int(1)
      let _8: Int = Sub(x.2, _7)
      let _9: Int = Int(1)
      Apply(ack.1l0, [_8, _9, ])
    } else {
      let _10: Int = Int(1)
      let _11: Int = Sub(x.2, _10)
      let _12: Int = Int(1)
      let _13: Int = Sub(y.3, _12)
      let _14: Int = Apply(ack.1l0, [x.2, _13, ])
      Apply(ack.1l0, [_11, _14, ])
    }
  }
}
let rec main.15l1: Var({val: Some(Unit)}) = () {
  let _16: Int = Int(3)
  let _17: Int = Int(8)
  let _18: Int = Apply(ack.1l0, [_16, _17, ])
  ExtApply(minimbt_print_int, [_18, ])
}
Apply(main.15l1, [])