let rec f.1: Int = (u.2: Unit) {
  Int(123)
}
let rec g.3: Int = (u.4: Unit) {
  Int(456)
}
let rec h.5: Int = (u.6: Unit) {
  Int(789)
}
let rec main.7: Var({val: Some(Unit)}) = () {
  let _8: Unit = Unit
  let x.9: Int = Apply(f.1, [_8, ])
  let _10: Int = Int(0)
  if (x.9 <= _10) then {
    let _11: Unit = Unit
    let _13: Int = Apply(g.3, [_11, ])
    let _14: Int = Add(_13, x.9)
    ExtApply(minimbt_print_int, [_14, ])
  } else {
    let _12: Unit = Unit
    let _13: Int = Apply(h.5, [_12, ])
    let _14: Int = Add(_13, x.9)
    ExtApply(minimbt_print_int, [_14, ])
  }
}
Apply(main.7, [])let rec f.1: Int = (u.2: Unit) {
  Int(123)
}
let rec g.3: Int = (u.4: Unit) {
  Int(456)
}
let rec h.5: Int = (u.6: Unit) {
  Int(789)
}
let rec main.7: Var({val: Some(Unit)}) = () {
  let _8: Unit = Unit
  let x.9: Int = Apply(f.1, [_8, ])
  let _10: Int = Int(0)
  if (x.9 <= _10) then {
    let _11: Unit = Unit
    let _13: Int = Apply(g.3, [_11, ])
    let _14: Int = Add(_13, x.9)
    ExtApply(minimbt_print_int, [_14, ])
  } else {
    let _12: Unit = Unit
    let _13: Int = Apply(h.5, [_12, ])
    let _14: Int = Add(_13, x.9)
    ExtApply(minimbt_print_int, [_14, ])
  }
}
Apply(main.7, [])