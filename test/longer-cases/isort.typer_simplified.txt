let rec random: (state: Int) -> Int {
  Prim(Var("state"), Int(75), Mul, kind=Some(Int)) + Int(74)
}
let rec modulo: (x: Int, y: Int) -> Int {
  let q: Int = Var("x") / Var("y")
  Var("x") - Prim(Var("q"), Var("y"), Mul, kind=Some(Int))
}
let rec fill_buffer: (arr: Array[Int], n: Int) -> Unit {
  let rec aux: (i: Int, state: Int) -> Unit {
    if (Eq(Var("i"), Var("n"))) then {
      Unit
    } else {
      let new_state: Int = Apply[](Var("random"), [Var("state"), ])
      let res: Int = Apply[](Var("modulo"), [Var("new_state"), Int(65537), ])
      let _: Unit = Put Var("arr")[Var("i")] = Var("res")
      Apply[](Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), Var("res"), ])
    }
  }
  Apply[](Var("aux"), [Int(0), Int(12345), ])
}
let rec isort: (arr: Array[Int], n: Int) -> Unit {
  let rec insert: (arr: Array[Int], i: Int) -> Unit {
    if (Eq(Var("i"), Int(0))) then {
      Unit
    } else {
      if (LE(Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int))), Get(Var("arr"), Var("i")))) then {
        Unit
      } else {
        let tmp: Int = Get Var("arr")[Var("i")]
        let _: Unit = Put Var("arr")[Var("i")] = Get(Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)))
        let _: Unit = Put Var("arr")[Prim(Var("i"), Int(1), Sub, kind=Some(Int))] = Var("tmp")
        Apply[](Var("insert"), [Var("arr"), Prim(Var("i"), Int(1), Sub, kind=Some(Int)), ])
      }
    }
  }
  let rec aux: (i: Int) -> Unit {
    if (Eq(Var("i"), Var("n"))) then {
      Unit
    } else {
      let _: Unit = Apply[](Var("insert"), [Var("arr"), Var("i"), ])
      Apply[](Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
    }
  }
  Apply[](Var("aux"), [Int(1), ])
}
let rec print_array: (arr: Array[Int], n: Int) -> Unit {
  let rec aux: (i: Int) -> Unit {
    if (Eq(Var("i"), Var("n"))) then {
      Unit
    } else {
      let _: Unit = Apply[](Var("print_int"), [Get(Var("arr"), Var("i")), ])
      let _: Unit = Apply[](Var("print_char"), [Int(32), ])
      Apply[](Var("aux"), [Prim(Var("i"), Int(1), Add, kind=Some(Int)), ])
    }
  }
  Apply[](Var("aux"), [Int(0), ])
}
let rec main: () -> Unit {
  let n: Int = Int(100)
  let arr: Array[Int] = Array::make(Var("n"), Int(0))
  let _: Unit = Apply[](Var("fill_buffer"), [Var("arr"), Var("n"), ])
  let _: Unit = Apply[](Var("isort"), [Var("arr"), Var("n"), ])
  Apply[](Var("print_array"), [Var("arr"), Var("n"), ])
}
Unit
