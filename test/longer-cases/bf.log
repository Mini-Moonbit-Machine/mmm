// [Asm] pre_assigned_registers: Insn(iref=%1) -> v4, Mem(fref=f4, mref=m0) -> v2, Self(fref=f4) -> v0, Insn(iref=%0) -> v3
// [Asm] defs: []
// [Asm] live_set: [s11, zero]
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6, s11, zero]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [v2]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v2 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v8, zero, v2]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [a1]
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: [v8]
// [Asm] defined: a1 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [zero, a0, v2]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [a1, zero, a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a1 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v4]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v4 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of main.434"];
// [Asm]   r0 [label="v6 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a2", color=green];
// [Asm]   r9 [label="a4", color=blue];
// [Asm]   r6 [label="a0", color=blue];
// [Asm]   r13 [label="t0", color=blue];
// [Asm]   r4 [label="v8 ← a0", color=green];
// [Asm]   r1 [label="s11", color=blue];
// [Asm]   r11 [label="a6", color=blue];
// [Asm]   r7 [label="a2", color=blue];
// [Asm]   r10 [label="a5", color=blue];
// [Asm]   r14 [label="t1", color=blue];
// [Asm]   r8 [label="a3", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t2", color=blue];
// [Asm]   r2 [label="zero", color=blue];
// [Asm]   r16 [label="t3", color=blue];
// [Asm]   r18 [label="v4 ← a0", color=green];
// [Asm]   r17 [label="t4", color=blue];
// [Asm]   r12 [label="a7", color=blue];
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r6 -- r11;
// [Asm]   r3 -- r4;
// [Asm]   r6 -- r15;
// [Asm]   r2 -- r14;
// [Asm]   r2 -- r15;
// [Asm]   r0 -- r2;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r3 -- r6;
// [Asm]   r6 -- r14;
// [Asm]   r6 -- r10;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r1 -- r2;
// [Asm]   r2 -- r10;
// [Asm]   r2 -- r5;
// [Asm]   r6 -- r17;
// [Asm]   r0 -- r1;
// [Asm]   r2 -- r13;
// [Asm]   r2 -- r17;
// [Asm]   r6 -- r16;
// [Asm]   r2 -- r16;
// [Asm]   r2 -- r7;
// [Asm]   r2 -- r11;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r3;
// [Asm]   r6 -- r12;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r13;
// [Asm]   comment = "0:v6-> 1:s11-> 2:zero-> 3:v2-> 4:v8-> 5:a1-> 6:a0-> 7:a2-> 8:a3-> 9:a4-> 10:a5-> 11:a6-> 12:a7-> 13:t0-> 14:t1-> 15:t2-> 16:t3-> 17:t4-> 18:v4"
// [Asm]   comment = "v6<-a0;v2<-a2;v8<-a0;v4<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of main.434"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v6, 4096 ->   li a0, 4096
// [Asm] subst   sub v2, s11, v6 ->   sub a2, s11, a0
// [Asm] subst   andi s11, v2, -8 ->   andi s11, a2, -8
// [Asm] subst   li v8, 1024 ->   li a0, 1024
// [Asm] subst   mv a1, v8 ->   mv a1, a0
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v2 ->   mv a1, a2
// [Asm] subst   call read_prog.435 ->   call read_prog.435
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Self(fref=f10) -> v0, Insn(iref=%0) -> v2
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v2]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of T$start"];
// [Asm]   r0 [label="a0", color=blue];
// [Asm]   r5 [label="a5", color=blue];
// [Asm]   r3 [label="a3", color=blue];
// [Asm]   r2 [label="a2", color=blue];
// [Asm]   r9 [label="t1", color=blue];
// [Asm]   r6 [label="a6", color=blue];
// [Asm]   r13 [label="v2 ← a0", color=green];
// [Asm]   r4 [label="a4", color=blue];
// [Asm]   r1 [label="a1", color=blue];
// [Asm]   r11 [label="t3", color=blue];
// [Asm]   r7 [label="a7", color=blue];
// [Asm]   r10 [label="t2", color=blue];
// [Asm]   r12 [label="t4", color=blue];
// [Asm]   r8 [label="t0", color=blue];
// [Asm]   r0 -- r3;
// [Asm]   r0 -- r4;
// [Asm]   r0 -- r8;
// [Asm]   r0 -- r9;
// [Asm]   r0 -- r1;
// [Asm]   r0 -- r7;
// [Asm]   r0 -- r10;
// [Asm]   r0 -- r12;
// [Asm]   r0 -- r11;
// [Asm]   r0 -- r5;
// [Asm]   r0 -- r6;
// [Asm]   r0 -- r2;
// [Asm]   comment = "0:a0-> 1:a1-> 2:a2-> 3:a3-> 4:a4-> 5:a5-> 6:a6-> 7:a7-> 8:t0-> 9:t1-> 10:t2-> 11:t3-> 12:t4-> 13:v2"
// [Asm]   comment = "v2<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of T$start"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   call main.434 ->   call main.434
// [Asm] subst   ret ->   ret
// [Asm] pre_assigned_registers: Insn(iref=%15) -> v69, Insn(iref=%41) -> v34, BlockParam(bref=b28, bpref=$b.0) -> v21, Insn(iref=%33) -> v56, Insn(iref=%8) -> v73, Insn(iref=%10) -> v75, Insn(iref=%27) -> v59, BlockParam(bref=b34, bpref=$b.0) -> v81, Insn(iref=%25) -> v67, Insn(iref=%39) -> v29, BlockParam(bref=b26, bpref=$b.0) -> v19, Insn(iref=%59) -> v41, BlockParam(bref=b35, bpref=$b.0) -> v51, Insn(iref=%4) -> v78, Insn(iref=%56) -> v42, Insn(iref=%49) -> v18, Insn(iref=%26) -> v15, Insn(iref=%31) -> v16, BlockParam(bref=b63, bpref=$b.0) -> v47, FnParam(fref=f2, fpref=$f.4) -> v6, Insn(iref=%38) -> v28, Insn(iref=%16) -> v70, Self(fref=f2) -> v0, Insn(iref=%53) -> v48, Insn(iref=%54) -> v49, Insn(iref=%5) -> v79, Insn(iref=%19) -> v14, BlockParam(bref=b62, bpref=$b.0) -> v46, Insn(iref=%13) -> v68, BlockParam(bref=b33, bpref=$b.0) -> v26, BlockParam(bref=b61, bpref=$b.0) -> v45, Insn(iref=%7) -> v12, BlockParam(bref=b27, bpref=$b.0) -> v20, Insn(iref=%55) -> v40, Insn(iref=%48) -> v33, Insn(iref=%23) -> v65, Insn(iref=%20) -> v63, Insn(iref=%34) -> v57, Insn(iref=%36) -> v17, FnParam(fref=f2, fpref=$f.3) -> v5, BlockParam(bref=b31, bpref=$b.0) -> v24, BlockParam(bref=b2, bpref=$b.0) -> v8, Insn(iref=%50) -> v37, Insn(iref=%51) -> v38, FnParam(fref=f2, fpref=$f.5) -> v7, Insn(iref=%52) -> v39, Insn(iref=%44) -> v53, Insn(iref=%32) -> v55, Insn(iref=%58) -> v44, FnParam(fref=f2, fpref=$f.1) -> v3, Insn(iref=%1) -> v10, Insn(iref=%11) -> v76, Insn(iref=%57) -> v43, Insn(iref=%6) -> v80, BlockParam(bref=b52, bpref=$b.1) -> v36, FnParam(fref=f2, fpref=$f.0) -> v2, Insn(iref=%35) -> v58, FnParam(fref=f2, fpref=$f.2) -> v4, BlockParam(bref=b32, bpref=$b.0) -> v25, BlockParam(bref=b29, bpref=$b.0) -> v22, Insn(iref=%46) -> v31, Insn(iref=%28) -> v60, Insn(iref=%24) -> v66, Insn(iref=%9) -> v74, Insn(iref=%37) -> v27, Insn(iref=%45) -> v54, Insn(iref=%29) -> v61, Insn(iref=%47) -> v32, Insn(iref=%0) -> v9, Insn(iref=%18) -> v72, Insn(iref=%3) -> v77, BlockParam(bref=b52, bpref=$b.0) -> v35, Insn(iref=%22) -> v64, Insn(iref=%17) -> v71, Insn(iref=%2) -> v11, Insn(iref=%43) -> v52, Insn(iref=%30) -> v62, BlockParam(bref=b30, bpref=$b.0) -> v23, Insn(iref=%40) -> v30, Insn(iref=%12) -> v13, BlockParam(bref=b64, bpref=$b.0) -> v50
// [Asm] skipping Op(ty=Bool, op=Eq, args=[BlockParam(bref=b52, bpref=$b.1), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%51), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%51), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b52, bpref=$b.0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%39), Int32(val=0)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Asm] skipping Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0)])
// [Asm] defs: [v23]
// [Asm] live_set: [v23]
// [Asm] move_origin: [v22]
// [Asm] defined: v23 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v28, v3]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: [v130]
// [Asm] live_set: [v5, v130, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v130 is X
// [Asm] defs: [v131]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v131, v3]
// [Asm] move_origin: []
// [Asm] defined: v131 is X
// [Asm] defs: [v29]
// [Asm] live_set: [v5, zero, v29, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v43]
// [Asm] live_set: [v5, zero, v7, v36, v4, v6, v43, v3]
// [Asm] move_origin: []
// [Asm] defined: v43 is X
// [Asm] defs: [v44]
// [Asm] live_set: [v5, zero, v7, v4, v6, v43, v44, v3]
// [Asm] move_origin: []
// [Asm] defined: v44 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v4, v6, v44, v3]
// [Asm] move_origin: [v43]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v44]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v20]
// [Asm] live_set: [v20]
// [Asm] move_origin: [v19]
// [Asm] defined: v20 is X
// [Asm] defs: []
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a5, zero, a4, a2, a1, a3, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, a5, zero, a4, a2, a3, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v4]
// [Asm] live_set: [v2, a5, zero, a4, v4, a3, v3]
// [Asm] move_origin: [a2]
// [Asm] defined: v4 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v2, v5, a5, zero, a4, v4, v3]
// [Asm] move_origin: [a3]
// [Asm] defined: v5 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v2, v5, a5, zero, v4, v6, v3]
// [Asm] move_origin: [a4]
// [Asm] defined: v6 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [a5]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v2]
// [Asm] defined: v8 is X
// [Asm] defs: [v48]
// [Asm] live_set: [v5, v48, zero, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v48 is X
// [Asm] defs: [v49]
// [Asm] live_set: [v5, v49, v48, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v49 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, v49, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: [v48]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v49]
// [Asm] defined: v36 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v55]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: v55 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v55, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v55, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v56]
// [Asm] live_set: [v5, v56, zero, v7, v8, v4, v6, v55, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v56 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v56, zero, v7, v8, v4, v6, v55, v3]
// [Asm] move_origin: []
// [Asm] defs: [v111]
// [Asm] live_set: [v5, v56, zero, v7, v8, v4, v6, v111, v3]
// [Asm] move_origin: []
// [Asm] defined: v111 is X
// [Asm] defs: [v112]
// [Asm] live_set: [v112, v5, v56, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v112 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v58]
// [Asm] live_set: [v5, v58, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v58 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v58]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v26]
// [Asm] live_set: [v26]
// [Asm] move_origin: [v25]
// [Asm] defined: v26 is X
// [Asm] defs: [v45]
// [Asm] live_set: [v5, zero, v45, v7, v4, v6, v3]
// [Asm] move_origin: [v35]
// [Asm] defined: v45 is X
// [Asm] defs: [v51]
// [Asm] live_set: [v51, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [v50]
// [Asm] defined: v51 is X
// [Asm] defs: [v50]
// [Asm] live_set: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] move_origin: [v35]
// [Asm] defined: v50 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v4, v6, v3]
// [Asm] move_origin: [v34]
// [Asm] defined: v35 is X
// [Asm] defs: [v36]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [zero]
// [Asm] defined: v36 is X
// [Asm] defs: [v68]
// [Asm] live_set: [v5, zero, v68, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v68 is X
// [Asm] defs: [v92]
// [Asm] live_set: [v5, zero, v68, v7, v8, v92, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v92 is X
// [Asm] defs: [v93]
// [Asm] live_set: [v93, v5, zero, v68, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v93 is X
// [Asm] defs: [v69]
// [Asm] live_set: [v5, v69, zero, v68, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v69 is X
// [Asm] defs: [v70]
// [Asm] live_set: [v5, zero, v68, v7, v8, v4, v70, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v70 is X
// [Asm] defs: [v89]
// [Asm] live_set: [v5, zero, v7, v8, v4, v70, v6, v89, v3]
// [Asm] move_origin: []
// [Asm] defined: v89 is X
// [Asm] defs: [v90]
// [Asm] live_set: [v5, zero, v7, v8, v4, v90, v70, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v90 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v72]
// [Asm] live_set: [v72, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v72 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v72]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v47]
// [Asm] live_set: [v5, zero, v7, v47, v4, v6, v3]
// [Asm] move_origin: [v46]
// [Asm] defined: v47 is X
// [Asm] defs: [v22]
// [Asm] live_set: [v22]
// [Asm] move_origin: [v21]
// [Asm] defined: v22 is X
// [Asm] defs: [v134]
// [Asm] live_set: [v134, v10, v8]
// [Asm] move_origin: []
// [Asm] defined: v134 is X
// [Asm] defs: []
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defs: [v25]
// [Asm] live_set: [v25]
// [Asm] move_origin: [v24]
// [Asm] defined: v25 is X
// [Asm] defs: [v24]
// [Asm] live_set: [v24]
// [Asm] move_origin: [v23]
// [Asm] defined: v24 is X
// [Asm] defs: [v73]
// [Asm] live_set: [v73, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v73 is X
// [Asm] defs: [v74]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v74, v3]
// [Asm] move_origin: []
// [Asm] defined: v74 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v76]
// [Asm] live_set: [v76, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v76 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v76]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v81]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [v81]
// [Asm] move_origin: [v8]
// [Asm] defined: v81 is X
// [Asm] defs: []
// [Asm] live_set: [v81]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v138]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v138, v3]
// [Asm] move_origin: []
// [Asm] defined: v138 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v53]
// [Asm] live_set: [v5, v53, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v53 is X
// [Asm] defs: [v54]
// [Asm] live_set: [v5, zero, v7, v4, v6, v54, v3]
// [Asm] move_origin: []
// [Asm] defined: v54 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v54]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v21]
// [Asm] live_set: [v21]
// [Asm] move_origin: [v20]
// [Asm] defined: v21 is X
// [Asm] defs: [v63]
// [Asm] live_set: [v63, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v63 is X
// [Asm] defs: [v100]
// [Asm] live_set: [v63, v5, zero, v7, v8, v4, v6, v100, v3]
// [Asm] move_origin: []
// [Asm] defined: v100 is X
// [Asm] defs: [v101]
// [Asm] live_set: [v101, v63, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v101 is X
// [Asm] defs: [v64]
// [Asm] live_set: [v63, v5, zero, v7, v8, v4, v6, v64, v3]
// [Asm] move_origin: []
// [Asm] defined: v64 is X
// [Asm] defs: [v65]
// [Asm] live_set: [v63, v5, zero, v7, v8, v4, v65, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v65 is X
// [Asm] defs: [v97]
// [Asm] live_set: [v5, zero, v97, v7, v8, v4, v65, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v97 is X
// [Asm] defs: [v98]
// [Asm] live_set: [v98, v5, zero, v7, v8, v4, v65, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v98 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v67]
// [Asm] live_set: [v5, zero, v67, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v67 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v67]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v8]
// [Asm] defined: v19 is X
// [Asm] defs: []
// [Asm] live_set: [v19]
// [Asm] move_origin: []
// [Asm] defs: [v59]
// [Asm] live_set: [v5, zero, v7, v8, v4, v59, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v59 is X
// [Asm] defs: [v106]
// [Asm] live_set: [v106, v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v106 is X
// [Asm] defs: [v107]
// [Asm] live_set: [v5, zero, v7, v8, v107, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v107 is X
// [Asm] defs: [v60]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v60, v3]
// [Asm] move_origin: []
// [Asm] defined: v60 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v60, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v60]
// [Asm] defined: a0 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v61]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v61 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v62]
// [Asm] live_set: [v62, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v62 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v62]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v142]
// [Asm] live_set: [v5, v142, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v142 is X
// [Asm] defs: [v143]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v143, v3]
// [Asm] move_origin: []
// [Asm] defined: v143 is X
// [Asm] defs: [v10]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: [v141]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v141, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v141 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v81]
// [Asm] live_set: [v81]
// [Asm] move_origin: [v26]
// [Asm] defined: v81 is X
// [Asm] defs: [v34]
// [Asm] live_set: [v5, zero, v7, v4, v6, v34, v3]
// [Asm] move_origin: []
// [Asm] defined: v34 is X
// [Asm] defs: [v139]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v139, v3]
// [Asm] move_origin: []
// [Asm] defined: v139 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v31]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm] move_origin: []
// [Asm] defined: v31 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6, v3]
// [Asm] move_origin: [v31]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6, a1, v3]
// [Asm] move_origin: [v3]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, v7, a2, v4, v6, a1, v3]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm] move_origin: [v5]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [v5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm] move_origin: [v6]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [v5, a5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm] move_origin: [v7]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v32]
// [Asm] live_set: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm] move_origin: [a0]
// [Asm] defined: v32 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v140]
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v140, v3]
// [Asm] move_origin: []
// [Asm] defined: v140 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v50]
// [Asm] live_set: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] move_origin: [v47]
// [Asm] defined: v50 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v77]
// [Asm] live_set: [v5, zero, v77, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v77 is X
// [Asm] defs: [v78]
// [Asm] live_set: [v5, zero, v78, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v78 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v80]
// [Asm] live_set: [v5, zero, v7, v4, v80, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v80 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: [v80]
// [Asm] defined: v8 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v19]
// [Asm] live_set: [v19]
// [Asm] move_origin: [v8]
// [Asm] defined: v19 is X
// [Asm] defs: [v46]
// [Asm] live_set: [v46, v5, zero, v7, v4, v6, v3]
// [Asm] move_origin: [v45]
// [Asm] defined: v46 is X
// [Asm] defs: [v122]
// [Asm] live_set: [v5, zero, v7, v36, v35, v4, v38, v6, v122, v3]
// [Asm] move_origin: []
// [Asm] defined: v122 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v36, v35, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v124]
// [Asm] live_set: [v5, v124, zero, v35, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v124 is X
// [Asm] defs: [v125]
// [Asm] live_set: [v5, zero, v125, v35, v7, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v125 is X
// [Asm] defs: [v38]
// [Asm] live_set: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v38 is X
// [Asm] defs: [v123]
// [Asm] live_set: [v5, zero, v123, v35, v7, v36, v38, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v123 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v136]
// [Asm] live_set: [v5, v10, zero, v8, v7, v136, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v136 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v41]
// [Asm] live_set: [v5, zero, v7, v36, v4, v41, v6, v3]
// [Asm] move_origin: []
// [Asm] defined: v41 is X
// [Asm] defs: [v35]
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v41]
// [Asm] defined: v35 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: [v36]
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v135]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v135, v3]
// [Asm] move_origin: []
// [Asm] defined: v135 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] defs: [v137]
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v137, v3]
// [Asm] move_origin: []
// [Asm] defined: v137 is X
// [Asm] defs: []
// [Asm] live_set: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] move_origin: []
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of aux.437"];
// [Asm]   r0 [label="v23 ← a0", color=green];
// [Asm]   r46 [label="v70 ← a1", color=green];
// [Asm]   r33 [label="t4", color=blue];
// [Asm]   r59 [label="v81 ← a0", color=green];
// [Asm]   r76 [label="v60 ← a0", color=green];
// [Asm]   r9 [label="v130 ← a0", color=green];
// [Asm]   r26 [label="a0", color=blue];
// [Asm]   r86 [label="v140 ← a1", color=green];
// [Asm]   r44 [label="v93 ← a1", color=green];
// [Asm]   r53 [label="v10 ← a0", color=green];
// [Asm]   r56 [label="v73 ← a0", color=green];
// [Asm]   r10 [label="v131 ← a0", color=green];
// [Asm]   r5 [label="v7 ← s2", color=green];
// [Asm]   r54 [label="v25 ← a0", color=green];
// [Asm]   r24 [label="v49 ← a1", color=green];
// [Asm]   r43 [label="v92 ← a1", color=green];
// [Asm]   r80 [label="v143 ← a0", color=green];
// [Asm]   r88 [label="v78 ← a0", color=green];
// [Asm]   r31 [label="t2", color=blue];
// [Asm]   r39 [label="v45 ← a0", color=green];
// [Asm]   r99 [label="v137 ← a1", color=green];
// [Asm]   r17 [label="v2 ← a0", color=green];
// [Asm]   r52 [label="v134 ← a1", color=green];
// [Asm]   r65 [label="v100 ← a1", color=green];
// [Asm]   r79 [label="v142 ← a0", color=green];
// [Asm]   r20 [label="a2", color=blue];
// [Asm]   r61 [label="v53 ← a0", color=green];
// [Asm]   r23 [label="v48 ← a0", color=green];
// [Asm]   r3 [label="zero", color=blue];
// [Asm]   r82 [label="v34 ← a0", color=green];
// [Asm]   r67 [label="v64 ← a1", color=green];
// [Asm]   r27 [label="a6", color=blue];
// [Asm]   r75 [label="v107 ← a0", color=green];
// [Asm]   r77 [label="v61 ← a0", color=green];
// [Asm]   r62 [label="v54 ← a0", color=green];
// [Asm]   r40 [label="v51 ← a0", color=green];
// [Asm]   r11 [label="v29 ← a0", color=green];
// [Asm]   r58 [label="v76 ← a0", color=green];
// [Asm]   r34 [label="v56 ← a0", color=green];
// [Asm]   r83 [label="v139 ← a1", color=green];
// [Asm]   r14 [label="v44 ← a1", color=green];
// [Asm]   r51 [label="v22 ← a0", color=green];
// [Asm]   r96 [label="v136 ← a1", color=green];
// [Asm]   r78 [label="v62 ← a0", color=green];
// [Asm]   r55 [label="v24 ← a0", color=green];
// [Asm]   r16 [label="v20 ← a0", color=green];
// [Asm]   r21 [label="a1", color=blue];
// [Asm]   r60 [label="v138 ← a1", color=green];
// [Asm]   r73 [label="v59 ← a0", color=green];
// [Asm]   r93 [label="v124 ← a2", color=green];
// [Asm]   r38 [label="v26 ← a0", color=green];
// [Asm]   r72 [label="v19 ← a0", color=green];
// [Asm]   r87 [label="v77 ← a0", color=green];
// [Asm]   r85 [label="v32 ← a0", color=green];
// [Asm]   r47 [label="v89 ← a0", color=green];
// [Asm]   r6 [label="v4 ← s3", color=green];
// [Asm]   r13 [label="v36 ← a1", color=green];
// [Asm]   r42 [label="v68 ← a0", color=green];
// [Asm]   r4 [label="v8 ← s1", color=green];
// [Asm]   r95 [label="v123 ← a2", color=green];
// [Asm]   r29 [label="t0", color=blue];
// [Asm]   r35 [label="v111 ← a1", color=green];
// [Asm]   r7 [label="v6 ← s4", color=green];
// [Asm]   r64 [label="v63 ← a0", color=green];
// [Asm]   r8 [label="v3 ← s5", color=green];
// [Asm]   r36 [label="v112 ← a1", color=green];
// [Asm]   r66 [label="v101 ← a1", color=green];
// [Asm]   r15 [label="v35 ← a0", color=green];
// [Asm]   r32 [label="t3", color=blue];
// [Asm]   r49 [label="v72 ← a0", color=green];
// [Asm]   r57 [label="v74 ← a0", color=green];
// [Asm]   r74 [label="v106 ← a0", color=green];
// [Asm]   r68 [label="v65 ← a1", color=green];
// [Asm]   r98 [label="v135 ← a1", color=green];
// [Asm]   r91 [label="v122 ← a2", color=green];
// [Asm]   r70 [label="v98 ← a0", color=green];
// [Asm]   r48 [label="v90 ← a0", color=green];
// [Asm]   r12 [label="v43 ← a0", color=green];
// [Asm]   r37 [label="v58 ← a0", color=green];
// [Asm]   r1 [label="v28 ← a0", color=green];
// [Asm]   r28 [label="a7", color=blue];
// [Asm]   r41 [label="v50 ← a0", color=green];
// [Asm]   r71 [label="v67 ← a0", color=green];
// [Asm]   r22 [label="a3", color=blue];
// [Asm]   r69 [label="v97 ← a0", color=green];
// [Asm]   r84 [label="v31 ← a0", color=green];
// [Asm]   r50 [label="v47 ← a0", color=green];
// [Asm]   r89 [label="v80 ← a0", color=green];
// [Asm]   r30 [label="t1", color=blue];
// [Asm]   r45 [label="v69 ← a1", color=green];
// [Asm]   r92 [label="v38 ← a3", color=green];
// [Asm]   r25 [label="v55 ← s6", color=green];
// [Asm]   r63 [label="v21 ← a0", color=green];
// [Asm]   r2 [label="v5 ← s0", color=green];
// [Asm]   r18 [label="a5", color=blue];
// [Asm]   r19 [label="a4", color=blue];
// [Asm]   r97 [label="v41 ← a0", color=green];
// [Asm]   r90 [label="v46 ← a0", color=green];
// [Asm]   r81 [label="v141 ← a1", color=green];
// [Asm]   r94 [label="v125 ← a2", color=green];
// [Asm]   r5 -- r69;
// [Asm]   r2 -- r31;
// [Asm]   r6 -- r70;
// [Asm]   r15 -- r94;
// [Asm]   r2 -- r78;
// [Asm]   r6 -- r48;
// [Asm]   r6 -- r75;
// [Asm]   r3 -- r15;
// [Asm]   r8 -- r36;
// [Asm]   r3 -- r53;
// [Asm]   r2 -- r49;
// [Asm]   r6 -- r68;
// [Asm]   r7 -- r25;
// [Asm]   r3 -- r62;
// [Asm]   r4 -- r64;
// [Asm]   r4 -- r44;
// [Asm]   r6 -- r88;
// [Asm]   r6 -- r84;
// [Asm]   r3 -- r9;
// [Asm]   r2 -- r91;
// [Asm]   r7 -- r78;
// [Asm]   r3 -- r11;
// [Asm]   r4 -- r48;
// [Asm]   r5 -- r65;
// [Asm]   r3 -- r86;
// [Asm]   r2 -- r7;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r70;
// [Asm]   r3 -- r31;
// [Asm]   r7 -- r62;
// [Asm]   r2 -- r41;
// [Asm]   r2 -- r42;
// [Asm]   r7 -- r35;
// [Asm]   r7 -- r32;
// [Asm]   r13 -- r95;
// [Asm]   r4 -- r57;
// [Asm]   r17 -- r19;
// [Asm]   r64 -- r65;
// [Asm]   r6 -- r86;
// [Asm]   r3 -- r48;
// [Asm]   r8 -- r34;
// [Asm]   r3 -- r85;
// [Asm]   r3 -- r8;
// [Asm]   r26 -- r28;
// [Asm]   r6 -- r69;
// [Asm]   r26 -- r27;
// [Asm]   r8 -- r95;
// [Asm]   r5 -- r35;
// [Asm]   r22 -- r25;
// [Asm]   r20 -- r22;
// [Asm]   r25 -- r29;
// [Asm]   r5 -- r6;
// [Asm]   r2 -- r48;
// [Asm]   r3 -- r74;
// [Asm]   r7 -- r79;
// [Asm]   r3 -- r39;
// [Asm]   r53 -- r96;
// [Asm]   r4 -- r83;
// [Asm]   r5 -- r58;
// [Asm]   r8 -- r23;
// [Asm]   r5 -- r32;
// [Asm]   r5 -- r60;
// [Asm]   r8 -- r97;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r33;
// [Asm]   r3 -- r71;
// [Asm]   r2 -- r13;
// [Asm]   r3 -- r17;
// [Asm]   r13 -- r93;
// [Asm]   r18 -- r20;
// [Asm]   r6 -- r50;
// [Asm]   r2 -- r98;
// [Asm]   r2 -- r96;
// [Asm]   r2 -- r22;
// [Asm]   r3 -- r35;
// [Asm]   r8 -- r32;
// [Asm]   r1 -- r5;
// [Asm]   r6 -- r56;
// [Asm]   r2 -- r69;
// [Asm]   r5 -- r36;
// [Asm]   r2 -- r86;
// [Asm]   r6 -- r25;
// [Asm]   r3 -- r94;
// [Asm]   r7 -- r44;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r76;
// [Asm]   r2 -- r73;
// [Asm]   r34 -- r35;
// [Asm]   r6 -- r62;
// [Asm]   r2 -- r4;
// [Asm]   r6 -- r41;
// [Asm]   r4 -- r88;
// [Asm]   r42 -- r44;
// [Asm]   r6 -- r98;
// [Asm]   r2 -- r84;
// [Asm]   r4 -- r81;
// [Asm]   r7 -- r20;
// [Asm]   r2 -- r50;
// [Asm]   r8 -- r76;
// [Asm]   r5 -- r19;
// [Asm]   r53 -- r86;
// [Asm]   r6 -- r46;
// [Asm]   r6 -- r53;
// [Asm]   r22 -- r26;
// [Asm]   r3 -- r83;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r5 -- r11;
// [Asm]   r8 -- r42;
// [Asm]   r8 -- r25;
// [Asm]   r13 -- r91;
// [Asm]   r7 -- r75;
// [Asm]   r3 -- r22;
// [Asm]   r53 -- r98;
// [Asm]   r5 -- r74;
// [Asm]   r8 -- r81;
// [Asm]   r6 -- r19;
// [Asm]   r7 -- r22;
// [Asm]   r3 -- r65;
// [Asm]   r8 -- r62;
// [Asm]   r7 -- r19;
// [Asm]   r5 -- r93;
// [Asm]   r5 -- r97;
// [Asm]   r4 -- r99;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r99;
// [Asm]   r2 -- r89;
// [Asm]   r5 -- r68;
// [Asm]   r8 -- r18;
// [Asm]   r8 -- r35;
// [Asm]   r3 -- r29;
// [Asm]   r7 -- r36;
// [Asm]   r3 -- r66;
// [Asm]   r5 -- r81;
// [Asm]   r4 -- r36;
// [Asm]   r15 -- r24;
// [Asm]   r4 -- r7;
// [Asm]   r2 -- r60;
// [Asm]   r6 -- r39;
// [Asm]   r2 -- r75;
// [Asm]   r5 -- r25;
// [Asm]   r2 -- r93;
// [Asm]   r6 -- r74;
// [Asm]   r4 -- r74;
// [Asm]   r4 -- r10;
// [Asm]   r3 -- r23;
// [Asm]   r13 -- r94;
// [Asm]   r2 -- r27;
// [Asm]   r7 -- r46;
// [Asm]   r26 -- r32;
// [Asm]   r2 -- r58;
// [Asm]   r5 -- r12;
// [Asm]   r6 -- r95;
// [Asm]   r25 -- r28;
// [Asm]   r2 -- r62;
// [Asm]   r3 -- r67;
// [Asm]   r2 -- r45;
// [Asm]   r8 -- r93;
// [Asm]   r6 -- r36;
// [Asm]   r2 -- r15;
// [Asm]   r5 -- r8;
// [Asm]   r3 -- r56;
// [Asm]   r7 -- r56;
// [Asm]   r6 -- r66;
// [Asm]   r5 -- r95;
// [Asm]   r7 -- r77;
// [Asm]   r8 -- r68;
// [Asm]   r3 -- r32;
// [Asm]   r5 -- r42;
// [Asm]   r42 -- r43;
// [Asm]   r3 -- r89;
// [Asm]   r5 -- r92;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r18;
// [Asm]   r6 -- r77;
// [Asm]   r8 -- r98;
// [Asm]   r8 -- r91;
// [Asm]   r4 -- r35;
// [Asm]   r4 -- r69;
// [Asm]   r8 -- r79;
// [Asm]   r42 -- r45;
// [Asm]   r2 -- r92;
// [Asm]   r64 -- r68;
// [Asm]   r8 -- r71;
// [Asm]   r2 -- r68;
// [Asm]   r4 -- r33;
// [Asm]   r3 -- r30;
// [Asm]   r18 -- r26;
// [Asm]   r3 -- r97;
// [Asm]   r5 -- r86;
// [Asm]   r4 -- r86;
// [Asm]   r6 -- r96;
// [Asm]   r5 -- r83;
// [Asm]   r7 -- r93;
// [Asm]   r2 -- r46;
// [Asm]   r8 -- r77;
// [Asm]   r3 -- r13;
// [Asm]   r6 -- r18;
// [Asm]   r6 -- r43;
// [Asm]   r8 -- r78;
// [Asm]   r4 -- r28;
// [Asm]   r6 -- r10;
// [Asm]   r8 -- r94;
// [Asm]   r3 -- r40;
// [Asm]   r3 -- r10;
// [Asm]   r7 -- r95;
// [Asm]   r5 -- r91;
// [Asm]   r3 -- r27;
// [Asm]   r3 -- r69;
// [Asm]   r5 -- r80;
// [Asm]   r2 -- r97;
// [Asm]   r68 -- r70;
// [Asm]   r4 -- r84;
// [Asm]   r3 -- r95;
// [Asm]   r8 -- r29;
// [Asm]   r5 -- r7;
// [Asm]   r8 -- r11;
// [Asm]   r5 -- r90;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r21 -- r22;
// [Asm]   r2 -- r23;
// [Asm]   r6 -- r32;
// [Asm]   r17 -- r20;
// [Asm]   r7 -- r82;
// [Asm]   r6 -- r92;
// [Asm]   r5 -- r89;
// [Asm]   r25 -- r33;
// [Asm]   r8 -- r82;
// [Asm]   r6 -- r11;
// [Asm]   r4 -- r5;
// [Asm]   r8 -- r66;
// [Asm]   r8 -- r56;
// [Asm]   r6 -- r49;
// [Asm]   r7 -- r88;
// [Asm]   r6 -- r14;
// [Asm]   r5 -- r23;
// [Asm]   r5 -- r48;
// [Asm]   r8 -- r19;
// [Asm]   r5 -- r79;
// [Asm]   r46 -- r47;
// [Asm]   r4 -- r79;
// [Asm]   r7 -- r99;
// [Asm]   r8 -- r43;
// [Asm]   r7 -- r71;
// [Asm]   r3 -- r87;
// [Asm]   r25 -- r30;
// [Asm]   r4 -- r20;
// [Asm]   r3 -- r47;
// [Asm]   r25 -- r26;
// [Asm]   r42 -- r46;
// [Asm]   r5 -- r87;
// [Asm]   r4 -- r30;
// [Asm]   r6 -- r12;
// [Asm]   r7 -- r81;
// [Asm]   r6 -- r24;
// [Asm]   r7 -- r73;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r7 -- r37;
// [Asm]   r6 -- r37;
// [Asm]   r2 -- r57;
// [Asm]   r4 -- r11;
// [Asm]   r7 -- r60;
// [Asm]   r3 -- r84;
// [Asm]   r5 -- r26;
// [Asm]   r5 -- r24;
// [Asm]   r7 -- r33;
// [Asm]   r6 -- r28;
// [Asm]   r8 -- r67;
// [Asm]   r4 -- r85;
// [Asm]   r21 -- r25;
// [Asm]   r34 -- r36;
// [Asm]   r26 -- r30;
// [Asm]   r7 -- r11;
// [Asm]   r6 -- r67;
// [Asm]   r7 -- r47;
// [Asm]   r8 -- r88;
// [Asm]   r6 -- r90;
// [Asm]   r6 -- r82;
// [Asm]   r4 -- r47;
// [Asm]   r7 -- r39;
// [Asm]   r8 -- r73;
// [Asm]   r7 -- r43;
// [Asm]   r8 -- r58;
// [Asm]   r3 -- r36;
// [Asm]   r12 -- r14;
// [Asm]   r2 -- r71;
// [Asm]   r7 -- r50;
// [Asm]   r7 -- r68;
// [Asm]   r3 -- r93;
// [Asm]   r1 -- r3;
// [Asm]   r5 -- r43;
// [Asm]   r5 -- r30;
// [Asm]   r7 -- r69;
// [Asm]   r5 -- r76;
// [Asm]   r4 -- r52;
// [Asm]   r4 -- r19;
// [Asm]   r2 -- r64;
// [Asm]   r3 -- r44;
// [Asm]   r52 -- r53;
// [Asm]   r68 -- r69;
// [Asm]   r4 -- r53;
// [Asm]   r8 -- r31;
// [Asm]   r6 -- r81;
// [Asm]   r2 -- r32;
// [Asm]   r4 -- r75;
// [Asm]   r5 -- r82;
// [Asm]   r3 -- r91;
// [Asm]   r5 -- r21;
// [Asm]   r6 -- r73;
// [Asm]   r4 -- r68;
// [Asm]   r5 -- r33;
// [Asm]   r3 -- r98;
// [Asm]   r6 -- r35;
// [Asm]   r4 -- r34;
// [Asm]   r7 -- r97;
// [Asm]   r5 -- r10;
// [Asm]   r3 -- r6;
// [Asm]   r5 -- r17;
// [Asm]   r2 -- r81;
// [Asm]   r3 -- r42;
// [Asm]   r5 -- r85;
// [Asm]   r5 -- r22;
// [Asm]   r2 -- r43;
// [Asm]   r7 -- r84;
// [Asm]   r5 -- r18;
// [Asm]   r5 -- r47;
// [Asm]   r2 -- r99;
// [Asm]   r5 -- r29;
// [Asm]   r18 -- r21;
// [Asm]   r3 -- r37;
// [Asm]   r2 -- r37;
// [Asm]   r15 -- r93;
// [Asm]   r3 -- r68;
// [Asm]   r7 -- r27;
// [Asm]   r3 -- r5;
// [Asm]   r6 -- r89;
// [Asm]   r53 -- r81;
// [Asm]   r6 -- r85;
// [Asm]   r7 -- r91;
// [Asm]   r4 -- r31;
// [Asm]   r8 -- r61;
// [Asm]   r8 -- r12;
// [Asm]   r2 -- r34;
// [Asm]   r5 -- r31;
// [Asm]   r8 -- r45;
// [Asm]   r8 -- r24;
// [Asm]   r3 -- r92;
// [Asm]   r8 -- r75;
// [Asm]   r2 -- r25;
// [Asm]   r5 -- r62;
// [Asm]   r3 -- r78;
// [Asm]   r6 -- r60;
// [Asm]   r2 -- r6;
// [Asm]   r53 -- r99;
// [Asm]   r5 -- r57;
// [Asm]   r6 -- r80;
// [Asm]   r2 -- r83;
// [Asm]   r6 -- r91;
// [Asm]   r4 -- r67;
// [Asm]   r25 -- r32;
// [Asm]   r4 -- r65;
// [Asm]   r2 -- r67;
// [Asm]   r19 -- r22;
// [Asm]   r5 -- r78;
// [Asm]   r7 -- r94;
// [Asm]   r2 -- r12;
// [Asm]   r5 -- r67;
// [Asm]   r8 -- r48;
// [Asm]   r6 -- r83;
// [Asm]   r4 -- r56;
// [Asm]   r15 -- r95;
// [Asm]   r23 -- r24;
// [Asm]   r6 -- r64;
// [Asm]   r4 -- r25;
// [Asm]   r7 -- r80;
// [Asm]   r8 -- r70;
// [Asm]   r3 -- r49;
// [Asm]   r2 -- r36;
// [Asm]   r5 -- r66;
// [Asm]   r6 -- r23;
// [Asm]   r7 -- r42;
// [Asm]   r6 -- r65;
// [Asm]   r3 -- r46;
// [Asm]   r8 -- r86;
// [Asm]   r7 -- r65;
// [Asm]   r7 -- r67;
// [Asm]   r14 -- r15;
// [Asm]   r8 -- r30;
// [Asm]   r6 -- r76;
// [Asm]   r7 -- r76;
// [Asm]   r3 -- r19;
// [Asm]   r3 -- r45;
// [Asm]   r7 -- r29;
// [Asm]   r13 -- r15;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r20 -- r26;
// [Asm]   r7 -- r24;
// [Asm]   r8 -- r27;
// [Asm]   r5 -- r71;
// [Asm]   r2 -- r90;
// [Asm]   r8 -- r9;
// [Asm]   r6 -- r33;
// [Asm]   r6 -- r30;
// [Asm]   r2 -- r65;
// [Asm]   r2 -- r88;
// [Asm]   r2 -- r80;
// [Asm]   r7 -- r74;
// [Asm]   r7 -- r48;
// [Asm]   r6 -- r22;
// [Asm]   r7 -- r49;
// [Asm]   r8 -- r20;
// [Asm]   r8 -- r47;
// [Asm]   r6 -- r99;
// [Asm]   r6 -- r20;
// [Asm]   r3 -- r50;
// [Asm]   r7 -- r17;
// [Asm]   r8 -- r64;
// [Asm]   r8 -- r41;
// [Asm]   r2 -- r44;
// [Asm]   r3 -- r57;
// [Asm]   r2 -- r40;
// [Asm]   r6 -- r27;
// [Asm]   r4 -- r80;
// [Asm]   r53 -- r83;
// [Asm]   r12 -- r13;
// [Asm]   r5 -- r28;
// [Asm]   r8 -- r53;
// [Asm]   r5 -- r9;
// [Asm]   r3 -- r21;
// [Asm]   r13 -- r23;
// [Asm]   r8 -- r15;
// [Asm]   r4 -- r32;
// [Asm]   r7 -- r15;
// [Asm]   r6 -- r57;
// [Asm]   r7 -- r85;
// [Asm]   r6 -- r87;
// [Asm]   r25 -- r34;
// [Asm]   r5 -- r45;
// [Asm]   r3 -- r20;
// [Asm]   r8 -- r92;
// [Asm]   r2 -- r77;
// [Asm]   r5 -- r70;
// [Asm]   r25 -- r31;
// [Asm]   r5 -- r94;
// [Asm]   r5 -- r56;
// [Asm]   r5 -- r61;
// [Asm]   r7 -- r41;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r3 -- r73;
// [Asm]   r2 -- r30;
// [Asm]   r5 -- r39;
// [Asm]   r5 -- r98;
// [Asm]   r8 -- r26;
// [Asm]   r8 -- r83;
// [Asm]   r7 -- r57;
// [Asm]   r26 -- r31;
// [Asm]   r7 -- r87;
// [Asm]   r7 -- r18;
// [Asm]   r2 -- r9;
// [Asm]   r2 -- r35;
// [Asm]   r4 -- r6;
// [Asm]   r7 -- r12;
// [Asm]   r19 -- r25;
// [Asm]   r7 -- r14;
// [Asm]   r20 -- r21;
// [Asm]   r8 -- r50;
// [Asm]   r8 -- r60;
// [Asm]   r2 -- r39;
// [Asm]   r2 -- r20;
// [Asm]   r6 -- r71;
// [Asm]   r6 -- r21;
// [Asm]   r4 -- r87;
// [Asm]   r8 -- r57;
// [Asm]   r91 -- r92;
// [Asm]   r26 -- r33;
// [Asm]   r8 -- r99;
// [Asm]   r2 -- r94;
// [Asm]   r5 -- r41;
// [Asm]   r4 -- r66;
// [Asm]   r8 -- r89;
// [Asm]   r13 -- r97;
// [Asm]   r17 -- r21;
// [Asm]   r7 -- r21;
// [Asm]   r8 -- r84;
// [Asm]   r6 -- r47;
// [Asm]   r3 -- r43;
// [Asm]   r7 -- r40;
// [Asm]   r1 -- r4;
// [Asm]   r5 -- r88;
// [Asm]   r2 -- r95;
// [Asm]   r8 -- r90;
// [Asm]   r1 -- r7;
// [Asm]   r2 -- r85;
// [Asm]   r18 -- r25;
// [Asm]   r3 -- r60;
// [Asm]   r3 -- r79;
// [Asm]   r5 -- r96;
// [Asm]   r2 -- r10;
// [Asm]   r6 -- r29;
// [Asm]   r7 -- r53;
// [Asm]   r5 -- r49;
// [Asm]   r5 -- r99;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r5 -- r73;
// [Asm]   r19 -- r21;
// [Asm]   r4 -- r42;
// [Asm]   r13 -- r92;
// [Asm]   r3 -- r34;
// [Asm]   r7 -- r83;
// [Asm]   r2 -- r74;
// [Asm]   r46 -- r48;
// [Asm]   r4 -- r21;
// [Asm]   r2 -- r76;
// [Asm]   r6 -- r13;
// [Asm]   r3 -- r76;
// [Asm]   r15 -- r91;
// [Asm]   r7 -- r34;
// [Asm]   r7 -- r90;
// [Asm]   r2 -- r33;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r96;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r69;
// [Asm]   r4 -- r43;
// [Asm]   r4 -- r98;
// [Asm]   r5 -- r75;
// [Asm]   r8 -- r37;
// [Asm]   r5 -- r53;
// [Asm]   r6 -- r93;
// [Asm]   r7 -- r10;
// [Asm]   r2 -- r47;
// [Asm]   r3 -- r80;
// [Asm]   r17 -- r22;
// [Asm]   r6 -- r94;
// [Asm]   r2 -- r8;
// [Asm]   r3 -- r82;
// [Asm]   r7 -- r70;
// [Asm]   r6 -- r31;
// [Asm]   r2 -- r79;
// [Asm]   r6 -- r78;
// [Asm]   r8 -- r44;
// [Asm]   r8 -- r39;
// [Asm]   r7 -- r98;
// [Asm]   r8 -- r80;
// [Asm]   r7 -- r61;
// [Asm]   r6 -- r45;
// [Asm]   r8 -- r22;
// [Asm]   r4 -- r8;
// [Asm]   r8 -- r21;
// [Asm]   r5 -- r14;
// [Asm]   r5 -- r50;
// [Asm]   r8 -- r96;
// [Asm]   r64 -- r67;
// [Asm]   r7 -- r96;
// [Asm]   r3 -- r61;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r7 -- r8;
// [Asm]   r8 -- r87;
// [Asm]   r6 -- r61;
// [Asm]   r6 -- r97;
// [Asm]   r4 -- r9;
// [Asm]   r3 -- r58;
// [Asm]   r3 -- r88;
// [Asm]   r2 -- r70;
// [Asm]   r2 -- r53;
// [Asm]   r7 -- r64;
// [Asm]   r5 -- r34;
// [Asm]   r2 -- r61;
// [Asm]   r2 -- r87;
// [Asm]   r6 -- r58;
// [Asm]   r6 -- r7;
// [Asm]   r6 -- r9;
// [Asm]   r64 -- r66;
// [Asm]   r17 -- r18;
// [Asm]   r6 -- r15;
// [Asm]   r5 -- r20;
// [Asm]   r7 -- r45;
// [Asm]   r2 -- r18;
// [Asm]   r6 -- r44;
// [Asm]   r5 -- r77;
// [Asm]   r25 -- r27;
// [Asm]   r7 -- r89;
// [Asm]   r3 -- r12;
// [Asm]   r7 -- r26;
// [Asm]   r5 -- r13;
// [Asm]   r6 -- r79;
// [Asm]   r7 -- r13;
// [Asm]   r5 -- r84;
// [Asm]   r5 -- r44;
// [Asm]   r2 -- r82;
// [Asm]   r7 -- r86;
// [Asm]   r3 -- r28;
// [Asm]   r7 -- r30;
// [Asm]   r8 -- r33;
// [Asm]   r53 -- r60;
// [Asm]   r18 -- r22;
// [Asm]   r19 -- r26;
// [Asm]   r3 -- r90;
// [Asm]   r8 -- r65;
// [Asm]   r7 -- r9;
// [Asm]   r6 -- r26;
// [Asm]   r6 -- r40;
// [Asm]   r8 -- r49;
// [Asm]   r4 -- r60;
// [Asm]   r3 -- r77;
// [Asm]   r20 -- r25;
// [Asm]   r15 -- r92;
// [Asm]   r7 -- r66;
// [Asm]   r4 -- r70;
// [Asm]   r7 -- r28;
// [Asm]   r6 -- r8;
// [Asm]   r6 -- r34;
// [Asm]   r5 -- r64;
// [Asm]   r8 -- r28;
// [Asm]   r7 -- r92;
// [Asm]   r4 -- r46;
// [Asm]   r4 -- r73;
// [Asm]   r18 -- r19;
// [Asm]   r4 -- r45;
// [Asm]   r5 -- r46;
// [Asm]   r8 -- r13;
// [Asm]   r5 -- r37;
// [Asm]   r2 -- r56;
// [Asm]   r8 -- r74;
// [Asm]   r92 -- r95;
// [Asm]   r8 -- r85;
// [Asm]   r8 -- r40;
// [Asm]   r3 -- r64;
// [Asm]   r2 -- r66;
// [Asm]   r6 -- r42;
// [Asm]   r3 -- r81;
// [Asm]   r3 -- r41;
// [Asm]   r2 -- r21;
// [Asm]   r6 -- r17;
// [Asm]   r21 -- r26;
// [Asm]   r3 -- r14;
// [Asm]   r3 -- r75;
// [Asm]   r7 -- r58;
// [Asm]   r7 -- r31;
// [Asm]   r4 -- r96;
// [Asm]   r26 -- r29;
// [Asm]   r5 -- r27;
// [Asm]   r4 -- r77;
// [Asm]   r7 -- r23;
// [Asm]   r4 -- r26;
// [Asm]   r2 -- r19;
// [Asm]   r2 -- r3;
// [Asm]   r8 -- r46;
// [Asm]   r5 -- r40;
// [Asm]   r5 -- r15;
// [Asm]   r19 -- r20;
// [Asm]   comment = "0:v23-> 1:v28-> 2:v5-> 3:zero-> 4:v8-> 5:v7-> 6:v4-> 7:v6-> 8:v3-> 9:v130-> 10:v131-> 11:v29-> 18:a5-> 19:a4-> 20:a2-> 21:a1-> 22:a3-> 25:v55-> 26:a0-> 17:v2-> 27:a6-> 28:a7-> 29:t0-> 30:t1-> 31:t2-> 32:t3-> 33:t4-> 34:v56-> 35:v111-> 36:v112-> 42:v68-> 43:v92-> 44:v93-> 45:v69-> 46:v70-> 47:v89-> 48:v90-> 53:v10-> 60:v138-> 81:v141-> 83:v139-> 86:v140-> 96:v136-> 98:v135-> 99:v137-> 56:v73-> 57:v74-> 64:v63-> 65:v100-> 66:v101-> 67:v64-> 68:v65-> 69:v97-> 70:v98-> 73:v59-> 74:v106-> 75:v107-> 76:v60-> 77:v61-> 79:v142-> 80:v143-> 84:v31-> 85:v32-> 87:v77-> 88:v78-> 12:v43-> 13:v36-> 14:v44-> 15:v35-> 91:v122-> 92:v38-> 95:v123-> 93:v124-> 94:v125-> 23:v48-> 24:v49-> 97:v41-> 37:v58-> 39:v45-> 40:v51-> 41:v50-> 49:v72-> 50:v47-> 58:v76-> 61:v53-> 62:v54-> 71:v67-> 78:v62-> 82:v34-> 89:v80-> 90:v46-> 52:v134-> 16:v20-> 38:v26-> 51:v22-> 54:v25-> 55:v24-> 59:v81-> 63:v21-> 72:v19"
// [Asm]   comment = "v23<-a0;v70<-a1;v81<-a0;v60<-a0;v130<-a0;v140<-a1;v93<-a1;v10<-a0;v73<-a0;v131<-a0;v7<-s2;v25<-a0;v49<-a1;v92<-a1;v143<-a0;v78<-a0;v45<-a0;v137<-a1;v2<-a0;v134<-a1;v100<-a1;v142<-a0;v53<-a0;v48<-a0;v34<-a0;v64<-a1;v107<-a0;v61<-a0;v54<-a0;v51<-a0;v29<-a0;v76<-a0;v56<-a0;v139<-a1;v44<-a1;v22<-a0;v136<-a1;v62<-a0;v24<-a0;v20<-a0;v138<-a1;v59<-a0;v124<-a2;v26<-a0;v19<-a0;v77<-a0;v32<-a0;v89<-a0;v4<-s3;v36<-a1;v68<-a0;v8<-s1;v123<-a2;v111<-a1;v6<-s4;v63<-a0;v3<-s5;v112<-a1;v101<-a1;v35<-a0;v72<-a0;v74<-a0;v106<-a0;v65<-a1;v135<-a1;v122<-a2;v98<-a0;v90<-a0;v43<-a0;v58<-a0;v28<-a0;v50<-a0;v67<-a0;v97<-a0;v31<-a0;v47<-a0;v80<-a0;v69<-a1;v38<-a3;v55<-s6;v21<-a0;v5<-s0;v41<-a0;v46<-a0;v141<-a1;v125<-a2;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of aux.437"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   lw v28, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v130, v28, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v131, v6, v130 ->   add a0, s4, a0
// [Asm] subst   lw v29, 0(v131) ->   lw a0, 0(a0)
// [Asm] subst   beq v29, zero, .aux.437_21 ->   beq a0, zero, .aux.437_21
// [Asm] subst   addi v43, v35, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v44, v36, -1 ->   addi a1, a1, -1
// [Asm] subst   j .aux.437_52 ->   j .aux.437_52
// [Asm] subst   mv v3, a1 ->   mv s5, a1
// [Asm] subst   mv v4, a2 ->   mv s3, a2
// [Asm] subst   mv v5, a3 ->   mv s0, a3
// [Asm] subst   mv v6, a4 ->   mv s4, a4
// [Asm] subst   mv v7, a5 ->   mv s2, a5
// [Asm] subst   mv v8, v2 ->   mv s1, a0
// [Asm] subst   addi v48, v35, 1 ->   addi a0, a0, 1
// [Asm] subst   addi v49, v36, 1 ->   addi a1, a1, 1
// [Asm] subst   j .aux.437_52 ->   j .aux.437_52
// [Asm] subst   bge v35, v3, .aux.437_53 ->   bge a0, s5, .aux.437_53
// [Asm] subst   bge v8, v3, .aux.437_3 ->   bge s1, s5, .aux.437_3
// [Asm] subst   lw v55, 0(v4) ->   lw s6, 0(s3)
// [Asm] subst   call read_ch_until_newline_or_eof.433 ->   call read_ch_until_newline_or_eof.433
// [Asm] subst   slliw v111, v55, 2 ->   slliw a1, s6, 2
// [Asm] subst   add v112, v6, v111 ->   add a1, s4, a1
// [Asm] subst   sw v56, 0(v112) ->   sw a0, 0(a1)
// [Asm] subst   addi v58, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v58 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   mv v36, zero ->   mv a1, zero
// [Asm] subst   lw v68, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v92, v68, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v93, v6, v92 ->   add a1, s4, a1
// [Asm] subst   lw v69, 0(v93) ->   lw a1, 0(a1)
// [Asm] subst   addi v70, v69, 1 ->   addi a1, a1, 1
// [Asm] subst   slliw v89, v68, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v90, v6, v89 ->   add a0, s4, a0
// [Asm] subst   sw v70, 0(v90) ->   sw a1, 0(a0)
// [Asm] subst   addi v72, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v72 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   li v134, 93 ->   li a1, 93
// [Asm] subst   bne v10, v134, .aux.437_25 ->   bne a0, a1, .aux.437_25
// [Asm] subst   lw v73, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   addi v74, v73, -1 ->   addi a0, a0, -1
// [Asm] subst   sw v74, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   addi v76, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v76 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v81, v8 ->   mv a0, s1
// [Asm] subst   j .aux.437_34 ->   j .aux.437_34
// [Asm] subst   sw v8, 0(v7) ->   sw s1, 0(s2)
// [Asm] subst   li v138, 45 ->   li a1, 45
// [Asm] subst   beq v10, v138, .aux.437_11 ->   beq a0, a1, .aux.437_11
// [Asm] subst   sw v51, 0(v7) ->   sw a0, 0(s2)
// [Asm] subst   lw v53, 0(v7) ->   lw a0, 0(s2)
// [Asm] subst   addi v54, v53, 1 ->   addi a0, a0, 1
// [Asm] subst   mv v8, v54 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   lw v63, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v100, v63, 2 ->   slliw a1, a0, 2
// [Asm] subst   add v101, v6, v100 ->   add a1, s4, a1
// [Asm] subst   lw v64, 0(v101) ->   lw a1, 0(a1)
// [Asm] subst   addi v65, v64, -1 ->   addi a1, a1, -1
// [Asm] subst   slliw v97, v63, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v98, v6, v97 ->   add a0, s4, a0
// [Asm] subst   sw v65, 0(v98) ->   sw a1, 0(a0)
// [Asm] subst   addi v67, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v67 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   beq v36, zero, .aux.437_59 ->   beq a1, zero, .aux.437_59
// [Asm] subst   mv v19, v8 ->   mv a0, s1
// [Asm] subst   j .aux.437_26 ->   j .aux.437_26
// [Asm] subst   lw v59, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   slliw v106, v59, 2 ->   slliw a0, a0, 2
// [Asm] subst   add v107, v6, v106 ->   add a0, s4, a0
// [Asm] subst   lw v60, 0(v107) ->   lw a0, 0(a0)
// [Asm] subst   call minimbt_print_char ->   call minimbt_print_char
// [Asm] subst   addi v62, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v62 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   slliw v142, v8, 2 ->   slliw a0, s1, 2
// [Asm] subst   add v143, v5, v142 ->   add a0, s0, a0
// [Asm] subst   lw v10, 0(v143) ->   lw a0, 0(a0)
// [Asm] subst   li v141, 62 ->   li a1, 62
// [Asm] subst   beq v10, v141, .aux.437_5 ->   beq a0, a1, .aux.437_5
// [Asm] subst   addi v34, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   li v139, 43 ->   li a1, 43
// [Asm] subst   beq v10, v139, .aux.437_9 ->   beq a0, a1, .aux.437_9
// [Asm] subst   addi v31, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv a1, v3 ->   mv a1, s5
// [Asm] subst   mv a2, v4 ->   mv a2, s3
// [Asm] subst   mv a3, v5 ->   mv a3, s0
// [Asm] subst   mv a4, v6 ->   mv a4, s4
// [Asm] subst   mv a5, v7 ->   mv a5, s2
// [Asm] subst   call aux.437 ->   call aux.437
// [Asm] subst   sw v32, 0(v7) ->   sw a0, 0(s2)
// [Asm] subst   j .aux.437_20 ->   j .aux.437_20
// [Asm] subst   li v140, 60 ->   li a1, 60
// [Asm] subst   beq v10, v140, .aux.437_7 ->   beq a0, a1, .aux.437_7
// [Asm] subst   j .aux.437_64 ->   j .aux.437_64
// [Asm] subst   lw v77, 0(v4) ->   lw a0, 0(s3)
// [Asm] subst   addi v78, v77, 1 ->   addi a0, a0, 1
// [Asm] subst   sw v78, 0(v4) ->   sw a0, 0(s3)
// [Asm] subst   addi v80, v8, 1 ->   addi a0, s1, 1
// [Asm] subst   mv v8, v80 ->   mv s1, a0
// [Asm] subst   j .aux.437_2 ->   j .aux.437_2
// [Asm] subst   mv v19, v8 ->   mv a0, s1
// [Asm] subst   li v122, 93 ->   li a2, 93
// [Asm] subst   bne v38, v122, .aux.437_58 ->   bne a3, a2, .aux.437_58
// [Asm] subst   slliw v124, v35, 2 ->   slliw a2, a0, 2
// [Asm] subst   add v125, v5, v124 ->   add a2, s0, a2
// [Asm] subst   lw v38, 0(v125) ->   lw a3, 0(a2)
// [Asm] subst   li v123, 91 ->   li a2, 91
// [Asm] subst   beq v38, v123, .aux.437_55 ->   beq a3, a2, .aux.437_55
// [Asm] subst   li v136, 44 ->   li a1, 44
// [Asm] subst   beq v10, v136, .aux.437_15 ->   beq a0, a1, .aux.437_15
// [Asm] subst   addi v41, v35, 1 ->   addi a0, a0, 1
// [Asm] subst   j .aux.437_52 ->   j .aux.437_52
// [Asm] subst   li v135, 91 ->   li a1, 91
// [Asm] subst   beq v10, v135, .aux.437_17 ->   beq a0, a1, .aux.437_17
// [Asm] subst   li v137, 46 ->   li a1, 46
// [Asm] subst   beq v10, v137, .aux.437_13 ->   beq a0, a1, .aux.437_13
// [Asm] pre_assigned_registers: Mem(fref=f3, mref=m0) -> v4, BlockParam(bref=b3, bpref=$b.0) -> v18, Insn(iref=%8) -> v12, BlockParam(bref=b0, bpref=$b.0) -> v7, BlockParam(bref=b0, bpref=$b.1) -> v8, FnParam(fref=f3, fpref=$f.0) -> v2, Insn(iref=%5) -> v16, Self(fref=f3) -> v0, Insn(iref=%0) -> v9, Insn(iref=%4) -> v15, Insn(iref=%3) -> v14, Insn(iref=%7) -> v11, FnParam(fref=f3, fpref=$f.1) -> v3, Mem(fref=f3, mref=m1) -> v5, Insn(iref=%2) -> v13, Insn(iref=%1) -> v10, Insn(iref=%6) -> v17, Mem(fref=f3, mref=m2) -> v6
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Asm] defs: [v27]
// [Asm] live_set: [v7, v8, s11, zero, v9, v27]
// [Asm] move_origin: []
// [Asm] defined: v27 is X
// [Asm] defs: [v28]
// [Asm] live_set: [v7, s11, v28, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defined: v28 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: [v12]
// [Asm] live_set: [s11, v12, zero, v8]
// [Asm] move_origin: []
// [Asm] defined: v12 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v12]
// [Asm] defined: v7 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v8]
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v7]
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [v8, s11, zero, a0, v7]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v9]
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] move_origin: [a0]
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v8, s11, zero, v9, v7]
// [Asm] move_origin: []
// [Asm] defs: [v29]
// [Asm] live_set: [v7, v8, s11, zero, v9, v29]
// [Asm] move_origin: []
// [Asm] defined: v29 is X
// [Asm] defs: []
// [Asm] live_set: [v7, s11, zero, v9, v8]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v18]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [a1, s11, zero, a0]
// [Asm] move_origin: []
// [Asm] defs: [v2]
// [Asm] live_set: [a1, s11, zero, v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: [v3]
// [Asm] live_set: [v2, s11, zero, v3]
// [Asm] move_origin: [a1]
// [Asm] defined: v3 is X
// [Asm] defs: [v7]
// [Asm] live_set: [v3, s11, zero, v7]
// [Asm] move_origin: [v2]
// [Asm] defined: v7 is X
// [Asm] defs: [v8]
// [Asm] live_set: [v7, s11, zero, v8]
// [Asm] move_origin: [v3]
// [Asm] defined: v8 is X
// [Asm] defs: [v4]
// [Asm] live_set: [zero, v8, v7, v4]
// [Asm] move_origin: []
// [Asm] defined: v4 is X
// [Asm] defs: [s11]
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defs: [v23]
// [Asm] live_set: [zero, v23, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v23 is X
// [Asm] defs: [v14]
// [Asm] live_set: [v14, zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v14 is X
// [Asm] defs: [v21]
// [Asm] live_set: [v14, v21, zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: v21 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5, v14, zero, v8, v7, v4]
// [Asm] move_origin: []
// [Asm] defined: v5 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, v14, zero, v8, v7, v4, s11]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, v8, v7, v4, s11]
// [Asm] move_origin: [v14]
// [Asm] defined: a1 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: v6 is X
// [Asm] defs: [s11]
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defined: s11 is X
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: [v5, zero, v8, v7, v4, v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [v5, zero, a0, v8, v7, v4, v6]
// [Asm] move_origin: [zero]
// [Asm] defined: a0 is X
// [Asm] defs: [a1]
// [Asm] live_set: [v5, zero, a0, v8, v4, a1, v6]
// [Asm] move_origin: [v7]
// [Asm] defined: a1 is X
// [Asm] defs: [a2]
// [Asm] live_set: [v5, zero, a0, v8, a2, a1, v6]
// [Asm] move_origin: [v4]
// [Asm] defined: a2 is X
// [Asm] defs: [a3]
// [Asm] live_set: [v5, zero, a0, a2, a1, v6, a3]
// [Asm] move_origin: [v8]
// [Asm] defined: a3 is X
// [Asm] defs: [a4]
// [Asm] live_set: [zero, a0, a4, a2, a1, v6, a3]
// [Asm] move_origin: [v5]
// [Asm] defined: a4 is X
// [Asm] defs: [a5]
// [Asm] live_set: [a5, zero, a0, a4, a2, a1, a3]
// [Asm] move_origin: [v6]
// [Asm] defined: a5 is X
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [zero, a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v17]
// [Asm] live_set: [zero]
// [Asm] move_origin: [a0]
// [Asm] defined: v17 is X
// [Asm] defs: []
// [Asm] live_set: [zero]
// [Asm] move_origin: []
// [Asm] defs: [v18]
// [Asm] live_set: [v18]
// [Asm] move_origin: [zero]
// [Asm] defined: v18 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_prog.435"];
// [Asm]   r0 [label="v27 ← a0", color=green];
// [Asm]   r20 [label="t4", color=blue];
// [Asm]   r23 [label="v3 ← a1", color=green];
// [Asm]   r3 [label="s11", color=blue];
// [Asm]   r9 [label="a1", color=blue];
// [Asm]   r26 [label="v14 ← a0", color=green];
// [Asm]   r27 [label="v21 ← a1", color=green];
// [Asm]   r6 [label="v28 ← a0", color=green];
// [Asm]   r13 [label="a5", color=blue];
// [Asm]   r4 [label="zero", color=blue];
// [Asm]   r1 [label="v7 ← s0", color=green];
// [Asm]   r29 [label="v6 ← a5", color=green];
// [Asm]   r28 [label="v5 ← a4", color=green];
// [Asm]   r11 [label="a3", color=blue];
// [Asm]   r7 [label="v12 ← a0", color=green];
// [Asm]   r10 [label="a2", color=blue];
// [Asm]   r22 [label="v2 ← a0", color=green];
// [Asm]   r14 [label="a6", color=blue];
// [Asm]   r8 [label="a0", color=blue];
// [Asm]   r30 [label="v17 ← a0", color=green];
// [Asm]   r5 [label="v9 ← a1", color=green];
// [Asm]   r24 [label="v4 ← a2", color=green];
// [Asm]   r15 [label="a7", color=blue];
// [Asm]   r25 [label="v23 ← a0", color=green];
// [Asm]   r2 [label="v8 ← s1", color=green];
// [Asm]   r16 [label="t0", color=blue];
// [Asm]   r18 [label="t2", color=blue];
// [Asm]   r19 [label="t3", color=blue];
// [Asm]   r31 [label="v18 ← a0", color=green];
// [Asm]   r17 [label="t1", color=blue];
// [Asm]   r21 [label="v29 ← a0", color=green];
// [Asm]   r12 [label="a4", color=blue];
// [Asm]   r12 -- r29;
// [Asm]   r5 -- r21;
// [Asm]   r1 -- r12;
// [Asm]   r1 -- r26;
// [Asm]   r3 -- r15;
// [Asm]   r2 -- r15;
// [Asm]   r3 -- r16;
// [Asm]   r3 -- r6;
// [Asm]   r1 -- r4;
// [Asm]   r1 -- r18;
// [Asm]   r1 -- r19;
// [Asm]   r1 -- r10;
// [Asm]   r10 -- r13;
// [Asm]   r2 -- r10;
// [Asm]   r3 -- r9;
// [Asm]   r3 -- r11;
// [Asm]   r1 -- r17;
// [Asm]   r1 -- r20;
// [Asm]   r2 -- r16;
// [Asm]   r4 -- r27;
// [Asm]   r3 -- r24;
// [Asm]   r2 -- r7;
// [Asm]   r1 -- r16;
// [Asm]   r4 -- r22;
// [Asm]   r3 -- r26;
// [Asm]   r3 -- r18;
// [Asm]   r3 -- r5;
// [Asm]   r8 -- r12;
// [Asm]   r3 -- r8;
// [Asm]   r4 -- r21;
// [Asm]   r8 -- r24;
// [Asm]   r1 -- r9;
// [Asm]   r26 -- r28;
// [Asm]   r2 -- r25;
// [Asm]   r26 -- r27;
// [Asm]   r2 -- r6;
// [Asm]   r5 -- r6;
// [Asm]   r8 -- r17;
// [Asm]   r3 -- r4;
// [Asm]   r8 -- r16;
// [Asm]   r11 -- r13;
// [Asm]   r0 -- r2;
// [Asm]   r9 -- r28;
// [Asm]   r1 -- r21;
// [Asm]   r10 -- r12;
// [Asm]   r3 -- r13;
// [Asm]   r4 -- r28;
// [Asm]   r9 -- r12;
// [Asm]   r2 -- r12;
// [Asm]   r2 -- r8;
// [Asm]   r24 -- r27;
// [Asm]   r3 -- r10;
// [Asm]   r1 -- r27;
// [Asm]   r4 -- r12;
// [Asm]   r1 -- r2;
// [Asm]   r4 -- r29;
// [Asm]   r28 -- r29;
// [Asm]   r2 -- r5;
// [Asm]   r3 -- r27;
// [Asm]   r2 -- r13;
// [Asm]   r0 -- r1;
// [Asm]   r1 -- r11;
// [Asm]   r4 -- r25;
// [Asm]   r3 -- r17;
// [Asm]   r8 -- r29;
// [Asm]   r4 -- r8;
// [Asm]   r9 -- r10;
// [Asm]   r8 -- r11;
// [Asm]   r3 -- r7;
// [Asm]   r1 -- r6;
// [Asm]   r1 -- r5;
// [Asm]   r0 -- r4;
// [Asm]   r2 -- r24;
// [Asm]   r8 -- r14;
// [Asm]   r24 -- r25;
// [Asm]   r4 -- r14;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r13;
// [Asm]   r3 -- r19;
// [Asm]   r4 -- r16;
// [Asm]   r3 -- r25;
// [Asm]   r4 -- r24;
// [Asm]   r4 -- r5;
// [Asm]   r2 -- r26;
// [Asm]   r1 -- r8;
// [Asm]   r4 -- r23;
// [Asm]   r2 -- r4;
// [Asm]   r2 -- r18;
// [Asm]   r1 -- r23;
// [Asm]   r9 -- r29;
// [Asm]   r8 -- r19;
// [Asm]   r8 -- r9;
// [Asm]   r3 -- r12;
// [Asm]   r11 -- r12;
// [Asm]   r1 -- r15;
// [Asm]   r1 -- r13;
// [Asm]   r4 -- r20;
// [Asm]   r10 -- r29;
// [Asm]   r3 -- r28;
// [Asm]   r4 -- r30;
// [Asm]   r4 -- r18;
// [Asm]   r2 -- r11;
// [Asm]   r8 -- r20;
// [Asm]   r24 -- r28;
// [Asm]   r24 -- r29;
// [Asm]   r24 -- r26;
// [Asm]   r1 -- r28;
// [Asm]   r3 -- r22;
// [Asm]   r8 -- r28;
// [Asm]   r9 -- r22;
// [Asm]   r2 -- r28;
// [Asm]   r2 -- r29;
// [Asm]   r9 -- r11;
// [Asm]   r4 -- r15;
// [Asm]   r4 -- r11;
// [Asm]   r10 -- r28;
// [Asm]   r12 -- r13;
// [Asm]   r8 -- r13;
// [Asm]   r2 -- r14;
// [Asm]   r3 -- r21;
// [Asm]   r8 -- r15;
// [Asm]   r0 -- r3;
// [Asm]   r1 -- r29;
// [Asm]   r9 -- r24;
// [Asm]   r8 -- r18;
// [Asm]   r22 -- r23;
// [Asm]   r3 -- r29;
// [Asm]   r10 -- r11;
// [Asm]   r3 -- r20;
// [Asm]   r0 -- r5;
// [Asm]   r1 -- r25;
// [Asm]   r2 -- r21;
// [Asm]   r3 -- r14;
// [Asm]   r2 -- r17;
// [Asm]   r8 -- r10;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r17;
// [Asm]   r2 -- r9;
// [Asm]   r1 -- r14;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r2 -- r19;
// [Asm]   r1 -- r3;
// [Asm]   r4 -- r26;
// [Asm]   r9 -- r13;
// [Asm]   r11 -- r28;
// [Asm]   r2 -- r3;
// [Asm]   r3 -- r23;
// [Asm]   r2 -- r27;
// [Asm]   r11 -- r29;
// [Asm]   r4 -- r19;
// [Asm]   r1 -- r24;
// [Asm]   r2 -- r20;
// [Asm]   comment = "0:v27-> 1:v7-> 2:v8-> 3:s11-> 4:zero-> 5:v9-> 6:v28-> 21:v29-> 8:a0-> 9:a1-> 10:a2-> 11:a3-> 12:a4-> 13:a5-> 29:v6-> 28:v5-> 24:v4-> 26:v14-> 27:v21-> 14:a6-> 15:a7-> 16:t0-> 17:t1-> 18:t2-> 19:t3-> 20:t4-> 25:v23-> 7:v12-> 22:v2-> 23:v3-> 30:v17-> 31:v18"
// [Asm]   comment = "v27<-a0;v3<-a1;v14<-a0;v21<-a1;v28<-a0;v7<-s0;v6<-a5;v5<-a4;v12<-a0;v2<-a0;v17<-a0;v9<-a1;v4<-a2;v23<-a0;v8<-s1;v18<-a0;v29<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_prog.435"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   slliw v27, v7, 2 ->   slliw a0, s0, 2
// [Asm] subst   add v28, v8, v27 ->   add a0, s1, a0
// [Asm] subst   sw v9, 0(v28) ->   sw a1, 0(a0)
// [Asm] subst   addi v12, v7, 1 ->   addi a0, s0, 1
// [Asm] subst   mv v7, v12 ->   mv s0, a0
// [Asm] subst   j .read_prog.435_0 ->   j .read_prog.435_0
// [Asm] subst   call read_ch_until_newline_or_eof.433 ->   call read_ch_until_newline_or_eof.433
// [Asm] subst   mv v9, a0 ->   mv a1, a0
// [Asm] subst   li v29, -1 ->   li a0, -1
// [Asm] subst   bne v9, v29, .read_prog.435_2 ->   bne a1, a0, .read_prog.435_2
// [Asm] subst   ret ->   ret
// [Asm] subst   mv v7, v2 ->   mv s0, a0
// [Asm] subst   mv v8, v3 ->   mv s1, a1
// [Asm] subst   addi v4, s11, -4 ->   addi a2, s11, -4
// [Asm] subst   andi s11, v4, -8 ->   andi s11, a2, -8
// [Asm] subst   sw zero, 0(v4) ->   sw zero, 0(a2)
// [Asm] subst   li v23, 1024 ->   li a0, 1024
// [Asm] subst   mul v14, v23, v23 ->   mul a0, a0, a0
// [Asm] subst   slliw v21, v14, 2 ->   slliw a1, a0, 2
// [Asm] subst   sub v5, s11, v21 ->   sub a4, s11, a1
// [Asm] subst   andi s11, v5, -8 ->   andi s11, a4, -8
// [Asm] subst   mv a1, v14 ->   mv a1, a0
// [Asm] subst   addi v6, s11, -4 ->   addi a5, s11, -4
// [Asm] subst   andi s11, v6, -8 ->   andi s11, a5, -8
// [Asm] subst   sw zero, 0(v6) ->   sw zero, 0(a5)
// [Asm] subst   mv a0, zero ->   mv a0, zero
// [Asm] subst   mv a1, v7 ->   mv a1, s0
// [Asm] subst   mv a3, v8 ->   mv a3, s1
// [Asm] subst   call aux.437 ->   call aux.437
// [Asm] subst   mv v18, zero ->   mv a0, zero
// [Asm] pre_assigned_registers: Insn(iref=%1) -> v3, BlockParam(bref=b5, bpref=$b.0) -> v5, Self(fref=f0) -> v0, BlockParam(bref=b6, bpref=$b.0) -> v6, Insn(iref=%0) -> v2, Insn(iref=%2) -> v4
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Asm] skipping Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Asm] defs: [v8]
// [Asm] live_set: [v8]
// [Asm] move_origin: []
// [Asm] defined: v8 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v8]
// [Asm] defined: v5 is X
// [Asm] defs: [v5]
// [Asm] live_set: [v5]
// [Asm] move_origin: [v2]
// [Asm] defined: v5 is X
// [Asm] defs: []
// [Asm] live_set: [v5]
// [Asm] move_origin: []
// [Asm] defs: [v9]
// [Asm] live_set: [v9, v2]
// [Asm] move_origin: []
// [Asm] defined: v9 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [a0, a1, a2, a3, a4, a5, a6, a7, t0, t1, t2, t3, t4, ft0, ft1, ft2, ft3, ft4, ft5, ft6, ft7, ft8, ft9, ft10, fa0, fa1, fa2, fa3, fa4, fa5, fa6, fa7]
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defined: a0 is X
// [Asm] defined: a1 is X
// [Asm] defined: a2 is X
// [Asm] defined: a3 is X
// [Asm] defined: a4 is X
// [Asm] defined: a5 is X
// [Asm] defined: a6 is X
// [Asm] defined: a7 is X
// [Asm] defined: t0 is X
// [Asm] defined: t1 is X
// [Asm] defined: t2 is X
// [Asm] defined: t3 is X
// [Asm] defined: t4 is X
// [Asm] defined: ft0 is F
// [Asm] defined: ft1 is F
// [Asm] defined: ft2 is F
// [Asm] defined: ft3 is F
// [Asm] defined: ft4 is F
// [Asm] defined: ft5 is F
// [Asm] defined: ft6 is F
// [Asm] defined: ft7 is F
// [Asm] defined: ft8 is F
// [Asm] defined: ft9 is F
// [Asm] defined: ft10 is F
// [Asm] defined: fa0 is F
// [Asm] defined: fa1 is F
// [Asm] defined: fa2 is F
// [Asm] defined: fa3 is F
// [Asm] defined: fa4 is F
// [Asm] defined: fa5 is F
// [Asm] defined: fa6 is F
// [Asm] defined: fa7 is F
// [Asm] defs: [v2]
// [Asm] live_set: [v2]
// [Asm] move_origin: [a0]
// [Asm] defined: v2 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v10]
// [Asm] live_set: [v10, v2]
// [Asm] move_origin: []
// [Asm] defined: v10 is X
// [Asm] defs: []
// [Asm] live_set: [v2]
// [Asm] move_origin: []
// [Asm] defs: [v7]
// [Asm] live_set: [v7]
// [Asm] move_origin: []
// [Asm] defined: v7 is X
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v7]
// [Asm] defined: v6 is X
// [Asm] defs: []
// [Asm] live_set: [v6]
// [Asm] move_origin: []
// [Asm] defs: [a0]
// [Asm] live_set: [a0]
// [Asm] move_origin: [v6]
// [Asm] defined: a0 is X
// [Asm] defs: []
// [Asm] live_set: [a0]
// [Asm] move_origin: []
// [Asm] defs: []
// [Asm] live_set: []
// [Asm] move_origin: []
// [Asm] defs: [v6]
// [Asm] live_set: [v6]
// [Asm] move_origin: [v5]
// [Asm] defined: v6 is X
// [Asm] graph G {
// [Asm]   graph [label="integer interference graph of read_ch_until_newline_or_eof.433"];
// [Asm]   r0 [label="v8 ← a0", color=green];
// [Asm]   r3 [label="v2 ← a1", color=green];
// [Asm]   r9 [label="a5", color=blue];
// [Asm]   r6 [label="a2", color=blue];
// [Asm]   r13 [label="t1", color=blue];
// [Asm]   r4 [label="a0", color=blue];
// [Asm]   r1 [label="v5 ← a0", color=green];
// [Asm]   r11 [label="a7", color=blue];
// [Asm]   r7 [label="a3", color=blue];
// [Asm]   r10 [label="a6", color=blue];
// [Asm]   r14 [label="t2", color=blue];
// [Asm]   r8 [label="a4", color=blue];
// [Asm]   r5 [label="a1", color=blue];
// [Asm]   r15 [label="t3", color=blue];
// [Asm]   r2 [label="v9 ← a0", color=green];
// [Asm]   r16 [label="t4", color=blue];
// [Asm]   r18 [label="v7 ← a0", color=green];
// [Asm]   r19 [label="v6 ← a0", color=green];
// [Asm]   r17 [label="v10 ← a0", color=green];
// [Asm]   r12 [label="t0", color=blue];
// [Asm]   r4 -- r13;
// [Asm]   r4 -- r7;
// [Asm]   r4 -- r15;
// [Asm]   r3 -- r17;
// [Asm]   r4 -- r16;
// [Asm]   r4 -- r11;
// [Asm]   r4 -- r8;
// [Asm]   r4 -- r5;
// [Asm]   r4 -- r6;
// [Asm]   r4 -- r10;
// [Asm]   r4 -- r14;
// [Asm]   r2 -- r3;
// [Asm]   r4 -- r9;
// [Asm]   r4 -- r12;
// [Asm]   comment = "0:v8-> 1:v5-> 2:v9-> 3:v2-> 17:v10-> 4:a0-> 5:a1-> 6:a2-> 7:a3-> 8:a4-> 9:a5-> 10:a6-> 11:a7-> 12:t0-> 13:t1-> 14:t2-> 15:t3-> 16:t4-> 18:v7-> 19:v6"
// [Asm]   comment = "v8<-a0;v2<-a1;v5<-a0;v9<-a0;v7<-a0;v6<-a0;v10<-a0;"
// [Asm] }
// [Asm] 
// [Asm] graph G {
// [Asm]   graph [label="float interference graph of read_ch_until_newline_or_eof.433"];
// [Asm]   r0 [label="ft0", color=blue];
// [Asm]   r3 [label="ft3", color=blue];
// [Asm]   r9 [label="ft9", color=blue];
// [Asm]   r6 [label="ft6", color=blue];
// [Asm]   r13 [label="fa2", color=blue];
// [Asm]   r4 [label="ft4", color=blue];
// [Asm]   r1 [label="ft1", color=blue];
// [Asm]   r11 [label="fa0", color=blue];
// [Asm]   r7 [label="ft7", color=blue];
// [Asm]   r10 [label="ft10", color=blue];
// [Asm]   r14 [label="fa3", color=blue];
// [Asm]   r8 [label="ft8", color=blue];
// [Asm]   r5 [label="ft5", color=blue];
// [Asm]   r15 [label="fa4", color=blue];
// [Asm]   r2 [label="ft2", color=blue];
// [Asm]   r16 [label="fa5", color=blue];
// [Asm]   r18 [label="fa7", color=blue];
// [Asm]   r17 [label="fa6", color=blue];
// [Asm]   r12 [label="fa1", color=blue];
// [Asm]   comment = "0:ft0-> 1:ft1-> 2:ft2-> 3:ft3-> 4:ft4-> 5:ft5-> 6:ft6-> 7:ft7-> 8:ft8-> 9:ft9-> 10:ft10-> 11:fa0-> 12:fa1-> 13:fa2-> 14:fa3-> 15:fa4-> 16:fa5-> 17:fa6-> 18:fa7"
// [Asm]   comment = ""
// [Asm] }
// [Asm] 
// [Asm] subst   li v8, -1 ->   li a0, -1
// [Asm] subst   mv v5, v2 ->   mv a0, a1
// [Asm] subst   j .read_ch_until_newline_or_eof.433_5 ->   j .read_ch_until_newline_or_eof.433_5
// [Asm] subst   li v9, 13 ->   li a0, 13
// [Asm] subst   bne v2, v9, .read_ch_until_newline_or_eof.433_4 ->   bne a1, a0, .read_ch_until_newline_or_eof.433_4
// [Asm] subst   call minimbt_read_char ->   call minimbt_read_char
// [Asm] subst   mv v2, a0 ->   mv a1, a0
// [Asm] subst   li v10, 10 ->   li a0, 10
// [Asm] subst   beq v2, v10, .read_ch_until_newline_or_eof.433_1 ->   beq a1, a0, .read_ch_until_newline_or_eof.433_1
// [Asm] subst   li v7, -1 ->   li a0, -1
// [Asm] subst   j .read_ch_until_newline_or_eof.433_6 ->   j .read_ch_until_newline_or_eof.433_6
// [Asm] subst   ret ->   ret
// [Asm] before colored: # leaf false
// [Asm] aux.437:
// [Asm] # block info: defs: [v2, v5, v7, v8, v4, v6, v3], uses: [a5, a0, a4, a2, a1, a3, v2], upward_exposed: [a2, a1, a3, a5, a0, a4], params_defs: []
// [Asm] # live_in: [a5, a0, zero, a4, a2, a1, a3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_0:
// [Asm]   # save_ctx1  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   mv v2, a0  # live: [a5, zero, a4, a2, a1, a3, v2]
// [Asm]   mv v3, a1  # live: [v2, a5, zero, a4, a2, a3, v3]
// [Asm]   mv v4, a2  # live: [v2, a5, zero, a4, v4, a3, v3]
// [Asm]   mv v5, a3  # live: [v2, v5, a5, zero, a4, v4, v3]
// [Asm]   mv v6, a4  # live: [v2, v5, a5, zero, v4, v6, v3]
// [Asm]   mv v7, a5  # live: [v2, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v3, v8], upward_exposed: [v3, v8], params_defs: [v8]
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: [v8]
// [Asm] .aux.437_2:
// [Asm] # control
// [Asm]   bge v8, v3, .aux.437_3  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v141, v142, v143, v10], uses: [v141, v5, v142, v143, v10, v8], upward_exposed: [v5, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_4:
// [Asm]   slliw v142, v8, 2  # live: [v5, v142, zero, v7, v8, v4, v6, v3]
// [Asm]   add v143, v5, v142  # live: [v5, zero, v7, v8, v4, v6, v143, v3]
// [Asm]   lw v10, 0(v143)  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   li v141, 62  # live: [v5, v10, zero, v7, v8, v4, v141, v6, v3]
// [Asm]   beq v10, v141, .aux.437_5  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v140], uses: [v140, v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_6:
// [Asm] # control
// [Asm]   li v140, 60  # live: [v5, v10, zero, v7, v8, v4, v6, v140, v3]
// [Asm]   beq v10, v140, .aux.437_7  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v139], uses: [v10, v139], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_8:
// [Asm] # control
// [Asm]   li v139, 43  # live: [v5, v10, zero, v7, v8, v4, v6, v139, v3]
// [Asm]   beq v10, v139, .aux.437_9  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v138], uses: [v10, v138], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_10:
// [Asm] # control
// [Asm]   li v138, 45  # live: [v5, v10, zero, v7, v8, v4, v6, v138, v3]
// [Asm]   beq v10, v138, .aux.437_11  # live: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v137], uses: [v10, v137], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_12:
// [Asm] # control
// [Asm]   li v137, 46  # live: [v5, v10, zero, v8, v7, v4, v6, v137, v3]
// [Asm]   beq v10, v137, .aux.437_13  # live: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v136], uses: [v136, v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v7, v8, v4, v6, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_14:
// [Asm] # control
// [Asm]   li v136, 44  # live: [v5, v10, zero, v8, v7, v136, v4, v6, v3]
// [Asm]   beq v10, v136, .aux.437_15  # live: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v135], uses: [v10, v135], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v5, v10, zero, v8, v7, v4, v6, v3], live_out: [v5, v10, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_16:
// [Asm] # control
// [Asm]   li v135, 91  # live: [v5, v10, zero, v8, v7, v4, v6, v135, v3]
// [Asm]   beq v10, v135, .aux.437_17  # live: [v5, v10, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v134], uses: [v134, v10], upward_exposed: [v10], params_defs: []
// [Asm] # live_in: [v10, v8], live_out: [v8]
// [Asm] # block parameters: []
// [Asm] .aux.437_18:
// [Asm] # control
// [Asm]   li v134, 93  # live: [v134, v10, v8]
// [Asm]   bne v10, v134, .aux.437_25  # live: [v8]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .aux.437_24:
// [Asm] # control
// [Asm]   mv v19, v8  # live: [v19]
// [Asm] 
// [Asm] # block info: defs: [v20], uses: [v19], upward_exposed: [v19], params_defs: [v19]
// [Asm] # live_in: [v19], live_out: [v20]
// [Asm] # block parameters: [v19]
// [Asm] .aux.437_26:
// [Asm] # control
// [Asm]   mv v20, v19  # live: [v20]
// [Asm] 
// [Asm] # block info: defs: [v21], uses: [v20], upward_exposed: [v20], params_defs: [v20]
// [Asm] # live_in: [v20], live_out: [v21]
// [Asm] # block parameters: [v20]
// [Asm] .aux.437_27:
// [Asm] # control
// [Asm]   mv v21, v20  # live: [v21]
// [Asm] 
// [Asm] # block info: defs: [v22], uses: [v21], upward_exposed: [v21], params_defs: [v21]
// [Asm] # live_in: [v21], live_out: [v22]
// [Asm] # block parameters: [v21]
// [Asm] .aux.437_28:
// [Asm] # control
// [Asm]   mv v22, v21  # live: [v22]
// [Asm] 
// [Asm] # block info: defs: [v23], uses: [v22], upward_exposed: [v22], params_defs: [v22]
// [Asm] # live_in: [v22], live_out: [v23]
// [Asm] # block parameters: [v22]
// [Asm] .aux.437_29:
// [Asm] # control
// [Asm]   mv v23, v22  # live: [v23]
// [Asm] 
// [Asm] # block info: defs: [v24], uses: [v23], upward_exposed: [v23], params_defs: [v23]
// [Asm] # live_in: [v23], live_out: [v24]
// [Asm] # block parameters: [v23]
// [Asm] .aux.437_30:
// [Asm] # control
// [Asm]   mv v24, v23  # live: [v24]
// [Asm] 
// [Asm] # block info: defs: [v25], uses: [v24], upward_exposed: [v24], params_defs: [v24]
// [Asm] # live_in: [v24], live_out: [v25]
// [Asm] # block parameters: [v24]
// [Asm] .aux.437_31:
// [Asm] # control
// [Asm]   mv v25, v24  # live: [v25]
// [Asm] 
// [Asm] # block info: defs: [v26], uses: [v25], upward_exposed: [v25], params_defs: [v25]
// [Asm] # live_in: [v25], live_out: [v26]
// [Asm] # block parameters: [v25]
// [Asm] .aux.437_32:
// [Asm] # control
// [Asm]   mv v26, v25  # live: [v26]
// [Asm] 
// [Asm] # block info: defs: [v81], uses: [v26], upward_exposed: [v26], params_defs: [v26]
// [Asm] # live_in: [v26], live_out: [v81]
// [Asm] # block parameters: [v26]
// [Asm] .aux.437_33:
// [Asm] # control
// [Asm]   mv v81, v26  # live: [v81]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v81, a0], upward_exposed: [v81], params_defs: [v81]
// [Asm] # live_in: [v81], live_out: []
// [Asm] # block parameters: [v81]
// [Asm] .aux.437_34:
// [Asm] # control
// [Asm]   mv a0, v81  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v81], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v81]
// [Asm] # block parameters: []
// [Asm] .aux.437_3:
// [Asm] # control
// [Asm]   mv v81, v8  # live: [v81]
// [Asm]   j .aux.437_34  # live: [v81]
// [Asm] 
// [Asm] # block info: defs: [v8, v80, v77, v78], uses: [v8, v4, v80, v77, v78], upward_exposed: [v4, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_5:
// [Asm]   lw v77, 0(v4)  # live: [v5, zero, v77, v7, v8, v4, v6, v3]
// [Asm]   addi v78, v77, 1  # live: [v5, zero, v78, v7, v8, v4, v6, v3]
// [Asm]   sw v78, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v80, v8, 1  # live: [v5, zero, v7, v4, v80, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v80  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v76, v8, v74, v73], uses: [v8, v76, v4, v74, v73], upward_exposed: [v4, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_7:
// [Asm]   lw v73, 0(v4)  # live: [v73, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v74, v73, -1  # live: [v5, zero, v7, v8, v4, v6, v74, v3]
// [Asm]   sw v74, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v76, v8, 1  # live: [v76, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v76  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v72, v69, v68, v8, v92, v90, v70, v89, v93], uses: [v72, v69, v68, v8, v92, v4, v90, v70, v6, v89, v93], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_9:
// [Asm]   lw v68, 0(v4)  # live: [v5, zero, v68, v7, v8, v4, v6, v3]
// [Asm]   slliw v92, v68, 2  # live: [v5, zero, v68, v7, v8, v92, v4, v6, v3]
// [Asm]   add v93, v6, v92  # live: [v93, v5, zero, v68, v7, v8, v4, v6, v3]
// [Asm]   lw v69, 0(v93)  # live: [v5, v69, zero, v68, v7, v8, v4, v6, v3]
// [Asm]   addi v70, v69, 1  # live: [v5, zero, v68, v7, v8, v4, v70, v6, v3]
// [Asm]   slliw v89, v68, 2  # live: [v5, zero, v7, v8, v4, v70, v6, v89, v3]
// [Asm]   add v90, v6, v89  # live: [v5, zero, v7, v8, v4, v90, v70, v6, v3]
// [Asm]   sw v70, 0(v90)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v72, v8, 1  # live: [v72, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v72  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v98, v63, v97, v67, v8, v65, v100, v64, v101], uses: [v98, v63, v97, v67, v8, v4, v65, v6, v100, v64, v101], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_11:
// [Asm]   lw v63, 0(v4)  # live: [v63, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   slliw v100, v63, 2  # live: [v63, v5, zero, v7, v8, v4, v6, v100, v3]
// [Asm]   add v101, v6, v100  # live: [v101, v63, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   lw v64, 0(v101)  # live: [v63, v5, zero, v7, v8, v4, v6, v64, v3]
// [Asm]   addi v65, v64, -1  # live: [v63, v5, zero, v7, v8, v4, v65, v6, v3]
// [Asm]   slliw v97, v63, 2  # live: [v5, zero, v97, v7, v8, v4, v65, v6, v3]
// [Asm]   add v98, v6, v97  # live: [v98, v5, zero, v7, v8, v4, v65, v6, v3]
// [Asm]   sw v65, 0(v98)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v67, v8, 1  # live: [v5, zero, v67, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v67  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v107, ft0, ft1, a1, fa1, v60, v106, fa2, ft6, a4, fa6, v8, a6, ft5, ft10, v59, ft7, v62, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v61], uses: [v106, v62, a0, v8, v107, v59, v4, v6, v60], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_13:
// [Asm]   lw v59, 0(v4)  # live: [v5, zero, v7, v8, v4, v59, v6, v3]
// [Asm]   slliw v106, v59, 2  # live: [v106, v5, zero, v7, v8, v4, v6, v3]
// [Asm]   add v107, v6, v106  # live: [v5, zero, v7, v8, v107, v4, v6, v3]
// [Asm]   lw v60, 0(v107)  # live: [v5, zero, v7, v8, v4, v6, v60, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v60, v3]
// [Asm]   mv a0, v60  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   call minimbt_print_char  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   mv v61, a0  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v62, v8, 1  # live: [v62, v5, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v62  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, v58, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, v111, a3, ft8, a7, t3, fa7, t0, v112, v56, fa5, fa3, ft3, fa0, t4, t2, v55], uses: [v112, v58, v56, a0, v8, v4, v6, v111, v55], upward_exposed: [v4, v6, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_15:
// [Asm]   lw v55, 0(v4)  # live: [v5, zero, v7, v8, v4, v6, v55, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v7, v8, v4, v6, v55, v3]
// [Asm]   call read_ch_until_newline_or_eof.433  # live: [v5, zero, a0, v7, v8, v4, v6, v55, v3]
// [Asm]   mv v56, a0  # live: [v5, v56, zero, v7, v8, v4, v6, v55, v3]
// [Asm]   # restore_ctx2  # live: [v5, v56, zero, v7, v8, v4, v6, v55, v3]
// [Asm]   slliw v111, v55, 2  # live: [v5, v56, zero, v7, v8, v4, v6, v111, v3]
// [Asm]   add v112, v6, v111  # live: [v112, v5, v56, zero, v7, v8, v4, v6, v3]
// [Asm]   sw v56, 0(v112)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   addi v58, v8, 1  # live: [v5, v58, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v8, v58  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v7, v8], upward_exposed: [v7, v8], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_17:
// [Asm]   sw v8, 0(v7)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v28, v130, v131, v29], uses: [v130, v29, zero, v4, v6, v28, v131], upward_exposed: [v4, v6, zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_20:
// [Asm]   lw v28, 0(v4)  # live: [v5, zero, v8, v7, v4, v6, v28, v3]
// [Asm]   slliw v130, v28, 2  # live: [v5, v130, zero, v8, v7, v4, v6, v3]
// [Asm]   add v131, v6, v130  # live: [v5, zero, v8, v7, v4, v6, v131, v3]
// [Asm]   lw v29, 0(v131)  # live: [v5, zero, v29, v8, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   beq v29, zero, .aux.437_21  # live: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, v32, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v31, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [v5, a5, a0, v7, a2, v32, a1, a3, v31, a4, v8, v4, v6, v3], upward_exposed: [v5, v7, v8, v4, v6, v3], params_defs: []
// [Asm] # live_in: [v5, zero, v8, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_22:
// [Asm]   addi v31, v8, 1  # live: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, v6, v31, v3]
// [Asm]   mv a0, v31  # live: [v5, zero, a0, v8, v7, v4, v6, v3]
// [Asm]   mv a1, v3  # live: [v5, zero, a0, v8, v7, v4, v6, a1, v3]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, v8, v7, a2, v4, v6, a1, v3]
// [Asm]   mv a3, v5  # live: [v5, zero, a0, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm]   mv a4, v6  # live: [v5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm]   mv a5, v7  # live: [v5, a5, zero, a0, a4, v8, v7, a2, v4, v6, a1, a3, v3]
// [Asm]   call aux.437  # live: [v5, zero, a0, v7, v8, v4, v6, v3]
// [Asm]   mv v32, a0  # live: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm]   # restore_ctx2  # live: [v5, zero, v7, v8, v4, v32, v6, v3]
// [Asm]   sw v32, 0(v7)  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] # control
// [Asm]   j .aux.437_20  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v34], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v8, v4, v6, v3], live_out: [v5, zero, v7, v4, v6, v34, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_21:
// [Asm]   addi v34, v8, 1  # live: [v5, zero, v7, v4, v6, v34, v3]
// [Asm] # control
// [Asm] 
// [Asm] # block info: defs: [v36, v35], uses: [v34, zero], upward_exposed: [v34, zero], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v4, v6, v34, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_50:
// [Asm] # control
// [Asm]   mv v35, v34  # live: [v5, zero, v7, v35, v4, v6, v3]
// [Asm]   mv v36, zero  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [v3, v35], upward_exposed: [v3, v35], params_defs: [v36, v35]
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: [v35, v36]
// [Asm] .aux.437_52:
// [Asm] # control
// [Asm]   bge v35, v3, .aux.437_53  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v38, v124, v125, v123], uses: [v38, v5, v124, v125, v123, v35], upward_exposed: [v5, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v36, v7, v35, v4, v6, v3], live_out: [v5, zero, v36, v35, v7, v38, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_54:
// [Asm]   slliw v124, v35, 2  # live: [v5, v124, zero, v35, v7, v36, v4, v6, v3]
// [Asm]   add v125, v5, v124  # live: [v5, zero, v125, v35, v7, v36, v4, v6, v3]
// [Asm]   lw v38, 0(v125)  # live: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] # control
// [Asm]   li v123, 91  # live: [v5, zero, v123, v35, v7, v36, v38, v4, v6, v3]
// [Asm]   beq v38, v123, .aux.437_55  # live: [v5, zero, v35, v7, v36, v38, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v122], uses: [v38, v122], upward_exposed: [v38], params_defs: []
// [Asm] # live_in: [v5, zero, v36, v35, v7, v38, v4, v6, v3], live_out: [v5, zero, v35, v7, v36, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_56:
// [Asm] # control
// [Asm]   li v122, 93  # live: [v5, zero, v7, v36, v35, v4, v38, v6, v122, v3]
// [Asm]   bne v38, v122, .aux.437_58  # live: [v5, zero, v7, v36, v35, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [], uses: [zero, v36], upward_exposed: [zero, v36], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_57:
// [Asm] # control
// [Asm]   beq v36, zero, .aux.437_59  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v43, v44, v35], uses: [v36, v43, v44, v35], upward_exposed: [v36, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_60:
// [Asm]   addi v43, v35, 1  # live: [v5, zero, v7, v36, v4, v6, v43, v3]
// [Asm]   addi v44, v36, -1  # live: [v5, zero, v7, v4, v6, v43, v44, v3]
// [Asm] # control
// [Asm]   mv v35, v43  # live: [v5, zero, v7, v35, v4, v6, v44, v3]
// [Asm]   mv v36, v44  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   j .aux.437_52  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [v35], upward_exposed: [v35], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v35, v4, v6, v3], live_out: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_53:
// [Asm] # control
// [Asm]   mv v50, v35  # live: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v51], uses: [v50], upward_exposed: [v50], params_defs: [v50]
// [Asm] # live_in: [v5, zero, v50, v7, v4, v6, v3], live_out: [v3, v5, zero, v7, v4, v6, v51]
// [Asm] # block parameters: [v50]
// [Asm] .aux.437_64:
// [Asm] # control
// [Asm]   mv v51, v50  # live: [v51, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v53, v54, v8], uses: [v7, v53, v54, v51], upward_exposed: [v7, v51], params_defs: [v51]
// [Asm] # live_in: [v51, v5, zero, v7, v4, v6, v3], live_out: [v5, zero, v8, v7, v4, v6, v3]
// [Asm] # block parameters: [v51]
// [Asm] .aux.437_35:
// [Asm]   sw v51, 0(v7)  # live: [v5, zero, v7, v4, v6, v3]
// [Asm]   lw v53, 0(v7)  # live: [v5, v53, zero, v7, v4, v6, v3]
// [Asm]   addi v54, v53, 1  # live: [v5, zero, v7, v4, v6, v54, v3]
// [Asm] # control
// [Asm]   mv v8, v54  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm]   j .aux.437_2  # live: [v5, zero, v7, v8, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v36, v48, v49, v35], uses: [v36, v48, v49, v35], upward_exposed: [v36, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_55:
// [Asm]   addi v48, v35, 1  # live: [v5, v48, zero, v7, v36, v4, v6, v3]
// [Asm]   addi v49, v36, 1  # live: [v5, v49, v48, zero, v7, v4, v6, v3]
// [Asm] # control
// [Asm]   mv v35, v48  # live: [v5, v49, zero, v7, v35, v4, v6, v3]
// [Asm]   mv v36, v49  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   j .aux.437_52  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v41, v35], uses: [v36, v41, v35], upward_exposed: [v36, v35], params_defs: []
// [Asm] # live_in: [v5, zero, v35, v7, v36, v4, v6, v3], live_out: [v5, zero, v36, v7, v35, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_58:
// [Asm]   addi v41, v35, 1  # live: [v5, zero, v7, v36, v4, v41, v6, v3]
// [Asm] # control
// [Asm]   mv v35, v41  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   mv v36, v36  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm]   j .aux.437_52  # live: [v5, zero, v7, v35, v36, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v45], uses: [v35], upward_exposed: [v35], params_defs: []
// [Asm] # live_in: [v5, zero, v7, v35, v4, v6, v3], live_out: [v5, zero, v7, v45, v4, v6, v3]
// [Asm] # block parameters: []
// [Asm] .aux.437_59:
// [Asm] # control
// [Asm]   mv v45, v35  # live: [v5, zero, v45, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v46], uses: [v45], upward_exposed: [v45], params_defs: [v45]
// [Asm] # live_in: [v5, zero, v7, v45, v4, v6, v3], live_out: [v46, v5, zero, v7, v4, v6, v3]
// [Asm] # block parameters: [v45]
// [Asm] .aux.437_61:
// [Asm] # control
// [Asm]   mv v46, v45  # live: [v46, v5, zero, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v47], uses: [v46], upward_exposed: [v46], params_defs: [v46]
// [Asm] # live_in: [v46, v5, zero, v7, v4, v6, v3], live_out: [v5, zero, v7, v47, v4, v6, v3]
// [Asm] # block parameters: [v46]
// [Asm] .aux.437_62:
// [Asm] # control
// [Asm]   mv v47, v46  # live: [v5, zero, v7, v47, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v50], uses: [v47], upward_exposed: [v47], params_defs: [v47]
// [Asm] # live_in: [v5, zero, v7, v47, v4, v6, v3], live_out: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] # block parameters: [v47]
// [Asm] .aux.437_63:
// [Asm] # control
// [Asm]   mv v50, v47  # live: [v5, zero, v50, v7, v4, v6, v3]
// [Asm]   j .aux.437_64  # live: [v5, zero, v50, v7, v4, v6, v3]
// [Asm] 
// [Asm] # block info: defs: [v19], uses: [v8], upward_exposed: [v8], params_defs: []
// [Asm] # live_in: [v8], live_out: [v19]
// [Asm] # block parameters: []
// [Asm] .aux.437_25:
// [Asm] # control
// [Asm]   mv v19, v8  # live: [v19]
// [Asm]   j .aux.437_26  # live: [v19]
// [Asm] 
// [Asm] # leaf false
// [Asm] read_prog.435:
// [Asm] # block info: defs: [v3, v7, v8, v2], uses: [v3, a1, a0, v2], upward_exposed: [a1, a0], params_defs: []
// [Asm] # live_in: [a1, s11, a0, zero], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog.435_5:
// [Asm]   # save_ctx1  # live: [a1, s11, zero, a0]
// [Asm]   mv v2, a0  # live: [a1, s11, zero, v2]
// [Asm]   mv v3, a1  # live: [v2, s11, zero, v3]
// [Asm] # control
// [Asm]   mv v7, v2  # live: [v3, s11, zero, v7]
// [Asm]   mv v8, v3  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, v29, fa6, a4, a6, ft10, ft5, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, v9, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [a0, v9, v29], upward_exposed: [], params_defs: [v8, v7]
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v8, s11, zero, v9, v7]
// [Asm] # block parameters: [v7, v8]
// [Asm] .read_prog.435_0:
// [Asm]   # save_ctx2  # live: [v8, s11, zero, v7]
// [Asm]   call read_ch_until_newline_or_eof.433  # live: [v8, s11, zero, a0, v7]
// [Asm]   mv v9, a0  # live: [v8, s11, zero, v9, v7]
// [Asm]   # restore_ctx2  # live: [v8, s11, zero, v9, v7]
// [Asm] # control
// [Asm]   li v29, -1  # live: [v7, v8, s11, zero, v9, v29]
// [Asm]   bne v9, v29, .read_prog.435_2  # live: [v7, s11, zero, v9, v8]
// [Asm] 
// [Asm] # block info: defs: [t1, v14, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, a6, v4, ft5, ft10, v6, ft7, ft4, v5, v21, ft9, a5, a0, fa4, ft2, a2, v17, a3, ft8, a7, t3, fa7, t0, fa5, v18, fa3, ft3, v23, fa0, t4, t2], uses: [v14, v5, v21, a5, a0, v7, a2, a1, s11, a3, zero, v23, a4, v8, v4, v6], upward_exposed: [v8, s11, zero, v7], params_defs: []
// [Asm] # live_in: [v7, s11, zero, v8], live_out: [v18]
// [Asm] # block parameters: []
// [Asm] .read_prog.435_1:
// [Asm]   addi v4, s11, -4  # live: [zero, v8, v7, v4]
// [Asm]   andi s11, v4, -8  # live: [zero, v8, v7, v4, s11]
// [Asm]   sw zero, 0(v4)  # live: [zero, v8, v7, v4, s11]
// [Asm]   li v23, 1024  # live: [zero, v23, v8, v7, v4, s11]
// [Asm]   mul v14, v23, v23  # live: [v14, zero, v8, v7, v4, s11]
// [Asm]   slliw v21, v14, 2  # live: [v14, v21, zero, v8, v7, v4, s11]
// [Asm]   sub v5, s11, v21  # live: [v5, v14, zero, v8, v7, v4]
// [Asm]   andi s11, v5, -8  # live: [v5, v14, zero, v8, v7, v4, s11]
// [Asm]   mv a1, v14  # live: [v5, zero, v8, v7, v4, s11]
// [Asm]   addi v6, s11, -4  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   andi s11, v6, -8  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   sw zero, 0(v6)  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   # save_ctx2  # live: [v5, zero, v8, v7, v4, v6]
// [Asm]   mv a0, zero  # live: [v5, zero, a0, v8, v7, v4, v6]
// [Asm]   mv a1, v7  # live: [v5, zero, a0, v8, v4, a1, v6]
// [Asm]   mv a2, v4  # live: [v5, zero, a0, v8, a2, a1, v6]
// [Asm]   mv a3, v8  # live: [v5, zero, a0, a2, a1, v6, a3]
// [Asm]   mv a4, v5  # live: [zero, a0, a4, a2, a1, v6, a3]
// [Asm]   mv a5, v6  # live: [a5, zero, a0, a4, a2, a1, a3]
// [Asm]   call aux.437  # live: [zero, a0]
// [Asm]   mv v17, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv v18, zero  # live: [v18]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v18, a0], upward_exposed: [v18], params_defs: [v18]
// [Asm] # live_in: [v18], live_out: []
// [Asm] # block parameters: [v18]
// [Asm] .read_prog.435_3:
// [Asm] # control
// [Asm]   mv a0, v18  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v12, v28, v27, v7], uses: [v27, v8, v7, v12, v28, v9], upward_exposed: [v8, v9, v7], params_defs: []
// [Asm] # live_in: [v7, s11, v9, zero, v8], live_out: [v8, s11, zero, v7]
// [Asm] # block parameters: []
// [Asm] .read_prog.435_2:
// [Asm]   slliw v27, v7, 2  # live: [v7, v8, s11, zero, v9, v27]
// [Asm]   add v28, v8, v27  # live: [v7, s11, v28, zero, v9, v8]
// [Asm]   sw v9, 0(v28)  # live: [v7, s11, zero, v8]
// [Asm]   addi v12, v7, 1  # live: [s11, v12, zero, v8]
// [Asm] # control
// [Asm]   mv v7, v12  # live: [v7, s11, zero, v8]
// [Asm]   mv v8, v8  # live: [v7, s11, zero, v8]
// [Asm]   j .read_prog.435_0  # live: [v7, s11, zero, v8]
// [Asm] 
// [Asm] # leaf false
// [Asm] T$start:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: []
// [Asm] # block parameters: []
// [Asm] .T$start_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call main.434  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   mv a0, v2  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] read_ch_until_newline_or_eof.433:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, ft7, ft4, ft9, v10, a5, fa4, a0, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [v10, a0, v2], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.433_0:
// [Asm]   # save_ctx1  # live: []
// [Asm]   # save_ctx2  # live: []
// [Asm]   call minimbt_read_char  # live: [a0]
// [Asm]   mv v2, a0  # live: [v2]
// [Asm]   # restore_ctx2  # live: [v2]
// [Asm] # control
// [Asm]   li v10, 10  # live: [v10, v2]
// [Asm]   beq v2, v10, .read_ch_until_newline_or_eof.433_1  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v9], uses: [v9, v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v2]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.433_2:
// [Asm] # control
// [Asm]   li v9, 13  # live: [v9, v2]
// [Asm]   bne v2, v9, .read_ch_until_newline_or_eof.433_4  # live: [v2]
// [Asm] 
// [Asm] # block info: defs: [v5, v8], uses: [v8], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.433_3:
// [Asm] # control
// [Asm]   li v8, -1  # live: [v8]
// [Asm]   mv v5, v8  # live: [v5]
// [Asm] 
// [Asm] # block info: defs: [v6], uses: [v5], upward_exposed: [v5], params_defs: [v5]
// [Asm] # live_in: [v5], live_out: [v6]
// [Asm] # block parameters: [v5]
// [Asm] .read_ch_until_newline_or_eof.433_5:
// [Asm] # control
// [Asm]   mv v6, v5  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [a0], uses: [v6, a0], upward_exposed: [v6], params_defs: [v6]
// [Asm] # live_in: [v6], live_out: []
// [Asm] # block parameters: [v6]
// [Asm] .read_ch_until_newline_or_eof.433_6:
// [Asm] # control
// [Asm]   mv a0, v6  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # block info: defs: [v6, v7], uses: [v7], upward_exposed: [], params_defs: []
// [Asm] # live_in: [], live_out: [v6]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.433_1:
// [Asm] # control
// [Asm]   li v7, -1  # live: [v7]
// [Asm]   mv v6, v7  # live: [v6]
// [Asm]   j .read_ch_until_newline_or_eof.433_6  # live: [v6]
// [Asm] 
// [Asm] # block info: defs: [v5], uses: [v2], upward_exposed: [v2], params_defs: []
// [Asm] # live_in: [v2], live_out: [v5]
// [Asm] # block parameters: []
// [Asm] .read_ch_until_newline_or_eof.433_4:
// [Asm] # control
// [Asm]   mv v5, v2  # live: [v5]
// [Asm]   j .read_ch_until_newline_or_eof.433_5  # live: [v5]
// [Asm] 
// [Asm] # leaf false
// [Asm] minimbt_main:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, ra, fa1, fa2, ft6, a4, fa6, a6, ft5, ft10, s0, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, sp, a3, ft8, t3, a7, fa7, t0, fa5, fa3, ft3, fa0, t4, t2], uses: [sp, s0, ra, s11, a0], upward_exposed: [s0, ra, s11], params_defs: []
// [Asm] # live_in: [s0, ra, s11], live_out: []
// [Asm] # block parameters: []
// [Asm] .minimbt_main_b0:
// [Asm]   addi sp, sp, -32  # live: [s0, ra, s11]
// [Asm]   sd ra, 0(sp)  # live: [s0, s11]
// [Asm]   sd s0, 8(sp)  # live: [s11]
// [Asm]   sd s11, 16(sp)  # live: []
// [Asm]   la s11, large_heap_end  # live: []
// [Asm]   mv s0, sp  # live: [s0]
// [Asm]   la sp, large_stack_end  # live: [s0]
// [Asm]   call T$start  # live: [s0, a0]
// [Asm]   mv sp, s0  # live: [a0]
// [Asm]   ld ra, 0(sp)  # live: [a0]
// [Asm]   ld s0, 8(sp)  # live: [a0]
// [Asm]   ld s11, 16(sp)  # live: [a0]
// [Asm]   addi sp, sp, 32  # live: [a0]
// [Asm] # control
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] # leaf false
// [Asm] main.434:
// [Asm] # block info: defs: [t1, ft0, ft1, a1, s11, fa1, fa2, ft6, a4, fa6, v8, a6, ft10, ft5, v4, v6, ft7, ft4, ft9, a5, a0, fa4, ft2, a2, a3, ft8, a7, t3, fa7, t0, fa5, fa3, ft3, fa0, t4, t2, v2], uses: [zero, a0, v8, v6, a1, s11, v2], upward_exposed: [s11, zero], params_defs: []
// [Asm] # live_in: [s11, zero], live_out: []
// [Asm] # block parameters: []
// [Asm] .main.434_0:
// [Asm]   # save_ctx1  # live: [s11, zero]
// [Asm]   li v6, 4096  # live: [v6, s11, zero]
// [Asm]   sub v2, s11, v6  # live: [zero, v2]
// [Asm]   andi s11, v2, -8  # live: [zero, v2]
// [Asm]   li v8, 1024  # live: [v8, zero, v2]
// [Asm]   mv a1, v8  # live: [zero, v2]
// [Asm]   # save_ctx2  # live: [zero, v2]
// [Asm]   mv a0, zero  # live: [zero, a0, v2]
// [Asm]   mv a1, v2  # live: [a1, zero, a0]
// [Asm]   call read_prog.435  # live: [zero, a0]
// [Asm]   mv v4, a0  # live: [zero]
// [Asm]   # restore_ctx2  # live: [zero]
// [Asm] # control
// [Asm]   mv a0, zero  # live: [a0]
// [Asm]   # restore_ctx1  # live: [a0]
// [Asm]   ret  # live: []
// [Asm] 
// [Asm] start:
// [Asm]   .zero 4
// [Asm] 
// [Knf] build_knf: LetRec({name: ("read_ch_until_newline_or_eof", Int), args: [], body: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))}, LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))))
// [Knf] build_knf: Let(("c", Var({val: Some(Int)})), App(Var("read_char"), []), If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))))
// [Knf] build_knf: App(Var("read_char"), [])
// [Knf] build_knf: If(Eq(Var("c"), Int(10)), Neg(Int(1), kind=Some(Int)), If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c")))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(10)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: If(Eq(Var("c"), Int(13)), Neg(Int(1), kind=Some(Int)), Var("c"))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: Int(13)
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: Var("c")
// [Knf] build_knf: LetRec({name: ("bf", Unit), args: [("len", Int), ("prog", Array(Int))], body: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))}, LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), [])))
// [Knf] build_knf: Let(("ptr", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("cells", Var({val: Some(Array(Int))})), Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0)), Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))))
// [Knf] build_knf: Array(Prim(Int(1024), Int(1024), Mul, kind=Some(Int)), Int(0))
// [Knf] build_knf: Prim(Int(1024), Int(1024), Mul, kind=Some(Int))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("next_pc", Var({val: Some(Array(Int))})), Array(Int(1), Int(0)), LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))))
// [Knf] build_knf: Array(Int(1), Int(0))
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("skip", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)})), ("level", Int)], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))}, LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))]), If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")]))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: If(Eq(Var("level"), Int(0)), Var("pc"), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))]))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Prim(Var("level"), Int(1), Sub, kind=Some(Int))])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Prim(Var("level"), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Var("level")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Var("level")])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Var("level")
// [Knf] build_knf: LetRec({name: ("aux", Var({val: Some(Int)})), args: [("pc", Var({val: Some(Int)}))], body: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))}, Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit))
// [Knf] build_knf: If(LE(Var("len"), Var("pc")), Var("pc"), Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("i", Var({val: Some(Int)})), Get(Var("prog"), Var("pc")), If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))))
// [Knf] build_knf: Get(Var("prog"), Var("pc"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: If(Eq(Var("i"), Int(62)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(62)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(60)), Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(60)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("ptr"), Int(0), Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("ptr"), Int(0)), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(43)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(43)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(45)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(45)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Prim(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(1), Sub, kind=Some(Int))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(46)), Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(46)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))]), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("print_char"), [Get(Var("cells"), Get(Var("ptr"), Int(0)))])
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(44)), Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(44)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), [])), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("cells"), Get(Var("ptr"), Int(0)), App(Var("read_ch_until_newline_or_eof"), []))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(91)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))), If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc")))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(91)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), Var("pc")), LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), Var("pc"))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: LetRec({name: ("lp", Var({val: Some(Unit)})), args: [], body: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))}, Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: If(Eq(Get(Var("cells"), Get(Var("ptr"), Int(0))), Int(0)), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit), Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), [])))
// [Knf] build_knf: Get(Var("cells"), Get(Var("ptr"), Int(0)))
// [Knf] build_knf: Var("cells")
// [Knf] build_knf: Get(Var("ptr"), Int(0))
// [Knf] build_knf: Var("ptr")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])), Unit)
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("skip"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int)), Int(0)])
// [Knf] build_knf: Var("skip")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])), App(Var("lp"), []))
// [Knf] build_knf: Put(Var("next_pc"), Int(0), App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: App(Var("aux"), [Prim(Var("pc"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Var("pc"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("lp"), []), App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: App(Var("lp"), [])
// [Knf] build_knf: Var("lp")
// [Knf] build_knf: App(Var("aux"), [Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Prim(Get(Var("next_pc"), Int(0)), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Get(Var("next_pc"), Int(0))
// [Knf] build_knf: Var("next_pc")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Int(1)
// [Knf] build_knf: If(Eq(Var("i"), Int(93)), Var("pc"), Var("pc"))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(93)
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Var("pc")
// [Knf] build_knf: Let(("_", Var({val: Some(Int)})), App(Var("aux"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("aux"), [Int(0)])
// [Knf] build_knf: Var("aux")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: LetRec({name: ("main", Var({val: Some(Unit)})), args: [], body: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))}, App(Var("main"), []))
// [Knf] build_knf: Let(("len", Var({val: Some(Int)})), Int(1024), Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))))
// [Knf] build_knf: Int(1024)
// [Knf] build_knf: Let(("prog", Var({val: Some(Array(Int))})), Array(Var("len"), Int(0)), LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)))
// [Knf] build_knf: Array(Var("len"), Int(0))
// [Knf] build_knf: Var("len")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: LetRec({name: ("read_prog", Var({val: Some(Unit)})), args: [("i", Var({val: Some(Int)}))], body: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))}, Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit))
// [Knf] build_knf: Let(("x", Var({val: Some(Int)})), App(Var("read_ch_until_newline_or_eof"), []), If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))))
// [Knf] build_knf: App(Var("read_ch_until_newline_or_eof"), [])
// [Knf] build_knf: Var("read_ch_until_newline_or_eof")
// [Knf] build_knf: If(Eq(Var("x"), Neg(Int(1), kind=Some(Int))), App(Var("bf"), [Var("i"), Var("prog")]), Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])))
// [Knf] build_knf: Var("x")
// [Knf] build_knf: Neg(Int(1), kind=Some(Int))
// [Knf] build_knf: App(Var("bf"), [Var("i"), Var("prog")])
// [Knf] build_knf: Var("bf")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), Put(Var("prog"), Var("i"), Var("x")), App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))]))
// [Knf] build_knf: Put(Var("prog"), Var("i"), Var("x"))
// [Knf] build_knf: Var("prog")
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Var("x")
// [Knf] build_knf: App(Var("read_prog"), [Prim(Var("i"), Int(1), Add, kind=Some(Int))])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Prim(Var("i"), Int(1), Add, kind=Some(Int))
// [Knf] build_knf: Var("i")
// [Knf] build_knf: Int(1)
// [Knf] build_knf: Let(("_", Var({val: Some(Unit)})), App(Var("read_prog"), [Int(0)]), Unit)
// [Knf] build_knf: App(Var("read_prog"), [Int(0)])
// [Knf] build_knf: Var("read_prog")
// [Knf] build_knf: Int(0)
// [Knf] build_knf: Unit
// [Knf] build_knf: App(Var("main"), [])
// [Knf] build_knf: Var("main")
// [Core] b3 control: Panic -> Jump(target=b5, args=[Int32(val=-1)])
// [Core] b4 control: Panic -> Jump(target=b5, args=[Insn(iref=%0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b1 control: Panic -> Jump(target=b6, args=[Int32(val=-1)])
// [Core] b5 control: Panic -> Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b6 control: Panic -> Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Core] b9 control: Panic -> Jump(target=b11, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b10 control: Jump(target=b2, args=[Insn(iref=%7), Insn(iref=%8)]) already set
// [Core] b7 control: Panic -> Branch(cond=Insn(iref=%6), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b11 control: Panic -> Jump(target=b12, args=[BlockParam(bref=b11, bpref=$b.0)])
// [Core] b8 control: Jump(target=b2, args=[Insn(iref=%9), BlockParam(bref=b2, bpref=$b.1)]) already set
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%5), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[Insn(iref=%3), Insn(iref=%4)]) already set
// [Core] b12 control: Panic -> Jump(target=b13, args=[BlockParam(bref=b12, bpref=$b.0)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%2), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b14, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b13 control: Panic -> Jump(target=b14, args=[BlockParam(bref=b13, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b14 control: Panic -> Return(args=[BlockParam(bref=b14, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f1, fpref=$f.0), FnParam(fref=f1, fpref=$f.1)]) already set
// [Core] b21 control: Jump(target=b2, args=[Insn(iref=%45)]) already set
// [Core] b22 control: Jump(target=b20, args=[]) already set
// [Core] b20 control: Panic -> Branch(cond=Insn(iref=%40), t=b21, t_args=[], f=b22, f_args=[])
// [Core] b23 control: Panic -> Return(args=[BlockParam(bref=b23, bpref=$b.0)])
// [Core] b24 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b25 control: Panic -> Jump(target=b26, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b18 control: Panic -> Branch(cond=Insn(iref=%49), t=b24, t_args=[], f=b25, f_args=[])
// [Core] b17 control: Jump(target=b19, args=[]) already set
// [Core] b26 control: Panic -> Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Core] b16 control: Panic -> Branch(cond=Insn(iref=%36), t=b17, t_args=[], f=b18, f_args=[])
// [Core] b15 control: Jump(target=b2, args=[Insn(iref=%35)]) already set
// [Core] b27 control: Panic -> Jump(target=b28, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Core] b14 control: Panic -> Branch(cond=Insn(iref=%31), t=b15, t_args=[], f=b16, f_args=[])
// [Core] b13 control: Jump(target=b2, args=[Insn(iref=%30)]) already set
// [Core] b28 control: Panic -> Jump(target=b29, args=[BlockParam(bref=b28, bpref=$b.0)])
// [Core] b12 control: Panic -> Branch(cond=Insn(iref=%26), t=b13, t_args=[], f=b14, f_args=[])
// [Core] b11 control: Jump(target=b2, args=[Insn(iref=%25)]) already set
// [Core] b29 control: Panic -> Jump(target=b30, args=[BlockParam(bref=b29, bpref=$b.0)])
// [Core] b10 control: Panic -> Branch(cond=Insn(iref=%19), t=b11, t_args=[], f=b12, f_args=[])
// [Core] b9 control: Jump(target=b2, args=[Insn(iref=%18)]) already set
// [Core] b30 control: Panic -> Jump(target=b31, args=[BlockParam(bref=b30, bpref=$b.0)])
// [Core] b8 control: Panic -> Branch(cond=Insn(iref=%12), t=b9, t_args=[], f=b10, f_args=[])
// [Core] b7 control: Jump(target=b2, args=[Insn(iref=%11)]) already set
// [Core] b31 control: Panic -> Jump(target=b32, args=[BlockParam(bref=b31, bpref=$b.0)])
// [Core] b6 control: Panic -> Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Core] b5 control: Jump(target=b2, args=[Insn(iref=%6)]) already set
// [Core] b32 control: Panic -> Jump(target=b33, args=[BlockParam(bref=b32, bpref=$b.0)])
// [Core] b4 control: Panic -> Branch(cond=Insn(iref=%2), t=b5, t_args=[], f=b6, f_args=[])
// [Core] b3 control: Panic -> Jump(target=b34, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Core] b33 control: Panic -> Jump(target=b34, args=[BlockParam(bref=b33, bpref=$b.0)])
// [Core] b2 control: Panic -> Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Core] b34 control: Panic -> Return(args=[BlockParam(bref=b34, bpref=$b.0)])
// [Core] b0 control: Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)]) already set
// [Core] b1 control: Panic -> Jump(target=b3, args=[Unit])
// [Core] b2 control: Panic -> Jump(target=b3, args=[Insn(iref=%9)])
// [Core] b0 control: Panic -> Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Core] b3 control: Panic -> Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Core] b0 control: Panic -> Return(args=[Unit])
// [Core] b0 control: Panic -> Return(args=[Insn(iref=%0)])
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_heap, @object
// [Main] large_heap:
// [Main]   .zero 1610612736
// [Main] large_heap_end:
// [Main] 
// [Main]   .p2align 4
// [Main]   .bss
// [Main]   .type large_stack, @object
// [Main] large_stack:
// [Main]   .zero 268435456
// [Main] large_stack_end:
// [Main] 
// [Main] __begin_text:
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl aux.437
// [Main]   .type aux.437, @function
// [Main] # leaf false
// [Main] aux.437:
// [Main] .aux.437_0:
// [Main]   addi sp, sp, -64
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   sd s2, 24(sp)
// [Main]   sd s3, 32(sp)
// [Main]   sd s4, 40(sp)
// [Main]   sd s5, 48(sp)
// [Main]   sd s6, 56(sp)
// [Main]   mv s5, a1
// [Main]   mv s3, a2
// [Main]   mv s0, a3
// [Main]   mv s4, a4
// [Main]   mv s2, a5
// [Main]   mv s1, a0
// [Main] 
// [Main] .aux.437_2:
// [Main]   bge s1, s5, .aux.437_3
// [Main] 
// [Main] .aux.437_4:
// [Main]   slliw a0, s1, 2
// [Main]   add a0, s0, a0
// [Main]   lw a0, 0(a0)
// [Main]   li a1, 62
// [Main]   beq a0, a1, .aux.437_5
// [Main] 
// [Main] .aux.437_6:
// [Main]   li a1, 60
// [Main]   beq a0, a1, .aux.437_7
// [Main] 
// [Main] .aux.437_8:
// [Main]   li a1, 43
// [Main]   beq a0, a1, .aux.437_9
// [Main] 
// [Main] .aux.437_10:
// [Main]   li a1, 45
// [Main]   beq a0, a1, .aux.437_11
// [Main] 
// [Main] .aux.437_12:
// [Main]   li a1, 46
// [Main]   beq a0, a1, .aux.437_13
// [Main] 
// [Main] .aux.437_14:
// [Main]   li a1, 44
// [Main]   beq a0, a1, .aux.437_15
// [Main] 
// [Main] .aux.437_16:
// [Main]   li a1, 91
// [Main]   beq a0, a1, .aux.437_17
// [Main] 
// [Main] .aux.437_18:
// [Main]   li a1, 93
// [Main]   bne a0, a1, .aux.437_25
// [Main] 
// [Main] .aux.437_24:
// [Main]   mv a0, s1
// [Main] 
// [Main] .aux.437_26:
// [Main] 
// [Main] .aux.437_27:
// [Main] 
// [Main] .aux.437_28:
// [Main] 
// [Main] .aux.437_29:
// [Main] 
// [Main] .aux.437_30:
// [Main] 
// [Main] .aux.437_31:
// [Main] 
// [Main] .aux.437_32:
// [Main] 
// [Main] .aux.437_33:
// [Main] 
// [Main] .aux.437_34:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   ld s2, 24(sp)
// [Main]   ld s3, 32(sp)
// [Main]   ld s4, 40(sp)
// [Main]   ld s5, 48(sp)
// [Main]   ld s6, 56(sp)
// [Main]   addi sp, sp, 64
// [Main]   ret
// [Main] 
// [Main] .aux.437_3:
// [Main]   mv a0, s1
// [Main]   j .aux.437_34
// [Main] 
// [Main] .aux.437_5:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, 1
// [Main]   sw a0, 0(s3)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_7:
// [Main]   lw a0, 0(s3)
// [Main]   addi a0, a0, -1
// [Main]   sw a0, 0(s3)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_9:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s4, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, 1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_11:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a1, a0, 2
// [Main]   add a1, s4, a1
// [Main]   lw a1, 0(a1)
// [Main]   addi a1, a1, -1
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_13:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   call minimbt_print_char
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_15:
// [Main]   lw s6, 0(s3)
// [Main]   call read_ch_until_newline_or_eof.433
// [Main]   slliw a1, s6, 2
// [Main]   add a1, s4, a1
// [Main]   sw a0, 0(a1)
// [Main]   addi a0, s1, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_17:
// [Main]   sw s1, 0(s2)
// [Main] 
// [Main] .aux.437_20:
// [Main]   lw a0, 0(s3)
// [Main]   slliw a0, a0, 2
// [Main]   add a0, s4, a0
// [Main]   lw a0, 0(a0)
// [Main]   beq a0, zero, .aux.437_21
// [Main] 
// [Main] .aux.437_22:
// [Main]   addi a0, s1, 1
// [Main]   mv a1, s5
// [Main]   mv a2, s3
// [Main]   mv a3, s0
// [Main]   mv a4, s4
// [Main]   mv a5, s2
// [Main]   call aux.437
// [Main]   sw a0, 0(s2)
// [Main]   j .aux.437_20
// [Main] 
// [Main] .aux.437_21:
// [Main]   addi a0, s1, 1
// [Main] 
// [Main] .aux.437_50:
// [Main]   mv a1, zero
// [Main] 
// [Main] .aux.437_52:
// [Main]   bge a0, s5, .aux.437_53
// [Main] 
// [Main] .aux.437_54:
// [Main]   slliw a2, a0, 2
// [Main]   add a2, s0, a2
// [Main]   lw a3, 0(a2)
// [Main]   li a2, 91
// [Main]   beq a3, a2, .aux.437_55
// [Main] 
// [Main] .aux.437_56:
// [Main]   li a2, 93
// [Main]   bne a3, a2, .aux.437_58
// [Main] 
// [Main] .aux.437_57:
// [Main]   beq a1, zero, .aux.437_59
// [Main] 
// [Main] .aux.437_60:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, -1
// [Main]   j .aux.437_52
// [Main] 
// [Main] .aux.437_53:
// [Main] 
// [Main] .aux.437_64:
// [Main] 
// [Main] .aux.437_35:
// [Main]   sw a0, 0(s2)
// [Main]   lw a0, 0(s2)
// [Main]   addi a0, a0, 1
// [Main]   mv s1, a0
// [Main]   j .aux.437_2
// [Main] 
// [Main] .aux.437_55:
// [Main]   addi a0, a0, 1
// [Main]   addi a1, a1, 1
// [Main]   j .aux.437_52
// [Main] 
// [Main] .aux.437_58:
// [Main]   addi a0, a0, 1
// [Main]   j .aux.437_52
// [Main] 
// [Main] .aux.437_59:
// [Main] 
// [Main] .aux.437_61:
// [Main] 
// [Main] .aux.437_62:
// [Main] 
// [Main] .aux.437_63:
// [Main]   j .aux.437_64
// [Main] 
// [Main] .aux.437_25:
// [Main]   mv a0, s1
// [Main]   j .aux.437_26
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_prog.435
// [Main]   .type read_prog.435, @function
// [Main] # leaf false
// [Main] read_prog.435:
// [Main] .read_prog.435_5:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s1, 16(sp)
// [Main]   mv s0, a0
// [Main]   mv s1, a1
// [Main] 
// [Main] .read_prog.435_0:
// [Main]   call read_ch_until_newline_or_eof.433
// [Main]   mv a1, a0
// [Main]   li a0, -1
// [Main]   bne a1, a0, .read_prog.435_2
// [Main] 
// [Main] .read_prog.435_1:
// [Main]   addi a2, s11, -4
// [Main]   andi s11, a2, -8
// [Main]   sw zero, 0(a2)
// [Main]   li a0, 1024
// [Main]   mul a0, a0, a0
// [Main]   slliw a1, a0, 2
// [Main]   sub a4, s11, a1
// [Main]   andi s11, a4, -8
// [Main]   mv a1, a0
// [Main]   addi a5, s11, -4
// [Main]   andi s11, a5, -8
// [Main]   sw zero, 0(a5)
// [Main]   mv a0, zero
// [Main]   mv a1, s0
// [Main]   mv a3, s1
// [Main]   call aux.437
// [Main]   mv a0, zero
// [Main] 
// [Main] .read_prog.435_3:
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s1, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main] .read_prog.435_2:
// [Main]   slliw a0, s0, 2
// [Main]   add a0, s1, a0
// [Main]   sw a1, 0(a0)
// [Main]   addi a0, s0, 1
// [Main]   mv s0, a0
// [Main]   j .read_prog.435_0
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl T$start
// [Main]   .type T$start, @function
// [Main] # leaf false
// [Main] T$start:
// [Main] .T$start_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call main.434
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl read_ch_until_newline_or_eof.433
// [Main]   .type read_ch_until_newline_or_eof.433, @function
// [Main] # leaf false
// [Main] read_ch_until_newline_or_eof.433:
// [Main] .read_ch_until_newline_or_eof.433_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   call minimbt_read_char
// [Main]   mv a1, a0
// [Main]   li a0, 10
// [Main]   beq a1, a0, .read_ch_until_newline_or_eof.433_1
// [Main] 
// [Main] .read_ch_until_newline_or_eof.433_2:
// [Main]   li a0, 13
// [Main]   bne a1, a0, .read_ch_until_newline_or_eof.433_4
// [Main] 
// [Main] .read_ch_until_newline_or_eof.433_3:
// [Main]   li a0, -1
// [Main] 
// [Main] .read_ch_until_newline_or_eof.433_5:
// [Main] 
// [Main] .read_ch_until_newline_or_eof.433_6:
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] .read_ch_until_newline_or_eof.433_1:
// [Main]   li a0, -1
// [Main]   j .read_ch_until_newline_or_eof.433_6
// [Main] 
// [Main] .read_ch_until_newline_or_eof.433_4:
// [Main]   mv a0, a1
// [Main]   j .read_ch_until_newline_or_eof.433_5
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl minimbt_main
// [Main]   .type minimbt_main, @function
// [Main] # leaf false
// [Main] minimbt_main:
// [Main] .minimbt_main_b0:
// [Main]   addi sp, sp, -32
// [Main]   sd ra, 0(sp)
// [Main]   sd s0, 8(sp)
// [Main]   sd s11, 16(sp)
// [Main]   la s11, large_heap_end
// [Main]   mv s0, sp
// [Main]   la sp, large_stack_end
// [Main]   call T$start
// [Main]   mv sp, s0
// [Main]   ld ra, 0(sp)
// [Main]   ld s0, 8(sp)
// [Main]   ld s11, 16(sp)
// [Main]   addi sp, sp, 32
// [Main]   ret
// [Main] 
// [Main]   .p2align 2
// [Main]   .text
// [Main]   .globl main.434
// [Main]   .type main.434, @function
// [Main] # leaf false
// [Main] main.434:
// [Main] .main.434_0:
// [Main]   addi sp, sp, -16
// [Main]   sd ra, 0(sp)
// [Main]   li a0, 4096
// [Main]   sub a2, s11, a0
// [Main]   andi s11, a2, -8
// [Main]   li a0, 1024
// [Main]   mv a1, a0
// [Main]   mv a0, zero
// [Main]   mv a1, a2
// [Main]   call read_prog.435
// [Main]   mv a0, zero
// [Main]   ld ra, 0(sp)
// [Main]   addi sp, sp, 16
// [Main]   ret
// [Main] 
// [Main] __end_text:
// [Main]   .p2align 2
// [Main]   .bss
// [Main]   .globl start
// [Main]   .type start, @object
// [Main] start:
// [Main]   .zero 4
// [Main] 
// [Wasm] Lowering function main.434
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering insn Call(ty=Unit, f=f3, args=[Int32(val=0), Mem(fref=f4, mref=m0)])
// [Wasm] Get Local name Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowering control Return(args=[Unit])
// [Wasm] Local Mem(fref=f4, mref=m0) -> $f4.m0
// [Wasm] Lowered function main.434 to wasm
// [Wasm] Lowering function T$start
// [Wasm] Lowering insn Call(ty=Unit, f=f4, args=[])
// [Wasm] Lowering control Return(args=[Insn(iref=%0)])
// [Wasm] Lowered function T$start to wasm
// [Wasm] Lowering function aux.437
// [Wasm] Lowering control Return(args=[BlockParam(bref=b34, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b34, bpref=$b.0) -> $b34.$b.0
// [Wasm] Lowering control Jump(target=b34, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b34, bpref=$b.0) -> $b34.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%3), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32), val=Insn(iref=%4))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%4) -> $%4
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%6)])
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%8), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32), val=Insn(iref=%9))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%9) -> $%9
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%11)])
// [Wasm] Get Local name Insn(iref=%11) -> $%11
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%13), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%15), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%15) -> $%15
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%13), width=@32), val=Insn(iref=%16))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%13) -> $%13
// [Wasm] Get Local name Insn(iref=%16) -> $%16
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%18)])
// [Wasm] Get Local name Insn(iref=%18) -> $%18
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%20), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[Insn(iref=%22), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%22) -> $%22
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%20), width=@32), val=Insn(iref=%23))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%20) -> $%20
// [Wasm] Get Local name Insn(iref=%23) -> $%23
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%25)])
// [Wasm] Get Local name Insn(iref=%25) -> $%25
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%27), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%27) -> $%27
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn ExtCall(ty=Unit, ext_f="minimbt_print_char", args=[Insn(iref=%28)])
// [Wasm] Get Local name Insn(iref=%28) -> $%28
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%30)])
// [Wasm] Get Local name Insn(iref=%30) -> $%30
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%32), width=@32), val=Insn(iref=%33))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%32) -> $%32
// [Wasm] Get Local name Insn(iref=%33) -> $%33
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%35)])
// [Wasm] Get Local name Insn(iref=%35) -> $%35
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.5), index=0, width=@32), val=BlockParam(bref=b35, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.5), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[Insn(iref=%44), Int32(val=1)])
// [Wasm] Get Local name Insn(iref=%44) -> $%44
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Lowering control Jump(target=b2, args=[Insn(iref=%45)])
// [Wasm] Get Local name Insn(iref=%45) -> $%45
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b35, args=[BlockParam(bref=b64, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Get Local name BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Lowering control Jump(target=b64, args=[BlockParam(bref=b52, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b52, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b52, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Lowering control Jump(target=b52, args=[Insn(iref=%53), Insn(iref=%54)])
// [Wasm] Get Local name Insn(iref=%53) -> $%53
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%54) -> $%54
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Lowering control Jump(target=b64, args=[BlockParam(bref=b63, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Get Local name BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Lowering control Jump(target=b63, args=[BlockParam(bref=b62, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Get Local name BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Lowering control Jump(target=b62, args=[BlockParam(bref=b61, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Get Local name BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Lowering control Jump(target=b61, args=[BlockParam(bref=b52, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b52, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Lowering insn Op(ty=Int32, op=Sub, args=[BlockParam(bref=b52, bpref=$b.1), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Lowering control Jump(target=b52, args=[Insn(iref=%57), Insn(iref=%58)])
// [Wasm] Get Local name Insn(iref=%57) -> $%57
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%58) -> $%58
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[BlockParam(bref=b52, bpref=$b.1), Int32(val=0)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering control Branch(cond=Insn(iref=%56), t=b59, t_args=[], f=b60, f_args=[])
// [Wasm] Get Local name Insn(iref=%56) -> $%56
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b52, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Lowering control Jump(target=b52, args=[Insn(iref=%59), BlockParam(bref=b52, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%59) -> $%59
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%51), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering control Branch(cond=Insn(iref=%55), t=b57, t_args=[], f=b58, f_args=[])
// [Wasm] Get Local name Insn(iref=%55) -> $%55
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.3), offset=BlockParam(bref=b52, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%51), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%51) -> $%51
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering control Branch(cond=Insn(iref=%52), t=b55, t_args=[], f=b56, f_args=[])
// [Wasm] Get Local name Insn(iref=%52) -> $%52
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b52, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering control Branch(cond=Insn(iref=%50), t=b53, t_args=[], f=b54, f_args=[])
// [Wasm] Get Local name Insn(iref=%50) -> $%50
// [Wasm] Lowering control Jump(target=b51, args=[Insn(iref=%41), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Get Local name BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%41) -> $%41
// [Wasm] Lowering control Jump(target=b50, args=[])
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b2, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Insn(iref=%46), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.2), FnParam(fref=f2, fpref=$f.3), FnParam(fref=f2, fpref=$f.4), FnParam(fref=f2, fpref=$f.5)])
// [Wasm] Get Local name Insn(iref=%46) -> $%46
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.5), index=0, width=@32), val=Insn(iref=%47))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name Insn(iref=%47) -> $%47
// [Wasm] Lowering control Jump(target=b20, args=[])
// [Wasm] Lowering insn Load(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.2), index=0, width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.4), offset=Insn(iref=%38), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name Insn(iref=%38) -> $%38
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%39), Int32(val=0)])
// [Wasm] Get Local name Insn(iref=%39) -> $%39
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering control Branch(cond=Insn(iref=%40), t=b21, t_args=[], f=b22, f_args=[])
// [Wasm] Get Local name Insn(iref=%40) -> $%40
// [Wasm] Lowering insn Store(ty=Int32, ma=Field(ty=Int32, val=FnParam(fref=f2, fpref=$f.5), index=0, width=@32), val=BlockParam(bref=b2, bpref=$b.0))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Lowering control Jump(target=b19, args=[])
// [Wasm] Lowering control Jump(target=b34, args=[BlockParam(bref=b33, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b33, bpref=$b.0) -> $b33.$b.0
// [Wasm] Get Local name BlockParam(bref=b34, bpref=$b.0) -> $b34.$b.0
// [Wasm] Lowering control Jump(target=b33, args=[BlockParam(bref=b32, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b32, bpref=$b.0) -> $b32.$b.0
// [Wasm] Get Local name BlockParam(bref=b33, bpref=$b.0) -> $b33.$b.0
// [Wasm] Lowering control Jump(target=b32, args=[BlockParam(bref=b31, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Get Local name BlockParam(bref=b32, bpref=$b.0) -> $b32.$b.0
// [Wasm] Lowering control Jump(target=b31, args=[BlockParam(bref=b30, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b30, bpref=$b.0) -> $b30.$b.0
// [Wasm] Get Local name BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Lowering control Jump(target=b30, args=[BlockParam(bref=b29, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Get Local name BlockParam(bref=b30, bpref=$b.0) -> $b30.$b.0
// [Wasm] Lowering control Jump(target=b29, args=[BlockParam(bref=b28, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b28, bpref=$b.0) -> $b28.$b.0
// [Wasm] Get Local name BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Lowering control Jump(target=b28, args=[BlockParam(bref=b27, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Get Local name BlockParam(bref=b28, bpref=$b.0) -> $b28.$b.0
// [Wasm] Lowering control Jump(target=b27, args=[BlockParam(bref=b26, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Get Local name BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering control Jump(target=b26, args=[BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=93)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering control Branch(cond=Insn(iref=%49), t=b24, t_args=[], f=b25, f_args=[])
// [Wasm] Get Local name Insn(iref=%49) -> $%49
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=91)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering control Branch(cond=Insn(iref=%36), t=b17, t_args=[], f=b18, f_args=[])
// [Wasm] Get Local name Insn(iref=%36) -> $%36
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=44)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering control Branch(cond=Insn(iref=%31), t=b15, t_args=[], f=b16, f_args=[])
// [Wasm] Get Local name Insn(iref=%31) -> $%31
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=46)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering control Branch(cond=Insn(iref=%26), t=b13, t_args=[], f=b14, f_args=[])
// [Wasm] Get Local name Insn(iref=%26) -> $%26
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=45)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering control Branch(cond=Insn(iref=%19), t=b11, t_args=[], f=b12, f_args=[])
// [Wasm] Get Local name Insn(iref=%19) -> $%19
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=43)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering control Branch(cond=Insn(iref=%12), t=b9, t_args=[], f=b10, f_args=[])
// [Wasm] Get Local name Insn(iref=%12) -> $%12
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=60)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering control Branch(cond=Insn(iref=%7), t=b7, t_args=[], f=b8, f_args=[])
// [Wasm] Get Local name Insn(iref=%7) -> $%7
// [Wasm] Lowering insn Load(ty=Int32, ma=Offset(ty=Int32, val=FnParam(fref=f2, fpref=$f.3), offset=BlockParam(bref=b2, bpref=$b.0), width=@32))
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%1), Int32(val=62)])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b5, t_args=[], f=b6, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn Op(ty=Bool, op=Le, args=[FnParam(fref=f2, fpref=$f.1), BlockParam(bref=b2, bpref=$b.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Branch(cond=Insn(iref=%0), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering control Jump(target=b1, args=[FnParam(fref=f2, fpref=$f.0)])
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.2) -> $$f.2
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.3) -> $$f.3
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.4) -> $$f.4
// [Wasm] Get Local name FnParam(fref=f2, fpref=$f.5) -> $$f.5
// [Wasm] Local Insn(iref=%15) -> $%15
// [Wasm] Local Insn(iref=%41) -> $%41
// [Wasm] Local Insn(iref=%33) -> $%33
// [Wasm] Local BlockParam(bref=b28, bpref=$b.0) -> $b28.$b.0
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local BlockParam(bref=b34, bpref=$b.0) -> $b34.$b.0
// [Wasm] Local Insn(iref=%27) -> $%27
// [Wasm] Local Insn(iref=%25) -> $%25
// [Wasm] Local Insn(iref=%39) -> $%39
// [Wasm] Local Insn(iref=%59) -> $%59
// [Wasm] Local BlockParam(bref=b26, bpref=$b.0) -> $b26.$b.0
// [Wasm] Local BlockParam(bref=b35, bpref=$b.0) -> $b35.$b.0
// [Wasm] Local Insn(iref=%4) -> $%4
// [Wasm] Local Insn(iref=%56) -> $%56
// [Wasm] Local Insn(iref=%49) -> $%49
// [Wasm] Local Insn(iref=%26) -> $%26
// [Wasm] Local Insn(iref=%31) -> $%31
// [Wasm] Local BlockParam(bref=b63, bpref=$b.0) -> $b63.$b.0
// [Wasm] Local Insn(iref=%38) -> $%38
// [Wasm] Local Insn(iref=%16) -> $%16
// [Wasm] Local Insn(iref=%53) -> $%53
// [Wasm] Local Insn(iref=%54) -> $%54
// [Wasm] Local Insn(iref=%19) -> $%19
// [Wasm] Local BlockParam(bref=b62, bpref=$b.0) -> $b62.$b.0
// [Wasm] Local Insn(iref=%13) -> $%13
// [Wasm] Local BlockParam(bref=b61, bpref=$b.0) -> $b61.$b.0
// [Wasm] Local BlockParam(bref=b33, bpref=$b.0) -> $b33.$b.0
// [Wasm] Local Insn(iref=%55) -> $%55
// [Wasm] Local BlockParam(bref=b27, bpref=$b.0) -> $b27.$b.0
// [Wasm] Local Insn(iref=%7) -> $%7
// [Wasm] Local Insn(iref=%23) -> $%23
// [Wasm] Local Insn(iref=%20) -> $%20
// [Wasm] Local Insn(iref=%36) -> $%36
// [Wasm] Local BlockParam(bref=b31, bpref=$b.0) -> $b31.$b.0
// [Wasm] Local BlockParam(bref=b2, bpref=$b.0) -> $b2.$b.0
// [Wasm] Local Insn(iref=%50) -> $%50
// [Wasm] Local Insn(iref=%51) -> $%51
// [Wasm] Local Insn(iref=%52) -> $%52
// [Wasm] Local Insn(iref=%44) -> $%44
// [Wasm] Local Insn(iref=%32) -> $%32
// [Wasm] Local Insn(iref=%58) -> $%58
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%11) -> $%11
// [Wasm] Local Insn(iref=%57) -> $%57
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local BlockParam(bref=b52, bpref=$b.1) -> $b52.$b.1
// [Wasm] Local Insn(iref=%35) -> $%35
// [Wasm] Local BlockParam(bref=b32, bpref=$b.0) -> $b32.$b.0
// [Wasm] Local BlockParam(bref=b29, bpref=$b.0) -> $b29.$b.0
// [Wasm] Local Insn(iref=%28) -> $%28
// [Wasm] Local Insn(iref=%46) -> $%46
// [Wasm] Local Insn(iref=%9) -> $%9
// [Wasm] Local Insn(iref=%45) -> $%45
// [Wasm] Local Insn(iref=%47) -> $%47
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Insn(iref=%18) -> $%18
// [Wasm] Local BlockParam(bref=b52, bpref=$b.0) -> $b52.$b.0
// [Wasm] Local Insn(iref=%22) -> $%22
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Local Insn(iref=%30) -> $%30
// [Wasm] Local BlockParam(bref=b30, bpref=$b.0) -> $b30.$b.0
// [Wasm] Local Insn(iref=%40) -> $%40
// [Wasm] Local Insn(iref=%12) -> $%12
// [Wasm] Local BlockParam(bref=b64, bpref=$b.0) -> $b64.$b.0
// [Wasm] Lowered function aux.437 to wasm
// [Wasm] Lowering function read_prog.435
// [Wasm] Lowering control Return(args=[BlockParam(bref=b3, bpref=$b.0)])
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m0, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Lowering insn Op(ty=Int32, op=Mul, args=[Int32(val=1024), Int32(val=1024)])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m1, fills=[Zero])
// [Wasm] Get Local name Insn(iref=%3) -> $%3
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Lowering insn Alloc(ty=Array(elem=Int32), mref=m2, fills=[Zero])
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Lowering insn Call(ty=Int32, f=f2, args=[Int32(val=0), BlockParam(bref=b0, bpref=$b.0), Mem(fref=f3, mref=m0), BlockParam(bref=b0, bpref=$b.1), Mem(fref=f3, mref=m1), Mem(fref=f3, mref=m2)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Get Local name Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Get Local name Insn(iref=%6) -> $%6
// [Wasm] Lowering control Jump(target=b3, args=[Unit])
// [Wasm] Lowering insn Store(ty=Int32, ma=Offset(ty=Int32, val=BlockParam(bref=b0, bpref=$b.1), offset=BlockParam(bref=b0, bpref=$b.0), width=@32), val=Insn(iref=%0))
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Int32, op=Add, args=[BlockParam(bref=b0, bpref=$b.0), Int32(val=1)])
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Lowering control Jump(target=b0, args=[Insn(iref=%8), BlockParam(bref=b0, bpref=$b.1)])
// [Wasm] Get Local name Insn(iref=%8) -> $%8
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Lowering insn Call(ty=Int32, f=f0, args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=-1)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Jump(target=b4, args=[FnParam(fref=f3, fpref=$f.0), FnParam(fref=f3, fpref=$f.1)])
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Get Local name BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.0) -> $$f.0
// [Wasm] Get Local name FnParam(fref=f3, fpref=$f.1) -> $$f.1
// [Wasm] Local Insn(iref=%3) -> $%3
// [Wasm] Local Mem(fref=f3, mref=m0) -> $f3.m0
// [Wasm] Local Mem(fref=f3, mref=m1) -> $f3.m1
// [Wasm] Local Insn(iref=%8) -> $%8
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b0, bpref=$b.0) -> $b0.$b.0
// [Wasm] Local BlockParam(bref=b0, bpref=$b.1) -> $b0.$b.1
// [Wasm] Local Insn(iref=%6) -> $%6
// [Wasm] Local Mem(fref=f3, mref=m2) -> $f3.m2
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Lowered function read_prog.435 to wasm
// [Wasm] Lowering function read_ch_until_newline_or_eof.433
// [Wasm] Lowering control Return(args=[BlockParam(bref=b6, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b6, args=[BlockParam(bref=b5, bpref=$b.0)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Get Local name BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Int32(val=-1)])
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering control Jump(target=b5, args=[Insn(iref=%0)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=13)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering control Branch(cond=Insn(iref=%2), t=b3, t_args=[], f=b4, f_args=[])
// [Wasm] Get Local name Insn(iref=%2) -> $%2
// [Wasm] Lowering insn ExtCall(ty=Int32, ext_f="minimbt_read_char", args=[])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Lowering insn Op(ty=Bool, op=Eq, args=[Insn(iref=%0), Int32(val=10)])
// [Wasm] Get Local name Insn(iref=%0) -> $%0
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Lowering control Branch(cond=Insn(iref=%1), t=b1, t_args=[], f=b2, f_args=[])
// [Wasm] Get Local name Insn(iref=%1) -> $%1
// [Wasm] Local Insn(iref=%1) -> $%1
// [Wasm] Local BlockParam(bref=b5, bpref=$b.0) -> $b5.$b.0
// [Wasm] Local BlockParam(bref=b6, bpref=$b.0) -> $b6.$b.0
// [Wasm] Local Insn(iref=%0) -> $%0
// [Wasm] Local Insn(iref=%2) -> $%2
// [Wasm] Lowered function read_ch_until_newline_or_eof.433 to wasm
// [KnfOpt] func_tre: read_ch_until_newline_or_eof.1 false
// [KnfOpt] func_tre: bf.5 false
// [KnfOpt] func_tre: skip.19 true
// [KnfOpt] func_tre: aux.36 true
// [KnfOpt] func_tre: lp.96 true
// [KnfOpt] func_tre: main.120 false
// [KnfOpt] func_tre: read_prog.124 false
// [KnfOpt] freq: {read_ch_until_newline_or_eof.1: Many(2), bf.5: Once, skip.19: Once, skip.133: Many(4), aux.36: Many(2), aux.166: Many(8), lp.226: Once, lp.227: Many(2), main.120: Once, read_prog.124: Many(2)}
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Knf inline Some(skip) let _236: Var({val: Some(Int)}) = Unit
// [KnfOpt] let _237: Unit = Put next_pc.18[_232] = _236
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 2 185
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.36 rejected
// [KnfOpt] Knf inline Some(lp) let _243: Var({val: Some(Unit)}) = Unit
// [KnfOpt] let _244: Int = Int(0)
// [KnfOpt] let _245: Int = Get next_pc.18[_244]
// [KnfOpt] let _246: Int = Int(1)
// [KnfOpt] let _247: Int = Add(_245, _246)
// [KnfOpt] Jump(aux.166, [_247, ])
// [KnfOpt] Inline threshold 2 185
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.36 rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Knf inline Some(bf) Unit
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision read_prog.124 rejected
// [KnfOpt] Inline threshold 2 13
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision read_prog.124 rejected
// [KnfOpt] freq: {read_ch_until_newline_or_eof.1: Many(2), main.120: Once, read_prog.124: Many(2), skip.293: Once, skip.296: Many(4), aux.313: Many(2), aux.315: Many(8), lp.375: Once, lp.376: Many(2)}
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Inline threshold 2 11
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision read_ch_until_newline_or_eof.1 rejected
// [KnfOpt] Knf inline Some(skip) let _385: Var({val: Some(Int)}) = Unit
// [KnfOpt] let _386: Unit = Put next_pc.292[_381] = _385
// [KnfOpt] Unit
// [KnfOpt] Inline threshold 2 185
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.313 rejected
// [KnfOpt] Knf inline Some(lp) let _392: Var({val: Some(Unit)}) = Unit
// [KnfOpt] let _393: Int = Int(0)
// [KnfOpt] let _394: Int = Get next_pc.292[_393]
// [KnfOpt] let _395: Int = Int(1)
// [KnfOpt] let _396: Int = Add(_394, _395)
// [KnfOpt] Jump(aux.315, [_396, ])
// [KnfOpt] Inline threshold 2 185
// [KnfOpt] Fn like 0
// [KnfOpt] Inline decision aux.313 rejected
// [KnfOpt] Numbers of let rec: 5 5 0
// [Parser] flags: []
// [CoreOpt] eliminated tail rec call %9: Call(ty=Unit, f=f3, args=[Insn(iref=%8), FnParam(fref=f3, fpref=$f.1)])
// [CoreOpt] Call frequnce: FnCallFreq({f4: Once, f1: Once, f10: Once, f2: Multiple, f3: Once, f0: Multiple})
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] post splitting: Insn(iref=%42) -> BlockParam(bref=b35, bpref=$b.0)
// [CoreOpt] aux.437 is inlining Call(ty=Int32, f=f1, args=[Insn(iref=%41), Int32(val=0), FnParam(fref=f2, fpref=$f.1), FnParam(fref=f2, fpref=$f.3)])
// [CoreOpt] shifted callee .fn skip.436 #f1 : fn(int32, int32, int32, array[int32]) -> int32
// [CoreOpt] .freevars ()
// [CoreOpt] .entry b50 {
// [CoreOpt]   .bb #b50 () {
// [CoreOpt]     jump b51($f0, $f1)
// [CoreOpt]   }
// [CoreOpt]   .loop #b51 pre #Some(b50) header #b52 {
// [CoreOpt]     .block #b53
// [CoreOpt]     .block #b54
// [CoreOpt]     .block #b55
// [CoreOpt]     .block #b56
// [CoreOpt]     .block #b57
// [CoreOpt]     .block #b58
// [CoreOpt]     .block #b59
// [CoreOpt]     .block #b60
// [CoreOpt]     .block #b61
// [CoreOpt]     .block #b62
// [CoreOpt]     .block #b63
// [CoreOpt]     .block #b64
// [CoreOpt]   }
// [CoreOpt]   .bb #b52 (int32, int32) {
// [CoreOpt]     let %50: bool = le($f2, $b52.0)
// [CoreOpt]     br %50 b53() b54()
// [CoreOpt]   }
// [CoreOpt]   .bb #b53 () {
// [CoreOpt]     jump b64($b52.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b54 () {
// [CoreOpt]     let %51: int32 = load int32 offset($f3, $b52.0 * @32)
// [CoreOpt]     let %52: bool = eq(%51, 91)
// [CoreOpt]     br %52 b55() b56()
// [CoreOpt]   }
// [CoreOpt]   .bb #b55 () {
// [CoreOpt]     let %53: int32 = add($b52.0, 1)
// [CoreOpt]     let %54: int32 = add($b52.1, 1)
// [CoreOpt]     jump b52(%53, %54)
// [CoreOpt]   }
// [CoreOpt]   .bb #b56 () {
// [CoreOpt]     let %55: bool = eq(%51, 93)
// [CoreOpt]     br %55 b57() b58()
// [CoreOpt]   }
// [CoreOpt]   .bb #b57 () {
// [CoreOpt]     let %56: bool = eq($b52.1, 0)
// [CoreOpt]     br %56 b59() b60()
// [CoreOpt]   }
// [CoreOpt]   .bb #b58 () {
// [CoreOpt]     let %59: int32 = add($b52.0, 1)
// [CoreOpt]     jump b52(%59, $b52.1)
// [CoreOpt]   }
// [CoreOpt]   .bb #b59 () {
// [CoreOpt]     jump b61($b52.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b60 () {
// [CoreOpt]     let %57: int32 = add($b52.0, 1)
// [CoreOpt]     let %58: int32 = sub($b52.1, 1)
// [CoreOpt]     jump b52(%57, %58)
// [CoreOpt]   }
// [CoreOpt]   .bb #b61 (int32) {
// [CoreOpt]     jump b62($b61.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b62 (int32) {
// [CoreOpt]     jump b63($b62.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b63 (any) {
// [CoreOpt]     jump b64($b63.0)
// [CoreOpt]   }
// [CoreOpt]   .bb #b64 (int32) {
// [CoreOpt]     return $b64.0
// [CoreOpt]   }
// [CoreOpt] }
// [CoreOpt] 
// [CoreOpt] Remove dead function: f1
// [CoreOpt] LVN subst Insn(iref=%14) with Insn(iref=%13)
// [CoreOpt] LVN subst Insn(iref=%21) with Insn(iref=%20)
